(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verismo (https://www.usenix.org/conference/osdi24/presentation/zhou) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Ok. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Ok_0. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%2.spec_len. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!std_specs.vec.vec_clone_trigger. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.take. FuelId)
(declare-const fuel%vstd!seq.impl&%0.skip. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.insert. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.remove. FuelId)
(declare-const fuel%vstd!set.impl&%0.full. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.is_empty. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%8.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%16.view. FuelId)
(declare-const fuel%vstd!view.impl&%18.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%22.view. FuelId)
(declare-const fuel%vstd!view.impl&%36.view. FuelId)
(declare-const fuel%vstd!view.impl&%38.view. FuelId)
(declare-const fuel%vstd!view.impl&%40.view. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_nat_pow2. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_Secret. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec_val. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec__unused. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec_labels. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%12.is_constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%15.is_constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.wf_value. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.bop_new. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.uop_new. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%17.spec_constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%20.wf. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%92.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%93.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%95.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%96.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%98.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%99.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%101.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%102.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%104.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%105.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%176.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%177.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%250.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%251.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%324.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%325.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%398.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%399.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%472.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%473.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%476.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%477.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%480.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%481.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%514.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%515.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%516.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%517.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%518.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%519.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%526.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%527.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%534.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%535.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%568.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%569.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%570.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%571.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%572.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%573.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%580.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%581.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%588.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%589.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%622.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%623.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%624.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%625.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%626.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%627.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%634.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%635.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%642.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%643.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%676.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%677.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%678.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%679.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%680.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%681.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%688.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%689.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%696.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%697.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%730.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%731.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%732.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%733.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%734.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%735.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%742.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%743.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%750.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%751.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%780.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%781.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%782.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%783.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%784.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%785.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%786.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%787.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%790.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%791.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%820.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%821.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%822.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%823.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%824.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%825.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%826.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%827.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.seq.fn_spec_to_seq_index. FuelId)
(declare-const fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.seqlib.seq_multiset.seq_is_sorted. FuelId)
(declare-const fuel%verismo!tspec.seqlib.seq_multiset.seq_uop. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.bool_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.char_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u8_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u16_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u32_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u64_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u128_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.usize_to_stream. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%11.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%14.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%15.spec_size_def. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%16.wf. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.PAGE_SIZE. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.VM_MEM_SIZE. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.VM_PAGE_NUM. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%36.as_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%36.from_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%37.ord_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%38.spec_from_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.value. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.to_offset. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.new2. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.new. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.value. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.new. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.new2. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%4.from_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%5.as_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%5.from_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%6.ord_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%7.ord_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.first. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.offset. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.len. FuelId)
(declare-const fuel%verismo!arch.rmp.access_u.impl&%0.view. FuelId)
(declare-const fuel%verismo!arch.rmp.access_u.impl&%1.inv. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_size. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%3.spec_val. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%4.spec_set_val. FuelId)
(declare-const fuel%verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel. FuelId)
(declare-const fuel%verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private. FuelId)
(declare-const fuel%verismo!arch.rmp.entry_s.impl&%0.is_confidential_to. FuelId)
(declare-const fuel%verismo!arch.rmp.entry_s.impl&%0.is_valid. FuelId)
(declare-const fuel%verismo!arch.rmp.perm_s.impl&%1.as_int. FuelId)
(declare-const fuel%verismo!arch.rmp.perm_s.impl&%1.from_int. FuelId)
(declare-const fuel%verismo!arch.rmp.perm_s.rmp_perm_init. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%18.spec_default. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%21.vspec_cast_to. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%22.spec_size_def. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%24.wf. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%25.is_constant. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%25.is_constant_to. FuelId)
(declare-const fuel%verismo!boot.init.mshv_alloc.init_allocator_requires. FuelId)
(declare-const fuel%verismo!boot.init.mshv_alloc.impl&%0.spec_update_requires. FuelId)
(declare-const fuel%verismo!boot.init.mshv_alloc.impl&%0.spec_update. FuelId)
(declare-const fuel%verismo!boot.init.mshv_fmt.impl&%0.spec_update_cs_requires. FuelId)
(declare-const fuel%verismo!boot.init.mshv_fmt.impl&%0.spec_update_cs. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%5.vspec_cast_to. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%6.spec_size_def. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%8.wf. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%9.is_constant. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%9.is_constant_to. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%10.spec_end_max. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%10.spec_real_range. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%11.spec_cpu_count. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%11.spec_reserved. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%11.spec_mem_table. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%16.vspec_cast_to. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%17.spec_size_def. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%19.wf. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%20.is_constant. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%20.is_constant_to. FuelId)
(declare-const fuel%verismo!boot.mshyper.param_e.impl&%21.range. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmpl. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%0.spec_perms. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmsa. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_perms. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%12.spec_eq. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant_to. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%14.wf. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%16.inv. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%16.spec_new. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%16.lemma_new_eq. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmpl. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%16.spec_perms. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmsa. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%16.view. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%17.spec_set_encrypted. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%19.spec_encrypted. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%19.spec_w. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%19.spec_x. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%21.spec_default. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_pte. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmp. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%24.spec_guestmap. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%24.spec_sysmap. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%24.spec_pte. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%24.spec_is_pte. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%27.encrypted. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%27.deterministic_pte. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%27.is_confidential_to. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%27.inv_confidential. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%27.ensures_read. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%30.snp. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%30.hw_snp. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%31.wf. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%31.init. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%31.allocator_default. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%31.shared. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%32.spec_default. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%34.spec_eq. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%35.sw_eq. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%35.wf. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_regs. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.cpu. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.reg_updated. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_updated. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_coremode_updated. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_accessed. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_write. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_conform. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_exe. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_sys. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_dpl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_present. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_accessed. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_write. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_conform. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_exe. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_sys. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_dpl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_present. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%12.spec_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%13.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%13.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%14.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.inv. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_new. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.lemma_new_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_accessed. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_write. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_conform. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_exe. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_sys. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_dpl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_present. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.view. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%17.spec_avl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%17.spec_long. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%17.spec_granularity. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_avl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_long. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_granularity. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%28.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%29.spec_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%30.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%30.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%31.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.inv. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.spec_new. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.lemma_new_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.spec_avl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.spec_long. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.spec_granularity. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.view. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit0_15. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_base0_23. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit16_19. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_base24_31. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%37.empty. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%45.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%46.spec_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%47.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%47.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%48.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.inv. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_new. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.lemma_new_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit0_15. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_base0_23. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit16_19. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_base24_31. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.view. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%53.spec_default. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%56.vspec_cast_to. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%57.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%59.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%60.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%60.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_snp. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%12.spec_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%14.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.inv. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_new. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.lemma_new_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_snp. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_vtom. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.view. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%20.vspec_cast_to. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%21.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%23.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_es. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cs. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ss. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ds. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_fs. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gs. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gdtr. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vmpl. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cpl. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved2. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_efer. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved3. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr4. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr3. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr0. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rflags. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rip. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved4. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsp. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved5. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rax. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved6. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gpat. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved7. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rcx. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdx. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbx. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved8. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbp. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsi. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdi. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_sev_features. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_xcr0. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved13. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_vmpl. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rax. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rcx. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rdx. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rbx. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_guest_error_code. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%31.vspec_cast_to. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%32.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%35.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%35.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%37.spec_update_requires. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%37.spec_update. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%39.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%39.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%41.spec_update_requires. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%41.spec_update. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%43.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%43.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%45.spec_update_requires. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%45.spec_update. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%47.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%47.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%49.spec_update_requires. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%49.spec_update. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%51.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%51.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%53.spec_update_requires. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%53.spec_update. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%55.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%55.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%57.spec_update_requires. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%57.spec_update. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%59.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%61.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%61.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%62.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%63.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%64.vspec_cast_to. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%65.inv. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.ensures_init_ap_vmsa. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.requires_init_ap_vmsa. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%66.spec_update_cs_requires. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%66.spec_update_cs. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%67.spec_update_requires. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%67.spec_update. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%70.vspec_cast_to. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%71.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%73.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%74.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%74.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%75.spec_update_requires. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%75.spec_update. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_s.SM_TERM_INVALID_PARAM. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_s.SM_TERM_MEM. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_e.GHCB_REGID. FuelId)
(declare-const fuel%verismo!snp.trackedcore.snpmulticore.impl&%0.spec_snpcore. FuelId)
(declare-const fuel%verismo!snp.trackedcore.snpmulticore.impl&%0.spec_lockperms. FuelId)
(declare-const fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.inv. FuelId)
(declare-const fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.wf_top_pt. FuelId)
(declare-const fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.wf_pt. FuelId)
(declare-const fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.pte_perms. FuelId)
(declare-const fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_updated. FuelId)
(declare-const fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_coremode_updated. FuelId)
(declare-const fuel%verismo!snp.trackedcore.snpmulticore.snpcore_console_wf. FuelId)
(declare-const fuel%verismo!snp.trackedcore.snpmulticore.impl&%4.wf. FuelId)
(declare-const fuel%verismo!snp.trackedcore.snpmulticore.impl&%4.wf_core. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_e.impl&%3.spec_update_requires. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_e.impl&%3.spec_update. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%0.wf. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%1.is_constant. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%1.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%4.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_t.impl&%2.view. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_t.impl&%2.spec_index. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_t.impl&%4.spec_len. FuelId)
(declare-const fuel%verismo!tspec.cast.proof_field_set_constant. FuelId)
(declare-const fuel%verismo!tspec.cast.fn_vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%1.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%2.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%5.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%7.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%8.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%9.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%10.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%11.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%12.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%13.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%14.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%15.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%16.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%17.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%18.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%19.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%20.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%21.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%22.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%23.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%24.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%25.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%26.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%27.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%28.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%29.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%30.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%31.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%32.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%33.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%34.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%35.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%36.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%37.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%38.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%39.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%40.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%41.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%42.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%43.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%44.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%45.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%46.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%47.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%48.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%49.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%50.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%51.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%52.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%53.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%54.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%55.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%56.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%57.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%58.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%59.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%60.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%61.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%62.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%63.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%64.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%65.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%66.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%67.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%68.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%69.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%70.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%71.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%72.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%73.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%74.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%75.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%76.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%77.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%78.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%79.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%80.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%81.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%82.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%83.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%84.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%85.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%86.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%87.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%88.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%89.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%90.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%91.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%92.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%93.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%94.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%95.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%96.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%97.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%98.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%99.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%100.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%101.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%1.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%2.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%3.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%4.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%5.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%6.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%7.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%8.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%9.spec_default. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%0.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%0.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%1.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%1.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%2.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%2.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%3.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%3.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%4.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%4.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%5.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%5.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%6.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%6.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%7.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%7.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%8.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%8.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%9.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%9.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%10.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%10.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%11.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%11.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.ops.impl&%0.spec_not. FuelId)
(declare-const fuel%verismo!tspec.ops.impl&%1.spec_not. FuelId)
(declare-const fuel%verismo!tspec.ops.impl&%2.spec_not. FuelId)
(declare-const fuel%verismo!tspec.ops.impl&%3.spec_not. FuelId)
(declare-const fuel%verismo!tspec.ops.impl&%4.spec_not. FuelId)
(declare-const fuel%verismo!tspec.ops.impl&%5.spec_not. FuelId)
(declare-const fuel%verismo!tspec.ops.impl&%6.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.range_set.range. FuelId)
(declare-const fuel%verismo!tspec.range_set.impl&%0.end. FuelId)
(declare-const fuel%verismo!tspec.range_set.inside_range. FuelId)
(declare-const fuel%verismo!tspec.range_set.range_disjoint. FuelId)
(declare-const fuel%verismo!tspec.range_set.range_disjoint_. FuelId)
(declare-const fuel%verismo!tspec.range_set.ranges_disjoint. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_u64_u64_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_u32_u32_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_u16_u16_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_u8_u8_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_usize_usize_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_int_int_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_not_u64_u64. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_not_u32_u32. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_not_u16_u16. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_not_u8_u8. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_not_usize_usize. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_not_bool_bool. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%0.spec_add. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%1.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%2.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%3.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%5.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%6.spec_lt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%6.spec_le. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%6.spec_gt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%7.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%8.spec_lt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%8.spec_le. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%8.spec_gt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%9.spec_lt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%9.spec_le. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%9.spec_gt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%10.spec_lt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%10.spec_le. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%10.spec_gt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%11.spec_lt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%11.spec_le. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%11.spec_gt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%12.spec_lt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%12.spec_le. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%12.spec_gt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%13.spec_lt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%13.spec_le. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%13.spec_gt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%14.spec_lt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%14.spec_le. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%14.spec_gt. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%15.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%16.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%17.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%18.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%19.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%20.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%21.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%22.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%23.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%24.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%25.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%26.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%27.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%28.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%29.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%30.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%31.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%32.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%33.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%34.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%35.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%36.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%37.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%38.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%39.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%40.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%41.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%42.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%43.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%44.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%45.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%46.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%47.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%48.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%49.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%50.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%51.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%52.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%53.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%54.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%55.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%56.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%57.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%58.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%59.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%60.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%61.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%62.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%63.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%64.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%65.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%66.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%67.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%68.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%69.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%70.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%71.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.setlib.uop_to_bop. FuelId)
(declare-const fuel%verismo!tspec.setlib.set_op. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%8.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%9.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%10.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%12.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%13.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%14.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%15.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%16.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%17.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%18.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%19.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%0.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%1.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%2.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%3.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%4.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%5.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%6.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%7.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%8.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%9.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%10.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%11.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%12.wf. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%4.from_int. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%5.ord_int. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%6.spec_from_int. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%9.is_VMPL0. FuelId)
(declare-const fuel%verismo!arch.reg.MSR_GHCB_BASE. FuelId)
(declare-const fuel%verismo!arch.reg.MSR_EFER_BASE. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%0.wf. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%1.wf. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%0.wf. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%1.is_constant. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%1.is_constant_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.recursive_sec_bytes. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.vec.impl&%0.wf. FuelId)
(declare-const fuel%verismo!primitives_e.vec.impl&%1.is_constant. FuelId)
(declare-const fuel%verismo!primitives_e.vec.impl&%1.is_constant_to. FuelId)
(declare-const fuel%verismo!primitives_e.vec.impl&%2.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.vec.impl&%4.spec_update_requires. FuelId)
(declare-const fuel%verismo!primitives_e.vec.impl&%4.spec_update. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.spec_va_to_pa. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%0.spec_valid_pn_with. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%0.to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%1.spec_valid_addr_with. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%1.to_page. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%2.spec_to_page. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%2.addrt_to_int. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%2.spec_ensures_to_page. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%2.spec_valid_addr_with. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%2.spec_check_valid_addr_requires. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%3.spec_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%3.paget_to_int. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%3.spec_ensures_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%3.spec_valid_pn_with. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%4.spec_to_page. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%4.addrt_to_int. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%4.spec_ensures_to_page. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%4.spec_valid_addr_with. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%4.spec_check_valid_addr_requires. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%5.spec_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%5.paget_to_int. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%5.spec_ensures_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%5.spec_valid_pn_with. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%6.spec_to_page. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%6.addrt_to_int. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%6.spec_ensures_to_page. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%6.spec_valid_addr_with. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%6.spec_check_valid_addr_requires. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%7.spec_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%7.paget_to_int. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%7.spec_ensures_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%7.spec_valid_pn_with. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%8.spec_to_page. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%8.addrt_to_int. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%8.spec_ensures_to_page. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%8.spec_valid_addr_with. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%8.spec_check_valid_addr_requires. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%9.spec_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%9.paget_to_int. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%9.spec_ensures_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%9.spec_valid_pn_with. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.spec_valid_range. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.impl&%0.spec_end_max. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.impl&%0.spec_real_range. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.impl&%1.spec_end_max. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.impl&%1.spec_real_range. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.range_speclt. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.impl&%2.spec_max. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.impl&%2.spec_sec_max. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.impl&%2.spec_range. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.impl&%2.spec_valid_range. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.impl&%2.wf_range. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.to_range_fn. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.empty_ranges. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.impl&%3.to_range_seq. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.impl&%3.to_valid_ranges. FuelId)
(declare-const fuel%verismo!addr_e.range_interface.mem_range_formatted. FuelId)
(declare-const fuel%verismo!allocator.linkedlist.impl&%3.spec_size_def. FuelId)
(declare-const fuel%verismo!allocator.linkedlist.impl&%8.invfn. FuelId)
(declare-const fuel%verismo!allocator.linkedlist.impl&%8.spec_minsize. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%0.spec_bp. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%0.spec_secret. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%0.spec_cpuid. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%0.spec_gdt. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%0.spec_cmdline. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%0.spec_ccblob. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%0.spec_reserved. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%1.spec_set_bp. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%1.spec_set_secret. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%1.spec_set_cpuid. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%1.spec_set_gdt. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%1.spec_set_cmdline. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%1.spec_set_ccblob. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%1.spec_set_reserved. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%5.vspec_cast_to. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%6.spec_size_def. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%7.spec_bp_offset. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%7.spec_secret_offset. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%7.spec_cpuid_offset. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%7.spec_gdt_offset. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%7.spec_cmdline_offset. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%7.spec_ccblob_offset. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%9.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%9.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%11.spec_update_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%11.spec_update. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%13.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%13.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%15.spec_update_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%15.spec_update. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%17.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%17.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%19.spec_update_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%19.spec_update. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%21.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%21.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%23.spec_update_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%23.spec_update. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%25.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%25.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%27.spec_update_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%27.spec_update. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%29.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%29.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%31.spec_update_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%31.spec_update. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%33.wf. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%34.is_constant. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%34.is_constant_to. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%39.vspec_cast_to. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%40.spec_size_def. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%42.wf. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%43.is_constant. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%43.is_constant_to. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%44.spec_update_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%44.spec_update. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%45.spec_update_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%45.spec_update. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%46.spec_update_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%46.spec_update. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%47.spec_update_cs_requires. FuelId)
(declare-const fuel%verismo!boot.linux.impl&%47.spec_update_cs. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%2.spec_cpu_count. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%2.spec_cpuid_page. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%2.spec_secret_page. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%2.spec_hv_param. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%2.spec_validated_entries. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%2.spec_validated_e820. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%2.spec_acpi. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%2.spec_acpi_size. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%2.spec_richos_start. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%2.spec_richos_size. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%2.spec_richos_cmdline. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%2.spec_richos_cmdline_len. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%5.vspec_cast_to. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%6.spec_size_def. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%8.wf. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%9.is_constant. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%9.is_constant_to. FuelId)
(declare-const fuel%verismo!boot.monitor_params.impl&%10.mp_wf. FuelId)
(declare-const fuel%verismo!boot.params.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!boot.params.impl&%5.spec_size_def. FuelId)
(declare-const fuel%verismo!boot.params.impl&%7.wf. FuelId)
(declare-const fuel%verismo!boot.params.impl&%8.is_constant. FuelId)
(declare-const fuel%verismo!boot.params.impl&%8.is_constant_to. FuelId)
(declare-const fuel%verismo!boot.params.impl&%10.spec_real_range. FuelId)
(declare-const fuel%verismo!boot.params.impl&%10.spec_end_max. FuelId)
(declare-const fuel%verismo!boot.params.impl&%16.vspec_cast_to. FuelId)
(declare-const fuel%verismo!boot.params.impl&%17.spec_size_def. FuelId)
(declare-const fuel%verismo!boot.params.impl&%19.wf. FuelId)
(declare-const fuel%verismo!boot.params.impl&%20.is_constant. FuelId)
(declare-const fuel%verismo!boot.params.impl&%20.is_constant_to. FuelId)
(declare-const fuel%verismo!boot.params.impl&%21.spec__pad0. FuelId)
(declare-const fuel%verismo!boot.params.impl&%21.spec_acpi_rsdp_addr. FuelId)
(declare-const fuel%verismo!boot.params.impl&%21.spec__pad1. FuelId)
(declare-const fuel%verismo!boot.params.impl&%21.spec__ext_cmd_line_ptr. FuelId)
(declare-const fuel%verismo!boot.params.impl&%21.spec__pad2_0. FuelId)
(declare-const fuel%verismo!boot.params.impl&%21.spec_cc_blob_addr. FuelId)
(declare-const fuel%verismo!boot.params.impl&%21.spec__pad2_1. FuelId)
(declare-const fuel%verismo!boot.params.impl&%21.spec_e820_entries. FuelId)
(declare-const fuel%verismo!boot.params.impl&%21.spec_reserved_4. FuelId)
(declare-const fuel%verismo!boot.params.impl&%21.spec_hdr. FuelId)
(declare-const fuel%verismo!boot.params.impl&%21.spec_reserved_5. FuelId)
(declare-const fuel%verismo!boot.params.impl&%21.spec_e820. FuelId)
(declare-const fuel%verismo!boot.params.impl&%21.spec_reserved_6. FuelId)
(declare-const fuel%verismo!boot.params.impl&%22.spec_set_e820_entries. FuelId)
(declare-const fuel%verismo!boot.params.impl&%22.spec_set_e820. FuelId)
(declare-const fuel%verismo!boot.params.impl&%28.vspec_cast_to. FuelId)
(declare-const fuel%verismo!boot.params.impl&%29.spec_size_def. FuelId)
(declare-const fuel%verismo!boot.params.impl&%30.spec_e820_entries_offset. FuelId)
(declare-const fuel%verismo!boot.params.impl&%30.spec_e820_offset. FuelId)
(declare-const fuel%verismo!boot.params.impl&%32.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!boot.params.impl&%32.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!boot.params.impl&%34.spec_update_requires. FuelId)
(declare-const fuel%verismo!boot.params.impl&%34.spec_update. FuelId)
(declare-const fuel%verismo!boot.params.impl&%36.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!boot.params.impl&%36.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!boot.params.impl&%38.spec_update_requires. FuelId)
(declare-const fuel%verismo!boot.params.impl&%38.spec_update. FuelId)
(declare-const fuel%verismo!boot.params.impl&%40.wf. FuelId)
(declare-const fuel%verismo!boot.params.impl&%41.is_constant. FuelId)
(declare-const fuel%verismo!boot.params.impl&%41.is_constant_to. FuelId)
(declare-const fuel%verismo!debug.interface.impl&%2.vspec_cast_to. FuelId)
(declare-const fuel%verismo!debug.interface.impl&%3.spec_size_def. FuelId)
(declare-const fuel%verismo!debug.interface.impl&%5.wf. FuelId)
(declare-const fuel%verismo!debug.interface.impl&%6.is_constant. FuelId)
(declare-const fuel%verismo!debug.interface.impl&%6.is_constant_to. FuelId)
(declare-const fuel%verismo!debug.interface.impl&%7.invfn. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.lockid_to_ptr. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.ptrid_to_lockid. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.impl&%0.value_invfn. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.impl&%3.spec_locked. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.impl&%3.spec_cpu. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.impl&%3.spec_points_to. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.impl&%3.spec_invfn. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.impl&%4.lockid. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.impl&%6.wf. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.impl&%6.wf_for. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.impl&%6.is_unlocked. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.impl&%6.is_locked. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.impl&%7.inv. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.impl&%7.inv_locked. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.impl&%7.contains_lock. FuelId)
(declare-const fuel%verismo!lock.spin_perm_s.impl&%7.updated_lock. FuelId)
(declare-const fuel%verismo!lock.spincell_e.impl&%7.spec_size_def. FuelId)
(declare-const fuel%verismo!lock.spincell_e.impl&%11.lockid. FuelId)
(declare-const fuel%verismo!lock.spincell_e.impl&%11.ptrid. FuelId)
(declare-const fuel%verismo!lock.spincell_e.impl&%11.ptr_range. FuelId)
(declare-const fuel%verismo!mem.rawmem_p.impl&%0.contains_with_snp_except. FuelId)
(declare-const fuel%verismo!mem.rawmem_p.impl&%0.contains_default_except. FuelId)
(declare-const fuel%verismo!mem.rawmem_s.impl&%0.wf. FuelId)
(declare-const fuel%verismo!pgtable_e.def.PAGE_TABLE_LEVELS. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_present. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_write. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_supervisor. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_pwt. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_pcd. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_accessed. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_dirty. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_psize. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_global. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_bit12. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_encrypted. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_page. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_nx. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_present. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_write. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_supervisor. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_pwt. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_pcd. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_accessed. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_dirty. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_psize. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_global. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_bit12. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_encrypted. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_page. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_nx. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%12.spec_eq. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%13.is_constant. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%13.is_constant_to. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%14.wf. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.inv. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_new. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.lemma_new_eq. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_present. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_write. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_supervisor. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_pwt. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_pcd. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_accessed. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_dirty. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_psize. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_global. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_bit12. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_encrypted. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_page. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_nx. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.view. FuelId)
(declare-const fuel%verismo!pgtable_e.def.top_lvl_idx. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%19.vspec_cast_to. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%20.spec_size_def. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%22.wf. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%23.is_constant. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%23.is_constant_to. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%2.invfn. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%2.view. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.wf_ptes. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%4.spec_index0. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%4.spec_index1. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%4.spec_index2. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%4.spec_index3. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index0. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index1. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index2. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index3. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%15.spec_size_def. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%16.spec_eq. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%17.is_constant. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%17.is_constant_to. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%18.wf. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%20.inv. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%20.spec_new. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%20.lemma_new_eq. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%20.spec_index0. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%20.spec_index1. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%20.spec_index2. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%20.spec_index3. FuelId)
(declare-const fuel%verismo!pgtable_e.pte.impl&%20.view. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%5.spec_size_def. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%7.wf. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%8.is_constant. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%8.is_constant_to. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%19.id. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%20.spec_ptr. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%20.spec_value. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%20.spec_snp. FuelId)
(declare-const fuel%verismo!ptr.ptr_s.inv_snp_value. FuelId)
(declare-const fuel%verismo!ptr.ptr_s.impl&%1.snp. FuelId)
(declare-const fuel%verismo!ptr.ptr_s.impl&%1.hw_snp. FuelId)
(declare-const fuel%verismo!ptr.ptr_s.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!ptr.ptr_s.impl&%5.is_constant_to. FuelId)
(declare-const fuel%verismo!ptr.ptr_s.impl&%5.is_constant. FuelId)
(declare-const fuel%verismo!ptr.ptr_u.impl&%0.wf. FuelId)
(declare-const fuel%verismo!ptr.ptr_u.impl&%1.not_null. FuelId)
(declare-const fuel%verismo!ptr.ptr_u.impl&%2.id. FuelId)
(declare-const fuel%verismo!ptr.ptr_u.impl&%2.pptr. FuelId)
(declare-const fuel%verismo!ptr.ptr_u.impl&%2.value. FuelId)
(declare-const fuel%verismo!ptr.ptr_u.impl&%2.get_value. FuelId)
(declare-const fuel%verismo!ptr.ptr_u.impl&%2.wf_value. FuelId)
(declare-const fuel%verismo!ptr.ptr_u.impl&%2.wf_at. FuelId)
(declare-const fuel%verismo!ptr.ptr_u.impl&%2.wf_not_null_at. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_pptr. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.only_val_updated. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.size. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.range. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_range. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_const_default. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_default. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_not_null. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.wf. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.bytes. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.value. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%8.snp. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%8.hw_snp. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_t.spec_mem_copy. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_start. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_end. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_t.spec_mem_copy_page. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_cpu. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_run. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_vmpl. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_count. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_mem. FuelId)
(declare-const fuel%verismo!registers.msr_perm_s.impl&%0.shared. FuelId)
(declare-const fuel%verismo!registers.msr_perm_s.impl&%0.value. FuelId)
(declare-const fuel%verismo!registers.msr_perm_s.impl&%1.wf. FuelId)
(declare-const fuel%verismo!registers.msr_perm_s.impl&%2.view. FuelId)
(declare-const fuel%verismo!security.mem.spec_is_default_pages_const_to_vmpl. FuelId)
(declare-const fuel%verismo!security.mem.RICHOS_VMPL. FuelId)
(declare-const fuel%verismo!security.mem.impl&%0.spec_read. FuelId)
(declare-const fuel%verismo!security.mem.impl&%0.spec_write. FuelId)
(declare-const fuel%verismo!security.mem.impl&%0.spec_user_exe. FuelId)
(declare-const fuel%verismo!security.mem.impl&%0.spec_kern_exe. FuelId)
(declare-const fuel%verismo!security.mem.impl&%1.spec_set_read. FuelId)
(declare-const fuel%verismo!security.mem.impl&%1.spec_set_write. FuelId)
(declare-const fuel%verismo!security.mem.impl&%1.spec_set_user_exe. FuelId)
(declare-const fuel%verismo!security.mem.impl&%1.spec_set_kern_exe. FuelId)
(declare-const fuel%verismo!security.mem.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!security.mem.impl&%12.spec_eq. FuelId)
(declare-const fuel%verismo!security.mem.impl&%13.is_constant. FuelId)
(declare-const fuel%verismo!security.mem.impl&%13.is_constant_to. FuelId)
(declare-const fuel%verismo!security.mem.impl&%14.wf. FuelId)
(declare-const fuel%verismo!security.mem.impl&%16.inv. FuelId)
(declare-const fuel%verismo!security.mem.impl&%16.spec_new. FuelId)
(declare-const fuel%verismo!security.mem.impl&%16.lemma_new_eq. FuelId)
(declare-const fuel%verismo!security.mem.impl&%16.spec_read. FuelId)
(declare-const fuel%verismo!security.mem.impl&%16.spec_write. FuelId)
(declare-const fuel%verismo!security.mem.impl&%16.spec_user_exe. FuelId)
(declare-const fuel%verismo!security.mem.impl&%16.spec_kern_exe. FuelId)
(declare-const fuel%verismo!security.mem.impl&%16.view. FuelId)
(declare-const fuel%verismo!security.mem.impl&%19.to_page_perm. FuelId)
(declare-const fuel%verismo!security.mem.impl&%23.vspec_cast_to. FuelId)
(declare-const fuel%verismo!security.mem.impl&%24.spec_size_def. FuelId)
(declare-const fuel%verismo!security.mem.impl&%26.wf. FuelId)
(declare-const fuel%verismo!security.mem.impl&%27.is_constant. FuelId)
(declare-const fuel%verismo!security.mem.impl&%27.is_constant_to. FuelId)
(declare-const fuel%verismo!security.mem.os_mem_valid_snp. FuelId)
(declare-const fuel%verismo!security.mem.spec_contains_page_perm. FuelId)
(declare-const fuel%verismo!security.mem.spec_contains_page_perms. FuelId)
(declare-const fuel%verismo!security.mem.impl&%28.spec_osperm. FuelId)
(declare-const fuel%verismo!security.mem.impl&%28.open_wf. FuelId)
(declare-const fuel%verismo!security.mem.impl&%28.wf. FuelId)
(declare-const fuel%verismo!security.mem.impl&%28.spec_start. FuelId)
(declare-const fuel%verismo!security.mem.impl&%28.spec_end. FuelId)
(declare-const fuel%verismo!security.mem.osmem_wf. FuelId)
(declare-const fuel%verismo!security.secret.impl&%8.spec_size_def. FuelId)
(declare-const fuel%verismo!security.secret.impl&%13.spec_set_authtag. FuelId)
(declare-const fuel%verismo!security.secret.impl&%13.spec_set_algo. FuelId)
(declare-const fuel%verismo!security.secret.impl&%20.spec_size_def. FuelId)
(declare-const fuel%verismo!security.secret.impl&%21.spec_authtag_offset. FuelId)
(declare-const fuel%verismo!security.secret.impl&%21.spec_algo_offset. FuelId)
(declare-const fuel%verismo!security.secret.impl&%23.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!security.secret.impl&%23.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!security.secret.impl&%25.spec_update_requires. FuelId)
(declare-const fuel%verismo!security.secret.impl&%25.spec_update. FuelId)
(declare-const fuel%verismo!security.secret.impl&%27.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!security.secret.impl&%27.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!security.secret.impl&%29.spec_update_requires. FuelId)
(declare-const fuel%verismo!security.secret.impl&%29.spec_update. FuelId)
(declare-const fuel%verismo!security.secret.impl&%33.wf_mastersecret. FuelId)
(declare-const fuel%verismo!security.secret.impl&%35.spec_update_requires. FuelId)
(declare-const fuel%verismo!security.secret.impl&%35.spec_update. FuelId)
(declare-const fuel%verismo!snp.cpuid.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!snp.cpuid.impl&%5.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpuid.impl&%7.wf. FuelId)
(declare-const fuel%verismo!snp.cpuid.impl&%8.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpuid.impl&%8.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpuid.impl&%13.vspec_cast_to. FuelId)
(declare-const fuel%verismo!snp.cpuid.impl&%14.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpuid.impl&%16.wf. FuelId)
(declare-const fuel%verismo!snp.cpuid.impl&%17.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpuid.impl&%17.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpuid.impl&%22.vspec_cast_to. FuelId)
(declare-const fuel%verismo!snp.cpuid.impl&%23.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpuid.impl&%25.wf. FuelId)
(declare-const fuel%verismo!snp.cpuid.impl&%26.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpuid.impl&%26.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.mem.spec_is_shared_page_perms. FuelId)
(declare-const fuel%verismo!vbox.vbox.impl&%0.is_constant. FuelId)
(declare-const fuel%verismo!vbox.vbox.impl&%0.is_constant_to. FuelId)
(declare-const fuel%verismo!vbox.vbox.impl&%1.spec_size_def. FuelId)
(declare-const fuel%verismo!vbox.vbox.impl&%4.is_page. FuelId)
(declare-const fuel%verismo!vbox.vbox.impl&%4.is_shared_page. FuelId)
(declare-const fuel%verismo!vbox.vbox.impl&%4.is_default_page. FuelId)
(declare-const fuel%verismo!vbox.vbox.impl&%5.wf. FuelId)
(declare-const fuel%verismo!vbox.vbox.impl&%6.only_val_updated. FuelId)
(declare-const fuel%verismo!vbox.vbox.impl&%9.spec_update_requires. FuelId)
(declare-const fuel%verismo!vbox.vbox.impl&%9.spec_update. FuelId)
(declare-const fuel%verismo!vbox.vbox.impl&%10.spec_update_cs_requires. FuelId)
(declare-const fuel%verismo!vbox.vbox.impl&%10.spec_update_cs. FuelId)
(declare-const fuel%verismo!vbox.vbox.impl&%11.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!vbox.vbox.impl&%11.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!vcell.vcell.impl&%3.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.spec_unused. FuelId)
(declare-const fuel%verismo!bsp.impl&%0.inv_ac. FuelId)
(declare-const fuel%verismo!linkedlist.impl&%1.spec_default. FuelId)
(declare-const fuel%verismo!linkedlist.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!linkedlist.impl&%5.spec_size_def. FuelId)
(declare-const fuel%verismo!linkedlist.impl&%7.wf. FuelId)
(declare-const fuel%verismo!linkedlist.impl&%8.is_constant. FuelId)
(declare-const fuel%verismo!linkedlist.impl&%8.is_constant_to. FuelId)
(declare-const fuel%verismo!linkedlist.impl&%11.vspec_cast_to. FuelId)
(declare-const fuel%verismo!linkedlist.impl&%12.spec_size_def. FuelId)
(declare-const fuel%verismo!linkedlist.impl&%14.wf. FuelId)
(declare-const fuel%verismo!linkedlist.impl&%15.is_constant. FuelId)
(declare-const fuel%verismo!linkedlist.impl&%15.is_constant_to. FuelId)
(declare-const fuel%verismo!global.spec_ALLOCATOR_range. FuelId)
(declare-const fuel%verismo!global.spec_ALLOCATOR_lockid. FuelId)
(declare-const fuel%verismo!global.contains_ALLOCATOR. FuelId)
(declare-const fuel%verismo!global.spec_CONSOLE_range. FuelId)
(declare-const fuel%verismo!global.spec_CONSOLE_lockid. FuelId)
(declare-const fuel%verismo!global.contains_CONSOLE. FuelId)
(declare-const fuel%verismo!global.spec_PT_range. FuelId)
(declare-const fuel%verismo!global.spec_PT_lockid. FuelId)
(declare-const fuel%verismo!global.contains_PT. FuelId)
(declare-const fuel%verismo!global.spec_SEC_PERM_range. FuelId)
(declare-const fuel%verismo!global.spec_SEC_PERM_lockid. FuelId)
(declare-const fuel%verismo!global.spec_OSMEM_range. FuelId)
(declare-const fuel%verismo!global.spec_OSMEM_lockid. FuelId)
(declare-const fuel%verismo!global.spec_RICHOS_VMSA_range. FuelId)
(declare-const fuel%verismo!global.spec_RICHOS_VMSA_lockid. FuelId)
(declare-const fuel%verismo!global.spec_PCR_range. FuelId)
(declare-const fuel%verismo!global.spec_PCR_lockid. FuelId)
(declare-const fuel%verismo!global.impl&%0.is_console. FuelId)
(declare-const fuel%verismo!security.impl&%5.spec_size_def. FuelId)
(declare-const fuel%verismo!security.impl&%9.spec_snphdr. FuelId)
(declare-const fuel%verismo!security.impl&%9.spec_payload. FuelId)
(declare-const fuel%verismo!security.impl&%10.spec_set_snphdr. FuelId)
(declare-const fuel%verismo!security.impl&%10.spec_set_payload. FuelId)
(declare-const fuel%verismo!security.impl&%14.vspec_cast_to. FuelId)
(declare-const fuel%verismo!security.impl&%15.spec_size_def. FuelId)
(declare-const fuel%verismo!security.impl&%16.spec_snphdr_offset. FuelId)
(declare-const fuel%verismo!security.impl&%16.spec_payload_offset. FuelId)
(declare-const fuel%verismo!security.impl&%18.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!security.impl&%18.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!security.impl&%20.spec_update_requires. FuelId)
(declare-const fuel%verismo!security.impl&%20.spec_update. FuelId)
(declare-const fuel%verismo!security.impl&%22.spec_borrow_requires. FuelId)
(declare-const fuel%verismo!security.impl&%22.spec_borrow_ensures. FuelId)
(declare-const fuel%verismo!security.impl&%24.spec_update_requires. FuelId)
(declare-const fuel%verismo!security.impl&%24.spec_update. FuelId)
(declare-const fuel%verismo!security.impl&%26.wf. FuelId)
(declare-const fuel%verismo!security.impl&%27.is_constant. FuelId)
(declare-const fuel%verismo!security.impl&%27.is_constant_to. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.result.impl&%0.is_Ok. fuel%vstd!std_specs.result.impl&%0.get_Ok_0. fuel%vstd!std_specs.vec.impl&%2.spec_len. fuel%vstd!std_specs.vec.impl&%2.spec_index. fuel%vstd!std_specs.vec.vec_clone_trigger. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.take. fuel%vstd!seq.impl&%0.skip. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.Seq.last. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!seq_lib.impl&%0.insert. fuel%vstd!seq_lib.impl&%0.remove. fuel%vstd!set.impl&%0.full. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.choose. fuel%vstd!set_lib.impl&%0.is_empty. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%8.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%16.view. fuel%vstd!view.impl&%18.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%22.view. fuel%vstd!view.impl&%36.view. fuel%vstd!view.impl&%38.view. fuel%vstd!view.impl&%40.view. fuel%verismo!tspec.math.pow_s.spec_nat_pow2. fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2. fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol. fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom. fuel%verismo!tspec.security.sectype.impl&%0.is_Secret. fuel%verismo!tspec.security.sectype.impl&%3.spec_val. fuel%verismo!tspec.security.sectype.impl&%3.spec__unused. fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets. fuel%verismo!tspec.security.sectype.impl&%3.spec_labels. fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to. fuel%verismo!tspec.security.sectype.impl&%12.is_constant. fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to. fuel%verismo!tspec.security.sectype.impl&%15.is_constant. fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl. fuel%verismo!tspec.security.sectype.impl&%16.wf_value. fuel%verismo!tspec.security.sectype.impl&%16.bop_new. fuel%verismo!tspec.security.sectype.impl&%16.uop_new. fuel%verismo!tspec.security.sectype.impl&%16.constant. fuel%verismo!tspec.security.sectype.impl&%17.spec_constant. fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%20.wf. fuel%verismo!tspec.security.sectype.impl&%92.spec_default. fuel%verismo!tspec.security.sectype.impl&%93.spec_default. fuel%verismo!tspec.security.sectype.impl&%95.spec_default. fuel%verismo!tspec.security.sectype.impl&%96.spec_default. fuel%verismo!tspec.security.sectype.impl&%98.spec_default. fuel%verismo!tspec.security.sectype.impl&%99.spec_default. fuel%verismo!tspec.security.sectype.impl&%101.spec_default. fuel%verismo!tspec.security.sectype.impl&%102.spec_default. fuel%verismo!tspec.security.sectype.impl&%104.spec_default. fuel%verismo!tspec.security.sectype.impl&%105.spec_default. fuel%verismo!tspec.security.sectype.impl&%176.spec_not. fuel%verismo!tspec.security.sectype.impl&%177.spec_not. fuel%verismo!tspec.security.sectype.impl&%250.spec_not. fuel%verismo!tspec.security.sectype.impl&%251.spec_not. fuel%verismo!tspec.security.sectype.impl&%324.spec_not. fuel%verismo!tspec.security.sectype.impl&%325.spec_not. fuel%verismo!tspec.security.sectype.impl&%398.spec_not. fuel%verismo!tspec.security.sectype.impl&%399.spec_not. fuel%verismo!tspec.security.sectype.impl&%472.spec_not. fuel%verismo!tspec.security.sectype.impl&%473.spec_not. fuel%verismo!tspec.security.sectype.impl&%476.spec_not. fuel%verismo!tspec.security.sectype.impl&%477.spec_not. fuel%verismo!tspec.security.sectype.impl&%480.ord_int. fuel%verismo!tspec.security.sectype.impl&%481.ord_int. fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%514.spec_add. fuel%verismo!tspec.security.sectype.impl&%515.spec_add. fuel%verismo!tspec.security.sectype.impl&%516.spec_sub. fuel%verismo!tspec.security.sectype.impl&%517.spec_sub. fuel%verismo!tspec.security.sectype.impl&%518.spec_mul. fuel%verismo!tspec.security.sectype.impl&%519.spec_mul. fuel%verismo!tspec.security.sectype.impl&%526.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%527.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%534.ord_int. fuel%verismo!tspec.security.sectype.impl&%535.ord_int. fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%568.spec_add. fuel%verismo!tspec.security.sectype.impl&%569.spec_add. fuel%verismo!tspec.security.sectype.impl&%570.spec_sub. fuel%verismo!tspec.security.sectype.impl&%571.spec_sub. fuel%verismo!tspec.security.sectype.impl&%572.spec_mul. fuel%verismo!tspec.security.sectype.impl&%573.spec_mul. fuel%verismo!tspec.security.sectype.impl&%580.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%581.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%588.ord_int. fuel%verismo!tspec.security.sectype.impl&%589.ord_int. fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%622.spec_add. fuel%verismo!tspec.security.sectype.impl&%623.spec_add. fuel%verismo!tspec.security.sectype.impl&%624.spec_sub. fuel%verismo!tspec.security.sectype.impl&%625.spec_sub. fuel%verismo!tspec.security.sectype.impl&%626.spec_mul. fuel%verismo!tspec.security.sectype.impl&%627.spec_mul. fuel%verismo!tspec.security.sectype.impl&%634.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%635.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%642.ord_int. fuel%verismo!tspec.security.sectype.impl&%643.ord_int. fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%676.spec_add. fuel%verismo!tspec.security.sectype.impl&%677.spec_add. fuel%verismo!tspec.security.sectype.impl&%678.spec_sub. fuel%verismo!tspec.security.sectype.impl&%679.spec_sub. fuel%verismo!tspec.security.sectype.impl&%680.spec_mul. fuel%verismo!tspec.security.sectype.impl&%681.spec_mul. fuel%verismo!tspec.security.sectype.impl&%688.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%689.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%696.ord_int. fuel%verismo!tspec.security.sectype.impl&%697.ord_int. fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%730.spec_add. fuel%verismo!tspec.security.sectype.impl&%731.spec_add. fuel%verismo!tspec.security.sectype.impl&%732.spec_sub. fuel%verismo!tspec.security.sectype.impl&%733.spec_sub. fuel%verismo!tspec.security.sectype.impl&%734.spec_mul. fuel%verismo!tspec.security.sectype.impl&%735.spec_mul. fuel%verismo!tspec.security.sectype.impl&%742.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%743.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%750.ord_int. fuel%verismo!tspec.security.sectype.impl&%751.ord_int. fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%780.spec_add. fuel%verismo!tspec.security.sectype.impl&%781.spec_add. fuel%verismo!tspec.security.sectype.impl&%782.spec_sub. fuel%verismo!tspec.security.sectype.impl&%783.spec_sub. fuel%verismo!tspec.security.sectype.impl&%784.spec_mul. fuel%verismo!tspec.security.sectype.impl&%785.spec_mul. fuel%verismo!tspec.security.sectype.impl&%786.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%787.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%790.ord_int. fuel%verismo!tspec.security.sectype.impl&%791.ord_int. fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%820.spec_add. fuel%verismo!tspec.security.sectype.impl&%821.spec_add. fuel%verismo!tspec.security.sectype.impl&%822.spec_sub. fuel%verismo!tspec.security.sectype.impl&%823.spec_sub. fuel%verismo!tspec.security.sectype.impl&%824.spec_mul. fuel%verismo!tspec.security.sectype.impl&%825.spec_mul. fuel%verismo!tspec.security.sectype.impl&%826.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%827.spec_euclidean_div. fuel%verismo!tspec.security.seq.fn_spec_to_seq_index. fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to. fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to. fuel%verismo!tspec.seqlib.seq_multiset.seq_is_sorted. fuel%verismo!tspec.seqlib.seq_multiset.seq_uop. fuel%verismo!tspec.stream.basic.bool_to_stream. fuel%verismo!tspec.stream.basic.char_to_stream. fuel%verismo!tspec.stream.basic.u8_to_stream. fuel%verismo!tspec.stream.basic.u16_to_stream. fuel%verismo!tspec.stream.basic.u32_to_stream. fuel%verismo!tspec.stream.basic.u64_to_stream. fuel%verismo!tspec.stream.basic.u128_to_stream. fuel%verismo!tspec.stream.basic.usize_to_stream. fuel%verismo!arch.addr_s.def_s.impl&%11.vspec_cast_to. fuel%verismo!arch.addr_s.def_s.impl&%14.vspec_cast_to. fuel%verismo!arch.addr_s.def_s.impl&%15.spec_size_def. fuel%verismo!arch.addr_s.def_s.impl&%16.wf. fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant. fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant_to. fuel%verismo!arch.addr_s.def_s.PAGE_SIZE. fuel%verismo!arch.addr_s.def_s.VM_MEM_SIZE. fuel%verismo!arch.addr_s.def_s.VM_PAGE_NUM. fuel%verismo!arch.addr_s.def_s.impl&%36.as_int. fuel%verismo!arch.addr_s.def_s.impl&%36.from_int. fuel%verismo!arch.addr_s.def_s.impl&%37.ord_int. fuel%verismo!arch.addr_s.def_s.impl&%38.spec_from_int. fuel%verismo!arch.addr_s.page.impl&%2.value. fuel%verismo!arch.addr_s.page.impl&%2.to_offset. fuel%verismo!arch.addr_s.page.impl&%2.new2. fuel%verismo!arch.addr_s.page.impl&%2.new. fuel%verismo!arch.addr_s.page.impl&%3.value. fuel%verismo!arch.addr_s.page.impl&%3.new. fuel%verismo!arch.addr_s.page.impl&%3.new2. fuel%verismo!arch.addr_s.page.impl&%4.as_int. fuel%verismo!arch.addr_s.page.impl&%4.from_int. fuel%verismo!arch.addr_s.page.impl&%5.as_int. fuel%verismo!arch.addr_s.page.impl&%5.from_int. fuel%verismo!arch.addr_s.page.impl&%6.ord_int. fuel%verismo!arch.addr_s.page.impl&%7.ord_int. fuel%verismo!arch.addr_s.page.impl&%8.first. fuel%verismo!arch.addr_s.page.impl&%8.offset. fuel%verismo!arch.addr_s.page.impl&%8.len. fuel%verismo!arch.rmp.access_u.impl&%0.view. fuel%verismo!arch.rmp.access_u.impl&%1.inv. fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable. fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned. fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated. fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa. fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid. fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn. fuel%verismo!arch.rmp.def_s.impl&%0.spec_size. fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms. fuel%verismo!arch.rmp.def_s.impl&%3.spec_val. fuel%verismo!arch.rmp.def_s.impl&%4.spec_set_val. fuel%verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel. fuel%verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private. fuel%verismo!arch.rmp.entry_s.impl&%0.is_confidential_to. fuel%verismo!arch.rmp.entry_s.impl&%0.is_valid. fuel%verismo!arch.rmp.perm_s.impl&%1.as_int. fuel%verismo!arch.rmp.perm_s.impl&%1.from_int. fuel%verismo!arch.rmp.perm_s.rmp_perm_init. fuel%verismo!boot.idt.def.impl&%18.spec_default. fuel%verismo!boot.idt.def.impl&%21.vspec_cast_to. fuel%verismo!boot.idt.def.impl&%22.spec_size_def. fuel%verismo!boot.idt.def.impl&%24.wf. fuel%verismo!boot.idt.def.impl&%25.is_constant. fuel%verismo!boot.idt.def.impl&%25.is_constant_to. fuel%verismo!boot.init.mshv_alloc.init_allocator_requires. fuel%verismo!boot.init.mshv_alloc.impl&%0.spec_update_requires. fuel%verismo!boot.init.mshv_alloc.impl&%0.spec_update. fuel%verismo!boot.init.mshv_fmt.impl&%0.spec_update_cs_requires. fuel%verismo!boot.init.mshv_fmt.impl&%0.spec_update_cs. fuel%verismo!boot.mshyper.param_e.impl&%5.vspec_cast_to. fuel%verismo!boot.mshyper.param_e.impl&%6.spec_size_def. fuel%verismo!boot.mshyper.param_e.impl&%8.wf. fuel%verismo!boot.mshyper.param_e.impl&%9.is_constant. fuel%verismo!boot.mshyper.param_e.impl&%9.is_constant_to. fuel%verismo!boot.mshyper.param_e.impl&%10.spec_end_max. fuel%verismo!boot.mshyper.param_e.impl&%10.spec_real_range. fuel%verismo!boot.mshyper.param_e.impl&%11.spec_cpu_count. fuel%verismo!boot.mshyper.param_e.impl&%11.spec_reserved. fuel%verismo!boot.mshyper.param_e.impl&%11.spec_mem_table. fuel%verismo!boot.mshyper.param_e.impl&%16.vspec_cast_to. fuel%verismo!boot.mshyper.param_e.impl&%17.spec_size_def. fuel%verismo!boot.mshyper.param_e.impl&%19.wf. fuel%verismo!boot.mshyper.param_e.impl&%20.is_constant. fuel%verismo!boot.mshyper.param_e.impl&%20.is_constant_to. fuel%verismo!boot.mshyper.param_e.impl&%21.range. fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmpl. fuel%verismo!ptr.snp.snp_u.impl&%0.spec_perms. fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmsa. fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl. fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_perms. fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa. fuel%verismo!ptr.snp.snp_u.impl&%11.spec_size_def. fuel%verismo!ptr.snp.snp_u.impl&%12.spec_eq. fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant. fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant_to. fuel%verismo!ptr.snp.snp_u.impl&%14.wf. fuel%verismo!ptr.snp.snp_u.impl&%16.inv. fuel%verismo!ptr.snp.snp_u.impl&%16.spec_new. fuel%verismo!ptr.snp.snp_u.impl&%16.lemma_new_eq. fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmpl. fuel%verismo!ptr.snp.snp_u.impl&%16.spec_perms. fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmsa. fuel%verismo!ptr.snp.snp_u.impl&%16.view. fuel%verismo!ptr.snp.snp_u.impl&%17.spec_set_encrypted. fuel%verismo!ptr.snp.snp_u.impl&%19.spec_encrypted. fuel%verismo!ptr.snp.snp_u.impl&%19.spec_w. fuel%verismo!ptr.snp.snp_u.impl&%19.spec_x. fuel%verismo!ptr.snp.snp_u.impl&%21.spec_default. fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp. fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap. fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap. fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_pte. fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmp. fuel%verismo!ptr.snp.snp_u.impl&%24.spec_guestmap. fuel%verismo!ptr.snp.snp_u.impl&%24.spec_sysmap. fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap. fuel%verismo!ptr.snp.snp_u.impl&%24.spec_pte. fuel%verismo!ptr.snp.snp_u.impl&%24.spec_is_pte. fuel%verismo!ptr.snp.snp_u.impl&%27.encrypted. fuel%verismo!ptr.snp.snp_u.impl&%27.deterministic_pte. fuel%verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential. fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private. fuel%verismo!ptr.snp.snp_u.impl&%27.is_confidential_to. fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private. fuel%verismo!ptr.snp.snp_u.impl&%27.inv_confidential. fuel%verismo!ptr.snp.snp_u.impl&%27.ensures_read. fuel%verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel. fuel%verismo!ptr.snp.snp_u.impl&%30.snp. fuel%verismo!ptr.snp.snp_u.impl&%30.hw_snp. fuel%verismo!ptr.snp.snp_u.impl&%31.wf. fuel%verismo!ptr.snp.snp_u.impl&%31.init. fuel%verismo!ptr.snp.snp_u.impl&%31.allocator_default. fuel%verismo!ptr.snp.snp_u.impl&%31.shared. fuel%verismo!ptr.snp.snp_u.impl&%32.spec_default. fuel%verismo!ptr.snp.snp_u.impl&%34.spec_eq. fuel%verismo!ptr.snp.snp_u.impl&%35.sw_eq. fuel%verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf. fuel%verismo!ptr.snp.snp_u.impl&%35.wf. fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid. fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl. fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu. fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_regs. fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid. fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs. fuel%verismo!registers.trackedcore.snpcore.impl&%3.cpu. fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu. fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv. fuel%verismo!registers.trackedcore.snpcore.impl&%3.reg_updated. fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_updated. fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_coremode_updated. fuel%verismo!snp.cpu.gdt.impl&%0.spec_accessed. fuel%verismo!snp.cpu.gdt.impl&%0.spec_write. fuel%verismo!snp.cpu.gdt.impl&%0.spec_conform. fuel%verismo!snp.cpu.gdt.impl&%0.spec_exe. fuel%verismo!snp.cpu.gdt.impl&%0.spec_sys. fuel%verismo!snp.cpu.gdt.impl&%0.spec_dpl. fuel%verismo!snp.cpu.gdt.impl&%0.spec_present. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_accessed. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_write. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_conform. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_exe. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_sys. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_dpl. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_present. fuel%verismo!snp.cpu.gdt.impl&%11.spec_size_def. fuel%verismo!snp.cpu.gdt.impl&%12.spec_eq. fuel%verismo!snp.cpu.gdt.impl&%13.is_constant. fuel%verismo!snp.cpu.gdt.impl&%13.is_constant_to. fuel%verismo!snp.cpu.gdt.impl&%14.wf. fuel%verismo!snp.cpu.gdt.impl&%16.inv. fuel%verismo!snp.cpu.gdt.impl&%16.spec_new. fuel%verismo!snp.cpu.gdt.impl&%16.lemma_new_eq. fuel%verismo!snp.cpu.gdt.impl&%16.spec_accessed. fuel%verismo!snp.cpu.gdt.impl&%16.spec_write. fuel%verismo!snp.cpu.gdt.impl&%16.spec_conform. fuel%verismo!snp.cpu.gdt.impl&%16.spec_exe. fuel%verismo!snp.cpu.gdt.impl&%16.spec_sys. fuel%verismo!snp.cpu.gdt.impl&%16.spec_dpl. fuel%verismo!snp.cpu.gdt.impl&%16.spec_present. fuel%verismo!snp.cpu.gdt.impl&%16.view. fuel%verismo!snp.cpu.gdt.impl&%17.spec_avl. fuel%verismo!snp.cpu.gdt.impl&%17.spec_long. fuel%verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16. fuel%verismo!snp.cpu.gdt.impl&%17.spec_granularity. fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_avl. fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_long. fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16. fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_granularity. fuel%verismo!snp.cpu.gdt.impl&%28.spec_size_def. fuel%verismo!snp.cpu.gdt.impl&%29.spec_eq. fuel%verismo!snp.cpu.gdt.impl&%30.is_constant. fuel%verismo!snp.cpu.gdt.impl&%30.is_constant_to. fuel%verismo!snp.cpu.gdt.impl&%31.wf. fuel%verismo!snp.cpu.gdt.impl&%33.inv. fuel%verismo!snp.cpu.gdt.impl&%33.spec_new. fuel%verismo!snp.cpu.gdt.impl&%33.lemma_new_eq. fuel%verismo!snp.cpu.gdt.impl&%33.spec_avl. fuel%verismo!snp.cpu.gdt.impl&%33.spec_long. fuel%verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16. fuel%verismo!snp.cpu.gdt.impl&%33.spec_granularity. fuel%verismo!snp.cpu.gdt.impl&%33.view. fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit0_15. fuel%verismo!snp.cpu.gdt.impl&%34.spec_base0_23. fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7. fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit16_19. fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11. fuel%verismo!snp.cpu.gdt.impl&%34.spec_base24_31. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31. fuel%verismo!snp.cpu.gdt.impl&%37.empty. fuel%verismo!snp.cpu.gdt.impl&%45.spec_size_def. fuel%verismo!snp.cpu.gdt.impl&%46.spec_eq. fuel%verismo!snp.cpu.gdt.impl&%47.is_constant. fuel%verismo!snp.cpu.gdt.impl&%47.is_constant_to. fuel%verismo!snp.cpu.gdt.impl&%48.wf. fuel%verismo!snp.cpu.gdt.impl&%50.inv. fuel%verismo!snp.cpu.gdt.impl&%50.spec_new. fuel%verismo!snp.cpu.gdt.impl&%50.lemma_new_eq. fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit0_15. fuel%verismo!snp.cpu.gdt.impl&%50.spec_base0_23. fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7. fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit16_19. fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11. fuel%verismo!snp.cpu.gdt.impl&%50.spec_base24_31. fuel%verismo!snp.cpu.gdt.impl&%50.view. fuel%verismo!snp.cpu.gdt.impl&%53.spec_default. fuel%verismo!snp.cpu.gdt.impl&%56.vspec_cast_to. fuel%verismo!snp.cpu.gdt.impl&%57.spec_size_def. fuel%verismo!snp.cpu.gdt.impl&%59.wf. fuel%verismo!snp.cpu.gdt.impl&%60.is_constant. fuel%verismo!snp.cpu.gdt.impl&%60.is_constant_to. fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_snp. fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom. fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc. fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj. fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj. fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation. fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc. fuel%verismo!snp.cpu.vmsa.impl&%11.spec_size_def. fuel%verismo!snp.cpu.vmsa.impl&%12.spec_eq. fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant. fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant_to. fuel%verismo!snp.cpu.vmsa.impl&%14.wf. fuel%verismo!snp.cpu.vmsa.impl&%16.inv. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_new. fuel%verismo!snp.cpu.vmsa.impl&%16.lemma_new_eq. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_snp. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_vtom. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc. fuel%verismo!snp.cpu.vmsa.impl&%16.view. fuel%verismo!snp.cpu.vmsa.impl&%20.vspec_cast_to. fuel%verismo!snp.cpu.vmsa.impl&%21.spec_size_def. fuel%verismo!snp.cpu.vmsa.impl&%23.wf. fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant. fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant_to. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_es. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cs. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ss. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ds. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_fs. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gs. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gdtr. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vmpl. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cpl. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved2. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_efer. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved3. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr4. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr3. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr0. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rflags. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rip. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved4. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsp. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved5. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rax. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved6. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gpat. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved7. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rcx. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdx. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbx. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved8. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbp. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsi. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdi. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_sev_features. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_xcr0. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved13. fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_vmpl. fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rax. fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rcx. fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rdx. fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rbx. fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_guest_error_code. fuel%verismo!snp.cpu.vmsa.impl&%31.vspec_cast_to. fuel%verismo!snp.cpu.vmsa.impl&%32.spec_size_def. fuel%verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset. fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset. fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset. fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset. fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset. fuel%verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset. fuel%verismo!snp.cpu.vmsa.impl&%35.spec_borrow_requires. fuel%verismo!snp.cpu.vmsa.impl&%35.spec_borrow_ensures. fuel%verismo!snp.cpu.vmsa.impl&%37.spec_update_requires. fuel%verismo!snp.cpu.vmsa.impl&%37.spec_update. fuel%verismo!snp.cpu.vmsa.impl&%39.spec_borrow_requires. fuel%verismo!snp.cpu.vmsa.impl&%39.spec_borrow_ensures. fuel%verismo!snp.cpu.vmsa.impl&%41.spec_update_requires. fuel%verismo!snp.cpu.vmsa.impl&%41.spec_update. fuel%verismo!snp.cpu.vmsa.impl&%43.spec_borrow_requires. fuel%verismo!snp.cpu.vmsa.impl&%43.spec_borrow_ensures. fuel%verismo!snp.cpu.vmsa.impl&%45.spec_update_requires. fuel%verismo!snp.cpu.vmsa.impl&%45.spec_update. fuel%verismo!snp.cpu.vmsa.impl&%47.spec_borrow_requires. fuel%verismo!snp.cpu.vmsa.impl&%47.spec_borrow_ensures. fuel%verismo!snp.cpu.vmsa.impl&%49.spec_update_requires. fuel%verismo!snp.cpu.vmsa.impl&%49.spec_update. fuel%verismo!snp.cpu.vmsa.impl&%51.spec_borrow_requires. fuel%verismo!snp.cpu.vmsa.impl&%51.spec_borrow_ensures. fuel%verismo!snp.cpu.vmsa.impl&%53.spec_update_requires. fuel%verismo!snp.cpu.vmsa.impl&%53.spec_update. fuel%verismo!snp.cpu.vmsa.impl&%55.spec_borrow_requires. fuel%verismo!snp.cpu.vmsa.impl&%55.spec_borrow_ensures. fuel%verismo!snp.cpu.vmsa.impl&%57.spec_update_requires. fuel%verismo!snp.cpu.vmsa.impl&%57.spec_update. fuel%verismo!snp.cpu.vmsa.impl&%59.wf. fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant. fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant_to. fuel%verismo!snp.cpu.vmsa.impl&%61.is_constant. fuel%verismo!snp.cpu.vmsa.impl&%61.is_constant_to. fuel%verismo!snp.cpu.vmsa.impl&%62.wf. fuel%verismo!snp.cpu.vmsa.impl&%63.spec_size_def. fuel%verismo!snp.cpu.vmsa.impl&%64.vspec_cast_to. fuel%verismo!snp.cpu.vmsa.impl&%65.inv. fuel%verismo!snp.cpu.vmsa.ensures_init_ap_vmsa. fuel%verismo!snp.cpu.vmsa.requires_init_ap_vmsa. fuel%verismo!snp.cpu.vmsa.impl&%66.spec_update_cs_requires. fuel%verismo!snp.cpu.vmsa.impl&%66.spec_update_cs. fuel%verismo!snp.cpu.vmsa.impl&%67.spec_update_requires. fuel%verismo!snp.cpu.vmsa.impl&%67.spec_update. fuel%verismo!snp.cpu.vmsa.impl&%70.vspec_cast_to. fuel%verismo!snp.cpu.vmsa.impl&%71.spec_size_def. fuel%verismo!snp.cpu.vmsa.impl&%73.wf. fuel%verismo!snp.cpu.vmsa.impl&%74.is_constant. fuel%verismo!snp.cpu.vmsa.impl&%74.is_constant_to. fuel%verismo!snp.cpu.vmsa.impl&%75.spec_update_requires. fuel%verismo!snp.cpu.vmsa.impl&%75.spec_update. fuel%verismo!snp.ghcb.proto_s.SM_TERM_INVALID_PARAM. fuel%verismo!snp.ghcb.proto_s.SM_TERM_MEM. fuel%verismo!snp.ghcb.proto_e.GHCB_REGID. fuel%verismo!snp.trackedcore.snpmulticore.impl&%0.spec_snpcore. fuel%verismo!snp.trackedcore.snpmulticore.impl&%0.spec_lockperms. fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.inv. fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.wf_top_pt. fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.wf_pt. fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.pte_perms. fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_updated. fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_coremode_updated. fuel%verismo!snp.trackedcore.snpmulticore.snpcore_console_wf. fuel%verismo!snp.trackedcore.snpmulticore.impl&%4.wf. fuel%verismo!snp.trackedcore.snpmulticore.impl&%4.wf_core. fuel%verismo!tspec_e.array.array_e.impl&%3.spec_update_requires. fuel%verismo!tspec_e.array.array_e.impl&%3.spec_update. fuel%verismo!tspec_e.array.array_s.impl&%0.wf. fuel%verismo!tspec_e.array.array_s.impl&%1.is_constant. fuel%verismo!tspec_e.array.array_s.impl&%1.is_constant_to. fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant. fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant_to. fuel%verismo!tspec_e.array.array_s.impl&%3.vspec_cast_to. fuel%verismo!tspec_e.array.array_s.impl&%4.spec_size_def. fuel%verismo!tspec_e.array.array_t.impl&%2.view. fuel%verismo!tspec_e.array.array_t.impl&%2.spec_index. fuel%verismo!tspec_e.array.array_t.impl&%4.spec_len. fuel%verismo!tspec.cast.proof_field_set_constant. fuel%verismo!tspec.cast.fn_vspec_cast_to. fuel%verismo!tspec.cast.impl&%1.vspec_cast_to. fuel%verismo!tspec.cast.impl&%2.vspec_cast_to. fuel%verismo!tspec.cast.impl&%3.vspec_cast_to. fuel%verismo!tspec.cast.impl&%4.vspec_cast_to. fuel%verismo!tspec.cast.impl&%5.vspec_cast_to. fuel%verismo!tspec.cast.impl&%6.vspec_cast_to. fuel%verismo!tspec.cast.impl&%7.vspec_cast_to. fuel%verismo!tspec.cast.impl&%8.vspec_cast_to. fuel%verismo!tspec.cast.impl&%9.vspec_cast_to. fuel%verismo!tspec.cast.impl&%10.vspec_cast_to. fuel%verismo!tspec.cast.impl&%11.vspec_cast_to. fuel%verismo!tspec.cast.impl&%12.vspec_cast_to. fuel%verismo!tspec.cast.impl&%13.vspec_cast_to. fuel%verismo!tspec.cast.impl&%14.vspec_cast_to. fuel%verismo!tspec.cast.impl&%15.vspec_cast_to. fuel%verismo!tspec.cast.impl&%16.vspec_cast_to. fuel%verismo!tspec.cast.impl&%17.vspec_cast_to. fuel%verismo!tspec.cast.impl&%18.vspec_cast_to. fuel%verismo!tspec.cast.impl&%19.vspec_cast_to. fuel%verismo!tspec.cast.impl&%20.vspec_cast_to. fuel%verismo!tspec.cast.impl&%21.vspec_cast_to. fuel%verismo!tspec.cast.impl&%22.vspec_cast_to. fuel%verismo!tspec.cast.impl&%23.vspec_cast_to. fuel%verismo!tspec.cast.impl&%24.vspec_cast_to. fuel%verismo!tspec.cast.impl&%25.vspec_cast_to. fuel%verismo!tspec.cast.impl&%26.vspec_cast_to. fuel%verismo!tspec.cast.impl&%27.vspec_cast_to. fuel%verismo!tspec.cast.impl&%28.vspec_cast_to. fuel%verismo!tspec.cast.impl&%29.vspec_cast_to. fuel%verismo!tspec.cast.impl&%30.vspec_cast_to. fuel%verismo!tspec.cast.impl&%31.vspec_cast_to. fuel%verismo!tspec.cast.impl&%32.vspec_cast_to. fuel%verismo!tspec.cast.impl&%33.vspec_cast_to. fuel%verismo!tspec.cast.impl&%34.vspec_cast_to. fuel%verismo!tspec.cast.impl&%35.vspec_cast_to. fuel%verismo!tspec.cast.impl&%36.vspec_cast_to. fuel%verismo!tspec.cast.impl&%37.vspec_cast_to. fuel%verismo!tspec.cast.impl&%38.vspec_cast_to. fuel%verismo!tspec.cast.impl&%39.vspec_cast_to. fuel%verismo!tspec.cast.impl&%40.vspec_cast_to. fuel%verismo!tspec.cast.impl&%41.vspec_cast_to. fuel%verismo!tspec.cast.impl&%42.vspec_cast_to. fuel%verismo!tspec.cast.impl&%43.vspec_cast_to. fuel%verismo!tspec.cast.impl&%44.vspec_cast_to. fuel%verismo!tspec.cast.impl&%45.vspec_cast_to. fuel%verismo!tspec.cast.impl&%46.vspec_cast_to. fuel%verismo!tspec.cast.impl&%47.vspec_cast_to. fuel%verismo!tspec.cast.impl&%48.vspec_cast_to. fuel%verismo!tspec.cast.impl&%49.vspec_cast_to. fuel%verismo!tspec.cast.impl&%50.vspec_cast_to. fuel%verismo!tspec.cast.impl&%51.vspec_cast_to. fuel%verismo!tspec.cast.impl&%52.vspec_cast_to. fuel%verismo!tspec.cast.impl&%53.vspec_cast_to. fuel%verismo!tspec.cast.impl&%54.vspec_cast_to. fuel%verismo!tspec.cast.impl&%55.vspec_cast_to. fuel%verismo!tspec.cast.impl&%56.vspec_cast_to. fuel%verismo!tspec.cast.impl&%57.vspec_cast_to. fuel%verismo!tspec.cast.impl&%58.vspec_cast_to. fuel%verismo!tspec.cast.impl&%59.vspec_cast_to. fuel%verismo!tspec.cast.impl&%60.vspec_cast_to. fuel%verismo!tspec.cast.impl&%61.vspec_cast_to. fuel%verismo!tspec.cast.impl&%62.vspec_cast_to. fuel%verismo!tspec.cast.impl&%63.vspec_cast_to. fuel%verismo!tspec.cast.impl&%64.vspec_cast_to. fuel%verismo!tspec.cast.impl&%65.vspec_cast_to. fuel%verismo!tspec.cast.impl&%66.vspec_cast_to. fuel%verismo!tspec.cast.impl&%67.vspec_cast_to. fuel%verismo!tspec.cast.impl&%68.vspec_cast_to. fuel%verismo!tspec.cast.impl&%69.vspec_cast_to. fuel%verismo!tspec.cast.impl&%70.vspec_cast_to. fuel%verismo!tspec.cast.impl&%71.vspec_cast_to. fuel%verismo!tspec.cast.impl&%72.vspec_cast_to. fuel%verismo!tspec.cast.impl&%73.vspec_cast_to. fuel%verismo!tspec.cast.impl&%74.vspec_cast_to. fuel%verismo!tspec.cast.impl&%75.vspec_cast_to. fuel%verismo!tspec.cast.impl&%76.vspec_cast_to. fuel%verismo!tspec.cast.impl&%77.vspec_cast_to. fuel%verismo!tspec.cast.impl&%78.vspec_cast_to. fuel%verismo!tspec.cast.impl&%79.vspec_cast_to. fuel%verismo!tspec.cast.impl&%80.vspec_cast_to. fuel%verismo!tspec.cast.impl&%81.vspec_cast_to. fuel%verismo!tspec.cast.impl&%82.vspec_cast_to. fuel%verismo!tspec.cast.impl&%83.vspec_cast_to. fuel%verismo!tspec.cast.impl&%84.vspec_cast_to. fuel%verismo!tspec.cast.impl&%85.vspec_cast_to. fuel%verismo!tspec.cast.impl&%86.vspec_cast_to. fuel%verismo!tspec.cast.impl&%87.vspec_cast_to. fuel%verismo!tspec.cast.impl&%88.vspec_cast_to. fuel%verismo!tspec.cast.impl&%89.vspec_cast_to. fuel%verismo!tspec.cast.impl&%90.vspec_cast_to. fuel%verismo!tspec.cast.impl&%91.vspec_cast_to. fuel%verismo!tspec.cast.impl&%92.vspec_cast_to. fuel%verismo!tspec.cast.impl&%93.vspec_cast_to. fuel%verismo!tspec.cast.impl&%94.vspec_cast_to. fuel%verismo!tspec.cast.impl&%95.vspec_cast_to. fuel%verismo!tspec.cast.impl&%96.vspec_cast_to. fuel%verismo!tspec.cast.impl&%97.vspec_cast_to. fuel%verismo!tspec.cast.impl&%98.vspec_cast_to. fuel%verismo!tspec.cast.impl&%99.vspec_cast_to. fuel%verismo!tspec.cast.impl&%100.vspec_cast_to. fuel%verismo!tspec.cast.impl&%101.vspec_cast_to. fuel%verismo!tspec.default.impl&%1.spec_default. fuel%verismo!tspec.default.impl&%2.spec_default. fuel%verismo!tspec.default.impl&%3.spec_default. fuel%verismo!tspec.default.impl&%4.spec_default. fuel%verismo!tspec.default.impl&%5.spec_default. fuel%verismo!tspec.default.impl&%6.spec_default. fuel%verismo!tspec.default.impl&%7.spec_default. fuel%verismo!tspec.default.impl&%8.spec_default. fuel%verismo!tspec.default.impl&%9.spec_default. fuel%verismo!tspec.isconst.impl&%0.is_constant. fuel%verismo!tspec.isconst.impl&%0.is_constant_to. fuel%verismo!tspec.isconst.impl&%1.is_constant. fuel%verismo!tspec.isconst.impl&%1.is_constant_to. fuel%verismo!tspec.isconst.impl&%2.is_constant. fuel%verismo!tspec.isconst.impl&%2.is_constant_to. fuel%verismo!tspec.isconst.impl&%3.is_constant. fuel%verismo!tspec.isconst.impl&%3.is_constant_to. fuel%verismo!tspec.isconst.impl&%4.is_constant. fuel%verismo!tspec.isconst.impl&%4.is_constant_to. fuel%verismo!tspec.isconst.impl&%5.is_constant. fuel%verismo!tspec.isconst.impl&%5.is_constant_to. fuel%verismo!tspec.isconst.impl&%6.is_constant. fuel%verismo!tspec.isconst.impl&%6.is_constant_to. fuel%verismo!tspec.isconst.impl&%7.is_constant. fuel%verismo!tspec.isconst.impl&%7.is_constant_to. fuel%verismo!tspec.isconst.impl&%8.is_constant. fuel%verismo!tspec.isconst.impl&%8.is_constant_to. fuel%verismo!tspec.isconst.impl&%9.is_constant. fuel%verismo!tspec.isconst.impl&%9.is_constant_to. fuel%verismo!tspec.isconst.impl&%10.is_constant. fuel%verismo!tspec.isconst.impl&%10.is_constant_to. fuel%verismo!tspec.isconst.impl&%11.is_constant. fuel%verismo!tspec.isconst.impl&%11.is_constant_to. fuel%verismo!tspec.ops.impl&%0.spec_not. fuel%verismo!tspec.ops.impl&%1.spec_not. fuel%verismo!tspec.ops.impl&%2.spec_not. fuel%verismo!tspec.ops.impl&%3.spec_not. fuel%verismo!tspec.ops.impl&%4.spec_not. fuel%verismo!tspec.ops.impl&%5.spec_not. fuel%verismo!tspec.ops.impl&%6.spec_eq. fuel%verismo!tspec.range_set.range. fuel%verismo!tspec.range_set.impl&%0.end. fuel%verismo!tspec.range_set.inside_range. fuel%verismo!tspec.range_set.range_disjoint. fuel%verismo!tspec.range_set.range_disjoint_. fuel%verismo!tspec.range_set.ranges_disjoint. fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int. fuel%verismo!tspec.fnspec.fn_spec_mul_u64_u64_int. fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64. fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int. fuel%verismo!tspec.fnspec.fn_spec_mul_u32_u32_int. fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32. fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int. fuel%verismo!tspec.fnspec.fn_spec_mul_u16_u16_int. fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16. fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int. fuel%verismo!tspec.fnspec.fn_spec_mul_u8_u8_int. fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8. fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int. fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int. fuel%verismo!tspec.fnspec.fn_spec_mul_usize_usize_int. fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize. fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int. fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int. fuel%verismo!tspec.fnspec.fn_spec_mul_int_int_int. fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int. fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat. fuel%verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat. fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat. fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int. fuel%verismo!tspec.fnspec.fn_spec_not_u64_u64. fuel%verismo!tspec.fnspec.fn_spec_not_u32_u32. fuel%verismo!tspec.fnspec.fn_spec_not_u16_u16. fuel%verismo!tspec.fnspec.fn_spec_not_u8_u8. fuel%verismo!tspec.fnspec.fn_spec_not_usize_usize. fuel%verismo!tspec.fnspec.fn_spec_not_bool_bool. fuel%verismo!tspec.integer.impl&%0.spec_add. fuel%verismo!tspec.integer.impl&%1.spec_sub. fuel%verismo!tspec.integer.impl&%2.spec_sub. fuel%verismo!tspec.integer.impl&%3.spec_euclidean_div. fuel%verismo!tspec.integer.impl&%5.spec_mul. fuel%verismo!tspec.integer.impl&%6.spec_lt. fuel%verismo!tspec.integer.impl&%6.spec_le. fuel%verismo!tspec.integer.impl&%6.spec_gt. fuel%verismo!tspec.integer.impl&%7.spec_eq. fuel%verismo!tspec.integer.impl&%8.spec_lt. fuel%verismo!tspec.integer.impl&%8.spec_le. fuel%verismo!tspec.integer.impl&%8.spec_gt. fuel%verismo!tspec.integer.impl&%9.spec_lt. fuel%verismo!tspec.integer.impl&%9.spec_le. fuel%verismo!tspec.integer.impl&%9.spec_gt. fuel%verismo!tspec.integer.impl&%10.spec_lt. fuel%verismo!tspec.integer.impl&%10.spec_le. fuel%verismo!tspec.integer.impl&%10.spec_gt. fuel%verismo!tspec.integer.impl&%11.spec_lt. fuel%verismo!tspec.integer.impl&%11.spec_le. fuel%verismo!tspec.integer.impl&%11.spec_gt. fuel%verismo!tspec.integer.impl&%12.spec_lt. fuel%verismo!tspec.integer.impl&%12.spec_le. fuel%verismo!tspec.integer.impl&%12.spec_gt. fuel%verismo!tspec.integer.impl&%13.spec_lt. fuel%verismo!tspec.integer.impl&%13.spec_le. fuel%verismo!tspec.integer.impl&%13.spec_gt. fuel%verismo!tspec.integer.impl&%14.spec_lt. fuel%verismo!tspec.integer.impl&%14.spec_le. fuel%verismo!tspec.integer.impl&%14.spec_gt. fuel%verismo!tspec.integer.impl&%15.spec_eq. fuel%verismo!tspec.integer.impl&%16.spec_eq. fuel%verismo!tspec.integer.impl&%17.spec_eq. fuel%verismo!tspec.integer.impl&%18.spec_eq. fuel%verismo!tspec.integer.impl&%19.spec_eq. fuel%verismo!tspec.integer.impl&%20.spec_eq. fuel%verismo!tspec.integer.impl&%21.spec_eq. fuel%verismo!tspec.integer.impl&%22.spec_eq. fuel%verismo!tspec.integer.impl&%23.spec_eq. fuel%verismo!tspec.integer.impl&%24.spec_eq. fuel%verismo!tspec.integer.impl&%25.spec_eq. fuel%verismo!tspec.integer.impl&%26.spec_eq. fuel%verismo!tspec.integer.impl&%27.spec_eq. fuel%verismo!tspec.integer.impl&%28.spec_eq. fuel%verismo!tspec.integer.impl&%29.spec_eq. fuel%verismo!tspec.integer.impl&%30.spec_eq. fuel%verismo!tspec.integer.impl&%31.spec_eq. fuel%verismo!tspec.integer.impl&%32.spec_eq. fuel%verismo!tspec.integer.impl&%33.spec_eq. fuel%verismo!tspec.integer.impl&%34.spec_eq. fuel%verismo!tspec.integer.impl&%35.spec_eq. fuel%verismo!tspec.integer.impl&%36.spec_eq. fuel%verismo!tspec.integer.impl&%37.spec_eq. fuel%verismo!tspec.integer.impl&%38.spec_eq. fuel%verismo!tspec.integer.impl&%39.spec_eq. fuel%verismo!tspec.integer.impl&%40.spec_eq. fuel%verismo!tspec.integer.impl&%41.spec_eq. fuel%verismo!tspec.integer.impl&%42.spec_eq. fuel%verismo!tspec.integer.impl&%43.spec_eq. fuel%verismo!tspec.integer.impl&%44.spec_eq. fuel%verismo!tspec.integer.impl&%45.spec_eq. fuel%verismo!tspec.integer.impl&%46.spec_eq. fuel%verismo!tspec.integer.impl&%47.spec_eq. fuel%verismo!tspec.integer.impl&%48.spec_eq. fuel%verismo!tspec.integer.impl&%49.spec_eq. fuel%verismo!tspec.integer.impl&%50.spec_eq. fuel%verismo!tspec.integer.impl&%51.spec_eq. fuel%verismo!tspec.integer.impl&%52.spec_eq. fuel%verismo!tspec.integer.impl&%53.spec_eq. fuel%verismo!tspec.integer.impl&%54.spec_eq. fuel%verismo!tspec.integer.impl&%55.spec_eq. fuel%verismo!tspec.integer.impl&%56.spec_eq. fuel%verismo!tspec.integer.impl&%57.spec_eq. fuel%verismo!tspec.integer.impl&%58.spec_eq. fuel%verismo!tspec.integer.impl&%59.spec_eq. fuel%verismo!tspec.integer.impl&%60.spec_eq. fuel%verismo!tspec.integer.impl&%61.spec_eq. fuel%verismo!tspec.integer.impl&%62.spec_eq. fuel%verismo!tspec.integer.impl&%63.spec_eq. fuel%verismo!tspec.integer.impl&%64.spec_eq. fuel%verismo!tspec.integer.impl&%65.spec_eq. fuel%verismo!tspec.integer.impl&%66.spec_eq. fuel%verismo!tspec.integer.impl&%67.spec_eq. fuel%verismo!tspec.integer.impl&%68.spec_eq. fuel%verismo!tspec.integer.impl&%69.spec_eq. fuel%verismo!tspec.integer.impl&%70.spec_eq. fuel%verismo!tspec.integer.impl&%71.spec_eq. fuel%verismo!tspec.setlib.uop_to_bop. fuel%verismo!tspec.setlib.set_op. fuel%verismo!tspec.size_s.impl&%8.spec_size_def. fuel%verismo!tspec.size_s.impl&%9.spec_size_def. fuel%verismo!tspec.size_s.impl&%10.spec_size_def. fuel%verismo!tspec.size_s.impl&%11.spec_size_def. fuel%verismo!tspec.size_s.impl&%12.spec_size_def. fuel%verismo!tspec.size_s.impl&%13.spec_size_def. fuel%verismo!tspec.size_s.impl&%14.spec_size_def. fuel%verismo!tspec.size_s.impl&%15.spec_size_def. fuel%verismo!tspec.size_s.impl&%16.spec_size_def. fuel%verismo!tspec.size_s.impl&%17.spec_size_def. fuel%verismo!tspec.size_s.impl&%18.spec_size_def. fuel%verismo!tspec.size_s.impl&%19.spec_size_def. fuel%verismo!tspec.wellformed.impl&%0.wf. fuel%verismo!tspec.wellformed.impl&%1.wf. fuel%verismo!tspec.wellformed.impl&%2.wf. fuel%verismo!tspec.wellformed.impl&%3.wf. fuel%verismo!tspec.wellformed.impl&%4.wf. fuel%verismo!tspec.wellformed.impl&%5.wf. fuel%verismo!tspec.wellformed.impl&%6.wf. fuel%verismo!tspec.wellformed.impl&%7.wf. fuel%verismo!tspec.wellformed.impl&%8.wf. fuel%verismo!tspec.wellformed.impl&%9.wf. fuel%verismo!tspec.wellformed.impl&%10.wf. fuel%verismo!tspec.wellformed.impl&%11.wf. fuel%verismo!tspec.wellformed.impl&%12.wf. fuel%verismo!arch.entities.impl&%4.as_int. fuel%verismo!arch.entities.impl&%4.from_int. fuel%verismo!arch.entities.impl&%5.ord_int. fuel%verismo!arch.entities.impl&%6.spec_from_int. fuel%verismo!arch.entities.impl&%9.is_VMPL0. fuel%verismo!arch.reg.MSR_GHCB_BASE. fuel%verismo!arch.reg.MSR_EFER_BASE. fuel%verismo!primitives_e.sectype.impl&%0.wf. fuel%verismo!primitives_e.sectype.impl&%1.wf. fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes. fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes. fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to. fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%0.wf. fuel%verismo!primitives_e.seq.impl&%1.is_constant. fuel%verismo!primitives_e.seq.impl&%1.is_constant_to. fuel%verismo!primitives_e.seq.recursive_sec_bytes. fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to. fuel%verismo!primitives_e.vec.impl&%0.wf. fuel%verismo!primitives_e.vec.impl&%1.is_constant. fuel%verismo!primitives_e.vec.impl&%1.is_constant_to. fuel%verismo!primitives_e.vec.impl&%2.vspec_cast_to. fuel%verismo!primitives_e.vec.impl&%4.spec_update_requires. fuel%verismo!primitives_e.vec.impl&%4.spec_update. fuel%verismo!addr_e.addr_interface.spec_va_to_pa. fuel%verismo!addr_e.addr_interface.impl&%0.spec_valid_pn_with. fuel%verismo!addr_e.addr_interface.impl&%0.to_addr. fuel%verismo!addr_e.addr_interface.impl&%1.spec_valid_addr_with. fuel%verismo!addr_e.addr_interface.impl&%1.to_page. fuel%verismo!addr_e.addr_interface.impl&%2.spec_to_page. fuel%verismo!addr_e.addr_interface.impl&%2.addrt_to_int. fuel%verismo!addr_e.addr_interface.impl&%2.spec_ensures_to_page. fuel%verismo!addr_e.addr_interface.impl&%2.spec_valid_addr_with. fuel%verismo!addr_e.addr_interface.impl&%2.spec_check_valid_addr_requires. fuel%verismo!addr_e.addr_interface.impl&%3.spec_to_addr. fuel%verismo!addr_e.addr_interface.impl&%3.paget_to_int. fuel%verismo!addr_e.addr_interface.impl&%3.spec_ensures_to_addr. fuel%verismo!addr_e.addr_interface.impl&%3.spec_valid_pn_with. fuel%verismo!addr_e.addr_interface.impl&%4.spec_to_page. fuel%verismo!addr_e.addr_interface.impl&%4.addrt_to_int. fuel%verismo!addr_e.addr_interface.impl&%4.spec_ensures_to_page. fuel%verismo!addr_e.addr_interface.impl&%4.spec_valid_addr_with. fuel%verismo!addr_e.addr_interface.impl&%4.spec_check_valid_addr_requires. fuel%verismo!addr_e.addr_interface.impl&%5.spec_to_addr. fuel%verismo!addr_e.addr_interface.impl&%5.paget_to_int. fuel%verismo!addr_e.addr_interface.impl&%5.spec_ensures_to_addr. fuel%verismo!addr_e.addr_interface.impl&%5.spec_valid_pn_with. fuel%verismo!addr_e.addr_interface.impl&%6.spec_to_page. fuel%verismo!addr_e.addr_interface.impl&%6.addrt_to_int. fuel%verismo!addr_e.addr_interface.impl&%6.spec_ensures_to_page. fuel%verismo!addr_e.addr_interface.impl&%6.spec_valid_addr_with. fuel%verismo!addr_e.addr_interface.impl&%6.spec_check_valid_addr_requires. fuel%verismo!addr_e.addr_interface.impl&%7.spec_to_addr. fuel%verismo!addr_e.addr_interface.impl&%7.paget_to_int. fuel%verismo!addr_e.addr_interface.impl&%7.spec_ensures_to_addr. fuel%verismo!addr_e.addr_interface.impl&%7.spec_valid_pn_with. fuel%verismo!addr_e.addr_interface.impl&%8.spec_to_page. fuel%verismo!addr_e.addr_interface.impl&%8.addrt_to_int. fuel%verismo!addr_e.addr_interface.impl&%8.spec_ensures_to_page. fuel%verismo!addr_e.addr_interface.impl&%8.spec_valid_addr_with. fuel%verismo!addr_e.addr_interface.impl&%8.spec_check_valid_addr_requires. fuel%verismo!addr_e.addr_interface.impl&%9.spec_to_addr. fuel%verismo!addr_e.addr_interface.impl&%9.paget_to_int. fuel%verismo!addr_e.addr_interface.impl&%9.spec_ensures_to_addr. fuel%verismo!addr_e.addr_interface.impl&%9.spec_valid_pn_with. fuel%verismo!addr_e.range_interface.spec_valid_range. fuel%verismo!addr_e.range_interface.impl&%0.spec_end_max. fuel%verismo!addr_e.range_interface.impl&%0.spec_real_range. fuel%verismo!addr_e.range_interface.impl&%1.spec_end_max. fuel%verismo!addr_e.range_interface.impl&%1.spec_real_range. fuel%verismo!addr_e.range_interface.range_speclt. fuel%verismo!addr_e.range_interface.impl&%2.spec_max. fuel%verismo!addr_e.range_interface.impl&%2.spec_sec_max. fuel%verismo!addr_e.range_interface.impl&%2.spec_range. fuel%verismo!addr_e.range_interface.impl&%2.spec_valid_range. fuel%verismo!addr_e.range_interface.impl&%2.wf_range. fuel%verismo!addr_e.range_interface.to_range_fn. fuel%verismo!addr_e.range_interface.empty_ranges. fuel%verismo!addr_e.range_interface.impl&%3.to_range_seq. fuel%verismo!addr_e.range_interface.impl&%3.to_valid_ranges. fuel%verismo!addr_e.range_interface.mem_range_formatted. fuel%verismo!allocator.linkedlist.impl&%3.spec_size_def. fuel%verismo!allocator.linkedlist.impl&%8.invfn. fuel%verismo!allocator.linkedlist.impl&%8.spec_minsize. fuel%verismo!boot.linux.impl&%0.spec_bp. fuel%verismo!boot.linux.impl&%0.spec_secret. fuel%verismo!boot.linux.impl&%0.spec_cpuid. fuel%verismo!boot.linux.impl&%0.spec_gdt. fuel%verismo!boot.linux.impl&%0.spec_cmdline. fuel%verismo!boot.linux.impl&%0.spec_ccblob. fuel%verismo!boot.linux.impl&%0.spec_reserved. fuel%verismo!boot.linux.impl&%1.spec_set_bp. fuel%verismo!boot.linux.impl&%1.spec_set_secret. fuel%verismo!boot.linux.impl&%1.spec_set_cpuid. fuel%verismo!boot.linux.impl&%1.spec_set_gdt. fuel%verismo!boot.linux.impl&%1.spec_set_cmdline. fuel%verismo!boot.linux.impl&%1.spec_set_ccblob. fuel%verismo!boot.linux.impl&%1.spec_set_reserved. fuel%verismo!boot.linux.impl&%5.vspec_cast_to. fuel%verismo!boot.linux.impl&%6.spec_size_def. fuel%verismo!boot.linux.impl&%7.spec_bp_offset. fuel%verismo!boot.linux.impl&%7.spec_secret_offset. fuel%verismo!boot.linux.impl&%7.spec_cpuid_offset. fuel%verismo!boot.linux.impl&%7.spec_gdt_offset. fuel%verismo!boot.linux.impl&%7.spec_cmdline_offset. fuel%verismo!boot.linux.impl&%7.spec_ccblob_offset. fuel%verismo!boot.linux.impl&%9.spec_borrow_requires. fuel%verismo!boot.linux.impl&%9.spec_borrow_ensures. fuel%verismo!boot.linux.impl&%11.spec_update_requires. fuel%verismo!boot.linux.impl&%11.spec_update. fuel%verismo!boot.linux.impl&%13.spec_borrow_requires. fuel%verismo!boot.linux.impl&%13.spec_borrow_ensures. fuel%verismo!boot.linux.impl&%15.spec_update_requires. fuel%verismo!boot.linux.impl&%15.spec_update. fuel%verismo!boot.linux.impl&%17.spec_borrow_requires. fuel%verismo!boot.linux.impl&%17.spec_borrow_ensures. fuel%verismo!boot.linux.impl&%19.spec_update_requires. fuel%verismo!boot.linux.impl&%19.spec_update. fuel%verismo!boot.linux.impl&%21.spec_borrow_requires. fuel%verismo!boot.linux.impl&%21.spec_borrow_ensures. fuel%verismo!boot.linux.impl&%23.spec_update_requires. fuel%verismo!boot.linux.impl&%23.spec_update. fuel%verismo!boot.linux.impl&%25.spec_borrow_requires. fuel%verismo!boot.linux.impl&%25.spec_borrow_ensures. fuel%verismo!boot.linux.impl&%27.spec_update_requires. fuel%verismo!boot.linux.impl&%27.spec_update. fuel%verismo!boot.linux.impl&%29.spec_borrow_requires. fuel%verismo!boot.linux.impl&%29.spec_borrow_ensures. fuel%verismo!boot.linux.impl&%31.spec_update_requires. fuel%verismo!boot.linux.impl&%31.spec_update. fuel%verismo!boot.linux.impl&%33.wf. fuel%verismo!boot.linux.impl&%34.is_constant. fuel%verismo!boot.linux.impl&%34.is_constant_to. fuel%verismo!boot.linux.impl&%39.vspec_cast_to. fuel%verismo!boot.linux.impl&%40.spec_size_def. fuel%verismo!boot.linux.impl&%42.wf. fuel%verismo!boot.linux.impl&%43.is_constant. fuel%verismo!boot.linux.impl&%43.is_constant_to. fuel%verismo!boot.linux.impl&%44.spec_update_requires. fuel%verismo!boot.linux.impl&%44.spec_update. fuel%verismo!boot.linux.impl&%45.spec_update_requires. fuel%verismo!boot.linux.impl&%45.spec_update. fuel%verismo!boot.linux.impl&%46.spec_update_requires. fuel%verismo!boot.linux.impl&%46.spec_update. fuel%verismo!boot.linux.impl&%47.spec_update_cs_requires. fuel%verismo!boot.linux.impl&%47.spec_update_cs. fuel%verismo!boot.monitor_params.impl&%2.spec_cpu_count. fuel%verismo!boot.monitor_params.impl&%2.spec_cpuid_page. fuel%verismo!boot.monitor_params.impl&%2.spec_secret_page. fuel%verismo!boot.monitor_params.impl&%2.spec_hv_param. fuel%verismo!boot.monitor_params.impl&%2.spec_validated_entries. fuel%verismo!boot.monitor_params.impl&%2.spec_validated_e820. fuel%verismo!boot.monitor_params.impl&%2.spec_acpi. fuel%verismo!boot.monitor_params.impl&%2.spec_acpi_size. fuel%verismo!boot.monitor_params.impl&%2.spec_richos_start. fuel%verismo!boot.monitor_params.impl&%2.spec_richos_size. fuel%verismo!boot.monitor_params.impl&%2.spec_richos_cmdline. fuel%verismo!boot.monitor_params.impl&%2.spec_richos_cmdline_len. fuel%verismo!boot.monitor_params.impl&%5.vspec_cast_to. fuel%verismo!boot.monitor_params.impl&%6.spec_size_def. fuel%verismo!boot.monitor_params.impl&%8.wf. fuel%verismo!boot.monitor_params.impl&%9.is_constant. fuel%verismo!boot.monitor_params.impl&%9.is_constant_to. fuel%verismo!boot.monitor_params.impl&%10.mp_wf. fuel%verismo!boot.params.impl&%4.vspec_cast_to. fuel%verismo!boot.params.impl&%5.spec_size_def. fuel%verismo!boot.params.impl&%7.wf. fuel%verismo!boot.params.impl&%8.is_constant. fuel%verismo!boot.params.impl&%8.is_constant_to. fuel%verismo!boot.params.impl&%10.spec_real_range. fuel%verismo!boot.params.impl&%10.spec_end_max. fuel%verismo!boot.params.impl&%16.vspec_cast_to. fuel%verismo!boot.params.impl&%17.spec_size_def. fuel%verismo!boot.params.impl&%19.wf. fuel%verismo!boot.params.impl&%20.is_constant. fuel%verismo!boot.params.impl&%20.is_constant_to. fuel%verismo!boot.params.impl&%21.spec__pad0. fuel%verismo!boot.params.impl&%21.spec_acpi_rsdp_addr. fuel%verismo!boot.params.impl&%21.spec__pad1. fuel%verismo!boot.params.impl&%21.spec__ext_cmd_line_ptr. fuel%verismo!boot.params.impl&%21.spec__pad2_0. fuel%verismo!boot.params.impl&%21.spec_cc_blob_addr. fuel%verismo!boot.params.impl&%21.spec__pad2_1. fuel%verismo!boot.params.impl&%21.spec_e820_entries. fuel%verismo!boot.params.impl&%21.spec_reserved_4. fuel%verismo!boot.params.impl&%21.spec_hdr. fuel%verismo!boot.params.impl&%21.spec_reserved_5. fuel%verismo!boot.params.impl&%21.spec_e820. fuel%verismo!boot.params.impl&%21.spec_reserved_6. fuel%verismo!boot.params.impl&%22.spec_set_e820_entries. fuel%verismo!boot.params.impl&%22.spec_set_e820. fuel%verismo!boot.params.impl&%28.vspec_cast_to. fuel%verismo!boot.params.impl&%29.spec_size_def. fuel%verismo!boot.params.impl&%30.spec_e820_entries_offset. fuel%verismo!boot.params.impl&%30.spec_e820_offset. fuel%verismo!boot.params.impl&%32.spec_borrow_requires. fuel%verismo!boot.params.impl&%32.spec_borrow_ensures. fuel%verismo!boot.params.impl&%34.spec_update_requires. fuel%verismo!boot.params.impl&%34.spec_update. fuel%verismo!boot.params.impl&%36.spec_borrow_requires. fuel%verismo!boot.params.impl&%36.spec_borrow_ensures. fuel%verismo!boot.params.impl&%38.spec_update_requires. fuel%verismo!boot.params.impl&%38.spec_update. fuel%verismo!boot.params.impl&%40.wf. fuel%verismo!boot.params.impl&%41.is_constant. fuel%verismo!boot.params.impl&%41.is_constant_to. fuel%verismo!debug.interface.impl&%2.vspec_cast_to. fuel%verismo!debug.interface.impl&%3.spec_size_def. fuel%verismo!debug.interface.impl&%5.wf. fuel%verismo!debug.interface.impl&%6.is_constant. fuel%verismo!debug.interface.impl&%6.is_constant_to. fuel%verismo!debug.interface.impl&%7.invfn. fuel%verismo!lock.spin_perm_s.lockid_to_ptr. fuel%verismo!lock.spin_perm_s.ptrid_to_lockid. fuel%verismo!lock.spin_perm_s.impl&%0.value_invfn. fuel%verismo!lock.spin_perm_s.impl&%3.spec_locked. fuel%verismo!lock.spin_perm_s.impl&%3.spec_cpu. fuel%verismo!lock.spin_perm_s.impl&%3.spec_points_to. fuel%verismo!lock.spin_perm_s.impl&%3.spec_invfn. fuel%verismo!lock.spin_perm_s.impl&%4.lockid. fuel%verismo!lock.spin_perm_s.impl&%6.wf. fuel%verismo!lock.spin_perm_s.impl&%6.wf_for. fuel%verismo!lock.spin_perm_s.impl&%6.is_unlocked. fuel%verismo!lock.spin_perm_s.impl&%6.is_locked. fuel%verismo!lock.spin_perm_s.impl&%7.inv. fuel%verismo!lock.spin_perm_s.impl&%7.inv_locked. fuel%verismo!lock.spin_perm_s.impl&%7.contains_lock. fuel%verismo!lock.spin_perm_s.impl&%7.updated_lock. fuel%verismo!lock.spincell_e.impl&%7.spec_size_def. fuel%verismo!lock.spincell_e.impl&%11.lockid. fuel%verismo!lock.spincell_e.impl&%11.ptrid. fuel%verismo!lock.spincell_e.impl&%11.ptr_range. fuel%verismo!mem.rawmem_p.impl&%0.contains_with_snp_except. fuel%verismo!mem.rawmem_p.impl&%0.contains_default_except. fuel%verismo!mem.rawmem_s.impl&%0.wf. fuel%verismo!pgtable_e.def.PAGE_TABLE_LEVELS. fuel%verismo!pgtable_e.def.impl&%0.spec_present. fuel%verismo!pgtable_e.def.impl&%0.spec_write. fuel%verismo!pgtable_e.def.impl&%0.spec_supervisor. fuel%verismo!pgtable_e.def.impl&%0.spec_pwt. fuel%verismo!pgtable_e.def.impl&%0.spec_pcd. fuel%verismo!pgtable_e.def.impl&%0.spec_accessed. fuel%verismo!pgtable_e.def.impl&%0.spec_dirty. fuel%verismo!pgtable_e.def.impl&%0.spec_psize. fuel%verismo!pgtable_e.def.impl&%0.spec_global. fuel%verismo!pgtable_e.def.impl&%0.spec_bit12. fuel%verismo!pgtable_e.def.impl&%0.spec_encrypted. fuel%verismo!pgtable_e.def.impl&%0.spec_page. fuel%verismo!pgtable_e.def.impl&%0.spec_nx. fuel%verismo!pgtable_e.def.impl&%1.spec_set_present. fuel%verismo!pgtable_e.def.impl&%1.spec_set_write. fuel%verismo!pgtable_e.def.impl&%1.spec_set_supervisor. fuel%verismo!pgtable_e.def.impl&%1.spec_set_pwt. fuel%verismo!pgtable_e.def.impl&%1.spec_set_pcd. fuel%verismo!pgtable_e.def.impl&%1.spec_set_accessed. fuel%verismo!pgtable_e.def.impl&%1.spec_set_dirty. fuel%verismo!pgtable_e.def.impl&%1.spec_set_psize. fuel%verismo!pgtable_e.def.impl&%1.spec_set_global. fuel%verismo!pgtable_e.def.impl&%1.spec_set_bit12. fuel%verismo!pgtable_e.def.impl&%1.spec_set_encrypted. fuel%verismo!pgtable_e.def.impl&%1.spec_set_page. fuel%verismo!pgtable_e.def.impl&%1.spec_set_nx. fuel%verismo!pgtable_e.def.impl&%11.spec_size_def. fuel%verismo!pgtable_e.def.impl&%12.spec_eq. fuel%verismo!pgtable_e.def.impl&%13.is_constant. fuel%verismo!pgtable_e.def.impl&%13.is_constant_to. fuel%verismo!pgtable_e.def.impl&%14.wf. fuel%verismo!pgtable_e.def.impl&%16.inv. fuel%verismo!pgtable_e.def.impl&%16.spec_new. fuel%verismo!pgtable_e.def.impl&%16.lemma_new_eq. fuel%verismo!pgtable_e.def.impl&%16.spec_present. fuel%verismo!pgtable_e.def.impl&%16.spec_write. fuel%verismo!pgtable_e.def.impl&%16.spec_supervisor. fuel%verismo!pgtable_e.def.impl&%16.spec_pwt. fuel%verismo!pgtable_e.def.impl&%16.spec_pcd. fuel%verismo!pgtable_e.def.impl&%16.spec_accessed. fuel%verismo!pgtable_e.def.impl&%16.spec_dirty. fuel%verismo!pgtable_e.def.impl&%16.spec_psize. fuel%verismo!pgtable_e.def.impl&%16.spec_global. fuel%verismo!pgtable_e.def.impl&%16.spec_bit12. fuel%verismo!pgtable_e.def.impl&%16.spec_encrypted. fuel%verismo!pgtable_e.def.impl&%16.spec_page. fuel%verismo!pgtable_e.def.impl&%16.spec_nx. fuel%verismo!pgtable_e.def.impl&%16.view. fuel%verismo!pgtable_e.def.top_lvl_idx. fuel%verismo!pgtable_e.def.impl&%19.vspec_cast_to. fuel%verismo!pgtable_e.def.impl&%20.spec_size_def. fuel%verismo!pgtable_e.def.impl&%22.wf. fuel%verismo!pgtable_e.def.impl&%23.is_constant. fuel%verismo!pgtable_e.def.impl&%23.is_constant_to. fuel%verismo!pgtable_e.pte.impl&%2.invfn. fuel%verismo!pgtable_e.pte.impl&%2.view. fuel%verismo!pgtable_e.pte.wf_ptes. fuel%verismo!pgtable_e.pte.impl&%4.spec_index0. fuel%verismo!pgtable_e.pte.impl&%4.spec_index1. fuel%verismo!pgtable_e.pte.impl&%4.spec_index2. fuel%verismo!pgtable_e.pte.impl&%4.spec_index3. fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index0. fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index1. fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index2. fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index3. fuel%verismo!pgtable_e.pte.impl&%15.spec_size_def. fuel%verismo!pgtable_e.pte.impl&%16.spec_eq. fuel%verismo!pgtable_e.pte.impl&%17.is_constant. fuel%verismo!pgtable_e.pte.impl&%17.is_constant_to. fuel%verismo!pgtable_e.pte.impl&%18.wf. fuel%verismo!pgtable_e.pte.impl&%20.inv. fuel%verismo!pgtable_e.pte.impl&%20.spec_new. fuel%verismo!pgtable_e.pte.impl&%20.lemma_new_eq. fuel%verismo!pgtable_e.pte.impl&%20.spec_index0. fuel%verismo!pgtable_e.pte.impl&%20.spec_index1. fuel%verismo!pgtable_e.pte.impl&%20.spec_index2. fuel%verismo!pgtable_e.pte.impl&%20.spec_index3. fuel%verismo!pgtable_e.pte.impl&%20.view. fuel%verismo!ptr.def_s.impl&%4.vspec_cast_to. fuel%verismo!ptr.def_s.impl&%5.spec_size_def. fuel%verismo!ptr.def_s.impl&%7.wf. fuel%verismo!ptr.def_s.impl&%8.is_constant. fuel%verismo!ptr.def_s.impl&%8.is_constant_to. fuel%verismo!ptr.def_s.impl&%19.id. fuel%verismo!ptr.def_s.impl&%20.spec_ptr. fuel%verismo!ptr.def_s.impl&%20.spec_value. fuel%verismo!ptr.def_s.impl&%20.spec_snp. fuel%verismo!ptr.ptr_s.inv_snp_value. fuel%verismo!ptr.ptr_s.impl&%1.snp. fuel%verismo!ptr.ptr_s.impl&%1.hw_snp. fuel%verismo!ptr.ptr_s.impl&%3.vspec_cast_to. fuel%verismo!ptr.ptr_s.impl&%5.is_constant_to. fuel%verismo!ptr.ptr_s.impl&%5.is_constant. fuel%verismo!ptr.ptr_u.impl&%0.wf. fuel%verismo!ptr.ptr_u.impl&%1.not_null. fuel%verismo!ptr.ptr_u.impl&%2.id. fuel%verismo!ptr.ptr_u.impl&%2.pptr. fuel%verismo!ptr.ptr_u.impl&%2.value. fuel%verismo!ptr.ptr_u.impl&%2.get_value. fuel%verismo!ptr.ptr_u.impl&%2.wf_value. fuel%verismo!ptr.ptr_u.impl&%2.wf_at. fuel%verismo!ptr.ptr_u.impl&%2.wf_not_null_at. fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_pptr. fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes. fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp. fuel%verismo!ptr.raw_ptr_s.impl&%5.only_val_updated. fuel%verismo!ptr.raw_ptr_s.impl&%5.size. fuel%verismo!ptr.raw_ptr_s.impl&%5.range. fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_range. fuel%verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range. fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_const_default. fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_default. fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_not_null. fuel%verismo!ptr.raw_ptr_s.impl&%5.wf. fuel%verismo!ptr.raw_ptr_s.impl&%5.bytes. fuel%verismo!ptr.raw_ptr_s.impl&%5.value. fuel%verismo!ptr.raw_ptr_s.impl&%6.vspec_cast_to. fuel%verismo!ptr.raw_ptr_s.impl&%8.snp. fuel%verismo!ptr.raw_ptr_s.impl&%8.hw_snp. fuel%verismo!ptr.raw_ptr_t.spec_mem_copy. fuel%verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_start. fuel%verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_end. fuel%verismo!ptr.raw_ptr_t.spec_mem_copy_page. fuel%verismo!registers.core_perm_s.impl&%0.spec_cpu. fuel%verismo!registers.core_perm_s.impl&%0.spec_run. fuel%verismo!registers.core_perm_s.impl&%0.spec_vmpl. fuel%verismo!registers.core_perm_s.impl&%0.spec_count. fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs. fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_mem. fuel%verismo!registers.msr_perm_s.impl&%0.shared. fuel%verismo!registers.msr_perm_s.impl&%0.value. fuel%verismo!registers.msr_perm_s.impl&%1.wf. fuel%verismo!registers.msr_perm_s.impl&%2.view. fuel%verismo!security.mem.spec_is_default_pages_const_to_vmpl. fuel%verismo!security.mem.RICHOS_VMPL. fuel%verismo!security.mem.impl&%0.spec_read. fuel%verismo!security.mem.impl&%0.spec_write. fuel%verismo!security.mem.impl&%0.spec_user_exe. fuel%verismo!security.mem.impl&%0.spec_kern_exe. fuel%verismo!security.mem.impl&%1.spec_set_read. fuel%verismo!security.mem.impl&%1.spec_set_write. fuel%verismo!security.mem.impl&%1.spec_set_user_exe. fuel%verismo!security.mem.impl&%1.spec_set_kern_exe. fuel%verismo!security.mem.impl&%11.spec_size_def. fuel%verismo!security.mem.impl&%12.spec_eq. fuel%verismo!security.mem.impl&%13.is_constant. fuel%verismo!security.mem.impl&%13.is_constant_to. fuel%verismo!security.mem.impl&%14.wf. fuel%verismo!security.mem.impl&%16.inv. fuel%verismo!security.mem.impl&%16.spec_new. fuel%verismo!security.mem.impl&%16.lemma_new_eq. fuel%verismo!security.mem.impl&%16.spec_read. fuel%verismo!security.mem.impl&%16.spec_write. fuel%verismo!security.mem.impl&%16.spec_user_exe. fuel%verismo!security.mem.impl&%16.spec_kern_exe. fuel%verismo!security.mem.impl&%16.view. fuel%verismo!security.mem.impl&%19.to_page_perm. fuel%verismo!security.mem.impl&%23.vspec_cast_to. fuel%verismo!security.mem.impl&%24.spec_size_def. fuel%verismo!security.mem.impl&%26.wf. fuel%verismo!security.mem.impl&%27.is_constant. fuel%verismo!security.mem.impl&%27.is_constant_to. fuel%verismo!security.mem.os_mem_valid_snp. fuel%verismo!security.mem.spec_contains_page_perm. fuel%verismo!security.mem.spec_contains_page_perms. fuel%verismo!security.mem.impl&%28.spec_osperm. fuel%verismo!security.mem.impl&%28.open_wf. fuel%verismo!security.mem.impl&%28.wf. fuel%verismo!security.mem.impl&%28.spec_start. fuel%verismo!security.mem.impl&%28.spec_end. fuel%verismo!security.mem.osmem_wf. fuel%verismo!security.secret.impl&%8.spec_size_def. fuel%verismo!security.secret.impl&%13.spec_set_authtag. fuel%verismo!security.secret.impl&%13.spec_set_algo. fuel%verismo!security.secret.impl&%20.spec_size_def. fuel%verismo!security.secret.impl&%21.spec_authtag_offset. fuel%verismo!security.secret.impl&%21.spec_algo_offset. fuel%verismo!security.secret.impl&%23.spec_borrow_requires. fuel%verismo!security.secret.impl&%23.spec_borrow_ensures. fuel%verismo!security.secret.impl&%25.spec_update_requires. fuel%verismo!security.secret.impl&%25.spec_update. fuel%verismo!security.secret.impl&%27.spec_borrow_requires. fuel%verismo!security.secret.impl&%27.spec_borrow_ensures. fuel%verismo!security.secret.impl&%29.spec_update_requires. fuel%verismo!security.secret.impl&%29.spec_update. fuel%verismo!security.secret.impl&%33.wf_mastersecret. fuel%verismo!security.secret.impl&%35.spec_update_requires. fuel%verismo!security.secret.impl&%35.spec_update. fuel%verismo!snp.cpuid.impl&%4.vspec_cast_to. fuel%verismo!snp.cpuid.impl&%5.spec_size_def. fuel%verismo!snp.cpuid.impl&%7.wf. fuel%verismo!snp.cpuid.impl&%8.is_constant. fuel%verismo!snp.cpuid.impl&%8.is_constant_to. fuel%verismo!snp.cpuid.impl&%13.vspec_cast_to. fuel%verismo!snp.cpuid.impl&%14.spec_size_def. fuel%verismo!snp.cpuid.impl&%16.wf. fuel%verismo!snp.cpuid.impl&%17.is_constant. fuel%verismo!snp.cpuid.impl&%17.is_constant_to. fuel%verismo!snp.cpuid.impl&%22.vspec_cast_to. fuel%verismo!snp.cpuid.impl&%23.spec_size_def. fuel%verismo!snp.cpuid.impl&%25.wf. fuel%verismo!snp.cpuid.impl&%26.is_constant. fuel%verismo!snp.cpuid.impl&%26.is_constant_to. fuel%verismo!snp.mem.spec_is_shared_page_perms. fuel%verismo!vbox.vbox.impl&%0.is_constant. fuel%verismo!vbox.vbox.impl&%0.is_constant_to. fuel%verismo!vbox.vbox.impl&%1.spec_size_def. fuel%verismo!vbox.vbox.impl&%4.is_page. fuel%verismo!vbox.vbox.impl&%4.is_shared_page. fuel%verismo!vbox.vbox.impl&%4.is_default_page. fuel%verismo!vbox.vbox.impl&%5.wf. fuel%verismo!vbox.vbox.impl&%6.only_val_updated. fuel%verismo!vbox.vbox.impl&%9.spec_update_requires. fuel%verismo!vbox.vbox.impl&%9.spec_update. fuel%verismo!vbox.vbox.impl&%10.spec_update_cs_requires. fuel%verismo!vbox.vbox.impl&%10.spec_update_cs. fuel%verismo!vbox.vbox.impl&%11.spec_borrow_requires. fuel%verismo!vbox.vbox.impl&%11.spec_borrow_ensures. fuel%verismo!vcell.vcell.impl&%3.spec_size_def. fuel%verismo!tspec.spec_unused. fuel%verismo!bsp.impl&%0.inv_ac. fuel%verismo!linkedlist.impl&%1.spec_default. fuel%verismo!linkedlist.impl&%4.vspec_cast_to. fuel%verismo!linkedlist.impl&%5.spec_size_def. fuel%verismo!linkedlist.impl&%7.wf. fuel%verismo!linkedlist.impl&%8.is_constant. fuel%verismo!linkedlist.impl&%8.is_constant_to. fuel%verismo!linkedlist.impl&%11.vspec_cast_to. fuel%verismo!linkedlist.impl&%12.spec_size_def. fuel%verismo!linkedlist.impl&%14.wf. fuel%verismo!linkedlist.impl&%15.is_constant. fuel%verismo!linkedlist.impl&%15.is_constant_to. fuel%verismo!global.spec_ALLOCATOR_range. fuel%verismo!global.spec_ALLOCATOR_lockid. fuel%verismo!global.contains_ALLOCATOR. fuel%verismo!global.spec_CONSOLE_range. fuel%verismo!global.spec_CONSOLE_lockid. fuel%verismo!global.contains_CONSOLE. fuel%verismo!global.spec_PT_range. fuel%verismo!global.spec_PT_lockid. fuel%verismo!global.contains_PT. fuel%verismo!global.spec_SEC_PERM_range. fuel%verismo!global.spec_SEC_PERM_lockid. fuel%verismo!global.spec_OSMEM_range. fuel%verismo!global.spec_OSMEM_lockid. fuel%verismo!global.spec_RICHOS_VMSA_range. fuel%verismo!global.spec_RICHOS_VMSA_lockid. fuel%verismo!global.spec_PCR_range. fuel%verismo!global.spec_PCR_lockid. fuel%verismo!global.impl&%0.is_console. fuel%verismo!security.impl&%5.spec_size_def. fuel%verismo!security.impl&%9.spec_snphdr. fuel%verismo!security.impl&%9.spec_payload. fuel%verismo!security.impl&%10.spec_set_snphdr. fuel%verismo!security.impl&%10.spec_set_payload. fuel%verismo!security.impl&%14.vspec_cast_to. fuel%verismo!security.impl&%15.spec_size_def. fuel%verismo!security.impl&%16.spec_snphdr_offset. fuel%verismo!security.impl&%16.spec_payload_offset. fuel%verismo!security.impl&%18.spec_borrow_requires. fuel%verismo!security.impl&%18.spec_borrow_ensures. fuel%verismo!security.impl&%20.spec_update_requires. fuel%verismo!security.impl&%20.spec_update. fuel%verismo!security.impl&%22.spec_borrow_requires. fuel%verismo!security.impl&%22.spec_borrow_ensures. fuel%verismo!security.impl&%24.spec_update_requires. fuel%verismo!security.impl&%24.spec_update. fuel%verismo!security.impl&%26.wf. fuel%verismo!security.impl&%27.is_constant. fuel%verismo!security.impl&%27.is_constant_to.))
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-sort alloc!alloc.Global. 0)
(declare-sort alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>. 0)
(declare-sort alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>. 0)
(declare-sort verismo!allocator.linkedlist.LinkedListAllocator. 0)
(declare-sort verismo!lock.spin_perm_s.LockPermRaw. 0)
(declare-sort verismo!lock.spin_t.SpinLock. 0)
(declare-sort verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. 0)
(declare-sort verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. 0)
(declare-sort verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. 0)
(declare-sort verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. 0)
(declare-sort verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. 0)
(declare-sort verismo!mem.rawmem_p.RawMemPerms. 0)
(declare-sort verismo!ptr.def_s.SnpPointsTo<verismo!boot.linux.BootInfo.>. 0)
(declare-sort verismo!ptr.def_s.SnpPointsTo<verismo!boot.params.BootParams.>. 0)
(declare-sort verismo!ptr.def_s.SnpPointsToRaw. 0)
(declare-sort verismo!registers.core_perm_s.CoreIdPerm. 0)
(declare-sort verismo!registers.msr_perm_s.RegisterPerm. 0)
(declare-sort verismo!security.SecretsOSArea. 0)
(declare-sort verismo!security.secret.SnpGuestMsgHdr. 0)
(declare-sort verismo!security.secret.SnpSecretsPageLayout. 0)
(declare-sort verismo!snp.cpu.vmsa.SevFeaturesSpec. 0)
(declare-sort verismo!tspec.security.sectype.SecType<int./tuple%0.>. 0)
(declare-sort verismo!tspec.security.sectype.SecType<u8./tuple%0.>. 0)
(declare-sort verismo!tspec.security.sectype.SecType<u16./tuple%0.>. 0)
(declare-sort verismo!tspec.security.sectype.SecType<u32./tuple%0.>. 0)
(declare-sort verismo!tspec.security.sectype.SecType<u64./tuple%0.>. 0)
(declare-sort verismo!tspec.security.sectype.SecType<usize./tuple%0.>. 0)
(declare-sort verismo!vbox.vbox.VBox<verismo!boot.linux.BootInfo.>. 0)
(declare-sort verismo!vbox.vbox.VBox<verismo!boot.params.BootParams.>. 0)
(declare-sort verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>. 0)
(declare-sort verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>. 0)
(declare-sort verismo!vbox.vbox.VBox<verismo!snp.cpuid.SnpCpuidTable.>. 0)
(declare-sort vstd!map.Map<int./int.>. 0)
(declare-sort vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. 0)
(declare-sort vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. 0)
(declare-sort vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>. 0)
(declare-sort vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. 0)
(declare-sort vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>. 0)
(declare-sort vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. 0)
(declare-sort vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<char.>. 0)
(declare-sort vstd!seq.Seq<tuple%2<int./nat.>.>. 0)
(declare-sort vstd!seq.Seq<tuple%2<nat./nat.>.>. 0)
(declare-sort vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. 0)
(declare-sort vstd!seq.Seq<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. 0)
(declare-sort vstd!seq.Seq<verismo!boot.params.E820Entry.>. 0)
(declare-sort vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. 0)
(declare-sort vstd!seq.Seq<verismo!security.mem.OSMemEntry.>. 0)
(declare-sort vstd!seq.Seq<verismo!tspec.security.sectype.SecType<u64./tuple%0.>.>. 0)
(declare-sort vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. 0)
(declare-sort vstd!set.Set<int.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<tuple%2<int./nat.>.>. 0)
(declare-sort vstd!set.Set<verismo!arch.entities.VMPL.>. 0)
(declare-sort vstd!set.Set<verismo!arch.reg.RegName.>. 0)
(declare-sort vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. 0)
(declare-sort slice%<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. 0)
(declare-sort slice%<verismo!boot.params.E820Entry.>. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (verismo!tspec.security.sectype.DataLabel. 0) (verismo!tspec.security.sectype.SpecSecType. 0) (verismo!arch.addr_s.def_s.GuestPhy. 0) (verismo!arch.addr_s.def_s.SpecPage. 0) (verismo!arch.addr_s.def_s.SpecAddr. 0) (verismo!arch.addr_s.def_s.SpecMem. 0) (verismo!arch.addr_s.def_s.PageSize. 0) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. 0) (verismo!arch.rmp.def_s.RmpEntry. 0) (verismo!arch.rmp.perm_s.Perm. 0) (verismo!boot.idt.def.Idtr. 0) (verismo!boot.init.init_e.InitE820Fn. 0) (verismo!boot.init.init_e.InitCpuCount. 0) (verismo!boot.init.mshv_alloc.InitAllocFn. 0) (verismo!boot.init.mshv_fmt.FmtHvParamCall. 0) (verismo!boot.mshyper.param_e.HyperVMemMapEntry. 0) (verismo!boot.mshyper.param_e.HvParamTable. 0) (verismo!ptr.snp.snp_u.RmpAttrSpec. 0) (verismo!ptr.snp.snp_u.RmpAttr. 0) (verismo!ptr.snp.snp_u.PTAttr. 0) (verismo!ptr.snp.snp_u.SwSnpMemAttr. 0) (verismo!ptr.snp.snp_u.SnpMemAttr. 0) (verismo!registers.trackedcore.snpcore.SnpCore. 0) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. 0) (verismo!snp.cpu.gdt.DescriptorAttr0_7. 0) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. 0) (verismo!snp.cpu.gdt.DescriptorAttr8_11. 0) (verismo!snp.cpu.gdt.DescriptorSpec. 0) (verismo!snp.cpu.gdt.Descriptor. 0) (verismo!snp.cpu.gdt.Gdtr. 0) (verismo!snp.cpu.vmsa.SevFeatures. 0) (verismo!snp.cpu.vmsa.VmsaSegmentRegister. 0) (verismo!snp.cpu.vmsa.Copyvmpl. 0) (verismo!snp.cpu.vmsa.Updatevmpl. 0) (verismo!snp.cpu.vmsa.Copyrax. 0) (verismo!snp.cpu.vmsa.Updaterax. 0) (verismo!snp.cpu.vmsa.Copyrcx. 0) (verismo!snp.cpu.vmsa.Updatercx. 0) (verismo!snp.cpu.vmsa.Copyrdx. 0) (verismo!snp.cpu.vmsa.Updaterdx. 0) (verismo!snp.cpu.vmsa.Copyrbx. 0) (verismo!snp.cpu.vmsa.Updaterbx. 0) (verismo!snp.cpu.vmsa.Copyguest_error_code. 0) (verismo!snp.cpu.vmsa.Updateguest_error_code. 0) (verismo!snp.cpu.vmsa.Vmsa. 0) (verismo!snp.cpu.vmsa.PerCpuData. 0) (verismo!snp.cpu.vmsa.InitApVmsa. 0) (verismo!snp.cpu.vmsa.InitAPParams. 0) (verismo!snp.cpu.vmsa.UpdateRichOSVmsa. 0) (verismo!snp.cpu.vmsa.UpdateVMPL. 0) (verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. 0) (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. 0) (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. 0) (verismo!tspec_e.array.array_e.ArrayUpdate. 0) (verismo!arch.entities.VMPL. 0) (verismo!arch.reg.RegName. 0) (verismo!primitives_e.vec.PushParam. 0) (verismo!allocator.linkedlist.SpecLinkedListAllocator. 0) (verismo!boot.linux.Copybp. 0) (verismo!boot.linux.Updatebp. 0) (verismo!boot.linux.Copysecret. 0) (verismo!boot.linux.Updatesecret. 0) (verismo!boot.linux.Copycpuid. 0) (verismo!boot.linux.Updatecpuid. 0) (verismo!boot.linux.Copygdt. 0) (verismo!boot.linux.Updategdt. 0) (verismo!boot.linux.Copycmdline. 0) (verismo!boot.linux.Updatecmdline. 0) (verismo!boot.linux.Copyccblob. 0) (verismo!boot.linux.Updateccblob. 0) (verismo!boot.linux.BootInfo. 0) (verismo!boot.linux.CCBlobSevInfo. 0) (verismo!boot.linux.BootUpdate. 0) (verismo!boot.linux.SetBasicBootInfoParam. 0) (verismo!boot.linux.SetSnpBootInfoParam. 0) (verismo!boot.linux.SetMemoryBootInfoParam. 0) (verismo!boot.monitor_params.MonitorParams. 0) (verismo!boot.params.E820Entry. 0) (verismo!boot.params.SetupHeader. 0) (verismo!boot.params.Copye820_entries. 0) (verismo!boot.params.Updatee820_entries. 0) (verismo!boot.params.Copye820. 0) (verismo!boot.params.Updatee820. 0) (verismo!boot.params.BootParams. 0) (verismo!debug.interface.Console. 0) (verismo!lock.spin_perm_s.InvRawFn. 0) (verismo!lock.spin_perm_s.LockPermToRaw. 0) (verismo!mem.rawmem_s.SnpMemCoreConsole. 0) (verismo!pgtable_e.def.SpecPTE. 0) (verismo!pgtable_e.def.PTE. 0) (verismo!pgtable_e.def.PtePerm. 0) (verismo!pgtable_e.def.TrackedPTEPerms. 0) (verismo!pgtable_e.pte.SpecVAddrIndex. 0) (verismo!pgtable_e.pte.VAddrIndex. 0) (verismo!ptr.def_s.SnpPPtr. 0) (verismo!ptr.def_s.SnpPointsToData. 0) (verismo!ptr.raw_ptr_s.SnpPointsToBytes. 0) (verismo!registers.core_perm_s.CoreMode. 0) (verismo!registers.msr_perm_s.RegisterPermValue. 0) (verismo!security.mem.OSMemPermSpec. 0) (verismo!security.mem.OSMemPerm. 0) (verismo!security.mem.OSMemEntry. 0) (verismo!security.secret.Copyauthtag. 0) (verismo!security.secret.Updateauthtag. 0) (verismo!security.secret.Copyalgo. 0) (verismo!security.secret.Updatealgo. 0) (verismo!security.secret.FillSecretForVMPL. 0) (verismo!security.secret.FillSecretForVMPLOut. 0) (verismo!snp.cpuid.RegABCD. 0) (verismo!snp.cpuid.SnpCpuidFn. 0) (verismo!snp.cpuid.SnpCpuidTable. 0) (verismo!linkedlist.Node. 0) (verismo!linkedlist.SpecListItem. 0) (verismo!linkedlist.LinkedList. 0) (verismo!global.Globals. 0) (verismo!security.Copysnphdr. 0) (verismo!security.Updatesnphdr. 0) (verismo!security.Copypayload. 0) (verismo!security.Updatepayload. 0) (verismo!security.SnpGuestMsg. 0) (tuple%0. 0) (tuple%1. 0) (tuple%2. 0) (tuple%3. 0) (tuple%6. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((verismo!tspec.security.sectype.DataLabel./Symbol ) (verismo!tspec.security.sectype.DataLabel./Unknown ) (verismo!tspec.security.sectype.DataLabel./TrustedRandom ) (verismo!tspec.security.sectype.DataLabel./Secret )) ((verismo!tspec.security.sectype.SpecSecType./SpecSecType (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?val Poly) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?_unused core!option.Option.) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?valsets Poly) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?labels vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.))) ((verismo!arch.addr_s.def_s.GuestPhy./GuestPhy )) ((verismo!arch.addr_s.def_s.SpecPage./SpecPage (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?value Int) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?dummy Poly))) ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?value Int) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?dummy Poly))) ((verismo!arch.addr_s.def_s.SpecMem./SpecMem (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?first verismo!arch.addr_s.def_s.SpecAddr.) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?size Int))) ((verismo!arch.addr_s.def_s.PageSize./Size4k ) (verismo!arch.addr_s.def_s.PageSize./Size2m )) ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?immutable Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?assigned Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?validated Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?vmsa Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?asid Int) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?gpn verismo!arch.addr_s.def_s.SpecPage.) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?size verismo!arch.addr_s.def_s.PageSize.) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?perms vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.))) ((verismo!arch.rmp.def_s.RmpEntry./RmpEntry (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/?val verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.))) ((verismo!arch.rmp.perm_s.Perm./Read ) (verismo!arch.rmp.perm_s.Perm./Write ) (verismo!arch.rmp.perm_s.Perm./ExeU ) (verismo!arch.rmp.perm_s.Perm./ExeS ) (verismo!arch.rmp.perm_s.Perm./Shadow )) ((verismo!boot.idt.def.Idtr./Idtr (verismo!boot.idt.def.Idtr./Idtr/?limit verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.idt.def.Idtr./Idtr/?base verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!boot.init.init_e.InitE820Fn./InitE820Fn )) ((verismo!boot.init.init_e.InitCpuCount./InitCpuCount )) ((verismo!boot.init.mshv_alloc.InitAllocFn./InitAllocFn )) ((verismo!boot.init.mshv_fmt.FmtHvParamCall./FmtHvParamCall )) ((verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/?starting_gpn verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/?numpages verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/?mem_type verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/?flags verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/?reserved verismo!tspec.security.sectype.SecType<u32./tuple%0.>.))) ((verismo!boot.mshyper.param_e.HvParamTable./HvParamTable (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/?cpu_count verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/?reserved Poly) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/?mem_table Poly))) ((verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/?vmpl Int) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/?perms Int) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/?vmsa Int))) ((verismo!ptr.snp.snp_u.RmpAttr./RmpAttr (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/?value Int))) ((verismo!ptr.snp.snp_u.PTAttr./PTAttr (verismo!ptr.snp.snp_u.PTAttr./PTAttr/?encrypted Bool) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/?w Bool) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/?x Bool))) ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?rmp verismo!arch.rmp.def_s.RmpEntry.) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?guestmap vstd!map.Map<int./int.>.) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?sysmap vstd!map.Map<int./int.>.) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?rmpmap vstd!map.Map<int./int.>.) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?pte vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?is_pte Bool))) ((verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/?hw verismo!ptr.snp.snp_u.SwSnpMemAttr.) (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/?sw verismo!ptr.snp.snp_u.SwSnpMemAttr.))) ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?coreid verismo!registers.core_perm_s.CoreIdPerm.) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?vmpl Int) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?cpu Int) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?regs vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.))) ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?accessed Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?write Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?conform Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?exe Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?sys Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?dpl Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?present Int))) ((verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/?value Int))) ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?avl Int) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?long Int) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?size32_or_16 Int) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?granularity Int))) ((verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/?value Int))) ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?limit0_15 Int) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?base0_23 Int) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?attr_0_7 Int) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?limit16_19 Int) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?attr_8_11 Int) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?base24_31 Int))) ((verismo!snp.cpu.gdt.Descriptor./Descriptor (verismo!snp.cpu.gdt.Descriptor./Descriptor/?value Int))) ((verismo!snp.cpu.gdt.Gdtr./Gdtr (verismo!snp.cpu.gdt.Gdtr./Gdtr/?limit verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!snp.cpu.gdt.Gdtr./Gdtr/?base verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!snp.cpu.vmsa.SevFeatures./SevFeatures (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/?value Int))) ((verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?selector verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?attr verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?limit verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?base verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!snp.cpu.vmsa.Copyvmpl./Copyvmpl )) ((verismo!snp.cpu.vmsa.Updatevmpl./Updatevmpl (verismo!snp.cpu.vmsa.Updatevmpl./Updatevmpl/?val verismo!tspec.security.sectype.SecType<u8./tuple%0.>.))) ((verismo!snp.cpu.vmsa.Copyrax./Copyrax )) ((verismo!snp.cpu.vmsa.Updaterax./Updaterax (verismo!snp.cpu.vmsa.Updaterax./Updaterax/?val verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!snp.cpu.vmsa.Copyrcx./Copyrcx )) ((verismo!snp.cpu.vmsa.Updatercx./Updatercx (verismo!snp.cpu.vmsa.Updatercx./Updatercx/?val verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!snp.cpu.vmsa.Copyrdx./Copyrdx )) ((verismo!snp.cpu.vmsa.Updaterdx./Updaterdx (verismo!snp.cpu.vmsa.Updaterdx./Updaterdx/?val verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!snp.cpu.vmsa.Copyrbx./Copyrbx )) ((verismo!snp.cpu.vmsa.Updaterbx./Updaterbx (verismo!snp.cpu.vmsa.Updaterbx./Updaterbx/?val verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!snp.cpu.vmsa.Copyguest_error_code./Copyguest_error_code )) ((verismo!snp.cpu.vmsa.Updateguest_error_code./Updateguest_error_code (verismo!snp.cpu.vmsa.Updateguest_error_code./Updateguest_error_code/?val verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!snp.cpu.vmsa.Vmsa./Vmsa (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?es verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cs verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?ss verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?ds verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?fs verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?gs verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?gdtr verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_ldtr_idtr_tr Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?vmpl verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cpl verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved2 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?efer verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved3 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cr4 verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cr3 verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cr0 verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_dr7_6 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rflags verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rip verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved4 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rsp verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved5 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rax verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved6 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?gpat verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved7 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rcx verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rdx verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rbx verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved8 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rbp verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rsi verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rdi verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_9_r9_15_exits_scratch Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?sev_features verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?vintr_ctrl verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?guest_error_code verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?virtual_tom verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_12 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?xcr0 verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved13 Poly))) ((verismo!snp.cpu.vmsa.PerCpuData./PerCpuData (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/?secret verismo!security.secret.SnpSecretsPageLayout.) (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/?cpu Int) (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/?resvd Int))) ((verismo!snp.cpu.vmsa.InitApVmsa./InitApVmsa )) ((verismo!snp.cpu.vmsa.InitAPParams./InitAPParams (verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/?fun verismo!snp.cpu.vmsa.InitApVmsa.) (verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/?cpu verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>.) (verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/?gdt Poly))) ((verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/?gdt Poly) (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/?gdtr_addr Int) (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/?bp_addr Int) (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/?kernel_addr Int) (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/?vmpl Int))) ((verismo!snp.cpu.vmsa.UpdateVMPL./UpdateVMPL (verismo!snp.cpu.vmsa.UpdateVMPL./UpdateVMPL/?vmpl Int))) ((verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut./UpdateRichOSVmsaOut )) ((verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/?snpcore verismo!registers.trackedcore.snpcore.SnpCore.) (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/?lockperms vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>.))) ((verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/?snpcore verismo!registers.trackedcore.snpcore.SnpCore.) (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/?console vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.))) ((verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/?index Int) (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/?val Poly))) ((verismo!arch.entities.VMPL./VMPL0 ) (verismo!arch.entities.VMPL./VMPL1 ) (verismo!arch.entities.VMPL./VMPL2 ) (verismo!arch.entities.VMPL./VMPL3 )) ((verismo!arch.reg.RegName./Rflags ) (verismo!arch.reg.RegName./Rax ) (verismo!arch.reg.RegName./Rsp ) (verismo!arch.reg.RegName./Cs ) (verismo!arch.reg.RegName./Ds ) (verismo!arch.reg.RegName./Ss ) (verismo!arch.reg.RegName./Es ) (verismo!arch.reg.RegName./Gs ) (verismo!arch.reg.RegName./Cpl ) (verismo!arch.reg.RegName./Cr0 ) (verismo!arch.reg.RegName./Cr1 ) (verismo!arch.reg.RegName./Cr2 ) (verismo!arch.reg.RegName./Cr3 ) (verismo!arch.reg.RegName./Cr4 ) (verismo!arch.reg.RegName./XCr0 ) (verismo!arch.reg.RegName./IdtrBaseLimit ) (verismo!arch.reg.RegName./GdtrBaseLimit ) (verismo!arch.reg.RegName./MSR (verismo!arch.reg.RegName./MSR/?0 Int))) ((verismo!primitives_e.vec.PushParam./PushParam (verismo!primitives_e.vec.PushParam./PushParam/?val Poly))) ((verismo!allocator.linkedlist.SpecLinkedListAllocator./SpecLinkedListAllocator (verismo!allocator.linkedlist.SpecLinkedListAllocator./SpecLinkedListAllocator/?perms vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>.) (verismo!allocator.linkedlist.SpecLinkedListAllocator./SpecLinkedListAllocator/?free_list verismo!linkedlist.LinkedList.))) ((verismo!boot.linux.Copybp./Copybp )) ((verismo!boot.linux.Updatebp./Updatebp (verismo!boot.linux.Updatebp./Updatebp/?val verismo!boot.params.BootParams.))) ((verismo!boot.linux.Copysecret./Copysecret )) ((verismo!boot.linux.Updatesecret./Updatesecret (verismo!boot.linux.Updatesecret./Updatesecret/?val verismo!security.secret.SnpSecretsPageLayout.))) ((verismo!boot.linux.Copycpuid./Copycpuid )) ((verismo!boot.linux.Updatecpuid./Updatecpuid (verismo!boot.linux.Updatecpuid./Updatecpuid/?val verismo!snp.cpuid.SnpCpuidTable.))) ((verismo!boot.linux.Copygdt./Copygdt )) ((verismo!boot.linux.Updategdt./Updategdt (verismo!boot.linux.Updategdt./Updategdt/?val Poly))) ((verismo!boot.linux.Copycmdline./Copycmdline )) ((verismo!boot.linux.Updatecmdline./Updatecmdline (verismo!boot.linux.Updatecmdline./Updatecmdline/?val Poly))) ((verismo!boot.linux.Copyccblob./Copyccblob )) ((verismo!boot.linux.Updateccblob./Updateccblob (verismo!boot.linux.Updateccblob./Updateccblob/?val verismo!boot.linux.CCBlobSevInfo.))) ((verismo!boot.linux.BootInfo./BootInfo (verismo!boot.linux.BootInfo./BootInfo/?bp verismo!boot.params.BootParams.) (verismo!boot.linux.BootInfo./BootInfo/?secret verismo!security.secret.SnpSecretsPageLayout.) (verismo!boot.linux.BootInfo./BootInfo/?cpuid verismo!snp.cpuid.SnpCpuidTable.) (verismo!boot.linux.BootInfo./BootInfo/?gdt Poly) (verismo!boot.linux.BootInfo./BootInfo/?cmdline Poly) (verismo!boot.linux.BootInfo./BootInfo/?ccblob verismo!boot.linux.CCBlobSevInfo.) (verismo!boot.linux.BootInfo./BootInfo/?reserved Poly))) ((verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?reserved0 verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?reserved0_1 verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?reserved1 verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?secrets_phys verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?secrets_len verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?reserved2 verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?cpuid_phys verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?cpuid_len verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?reserved3 verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?shared_page verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!boot.linux.BootUpdate./BootUpdate (verismo!boot.linux.BootUpdate./BootUpdate/?acpi_rsdp_addr Int) (verismo!boot.linux.BootUpdate./BootUpdate/?cc_blob_addr Int) (verismo!boot.linux.BootUpdate./BootUpdate/?cmd_line_addr Int) (verismo!boot.linux.BootUpdate./BootUpdate/?cmdline_size Int) (verismo!boot.linux.BootUpdate./BootUpdate/?e820_entries Int) (verismo!boot.linux.BootUpdate./BootUpdate/?e820 Poly) (verismo!boot.linux.BootUpdate./BootUpdate/?hdr verismo!boot.params.SetupHeader.))) ((verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/?mparam verismo!boot.monitor_params.MonitorParams.) (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/?vmpl Int) (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/?richos_boot verismo!boot.params.BootParams.) (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/?cc_blob_addr Int) (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/?cmd_line_addr Int))) ((verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/?vmpl Int) (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/?secret_addr Int) (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/?master_secret verismo!security.secret.SnpSecretsPageLayout.) (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/?cpuid_addr Int) (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/?early_shared Poly) (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/?cpuid verismo!snp.cpuid.SnpCpuidTable.))) ((verismo!boot.linux.SetMemoryBootInfoParam./SetMemoryBootInfoParam (verismo!boot.linux.SetMemoryBootInfoParam./SetMemoryBootInfoParam/?vmpl Int))) ((verismo!boot.monitor_params.MonitorParams./MonitorParams (verismo!boot.monitor_params.MonitorParams./MonitorParams/?cpu_count verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?cpuid_page verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?secret_page verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?hv_param verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?validated_entries verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?validated_e820 Poly) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?acpi verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?acpi_size verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?richos_start verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?richos_size verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?richos_cmdline Poly) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?richos_cmdline_len verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!boot.params.E820Entry./E820Entry (verismo!boot.params.E820Entry./E820Entry/?addr verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.params.E820Entry./E820Entry/?size verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.params.E820Entry./E820Entry/?memty verismo!tspec.security.sectype.SecType<u32./tuple%0.>.))) ((verismo!boot.params.SetupHeader./SetupHeader (verismo!boot.params.SetupHeader./SetupHeader/?setup_sects verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?root_flags verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?syssize verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?ram_size verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?vid_mode verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?root_dev verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?boot_flag verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?jump verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?header verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?version verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?realmode_swtch verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?start_sys_seg verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?kernel_version verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?type_of_loader verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?loadflags verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?setup_move_size verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?code32_start verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?ramdisk_image verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?ramdisk_size verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?bootsect_kludge verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?heap_end_ptr verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?ext_loader_ver verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?ext_loader_type verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?cmd_line_ptr verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?initrd_addr_max verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?kernel_alignment verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?relocatable_kernel verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?min_alignment verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?xloadflags verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?cmdline_size verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?hardware_subarch verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?hardware_subarch_data verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?payload_offset verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?payload_length verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?setup_data verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?pref_address verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?init_size verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?handover_offset verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.SetupHeader./SetupHeader/?kernel_info_offset verismo!tspec.security.sectype.SecType<u32./tuple%0.>.))) ((verismo!boot.params.Copye820_entries./Copye820_entries )) ((verismo!boot.params.Updatee820_entries./Updatee820_entries (verismo!boot.params.Updatee820_entries./Updatee820_entries/?val verismo!tspec.security.sectype.SecType<u8./tuple%0.>.))) ((verismo!boot.params.Copye820./Copye820 )) ((verismo!boot.params.Updatee820./Updatee820 (verismo!boot.params.Updatee820./Updatee820/?val Poly))) ((verismo!boot.params.BootParams./BootParams (verismo!boot.params.BootParams./BootParams/?_pad0 Poly) (verismo!boot.params.BootParams./BootParams/?acpi_rsdp_addr verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!boot.params.BootParams./BootParams/?_pad1 Poly) (verismo!boot.params.BootParams./BootParams/?_ext_cmd_line_ptr verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.BootParams./BootParams/?_pad2_0 Poly) (verismo!boot.params.BootParams./BootParams/?cc_blob_addr verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!boot.params.BootParams./BootParams/?_pad2_1 Poly) (verismo!boot.params.BootParams./BootParams/?e820_entries verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (verismo!boot.params.BootParams./BootParams/?reserved_4 Poly) (verismo!boot.params.BootParams./BootParams/?hdr verismo!boot.params.SetupHeader.) (verismo!boot.params.BootParams./BootParams/?reserved_5 Poly) (verismo!boot.params.BootParams./BootParams/?e820 Poly) (verismo!boot.params.BootParams./BootParams/?reserved_6 Poly))) ((verismo!debug.interface.Console./Console )) ((verismo!lock.spin_perm_s.InvRawFn./InvRawFn (verismo!lock.spin_perm_s.InvRawFn./InvRawFn/?invfn %%Function%%))) ((verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/?locked Bool) (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/?cpu Int) (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/?points_to verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/?invfn verismo!lock.spin_perm_s.InvRawFn.))) ((verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole (verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/?memperm verismo!mem.rawmem_p.RawMemPerms.) (verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/?cc verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.))) ((verismo!pgtable_e.def.SpecPTE./SpecPTE (verismo!pgtable_e.def.SpecPTE./SpecPTE/?present Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?write Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?supervisor Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?pwt Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?pcd Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?accessed Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?dirty Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?psize Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?global Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?bit12 Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?encrypted Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?page Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?nx Int))) ((verismo!pgtable_e.def.PTE./PTE (verismo!pgtable_e.def.PTE./PTE/?value Int))) ((verismo!pgtable_e.def.PtePerm./PtePerm (verismo!pgtable_e.def.PtePerm./PtePerm/?lvl Int) (verismo!pgtable_e.def.PtePerm./PtePerm/?val verismo!pgtable_e.def.PTE.) (verismo!pgtable_e.def.PtePerm./PtePerm/?range tuple%2.) (verismo!pgtable_e.def.PtePerm./PtePerm/?perm core!option.Option.))) ((verismo!pgtable_e.def.TrackedPTEPerms./TrackedPTEPerms (verismo!pgtable_e.def.TrackedPTEPerms./TrackedPTEPerms/?perms vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>.))) ((verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/?index0 Int) (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/?index1 Int) (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/?index2 Int) (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/?index3 Int))) ((verismo!pgtable_e.pte.VAddrIndex./VAddrIndex (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/?value Int))) ((verismo!ptr.def_s.SnpPPtr./SnpPPtr (verismo!ptr.def_s.SnpPPtr./SnpPPtr/?uptr Int) (verismo!ptr.def_s.SnpPPtr./SnpPPtr/?dummy Poly))) ((verismo!ptr.def_s.SnpPointsToData./SnpPointsToData (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/?ptr Int) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/?value core!option.Option.) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/?snp verismo!ptr.snp.snp_u.SnpMemAttr.))) ((verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/?pptr Int) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/?snp_bytes vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/?snp verismo!ptr.snp.snp_u.SnpMemAttr.))) ((verismo!registers.core_perm_s.CoreMode./CoreMode (verismo!registers.core_perm_s.CoreMode./CoreMode/?cpu Int) (verismo!registers.core_perm_s.CoreMode./CoreMode/?run Bool) (verismo!registers.core_perm_s.CoreMode./CoreMode/?vmpl Int) (verismo!registers.core_perm_s.CoreMode./CoreMode/?count Int) (verismo!registers.core_perm_s.CoreMode./CoreMode/?sent_ghcb_msrs vstd!seq.Seq<tuple%2<nat./nat.>.>.) (verismo!registers.core_perm_s.CoreMode./CoreMode/?sent_mem vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.))) ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?cpu Int) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?id verismo!arch.reg.RegName.) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?shared Bool) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?value Poly))) ((verismo!security.mem.OSMemPermSpec./OSMemPermSpec (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/?read Int) (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/?write Int) (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/?user_exe Int) (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/?kern_exe Int))) ((verismo!security.mem.OSMemPerm./OSMemPerm (verismo!security.mem.OSMemPerm./OSMemPerm/?value Int))) ((verismo!security.mem.OSMemEntry./OSMemEntry (verismo!security.mem.OSMemEntry./OSMemEntry/?start_page verismo!tspec.security.sectype.SecType<usize./tuple%0.>.) (verismo!security.mem.OSMemEntry./OSMemEntry/?npages verismo!tspec.security.sectype.SecType<usize./tuple%0.>.) (verismo!security.mem.OSMemEntry./OSMemEntry/?osperm verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (verismo!security.mem.OSMemEntry./OSMemEntry/?page_perms vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.))) ((verismo!security.secret.Copyauthtag./Copyauthtag )) ((verismo!security.secret.Updateauthtag./Updateauthtag (verismo!security.secret.Updateauthtag./Updateauthtag/?val Poly))) ((verismo!security.secret.Copyalgo./Copyalgo )) ((verismo!security.secret.Updatealgo./Updatealgo (verismo!security.secret.Updatealgo./Updatealgo/?val verismo!tspec.security.sectype.SecType<u8./tuple%0.>.))) ((verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL (verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/?master_secret verismo!security.secret.SnpSecretsPageLayout.) (verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/?vmpl Int))) ((verismo!security.secret.FillSecretForVMPLOut./FillSecretForVMPLOut )) ((verismo!snp.cpuid.RegABCD./RegABCD (verismo!snp.cpuid.RegABCD./RegABCD/?eax verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!snp.cpuid.RegABCD./RegABCD/?ebx verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!snp.cpuid.RegABCD./RegABCD/?ecx verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!snp.cpuid.RegABCD./RegABCD/?edx verismo!tspec.security.sectype.SecType<u32./tuple%0.>.))) ((verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/?eax_in verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/?ecx_in verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/?xcr0_in verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/?xss_in verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/?rets verismo!snp.cpuid.RegABCD.) (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/?reserved verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/?count verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/?reserved_1 verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/?reserved_2 verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/?fn_ Poly) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/?reserved_3 Poly))) ((verismo!linkedlist.Node./Node (verismo!linkedlist.Node./Node/?next Int) (verismo!linkedlist.Node./Node/?val Poly))) ((verismo!linkedlist.SpecListItem./SpecListItem (verismo!linkedlist.SpecListItem./SpecListItem/?ptr verismo!ptr.def_s.SnpPPtr.) (verismo!linkedlist.SpecListItem./SpecListItem/?snp verismo!ptr.snp.snp_u.SwSnpMemAttr.) (verismo!linkedlist.SpecListItem./SpecListItem/?val Poly))) ((verismo!linkedlist.LinkedList./LinkedList (verismo!linkedlist.LinkedList./LinkedList/?ptrs Poly) (verismo!linkedlist.LinkedList./LinkedList/?perms Poly) (verismo!linkedlist.LinkedList./LinkedList/?head Int))) ((verismo!global.Globals./ALLOCATOR ) (verismo!global.Globals./CONSOLE ) (verismo!global.Globals./PT ) (verismo!global.Globals./SEC_PERM ) (verismo!global.Globals./OSMEM ) (verismo!global.Globals./RICHOS_VMSA ) (verismo!global.Globals./PCR )) ((verismo!security.Copysnphdr./Copysnphdr )) ((verismo!security.Updatesnphdr./Updatesnphdr (verismo!security.Updatesnphdr./Updatesnphdr/?val verismo!security.secret.SnpGuestMsgHdr.))) ((verismo!security.Copypayload./Copypayload )) ((verismo!security.Updatepayload./Updatepayload (verismo!security.Updatepayload./Updatepayload/?val Poly))) ((verismo!security.SnpGuestMsg./SnpGuestMsg (verismo!security.SnpGuestMsg./SnpGuestMsg/?snphdr verismo!security.secret.SnpGuestMsgHdr.) (verismo!security.SnpGuestMsg./SnpGuestMsg/?payload Poly))) ((tuple%0./tuple%0 )) ((tuple%1./tuple%1 (tuple%1./tuple%1/?0 Poly))) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly))) ((tuple%6./tuple%6 (tuple%6./tuple%6/?0 Poly) (tuple%6./tuple%6/?1 Poly) (tuple%6./tuple%6/?2 Poly) (tuple%6./tuple%6/?3 Poly) (tuple%6./tuple%6/?4 Poly) (tuple%6./tuple%6/?5 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (verismo!tspec.security.sectype.SpecSecType.) Poly)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (verismo!tspec.security.sectype.SpecSecType.) core!option.Option.)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (verismo!tspec.security.sectype.SpecSecType.) Poly)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (verismo!tspec.security.sectype.SpecSecType.) vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)
(declare-fun verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (verismo!arch.addr_s.def_s.SpecPage.) Int)
(declare-fun verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (verismo!arch.addr_s.def_s.SpecPage.) Poly)
(declare-fun verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (verismo!arch.addr_s.def_s.SpecAddr.) Int)
(declare-fun verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (verismo!arch.addr_s.def_s.SpecAddr.) Poly)
(declare-fun verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (verismo!arch.addr_s.def_s.SpecMem.) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (verismo!arch.addr_s.def_s.SpecMem.) Int)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Int)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(declare-fun verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (verismo!arch.rmp.def_s.RmpEntry.) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun verismo!boot.idt.def.Idtr./Idtr/limit (verismo!boot.idt.def.Idtr.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.idt.def.Idtr./Idtr/base (verismo!boot.idt.def.Idtr.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/starting_gpn (verismo!boot.mshyper.param_e.HyperVMemMapEntry.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/numpages (verismo!boot.mshyper.param_e.HyperVMemMapEntry.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/mem_type (verismo!boot.mshyper.param_e.HyperVMemMapEntry.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/flags (verismo!boot.mshyper.param_e.HyperVMemMapEntry.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/reserved (verismo!boot.mshyper.param_e.HyperVMemMapEntry.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/cpu_count (verismo!boot.mshyper.param_e.HvParamTable.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/reserved (verismo!boot.mshyper.param_e.HvParamTable.) Poly)
(declare-fun verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/mem_table (verismo!boot.mshyper.param_e.HvParamTable.) Poly)
(declare-fun verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmpl (verismo!ptr.snp.snp_u.RmpAttrSpec.) Int)
(declare-fun verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/perms (verismo!ptr.snp.snp_u.RmpAttrSpec.) Int)
(declare-fun verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmsa (verismo!ptr.snp.snp_u.RmpAttrSpec.) Int)
(declare-fun verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (verismo!ptr.snp.snp_u.RmpAttr.) Int)
(declare-fun verismo!ptr.snp.snp_u.PTAttr./PTAttr/encrypted (verismo!ptr.snp.snp_u.PTAttr.) Bool)
(declare-fun verismo!ptr.snp.snp_u.PTAttr./PTAttr/w (verismo!ptr.snp.snp_u.PTAttr.) Bool)
(declare-fun verismo!ptr.snp.snp_u.PTAttr./PTAttr/x (verismo!ptr.snp.snp_u.PTAttr.) Bool)
(declare-fun verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (verismo!ptr.snp.snp_u.SwSnpMemAttr.) verismo!arch.rmp.def_s.RmpEntry.)
(declare-fun verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap (verismo!ptr.snp.snp_u.SwSnpMemAttr.) vstd!map.Map<int./int.>.)
(declare-fun verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/sysmap (verismo!ptr.snp.snp_u.SwSnpMemAttr.) vstd!map.Map<int./int.>.)
(declare-fun verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmpmap (verismo!ptr.snp.snp_u.SwSnpMemAttr.) vstd!map.Map<int./int.>.)
(declare-fun verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (verismo!ptr.snp.snp_u.SwSnpMemAttr.) vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.)
(declare-fun verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/is_pte (verismo!ptr.snp.snp_u.SwSnpMemAttr.) Bool)
(declare-fun verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (verismo!ptr.snp.snp_u.SnpMemAttr.) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (verismo!ptr.snp.snp_u.SnpMemAttr.) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (verismo!registers.trackedcore.snpcore.SnpCore.) verismo!registers.core_perm_s.CoreIdPerm.)
(declare-fun verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (verismo!registers.trackedcore.snpcore.SnpCore.) Int)
(declare-fun verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu (verismo!registers.trackedcore.snpcore.SnpCore.) Int)
(declare-fun verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (verismo!registers.trackedcore.snpcore.SnpCore.) vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (verismo!snp.cpu.gdt.DescriptorAttr0_7.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (verismo!snp.cpu.gdt.DescriptorAttr8_11.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.Descriptor./Descriptor/value (verismo!snp.cpu.gdt.Descriptor.) Int)
(declare-fun verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (verismo!snp.cpu.gdt.Gdtr.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!snp.cpu.gdt.Gdtr./Gdtr/base (verismo!snp.cpu.gdt.Gdtr.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (verismo!snp.cpu.vmsa.SevFeatures.) Int)
(declare-fun verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector (verismo!snp.cpu.vmsa.VmsaSegmentRegister.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr (verismo!snp.cpu.vmsa.VmsaSegmentRegister.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit (verismo!snp.cpu.vmsa.VmsaSegmentRegister.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base (verismo!snp.cpu.vmsa.VmsaSegmentRegister.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Updatevmpl./Updatevmpl/val (verismo!snp.cpu.vmsa.Updatevmpl.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Updaterax./Updaterax/val (verismo!snp.cpu.vmsa.Updaterax.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Updatercx./Updatercx/val (verismo!snp.cpu.vmsa.Updatercx.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Updaterdx./Updaterdx/val (verismo!snp.cpu.vmsa.Updaterdx.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Updaterbx./Updaterbx/val (verismo!snp.cpu.vmsa.Updaterbx.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Updateguest_error_code./Updateguest_error_code/val (verismo!snp.cpu.vmsa.Updateguest_error_code.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/es (verismo!snp.cpu.vmsa.Vmsa.) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs (verismo!snp.cpu.vmsa.Vmsa.) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss (verismo!snp.cpu.vmsa.Vmsa.) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds (verismo!snp.cpu.vmsa.Vmsa.) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs (verismo!snp.cpu.vmsa.Vmsa.) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs (verismo!snp.cpu.vmsa.Vmsa.) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr (verismo!snp.cpu.vmsa.Vmsa.) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/secret (verismo!snp.cpu.vmsa.PerCpuData.) verismo!security.secret.SnpSecretsPageLayout.)
(declare-fun verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/cpu (verismo!snp.cpu.vmsa.PerCpuData.) Int)
(declare-fun verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/resvd (verismo!snp.cpu.vmsa.PerCpuData.) Int)
(declare-fun verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/fun (verismo!snp.cpu.vmsa.InitAPParams.) verismo!snp.cpu.vmsa.InitApVmsa.)
(declare-fun verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/cpu (verismo!snp.cpu.vmsa.InitAPParams.) verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>.)
(declare-fun verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/gdt (verismo!snp.cpu.vmsa.InitAPParams.) Poly)
(declare-fun verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/gdt (verismo!snp.cpu.vmsa.UpdateRichOSVmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/gdtr_addr (verismo!snp.cpu.vmsa.UpdateRichOSVmsa.) Int)
(declare-fun verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/bp_addr (verismo!snp.cpu.vmsa.UpdateRichOSVmsa.) Int)
(declare-fun verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/kernel_addr (verismo!snp.cpu.vmsa.UpdateRichOSVmsa.) Int)
(declare-fun verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/vmpl (verismo!snp.cpu.vmsa.UpdateRichOSVmsa.) Int)
(declare-fun verismo!snp.cpu.vmsa.UpdateVMPL./UpdateVMPL/vmpl (verismo!snp.cpu.vmsa.UpdateVMPL.) Int)
(declare-fun verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.) verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-fun verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.) vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>.)
(declare-fun verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.) verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-fun verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/console (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.) vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)
(declare-fun verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/index (verismo!tspec_e.array.array_e.ArrayUpdate.) Int)
(declare-fun verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/val (verismo!tspec_e.array.array_e.ArrayUpdate.) Poly)
(declare-fun verismo!arch.reg.RegName./MSR/0 (verismo!arch.reg.RegName.) Int)
(declare-fun verismo!primitives_e.vec.PushParam./PushParam/val (verismo!primitives_e.vec.PushParam.) Poly)
(declare-fun verismo!allocator.linkedlist.SpecLinkedListAllocator./SpecLinkedListAllocator/perms (verismo!allocator.linkedlist.SpecLinkedListAllocator.) vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>.)
(declare-fun verismo!allocator.linkedlist.SpecLinkedListAllocator./SpecLinkedListAllocator/free_list (verismo!allocator.linkedlist.SpecLinkedListAllocator.) verismo!linkedlist.LinkedList.)
(declare-fun verismo!boot.linux.Updatebp./Updatebp/val (verismo!boot.linux.Updatebp.) verismo!boot.params.BootParams.)
(declare-fun verismo!boot.linux.Updatesecret./Updatesecret/val (verismo!boot.linux.Updatesecret.) verismo!security.secret.SnpSecretsPageLayout.)
(declare-fun verismo!boot.linux.Updatecpuid./Updatecpuid/val (verismo!boot.linux.Updatecpuid.) verismo!snp.cpuid.SnpCpuidTable.)
(declare-fun verismo!boot.linux.Updategdt./Updategdt/val (verismo!boot.linux.Updategdt.) Poly)
(declare-fun verismo!boot.linux.Updatecmdline./Updatecmdline/val (verismo!boot.linux.Updatecmdline.) Poly)
(declare-fun verismo!boot.linux.Updateccblob./Updateccblob/val (verismo!boot.linux.Updateccblob.) verismo!boot.linux.CCBlobSevInfo.)
(declare-fun verismo!boot.linux.BootInfo./BootInfo/bp (verismo!boot.linux.BootInfo.) verismo!boot.params.BootParams.)
(declare-fun verismo!boot.linux.BootInfo./BootInfo/secret (verismo!boot.linux.BootInfo.) verismo!security.secret.SnpSecretsPageLayout.)
(declare-fun verismo!boot.linux.BootInfo./BootInfo/cpuid (verismo!boot.linux.BootInfo.) verismo!snp.cpuid.SnpCpuidTable.)
(declare-fun verismo!boot.linux.BootInfo./BootInfo/gdt (verismo!boot.linux.BootInfo.) Poly)
(declare-fun verismo!boot.linux.BootInfo./BootInfo/cmdline (verismo!boot.linux.BootInfo.) Poly)
(declare-fun verismo!boot.linux.BootInfo./BootInfo/ccblob (verismo!boot.linux.BootInfo.) verismo!boot.linux.CCBlobSevInfo.)
(declare-fun verismo!boot.linux.BootInfo./BootInfo/reserved (verismo!boot.linux.BootInfo.) Poly)
(declare-fun verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0 (verismo!boot.linux.CCBlobSevInfo.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0_1 (verismo!boot.linux.CCBlobSevInfo.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved1 (verismo!boot.linux.CCBlobSevInfo.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_phys (verismo!boot.linux.CCBlobSevInfo.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_len (verismo!boot.linux.CCBlobSevInfo.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved2 (verismo!boot.linux.CCBlobSevInfo.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_phys (verismo!boot.linux.CCBlobSevInfo.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_len (verismo!boot.linux.CCBlobSevInfo.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved3 (verismo!boot.linux.CCBlobSevInfo.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/shared_page (verismo!boot.linux.CCBlobSevInfo.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.linux.BootUpdate./BootUpdate/acpi_rsdp_addr (verismo!boot.linux.BootUpdate.) Int)
(declare-fun verismo!boot.linux.BootUpdate./BootUpdate/cc_blob_addr (verismo!boot.linux.BootUpdate.) Int)
(declare-fun verismo!boot.linux.BootUpdate./BootUpdate/cmd_line_addr (verismo!boot.linux.BootUpdate.) Int)
(declare-fun verismo!boot.linux.BootUpdate./BootUpdate/cmdline_size (verismo!boot.linux.BootUpdate.) Int)
(declare-fun verismo!boot.linux.BootUpdate./BootUpdate/e820_entries (verismo!boot.linux.BootUpdate.) Int)
(declare-fun verismo!boot.linux.BootUpdate./BootUpdate/e820 (verismo!boot.linux.BootUpdate.) Poly)
(declare-fun verismo!boot.linux.BootUpdate./BootUpdate/hdr (verismo!boot.linux.BootUpdate.) verismo!boot.params.SetupHeader.)
(declare-fun verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/mparam (verismo!boot.linux.SetBasicBootInfoParam.) verismo!boot.monitor_params.MonitorParams.)
(declare-fun verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/vmpl (verismo!boot.linux.SetBasicBootInfoParam.) Int)
(declare-fun verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/richos_boot (verismo!boot.linux.SetBasicBootInfoParam.) verismo!boot.params.BootParams.)
(declare-fun verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/cc_blob_addr (verismo!boot.linux.SetBasicBootInfoParam.) Int)
(declare-fun verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/cmd_line_addr (verismo!boot.linux.SetBasicBootInfoParam.) Int)
(declare-fun verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/vmpl (verismo!boot.linux.SetSnpBootInfoParam.) Int)
(declare-fun verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/secret_addr (verismo!boot.linux.SetSnpBootInfoParam.) Int)
(declare-fun verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/master_secret (verismo!boot.linux.SetSnpBootInfoParam.) verismo!security.secret.SnpSecretsPageLayout.)
(declare-fun verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/cpuid_addr (verismo!boot.linux.SetSnpBootInfoParam.) Int)
(declare-fun verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/early_shared (verismo!boot.linux.SetSnpBootInfoParam.) Poly)
(declare-fun verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/cpuid (verismo!boot.linux.SetSnpBootInfoParam.) verismo!snp.cpuid.SnpCpuidTable.)
(declare-fun verismo!boot.linux.SetMemoryBootInfoParam./SetMemoryBootInfoParam/vmpl (verismo!boot.linux.SetMemoryBootInfoParam.) Int)
(declare-fun verismo!boot.monitor_params.MonitorParams./MonitorParams/cpu_count (verismo!boot.monitor_params.MonitorParams.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.MonitorParams./MonitorParams/cpuid_page (verismo!boot.monitor_params.MonitorParams.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.MonitorParams./MonitorParams/secret_page (verismo!boot.monitor_params.MonitorParams.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.MonitorParams./MonitorParams/hv_param (verismo!boot.monitor_params.MonitorParams.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_entries (verismo!boot.monitor_params.MonitorParams.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_e820 (verismo!boot.monitor_params.MonitorParams.) Poly)
(declare-fun verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi (verismo!boot.monitor_params.MonitorParams.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi_size (verismo!boot.monitor_params.MonitorParams.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_start (verismo!boot.monitor_params.MonitorParams.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_size (verismo!boot.monitor_params.MonitorParams.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline (verismo!boot.monitor_params.MonitorParams.) Poly)
(declare-fun verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline_len (verismo!boot.monitor_params.MonitorParams.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.params.E820Entry./E820Entry/addr (verismo!boot.params.E820Entry.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.params.E820Entry./E820Entry/size (verismo!boot.params.E820Entry.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.params.E820Entry./E820Entry/memty (verismo!boot.params.E820Entry.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/setup_sects (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/root_flags (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/syssize (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/ram_size (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/vid_mode (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/root_dev (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/boot_flag (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/jump (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/header (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/version (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/realmode_swtch (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/start_sys_seg (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/kernel_version (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/type_of_loader (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/loadflags (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/setup_move_size (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/code32_start (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/ramdisk_image (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/ramdisk_size (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/bootsect_kludge (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/heap_end_ptr (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/ext_loader_ver (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/ext_loader_type (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/cmd_line_ptr (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/initrd_addr_max (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/kernel_alignment (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/relocatable_kernel (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/min_alignment (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/xloadflags (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/cmdline_size (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch_data (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/payload_offset (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/payload_length (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/setup_data (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/pref_address (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/init_size (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/handover_offset (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.SetupHeader./SetupHeader/kernel_info_offset (verismo!boot.params.SetupHeader.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.Updatee820_entries./Updatee820_entries/val (verismo!boot.params.Updatee820_entries.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!boot.params.Updatee820./Updatee820/val (verismo!boot.params.Updatee820.) Poly)
(declare-fun verismo!boot.params.BootParams./BootParams/_pad0 (verismo!boot.params.BootParams.) Poly)
(declare-fun verismo!boot.params.BootParams./BootParams/acpi_rsdp_addr (verismo!boot.params.BootParams.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.params.BootParams./BootParams/_pad1 (verismo!boot.params.BootParams.) Poly)
(declare-fun verismo!boot.params.BootParams./BootParams/_ext_cmd_line_ptr (verismo!boot.params.BootParams.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.BootParams./BootParams/_pad2_0 (verismo!boot.params.BootParams.) Poly)
(declare-fun verismo!boot.params.BootParams./BootParams/cc_blob_addr (verismo!boot.params.BootParams.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.BootParams./BootParams/_pad2_1 (verismo!boot.params.BootParams.) Poly)
(declare-fun verismo!boot.params.BootParams./BootParams/e820_entries (verismo!boot.params.BootParams.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!boot.params.BootParams./BootParams/reserved_4 (verismo!boot.params.BootParams.) Poly)
(declare-fun verismo!boot.params.BootParams./BootParams/hdr (verismo!boot.params.BootParams.) verismo!boot.params.SetupHeader.)
(declare-fun verismo!boot.params.BootParams./BootParams/reserved_5 (verismo!boot.params.BootParams.) Poly)
(declare-fun verismo!boot.params.BootParams./BootParams/e820 (verismo!boot.params.BootParams.) Poly)
(declare-fun verismo!boot.params.BootParams./BootParams/reserved_6 (verismo!boot.params.BootParams.) Poly)
(declare-fun verismo!lock.spin_perm_s.InvRawFn./InvRawFn/invfn (verismo!lock.spin_perm_s.InvRawFn.) %%Function%%)
(declare-fun verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/locked (verismo!lock.spin_perm_s.LockPermToRaw.) Bool)
(declare-fun verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/cpu (verismo!lock.spin_perm_s.LockPermToRaw.) Int)
(declare-fun verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (verismo!lock.spin_perm_s.LockPermToRaw.) verismo!ptr.raw_ptr_s.SnpPointsToBytes.)
(declare-fun verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn (verismo!lock.spin_perm_s.LockPermToRaw.) verismo!lock.spin_perm_s.InvRawFn.)
(declare-fun verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/memperm (verismo!mem.rawmem_s.SnpMemCoreConsole.) verismo!mem.rawmem_p.RawMemPerms.)
(declare-fun verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/cc (verismo!mem.rawmem_s.SnpMemCoreConsole.) verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/present (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/write (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/psize (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/global (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/page (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/nx (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.PTE./PTE/value (verismo!pgtable_e.def.PTE.) Int)
(declare-fun verismo!pgtable_e.def.PtePerm./PtePerm/lvl (verismo!pgtable_e.def.PtePerm.) Int)
(declare-fun verismo!pgtable_e.def.PtePerm./PtePerm/val (verismo!pgtable_e.def.PtePerm.) verismo!pgtable_e.def.PTE.)
(declare-fun verismo!pgtable_e.def.PtePerm./PtePerm/range (verismo!pgtable_e.def.PtePerm.) tuple%2.)
(declare-fun verismo!pgtable_e.def.PtePerm./PtePerm/perm (verismo!pgtable_e.def.PtePerm.) core!option.Option.)
(declare-fun verismo!pgtable_e.def.TrackedPTEPerms./TrackedPTEPerms/perms (verismo!pgtable_e.def.TrackedPTEPerms.) vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>.)
(declare-fun verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index0 (verismo!pgtable_e.pte.SpecVAddrIndex.) Int)
(declare-fun verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index1 (verismo!pgtable_e.pte.SpecVAddrIndex.) Int)
(declare-fun verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index2 (verismo!pgtable_e.pte.SpecVAddrIndex.) Int)
(declare-fun verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index3 (verismo!pgtable_e.pte.SpecVAddrIndex.) Int)
(declare-fun verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (verismo!pgtable_e.pte.VAddrIndex.) Int)
(declare-fun verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr (verismo!ptr.def_s.SnpPPtr.) Int)
(declare-fun verismo!ptr.def_s.SnpPPtr./SnpPPtr/dummy (verismo!ptr.def_s.SnpPPtr.) Poly)
(declare-fun verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/ptr (verismo!ptr.def_s.SnpPointsToData.) Int)
(declare-fun verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (verismo!ptr.def_s.SnpPointsToData.) core!option.Option.)
(declare-fun verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (verismo!ptr.def_s.SnpPointsToData.) verismo!ptr.snp.snp_u.SnpMemAttr.)
(declare-fun verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (verismo!ptr.raw_ptr_s.SnpPointsToBytes.) Int)
(declare-fun verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes (verismo!ptr.raw_ptr_s.SnpPointsToBytes.) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (verismo!ptr.raw_ptr_s.SnpPointsToBytes.) verismo!ptr.snp.snp_u.SnpMemAttr.)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (verismo!registers.core_perm_s.CoreMode.) Int)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/run (verismo!registers.core_perm_s.CoreMode.) Bool)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (verismo!registers.core_perm_s.CoreMode.) Int)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/count (verismo!registers.core_perm_s.CoreMode.) Int)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/sent_ghcb_msrs (verismo!registers.core_perm_s.CoreMode.) vstd!seq.Seq<tuple%2<nat./nat.>.>.)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/sent_mem (verismo!registers.core_perm_s.CoreMode.) vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)
(declare-fun verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/cpu (verismo!registers.msr_perm_s.RegisterPermValue.) Int)
(declare-fun verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/id (verismo!registers.msr_perm_s.RegisterPermValue.) verismo!arch.reg.RegName.)
(declare-fun verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/shared (verismo!registers.msr_perm_s.RegisterPermValue.) Bool)
(declare-fun verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value (verismo!registers.msr_perm_s.RegisterPermValue.) Poly)
(declare-fun verismo!security.mem.OSMemPermSpec./OSMemPermSpec/read (verismo!security.mem.OSMemPermSpec.) Int)
(declare-fun verismo!security.mem.OSMemPermSpec./OSMemPermSpec/write (verismo!security.mem.OSMemPermSpec.) Int)
(declare-fun verismo!security.mem.OSMemPermSpec./OSMemPermSpec/user_exe (verismo!security.mem.OSMemPermSpec.) Int)
(declare-fun verismo!security.mem.OSMemPermSpec./OSMemPermSpec/kern_exe (verismo!security.mem.OSMemPermSpec.) Int)
(declare-fun verismo!security.mem.OSMemPerm./OSMemPerm/value (verismo!security.mem.OSMemPerm.) Int)
(declare-fun verismo!security.mem.OSMemEntry./OSMemEntry/start_page (verismo!security.mem.OSMemEntry.) verismo!tspec.security.sectype.SecType<usize./tuple%0.>.)
(declare-fun verismo!security.mem.OSMemEntry./OSMemEntry/npages (verismo!security.mem.OSMemEntry.) verismo!tspec.security.sectype.SecType<usize./tuple%0.>.)
(declare-fun verismo!security.mem.OSMemEntry./OSMemEntry/osperm (verismo!security.mem.OSMemEntry.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!security.mem.OSMemEntry./OSMemEntry/page_perms (verismo!security.mem.OSMemEntry.) vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)
(declare-fun verismo!security.secret.Updateauthtag./Updateauthtag/val (verismo!security.secret.Updateauthtag.) Poly)
(declare-fun verismo!security.secret.Updatealgo./Updatealgo/val (verismo!security.secret.Updatealgo.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/master_secret (verismo!security.secret.FillSecretForVMPL.) verismo!security.secret.SnpSecretsPageLayout.)
(declare-fun verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/vmpl (verismo!security.secret.FillSecretForVMPL.) Int)
(declare-fun verismo!snp.cpuid.RegABCD./RegABCD/eax (verismo!snp.cpuid.RegABCD.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!snp.cpuid.RegABCD./RegABCD/ebx (verismo!snp.cpuid.RegABCD.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!snp.cpuid.RegABCD./RegABCD/ecx (verismo!snp.cpuid.RegABCD.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!snp.cpuid.RegABCD./RegABCD/edx (verismo!snp.cpuid.RegABCD.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/eax_in (verismo!snp.cpuid.SnpCpuidFn.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/ecx_in (verismo!snp.cpuid.SnpCpuidFn.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xcr0_in (verismo!snp.cpuid.SnpCpuidFn.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xss_in (verismo!snp.cpuid.SnpCpuidFn.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/rets (verismo!snp.cpuid.SnpCpuidFn.) verismo!snp.cpuid.RegABCD.)
(declare-fun verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/reserved (verismo!snp.cpuid.SnpCpuidFn.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/count (verismo!snp.cpuid.SnpCpuidTable.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_1 (verismo!snp.cpuid.SnpCpuidTable.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_2 (verismo!snp.cpuid.SnpCpuidTable.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/fn_ (verismo!snp.cpuid.SnpCpuidTable.) Poly)
(declare-fun verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_3 (verismo!snp.cpuid.SnpCpuidTable.) Poly)
(declare-fun verismo!linkedlist.Node./Node/next (verismo!linkedlist.Node.) Int)
(declare-fun verismo!linkedlist.Node./Node/val (verismo!linkedlist.Node.) Poly)
(declare-fun verismo!linkedlist.SpecListItem./SpecListItem/ptr (verismo!linkedlist.SpecListItem.) verismo!ptr.def_s.SnpPPtr.)
(declare-fun verismo!linkedlist.SpecListItem./SpecListItem/snp (verismo!linkedlist.SpecListItem.) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!linkedlist.SpecListItem./SpecListItem/val (verismo!linkedlist.SpecListItem.) Poly)
(declare-fun verismo!linkedlist.LinkedList./LinkedList/ptrs (verismo!linkedlist.LinkedList.) Poly)
(declare-fun verismo!linkedlist.LinkedList./LinkedList/perms (verismo!linkedlist.LinkedList.) Poly)
(declare-fun verismo!linkedlist.LinkedList./LinkedList/head (verismo!linkedlist.LinkedList.) Int)
(declare-fun verismo!security.Updatesnphdr./Updatesnphdr/val (verismo!security.Updatesnphdr.) verismo!security.secret.SnpGuestMsgHdr.)
(declare-fun verismo!security.Updatepayload./Updatepayload/val (verismo!security.Updatepayload.) Poly)
(declare-fun verismo!security.SnpGuestMsg./SnpGuestMsg/snphdr (verismo!security.SnpGuestMsg.) verismo!security.secret.SnpGuestMsgHdr.)
(declare-fun verismo!security.SnpGuestMsg./SnpGuestMsg/payload (verismo!security.SnpGuestMsg.) Poly)
(declare-fun tuple%1./tuple%1/0 (tuple%1.) Poly)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun tuple%6./tuple%6/0 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/1 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/2 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/3 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/4 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/5 (tuple%6.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%alloc!alloc.Global. Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%verismo!tspec.security.sectype.SecType. (Dcr Type Dcr Type) Type)
(declare-const TYPE%verismo!tspec.security.sectype.DataLabel. Type)
(declare-fun TYPE%verismo!tspec.security.sectype.SpecSecType. (Dcr Type Dcr Type) Type)
(declare-const TYPE%verismo!arch.addr_s.def_s.GuestPhy. Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecPage. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecAddr. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecMem. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.addr_s.def_s.PageSize. Type)
(declare-const TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. Type)
(declare-const TYPE%verismo!arch.rmp.def_s.RmpEntry. Type)
(declare-const TYPE%verismo!arch.rmp.perm_s.Perm. Type)
(declare-const TYPE%verismo!boot.idt.def.Idtr. Type)
(declare-const TYPE%verismo!boot.init.init_e.InitE820Fn. Type)
(declare-const TYPE%verismo!boot.init.init_e.InitCpuCount. Type)
(declare-const TYPE%verismo!boot.init.mshv_alloc.InitAllocFn. Type)
(declare-const TYPE%verismo!boot.init.mshv_fmt.FmtHvParamCall. Type)
(declare-const TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. Type)
(declare-const TYPE%verismo!boot.mshyper.param_e.HvParamTable. Type)
(declare-const TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec. Type)
(declare-const TYPE%verismo!ptr.snp.snp_u.RmpAttr. Type)
(declare-const TYPE%verismo!ptr.snp.snp_u.PTAttr. Type)
(declare-const TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr. Type)
(declare-const TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. Type)
(declare-const TYPE%verismo!registers.trackedcore.snpcore.SnpCore. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.DescriptorSpec. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.Descriptor. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.Gdtr. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.SevFeatures. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.Copyvmpl. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.Updatevmpl. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.Copyrax. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.Updaterax. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.Copyrcx. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.Updatercx. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.Copyrdx. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.Updaterdx. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.Copyrbx. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.Updaterbx. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.Copyguest_error_code. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.Updateguest_error_code. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.Vmsa. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.PerCpuData. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.InitApVmsa. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.InitAPParams. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.UpdateVMPL. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. Type)
(declare-const TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. Type)
(declare-const TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. Type)
(declare-fun TYPE%verismo!tspec_e.array.array_e.ArrayUpdate. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.entities.VMPL. Type)
(declare-const TYPE%verismo!arch.reg.RegName. Type)
(declare-fun TYPE%verismo!primitives_e.vec.PushParam. (Dcr Type) Type)
(declare-const TYPE%verismo!allocator.linkedlist.LinkedListAllocator. Type)
(declare-const TYPE%verismo!allocator.linkedlist.SpecLinkedListAllocator. Type)
(declare-const TYPE%verismo!boot.linux.Copybp. Type)
(declare-const TYPE%verismo!boot.linux.Updatebp. Type)
(declare-const TYPE%verismo!boot.linux.Copysecret. Type)
(declare-const TYPE%verismo!boot.linux.Updatesecret. Type)
(declare-const TYPE%verismo!boot.linux.Copycpuid. Type)
(declare-const TYPE%verismo!boot.linux.Updatecpuid. Type)
(declare-const TYPE%verismo!boot.linux.Copygdt. Type)
(declare-const TYPE%verismo!boot.linux.Updategdt. Type)
(declare-const TYPE%verismo!boot.linux.Copycmdline. Type)
(declare-const TYPE%verismo!boot.linux.Updatecmdline. Type)
(declare-const TYPE%verismo!boot.linux.Copyccblob. Type)
(declare-const TYPE%verismo!boot.linux.Updateccblob. Type)
(declare-const TYPE%verismo!boot.linux.BootInfo. Type)
(declare-const TYPE%verismo!boot.linux.CCBlobSevInfo. Type)
(declare-const TYPE%verismo!boot.linux.BootUpdate. Type)
(declare-const TYPE%verismo!boot.linux.SetBasicBootInfoParam. Type)
(declare-const TYPE%verismo!boot.linux.SetSnpBootInfoParam. Type)
(declare-const TYPE%verismo!boot.linux.SetMemoryBootInfoParam. Type)
(declare-const TYPE%verismo!boot.monitor_params.MonitorParams. Type)
(declare-const TYPE%verismo!boot.params.E820Entry. Type)
(declare-const TYPE%verismo!boot.params.SetupHeader. Type)
(declare-const TYPE%verismo!boot.params.Copye820_entries. Type)
(declare-const TYPE%verismo!boot.params.Updatee820_entries. Type)
(declare-const TYPE%verismo!boot.params.Copye820. Type)
(declare-const TYPE%verismo!boot.params.Updatee820. Type)
(declare-const TYPE%verismo!boot.params.BootParams. Type)
(declare-const TYPE%verismo!debug.interface.Console. Type)
(declare-const TYPE%verismo!lock.spin_perm_s.LockPermRaw. Type)
(declare-const TYPE%verismo!lock.spin_perm_s.InvRawFn. Type)
(declare-const TYPE%verismo!lock.spin_perm_s.LockPermToRaw. Type)
(declare-const TYPE%verismo!lock.spin_t.SpinLock. Type)
(declare-fun TYPE%verismo!lock.spincell_e.VSpinLock. (Dcr Type) Type)
(declare-const TYPE%verismo!mem.rawmem_p.RawMemPerms. Type)
(declare-const TYPE%verismo!mem.rawmem_s.SnpMemCoreConsole. Type)
(declare-const TYPE%verismo!pgtable_e.def.SpecPTE. Type)
(declare-const TYPE%verismo!pgtable_e.def.PTE. Type)
(declare-const TYPE%verismo!pgtable_e.def.PtePerm. Type)
(declare-const TYPE%verismo!pgtable_e.def.TrackedPTEPerms. Type)
(declare-const TYPE%verismo!pgtable_e.pte.SpecVAddrIndex. Type)
(declare-const TYPE%verismo!pgtable_e.pte.VAddrIndex. Type)
(declare-fun TYPE%verismo!ptr.def_s.SnpPPtr. (Dcr Type) Type)
(declare-fun TYPE%verismo!ptr.def_s.SnpPointsTo. (Dcr Type) Type)
(declare-fun TYPE%verismo!ptr.def_s.SnpPointsToData. (Dcr Type) Type)
(declare-const TYPE%verismo!ptr.def_s.SnpPointsToRaw. Type)
(declare-const TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. Type)
(declare-const TYPE%verismo!registers.core_perm_s.CoreMode. Type)
(declare-const TYPE%verismo!registers.core_perm_s.CoreIdPerm. Type)
(declare-fun TYPE%verismo!registers.msr_perm_s.RegisterPermValue. (Dcr Type) Type)
(declare-const TYPE%verismo!registers.msr_perm_s.RegisterPerm. Type)
(declare-const TYPE%verismo!security.mem.OSMemPermSpec. Type)
(declare-const TYPE%verismo!security.mem.OSMemPerm. Type)
(declare-const TYPE%verismo!security.mem.OSMemEntry. Type)
(declare-const TYPE%verismo!security.secret.SnpSecretsPageLayout. Type)
(declare-const TYPE%verismo!security.secret.Copyauthtag. Type)
(declare-const TYPE%verismo!security.secret.Updateauthtag. Type)
(declare-const TYPE%verismo!security.secret.Copyalgo. Type)
(declare-const TYPE%verismo!security.secret.Updatealgo. Type)
(declare-const TYPE%verismo!security.secret.SnpGuestMsgHdr. Type)
(declare-const TYPE%verismo!security.secret.FillSecretForVMPL. Type)
(declare-const TYPE%verismo!security.secret.FillSecretForVMPLOut. Type)
(declare-const TYPE%verismo!snp.cpuid.RegABCD. Type)
(declare-const TYPE%verismo!snp.cpuid.SnpCpuidFn. Type)
(declare-const TYPE%verismo!snp.cpuid.SnpCpuidTable. Type)
(declare-fun TYPE%verismo!tspec_e.array.Array. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%verismo!vbox.vbox.VBox. (Dcr Type) Type)
(declare-fun TYPE%verismo!vcell.vcell.VCell. (Dcr Type) Type)
(declare-fun TYPE%verismo!linkedlist.Node. (Dcr Type) Type)
(declare-fun TYPE%verismo!linkedlist.SpecListItem. (Dcr Type) Type)
(declare-fun TYPE%verismo!linkedlist.LinkedList. (Dcr Type) Type)
(declare-const TYPE%verismo!global.Globals. Type)
(declare-const TYPE%verismo!security.SecretsOSArea. Type)
(declare-const TYPE%verismo!security.Copysnphdr. Type)
(declare-const TYPE%verismo!security.Updatesnphdr. Type)
(declare-const TYPE%verismo!security.Copypayload. Type)
(declare-const TYPE%verismo!security.Updatepayload. Type)
(declare-const TYPE%verismo!security.SnpGuestMsg. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%1. (Dcr Type) Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%6. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun FNDEF%core!clone.Clone.clone. (Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%alloc!alloc.Global. (alloc!alloc.Global.) Poly)
(declare-fun %Poly%alloc!alloc.Global. (Poly) alloc!alloc.Global.)
(declare-fun Poly%alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>. (alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.)
(declare-fun Poly%alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>. (alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.)
(declare-fun Poly%verismo!allocator.linkedlist.LinkedListAllocator. (verismo!allocator.linkedlist.LinkedListAllocator.) Poly)
(declare-fun %Poly%verismo!allocator.linkedlist.LinkedListAllocator. (Poly) verismo!allocator.linkedlist.LinkedListAllocator.)
(declare-fun Poly%verismo!lock.spin_perm_s.LockPermRaw. (verismo!lock.spin_perm_s.LockPermRaw.) Poly)
(declare-fun %Poly%verismo!lock.spin_perm_s.LockPermRaw. (Poly) verismo!lock.spin_perm_s.LockPermRaw.)
(declare-fun Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spin_t.SpinLock.) Poly)
(declare-fun %Poly%verismo!lock.spin_t.SpinLock. (Poly) verismo!lock.spin_t.SpinLock.)
(declare-fun Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. (verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>.) Poly)
(declare-fun %Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. (Poly) verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>.)
(declare-fun Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. (verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>.) Poly)
(declare-fun %Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. (Poly) verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>.)
(declare-fun Poly%verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. (verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>.) Poly)
(declare-fun %Poly%verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. (Poly) verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>.)
(declare-fun Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. (verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>.) Poly)
(declare-fun %Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. (Poly) verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>.)
(declare-fun Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>.) Poly)
(declare-fun %Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (Poly) verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>.)
(declare-fun Poly%verismo!mem.rawmem_p.RawMemPerms. (verismo!mem.rawmem_p.RawMemPerms.) Poly)
(declare-fun %Poly%verismo!mem.rawmem_p.RawMemPerms. (Poly) verismo!mem.rawmem_p.RawMemPerms.)
(declare-fun Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.linux.BootInfo.>. (verismo!ptr.def_s.SnpPointsTo<verismo!boot.linux.BootInfo.>.) Poly)
(declare-fun %Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.linux.BootInfo.>. (Poly) verismo!ptr.def_s.SnpPointsTo<verismo!boot.linux.BootInfo.>.)
(declare-fun Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.params.BootParams.>. (verismo!ptr.def_s.SnpPointsTo<verismo!boot.params.BootParams.>.) Poly)
(declare-fun %Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.params.BootParams.>. (Poly) verismo!ptr.def_s.SnpPointsTo<verismo!boot.params.BootParams.>.)
(declare-fun Poly%verismo!ptr.def_s.SnpPointsToRaw. (verismo!ptr.def_s.SnpPointsToRaw.) Poly)
(declare-fun %Poly%verismo!ptr.def_s.SnpPointsToRaw. (Poly) verismo!ptr.def_s.SnpPointsToRaw.)
(declare-fun Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.core_perm_s.CoreIdPerm.) Poly)
(declare-fun %Poly%verismo!registers.core_perm_s.CoreIdPerm. (Poly) verismo!registers.core_perm_s.CoreIdPerm.)
(declare-fun Poly%verismo!registers.msr_perm_s.RegisterPerm. (verismo!registers.msr_perm_s.RegisterPerm.) Poly)
(declare-fun %Poly%verismo!registers.msr_perm_s.RegisterPerm. (Poly) verismo!registers.msr_perm_s.RegisterPerm.)
(declare-fun Poly%verismo!security.SecretsOSArea. (verismo!security.SecretsOSArea.) Poly)
(declare-fun %Poly%verismo!security.SecretsOSArea. (Poly) verismo!security.SecretsOSArea.)
(declare-fun Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.SnpGuestMsgHdr.) Poly)
(declare-fun %Poly%verismo!security.secret.SnpGuestMsgHdr. (Poly) verismo!security.secret.SnpGuestMsgHdr.)
(declare-fun Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.SnpSecretsPageLayout.) Poly)
(declare-fun %Poly%verismo!security.secret.SnpSecretsPageLayout. (Poly) verismo!security.secret.SnpSecretsPageLayout.)
(declare-fun Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.SevFeaturesSpec.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. (verismo!tspec.security.sectype.SecType<int./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<int./tuple%0.>.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!tspec.security.sectype.SecType<usize./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<usize./tuple%0.>.)
(declare-fun Poly%verismo!vbox.vbox.VBox<verismo!boot.linux.BootInfo.>. (verismo!vbox.vbox.VBox<verismo!boot.linux.BootInfo.>.) Poly)
(declare-fun %Poly%verismo!vbox.vbox.VBox<verismo!boot.linux.BootInfo.>. (Poly) verismo!vbox.vbox.VBox<verismo!boot.linux.BootInfo.>.)
(declare-fun Poly%verismo!vbox.vbox.VBox<verismo!boot.params.BootParams.>. (verismo!vbox.vbox.VBox<verismo!boot.params.BootParams.>.) Poly)
(declare-fun %Poly%verismo!vbox.vbox.VBox<verismo!boot.params.BootParams.>. (Poly) verismo!vbox.vbox.VBox<verismo!boot.params.BootParams.>.)
(declare-fun Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>. (verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>.) Poly)
(declare-fun %Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>. (Poly) verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>.)
(declare-fun Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>. (verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.) Poly)
(declare-fun %Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>. (Poly) verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.)
(declare-fun Poly%verismo!vbox.vbox.VBox<verismo!snp.cpuid.SnpCpuidTable.>. (verismo!vbox.vbox.VBox<verismo!snp.cpuid.SnpCpuidTable.>.) Poly)
(declare-fun %Poly%verismo!vbox.vbox.VBox<verismo!snp.cpuid.SnpCpuidTable.>. (Poly) verismo!vbox.vbox.VBox<verismo!snp.cpuid.SnpCpuidTable.>.)
(declare-fun Poly%vstd!map.Map<int./int.>. (vstd!map.Map<int./int.>.) Poly)
(declare-fun %Poly%vstd!map.Map<int./int.>. (Poly) vstd!map.Map<int./int.>.)
(declare-fun Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>.) Poly)
(declare-fun %Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (Poly) vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>.)
(declare-fun Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. (vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.) Poly)
(declare-fun %Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. (Poly) vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)
(declare-fun Poly%vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>. (vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>. (Poly) vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>.)
(declare-fun Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (Poly) vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)
(declare-fun Poly%vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>. (vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>.) Poly)
(declare-fun %Poly%vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>. (Poly) vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (Poly) vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<char.>. (vstd!seq.Seq<char.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<char.>. (Poly) vstd!seq.Seq<char.>.)
(declare-fun Poly%vstd!seq.Seq<tuple%2<int./nat.>.>. (vstd!seq.Seq<tuple%2<int./nat.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<tuple%2<int./nat.>.>. (Poly) vstd!seq.Seq<tuple%2<int./nat.>.>.)
(declare-fun Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. (vstd!seq.Seq<tuple%2<nat./nat.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. (Poly) vstd!seq.Seq<tuple%2<nat./nat.>.>.)
(declare-fun Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. (vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. (Poly) vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)
(declare-fun Poly%vstd!seq.Seq<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. (vstd!seq.Seq<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. (Poly) vstd!seq.Seq<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>.)
(declare-fun Poly%vstd!seq.Seq<verismo!boot.params.E820Entry.>. (vstd!seq.Seq<verismo!boot.params.E820Entry.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<verismo!boot.params.E820Entry.>. (Poly) vstd!seq.Seq<verismo!boot.params.E820Entry.>.)
(declare-fun Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (Poly) vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.)
(declare-fun Poly%vstd!seq.Seq<verismo!security.mem.OSMemEntry.>. (vstd!seq.Seq<verismo!security.mem.OSMemEntry.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<verismo!security.mem.OSMemEntry.>. (Poly) vstd!seq.Seq<verismo!security.mem.OSMemEntry.>.)
(declare-fun Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SecType<u64./tuple%0.>.>. (vstd!seq.Seq<verismo!tspec.security.sectype.SecType<u64./tuple%0.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SecType<u64./tuple%0.>.>. (Poly) vstd!seq.Seq<verismo!tspec.security.sectype.SecType<u64./tuple%0.>.>.)
(declare-fun Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (Poly) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun Poly%vstd!set.Set<int.>. (vstd!set.Set<int.>.) Poly)
(declare-fun %Poly%vstd!set.Set<int.>. (Poly) vstd!set.Set<int.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<tuple%2<int./nat.>.>. (vstd!set.Set<tuple%2<int./nat.>.>.) Poly)
(declare-fun %Poly%vstd!set.Set<tuple%2<int./nat.>.>. (Poly) vstd!set.Set<tuple%2<int./nat.>.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (vstd!set.Set<verismo!arch.entities.VMPL.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (Poly) vstd!set.Set<verismo!arch.entities.VMPL.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.reg.RegName.>. (vstd!set.Set<verismo!arch.reg.RegName.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.reg.RegName.>. (Poly) vstd!set.Set<verismo!arch.reg.RegName.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (Poly) vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)
(declare-fun Poly%slice%<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. (slice%<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>.) Poly)
(declare-fun %Poly%slice%<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. (Poly) slice%<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>.)
(declare-fun Poly%slice%<verismo!boot.params.E820Entry.>. (slice%<verismo!boot.params.E820Entry.>.) Poly)
(declare-fun %Poly%slice%<verismo!boot.params.E820Entry.>. (Poly) slice%<verismo!boot.params.E820Entry.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%verismo!tspec.security.sectype.DataLabel. (verismo!tspec.security.sectype.DataLabel.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.DataLabel. (Poly) verismo!tspec.security.sectype.DataLabel.)
(declare-fun Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SpecSecType.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SpecSecType. (Poly) verismo!tspec.security.sectype.SpecSecType.)
(declare-fun Poly%verismo!arch.addr_s.def_s.GuestPhy. (verismo!arch.addr_s.def_s.GuestPhy.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.GuestPhy. (Poly) verismo!arch.addr_s.def_s.GuestPhy.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecAddr.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.def_s.SpecMem.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly) verismo!arch.addr_s.def_s.SpecMem.)
(declare-fun Poly%verismo!arch.addr_s.def_s.PageSize. (verismo!arch.addr_s.def_s.PageSize.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.PageSize. (Poly) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpEntry.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.RmpEntry. (Poly) verismo!arch.rmp.def_s.RmpEntry.)
(declare-fun Poly%verismo!arch.rmp.perm_s.Perm. (verismo!arch.rmp.perm_s.Perm.) Poly)
(declare-fun %Poly%verismo!arch.rmp.perm_s.Perm. (Poly) verismo!arch.rmp.perm_s.Perm.)
(declare-fun Poly%verismo!boot.idt.def.Idtr. (verismo!boot.idt.def.Idtr.) Poly)
(declare-fun %Poly%verismo!boot.idt.def.Idtr. (Poly) verismo!boot.idt.def.Idtr.)
(declare-fun Poly%verismo!boot.init.init_e.InitE820Fn. (verismo!boot.init.init_e.InitE820Fn.) Poly)
(declare-fun %Poly%verismo!boot.init.init_e.InitE820Fn. (Poly) verismo!boot.init.init_e.InitE820Fn.)
(declare-fun Poly%verismo!boot.init.init_e.InitCpuCount. (verismo!boot.init.init_e.InitCpuCount.) Poly)
(declare-fun %Poly%verismo!boot.init.init_e.InitCpuCount. (Poly) verismo!boot.init.init_e.InitCpuCount.)
(declare-fun Poly%verismo!boot.init.mshv_alloc.InitAllocFn. (verismo!boot.init.mshv_alloc.InitAllocFn.) Poly)
(declare-fun %Poly%verismo!boot.init.mshv_alloc.InitAllocFn. (Poly) verismo!boot.init.mshv_alloc.InitAllocFn.)
(declare-fun Poly%verismo!boot.init.mshv_fmt.FmtHvParamCall. (verismo!boot.init.mshv_fmt.FmtHvParamCall.) Poly)
(declare-fun %Poly%verismo!boot.init.mshv_fmt.FmtHvParamCall. (Poly) verismo!boot.init.mshv_fmt.FmtHvParamCall.)
(declare-fun Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. (verismo!boot.mshyper.param_e.HyperVMemMapEntry.) Poly)
(declare-fun %Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. (Poly) verismo!boot.mshyper.param_e.HyperVMemMapEntry.)
(declare-fun Poly%verismo!boot.mshyper.param_e.HvParamTable. (verismo!boot.mshyper.param_e.HvParamTable.) Poly)
(declare-fun %Poly%verismo!boot.mshyper.param_e.HvParamTable. (Poly) verismo!boot.mshyper.param_e.HvParamTable.)
(declare-fun Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.RmpAttrSpec.) Poly)
(declare-fun %Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (Poly) verismo!ptr.snp.snp_u.RmpAttrSpec.)
(declare-fun Poly%verismo!ptr.snp.snp_u.RmpAttr. (verismo!ptr.snp.snp_u.RmpAttr.) Poly)
(declare-fun %Poly%verismo!ptr.snp.snp_u.RmpAttr. (Poly) verismo!ptr.snp.snp_u.RmpAttr.)
(declare-fun Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.PTAttr.) Poly)
(declare-fun %Poly%verismo!ptr.snp.snp_u.PTAttr. (Poly) verismo!ptr.snp.snp_u.PTAttr.)
(declare-fun Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SwSnpMemAttr.) Poly)
(declare-fun %Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr.) Poly)
(declare-fun %Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly) verismo!ptr.snp.snp_u.SnpMemAttr.)
(declare-fun Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.SnpCore.) Poly)
(declare-fun %Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly) verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-fun Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.DescriptorAttr0_7.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7.)
(declare-fun Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.DescriptorAttr8_11.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11.)
(declare-fun Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.DescriptorSpec.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.DescriptorSpec. (Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.Descriptor.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.Descriptor. (Poly) verismo!snp.cpu.gdt.Descriptor.)
(declare-fun Poly%verismo!snp.cpu.gdt.Gdtr. (verismo!snp.cpu.gdt.Gdtr.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.Gdtr. (Poly) verismo!snp.cpu.gdt.Gdtr.)
(declare-fun Poly%verismo!snp.cpu.vmsa.SevFeatures. (verismo!snp.cpu.vmsa.SevFeatures.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.SevFeatures. (Poly) verismo!snp.cpu.vmsa.SevFeatures.)
(declare-fun Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.VmsaSegmentRegister.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun Poly%verismo!snp.cpu.vmsa.Copyvmpl. (verismo!snp.cpu.vmsa.Copyvmpl.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.Copyvmpl. (Poly) verismo!snp.cpu.vmsa.Copyvmpl.)
(declare-fun Poly%verismo!snp.cpu.vmsa.Updatevmpl. (verismo!snp.cpu.vmsa.Updatevmpl.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.Updatevmpl. (Poly) verismo!snp.cpu.vmsa.Updatevmpl.)
(declare-fun Poly%verismo!snp.cpu.vmsa.Copyrax. (verismo!snp.cpu.vmsa.Copyrax.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.Copyrax. (Poly) verismo!snp.cpu.vmsa.Copyrax.)
(declare-fun Poly%verismo!snp.cpu.vmsa.Updaterax. (verismo!snp.cpu.vmsa.Updaterax.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.Updaterax. (Poly) verismo!snp.cpu.vmsa.Updaterax.)
(declare-fun Poly%verismo!snp.cpu.vmsa.Copyrcx. (verismo!snp.cpu.vmsa.Copyrcx.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.Copyrcx. (Poly) verismo!snp.cpu.vmsa.Copyrcx.)
(declare-fun Poly%verismo!snp.cpu.vmsa.Updatercx. (verismo!snp.cpu.vmsa.Updatercx.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.Updatercx. (Poly) verismo!snp.cpu.vmsa.Updatercx.)
(declare-fun Poly%verismo!snp.cpu.vmsa.Copyrdx. (verismo!snp.cpu.vmsa.Copyrdx.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.Copyrdx. (Poly) verismo!snp.cpu.vmsa.Copyrdx.)
(declare-fun Poly%verismo!snp.cpu.vmsa.Updaterdx. (verismo!snp.cpu.vmsa.Updaterdx.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.Updaterdx. (Poly) verismo!snp.cpu.vmsa.Updaterdx.)
(declare-fun Poly%verismo!snp.cpu.vmsa.Copyrbx. (verismo!snp.cpu.vmsa.Copyrbx.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.Copyrbx. (Poly) verismo!snp.cpu.vmsa.Copyrbx.)
(declare-fun Poly%verismo!snp.cpu.vmsa.Updaterbx. (verismo!snp.cpu.vmsa.Updaterbx.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.Updaterbx. (Poly) verismo!snp.cpu.vmsa.Updaterbx.)
(declare-fun Poly%verismo!snp.cpu.vmsa.Copyguest_error_code. (verismo!snp.cpu.vmsa.Copyguest_error_code.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.Copyguest_error_code. (Poly) verismo!snp.cpu.vmsa.Copyguest_error_code.)
(declare-fun Poly%verismo!snp.cpu.vmsa.Updateguest_error_code. (verismo!snp.cpu.vmsa.Updateguest_error_code.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.Updateguest_error_code. (Poly) verismo!snp.cpu.vmsa.Updateguest_error_code.)
(declare-fun Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.Vmsa. (Poly) verismo!snp.cpu.vmsa.Vmsa.)
(declare-fun Poly%verismo!snp.cpu.vmsa.PerCpuData. (verismo!snp.cpu.vmsa.PerCpuData.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.PerCpuData. (Poly) verismo!snp.cpu.vmsa.PerCpuData.)
(declare-fun Poly%verismo!snp.cpu.vmsa.InitApVmsa. (verismo!snp.cpu.vmsa.InitApVmsa.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.InitApVmsa. (Poly) verismo!snp.cpu.vmsa.InitApVmsa.)
(declare-fun Poly%verismo!snp.cpu.vmsa.InitAPParams. (verismo!snp.cpu.vmsa.InitAPParams.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.InitAPParams. (Poly) verismo!snp.cpu.vmsa.InitAPParams.)
(declare-fun Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. (verismo!snp.cpu.vmsa.UpdateRichOSVmsa.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. (Poly) verismo!snp.cpu.vmsa.UpdateRichOSVmsa.)
(declare-fun Poly%verismo!snp.cpu.vmsa.UpdateVMPL. (verismo!snp.cpu.vmsa.UpdateVMPL.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.UpdateVMPL. (Poly) verismo!snp.cpu.vmsa.UpdateVMPL.)
(declare-fun Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. (verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. (Poly) verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut.)
(declare-fun Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.) Poly)
(declare-fun %Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. (Poly) verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.)
(declare-fun Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.) Poly)
(declare-fun %Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. (Poly) verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.)
(declare-fun Poly%verismo!tspec_e.array.array_e.ArrayUpdate. (verismo!tspec_e.array.array_e.ArrayUpdate.) Poly)
(declare-fun %Poly%verismo!tspec_e.array.array_e.ArrayUpdate. (Poly) verismo!tspec_e.array.array_e.ArrayUpdate.)
(declare-fun Poly%verismo!arch.entities.VMPL. (verismo!arch.entities.VMPL.) Poly)
(declare-fun %Poly%verismo!arch.entities.VMPL. (Poly) verismo!arch.entities.VMPL.)
(declare-fun Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName.) Poly)
(declare-fun %Poly%verismo!arch.reg.RegName. (Poly) verismo!arch.reg.RegName.)
(declare-fun Poly%verismo!primitives_e.vec.PushParam. (verismo!primitives_e.vec.PushParam.) Poly)
(declare-fun %Poly%verismo!primitives_e.vec.PushParam. (Poly) verismo!primitives_e.vec.PushParam.)
(declare-fun Poly%verismo!allocator.linkedlist.SpecLinkedListAllocator. (verismo!allocator.linkedlist.SpecLinkedListAllocator.) Poly)
(declare-fun %Poly%verismo!allocator.linkedlist.SpecLinkedListAllocator. (Poly) verismo!allocator.linkedlist.SpecLinkedListAllocator.)
(declare-fun Poly%verismo!boot.linux.Copybp. (verismo!boot.linux.Copybp.) Poly)
(declare-fun %Poly%verismo!boot.linux.Copybp. (Poly) verismo!boot.linux.Copybp.)
(declare-fun Poly%verismo!boot.linux.Updatebp. (verismo!boot.linux.Updatebp.) Poly)
(declare-fun %Poly%verismo!boot.linux.Updatebp. (Poly) verismo!boot.linux.Updatebp.)
(declare-fun Poly%verismo!boot.linux.Copysecret. (verismo!boot.linux.Copysecret.) Poly)
(declare-fun %Poly%verismo!boot.linux.Copysecret. (Poly) verismo!boot.linux.Copysecret.)
(declare-fun Poly%verismo!boot.linux.Updatesecret. (verismo!boot.linux.Updatesecret.) Poly)
(declare-fun %Poly%verismo!boot.linux.Updatesecret. (Poly) verismo!boot.linux.Updatesecret.)
(declare-fun Poly%verismo!boot.linux.Copycpuid. (verismo!boot.linux.Copycpuid.) Poly)
(declare-fun %Poly%verismo!boot.linux.Copycpuid. (Poly) verismo!boot.linux.Copycpuid.)
(declare-fun Poly%verismo!boot.linux.Updatecpuid. (verismo!boot.linux.Updatecpuid.) Poly)
(declare-fun %Poly%verismo!boot.linux.Updatecpuid. (Poly) verismo!boot.linux.Updatecpuid.)
(declare-fun Poly%verismo!boot.linux.Copygdt. (verismo!boot.linux.Copygdt.) Poly)
(declare-fun %Poly%verismo!boot.linux.Copygdt. (Poly) verismo!boot.linux.Copygdt.)
(declare-fun Poly%verismo!boot.linux.Updategdt. (verismo!boot.linux.Updategdt.) Poly)
(declare-fun %Poly%verismo!boot.linux.Updategdt. (Poly) verismo!boot.linux.Updategdt.)
(declare-fun Poly%verismo!boot.linux.Copycmdline. (verismo!boot.linux.Copycmdline.) Poly)
(declare-fun %Poly%verismo!boot.linux.Copycmdline. (Poly) verismo!boot.linux.Copycmdline.)
(declare-fun Poly%verismo!boot.linux.Updatecmdline. (verismo!boot.linux.Updatecmdline.) Poly)
(declare-fun %Poly%verismo!boot.linux.Updatecmdline. (Poly) verismo!boot.linux.Updatecmdline.)
(declare-fun Poly%verismo!boot.linux.Copyccblob. (verismo!boot.linux.Copyccblob.) Poly)
(declare-fun %Poly%verismo!boot.linux.Copyccblob. (Poly) verismo!boot.linux.Copyccblob.)
(declare-fun Poly%verismo!boot.linux.Updateccblob. (verismo!boot.linux.Updateccblob.) Poly)
(declare-fun %Poly%verismo!boot.linux.Updateccblob. (Poly) verismo!boot.linux.Updateccblob.)
(declare-fun Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.BootInfo.) Poly)
(declare-fun %Poly%verismo!boot.linux.BootInfo. (Poly) verismo!boot.linux.BootInfo.)
(declare-fun Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!boot.linux.CCBlobSevInfo.) Poly)
(declare-fun %Poly%verismo!boot.linux.CCBlobSevInfo. (Poly) verismo!boot.linux.CCBlobSevInfo.)
(declare-fun Poly%verismo!boot.linux.BootUpdate. (verismo!boot.linux.BootUpdate.) Poly)
(declare-fun %Poly%verismo!boot.linux.BootUpdate. (Poly) verismo!boot.linux.BootUpdate.)
(declare-fun Poly%verismo!boot.linux.SetBasicBootInfoParam. (verismo!boot.linux.SetBasicBootInfoParam.) Poly)
(declare-fun %Poly%verismo!boot.linux.SetBasicBootInfoParam. (Poly) verismo!boot.linux.SetBasicBootInfoParam.)
(declare-fun Poly%verismo!boot.linux.SetSnpBootInfoParam. (verismo!boot.linux.SetSnpBootInfoParam.) Poly)
(declare-fun %Poly%verismo!boot.linux.SetSnpBootInfoParam. (Poly) verismo!boot.linux.SetSnpBootInfoParam.)
(declare-fun Poly%verismo!boot.linux.SetMemoryBootInfoParam. (verismo!boot.linux.SetMemoryBootInfoParam.) Poly)
(declare-fun %Poly%verismo!boot.linux.SetMemoryBootInfoParam. (Poly) verismo!boot.linux.SetMemoryBootInfoParam.)
(declare-fun Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.MonitorParams.) Poly)
(declare-fun %Poly%verismo!boot.monitor_params.MonitorParams. (Poly) verismo!boot.monitor_params.MonitorParams.)
(declare-fun Poly%verismo!boot.params.E820Entry. (verismo!boot.params.E820Entry.) Poly)
(declare-fun %Poly%verismo!boot.params.E820Entry. (Poly) verismo!boot.params.E820Entry.)
(declare-fun Poly%verismo!boot.params.SetupHeader. (verismo!boot.params.SetupHeader.) Poly)
(declare-fun %Poly%verismo!boot.params.SetupHeader. (Poly) verismo!boot.params.SetupHeader.)
(declare-fun Poly%verismo!boot.params.Copye820_entries. (verismo!boot.params.Copye820_entries.) Poly)
(declare-fun %Poly%verismo!boot.params.Copye820_entries. (Poly) verismo!boot.params.Copye820_entries.)
(declare-fun Poly%verismo!boot.params.Updatee820_entries. (verismo!boot.params.Updatee820_entries.) Poly)
(declare-fun %Poly%verismo!boot.params.Updatee820_entries. (Poly) verismo!boot.params.Updatee820_entries.)
(declare-fun Poly%verismo!boot.params.Copye820. (verismo!boot.params.Copye820.) Poly)
(declare-fun %Poly%verismo!boot.params.Copye820. (Poly) verismo!boot.params.Copye820.)
(declare-fun Poly%verismo!boot.params.Updatee820. (verismo!boot.params.Updatee820.) Poly)
(declare-fun %Poly%verismo!boot.params.Updatee820. (Poly) verismo!boot.params.Updatee820.)
(declare-fun Poly%verismo!boot.params.BootParams. (verismo!boot.params.BootParams.) Poly)
(declare-fun %Poly%verismo!boot.params.BootParams. (Poly) verismo!boot.params.BootParams.)
(declare-fun Poly%verismo!debug.interface.Console. (verismo!debug.interface.Console.) Poly)
(declare-fun %Poly%verismo!debug.interface.Console. (Poly) verismo!debug.interface.Console.)
(declare-fun Poly%verismo!lock.spin_perm_s.InvRawFn. (verismo!lock.spin_perm_s.InvRawFn.) Poly)
(declare-fun %Poly%verismo!lock.spin_perm_s.InvRawFn. (Poly) verismo!lock.spin_perm_s.InvRawFn.)
(declare-fun Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.LockPermToRaw.) Poly)
(declare-fun %Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly) verismo!lock.spin_perm_s.LockPermToRaw.)
(declare-fun Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. (verismo!mem.rawmem_s.SnpMemCoreConsole.) Poly)
(declare-fun %Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. (Poly) verismo!mem.rawmem_s.SnpMemCoreConsole.)
(declare-fun Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.SpecPTE.) Poly)
(declare-fun %Poly%verismo!pgtable_e.def.SpecPTE. (Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.PTE.) Poly)
(declare-fun %Poly%verismo!pgtable_e.def.PTE. (Poly) verismo!pgtable_e.def.PTE.)
(declare-fun Poly%verismo!pgtable_e.def.PtePerm. (verismo!pgtable_e.def.PtePerm.) Poly)
(declare-fun %Poly%verismo!pgtable_e.def.PtePerm. (Poly) verismo!pgtable_e.def.PtePerm.)
(declare-fun Poly%verismo!pgtable_e.def.TrackedPTEPerms. (verismo!pgtable_e.def.TrackedPTEPerms.) Poly)
(declare-fun %Poly%verismo!pgtable_e.def.TrackedPTEPerms. (Poly) verismo!pgtable_e.def.TrackedPTEPerms.)
(declare-fun Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.SpecVAddrIndex.) Poly)
(declare-fun %Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (Poly) verismo!pgtable_e.pte.SpecVAddrIndex.)
(declare-fun Poly%verismo!pgtable_e.pte.VAddrIndex. (verismo!pgtable_e.pte.VAddrIndex.) Poly)
(declare-fun %Poly%verismo!pgtable_e.pte.VAddrIndex. (Poly) verismo!pgtable_e.pte.VAddrIndex.)
(declare-fun Poly%verismo!ptr.def_s.SnpPPtr. (verismo!ptr.def_s.SnpPPtr.) Poly)
(declare-fun %Poly%verismo!ptr.def_s.SnpPPtr. (Poly) verismo!ptr.def_s.SnpPPtr.)
(declare-fun Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.SnpPointsToData.) Poly)
(declare-fun %Poly%verismo!ptr.def_s.SnpPointsToData. (Poly) verismo!ptr.def_s.SnpPointsToData.)
(declare-fun Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.SnpPointsToBytes.) Poly)
(declare-fun %Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly) verismo!ptr.raw_ptr_s.SnpPointsToBytes.)
(declare-fun Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.CoreMode.) Poly)
(declare-fun %Poly%verismo!registers.core_perm_s.CoreMode. (Poly) verismo!registers.core_perm_s.CoreMode.)
(declare-fun Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.RegisterPermValue.) Poly)
(declare-fun %Poly%verismo!registers.msr_perm_s.RegisterPermValue. (Poly) verismo!registers.msr_perm_s.RegisterPermValue.)
(declare-fun Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.OSMemPermSpec.) Poly)
(declare-fun %Poly%verismo!security.mem.OSMemPermSpec. (Poly) verismo!security.mem.OSMemPermSpec.)
(declare-fun Poly%verismo!security.mem.OSMemPerm. (verismo!security.mem.OSMemPerm.) Poly)
(declare-fun %Poly%verismo!security.mem.OSMemPerm. (Poly) verismo!security.mem.OSMemPerm.)
(declare-fun Poly%verismo!security.mem.OSMemEntry. (verismo!security.mem.OSMemEntry.) Poly)
(declare-fun %Poly%verismo!security.mem.OSMemEntry. (Poly) verismo!security.mem.OSMemEntry.)
(declare-fun Poly%verismo!security.secret.Copyauthtag. (verismo!security.secret.Copyauthtag.) Poly)
(declare-fun %Poly%verismo!security.secret.Copyauthtag. (Poly) verismo!security.secret.Copyauthtag.)
(declare-fun Poly%verismo!security.secret.Updateauthtag. (verismo!security.secret.Updateauthtag.) Poly)
(declare-fun %Poly%verismo!security.secret.Updateauthtag. (Poly) verismo!security.secret.Updateauthtag.)
(declare-fun Poly%verismo!security.secret.Copyalgo. (verismo!security.secret.Copyalgo.) Poly)
(declare-fun %Poly%verismo!security.secret.Copyalgo. (Poly) verismo!security.secret.Copyalgo.)
(declare-fun Poly%verismo!security.secret.Updatealgo. (verismo!security.secret.Updatealgo.) Poly)
(declare-fun %Poly%verismo!security.secret.Updatealgo. (Poly) verismo!security.secret.Updatealgo.)
(declare-fun Poly%verismo!security.secret.FillSecretForVMPL. (verismo!security.secret.FillSecretForVMPL.) Poly)
(declare-fun %Poly%verismo!security.secret.FillSecretForVMPL. (Poly) verismo!security.secret.FillSecretForVMPL.)
(declare-fun Poly%verismo!security.secret.FillSecretForVMPLOut. (verismo!security.secret.FillSecretForVMPLOut.) Poly)
(declare-fun %Poly%verismo!security.secret.FillSecretForVMPLOut. (Poly) verismo!security.secret.FillSecretForVMPLOut.)
(declare-fun Poly%verismo!snp.cpuid.RegABCD. (verismo!snp.cpuid.RegABCD.) Poly)
(declare-fun %Poly%verismo!snp.cpuid.RegABCD. (Poly) verismo!snp.cpuid.RegABCD.)
(declare-fun Poly%verismo!snp.cpuid.SnpCpuidFn. (verismo!snp.cpuid.SnpCpuidFn.) Poly)
(declare-fun %Poly%verismo!snp.cpuid.SnpCpuidFn. (Poly) verismo!snp.cpuid.SnpCpuidFn.)
(declare-fun Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!snp.cpuid.SnpCpuidTable.) Poly)
(declare-fun %Poly%verismo!snp.cpuid.SnpCpuidTable. (Poly) verismo!snp.cpuid.SnpCpuidTable.)
(declare-fun Poly%verismo!linkedlist.Node. (verismo!linkedlist.Node.) Poly)
(declare-fun %Poly%verismo!linkedlist.Node. (Poly) verismo!linkedlist.Node.)
(declare-fun Poly%verismo!linkedlist.SpecListItem. (verismo!linkedlist.SpecListItem.) Poly)
(declare-fun %Poly%verismo!linkedlist.SpecListItem. (Poly) verismo!linkedlist.SpecListItem.)
(declare-fun Poly%verismo!linkedlist.LinkedList. (verismo!linkedlist.LinkedList.) Poly)
(declare-fun %Poly%verismo!linkedlist.LinkedList. (Poly) verismo!linkedlist.LinkedList.)
(declare-fun Poly%verismo!global.Globals. (verismo!global.Globals.) Poly)
(declare-fun %Poly%verismo!global.Globals. (Poly) verismo!global.Globals.)
(declare-fun Poly%verismo!security.Copysnphdr. (verismo!security.Copysnphdr.) Poly)
(declare-fun %Poly%verismo!security.Copysnphdr. (Poly) verismo!security.Copysnphdr.)
(declare-fun Poly%verismo!security.Updatesnphdr. (verismo!security.Updatesnphdr.) Poly)
(declare-fun %Poly%verismo!security.Updatesnphdr. (Poly) verismo!security.Updatesnphdr.)
(declare-fun Poly%verismo!security.Copypayload. (verismo!security.Copypayload.) Poly)
(declare-fun %Poly%verismo!security.Copypayload. (Poly) verismo!security.Copypayload.)
(declare-fun Poly%verismo!security.Updatepayload. (verismo!security.Updatepayload.) Poly)
(declare-fun %Poly%verismo!security.Updatepayload. (Poly) verismo!security.Updatepayload.)
(declare-fun Poly%verismo!security.SnpGuestMsg. (verismo!security.SnpGuestMsg.) Poly)
(declare-fun %Poly%verismo!security.SnpGuestMsg. (Poly) verismo!security.SnpGuestMsg.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%1. (tuple%1.) Poly)
(declare-fun %Poly%tuple%1. (Poly) tuple%1.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(declare-fun Poly%tuple%6. (tuple%6.) Poly)
(declare-fun %Poly%tuple%6. (Poly) tuple%6.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)))) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1)))))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x alloc!alloc.Global.)) (! (= x (%Poly%alloc!alloc.Global. (Poly%alloc!alloc.Global. x))) :pattern ((Poly%alloc!alloc.Global. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%alloc!alloc.Global.) (= x (Poly%alloc!alloc.Global. (%Poly%alloc!alloc.Global. x)))) :pattern ((has_type x TYPE%alloc!alloc.Global.)))))
(assert (forall ((x alloc!alloc.Global.)) (! (has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.) :pattern ((has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.)))))
(assert (forall ((x alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.))))))
(assert (forall ((x alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.))))))
(assert (forall ((x alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.))))))
(assert (forall ((x alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.))))))
(assert (forall ((x verismo!allocator.linkedlist.LinkedListAllocator.)) (! (= x (%Poly%verismo!allocator.linkedlist.LinkedListAllocator. (Poly%verismo!allocator.linkedlist.LinkedListAllocator. x))) :pattern ((Poly%verismo!allocator.linkedlist.LinkedListAllocator. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!allocator.linkedlist.LinkedListAllocator.) (= x (Poly%verismo!allocator.linkedlist.LinkedListAllocator. (%Poly%verismo!allocator.linkedlist.LinkedListAllocator. x)))) :pattern ((has_type x TYPE%verismo!allocator.linkedlist.LinkedListAllocator.)))))
(assert (forall ((x verismo!allocator.linkedlist.LinkedListAllocator.)) (! (has_type (Poly%verismo!allocator.linkedlist.LinkedListAllocator. x) TYPE%verismo!allocator.linkedlist.LinkedListAllocator.) :pattern ((has_type (Poly%verismo!allocator.linkedlist.LinkedListAllocator. x) TYPE%verismo!allocator.linkedlist.LinkedListAllocator.)))))
(assert (forall ((x verismo!lock.spin_perm_s.LockPermRaw.)) (! (= x (%Poly%verismo!lock.spin_perm_s.LockPermRaw. (Poly%verismo!lock.spin_perm_s.LockPermRaw. x))) :pattern ((Poly%verismo!lock.spin_perm_s.LockPermRaw. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!lock.spin_perm_s.LockPermRaw.) (= x (Poly%verismo!lock.spin_perm_s.LockPermRaw. (%Poly%verismo!lock.spin_perm_s.LockPermRaw. x)))) :pattern ((has_type x TYPE%verismo!lock.spin_perm_s.LockPermRaw.)))))
(assert (forall ((x verismo!lock.spin_perm_s.LockPermRaw.)) (! (has_type (Poly%verismo!lock.spin_perm_s.LockPermRaw. x) TYPE%verismo!lock.spin_perm_s.LockPermRaw.) :pattern ((has_type (Poly%verismo!lock.spin_perm_s.LockPermRaw. x) TYPE%verismo!lock.spin_perm_s.LockPermRaw.)))))
(assert (forall ((x verismo!lock.spin_t.SpinLock.)) (! (= x (%Poly%verismo!lock.spin_t.SpinLock. (Poly%verismo!lock.spin_t.SpinLock. x))) :pattern ((Poly%verismo!lock.spin_t.SpinLock. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!lock.spin_t.SpinLock.) (= x (Poly%verismo!lock.spin_t.SpinLock. (%Poly%verismo!lock.spin_t.SpinLock. x)))) :pattern ((has_type x TYPE%verismo!lock.spin_t.SpinLock.)))))
(assert (forall ((x verismo!lock.spin_t.SpinLock.)) (! (has_type (Poly%verismo!lock.spin_t.SpinLock. x) TYPE%verismo!lock.spin_t.SpinLock.) :pattern ((has_type (Poly%verismo!lock.spin_t.SpinLock. x) TYPE%verismo!lock.spin_t.SpinLock.)))))
(assert (forall ((x verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>.)) (! (= x (%Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. x))) :pattern ((Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!lock.spincell_e.VSpinLock. $ (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.))) (= x (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. (%Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. x)))) :pattern ((has_type x (TYPE%verismo!lock.spincell_e.VSpinLock. $ (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.)))))))
(assert (forall ((x verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>.)) (! (has_type (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. x) (TYPE%verismo!lock.spincell_e.VSpinLock. $ (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.))) :pattern ((has_type (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. x) (TYPE%verismo!lock.spincell_e.VSpinLock. $ (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.)))))))
(assert (forall ((x verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>.)) (! (= x (%Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. x))) :pattern ((Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!lock.spincell_e.VSpinLock. $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.))) (= x (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. (%Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. x)))) :pattern ((has_type x (TYPE%verismo!lock.spincell_e.VSpinLock. $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.)))))))
(assert (forall ((x verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>.)) (! (has_type (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. x) (TYPE%verismo!lock.spincell_e.VSpinLock. $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.))) :pattern ((has_type (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. x) (TYPE%verismo!lock.spincell_e.VSpinLock. $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.)))))))
(assert (forall ((x verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>.)) (! (= x (%Poly%verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. x))) :pattern ((Poly%verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator.)) (= x (Poly%verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. (%Poly%verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. x)))) :pattern ((has_type x (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator.))))))
(assert (forall ((x verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>.)) (! (has_type (Poly%verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. x) (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator.)) :pattern ((has_type (Poly%verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. x) (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator.))))))
(assert (forall ((x verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>.)) (! (= x (%Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. x))) :pattern ((Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!debug.interface.Console.)) (= x (Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. (%Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. x)))) :pattern ((has_type x (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!debug.interface.Console.))))))
(assert (forall ((x verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>.)) (! (has_type (Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. x) (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!debug.interface.Console.)) :pattern ((has_type (Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. x) (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!debug.interface.Console.))))))
(assert (forall ((x verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>.)) (! (= x (%Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. x))) :pattern ((Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.)) (= x (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (%Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. x)))) :pattern ((has_type x (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.))))))
(assert (forall ((x verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>.)) (! (has_type (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. x) (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.)) :pattern ((has_type (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. x) (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.))))))
(assert (forall ((x verismo!mem.rawmem_p.RawMemPerms.)) (! (= x (%Poly%verismo!mem.rawmem_p.RawMemPerms. (Poly%verismo!mem.rawmem_p.RawMemPerms. x))) :pattern ((Poly%verismo!mem.rawmem_p.RawMemPerms. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!mem.rawmem_p.RawMemPerms.) (= x (Poly%verismo!mem.rawmem_p.RawMemPerms. (%Poly%verismo!mem.rawmem_p.RawMemPerms. x)))) :pattern ((has_type x TYPE%verismo!mem.rawmem_p.RawMemPerms.)))))
(assert (forall ((x verismo!mem.rawmem_p.RawMemPerms.)) (! (has_type (Poly%verismo!mem.rawmem_p.RawMemPerms. x) TYPE%verismo!mem.rawmem_p.RawMemPerms.) :pattern ((has_type (Poly%verismo!mem.rawmem_p.RawMemPerms. x) TYPE%verismo!mem.rawmem_p.RawMemPerms.)))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsTo<verismo!boot.linux.BootInfo.>.)) (! (= x (%Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.linux.BootInfo.>. (Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.linux.BootInfo.>. x))) :pattern ((Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.linux.BootInfo.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!ptr.def_s.SnpPointsTo. $ TYPE%verismo!boot.linux.BootInfo.)) (= x (Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.linux.BootInfo.>. (%Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.linux.BootInfo.>. x)))) :pattern ((has_type x (TYPE%verismo!ptr.def_s.SnpPointsTo. $ TYPE%verismo!boot.linux.BootInfo.))))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsTo<verismo!boot.linux.BootInfo.>.)) (! (has_type (Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.linux.BootInfo.>. x) (TYPE%verismo!ptr.def_s.SnpPointsTo. $ TYPE%verismo!boot.linux.BootInfo.)) :pattern ((has_type (Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.linux.BootInfo.>. x) (TYPE%verismo!ptr.def_s.SnpPointsTo. $ TYPE%verismo!boot.linux.BootInfo.))))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsTo<verismo!boot.params.BootParams.>.)) (! (= x (%Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.params.BootParams.>. (Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.params.BootParams.>. x))) :pattern ((Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.params.BootParams.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!ptr.def_s.SnpPointsTo. $ TYPE%verismo!boot.params.BootParams.)) (= x (Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.params.BootParams.>. (%Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.params.BootParams.>. x)))) :pattern ((has_type x (TYPE%verismo!ptr.def_s.SnpPointsTo. $ TYPE%verismo!boot.params.BootParams.))))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsTo<verismo!boot.params.BootParams.>.)) (! (has_type (Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.params.BootParams.>. x) (TYPE%verismo!ptr.def_s.SnpPointsTo. $ TYPE%verismo!boot.params.BootParams.)) :pattern ((has_type (Poly%verismo!ptr.def_s.SnpPointsTo<verismo!boot.params.BootParams.>. x) (TYPE%verismo!ptr.def_s.SnpPointsTo. $ TYPE%verismo!boot.params.BootParams.))))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsToRaw.)) (! (= x (%Poly%verismo!ptr.def_s.SnpPointsToRaw. (Poly%verismo!ptr.def_s.SnpPointsToRaw. x))) :pattern ((Poly%verismo!ptr.def_s.SnpPointsToRaw. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.def_s.SnpPointsToRaw.) (= x (Poly%verismo!ptr.def_s.SnpPointsToRaw. (%Poly%verismo!ptr.def_s.SnpPointsToRaw. x)))) :pattern ((has_type x TYPE%verismo!ptr.def_s.SnpPointsToRaw.)))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsToRaw.)) (! (has_type (Poly%verismo!ptr.def_s.SnpPointsToRaw. x) TYPE%verismo!ptr.def_s.SnpPointsToRaw.) :pattern ((has_type (Poly%verismo!ptr.def_s.SnpPointsToRaw. x) TYPE%verismo!ptr.def_s.SnpPointsToRaw.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreIdPerm.)) (! (= x (%Poly%verismo!registers.core_perm_s.CoreIdPerm. (Poly%verismo!registers.core_perm_s.CoreIdPerm. x))) :pattern ((Poly%verismo!registers.core_perm_s.CoreIdPerm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.core_perm_s.CoreIdPerm.) (= x (Poly%verismo!registers.core_perm_s.CoreIdPerm. (%Poly%verismo!registers.core_perm_s.CoreIdPerm. x)))) :pattern ((has_type x TYPE%verismo!registers.core_perm_s.CoreIdPerm.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreIdPerm.)) (! (has_type (Poly%verismo!registers.core_perm_s.CoreIdPerm. x) TYPE%verismo!registers.core_perm_s.CoreIdPerm.) :pattern ((has_type (Poly%verismo!registers.core_perm_s.CoreIdPerm. x) TYPE%verismo!registers.core_perm_s.CoreIdPerm.)))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPerm.)) (! (= x (%Poly%verismo!registers.msr_perm_s.RegisterPerm. (Poly%verismo!registers.msr_perm_s.RegisterPerm. x))) :pattern ((Poly%verismo!registers.msr_perm_s.RegisterPerm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (= x (Poly%verismo!registers.msr_perm_s.RegisterPerm. (%Poly%verismo!registers.msr_perm_s.RegisterPerm. x)))) :pattern ((has_type x TYPE%verismo!registers.msr_perm_s.RegisterPerm.)))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPerm.)) (! (has_type (Poly%verismo!registers.msr_perm_s.RegisterPerm. x) TYPE%verismo!registers.msr_perm_s.RegisterPerm.) :pattern ((has_type (Poly%verismo!registers.msr_perm_s.RegisterPerm. x) TYPE%verismo!registers.msr_perm_s.RegisterPerm.)))))
(assert (forall ((x verismo!security.SecretsOSArea.)) (! (= x (%Poly%verismo!security.SecretsOSArea. (Poly%verismo!security.SecretsOSArea. x))) :pattern ((Poly%verismo!security.SecretsOSArea. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.SecretsOSArea.) (= x (Poly%verismo!security.SecretsOSArea. (%Poly%verismo!security.SecretsOSArea. x)))) :pattern ((has_type x TYPE%verismo!security.SecretsOSArea.)))))
(assert (forall ((x verismo!security.SecretsOSArea.)) (! (has_type (Poly%verismo!security.SecretsOSArea. x) TYPE%verismo!security.SecretsOSArea.) :pattern ((has_type (Poly%verismo!security.SecretsOSArea. x) TYPE%verismo!security.SecretsOSArea.)))))
(assert (forall ((x verismo!security.secret.SnpGuestMsgHdr.)) (! (= x (%Poly%verismo!security.secret.SnpGuestMsgHdr. (Poly%verismo!security.secret.SnpGuestMsgHdr. x))) :pattern ((Poly%verismo!security.secret.SnpGuestMsgHdr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.secret.SnpGuestMsgHdr.) (= x (Poly%verismo!security.secret.SnpGuestMsgHdr. (%Poly%verismo!security.secret.SnpGuestMsgHdr. x)))) :pattern ((has_type x TYPE%verismo!security.secret.SnpGuestMsgHdr.)))))
(assert (forall ((x verismo!security.secret.SnpGuestMsgHdr.)) (! (has_type (Poly%verismo!security.secret.SnpGuestMsgHdr. x) TYPE%verismo!security.secret.SnpGuestMsgHdr.) :pattern ((has_type (Poly%verismo!security.secret.SnpGuestMsgHdr. x) TYPE%verismo!security.secret.SnpGuestMsgHdr.)))))
(assert (forall ((x verismo!security.secret.SnpSecretsPageLayout.)) (! (= x (%Poly%verismo!security.secret.SnpSecretsPageLayout. (Poly%verismo!security.secret.SnpSecretsPageLayout. x))) :pattern ((Poly%verismo!security.secret.SnpSecretsPageLayout. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.secret.SnpSecretsPageLayout.) (= x (Poly%verismo!security.secret.SnpSecretsPageLayout. (%Poly%verismo!security.secret.SnpSecretsPageLayout. x)))) :pattern ((has_type x TYPE%verismo!security.secret.SnpSecretsPageLayout.)))))
(assert (forall ((x verismo!security.secret.SnpSecretsPageLayout.)) (! (has_type (Poly%verismo!security.secret.SnpSecretsPageLayout. x) TYPE%verismo!security.secret.SnpSecretsPageLayout.) :pattern ((has_type (Poly%verismo!security.secret.SnpSecretsPageLayout. x) TYPE%verismo!security.secret.SnpSecretsPageLayout.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.SevFeaturesSpec.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (= x (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (%Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.SevFeaturesSpec.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. x) TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. x) TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.)))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<int./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ INT $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ INT $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<int./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ INT $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ INT $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<usize./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<usize./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!vbox.vbox.VBox<verismo!boot.linux.BootInfo.>.)) (! (= x (%Poly%verismo!vbox.vbox.VBox<verismo!boot.linux.BootInfo.>. (Poly%verismo!vbox.vbox.VBox<verismo!boot.linux.BootInfo.>. x))) :pattern ((Poly%verismo!vbox.vbox.VBox<verismo!boot.linux.BootInfo.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!boot.linux.BootInfo.)) (= x (Poly%verismo!vbox.vbox.VBox<verismo!boot.linux.BootInfo.>. (%Poly%verismo!vbox.vbox.VBox<verismo!boot.linux.BootInfo.>. x)))) :pattern ((has_type x (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!boot.linux.BootInfo.))))))
(assert (forall ((x verismo!vbox.vbox.VBox<verismo!boot.linux.BootInfo.>.)) (! (has_type (Poly%verismo!vbox.vbox.VBox<verismo!boot.linux.BootInfo.>. x) (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!boot.linux.BootInfo.)) :pattern ((has_type (Poly%verismo!vbox.vbox.VBox<verismo!boot.linux.BootInfo.>. x) (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!boot.linux.BootInfo.))))))
(assert (forall ((x verismo!vbox.vbox.VBox<verismo!boot.params.BootParams.>.)) (! (= x (%Poly%verismo!vbox.vbox.VBox<verismo!boot.params.BootParams.>. (Poly%verismo!vbox.vbox.VBox<verismo!boot.params.BootParams.>. x))) :pattern ((Poly%verismo!vbox.vbox.VBox<verismo!boot.params.BootParams.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!boot.params.BootParams.)) (= x (Poly%verismo!vbox.vbox.VBox<verismo!boot.params.BootParams.>. (%Poly%verismo!vbox.vbox.VBox<verismo!boot.params.BootParams.>. x)))) :pattern ((has_type x (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!boot.params.BootParams.))))))
(assert (forall ((x verismo!vbox.vbox.VBox<verismo!boot.params.BootParams.>.)) (! (has_type (Poly%verismo!vbox.vbox.VBox<verismo!boot.params.BootParams.>. x) (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!boot.params.BootParams.)) :pattern ((has_type (Poly%verismo!vbox.vbox.VBox<verismo!boot.params.BootParams.>. x) (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!boot.params.BootParams.))))))
(assert (forall ((x verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>.)) (! (= x (%Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>. (Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>. x))) :pattern ((Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.PerCpuData.)) (= x (Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>. (%Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>. x)))) :pattern ((has_type x (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.PerCpuData.))))))
(assert (forall ((x verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>.)) (! (has_type (Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>. x) (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.PerCpuData.)) :pattern ((has_type (Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>. x) (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.PerCpuData.))))))
(assert (forall ((x verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.)) (! (= x (%Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>. (Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>. x))) :pattern ((Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) (= x (Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>. (%Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>. x)))) :pattern ((has_type x (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.))))))
(assert (forall ((x verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.)) (! (has_type (Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>. x) (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) :pattern ((has_type (Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>. x) (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.))))))
(assert (forall ((x verismo!vbox.vbox.VBox<verismo!snp.cpuid.SnpCpuidTable.>.)) (! (= x (%Poly%verismo!vbox.vbox.VBox<verismo!snp.cpuid.SnpCpuidTable.>. (Poly%verismo!vbox.vbox.VBox<verismo!snp.cpuid.SnpCpuidTable.>. x))) :pattern ((Poly%verismo!vbox.vbox.VBox<verismo!snp.cpuid.SnpCpuidTable.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpuid.SnpCpuidTable.)) (= x (Poly%verismo!vbox.vbox.VBox<verismo!snp.cpuid.SnpCpuidTable.>. (%Poly%verismo!vbox.vbox.VBox<verismo!snp.cpuid.SnpCpuidTable.>. x)))) :pattern ((has_type x (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpuid.SnpCpuidTable.))))))
(assert (forall ((x verismo!vbox.vbox.VBox<verismo!snp.cpuid.SnpCpuidTable.>.)) (! (has_type (Poly%verismo!vbox.vbox.VBox<verismo!snp.cpuid.SnpCpuidTable.>. x) (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpuid.SnpCpuidTable.)) :pattern ((has_type (Poly%verismo!vbox.vbox.VBox<verismo!snp.cpuid.SnpCpuidTable.>. x) (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpuid.SnpCpuidTable.))))))
(assert (forall ((x vstd!map.Map<int./int.>.)) (! (= x (%Poly%vstd!map.Map<int./int.>. (Poly%vstd!map.Map<int./int.>. x))) :pattern ((Poly%vstd!map.Map<int./int.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ INT $ INT)) (= x (Poly%vstd!map.Map<int./int.>. (%Poly%vstd!map.Map<int./int.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ INT $ INT))))))
(assert (forall ((x vstd!map.Map<int./int.>.)) (! (has_type (Poly%vstd!map.Map<int./int.>. x) (TYPE%vstd!map.Map. $ INT $ INT)) :pattern ((has_type (Poly%vstd!map.Map<int./int.>. x) (TYPE%vstd!map.Map. $ INT $ INT))))))
(assert (forall ((x vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>.)) (! (= x (%Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. x))) :pattern ((Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.)) (= x (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (%Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.))))))
(assert (forall ((x vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>.)) (! (has_type (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. x) (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.)) :pattern ((has_type (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. x) (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.))))))
(assert (forall ((x vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)) (! (= x (%Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. x))) :pattern ((Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw.)) (= x (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. (%Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw.))))))
(assert (forall ((x vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)) (! (has_type (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. x) (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw.)) :pattern ((has_type (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. x) (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw.))))))
(assert (forall ((x vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>.)) (! (= x (%Poly%vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>. (Poly%vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>. x))) :pattern ((Poly%vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw.)) (= x (Poly%vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>. (%Poly%vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw.))))))
(assert (forall ((x vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>.)) (! (has_type (Poly%vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw.)) :pattern ((has_type (Poly%vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw.))))))
(assert (forall ((x vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (= x (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x))) :pattern ((Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.)) (= x (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))))))
(assert (forall ((x vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (has_type (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.)) :pattern ((has_type (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))))))
(assert (forall ((x vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>.)) (! (= x (%Poly%vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>. (Poly%vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>. x))) :pattern ((Poly%vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (TYPE%tuple%2. $ NAT $ INT) $ TYPE%verismo!pgtable_e.def.PtePerm.)) (= x (Poly%vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>. (%Poly%vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (TYPE%tuple%2. $ NAT $ INT) $ TYPE%verismo!pgtable_e.def.PtePerm.))))))
(assert (forall ((x vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>.)) (! (has_type (Poly%vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>. x) (TYPE%vstd!map.Map. $ (TYPE%tuple%2. $ NAT $ INT) $ TYPE%verismo!pgtable_e.def.PtePerm.)) :pattern ((has_type (Poly%vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>. x) (TYPE%vstd!map.Map. $ (TYPE%tuple%2. $ NAT $ INT) $ TYPE%verismo!pgtable_e.def.PtePerm.))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) (= x (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.)) (= x (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (%Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.))))))
(assert (forall ((x vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.)) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<char.>.)) (! (= x (%Poly%vstd!seq.Seq<char.>. (Poly%vstd!seq.Seq<char.>. x))) :pattern ((Poly%vstd!seq.Seq<char.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ CHAR)) (= x (Poly%vstd!seq.Seq<char.>. (%Poly%vstd!seq.Seq<char.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ CHAR))))))
(assert (forall ((x vstd!seq.Seq<char.>.)) (! (has_type (Poly%vstd!seq.Seq<char.>. x) (TYPE%vstd!seq.Seq. $ CHAR)) :pattern ((has_type (Poly%vstd!seq.Seq<char.>. x) (TYPE%vstd!seq.Seq. $ CHAR))))))
(assert (forall ((x vstd!seq.Seq<tuple%2<int./nat.>.>.)) (! (= x (%Poly%vstd!seq.Seq<tuple%2<int./nat.>.>. (Poly%vstd!seq.Seq<tuple%2<int./nat.>.>. x))) :pattern ((Poly%vstd!seq.Seq<tuple%2<int./nat.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ INT $ NAT))) (= x (Poly%vstd!seq.Seq<tuple%2<int./nat.>.>. (%Poly%vstd!seq.Seq<tuple%2<int./nat.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ INT $ NAT)))))))
(assert (forall ((x vstd!seq.Seq<tuple%2<int./nat.>.>.)) (! (has_type (Poly%vstd!seq.Seq<tuple%2<int./nat.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ INT $ NAT))) :pattern ((has_type (Poly%vstd!seq.Seq<tuple%2<int./nat.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ INT $ NAT)))))))
(assert (forall ((x vstd!seq.Seq<tuple%2<nat./nat.>.>.)) (! (= x (%Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. x))) :pattern ((Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT))) (= x (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. (%Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT)))))))
(assert (forall ((x vstd!seq.Seq<tuple%2<nat./nat.>.>.)) (! (has_type (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT))) :pattern ((has_type (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT)))))))
(assert (forall ((x vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)) (! (= x (%Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. x))) :pattern ((Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))) (= x (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. (%Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))
(assert (forall ((x vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)) (! (has_type (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))) :pattern ((has_type (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))
(assert (forall ((x vstd!seq.Seq<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>.)) (! (= x (%Poly%vstd!seq.Seq<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. (Poly%vstd!seq.Seq<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. x))) :pattern ((Poly%vstd!seq.Seq<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.)) (= x (Poly%vstd!seq.Seq<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. (%Poly%vstd!seq.Seq<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.))))))
(assert (forall ((x vstd!seq.Seq<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>.)) (! (has_type (Poly%vstd!seq.Seq<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.)) :pattern ((has_type (Poly%vstd!seq.Seq<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.))))))
(assert (forall ((x vstd!seq.Seq<verismo!boot.params.E820Entry.>.)) (! (= x (%Poly%vstd!seq.Seq<verismo!boot.params.E820Entry.>. (Poly%vstd!seq.Seq<verismo!boot.params.E820Entry.>. x))) :pattern ((Poly%vstd!seq.Seq<verismo!boot.params.E820Entry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.params.E820Entry.)) (= x (Poly%vstd!seq.Seq<verismo!boot.params.E820Entry.>. (%Poly%vstd!seq.Seq<verismo!boot.params.E820Entry.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.params.E820Entry.))))))
(assert (forall ((x vstd!seq.Seq<verismo!boot.params.E820Entry.>.)) (! (has_type (Poly%vstd!seq.Seq<verismo!boot.params.E820Entry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.params.E820Entry.)) :pattern ((has_type (Poly%vstd!seq.Seq<verismo!boot.params.E820Entry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.params.E820Entry.))))))
(assert (forall ((x vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.)) (! (= x (%Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. x))) :pattern ((Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%verismo!ptr.snp.snp_u.PTAttr.)) (= x (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (%Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%verismo!ptr.snp.snp_u.PTAttr.))))))
(assert (forall ((x vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.)) (! (has_type (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. x) (TYPE%vstd!seq.Seq. $ TYPE%verismo!ptr.snp.snp_u.PTAttr.)) :pattern ((has_type (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. x) (TYPE%vstd!seq.Seq. $ TYPE%verismo!ptr.snp.snp_u.PTAttr.))))))
(assert (forall ((x vstd!seq.Seq<verismo!security.mem.OSMemEntry.>.)) (! (= x (%Poly%vstd!seq.Seq<verismo!security.mem.OSMemEntry.>. (Poly%vstd!seq.Seq<verismo!security.mem.OSMemEntry.>. x))) :pattern ((Poly%vstd!seq.Seq<verismo!security.mem.OSMemEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%verismo!security.mem.OSMemEntry.)) (= x (Poly%vstd!seq.Seq<verismo!security.mem.OSMemEntry.>. (%Poly%vstd!seq.Seq<verismo!security.mem.OSMemEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%verismo!security.mem.OSMemEntry.))))))
(assert (forall ((x vstd!seq.Seq<verismo!security.mem.OSMemEntry.>.)) (! (has_type (Poly%vstd!seq.Seq<verismo!security.mem.OSMemEntry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%verismo!security.mem.OSMemEntry.)) :pattern ((has_type (Poly%vstd!seq.Seq<verismo!security.mem.OSMemEntry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%verismo!security.mem.OSMemEntry.))))))
(assert (forall ((x vstd!seq.Seq<verismo!tspec.security.sectype.SecType<u64./tuple%0.>.>.)) (! (= x (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SecType<u64./tuple%0.>.>. (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SecType<u64./tuple%0.>.>. x))) :pattern ((Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SecType<u64./tuple%0.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))) (= x (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SecType<u64./tuple%0.>.>. (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SecType<u64./tuple%0.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)))))))
(assert (forall ((x vstd!seq.Seq<verismo!tspec.security.sectype.SecType<u64./tuple%0.>.>.)) (! (has_type (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SecType<u64./tuple%0.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))) :pattern ((has_type (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SecType<u64./tuple%0.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)))))))
(assert (forall ((x vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)) (! (= x (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x))) :pattern ((Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (= x (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (forall ((x vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)) (! (has_type (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((has_type (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (forall ((x vstd!set.Set<int.>.)) (! (= x (%Poly%vstd!set.Set<int.>. (Poly%vstd!set.Set<int.>. x))) :pattern ((Poly%vstd!set.Set<int.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ INT)) (= x (Poly%vstd!set.Set<int.>. (%Poly%vstd!set.Set<int.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ INT))))))
(assert (forall ((x vstd!set.Set<int.>.)) (! (has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT)) :pattern ((has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<tuple%2<int./nat.>.>.)) (! (= x (%Poly%vstd!set.Set<tuple%2<int./nat.>.>. (Poly%vstd!set.Set<tuple%2<int./nat.>.>. x))) :pattern ((Poly%vstd!set.Set<tuple%2<int./nat.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ INT $ NAT))) (= x (Poly%vstd!set.Set<tuple%2<int./nat.>.>. (%Poly%vstd!set.Set<tuple%2<int./nat.>.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ INT $ NAT)))))))
(assert (forall ((x vstd!set.Set<tuple%2<int./nat.>.>.)) (! (has_type (Poly%vstd!set.Set<tuple%2<int./nat.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ INT $ NAT))) :pattern ((has_type (Poly%vstd!set.Set<tuple%2<int./nat.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ INT $ NAT)))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.VMPL.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.)) (= x (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (%Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.VMPL.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.reg.RegName.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.reg.RegName.>. (Poly%vstd!set.Set<verismo!arch.reg.RegName.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.reg.RegName.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.)) (= x (Poly%vstd!set.Set<verismo!arch.reg.RegName.>. (%Poly%vstd!set.Set<verismo!arch.reg.RegName.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.reg.RegName.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.reg.RegName.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.reg.RegName.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (= x (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))
(assert (forall ((x slice%<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>.)) (! (= x (%Poly%slice%<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. (Poly%slice%<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. x))) :pattern ((Poly%slice%<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.)) (= x (Poly%slice%<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. (%Poly%slice%<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. x)))) :pattern ((has_type x (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.))))))
(assert (forall ((x slice%<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>.)) (! (has_type (Poly%slice%<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. x) (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.)) :pattern ((has_type (Poly%slice%<verismo!boot.mshyper.param_e.HyperVMemMapEntry.>. x) (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.))))))
(assert (forall ((x slice%<verismo!boot.params.E820Entry.>.)) (! (= x (%Poly%slice%<verismo!boot.params.E820Entry.>. (Poly%slice%<verismo!boot.params.E820Entry.>. x))) :pattern ((Poly%slice%<verismo!boot.params.E820Entry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (SLICE $ TYPE%verismo!boot.params.E820Entry.)) (= x (Poly%slice%<verismo!boot.params.E820Entry.>. (%Poly%slice%<verismo!boot.params.E820Entry.>. x)))) :pattern ((has_type x (SLICE $ TYPE%verismo!boot.params.E820Entry.))))))
(assert (forall ((x slice%<verismo!boot.params.E820Entry.>.)) (! (has_type (Poly%slice%<verismo!boot.params.E820Entry.>. x) (SLICE $ TYPE%verismo!boot.params.E820Entry.)) :pattern ((has_type (Poly%slice%<verismo!boot.params.E820Entry.>. x) (SLICE $ TYPE%verismo!boot.params.E820Entry.))))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))))))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))))))
(assert (forall ((x verismo!tspec.security.sectype.DataLabel.)) (! (= x (%Poly%verismo!tspec.security.sectype.DataLabel. (Poly%verismo!tspec.security.sectype.DataLabel. x))) :pattern ((Poly%verismo!tspec.security.sectype.DataLabel. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!tspec.security.sectype.DataLabel.) (= x (Poly%verismo!tspec.security.sectype.DataLabel. (%Poly%verismo!tspec.security.sectype.DataLabel. x)))) :pattern ((has_type x TYPE%verismo!tspec.security.sectype.DataLabel.)))))
(assert (forall ((x verismo!tspec.security.sectype.DataLabel.)) (! (has_type (Poly%verismo!tspec.security.sectype.DataLabel. x) TYPE%verismo!tspec.security.sectype.DataLabel.) :pattern ((has_type (Poly%verismo!tspec.security.sectype.DataLabel. x) TYPE%verismo!tspec.security.sectype.DataLabel.)))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= x (%Poly%verismo!tspec.security.sectype.SpecSecType. (Poly%verismo!tspec.security.sectype.SpecSecType. x))) :pattern ((Poly%verismo!tspec.security.sectype.SpecSecType. x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (= x (Poly%verismo!tspec.security.sectype.SpecSecType. (%Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (_val! Poly) (__unused! core!option.Option.) (_valsets! Poly) (_labels! vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (=> (and (has_type _val! T&) (has_type (Poly%core!option.Option. __unused!) (TYPE%core!option.Option. M&. M&)) (has_type _valsets! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SpecSecType./SpecSecType _val! __unused! _valsets! _labels!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SpecSecType./SpecSecType _val! __unused! _valsets! _labels!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?val x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) T&)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?_unused x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. x))) (TYPE%core!option.Option. M&. M&))) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?valsets x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?labels x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels x)))))
(define-fun is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ ((c verismo!tspec.security.sectype.SpecSecType.)) Bool ((_ is verismo!tspec.security.sectype.SpecSecType./SpecSecType) c))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (=> (is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ x) (height_lt (height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x)) (height (Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (=> (is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ x) (height_lt (height (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x))) (height (Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((height (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x)))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (=> (is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ x) (height_lt (height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x)) (height (Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x))))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestPhy.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.GuestPhy. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.GuestPhy. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (= x (Poly%verismo!arch.addr_s.def_s.GuestPhy. (%Poly%verismo!arch.addr_s.def_s.GuestPhy. x)))) :pattern ((has_type x TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestPhy.)) (! (has_type (Poly%verismo!arch.addr_s.def_s.GuestPhy. x) TYPE%verismo!arch.addr_s.def_s.GuestPhy.) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.GuestPhy. x) TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly%verismo!arch.addr_s.def_s.SpecPage. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecPage. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecPage. (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! Int) (_dummy! Poly)) (! (=> (and (<= 0 _value!) (has_type _dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage./SpecPage _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage./SpecPage _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value x) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?value x)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?dummy x)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) T&)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(define-fun is-verismo!arch.addr_s.def_s.SpecPage./SpecPage_ ((c verismo!arch.addr_s.def_s.SpecPage.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecPage./SpecPage) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecPage./SpecPage_ x) (height_lt (height (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x)) (height (Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((height (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x))))))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type y (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. y))) (ext_eq deep T& (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. y)))) (ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) x y)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly%verismo!arch.addr_s.def_s.SpecAddr. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecAddr. (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! Int) (_dummy! Poly)) (! (=> (and (<= 0 _value!) (has_type _dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value x) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?value x)) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?dummy x)) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) T&)) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(define-fun is-verismo!arch.addr_s.def_s.SpecAddr./SpecAddr_ ((c verismo!arch.addr_s.def_s.SpecAddr.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecAddr./SpecAddr) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecAddr./SpecAddr_ x) (height_lt (height (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x)) (height (Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))) :pattern ((height (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x))))))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type y (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. y))) (ext_eq deep T& (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. y)))) (ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) x y)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecMem. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecMem. (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_first! verismo!arch.addr_s.def_s.SpecAddr.) (_size! Int)) (! (=> (and (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. _first!) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (<= 0 _size!)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.def_s.SpecMem./SpecMem _first! _size!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.def_s.SpecMem./SpecMem _first! _size!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (= (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?first x)) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. x))) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (= (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size x) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?size x)) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/size x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(define-fun is-verismo!arch.addr_s.def_s.SpecMem./SpecMem_ ((c verismo!arch.addr_s.def_s.SpecMem.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecMem./SpecMem) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecMem./SpecMem_ x) (height_lt (height (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x))) (height (Poly%verismo!arch.addr_s.def_s.SpecMem. x)))) :pattern ((height (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x)))))))
(assert (forall ((x verismo!arch.addr_s.def_s.PageSize.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.PageSize. (Poly%verismo!arch.addr_s.def_s.PageSize. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.PageSize. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.addr_s.def_s.PageSize.) (= x (Poly%verismo!arch.addr_s.def_s.PageSize. (%Poly%verismo!arch.addr_s.def_s.PageSize. x)))) :pattern ((has_type x TYPE%verismo!arch.addr_s.def_s.PageSize.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.PageSize.)) (! (has_type (Poly%verismo!arch.addr_s.def_s.PageSize. x) TYPE%verismo!arch.addr_s.def_s.PageSize.) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.PageSize. x) TYPE%verismo!arch.addr_s.def_s.PageSize.)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= x (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x))) :pattern ((Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (= x (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)))))
(assert (forall ((_immutable! Bool) (_assigned! Bool) (_validated! Bool) (_vmsa! Bool) (_asid! Int) (_gpn! verismo!arch.addr_s.def_s.SpecPage.) (_size! verismo!arch.addr_s.def_s.PageSize.) (_perms! vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (=> (and (<= 0 _asid!) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. _gpn!) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP _immutable! _assigned! _validated! _vmsa! _asid! _gpn! _size! _perms!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP _immutable! _assigned! _validated! _vmsa! _asid! _gpn! _size! _perms!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?immutable x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable x)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?assigned x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned x)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?validated x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated x)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?vmsa x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa x)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?asid x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (<= 0 (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)))) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)) (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?gpn x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x))) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)) (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?size x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size x)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?perms x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms x)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpEntry.)) (! (= x (%Poly%verismo!arch.rmp.def_s.RmpEntry. (Poly%verismo!arch.rmp.def_s.RmpEntry. x))) :pattern ((Poly%verismo!arch.rmp.def_s.RmpEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.) (= x (Poly%verismo!arch.rmp.def_s.RmpEntry. (%Poly%verismo!arch.rmp.def_s.RmpEntry. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.)))))
(assert (forall ((_val! verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (=> (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. _val!) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpEntry./RmpEntry _val!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpEntry./RmpEntry _val!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpEntry.)) (! (= (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val x) (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/?val x)) :pattern ((verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (%Poly%verismo!arch.rmp.def_s.RmpEntry. x))) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (%Poly%verismo!arch.rmp.def_s.RmpEntry. x)) (has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.)))))
(assert (forall ((x verismo!arch.rmp.perm_s.Perm.)) (! (= x (%Poly%verismo!arch.rmp.perm_s.Perm. (Poly%verismo!arch.rmp.perm_s.Perm. x))) :pattern ((Poly%verismo!arch.rmp.perm_s.Perm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.perm_s.Perm.) (= x (Poly%verismo!arch.rmp.perm_s.Perm. (%Poly%verismo!arch.rmp.perm_s.Perm. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.perm_s.Perm.)))))
(assert (forall ((x verismo!arch.rmp.perm_s.Perm.)) (! (has_type (Poly%verismo!arch.rmp.perm_s.Perm. x) TYPE%verismo!arch.rmp.perm_s.Perm.) :pattern ((has_type (Poly%verismo!arch.rmp.perm_s.Perm. x) TYPE%verismo!arch.rmp.perm_s.Perm.)))))
(assert (forall ((x verismo!boot.idt.def.Idtr.)) (! (= x (%Poly%verismo!boot.idt.def.Idtr. (Poly%verismo!boot.idt.def.Idtr. x))) :pattern ((Poly%verismo!boot.idt.def.Idtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.idt.def.Idtr.) (= x (Poly%verismo!boot.idt.def.Idtr. (%Poly%verismo!boot.idt.def.Idtr. x)))) :pattern ((has_type x TYPE%verismo!boot.idt.def.Idtr.)))))
(assert (forall ((x verismo!boot.idt.def.Idtr.)) (! (= (verismo!boot.idt.def.Idtr./Idtr/limit x) (verismo!boot.idt.def.Idtr./Idtr/?limit x)) :pattern ((verismo!boot.idt.def.Idtr./Idtr/limit x)))))
(assert (forall ((x verismo!boot.idt.def.Idtr.)) (! (= (verismo!boot.idt.def.Idtr./Idtr/base x) (verismo!boot.idt.def.Idtr./Idtr/?base x)) :pattern ((verismo!boot.idt.def.Idtr./Idtr/base x)))))
(assert (forall ((x verismo!boot.idt.def.Idtr.)) (! (has_type (Poly%verismo!boot.idt.def.Idtr. x) TYPE%verismo!boot.idt.def.Idtr.) :pattern ((has_type (Poly%verismo!boot.idt.def.Idtr. x) TYPE%verismo!boot.idt.def.Idtr.)))))
(assert (forall ((x verismo!boot.init.init_e.InitE820Fn.)) (! (= x (%Poly%verismo!boot.init.init_e.InitE820Fn. (Poly%verismo!boot.init.init_e.InitE820Fn. x))) :pattern ((Poly%verismo!boot.init.init_e.InitE820Fn. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.init.init_e.InitE820Fn.) (= x (Poly%verismo!boot.init.init_e.InitE820Fn. (%Poly%verismo!boot.init.init_e.InitE820Fn. x)))) :pattern ((has_type x TYPE%verismo!boot.init.init_e.InitE820Fn.)))))
(assert (forall ((x verismo!boot.init.init_e.InitE820Fn.)) (! (has_type (Poly%verismo!boot.init.init_e.InitE820Fn. x) TYPE%verismo!boot.init.init_e.InitE820Fn.) :pattern ((has_type (Poly%verismo!boot.init.init_e.InitE820Fn. x) TYPE%verismo!boot.init.init_e.InitE820Fn.)))))
(assert (forall ((x verismo!boot.init.init_e.InitCpuCount.)) (! (= x (%Poly%verismo!boot.init.init_e.InitCpuCount. (Poly%verismo!boot.init.init_e.InitCpuCount. x))) :pattern ((Poly%verismo!boot.init.init_e.InitCpuCount. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.init.init_e.InitCpuCount.) (= x (Poly%verismo!boot.init.init_e.InitCpuCount. (%Poly%verismo!boot.init.init_e.InitCpuCount. x)))) :pattern ((has_type x TYPE%verismo!boot.init.init_e.InitCpuCount.)))))
(assert (forall ((x verismo!boot.init.init_e.InitCpuCount.)) (! (has_type (Poly%verismo!boot.init.init_e.InitCpuCount. x) TYPE%verismo!boot.init.init_e.InitCpuCount.) :pattern ((has_type (Poly%verismo!boot.init.init_e.InitCpuCount. x) TYPE%verismo!boot.init.init_e.InitCpuCount.)))))
(assert (forall ((x verismo!boot.init.mshv_alloc.InitAllocFn.)) (! (= x (%Poly%verismo!boot.init.mshv_alloc.InitAllocFn. (Poly%verismo!boot.init.mshv_alloc.InitAllocFn. x))) :pattern ((Poly%verismo!boot.init.mshv_alloc.InitAllocFn. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.init.mshv_alloc.InitAllocFn.) (= x (Poly%verismo!boot.init.mshv_alloc.InitAllocFn. (%Poly%verismo!boot.init.mshv_alloc.InitAllocFn. x)))) :pattern ((has_type x TYPE%verismo!boot.init.mshv_alloc.InitAllocFn.)))))
(assert (forall ((x verismo!boot.init.mshv_alloc.InitAllocFn.)) (! (has_type (Poly%verismo!boot.init.mshv_alloc.InitAllocFn. x) TYPE%verismo!boot.init.mshv_alloc.InitAllocFn.) :pattern ((has_type (Poly%verismo!boot.init.mshv_alloc.InitAllocFn. x) TYPE%verismo!boot.init.mshv_alloc.InitAllocFn.)))))
(assert (forall ((x verismo!boot.init.mshv_fmt.FmtHvParamCall.)) (! (= x (%Poly%verismo!boot.init.mshv_fmt.FmtHvParamCall. (Poly%verismo!boot.init.mshv_fmt.FmtHvParamCall. x))) :pattern ((Poly%verismo!boot.init.mshv_fmt.FmtHvParamCall. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.init.mshv_fmt.FmtHvParamCall.) (= x (Poly%verismo!boot.init.mshv_fmt.FmtHvParamCall. (%Poly%verismo!boot.init.mshv_fmt.FmtHvParamCall. x)))) :pattern ((has_type x TYPE%verismo!boot.init.mshv_fmt.FmtHvParamCall.)))))
(assert (forall ((x verismo!boot.init.mshv_fmt.FmtHvParamCall.)) (! (has_type (Poly%verismo!boot.init.mshv_fmt.FmtHvParamCall. x) TYPE%verismo!boot.init.mshv_fmt.FmtHvParamCall.) :pattern ((has_type (Poly%verismo!boot.init.mshv_fmt.FmtHvParamCall. x) TYPE%verismo!boot.init.mshv_fmt.FmtHvParamCall.)))))
(assert (forall ((x verismo!boot.mshyper.param_e.HyperVMemMapEntry.)) (! (= x (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. (Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. x))) :pattern ((Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) (= x (Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. x)))) :pattern ((has_type x TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.)))))
(assert (forall ((x verismo!boot.mshyper.param_e.HyperVMemMapEntry.)) (! (= (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/starting_gpn x) (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/?starting_gpn x)) :pattern ((verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/starting_gpn x)))))
(assert (forall ((x verismo!boot.mshyper.param_e.HyperVMemMapEntry.)) (! (= (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/numpages x) (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/?numpages x)) :pattern ((verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/numpages x)))))
(assert (forall ((x verismo!boot.mshyper.param_e.HyperVMemMapEntry.)) (! (= (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/mem_type x) (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/?mem_type x)) :pattern ((verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/mem_type x)))))
(assert (forall ((x verismo!boot.mshyper.param_e.HyperVMemMapEntry.)) (! (= (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/flags x) (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/?flags x)) :pattern ((verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/flags x)))))
(assert (forall ((x verismo!boot.mshyper.param_e.HyperVMemMapEntry.)) (! (= (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/reserved x) (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/?reserved x)) :pattern ((verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/reserved x)))))
(assert (forall ((x verismo!boot.mshyper.param_e.HyperVMemMapEntry.)) (! (has_type (Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. x) TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) :pattern ((has_type (Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. x) TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.)))))
(assert (forall ((x verismo!boot.mshyper.param_e.HvParamTable.)) (! (= x (%Poly%verismo!boot.mshyper.param_e.HvParamTable. (Poly%verismo!boot.mshyper.param_e.HvParamTable. x))) :pattern ((Poly%verismo!boot.mshyper.param_e.HvParamTable. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.mshyper.param_e.HvParamTable.) (= x (Poly%verismo!boot.mshyper.param_e.HvParamTable. (%Poly%verismo!boot.mshyper.param_e.HvParamTable. x)))) :pattern ((has_type x TYPE%verismo!boot.mshyper.param_e.HvParamTable.)))))
(assert (forall ((_cpu_count! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved! Poly) (_mem_table! Poly)) (! (=> (and (has_type _reserved! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16))) (has_type _mem_table! (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. $ (CONST_INT 128)))) (has_type (Poly%verismo!boot.mshyper.param_e.HvParamTable. (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable _cpu_count! _reserved! _mem_table!)) TYPE%verismo!boot.mshyper.param_e.HvParamTable.)) :pattern ((has_type (Poly%verismo!boot.mshyper.param_e.HvParamTable. (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable _cpu_count! _reserved! _mem_table!)) TYPE%verismo!boot.mshyper.param_e.HvParamTable.)))))
(assert (forall ((x verismo!boot.mshyper.param_e.HvParamTable.)) (! (= (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/cpu_count x) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/?cpu_count x)) :pattern ((verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/cpu_count x)))))
(assert (forall ((x verismo!boot.mshyper.param_e.HvParamTable.)) (! (= (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/reserved x) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/?reserved x)) :pattern ((verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/reserved x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.mshyper.param_e.HvParamTable.) (has_type (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/reserved (%Poly%verismo!boot.mshyper.param_e.HvParamTable. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)))) :pattern ((verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/reserved (%Poly%verismo!boot.mshyper.param_e.HvParamTable. x)) (has_type x TYPE%verismo!boot.mshyper.param_e.HvParamTable.)))))
(assert (forall ((x verismo!boot.mshyper.param_e.HvParamTable.)) (! (= (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/mem_table x) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/?mem_table x)) :pattern ((verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/mem_table x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.mshyper.param_e.HvParamTable.) (has_type (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/mem_table (%Poly%verismo!boot.mshyper.param_e.HvParamTable. x)) (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. $ (CONST_INT 128)))) :pattern ((verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/mem_table (%Poly%verismo!boot.mshyper.param_e.HvParamTable. x)) (has_type x TYPE%verismo!boot.mshyper.param_e.HvParamTable.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.RmpAttrSpec.)) (! (= x (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x))) :pattern ((Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (= x (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)))) :pattern ((has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)))))
(assert (forall ((_vmpl! Int) (_perms! Int) (_vmsa! Int)) (! (=> (and (uInv 64 _vmpl!) (uInv 64 _perms!) (uInv 64 _vmsa!)) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec _vmpl! _perms! _vmsa!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)) :pattern ((has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec _vmpl! _perms! _vmsa!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.RmpAttrSpec.)) (! (= (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmpl x) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/?vmpl x)) :pattern ((verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (uInv 64 (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmpl (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)))) :pattern ((verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmpl (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)) (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.RmpAttrSpec.)) (! (= (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/perms x) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/?perms x)) :pattern ((verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/perms x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (uInv 64 (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/perms (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)))) :pattern ((verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/perms (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)) (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.RmpAttrSpec.)) (! (= (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmsa x) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/?vmsa x)) :pattern ((verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmsa x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (uInv 64 (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmsa (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)))) :pattern ((verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmsa (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)) (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.RmpAttr.)) (! (= x (%Poly%verismo!ptr.snp.snp_u.RmpAttr. (Poly%verismo!ptr.snp.snp_u.RmpAttr. x))) :pattern ((Poly%verismo!ptr.snp.snp_u.RmpAttr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (= x (Poly%verismo!ptr.snp.snp_u.RmpAttr. (%Poly%verismo!ptr.snp.snp_u.RmpAttr. x)))) :pattern ((has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttr.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttr. (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr _value!)) TYPE%verismo!ptr.snp.snp_u.RmpAttr.)) :pattern ((has_type (Poly%verismo!ptr.snp.snp_u.RmpAttr. (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr _value!)) TYPE%verismo!ptr.snp.snp_u.RmpAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.RmpAttr.)) (! (= (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value x) (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/?value x)) :pattern ((verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (uInv 64 (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. x)))) :pattern ((verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. x)) (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.PTAttr.)) (! (= x (%Poly%verismo!ptr.snp.snp_u.PTAttr. (Poly%verismo!ptr.snp.snp_u.PTAttr. x))) :pattern ((Poly%verismo!ptr.snp.snp_u.PTAttr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.PTAttr.) (= x (Poly%verismo!ptr.snp.snp_u.PTAttr. (%Poly%verismo!ptr.snp.snp_u.PTAttr. x)))) :pattern ((has_type x TYPE%verismo!ptr.snp.snp_u.PTAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.PTAttr.)) (! (= (verismo!ptr.snp.snp_u.PTAttr./PTAttr/encrypted x) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/?encrypted x)) :pattern ((verismo!ptr.snp.snp_u.PTAttr./PTAttr/encrypted x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.PTAttr.)) (! (= (verismo!ptr.snp.snp_u.PTAttr./PTAttr/w x) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/?w x)) :pattern ((verismo!ptr.snp.snp_u.PTAttr./PTAttr/w x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.PTAttr.)) (! (= (verismo!ptr.snp.snp_u.PTAttr./PTAttr/x x) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/?x x)) :pattern ((verismo!ptr.snp.snp_u.PTAttr./PTAttr/x x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.PTAttr.)) (! (has_type (Poly%verismo!ptr.snp.snp_u.PTAttr. x) TYPE%verismo!ptr.snp.snp_u.PTAttr.) :pattern ((has_type (Poly%verismo!ptr.snp.snp_u.PTAttr. x) TYPE%verismo!ptr.snp.snp_u.PTAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= x (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. x))) :pattern ((Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (= x (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. x)))) :pattern ((has_type x TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)))))
(assert (forall ((_rmp! verismo!arch.rmp.def_s.RmpEntry.) (_guestmap! vstd!map.Map<int./int.>.) (_sysmap! vstd!map.Map<int./int.>.) (_rmpmap! vstd!map.Map<int./int.>.) (_pte! vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.) (_is_pte! Bool)) (! (=> (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. _rmp!) TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr _rmp! _guestmap! _sysmap! _rmpmap! _pte! _is_pte!)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr _rmp! _guestmap! _sysmap! _rmpmap! _pte! _is_pte!)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp x) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?rmp x)) :pattern ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. x))) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. x)) (has_type x TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap x) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?guestmap x)) :pattern ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/sysmap x) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?sysmap x)) :pattern ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/sysmap x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmpmap x) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?rmpmap x)) :pattern ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmpmap x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte x) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?pte x)) :pattern ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/is_pte x) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?is_pte x)) :pattern ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/is_pte x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SnpMemAttr.)) (! (= x (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. x))) :pattern ((Poly%verismo!ptr.snp.snp_u.SnpMemAttr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.) (= x (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. x)))) :pattern ((has_type x TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)))))
(assert (forall ((_hw! verismo!ptr.snp.snp_u.SwSnpMemAttr.) (_sw! verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (=> (and (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. _hw!) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. _sw!) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr _hw! _sw!)) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) :pattern ((has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr _hw! _sw!)) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw x) (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/?hw x)) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. x))) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. x)) (has_type x TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw x) (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/?sw x)) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. x))) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. x)) (has_type x TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)))))
(assert (forall ((x verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= x (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. x))) :pattern ((Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (= x (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)))) :pattern ((has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)))))
(assert (forall ((_coreid! verismo!registers.core_perm_s.CoreIdPerm.) (_vmpl! Int) (_cpu! Int) (_regs! vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)) (! (=> (and (<= 0 _vmpl!) (<= 0 _cpu!)) (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore _coreid! _vmpl! _cpu! _regs!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)) :pattern ((has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore _coreid! _vmpl! _cpu! _regs!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)))))
(assert (forall ((x verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid x) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?coreid x)) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid x)))))
(assert (forall ((x verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl x) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?vmpl x)) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)))) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)) (has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)))))
(assert (forall ((x verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu x) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?cpu x)) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)))) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)) (has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)))))
(assert (forall ((x verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs x) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?regs x)) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs x)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= x (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x))) :pattern ((Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (= x (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((_accessed! Int) (_write! Int) (_conform! Int) (_exe! Int) (_sys! Int) (_dpl! Int) (_present! Int)) (! (=> (and (uInv 64 _accessed!) (uInv 64 _write!) (uInv 64 _conform!) (uInv 64 _exe!) (uInv 64 _sys!) (uInv 64 _dpl!) (uInv 64 _present!)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec _accessed! _write! _conform! _exe! _sys! _dpl! _present!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec _accessed! _write! _conform! _exe! _sys! _dpl! _present!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?accessed x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?write x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?conform x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?exe x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?sys x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?dpl x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?present x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7.)) (! (= x (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. x))) :pattern ((Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (= x (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7 _value!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7 _value!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value x) (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/?value x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= x (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x))) :pattern ((Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (= x (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((_avl! Int) (_long! Int) (_size32_or_16! Int) (_granularity! Int)) (! (=> (and (uInv 64 _avl!) (uInv 64 _long!) (uInv 64 _size32_or_16!) (uInv 64 _granularity!)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec _avl! _long! _size32_or_16! _granularity!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec _avl! _long! _size32_or_16! _granularity!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl x) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?avl x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long x) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?long x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 x) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?size32_or_16 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity x) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?granularity x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11.)) (! (= x (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. x))) :pattern ((Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (= x (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11 _value!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11 _value!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value x) (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/?value x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= x (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. (Poly%verismo!snp.cpu.gdt.DescriptorSpec. x))) :pattern ((Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (= x (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((_limit0_15! Int) (_base0_23! Int) (_attr_0_7! Int) (_limit16_19! Int) (_attr_8_11! Int) (_base24_31! Int)) (! (=> (and (uInv 64 _limit0_15!) (uInv 64 _base0_23!) (uInv 64 _attr_0_7!) (uInv 64 _limit16_19!) (uInv 64 _attr_8_11!) (uInv 64 _base24_31!)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec _limit0_15! _base0_23! _attr_0_7! _limit16_19! _attr_8_11! _base24_31!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec _limit0_15! _base0_23! _attr_0_7! _limit16_19! _attr_8_11! _base24_31!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?limit0_15 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?base0_23 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?attr_0_7 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?limit16_19 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?attr_8_11 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?base24_31 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.Descriptor.)) (! (= x (%Poly%verismo!snp.cpu.gdt.Descriptor. (Poly%verismo!snp.cpu.gdt.Descriptor. x))) :pattern ((Poly%verismo!snp.cpu.gdt.Descriptor. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.Descriptor.) (= x (Poly%verismo!snp.cpu.gdt.Descriptor. (%Poly%verismo!snp.cpu.gdt.Descriptor. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.Descriptor.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.Descriptor./Descriptor _value!)) TYPE%verismo!snp.cpu.gdt.Descriptor.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.Descriptor./Descriptor _value!)) TYPE%verismo!snp.cpu.gdt.Descriptor.)))))
(assert (forall ((x verismo!snp.cpu.gdt.Descriptor.)) (! (= (verismo!snp.cpu.gdt.Descriptor./Descriptor/value x) (verismo!snp.cpu.gdt.Descriptor./Descriptor/?value x)) :pattern ((verismo!snp.cpu.gdt.Descriptor./Descriptor/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. x)))) :pattern ((verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. x)) (has_type x TYPE%verismo!snp.cpu.gdt.Descriptor.)))))
(assert (forall ((x verismo!snp.cpu.gdt.Gdtr.)) (! (= x (%Poly%verismo!snp.cpu.gdt.Gdtr. (Poly%verismo!snp.cpu.gdt.Gdtr. x))) :pattern ((Poly%verismo!snp.cpu.gdt.Gdtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.Gdtr.) (= x (Poly%verismo!snp.cpu.gdt.Gdtr. (%Poly%verismo!snp.cpu.gdt.Gdtr. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.Gdtr.)))))
(assert (forall ((x verismo!snp.cpu.gdt.Gdtr.)) (! (= (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit x) (verismo!snp.cpu.gdt.Gdtr./Gdtr/?limit x)) :pattern ((verismo!snp.cpu.gdt.Gdtr./Gdtr/limit x)))))
(assert (forall ((x verismo!snp.cpu.gdt.Gdtr.)) (! (= (verismo!snp.cpu.gdt.Gdtr./Gdtr/base x) (verismo!snp.cpu.gdt.Gdtr./Gdtr/?base x)) :pattern ((verismo!snp.cpu.gdt.Gdtr./Gdtr/base x)))))
(assert (forall ((x verismo!snp.cpu.gdt.Gdtr.)) (! (has_type (Poly%verismo!snp.cpu.gdt.Gdtr. x) TYPE%verismo!snp.cpu.gdt.Gdtr.) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.Gdtr. x) TYPE%verismo!snp.cpu.gdt.Gdtr.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.SevFeatures.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.SevFeatures. (Poly%verismo!snp.cpu.vmsa.SevFeatures. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.SevFeatures. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (= x (Poly%verismo!snp.cpu.vmsa.SevFeatures. (%Poly%verismo!snp.cpu.vmsa.SevFeatures. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.SevFeatures.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!snp.cpu.vmsa.SevFeatures. (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures _value!)) TYPE%verismo!snp.cpu.vmsa.SevFeatures.)) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.SevFeatures. (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures _value!)) TYPE%verismo!snp.cpu.vmsa.SevFeatures.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.SevFeatures.)) (! (= (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value x) (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/?value x)) :pattern ((verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. x)))) :pattern ((verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.SevFeatures.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.VmsaSegmentRegister.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (= x (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.VmsaSegmentRegister.)) (! (= (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector x) (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?selector x)) :pattern ((verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.VmsaSegmentRegister.)) (! (= (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr x) (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?attr x)) :pattern ((verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.VmsaSegmentRegister.)) (! (= (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit x) (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?limit x)) :pattern ((verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.VmsaSegmentRegister.)) (! (= (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base x) (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?base x)) :pattern ((verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.VmsaSegmentRegister.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. x) TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. x) TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Copyvmpl.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.Copyvmpl. (Poly%verismo!snp.cpu.vmsa.Copyvmpl. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.Copyvmpl. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Copyvmpl.) (= x (Poly%verismo!snp.cpu.vmsa.Copyvmpl. (%Poly%verismo!snp.cpu.vmsa.Copyvmpl. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.Copyvmpl.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Copyvmpl.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.Copyvmpl. x) TYPE%verismo!snp.cpu.vmsa.Copyvmpl.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.Copyvmpl. x) TYPE%verismo!snp.cpu.vmsa.Copyvmpl.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updatevmpl.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.Updatevmpl. (Poly%verismo!snp.cpu.vmsa.Updatevmpl. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.Updatevmpl. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Updatevmpl.) (= x (Poly%verismo!snp.cpu.vmsa.Updatevmpl. (%Poly%verismo!snp.cpu.vmsa.Updatevmpl. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.Updatevmpl.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updatevmpl.)) (! (= (verismo!snp.cpu.vmsa.Updatevmpl./Updatevmpl/val x) (verismo!snp.cpu.vmsa.Updatevmpl./Updatevmpl/?val x)) :pattern ((verismo!snp.cpu.vmsa.Updatevmpl./Updatevmpl/val x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updatevmpl.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.Updatevmpl. x) TYPE%verismo!snp.cpu.vmsa.Updatevmpl.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.Updatevmpl. x) TYPE%verismo!snp.cpu.vmsa.Updatevmpl.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Copyrax.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.Copyrax. (Poly%verismo!snp.cpu.vmsa.Copyrax. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.Copyrax. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Copyrax.) (= x (Poly%verismo!snp.cpu.vmsa.Copyrax. (%Poly%verismo!snp.cpu.vmsa.Copyrax. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.Copyrax.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Copyrax.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.Copyrax. x) TYPE%verismo!snp.cpu.vmsa.Copyrax.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.Copyrax. x) TYPE%verismo!snp.cpu.vmsa.Copyrax.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updaterax.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.Updaterax. (Poly%verismo!snp.cpu.vmsa.Updaterax. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.Updaterax. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Updaterax.) (= x (Poly%verismo!snp.cpu.vmsa.Updaterax. (%Poly%verismo!snp.cpu.vmsa.Updaterax. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.Updaterax.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updaterax.)) (! (= (verismo!snp.cpu.vmsa.Updaterax./Updaterax/val x) (verismo!snp.cpu.vmsa.Updaterax./Updaterax/?val x)) :pattern ((verismo!snp.cpu.vmsa.Updaterax./Updaterax/val x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updaterax.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.Updaterax. x) TYPE%verismo!snp.cpu.vmsa.Updaterax.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.Updaterax. x) TYPE%verismo!snp.cpu.vmsa.Updaterax.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Copyrcx.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.Copyrcx. (Poly%verismo!snp.cpu.vmsa.Copyrcx. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.Copyrcx. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Copyrcx.) (= x (Poly%verismo!snp.cpu.vmsa.Copyrcx. (%Poly%verismo!snp.cpu.vmsa.Copyrcx. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.Copyrcx.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Copyrcx.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.Copyrcx. x) TYPE%verismo!snp.cpu.vmsa.Copyrcx.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.Copyrcx. x) TYPE%verismo!snp.cpu.vmsa.Copyrcx.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updatercx.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.Updatercx. (Poly%verismo!snp.cpu.vmsa.Updatercx. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.Updatercx. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Updatercx.) (= x (Poly%verismo!snp.cpu.vmsa.Updatercx. (%Poly%verismo!snp.cpu.vmsa.Updatercx. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.Updatercx.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updatercx.)) (! (= (verismo!snp.cpu.vmsa.Updatercx./Updatercx/val x) (verismo!snp.cpu.vmsa.Updatercx./Updatercx/?val x)) :pattern ((verismo!snp.cpu.vmsa.Updatercx./Updatercx/val x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updatercx.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.Updatercx. x) TYPE%verismo!snp.cpu.vmsa.Updatercx.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.Updatercx. x) TYPE%verismo!snp.cpu.vmsa.Updatercx.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Copyrdx.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.Copyrdx. (Poly%verismo!snp.cpu.vmsa.Copyrdx. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.Copyrdx. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Copyrdx.) (= x (Poly%verismo!snp.cpu.vmsa.Copyrdx. (%Poly%verismo!snp.cpu.vmsa.Copyrdx. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.Copyrdx.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Copyrdx.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.Copyrdx. x) TYPE%verismo!snp.cpu.vmsa.Copyrdx.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.Copyrdx. x) TYPE%verismo!snp.cpu.vmsa.Copyrdx.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updaterdx.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.Updaterdx. (Poly%verismo!snp.cpu.vmsa.Updaterdx. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.Updaterdx. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Updaterdx.) (= x (Poly%verismo!snp.cpu.vmsa.Updaterdx. (%Poly%verismo!snp.cpu.vmsa.Updaterdx. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.Updaterdx.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updaterdx.)) (! (= (verismo!snp.cpu.vmsa.Updaterdx./Updaterdx/val x) (verismo!snp.cpu.vmsa.Updaterdx./Updaterdx/?val x)) :pattern ((verismo!snp.cpu.vmsa.Updaterdx./Updaterdx/val x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updaterdx.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.Updaterdx. x) TYPE%verismo!snp.cpu.vmsa.Updaterdx.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.Updaterdx. x) TYPE%verismo!snp.cpu.vmsa.Updaterdx.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Copyrbx.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.Copyrbx. (Poly%verismo!snp.cpu.vmsa.Copyrbx. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.Copyrbx. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Copyrbx.) (= x (Poly%verismo!snp.cpu.vmsa.Copyrbx. (%Poly%verismo!snp.cpu.vmsa.Copyrbx. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.Copyrbx.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Copyrbx.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.Copyrbx. x) TYPE%verismo!snp.cpu.vmsa.Copyrbx.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.Copyrbx. x) TYPE%verismo!snp.cpu.vmsa.Copyrbx.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updaterbx.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.Updaterbx. (Poly%verismo!snp.cpu.vmsa.Updaterbx. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.Updaterbx. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Updaterbx.) (= x (Poly%verismo!snp.cpu.vmsa.Updaterbx. (%Poly%verismo!snp.cpu.vmsa.Updaterbx. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.Updaterbx.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updaterbx.)) (! (= (verismo!snp.cpu.vmsa.Updaterbx./Updaterbx/val x) (verismo!snp.cpu.vmsa.Updaterbx./Updaterbx/?val x)) :pattern ((verismo!snp.cpu.vmsa.Updaterbx./Updaterbx/val x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updaterbx.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.Updaterbx. x) TYPE%verismo!snp.cpu.vmsa.Updaterbx.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.Updaterbx. x) TYPE%verismo!snp.cpu.vmsa.Updaterbx.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Copyguest_error_code.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.Copyguest_error_code. (Poly%verismo!snp.cpu.vmsa.Copyguest_error_code. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.Copyguest_error_code. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Copyguest_error_code.) (= x (Poly%verismo!snp.cpu.vmsa.Copyguest_error_code. (%Poly%verismo!snp.cpu.vmsa.Copyguest_error_code. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.Copyguest_error_code.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Copyguest_error_code.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.Copyguest_error_code. x) TYPE%verismo!snp.cpu.vmsa.Copyguest_error_code.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.Copyguest_error_code. x) TYPE%verismo!snp.cpu.vmsa.Copyguest_error_code.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updateguest_error_code.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.Updateguest_error_code. (Poly%verismo!snp.cpu.vmsa.Updateguest_error_code. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.Updateguest_error_code. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Updateguest_error_code.) (= x (Poly%verismo!snp.cpu.vmsa.Updateguest_error_code. (%Poly%verismo!snp.cpu.vmsa.Updateguest_error_code. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.Updateguest_error_code.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updateguest_error_code.)) (! (= (verismo!snp.cpu.vmsa.Updateguest_error_code./Updateguest_error_code/val x) (verismo!snp.cpu.vmsa.Updateguest_error_code./Updateguest_error_code/?val x)) :pattern ((verismo!snp.cpu.vmsa.Updateguest_error_code./Updateguest_error_code/val x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Updateguest_error_code.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.Updateguest_error_code. x) TYPE%verismo!snp.cpu.vmsa.Updateguest_error_code.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.Updateguest_error_code. x) TYPE%verismo!snp.cpu.vmsa.Updateguest_error_code.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.Vmsa. (Poly%verismo!snp.cpu.vmsa.Vmsa. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.Vmsa. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (= x (Poly%verismo!snp.cpu.vmsa.Vmsa. (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((_es! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (_cs! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (_ss! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (_ds! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (_fs! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (_gs! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (_gdtr! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (_reserved_ldtr_idtr_tr! Poly) (_vmpl! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (_cpl! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (_reserved2! Poly) (_efer! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved3! Poly) (_cr4! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_cr3! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_cr0! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved_dr7_6! Poly) (_rflags! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_rip! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved4! Poly) (_rsp! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved5! Poly) (_rax! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved6! Poly) (_gpat! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved7! Poly) (_rcx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_rdx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_rbx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved8! Poly) (_rbp! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_rsi! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_rdi! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved_9_r9_15_exits_scratch! Poly) (_sev_features! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_vintr_ctrl! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_guest_error_code! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_virtual_tom! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved_12! Poly) (_xcr0! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved13! Poly)) (! (=> (and (has_type _reserved_ldtr_idtr_tr! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90))) (has_type _reserved2! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4))) (has_type _reserved3! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type _reserved_dr7_6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16))) (has_type _reserved4! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88))) (has_type _reserved5! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24))) (has_type _reserved6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104))) (has_type _reserved7! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152))) (has_type _reserved8! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8))) (has_type _reserved_9_r9_15_exits_scratch! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type _reserved_12! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24))) (has_type _reserved13! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)))) (has_type (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.Vmsa./Vmsa _es! _cs! _ss! _ds! _fs! _gs! _gdtr! _reserved_ldtr_idtr_tr! _vmpl! _cpl! _reserved2! _efer! _reserved3! _cr4! _cr3! _cr0! _reserved_dr7_6! _rflags! _rip! _reserved4! _rsp! _reserved5! _rax! _reserved6! _gpat! _reserved7! _rcx! _rdx! _rbx! _reserved8! _rbp! _rsi! _rdi! _reserved_9_r9_15_exits_scratch! _sev_features! _vintr_ctrl! _guest_error_code! _virtual_tom! _reserved_12! _xcr0! _reserved13!)) TYPE%verismo!snp.cpu.vmsa.Vmsa.)) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.Vmsa./Vmsa _es! _cs! _ss! _ds! _fs! _gs! _gdtr! _reserved_ldtr_idtr_tr! _vmpl! _cpl! _reserved2! _efer! _reserved3! _cr4! _cr3! _cr0! _reserved_dr7_6! _rflags! _rip! _reserved4! _rsp! _reserved5! _rax! _reserved6! _gpat! _reserved7! _rcx! _rdx! _rbx! _reserved8! _rbp! _rsi! _rdi! _reserved_9_r9_15_exits_scratch! _sev_features! _vintr_ctrl! _guest_error_code! _virtual_tom! _reserved_12! _xcr0! _reserved13!)) TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/es x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?es x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/es x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cs x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?ss x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?ds x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?fs x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?gs x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?gdtr x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_ldtr_idtr_tr x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?vmpl x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cpl x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved2 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?efer x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved3 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cr4 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cr3 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cr0 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_dr7_6 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rflags x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rip x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved4 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rsp x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved5 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rax x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved6 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?gpat x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved7 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rcx x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rdx x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rbx x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved8 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rbp x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rsi x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rdi x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_9_r9_15_exits_scratch x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?sev_features x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?vintr_ctrl x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?guest_error_code x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?virtual_tom x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_12 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?xcr0 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved13 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.PerCpuData.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.PerCpuData. (Poly%verismo!snp.cpu.vmsa.PerCpuData. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.PerCpuData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.PerCpuData.) (= x (Poly%verismo!snp.cpu.vmsa.PerCpuData. (%Poly%verismo!snp.cpu.vmsa.PerCpuData. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.PerCpuData.)))))
(assert (forall ((_secret! verismo!security.secret.SnpSecretsPageLayout.) (_cpu! Int) (_resvd! Int)) (! (=> (and (uInv 32 _cpu!) (uInv 32 _resvd!)) (has_type (Poly%verismo!snp.cpu.vmsa.PerCpuData. (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData _secret! _cpu! _resvd!)) TYPE%verismo!snp.cpu.vmsa.PerCpuData.)) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.PerCpuData. (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData _secret! _cpu! _resvd!)) TYPE%verismo!snp.cpu.vmsa.PerCpuData.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.PerCpuData.)) (! (= (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/secret x) (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/?secret x)) :pattern ((verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/secret x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.PerCpuData.)) (! (= (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/cpu x) (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/?cpu x)) :pattern ((verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/cpu x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.PerCpuData.) (uInv 32 (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/cpu (%Poly%verismo!snp.cpu.vmsa.PerCpuData. x)))) :pattern ((verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/cpu (%Poly%verismo!snp.cpu.vmsa.PerCpuData. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.PerCpuData.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.PerCpuData.)) (! (= (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/resvd x) (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/?resvd x)) :pattern ((verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/resvd x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.PerCpuData.) (uInv 32 (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/resvd (%Poly%verismo!snp.cpu.vmsa.PerCpuData. x)))) :pattern ((verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/resvd (%Poly%verismo!snp.cpu.vmsa.PerCpuData. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.PerCpuData.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.InitApVmsa.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.InitApVmsa. (Poly%verismo!snp.cpu.vmsa.InitApVmsa. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.InitApVmsa. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.InitApVmsa.) (= x (Poly%verismo!snp.cpu.vmsa.InitApVmsa. (%Poly%verismo!snp.cpu.vmsa.InitApVmsa. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.InitApVmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.InitApVmsa.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.InitApVmsa. x) TYPE%verismo!snp.cpu.vmsa.InitApVmsa.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.InitApVmsa. x) TYPE%verismo!snp.cpu.vmsa.InitApVmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.InitAPParams.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.InitAPParams. (Poly%verismo!snp.cpu.vmsa.InitAPParams. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.InitAPParams. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.InitAPParams.) (= x (Poly%verismo!snp.cpu.vmsa.InitAPParams. (%Poly%verismo!snp.cpu.vmsa.InitAPParams. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.InitAPParams.)))))
(assert (forall ((_fun! verismo!snp.cpu.vmsa.InitApVmsa.) (_cpu! verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>.) (_gdt! Poly)) (! (=> (has_type _gdt! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type (Poly%verismo!snp.cpu.vmsa.InitAPParams. (verismo!snp.cpu.vmsa.InitAPParams./InitAPParams _fun! _cpu! _gdt!)) TYPE%verismo!snp.cpu.vmsa.InitAPParams.)) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.InitAPParams. (verismo!snp.cpu.vmsa.InitAPParams./InitAPParams _fun! _cpu! _gdt!)) TYPE%verismo!snp.cpu.vmsa.InitAPParams.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.InitAPParams.)) (! (= (verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/fun x) (verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/?fun x)) :pattern ((verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/fun x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.InitAPParams.)) (! (= (verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/cpu x) (verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/?cpu x)) :pattern ((verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/cpu x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.InitAPParams.)) (! (= (verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/gdt x) (verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/?gdt x)) :pattern ((verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/gdt x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.InitAPParams.) (has_type (verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/gdt (%Poly%verismo!snp.cpu.vmsa.InitAPParams. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)))) :pattern ((verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/gdt (%Poly%verismo!snp.cpu.vmsa.InitAPParams. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.InitAPParams.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.UpdateRichOSVmsa.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. (Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa.) (= x (Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa.)))))
(assert (forall ((_gdt! Poly) (_gdtr_addr! Int) (_bp_addr! Int) (_kernel_addr! Int) (_vmpl! Int)) (! (=> (and (has_type _gdt! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32))) (uInv 64 _gdtr_addr!) (uInv 64 _bp_addr!) (uInv 64 _kernel_addr!) (uInv 8 _vmpl!)) (has_type (Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa _gdt! _gdtr_addr! _bp_addr! _kernel_addr! _vmpl!)) TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa.)) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa _gdt! _gdtr_addr! _bp_addr! _kernel_addr! _vmpl!)) TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.UpdateRichOSVmsa.)) (! (= (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/gdt x) (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/?gdt x)) :pattern ((verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/gdt x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa.) (has_type (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/gdt (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)))) :pattern ((verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/gdt (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.UpdateRichOSVmsa.)) (! (= (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/gdtr_addr x) (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/?gdtr_addr x)) :pattern ((verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/gdtr_addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa.) (uInv 64 (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/gdtr_addr (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. x)))) :pattern ((verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/gdtr_addr (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.UpdateRichOSVmsa.)) (! (= (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/bp_addr x) (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/?bp_addr x)) :pattern ((verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/bp_addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa.) (uInv 64 (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/bp_addr (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. x)))) :pattern ((verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/bp_addr (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.UpdateRichOSVmsa.)) (! (= (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/kernel_addr x) (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/?kernel_addr x)) :pattern ((verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/kernel_addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa.) (uInv 64 (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/kernel_addr (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. x)))) :pattern ((verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/kernel_addr (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.UpdateRichOSVmsa.)) (! (= (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/vmpl x) (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/?vmpl x)) :pattern ((verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/vmpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa.) (uInv 8 (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. x)))) :pattern ((verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.UpdateVMPL.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.UpdateVMPL. (Poly%verismo!snp.cpu.vmsa.UpdateVMPL. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.UpdateVMPL. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.UpdateVMPL.) (= x (Poly%verismo!snp.cpu.vmsa.UpdateVMPL. (%Poly%verismo!snp.cpu.vmsa.UpdateVMPL. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.UpdateVMPL.)))))
(assert (forall ((_vmpl! Int)) (! (=> (uInv 8 _vmpl!) (has_type (Poly%verismo!snp.cpu.vmsa.UpdateVMPL. (verismo!snp.cpu.vmsa.UpdateVMPL./UpdateVMPL _vmpl!)) TYPE%verismo!snp.cpu.vmsa.UpdateVMPL.)) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.UpdateVMPL. (verismo!snp.cpu.vmsa.UpdateVMPL./UpdateVMPL _vmpl!)) TYPE%verismo!snp.cpu.vmsa.UpdateVMPL.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.UpdateVMPL.)) (! (= (verismo!snp.cpu.vmsa.UpdateVMPL./UpdateVMPL/vmpl x) (verismo!snp.cpu.vmsa.UpdateVMPL./UpdateVMPL/?vmpl x)) :pattern ((verismo!snp.cpu.vmsa.UpdateVMPL./UpdateVMPL/vmpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.UpdateVMPL.) (uInv 8 (verismo!snp.cpu.vmsa.UpdateVMPL./UpdateVMPL/vmpl (%Poly%verismo!snp.cpu.vmsa.UpdateVMPL. x)))) :pattern ((verismo!snp.cpu.vmsa.UpdateVMPL./UpdateVMPL/vmpl (%Poly%verismo!snp.cpu.vmsa.UpdateVMPL. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.UpdateVMPL.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. (Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut.) (= x (Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. x) TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. x) TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut.)))))
(assert (forall ((x verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.)) (! (= x (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. x))) :pattern ((Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.) (= x (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. x)))) :pattern ((has_type x TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.)))))
(assert (forall ((_snpcore! verismo!registers.trackedcore.snpcore.SnpCore.) (_lockperms! vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>.)) (! (=> (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. _snpcore!) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem _snpcore! _lockperms!)) TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.)) :pattern ((has_type (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem _snpcore! _lockperms!)) TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.)))))
(assert (forall ((x verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.)) (! (= (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore x) (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/?snpcore x)) :pattern ((verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.) (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. x))) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)) :pattern ((verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. x)) (has_type x TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.)))))
(assert (forall ((x verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.)) (! (= (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms x) (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/?lockperms x)) :pattern ((verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms x)))))
(assert (forall ((x verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.)) (! (= x (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. x))) :pattern ((Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.) (= x (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. x)))) :pattern ((has_type x TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.)))))
(assert (forall ((_snpcore! verismo!registers.trackedcore.snpcore.SnpCore.) (_console! vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)) (! (=> (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. _snpcore!) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole _snpcore! _console!)) TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.)) :pattern ((has_type (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole _snpcore! _console!)) TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.)))))
(assert (forall ((x verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.)) (! (= (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore x) (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/?snpcore x)) :pattern ((verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.) (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. x))) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)) :pattern ((verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. x)) (has_type x TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.)))))
(assert (forall ((x verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.)) (! (= (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/console x) (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/?console x)) :pattern ((verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/console x)))))
(assert (forall ((x verismo!tspec_e.array.array_e.ArrayUpdate.)) (! (= x (%Poly%verismo!tspec_e.array.array_e.ArrayUpdate. (Poly%verismo!tspec_e.array.array_e.ArrayUpdate. x))) :pattern ((Poly%verismo!tspec_e.array.array_e.ArrayUpdate. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec_e.array.array_e.ArrayUpdate. T&. T&)) (= x (Poly%verismo!tspec_e.array.array_e.ArrayUpdate. (%Poly%verismo!tspec_e.array.array_e.ArrayUpdate. x)))) :pattern ((has_type x (TYPE%verismo!tspec_e.array.array_e.ArrayUpdate. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_index! Int) (_val! Poly)) (! (=> (and (uInv SZ _index!) (has_type _val! T&)) (has_type (Poly%verismo!tspec_e.array.array_e.ArrayUpdate. (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate _index! _val!)) (TYPE%verismo!tspec_e.array.array_e.ArrayUpdate. T&. T&))) :pattern ((has_type (Poly%verismo!tspec_e.array.array_e.ArrayUpdate. (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate _index! _val!)) (TYPE%verismo!tspec_e.array.array_e.ArrayUpdate. T&. T&))))))
(assert (forall ((x verismo!tspec_e.array.array_e.ArrayUpdate.)) (! (= (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/index x) (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/?index x)) :pattern ((verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/index x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec_e.array.array_e.ArrayUpdate. T&. T&)) (uInv SZ (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/index (%Poly%verismo!tspec_e.array.array_e.ArrayUpdate. x)))) :pattern ((verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/index (%Poly%verismo!tspec_e.array.array_e.ArrayUpdate. x)) (has_type x (TYPE%verismo!tspec_e.array.array_e.ArrayUpdate. T&. T&))))))
(assert (forall ((x verismo!tspec_e.array.array_e.ArrayUpdate.)) (! (= (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/val x) (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/?val x)) :pattern ((verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/val x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec_e.array.array_e.ArrayUpdate. T&. T&)) (has_type (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/val (%Poly%verismo!tspec_e.array.array_e.ArrayUpdate. x)) T&)) :pattern ((verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/val (%Poly%verismo!tspec_e.array.array_e.ArrayUpdate. x)) (has_type x (TYPE%verismo!tspec_e.array.array_e.ArrayUpdate. T&. T&))))))
(define-fun is-verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate_ ((c verismo!tspec_e.array.array_e.ArrayUpdate.)) Bool ((_ is verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate) c))
(assert (forall ((x verismo!tspec_e.array.array_e.ArrayUpdate.)) (! (=> (is-verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate_ x) (height_lt (height (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/val x)) (height (Poly%verismo!tspec_e.array.array_e.ArrayUpdate. x)))) :pattern ((height (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/val x))))))
(assert (forall ((x verismo!arch.entities.VMPL.)) (! (= x (%Poly%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. x))) :pattern ((Poly%verismo!arch.entities.VMPL. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.VMPL.) (= x (Poly%verismo!arch.entities.VMPL. (%Poly%verismo!arch.entities.VMPL. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.VMPL.)))))
(assert (forall ((x verismo!arch.entities.VMPL.)) (! (has_type (Poly%verismo!arch.entities.VMPL. x) TYPE%verismo!arch.entities.VMPL.) :pattern ((has_type (Poly%verismo!arch.entities.VMPL. x) TYPE%verismo!arch.entities.VMPL.)))))
(assert (forall ((x verismo!arch.reg.RegName.)) (! (= x (%Poly%verismo!arch.reg.RegName. (Poly%verismo!arch.reg.RegName. x))) :pattern ((Poly%verismo!arch.reg.RegName. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.reg.RegName.) (= x (Poly%verismo!arch.reg.RegName. (%Poly%verismo!arch.reg.RegName. x)))) :pattern ((has_type x TYPE%verismo!arch.reg.RegName.)))))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rsp) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cs) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Ds) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Ss) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Es) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Gs) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cpl) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr0) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr1) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr2) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr3) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr4) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./XCr0) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./IdtrBaseLimit) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./GdtrBaseLimit) TYPE%verismo!arch.reg.RegName.))
(assert (forall ((_0! Int)) (! (=> (uInv 32 _0!) (has_type (Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName./MSR _0!)) TYPE%verismo!arch.reg.RegName.)) :pattern ((has_type (Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName./MSR _0!)) TYPE%verismo!arch.reg.RegName.)))))
(assert (forall ((x verismo!arch.reg.RegName.)) (! (= (verismo!arch.reg.RegName./MSR/0 x) (verismo!arch.reg.RegName./MSR/?0 x)) :pattern ((verismo!arch.reg.RegName./MSR/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.reg.RegName.) (uInv 32 (verismo!arch.reg.RegName./MSR/0 (%Poly%verismo!arch.reg.RegName. x)))) :pattern ((verismo!arch.reg.RegName./MSR/0 (%Poly%verismo!arch.reg.RegName. x)) (has_type x TYPE%verismo!arch.reg.RegName.)))))
(assert (forall ((x verismo!primitives_e.vec.PushParam.)) (! (= x (%Poly%verismo!primitives_e.vec.PushParam. (Poly%verismo!primitives_e.vec.PushParam. x))) :pattern ((Poly%verismo!primitives_e.vec.PushParam. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!primitives_e.vec.PushParam. T&. T&)) (= x (Poly%verismo!primitives_e.vec.PushParam. (%Poly%verismo!primitives_e.vec.PushParam. x)))) :pattern ((has_type x (TYPE%verismo!primitives_e.vec.PushParam. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_val! Poly)) (! (=> (has_type _val! T&) (has_type (Poly%verismo!primitives_e.vec.PushParam. (verismo!primitives_e.vec.PushParam./PushParam _val!)) (TYPE%verismo!primitives_e.vec.PushParam. T&. T&))) :pattern ((has_type (Poly%verismo!primitives_e.vec.PushParam. (verismo!primitives_e.vec.PushParam./PushParam _val!)) (TYPE%verismo!primitives_e.vec.PushParam. T&. T&))))))
(assert (forall ((x verismo!primitives_e.vec.PushParam.)) (! (= (verismo!primitives_e.vec.PushParam./PushParam/val x) (verismo!primitives_e.vec.PushParam./PushParam/?val x)) :pattern ((verismo!primitives_e.vec.PushParam./PushParam/val x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!primitives_e.vec.PushParam. T&. T&)) (has_type (verismo!primitives_e.vec.PushParam./PushParam/val (%Poly%verismo!primitives_e.vec.PushParam. x)) T&)) :pattern ((verismo!primitives_e.vec.PushParam./PushParam/val (%Poly%verismo!primitives_e.vec.PushParam. x)) (has_type x (TYPE%verismo!primitives_e.vec.PushParam. T&. T&))))))
(define-fun is-verismo!primitives_e.vec.PushParam./PushParam_ ((c verismo!primitives_e.vec.PushParam.)) Bool ((_ is verismo!primitives_e.vec.PushParam./PushParam) c))
(assert (forall ((x verismo!primitives_e.vec.PushParam.)) (! (=> (is-verismo!primitives_e.vec.PushParam./PushParam_ x) (height_lt (height (verismo!primitives_e.vec.PushParam./PushParam/val x)) (height (Poly%verismo!primitives_e.vec.PushParam. x)))) :pattern ((height (verismo!primitives_e.vec.PushParam./PushParam/val x))))))
(assert (forall ((x verismo!allocator.linkedlist.SpecLinkedListAllocator.)) (! (= x (%Poly%verismo!allocator.linkedlist.SpecLinkedListAllocator. (Poly%verismo!allocator.linkedlist.SpecLinkedListAllocator. x))) :pattern ((Poly%verismo!allocator.linkedlist.SpecLinkedListAllocator. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!allocator.linkedlist.SpecLinkedListAllocator.) (= x (Poly%verismo!allocator.linkedlist.SpecLinkedListAllocator. (%Poly%verismo!allocator.linkedlist.SpecLinkedListAllocator. x)))) :pattern ((has_type x TYPE%verismo!allocator.linkedlist.SpecLinkedListAllocator.)))))
(assert (forall ((_perms! vstd!map.Map<nat./verismo!ptr.def_s.SnpPointsToRaw.>.) (_free_list! verismo!linkedlist.LinkedList.)) (! (=> (has_type (Poly%verismo!linkedlist.LinkedList. _free_list!) (TYPE%verismo!linkedlist.LinkedList. $ (UINT SZ))) (has_type (Poly%verismo!allocator.linkedlist.SpecLinkedListAllocator. (verismo!allocator.linkedlist.SpecLinkedListAllocator./SpecLinkedListAllocator _perms! _free_list!)) TYPE%verismo!allocator.linkedlist.SpecLinkedListAllocator.)) :pattern ((has_type (Poly%verismo!allocator.linkedlist.SpecLinkedListAllocator. (verismo!allocator.linkedlist.SpecLinkedListAllocator./SpecLinkedListAllocator _perms! _free_list!)) TYPE%verismo!allocator.linkedlist.SpecLinkedListAllocator.)))))
(assert (forall ((x verismo!allocator.linkedlist.SpecLinkedListAllocator.)) (! (= (verismo!allocator.linkedlist.SpecLinkedListAllocator./SpecLinkedListAllocator/perms x) (verismo!allocator.linkedlist.SpecLinkedListAllocator./SpecLinkedListAllocator/?perms x)) :pattern ((verismo!allocator.linkedlist.SpecLinkedListAllocator./SpecLinkedListAllocator/perms x)))))
(assert (forall ((x verismo!allocator.linkedlist.SpecLinkedListAllocator.)) (! (= (verismo!allocator.linkedlist.SpecLinkedListAllocator./SpecLinkedListAllocator/free_list x) (verismo!allocator.linkedlist.SpecLinkedListAllocator./SpecLinkedListAllocator/?free_list x)) :pattern ((verismo!allocator.linkedlist.SpecLinkedListAllocator./SpecLinkedListAllocator/free_list x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!allocator.linkedlist.SpecLinkedListAllocator.) (has_type (Poly%verismo!linkedlist.LinkedList. (verismo!allocator.linkedlist.SpecLinkedListAllocator./SpecLinkedListAllocator/free_list (%Poly%verismo!allocator.linkedlist.SpecLinkedListAllocator. x))) (TYPE%verismo!linkedlist.LinkedList. $ (UINT SZ)))) :pattern ((verismo!allocator.linkedlist.SpecLinkedListAllocator./SpecLinkedListAllocator/free_list (%Poly%verismo!allocator.linkedlist.SpecLinkedListAllocator. x)) (has_type x TYPE%verismo!allocator.linkedlist.SpecLinkedListAllocator.)))))
(assert (forall ((x verismo!boot.linux.Copybp.)) (! (= x (%Poly%verismo!boot.linux.Copybp. (Poly%verismo!boot.linux.Copybp. x))) :pattern ((Poly%verismo!boot.linux.Copybp. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Copybp.) (= x (Poly%verismo!boot.linux.Copybp. (%Poly%verismo!boot.linux.Copybp. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.Copybp.)))))
(assert (forall ((x verismo!boot.linux.Copybp.)) (! (has_type (Poly%verismo!boot.linux.Copybp. x) TYPE%verismo!boot.linux.Copybp.) :pattern ((has_type (Poly%verismo!boot.linux.Copybp. x) TYPE%verismo!boot.linux.Copybp.)))))
(assert (forall ((x verismo!boot.linux.Updatebp.)) (! (= x (%Poly%verismo!boot.linux.Updatebp. (Poly%verismo!boot.linux.Updatebp. x))) :pattern ((Poly%verismo!boot.linux.Updatebp. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Updatebp.) (= x (Poly%verismo!boot.linux.Updatebp. (%Poly%verismo!boot.linux.Updatebp. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.Updatebp.)))))
(assert (forall ((_val! verismo!boot.params.BootParams.)) (! (=> (has_type (Poly%verismo!boot.params.BootParams. _val!) TYPE%verismo!boot.params.BootParams.) (has_type (Poly%verismo!boot.linux.Updatebp. (verismo!boot.linux.Updatebp./Updatebp _val!)) TYPE%verismo!boot.linux.Updatebp.)) :pattern ((has_type (Poly%verismo!boot.linux.Updatebp. (verismo!boot.linux.Updatebp./Updatebp _val!)) TYPE%verismo!boot.linux.Updatebp.)))))
(assert (forall ((x verismo!boot.linux.Updatebp.)) (! (= (verismo!boot.linux.Updatebp./Updatebp/val x) (verismo!boot.linux.Updatebp./Updatebp/?val x)) :pattern ((verismo!boot.linux.Updatebp./Updatebp/val x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Updatebp.) (has_type (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.Updatebp./Updatebp/val (%Poly%verismo!boot.linux.Updatebp. x))) TYPE%verismo!boot.params.BootParams.)) :pattern ((verismo!boot.linux.Updatebp./Updatebp/val (%Poly%verismo!boot.linux.Updatebp. x)) (has_type x TYPE%verismo!boot.linux.Updatebp.)))))
(assert (forall ((x verismo!boot.linux.Copysecret.)) (! (= x (%Poly%verismo!boot.linux.Copysecret. (Poly%verismo!boot.linux.Copysecret. x))) :pattern ((Poly%verismo!boot.linux.Copysecret. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Copysecret.) (= x (Poly%verismo!boot.linux.Copysecret. (%Poly%verismo!boot.linux.Copysecret. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.Copysecret.)))))
(assert (forall ((x verismo!boot.linux.Copysecret.)) (! (has_type (Poly%verismo!boot.linux.Copysecret. x) TYPE%verismo!boot.linux.Copysecret.) :pattern ((has_type (Poly%verismo!boot.linux.Copysecret. x) TYPE%verismo!boot.linux.Copysecret.)))))
(assert (forall ((x verismo!boot.linux.Updatesecret.)) (! (= x (%Poly%verismo!boot.linux.Updatesecret. (Poly%verismo!boot.linux.Updatesecret. x))) :pattern ((Poly%verismo!boot.linux.Updatesecret. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Updatesecret.) (= x (Poly%verismo!boot.linux.Updatesecret. (%Poly%verismo!boot.linux.Updatesecret. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.Updatesecret.)))))
(assert (forall ((x verismo!boot.linux.Updatesecret.)) (! (= (verismo!boot.linux.Updatesecret./Updatesecret/val x) (verismo!boot.linux.Updatesecret./Updatesecret/?val x)) :pattern ((verismo!boot.linux.Updatesecret./Updatesecret/val x)))))
(assert (forall ((x verismo!boot.linux.Updatesecret.)) (! (has_type (Poly%verismo!boot.linux.Updatesecret. x) TYPE%verismo!boot.linux.Updatesecret.) :pattern ((has_type (Poly%verismo!boot.linux.Updatesecret. x) TYPE%verismo!boot.linux.Updatesecret.)))))
(assert (forall ((x verismo!boot.linux.Copycpuid.)) (! (= x (%Poly%verismo!boot.linux.Copycpuid. (Poly%verismo!boot.linux.Copycpuid. x))) :pattern ((Poly%verismo!boot.linux.Copycpuid. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Copycpuid.) (= x (Poly%verismo!boot.linux.Copycpuid. (%Poly%verismo!boot.linux.Copycpuid. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.Copycpuid.)))))
(assert (forall ((x verismo!boot.linux.Copycpuid.)) (! (has_type (Poly%verismo!boot.linux.Copycpuid. x) TYPE%verismo!boot.linux.Copycpuid.) :pattern ((has_type (Poly%verismo!boot.linux.Copycpuid. x) TYPE%verismo!boot.linux.Copycpuid.)))))
(assert (forall ((x verismo!boot.linux.Updatecpuid.)) (! (= x (%Poly%verismo!boot.linux.Updatecpuid. (Poly%verismo!boot.linux.Updatecpuid. x))) :pattern ((Poly%verismo!boot.linux.Updatecpuid. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Updatecpuid.) (= x (Poly%verismo!boot.linux.Updatecpuid. (%Poly%verismo!boot.linux.Updatecpuid. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.Updatecpuid.)))))
(assert (forall ((_val! verismo!snp.cpuid.SnpCpuidTable.)) (! (=> (has_type (Poly%verismo!snp.cpuid.SnpCpuidTable. _val!) TYPE%verismo!snp.cpuid.SnpCpuidTable.) (has_type (Poly%verismo!boot.linux.Updatecpuid. (verismo!boot.linux.Updatecpuid./Updatecpuid _val!)) TYPE%verismo!boot.linux.Updatecpuid.)) :pattern ((has_type (Poly%verismo!boot.linux.Updatecpuid. (verismo!boot.linux.Updatecpuid./Updatecpuid _val!)) TYPE%verismo!boot.linux.Updatecpuid.)))))
(assert (forall ((x verismo!boot.linux.Updatecpuid.)) (! (= (verismo!boot.linux.Updatecpuid./Updatecpuid/val x) (verismo!boot.linux.Updatecpuid./Updatecpuid/?val x)) :pattern ((verismo!boot.linux.Updatecpuid./Updatecpuid/val x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Updatecpuid.) (has_type (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.Updatecpuid./Updatecpuid/val (%Poly%verismo!boot.linux.Updatecpuid. x))) TYPE%verismo!snp.cpuid.SnpCpuidTable.)) :pattern ((verismo!boot.linux.Updatecpuid./Updatecpuid/val (%Poly%verismo!boot.linux.Updatecpuid. x)) (has_type x TYPE%verismo!boot.linux.Updatecpuid.)))))
(assert (forall ((x verismo!boot.linux.Copygdt.)) (! (= x (%Poly%verismo!boot.linux.Copygdt. (Poly%verismo!boot.linux.Copygdt. x))) :pattern ((Poly%verismo!boot.linux.Copygdt. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Copygdt.) (= x (Poly%verismo!boot.linux.Copygdt. (%Poly%verismo!boot.linux.Copygdt. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.Copygdt.)))))
(assert (forall ((x verismo!boot.linux.Copygdt.)) (! (has_type (Poly%verismo!boot.linux.Copygdt. x) TYPE%verismo!boot.linux.Copygdt.) :pattern ((has_type (Poly%verismo!boot.linux.Copygdt. x) TYPE%verismo!boot.linux.Copygdt.)))))
(assert (forall ((x verismo!boot.linux.Updategdt.)) (! (= x (%Poly%verismo!boot.linux.Updategdt. (Poly%verismo!boot.linux.Updategdt. x))) :pattern ((Poly%verismo!boot.linux.Updategdt. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Updategdt.) (= x (Poly%verismo!boot.linux.Updategdt. (%Poly%verismo!boot.linux.Updategdt. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.Updategdt.)))))
(assert (forall ((_val! Poly)) (! (=> (has_type _val! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type (Poly%verismo!boot.linux.Updategdt. (verismo!boot.linux.Updategdt./Updategdt _val!)) TYPE%verismo!boot.linux.Updategdt.)) :pattern ((has_type (Poly%verismo!boot.linux.Updategdt. (verismo!boot.linux.Updategdt./Updategdt _val!)) TYPE%verismo!boot.linux.Updategdt.)))))
(assert (forall ((x verismo!boot.linux.Updategdt.)) (! (= (verismo!boot.linux.Updategdt./Updategdt/val x) (verismo!boot.linux.Updategdt./Updategdt/?val x)) :pattern ((verismo!boot.linux.Updategdt./Updategdt/val x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Updategdt.) (has_type (verismo!boot.linux.Updategdt./Updategdt/val (%Poly%verismo!boot.linux.Updategdt. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)))) :pattern ((verismo!boot.linux.Updategdt./Updategdt/val (%Poly%verismo!boot.linux.Updategdt. x)) (has_type x TYPE%verismo!boot.linux.Updategdt.)))))
(assert (forall ((x verismo!boot.linux.Copycmdline.)) (! (= x (%Poly%verismo!boot.linux.Copycmdline. (Poly%verismo!boot.linux.Copycmdline. x))) :pattern ((Poly%verismo!boot.linux.Copycmdline. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Copycmdline.) (= x (Poly%verismo!boot.linux.Copycmdline. (%Poly%verismo!boot.linux.Copycmdline. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.Copycmdline.)))))
(assert (forall ((x verismo!boot.linux.Copycmdline.)) (! (has_type (Poly%verismo!boot.linux.Copycmdline. x) TYPE%verismo!boot.linux.Copycmdline.) :pattern ((has_type (Poly%verismo!boot.linux.Copycmdline. x) TYPE%verismo!boot.linux.Copycmdline.)))))
(assert (forall ((x verismo!boot.linux.Updatecmdline.)) (! (= x (%Poly%verismo!boot.linux.Updatecmdline. (Poly%verismo!boot.linux.Updatecmdline. x))) :pattern ((Poly%verismo!boot.linux.Updatecmdline. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Updatecmdline.) (= x (Poly%verismo!boot.linux.Updatecmdline. (%Poly%verismo!boot.linux.Updatecmdline. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.Updatecmdline.)))))
(assert (forall ((_val! Poly)) (! (=> (has_type _val! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256))) (has_type (Poly%verismo!boot.linux.Updatecmdline. (verismo!boot.linux.Updatecmdline./Updatecmdline _val!)) TYPE%verismo!boot.linux.Updatecmdline.)) :pattern ((has_type (Poly%verismo!boot.linux.Updatecmdline. (verismo!boot.linux.Updatecmdline./Updatecmdline _val!)) TYPE%verismo!boot.linux.Updatecmdline.)))))
(assert (forall ((x verismo!boot.linux.Updatecmdline.)) (! (= (verismo!boot.linux.Updatecmdline./Updatecmdline/val x) (verismo!boot.linux.Updatecmdline./Updatecmdline/?val x)) :pattern ((verismo!boot.linux.Updatecmdline./Updatecmdline/val x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Updatecmdline.) (has_type (verismo!boot.linux.Updatecmdline./Updatecmdline/val (%Poly%verismo!boot.linux.Updatecmdline. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)))) :pattern ((verismo!boot.linux.Updatecmdline./Updatecmdline/val (%Poly%verismo!boot.linux.Updatecmdline. x)) (has_type x TYPE%verismo!boot.linux.Updatecmdline.)))))
(assert (forall ((x verismo!boot.linux.Copyccblob.)) (! (= x (%Poly%verismo!boot.linux.Copyccblob. (Poly%verismo!boot.linux.Copyccblob. x))) :pattern ((Poly%verismo!boot.linux.Copyccblob. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Copyccblob.) (= x (Poly%verismo!boot.linux.Copyccblob. (%Poly%verismo!boot.linux.Copyccblob. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.Copyccblob.)))))
(assert (forall ((x verismo!boot.linux.Copyccblob.)) (! (has_type (Poly%verismo!boot.linux.Copyccblob. x) TYPE%verismo!boot.linux.Copyccblob.) :pattern ((has_type (Poly%verismo!boot.linux.Copyccblob. x) TYPE%verismo!boot.linux.Copyccblob.)))))
(assert (forall ((x verismo!boot.linux.Updateccblob.)) (! (= x (%Poly%verismo!boot.linux.Updateccblob. (Poly%verismo!boot.linux.Updateccblob. x))) :pattern ((Poly%verismo!boot.linux.Updateccblob. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.Updateccblob.) (= x (Poly%verismo!boot.linux.Updateccblob. (%Poly%verismo!boot.linux.Updateccblob. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.Updateccblob.)))))
(assert (forall ((x verismo!boot.linux.Updateccblob.)) (! (= (verismo!boot.linux.Updateccblob./Updateccblob/val x) (verismo!boot.linux.Updateccblob./Updateccblob/?val x)) :pattern ((verismo!boot.linux.Updateccblob./Updateccblob/val x)))))
(assert (forall ((x verismo!boot.linux.Updateccblob.)) (! (has_type (Poly%verismo!boot.linux.Updateccblob. x) TYPE%verismo!boot.linux.Updateccblob.) :pattern ((has_type (Poly%verismo!boot.linux.Updateccblob. x) TYPE%verismo!boot.linux.Updateccblob.)))))
(assert (forall ((x verismo!boot.linux.BootInfo.)) (! (= x (%Poly%verismo!boot.linux.BootInfo. (Poly%verismo!boot.linux.BootInfo. x))) :pattern ((Poly%verismo!boot.linux.BootInfo. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.BootInfo.) (= x (Poly%verismo!boot.linux.BootInfo. (%Poly%verismo!boot.linux.BootInfo. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.BootInfo.)))))
(assert (forall ((_bp! verismo!boot.params.BootParams.) (_secret! verismo!security.secret.SnpSecretsPageLayout.) (_cpuid! verismo!snp.cpuid.SnpCpuidTable.) (_gdt! Poly) (_cmdline! Poly) (_ccblob! verismo!boot.linux.CCBlobSevInfo.) (_reserved! Poly)) (! (=> (and (has_type (Poly%verismo!boot.params.BootParams. _bp!) TYPE%verismo!boot.params.BootParams.) (has_type (Poly%verismo!snp.cpuid.SnpCpuidTable. _cpuid!) TYPE%verismo!snp.cpuid.SnpCpuidTable.) (has_type _gdt! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type _cmdline! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256))) (has_type _reserved! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3536)))) (has_type (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.BootInfo./BootInfo _bp! _secret! _cpuid! _gdt! _cmdline! _ccblob! _reserved!)) TYPE%verismo!boot.linux.BootInfo.)) :pattern ((has_type (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.BootInfo./BootInfo _bp! _secret! _cpuid! _gdt! _cmdline! _ccblob! _reserved!)) TYPE%verismo!boot.linux.BootInfo.)))))
(assert (forall ((x verismo!boot.linux.BootInfo.)) (! (= (verismo!boot.linux.BootInfo./BootInfo/bp x) (verismo!boot.linux.BootInfo./BootInfo/?bp x)) :pattern ((verismo!boot.linux.BootInfo./BootInfo/bp x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.BootInfo.) (has_type (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. x))) TYPE%verismo!boot.params.BootParams.)) :pattern ((verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. x)) (has_type x TYPE%verismo!boot.linux.BootInfo.)))))
(assert (forall ((x verismo!boot.linux.BootInfo.)) (! (= (verismo!boot.linux.BootInfo./BootInfo/secret x) (verismo!boot.linux.BootInfo./BootInfo/?secret x)) :pattern ((verismo!boot.linux.BootInfo./BootInfo/secret x)))))
(assert (forall ((x verismo!boot.linux.BootInfo.)) (! (= (verismo!boot.linux.BootInfo./BootInfo/cpuid x) (verismo!boot.linux.BootInfo./BootInfo/?cpuid x)) :pattern ((verismo!boot.linux.BootInfo./BootInfo/cpuid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.BootInfo.) (has_type (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.BootInfo./BootInfo/cpuid (%Poly%verismo!boot.linux.BootInfo. x))) TYPE%verismo!snp.cpuid.SnpCpuidTable.)) :pattern ((verismo!boot.linux.BootInfo./BootInfo/cpuid (%Poly%verismo!boot.linux.BootInfo. x)) (has_type x TYPE%verismo!boot.linux.BootInfo.)))))
(assert (forall ((x verismo!boot.linux.BootInfo.)) (! (= (verismo!boot.linux.BootInfo./BootInfo/gdt x) (verismo!boot.linux.BootInfo./BootInfo/?gdt x)) :pattern ((verismo!boot.linux.BootInfo./BootInfo/gdt x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.BootInfo.) (has_type (verismo!boot.linux.BootInfo./BootInfo/gdt (%Poly%verismo!boot.linux.BootInfo. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)))) :pattern ((verismo!boot.linux.BootInfo./BootInfo/gdt (%Poly%verismo!boot.linux.BootInfo. x)) (has_type x TYPE%verismo!boot.linux.BootInfo.)))))
(assert (forall ((x verismo!boot.linux.BootInfo.)) (! (= (verismo!boot.linux.BootInfo./BootInfo/cmdline x) (verismo!boot.linux.BootInfo./BootInfo/?cmdline x)) :pattern ((verismo!boot.linux.BootInfo./BootInfo/cmdline x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.BootInfo.) (has_type (verismo!boot.linux.BootInfo./BootInfo/cmdline (%Poly%verismo!boot.linux.BootInfo. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)))) :pattern ((verismo!boot.linux.BootInfo./BootInfo/cmdline (%Poly%verismo!boot.linux.BootInfo. x)) (has_type x TYPE%verismo!boot.linux.BootInfo.)))))
(assert (forall ((x verismo!boot.linux.BootInfo.)) (! (= (verismo!boot.linux.BootInfo./BootInfo/ccblob x) (verismo!boot.linux.BootInfo./BootInfo/?ccblob x)) :pattern ((verismo!boot.linux.BootInfo./BootInfo/ccblob x)))))
(assert (forall ((x verismo!boot.linux.BootInfo.)) (! (= (verismo!boot.linux.BootInfo./BootInfo/reserved x) (verismo!boot.linux.BootInfo./BootInfo/?reserved x)) :pattern ((verismo!boot.linux.BootInfo./BootInfo/reserved x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.BootInfo.) (has_type (verismo!boot.linux.BootInfo./BootInfo/reserved (%Poly%verismo!boot.linux.BootInfo. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3536)))) :pattern ((verismo!boot.linux.BootInfo./BootInfo/reserved (%Poly%verismo!boot.linux.BootInfo. x)) (has_type x TYPE%verismo!boot.linux.BootInfo.)))))
(assert (forall ((x verismo!boot.linux.CCBlobSevInfo.)) (! (= x (%Poly%verismo!boot.linux.CCBlobSevInfo. (Poly%verismo!boot.linux.CCBlobSevInfo. x))) :pattern ((Poly%verismo!boot.linux.CCBlobSevInfo. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.CCBlobSevInfo.) (= x (Poly%verismo!boot.linux.CCBlobSevInfo. (%Poly%verismo!boot.linux.CCBlobSevInfo. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.CCBlobSevInfo.)))))
(assert (forall ((x verismo!boot.linux.CCBlobSevInfo.)) (! (= (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0 x) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?reserved0 x)) :pattern ((verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0 x)))))
(assert (forall ((x verismo!boot.linux.CCBlobSevInfo.)) (! (= (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0_1 x) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?reserved0_1 x)) :pattern ((verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0_1 x)))))
(assert (forall ((x verismo!boot.linux.CCBlobSevInfo.)) (! (= (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved1 x) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?reserved1 x)) :pattern ((verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved1 x)))))
(assert (forall ((x verismo!boot.linux.CCBlobSevInfo.)) (! (= (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_phys x) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?secrets_phys x)) :pattern ((verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_phys x)))))
(assert (forall ((x verismo!boot.linux.CCBlobSevInfo.)) (! (= (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_len x) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?secrets_len x)) :pattern ((verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_len x)))))
(assert (forall ((x verismo!boot.linux.CCBlobSevInfo.)) (! (= (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved2 x) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?reserved2 x)) :pattern ((verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved2 x)))))
(assert (forall ((x verismo!boot.linux.CCBlobSevInfo.)) (! (= (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_phys x) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?cpuid_phys x)) :pattern ((verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_phys x)))))
(assert (forall ((x verismo!boot.linux.CCBlobSevInfo.)) (! (= (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_len x) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?cpuid_len x)) :pattern ((verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_len x)))))
(assert (forall ((x verismo!boot.linux.CCBlobSevInfo.)) (! (= (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved3 x) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?reserved3 x)) :pattern ((verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved3 x)))))
(assert (forall ((x verismo!boot.linux.CCBlobSevInfo.)) (! (= (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/shared_page x) (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/?shared_page x)) :pattern ((verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/shared_page x)))))
(assert (forall ((x verismo!boot.linux.CCBlobSevInfo.)) (! (has_type (Poly%verismo!boot.linux.CCBlobSevInfo. x) TYPE%verismo!boot.linux.CCBlobSevInfo.) :pattern ((has_type (Poly%verismo!boot.linux.CCBlobSevInfo. x) TYPE%verismo!boot.linux.CCBlobSevInfo.)))))
(assert (forall ((x verismo!boot.linux.BootUpdate.)) (! (= x (%Poly%verismo!boot.linux.BootUpdate. (Poly%verismo!boot.linux.BootUpdate. x))) :pattern ((Poly%verismo!boot.linux.BootUpdate. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.BootUpdate.) (= x (Poly%verismo!boot.linux.BootUpdate. (%Poly%verismo!boot.linux.BootUpdate. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.BootUpdate.)))))
(assert (forall ((_acpi_rsdp_addr! Int) (_cc_blob_addr! Int) (_cmd_line_addr! Int) (_cmdline_size! Int) (_e820_entries! Int) (_e820! Poly) (_hdr! verismo!boot.params.SetupHeader.)) (! (=> (and (uInv 64 _acpi_rsdp_addr!) (uInv 64 _cc_blob_addr!) (uInv 64 _cmd_line_addr!) (uInv 64 _cmdline_size!) (uInv 8 _e820_entries!) (has_type _e820! (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16)))) (has_type (Poly%verismo!boot.linux.BootUpdate. (verismo!boot.linux.BootUpdate./BootUpdate _acpi_rsdp_addr! _cc_blob_addr! _cmd_line_addr! _cmdline_size! _e820_entries! _e820! _hdr!)) TYPE%verismo!boot.linux.BootUpdate.)) :pattern ((has_type (Poly%verismo!boot.linux.BootUpdate. (verismo!boot.linux.BootUpdate./BootUpdate _acpi_rsdp_addr! _cc_blob_addr! _cmd_line_addr! _cmdline_size! _e820_entries! _e820! _hdr!)) TYPE%verismo!boot.linux.BootUpdate.)))))
(assert (forall ((x verismo!boot.linux.BootUpdate.)) (! (= (verismo!boot.linux.BootUpdate./BootUpdate/acpi_rsdp_addr x) (verismo!boot.linux.BootUpdate./BootUpdate/?acpi_rsdp_addr x)) :pattern ((verismo!boot.linux.BootUpdate./BootUpdate/acpi_rsdp_addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.BootUpdate.) (uInv 64 (verismo!boot.linux.BootUpdate./BootUpdate/acpi_rsdp_addr (%Poly%verismo!boot.linux.BootUpdate. x)))) :pattern ((verismo!boot.linux.BootUpdate./BootUpdate/acpi_rsdp_addr (%Poly%verismo!boot.linux.BootUpdate. x)) (has_type x TYPE%verismo!boot.linux.BootUpdate.)))))
(assert (forall ((x verismo!boot.linux.BootUpdate.)) (! (= (verismo!boot.linux.BootUpdate./BootUpdate/cc_blob_addr x) (verismo!boot.linux.BootUpdate./BootUpdate/?cc_blob_addr x)) :pattern ((verismo!boot.linux.BootUpdate./BootUpdate/cc_blob_addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.BootUpdate.) (uInv 64 (verismo!boot.linux.BootUpdate./BootUpdate/cc_blob_addr (%Poly%verismo!boot.linux.BootUpdate. x)))) :pattern ((verismo!boot.linux.BootUpdate./BootUpdate/cc_blob_addr (%Poly%verismo!boot.linux.BootUpdate. x)) (has_type x TYPE%verismo!boot.linux.BootUpdate.)))))
(assert (forall ((x verismo!boot.linux.BootUpdate.)) (! (= (verismo!boot.linux.BootUpdate./BootUpdate/cmd_line_addr x) (verismo!boot.linux.BootUpdate./BootUpdate/?cmd_line_addr x)) :pattern ((verismo!boot.linux.BootUpdate./BootUpdate/cmd_line_addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.BootUpdate.) (uInv 64 (verismo!boot.linux.BootUpdate./BootUpdate/cmd_line_addr (%Poly%verismo!boot.linux.BootUpdate. x)))) :pattern ((verismo!boot.linux.BootUpdate./BootUpdate/cmd_line_addr (%Poly%verismo!boot.linux.BootUpdate. x)) (has_type x TYPE%verismo!boot.linux.BootUpdate.)))))
(assert (forall ((x verismo!boot.linux.BootUpdate.)) (! (= (verismo!boot.linux.BootUpdate./BootUpdate/cmdline_size x) (verismo!boot.linux.BootUpdate./BootUpdate/?cmdline_size x)) :pattern ((verismo!boot.linux.BootUpdate./BootUpdate/cmdline_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.BootUpdate.) (uInv 64 (verismo!boot.linux.BootUpdate./BootUpdate/cmdline_size (%Poly%verismo!boot.linux.BootUpdate. x)))) :pattern ((verismo!boot.linux.BootUpdate./BootUpdate/cmdline_size (%Poly%verismo!boot.linux.BootUpdate. x)) (has_type x TYPE%verismo!boot.linux.BootUpdate.)))))
(assert (forall ((x verismo!boot.linux.BootUpdate.)) (! (= (verismo!boot.linux.BootUpdate./BootUpdate/e820_entries x) (verismo!boot.linux.BootUpdate./BootUpdate/?e820_entries x)) :pattern ((verismo!boot.linux.BootUpdate./BootUpdate/e820_entries x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.BootUpdate.) (uInv 8 (verismo!boot.linux.BootUpdate./BootUpdate/e820_entries (%Poly%verismo!boot.linux.BootUpdate. x)))) :pattern ((verismo!boot.linux.BootUpdate./BootUpdate/e820_entries (%Poly%verismo!boot.linux.BootUpdate. x)) (has_type x TYPE%verismo!boot.linux.BootUpdate.)))))
(assert (forall ((x verismo!boot.linux.BootUpdate.)) (! (= (verismo!boot.linux.BootUpdate./BootUpdate/e820 x) (verismo!boot.linux.BootUpdate./BootUpdate/?e820 x)) :pattern ((verismo!boot.linux.BootUpdate./BootUpdate/e820 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.BootUpdate.) (has_type (verismo!boot.linux.BootUpdate./BootUpdate/e820 (%Poly%verismo!boot.linux.BootUpdate. x)) (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16)))) :pattern ((verismo!boot.linux.BootUpdate./BootUpdate/e820 (%Poly%verismo!boot.linux.BootUpdate. x)) (has_type x TYPE%verismo!boot.linux.BootUpdate.)))))
(assert (forall ((x verismo!boot.linux.BootUpdate.)) (! (= (verismo!boot.linux.BootUpdate./BootUpdate/hdr x) (verismo!boot.linux.BootUpdate./BootUpdate/?hdr x)) :pattern ((verismo!boot.linux.BootUpdate./BootUpdate/hdr x)))))
(assert (forall ((x verismo!boot.linux.SetBasicBootInfoParam.)) (! (= x (%Poly%verismo!boot.linux.SetBasicBootInfoParam. (Poly%verismo!boot.linux.SetBasicBootInfoParam. x))) :pattern ((Poly%verismo!boot.linux.SetBasicBootInfoParam. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.SetBasicBootInfoParam.) (= x (Poly%verismo!boot.linux.SetBasicBootInfoParam. (%Poly%verismo!boot.linux.SetBasicBootInfoParam. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.SetBasicBootInfoParam.)))))
(assert (forall ((_mparam! verismo!boot.monitor_params.MonitorParams.) (_vmpl! Int) (_richos_boot! verismo!boot.params.BootParams.) (_cc_blob_addr! Int) (_cmd_line_addr! Int)) (! (=> (and (has_type (Poly%verismo!boot.monitor_params.MonitorParams. _mparam!) TYPE%verismo!boot.monitor_params.MonitorParams.) (uInv 8 _vmpl!) (has_type (Poly%verismo!boot.params.BootParams. _richos_boot!) TYPE%verismo!boot.params.BootParams.) (uInv 64 _cc_blob_addr!) (uInv 64 _cmd_line_addr!)) (has_type (Poly%verismo!boot.linux.SetBasicBootInfoParam. (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam _mparam! _vmpl! _richos_boot! _cc_blob_addr! _cmd_line_addr!)) TYPE%verismo!boot.linux.SetBasicBootInfoParam.)) :pattern ((has_type (Poly%verismo!boot.linux.SetBasicBootInfoParam. (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam _mparam! _vmpl! _richos_boot! _cc_blob_addr! _cmd_line_addr!)) TYPE%verismo!boot.linux.SetBasicBootInfoParam.)))))
(assert (forall ((x verismo!boot.linux.SetBasicBootInfoParam.)) (! (= (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/mparam x) (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/?mparam x)) :pattern ((verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/mparam x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.SetBasicBootInfoParam.) (has_type (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/mparam (%Poly%verismo!boot.linux.SetBasicBootInfoParam. x))) TYPE%verismo!boot.monitor_params.MonitorParams.)) :pattern ((verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/mparam (%Poly%verismo!boot.linux.SetBasicBootInfoParam. x)) (has_type x TYPE%verismo!boot.linux.SetBasicBootInfoParam.)))))
(assert (forall ((x verismo!boot.linux.SetBasicBootInfoParam.)) (! (= (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/vmpl x) (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/?vmpl x)) :pattern ((verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/vmpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.SetBasicBootInfoParam.) (uInv 8 (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/vmpl (%Poly%verismo!boot.linux.SetBasicBootInfoParam. x)))) :pattern ((verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/vmpl (%Poly%verismo!boot.linux.SetBasicBootInfoParam. x)) (has_type x TYPE%verismo!boot.linux.SetBasicBootInfoParam.)))))
(assert (forall ((x verismo!boot.linux.SetBasicBootInfoParam.)) (! (= (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/richos_boot x) (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/?richos_boot x)) :pattern ((verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/richos_boot x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.SetBasicBootInfoParam.) (has_type (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/richos_boot (%Poly%verismo!boot.linux.SetBasicBootInfoParam. x))) TYPE%verismo!boot.params.BootParams.)) :pattern ((verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/richos_boot (%Poly%verismo!boot.linux.SetBasicBootInfoParam. x)) (has_type x TYPE%verismo!boot.linux.SetBasicBootInfoParam.)))))
(assert (forall ((x verismo!boot.linux.SetBasicBootInfoParam.)) (! (= (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/cc_blob_addr x) (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/?cc_blob_addr x)) :pattern ((verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/cc_blob_addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.SetBasicBootInfoParam.) (uInv 64 (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/cc_blob_addr (%Poly%verismo!boot.linux.SetBasicBootInfoParam. x)))) :pattern ((verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/cc_blob_addr (%Poly%verismo!boot.linux.SetBasicBootInfoParam. x)) (has_type x TYPE%verismo!boot.linux.SetBasicBootInfoParam.)))))
(assert (forall ((x verismo!boot.linux.SetBasicBootInfoParam.)) (! (= (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/cmd_line_addr x) (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/?cmd_line_addr x)) :pattern ((verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/cmd_line_addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.SetBasicBootInfoParam.) (uInv 64 (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/cmd_line_addr (%Poly%verismo!boot.linux.SetBasicBootInfoParam. x)))) :pattern ((verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/cmd_line_addr (%Poly%verismo!boot.linux.SetBasicBootInfoParam. x)) (has_type x TYPE%verismo!boot.linux.SetBasicBootInfoParam.)))))
(assert (forall ((x verismo!boot.linux.SetSnpBootInfoParam.)) (! (= x (%Poly%verismo!boot.linux.SetSnpBootInfoParam. (Poly%verismo!boot.linux.SetSnpBootInfoParam. x))) :pattern ((Poly%verismo!boot.linux.SetSnpBootInfoParam. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.SetSnpBootInfoParam.) (= x (Poly%verismo!boot.linux.SetSnpBootInfoParam. (%Poly%verismo!boot.linux.SetSnpBootInfoParam. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.SetSnpBootInfoParam.)))))
(assert (forall ((_vmpl! Int) (_secret_addr! Int) (_master_secret! verismo!security.secret.SnpSecretsPageLayout.) (_cpuid_addr! Int) (_early_shared! Poly) (_cpuid! verismo!snp.cpuid.SnpCpuidTable.)) (! (=> (and (uInv 8 _vmpl!) (uInv SZ _secret_addr!) (uInv SZ _cpuid_addr!) (has_type _early_shared! (TYPE%verismo!vbox.vbox.VBox. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4096)))) (has_type (Poly%verismo!snp.cpuid.SnpCpuidTable. _cpuid!) TYPE%verismo!snp.cpuid.SnpCpuidTable.)) (has_type (Poly%verismo!boot.linux.SetSnpBootInfoParam. (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam _vmpl! _secret_addr! _master_secret! _cpuid_addr! _early_shared! _cpuid!)) TYPE%verismo!boot.linux.SetSnpBootInfoParam.)) :pattern ((has_type (Poly%verismo!boot.linux.SetSnpBootInfoParam. (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam _vmpl! _secret_addr! _master_secret! _cpuid_addr! _early_shared! _cpuid!)) TYPE%verismo!boot.linux.SetSnpBootInfoParam.)))))
(assert (forall ((x verismo!boot.linux.SetSnpBootInfoParam.)) (! (= (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/vmpl x) (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/?vmpl x)) :pattern ((verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/vmpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.SetSnpBootInfoParam.) (uInv 8 (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/vmpl (%Poly%verismo!boot.linux.SetSnpBootInfoParam. x)))) :pattern ((verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/vmpl (%Poly%verismo!boot.linux.SetSnpBootInfoParam. x)) (has_type x TYPE%verismo!boot.linux.SetSnpBootInfoParam.)))))
(assert (forall ((x verismo!boot.linux.SetSnpBootInfoParam.)) (! (= (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/secret_addr x) (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/?secret_addr x)) :pattern ((verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/secret_addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.SetSnpBootInfoParam.) (uInv SZ (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/secret_addr (%Poly%verismo!boot.linux.SetSnpBootInfoParam. x)))) :pattern ((verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/secret_addr (%Poly%verismo!boot.linux.SetSnpBootInfoParam. x)) (has_type x TYPE%verismo!boot.linux.SetSnpBootInfoParam.)))))
(assert (forall ((x verismo!boot.linux.SetSnpBootInfoParam.)) (! (= (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/master_secret x) (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/?master_secret x)) :pattern ((verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/master_secret x)))))
(assert (forall ((x verismo!boot.linux.SetSnpBootInfoParam.)) (! (= (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/cpuid_addr x) (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/?cpuid_addr x)) :pattern ((verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/cpuid_addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.SetSnpBootInfoParam.) (uInv SZ (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/cpuid_addr (%Poly%verismo!boot.linux.SetSnpBootInfoParam. x)))) :pattern ((verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/cpuid_addr (%Poly%verismo!boot.linux.SetSnpBootInfoParam. x)) (has_type x TYPE%verismo!boot.linux.SetSnpBootInfoParam.)))))
(assert (forall ((x verismo!boot.linux.SetSnpBootInfoParam.)) (! (= (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/early_shared x) (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/?early_shared x)) :pattern ((verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/early_shared x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.SetSnpBootInfoParam.) (has_type (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/early_shared (%Poly%verismo!boot.linux.SetSnpBootInfoParam. x)) (TYPE%verismo!vbox.vbox.VBox. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4096))))) :pattern ((verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/early_shared (%Poly%verismo!boot.linux.SetSnpBootInfoParam. x)) (has_type x TYPE%verismo!boot.linux.SetSnpBootInfoParam.)))))
(assert (forall ((x verismo!boot.linux.SetSnpBootInfoParam.)) (! (= (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/cpuid x) (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/?cpuid x)) :pattern ((verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/cpuid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.SetSnpBootInfoParam.) (has_type (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/cpuid (%Poly%verismo!boot.linux.SetSnpBootInfoParam. x))) TYPE%verismo!snp.cpuid.SnpCpuidTable.)) :pattern ((verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/cpuid (%Poly%verismo!boot.linux.SetSnpBootInfoParam. x)) (has_type x TYPE%verismo!boot.linux.SetSnpBootInfoParam.)))))
(assert (forall ((x verismo!boot.linux.SetMemoryBootInfoParam.)) (! (= x (%Poly%verismo!boot.linux.SetMemoryBootInfoParam. (Poly%verismo!boot.linux.SetMemoryBootInfoParam. x))) :pattern ((Poly%verismo!boot.linux.SetMemoryBootInfoParam. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.SetMemoryBootInfoParam.) (= x (Poly%verismo!boot.linux.SetMemoryBootInfoParam. (%Poly%verismo!boot.linux.SetMemoryBootInfoParam. x)))) :pattern ((has_type x TYPE%verismo!boot.linux.SetMemoryBootInfoParam.)))))
(assert (forall ((_vmpl! Int)) (! (=> (uInv 8 _vmpl!) (has_type (Poly%verismo!boot.linux.SetMemoryBootInfoParam. (verismo!boot.linux.SetMemoryBootInfoParam./SetMemoryBootInfoParam _vmpl!)) TYPE%verismo!boot.linux.SetMemoryBootInfoParam.)) :pattern ((has_type (Poly%verismo!boot.linux.SetMemoryBootInfoParam. (verismo!boot.linux.SetMemoryBootInfoParam./SetMemoryBootInfoParam _vmpl!)) TYPE%verismo!boot.linux.SetMemoryBootInfoParam.)))))
(assert (forall ((x verismo!boot.linux.SetMemoryBootInfoParam.)) (! (= (verismo!boot.linux.SetMemoryBootInfoParam./SetMemoryBootInfoParam/vmpl x) (verismo!boot.linux.SetMemoryBootInfoParam./SetMemoryBootInfoParam/?vmpl x)) :pattern ((verismo!boot.linux.SetMemoryBootInfoParam./SetMemoryBootInfoParam/vmpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.linux.SetMemoryBootInfoParam.) (uInv 8 (verismo!boot.linux.SetMemoryBootInfoParam./SetMemoryBootInfoParam/vmpl (%Poly%verismo!boot.linux.SetMemoryBootInfoParam. x)))) :pattern ((verismo!boot.linux.SetMemoryBootInfoParam./SetMemoryBootInfoParam/vmpl (%Poly%verismo!boot.linux.SetMemoryBootInfoParam. x)) (has_type x TYPE%verismo!boot.linux.SetMemoryBootInfoParam.)))))
(assert (forall ((x verismo!boot.monitor_params.MonitorParams.)) (! (= x (%Poly%verismo!boot.monitor_params.MonitorParams. (Poly%verismo!boot.monitor_params.MonitorParams. x))) :pattern ((Poly%verismo!boot.monitor_params.MonitorParams. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.monitor_params.MonitorParams.) (= x (Poly%verismo!boot.monitor_params.MonitorParams. (%Poly%verismo!boot.monitor_params.MonitorParams. x)))) :pattern ((has_type x TYPE%verismo!boot.monitor_params.MonitorParams.)))))
(assert (forall ((_cpu_count! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_cpuid_page! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_secret_page! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_hv_param! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_validated_entries! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_validated_e820! Poly) (_acpi! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_acpi_size! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_richos_start! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_richos_size! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_richos_cmdline! Poly) (_richos_cmdline_len! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)) (! (=> (and (has_type _validated_e820! (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16))) (has_type _richos_cmdline! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)))) (has_type (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.MonitorParams./MonitorParams _cpu_count! _cpuid_page! _secret_page! _hv_param! _validated_entries! _validated_e820! _acpi! _acpi_size! _richos_start! _richos_size! _richos_cmdline! _richos_cmdline_len!)) TYPE%verismo!boot.monitor_params.MonitorParams.)) :pattern ((has_type (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.MonitorParams./MonitorParams _cpu_count! _cpuid_page! _secret_page! _hv_param! _validated_entries! _validated_e820! _acpi! _acpi_size! _richos_start! _richos_size! _richos_cmdline! _richos_cmdline_len!)) TYPE%verismo!boot.monitor_params.MonitorParams.)))))
(assert (forall ((x verismo!boot.monitor_params.MonitorParams.)) (! (= (verismo!boot.monitor_params.MonitorParams./MonitorParams/cpu_count x) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?cpu_count x)) :pattern ((verismo!boot.monitor_params.MonitorParams./MonitorParams/cpu_count x)))))
(assert (forall ((x verismo!boot.monitor_params.MonitorParams.)) (! (= (verismo!boot.monitor_params.MonitorParams./MonitorParams/cpuid_page x) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?cpuid_page x)) :pattern ((verismo!boot.monitor_params.MonitorParams./MonitorParams/cpuid_page x)))))
(assert (forall ((x verismo!boot.monitor_params.MonitorParams.)) (! (= (verismo!boot.monitor_params.MonitorParams./MonitorParams/secret_page x) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?secret_page x)) :pattern ((verismo!boot.monitor_params.MonitorParams./MonitorParams/secret_page x)))))
(assert (forall ((x verismo!boot.monitor_params.MonitorParams.)) (! (= (verismo!boot.monitor_params.MonitorParams./MonitorParams/hv_param x) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?hv_param x)) :pattern ((verismo!boot.monitor_params.MonitorParams./MonitorParams/hv_param x)))))
(assert (forall ((x verismo!boot.monitor_params.MonitorParams.)) (! (= (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_entries x) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?validated_entries x)) :pattern ((verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_entries x)))))
(assert (forall ((x verismo!boot.monitor_params.MonitorParams.)) (! (= (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_e820 x) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?validated_e820 x)) :pattern ((verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_e820 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.monitor_params.MonitorParams.) (has_type (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_e820 (%Poly%verismo!boot.monitor_params.MonitorParams. x)) (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16)))) :pattern ((verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_e820 (%Poly%verismo!boot.monitor_params.MonitorParams. x)) (has_type x TYPE%verismo!boot.monitor_params.MonitorParams.)))))
(assert (forall ((x verismo!boot.monitor_params.MonitorParams.)) (! (= (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi x) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?acpi x)) :pattern ((verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi x)))))
(assert (forall ((x verismo!boot.monitor_params.MonitorParams.)) (! (= (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi_size x) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?acpi_size x)) :pattern ((verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi_size x)))))
(assert (forall ((x verismo!boot.monitor_params.MonitorParams.)) (! (= (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_start x) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?richos_start x)) :pattern ((verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_start x)))))
(assert (forall ((x verismo!boot.monitor_params.MonitorParams.)) (! (= (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_size x) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?richos_size x)) :pattern ((verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_size x)))))
(assert (forall ((x verismo!boot.monitor_params.MonitorParams.)) (! (= (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline x) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?richos_cmdline x)) :pattern ((verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.monitor_params.MonitorParams.) (has_type (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline (%Poly%verismo!boot.monitor_params.MonitorParams. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)))) :pattern ((verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline (%Poly%verismo!boot.monitor_params.MonitorParams. x)) (has_type x TYPE%verismo!boot.monitor_params.MonitorParams.)))))
(assert (forall ((x verismo!boot.monitor_params.MonitorParams.)) (! (= (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline_len x) (verismo!boot.monitor_params.MonitorParams./MonitorParams/?richos_cmdline_len x)) :pattern ((verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline_len x)))))
(assert (forall ((x verismo!boot.params.E820Entry.)) (! (= x (%Poly%verismo!boot.params.E820Entry. (Poly%verismo!boot.params.E820Entry. x))) :pattern ((Poly%verismo!boot.params.E820Entry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.E820Entry.) (= x (Poly%verismo!boot.params.E820Entry. (%Poly%verismo!boot.params.E820Entry. x)))) :pattern ((has_type x TYPE%verismo!boot.params.E820Entry.)))))
(assert (forall ((x verismo!boot.params.E820Entry.)) (! (= (verismo!boot.params.E820Entry./E820Entry/addr x) (verismo!boot.params.E820Entry./E820Entry/?addr x)) :pattern ((verismo!boot.params.E820Entry./E820Entry/addr x)))))
(assert (forall ((x verismo!boot.params.E820Entry.)) (! (= (verismo!boot.params.E820Entry./E820Entry/size x) (verismo!boot.params.E820Entry./E820Entry/?size x)) :pattern ((verismo!boot.params.E820Entry./E820Entry/size x)))))
(assert (forall ((x verismo!boot.params.E820Entry.)) (! (= (verismo!boot.params.E820Entry./E820Entry/memty x) (verismo!boot.params.E820Entry./E820Entry/?memty x)) :pattern ((verismo!boot.params.E820Entry./E820Entry/memty x)))))
(assert (forall ((x verismo!boot.params.E820Entry.)) (! (has_type (Poly%verismo!boot.params.E820Entry. x) TYPE%verismo!boot.params.E820Entry.) :pattern ((has_type (Poly%verismo!boot.params.E820Entry. x) TYPE%verismo!boot.params.E820Entry.)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= x (%Poly%verismo!boot.params.SetupHeader. (Poly%verismo!boot.params.SetupHeader. x))) :pattern ((Poly%verismo!boot.params.SetupHeader. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.SetupHeader.) (= x (Poly%verismo!boot.params.SetupHeader. (%Poly%verismo!boot.params.SetupHeader. x)))) :pattern ((has_type x TYPE%verismo!boot.params.SetupHeader.)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/setup_sects x) (verismo!boot.params.SetupHeader./SetupHeader/?setup_sects x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/setup_sects x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/root_flags x) (verismo!boot.params.SetupHeader./SetupHeader/?root_flags x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/root_flags x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/syssize x) (verismo!boot.params.SetupHeader./SetupHeader/?syssize x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/syssize x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/ram_size x) (verismo!boot.params.SetupHeader./SetupHeader/?ram_size x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/ram_size x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/vid_mode x) (verismo!boot.params.SetupHeader./SetupHeader/?vid_mode x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/vid_mode x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/root_dev x) (verismo!boot.params.SetupHeader./SetupHeader/?root_dev x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/root_dev x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/boot_flag x) (verismo!boot.params.SetupHeader./SetupHeader/?boot_flag x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/boot_flag x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/jump x) (verismo!boot.params.SetupHeader./SetupHeader/?jump x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/jump x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/header x) (verismo!boot.params.SetupHeader./SetupHeader/?header x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/header x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/version x) (verismo!boot.params.SetupHeader./SetupHeader/?version x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/version x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/realmode_swtch x) (verismo!boot.params.SetupHeader./SetupHeader/?realmode_swtch x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/realmode_swtch x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/start_sys_seg x) (verismo!boot.params.SetupHeader./SetupHeader/?start_sys_seg x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/start_sys_seg x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/kernel_version x) (verismo!boot.params.SetupHeader./SetupHeader/?kernel_version x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/kernel_version x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/type_of_loader x) (verismo!boot.params.SetupHeader./SetupHeader/?type_of_loader x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/type_of_loader x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/loadflags x) (verismo!boot.params.SetupHeader./SetupHeader/?loadflags x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/loadflags x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/setup_move_size x) (verismo!boot.params.SetupHeader./SetupHeader/?setup_move_size x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/setup_move_size x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/code32_start x) (verismo!boot.params.SetupHeader./SetupHeader/?code32_start x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/code32_start x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/ramdisk_image x) (verismo!boot.params.SetupHeader./SetupHeader/?ramdisk_image x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/ramdisk_image x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/ramdisk_size x) (verismo!boot.params.SetupHeader./SetupHeader/?ramdisk_size x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/ramdisk_size x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/bootsect_kludge x) (verismo!boot.params.SetupHeader./SetupHeader/?bootsect_kludge x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/bootsect_kludge x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/heap_end_ptr x) (verismo!boot.params.SetupHeader./SetupHeader/?heap_end_ptr x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/heap_end_ptr x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/ext_loader_ver x) (verismo!boot.params.SetupHeader./SetupHeader/?ext_loader_ver x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/ext_loader_ver x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/ext_loader_type x) (verismo!boot.params.SetupHeader./SetupHeader/?ext_loader_type x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/ext_loader_type x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/cmd_line_ptr x) (verismo!boot.params.SetupHeader./SetupHeader/?cmd_line_ptr x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/cmd_line_ptr x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/initrd_addr_max x) (verismo!boot.params.SetupHeader./SetupHeader/?initrd_addr_max x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/initrd_addr_max x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/kernel_alignment x) (verismo!boot.params.SetupHeader./SetupHeader/?kernel_alignment x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/kernel_alignment x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/relocatable_kernel x) (verismo!boot.params.SetupHeader./SetupHeader/?relocatable_kernel x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/relocatable_kernel x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/min_alignment x) (verismo!boot.params.SetupHeader./SetupHeader/?min_alignment x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/min_alignment x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/xloadflags x) (verismo!boot.params.SetupHeader./SetupHeader/?xloadflags x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/xloadflags x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/cmdline_size x) (verismo!boot.params.SetupHeader./SetupHeader/?cmdline_size x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/cmdline_size x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch x) (verismo!boot.params.SetupHeader./SetupHeader/?hardware_subarch x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch_data x) (verismo!boot.params.SetupHeader./SetupHeader/?hardware_subarch_data x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch_data x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/payload_offset x) (verismo!boot.params.SetupHeader./SetupHeader/?payload_offset x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/payload_offset x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/payload_length x) (verismo!boot.params.SetupHeader./SetupHeader/?payload_length x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/payload_length x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/setup_data x) (verismo!boot.params.SetupHeader./SetupHeader/?setup_data x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/setup_data x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/pref_address x) (verismo!boot.params.SetupHeader./SetupHeader/?pref_address x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/pref_address x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/init_size x) (verismo!boot.params.SetupHeader./SetupHeader/?init_size x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/init_size x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/handover_offset x) (verismo!boot.params.SetupHeader./SetupHeader/?handover_offset x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/handover_offset x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (= (verismo!boot.params.SetupHeader./SetupHeader/kernel_info_offset x) (verismo!boot.params.SetupHeader./SetupHeader/?kernel_info_offset x)) :pattern ((verismo!boot.params.SetupHeader./SetupHeader/kernel_info_offset x)))))
(assert (forall ((x verismo!boot.params.SetupHeader.)) (! (has_type (Poly%verismo!boot.params.SetupHeader. x) TYPE%verismo!boot.params.SetupHeader.) :pattern ((has_type (Poly%verismo!boot.params.SetupHeader. x) TYPE%verismo!boot.params.SetupHeader.)))))
(assert (forall ((x verismo!boot.params.Copye820_entries.)) (! (= x (%Poly%verismo!boot.params.Copye820_entries. (Poly%verismo!boot.params.Copye820_entries. x))) :pattern ((Poly%verismo!boot.params.Copye820_entries. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.Copye820_entries.) (= x (Poly%verismo!boot.params.Copye820_entries. (%Poly%verismo!boot.params.Copye820_entries. x)))) :pattern ((has_type x TYPE%verismo!boot.params.Copye820_entries.)))))
(assert (forall ((x verismo!boot.params.Copye820_entries.)) (! (has_type (Poly%verismo!boot.params.Copye820_entries. x) TYPE%verismo!boot.params.Copye820_entries.) :pattern ((has_type (Poly%verismo!boot.params.Copye820_entries. x) TYPE%verismo!boot.params.Copye820_entries.)))))
(assert (forall ((x verismo!boot.params.Updatee820_entries.)) (! (= x (%Poly%verismo!boot.params.Updatee820_entries. (Poly%verismo!boot.params.Updatee820_entries. x))) :pattern ((Poly%verismo!boot.params.Updatee820_entries. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.Updatee820_entries.) (= x (Poly%verismo!boot.params.Updatee820_entries. (%Poly%verismo!boot.params.Updatee820_entries. x)))) :pattern ((has_type x TYPE%verismo!boot.params.Updatee820_entries.)))))
(assert (forall ((x verismo!boot.params.Updatee820_entries.)) (! (= (verismo!boot.params.Updatee820_entries./Updatee820_entries/val x) (verismo!boot.params.Updatee820_entries./Updatee820_entries/?val x)) :pattern ((verismo!boot.params.Updatee820_entries./Updatee820_entries/val x)))))
(assert (forall ((x verismo!boot.params.Updatee820_entries.)) (! (has_type (Poly%verismo!boot.params.Updatee820_entries. x) TYPE%verismo!boot.params.Updatee820_entries.) :pattern ((has_type (Poly%verismo!boot.params.Updatee820_entries. x) TYPE%verismo!boot.params.Updatee820_entries.)))))
(assert (forall ((x verismo!boot.params.Copye820.)) (! (= x (%Poly%verismo!boot.params.Copye820. (Poly%verismo!boot.params.Copye820. x))) :pattern ((Poly%verismo!boot.params.Copye820. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.Copye820.) (= x (Poly%verismo!boot.params.Copye820. (%Poly%verismo!boot.params.Copye820. x)))) :pattern ((has_type x TYPE%verismo!boot.params.Copye820.)))))
(assert (forall ((x verismo!boot.params.Copye820.)) (! (has_type (Poly%verismo!boot.params.Copye820. x) TYPE%verismo!boot.params.Copye820.) :pattern ((has_type (Poly%verismo!boot.params.Copye820. x) TYPE%verismo!boot.params.Copye820.)))))
(assert (forall ((x verismo!boot.params.Updatee820.)) (! (= x (%Poly%verismo!boot.params.Updatee820. (Poly%verismo!boot.params.Updatee820. x))) :pattern ((Poly%verismo!boot.params.Updatee820. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.Updatee820.) (= x (Poly%verismo!boot.params.Updatee820. (%Poly%verismo!boot.params.Updatee820. x)))) :pattern ((has_type x TYPE%verismo!boot.params.Updatee820.)))))
(assert (forall ((_val! Poly)) (! (=> (has_type _val! (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128))) (has_type (Poly%verismo!boot.params.Updatee820. (verismo!boot.params.Updatee820./Updatee820 _val!)) TYPE%verismo!boot.params.Updatee820.)) :pattern ((has_type (Poly%verismo!boot.params.Updatee820. (verismo!boot.params.Updatee820./Updatee820 _val!)) TYPE%verismo!boot.params.Updatee820.)))))
(assert (forall ((x verismo!boot.params.Updatee820.)) (! (= (verismo!boot.params.Updatee820./Updatee820/val x) (verismo!boot.params.Updatee820./Updatee820/?val x)) :pattern ((verismo!boot.params.Updatee820./Updatee820/val x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.Updatee820.) (has_type (verismo!boot.params.Updatee820./Updatee820/val (%Poly%verismo!boot.params.Updatee820. x)) (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128)))) :pattern ((verismo!boot.params.Updatee820./Updatee820/val (%Poly%verismo!boot.params.Updatee820. x)) (has_type x TYPE%verismo!boot.params.Updatee820.)))))
(assert (forall ((x verismo!boot.params.BootParams.)) (! (= x (%Poly%verismo!boot.params.BootParams. (Poly%verismo!boot.params.BootParams. x))) :pattern ((Poly%verismo!boot.params.BootParams. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.BootParams.) (= x (Poly%verismo!boot.params.BootParams. (%Poly%verismo!boot.params.BootParams. x)))) :pattern ((has_type x TYPE%verismo!boot.params.BootParams.)))))
(assert (forall ((__pad0! Poly) (_acpi_rsdp_addr! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (__pad1! Poly) (__ext_cmd_line_ptr! verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (__pad2_0! Poly) (_cc_blob_addr! verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (__pad2_1! Poly) (_e820_entries! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (_reserved_4! Poly) (_hdr! verismo!boot.params.SetupHeader.) (_reserved_5! Poly) (_e820! Poly) (_reserved_6! Poly)) (! (=> (and (has_type __pad0! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type __pad1! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 80))) (has_type __pad2_0! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type __pad2_1! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 168))) (has_type _reserved_4! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8))) (has_type _reserved_5! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 100))) (has_type _e820! (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128))) (has_type _reserved_6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 816)))) (has_type (Poly%verismo!boot.params.BootParams. (verismo!boot.params.BootParams./BootParams __pad0! _acpi_rsdp_addr! __pad1! __ext_cmd_line_ptr! __pad2_0! _cc_blob_addr! __pad2_1! _e820_entries! _reserved_4! _hdr! _reserved_5! _e820! _reserved_6!)) TYPE%verismo!boot.params.BootParams.)) :pattern ((has_type (Poly%verismo!boot.params.BootParams. (verismo!boot.params.BootParams./BootParams __pad0! _acpi_rsdp_addr! __pad1! __ext_cmd_line_ptr! __pad2_0! _cc_blob_addr! __pad2_1! _e820_entries! _reserved_4! _hdr! _reserved_5! _e820! _reserved_6!)) TYPE%verismo!boot.params.BootParams.)))))
(assert (forall ((x verismo!boot.params.BootParams.)) (! (= (verismo!boot.params.BootParams./BootParams/_pad0 x) (verismo!boot.params.BootParams./BootParams/?_pad0 x)) :pattern ((verismo!boot.params.BootParams./BootParams/_pad0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.BootParams./BootParams/_pad0 (%Poly%verismo!boot.params.BootParams. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)))) :pattern ((verismo!boot.params.BootParams./BootParams/_pad0 (%Poly%verismo!boot.params.BootParams. x)) (has_type x TYPE%verismo!boot.params.BootParams.)))))
(assert (forall ((x verismo!boot.params.BootParams.)) (! (= (verismo!boot.params.BootParams./BootParams/acpi_rsdp_addr x) (verismo!boot.params.BootParams./BootParams/?acpi_rsdp_addr x)) :pattern ((verismo!boot.params.BootParams./BootParams/acpi_rsdp_addr x)))))
(assert (forall ((x verismo!boot.params.BootParams.)) (! (= (verismo!boot.params.BootParams./BootParams/_pad1 x) (verismo!boot.params.BootParams./BootParams/?_pad1 x)) :pattern ((verismo!boot.params.BootParams./BootParams/_pad1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.BootParams./BootParams/_pad1 (%Poly%verismo!boot.params.BootParams. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 80)))) :pattern ((verismo!boot.params.BootParams./BootParams/_pad1 (%Poly%verismo!boot.params.BootParams. x)) (has_type x TYPE%verismo!boot.params.BootParams.)))))
(assert (forall ((x verismo!boot.params.BootParams.)) (! (= (verismo!boot.params.BootParams./BootParams/_ext_cmd_line_ptr x) (verismo!boot.params.BootParams./BootParams/?_ext_cmd_line_ptr x)) :pattern ((verismo!boot.params.BootParams./BootParams/_ext_cmd_line_ptr x)))))
(assert (forall ((x verismo!boot.params.BootParams.)) (! (= (verismo!boot.params.BootParams./BootParams/_pad2_0 x) (verismo!boot.params.BootParams./BootParams/?_pad2_0 x)) :pattern ((verismo!boot.params.BootParams./BootParams/_pad2_0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.BootParams./BootParams/_pad2_0 (%Poly%verismo!boot.params.BootParams. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)))) :pattern ((verismo!boot.params.BootParams./BootParams/_pad2_0 (%Poly%verismo!boot.params.BootParams. x)) (has_type x TYPE%verismo!boot.params.BootParams.)))))
(assert (forall ((x verismo!boot.params.BootParams.)) (! (= (verismo!boot.params.BootParams./BootParams/cc_blob_addr x) (verismo!boot.params.BootParams./BootParams/?cc_blob_addr x)) :pattern ((verismo!boot.params.BootParams./BootParams/cc_blob_addr x)))))
(assert (forall ((x verismo!boot.params.BootParams.)) (! (= (verismo!boot.params.BootParams./BootParams/_pad2_1 x) (verismo!boot.params.BootParams./BootParams/?_pad2_1 x)) :pattern ((verismo!boot.params.BootParams./BootParams/_pad2_1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.BootParams./BootParams/_pad2_1 (%Poly%verismo!boot.params.BootParams. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 168)))) :pattern ((verismo!boot.params.BootParams./BootParams/_pad2_1 (%Poly%verismo!boot.params.BootParams. x)) (has_type x TYPE%verismo!boot.params.BootParams.)))))
(assert (forall ((x verismo!boot.params.BootParams.)) (! (= (verismo!boot.params.BootParams./BootParams/e820_entries x) (verismo!boot.params.BootParams./BootParams/?e820_entries x)) :pattern ((verismo!boot.params.BootParams./BootParams/e820_entries x)))))
(assert (forall ((x verismo!boot.params.BootParams.)) (! (= (verismo!boot.params.BootParams./BootParams/reserved_4 x) (verismo!boot.params.BootParams./BootParams/?reserved_4 x)) :pattern ((verismo!boot.params.BootParams./BootParams/reserved_4 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.BootParams./BootParams/reserved_4 (%Poly%verismo!boot.params.BootParams. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)))) :pattern ((verismo!boot.params.BootParams./BootParams/reserved_4 (%Poly%verismo!boot.params.BootParams. x)) (has_type x TYPE%verismo!boot.params.BootParams.)))))
(assert (forall ((x verismo!boot.params.BootParams.)) (! (= (verismo!boot.params.BootParams./BootParams/hdr x) (verismo!boot.params.BootParams./BootParams/?hdr x)) :pattern ((verismo!boot.params.BootParams./BootParams/hdr x)))))
(assert (forall ((x verismo!boot.params.BootParams.)) (! (= (verismo!boot.params.BootParams./BootParams/reserved_5 x) (verismo!boot.params.BootParams./BootParams/?reserved_5 x)) :pattern ((verismo!boot.params.BootParams./BootParams/reserved_5 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.BootParams./BootParams/reserved_5 (%Poly%verismo!boot.params.BootParams. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 100)))) :pattern ((verismo!boot.params.BootParams./BootParams/reserved_5 (%Poly%verismo!boot.params.BootParams. x)) (has_type x TYPE%verismo!boot.params.BootParams.)))))
(assert (forall ((x verismo!boot.params.BootParams.)) (! (= (verismo!boot.params.BootParams./BootParams/e820 x) (verismo!boot.params.BootParams./BootParams/?e820 x)) :pattern ((verismo!boot.params.BootParams./BootParams/e820 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. x)) (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128)))) :pattern ((verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. x)) (has_type x TYPE%verismo!boot.params.BootParams.)))))
(assert (forall ((x verismo!boot.params.BootParams.)) (! (= (verismo!boot.params.BootParams./BootParams/reserved_6 x) (verismo!boot.params.BootParams./BootParams/?reserved_6 x)) :pattern ((verismo!boot.params.BootParams./BootParams/reserved_6 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.BootParams./BootParams/reserved_6 (%Poly%verismo!boot.params.BootParams. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 816)))) :pattern ((verismo!boot.params.BootParams./BootParams/reserved_6 (%Poly%verismo!boot.params.BootParams. x)) (has_type x TYPE%verismo!boot.params.BootParams.)))))
(assert (forall ((x verismo!debug.interface.Console.)) (! (= x (%Poly%verismo!debug.interface.Console. (Poly%verismo!debug.interface.Console. x))) :pattern ((Poly%verismo!debug.interface.Console. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!debug.interface.Console.) (= x (Poly%verismo!debug.interface.Console. (%Poly%verismo!debug.interface.Console. x)))) :pattern ((has_type x TYPE%verismo!debug.interface.Console.)))))
(assert (forall ((x verismo!debug.interface.Console.)) (! (has_type (Poly%verismo!debug.interface.Console. x) TYPE%verismo!debug.interface.Console.) :pattern ((has_type (Poly%verismo!debug.interface.Console. x) TYPE%verismo!debug.interface.Console.)))))
(assert (forall ((x verismo!lock.spin_perm_s.InvRawFn.)) (! (= x (%Poly%verismo!lock.spin_perm_s.InvRawFn. (Poly%verismo!lock.spin_perm_s.InvRawFn. x))) :pattern ((Poly%verismo!lock.spin_perm_s.InvRawFn. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!lock.spin_perm_s.InvRawFn.) (= x (Poly%verismo!lock.spin_perm_s.InvRawFn. (%Poly%verismo!lock.spin_perm_s.InvRawFn. x)))) :pattern ((has_type x TYPE%verismo!lock.spin_perm_s.InvRawFn.)))))
(assert (forall ((_invfn! %%Function%%)) (! (=> (has_type (Poly%fun%1. _invfn!) (TYPE%fun%1. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ BOOL)) (has_type (Poly%verismo!lock.spin_perm_s.InvRawFn. (verismo!lock.spin_perm_s.InvRawFn./InvRawFn _invfn!)) TYPE%verismo!lock.spin_perm_s.InvRawFn.)) :pattern ((has_type (Poly%verismo!lock.spin_perm_s.InvRawFn. (verismo!lock.spin_perm_s.InvRawFn./InvRawFn _invfn!)) TYPE%verismo!lock.spin_perm_s.InvRawFn.)))))
(assert (forall ((x verismo!lock.spin_perm_s.InvRawFn.)) (! (= (verismo!lock.spin_perm_s.InvRawFn./InvRawFn/invfn x) (verismo!lock.spin_perm_s.InvRawFn./InvRawFn/?invfn x)) :pattern ((verismo!lock.spin_perm_s.InvRawFn./InvRawFn/invfn x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!lock.spin_perm_s.InvRawFn.) (has_type (Poly%fun%1. (verismo!lock.spin_perm_s.InvRawFn./InvRawFn/invfn (%Poly%verismo!lock.spin_perm_s.InvRawFn. x))) (TYPE%fun%1. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ BOOL))) :pattern ((verismo!lock.spin_perm_s.InvRawFn./InvRawFn/invfn (%Poly%verismo!lock.spin_perm_s.InvRawFn. x)) (has_type x TYPE%verismo!lock.spin_perm_s.InvRawFn.)))))
(assert (forall ((x verismo!lock.spin_perm_s.LockPermToRaw.)) (! (= x (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. x))) :pattern ((Poly%verismo!lock.spin_perm_s.LockPermToRaw. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!lock.spin_perm_s.LockPermToRaw.) (= x (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. x)))) :pattern ((has_type x TYPE%verismo!lock.spin_perm_s.LockPermToRaw.)))))
(assert (forall ((_locked! Bool) (_cpu! Int) (_points_to! verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (_invfn! verismo!lock.spin_perm_s.InvRawFn.)) (! (=> (and (<= 0 _cpu!) (has_type (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. _points_to!) TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (has_type (Poly%verismo!lock.spin_perm_s.InvRawFn. _invfn!) TYPE%verismo!lock.spin_perm_s.InvRawFn.)) (has_type (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw _locked! _cpu! _points_to! _invfn!)) TYPE%verismo!lock.spin_perm_s.LockPermToRaw.)) :pattern ((has_type (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw _locked! _cpu! _points_to! _invfn!)) TYPE%verismo!lock.spin_perm_s.LockPermToRaw.)))))
(assert (forall ((x verismo!lock.spin_perm_s.LockPermToRaw.)) (! (= (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/locked x) (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/?locked x)) :pattern ((verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/locked x)))))
(assert (forall ((x verismo!lock.spin_perm_s.LockPermToRaw.)) (! (= (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/cpu x) (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/?cpu x)) :pattern ((verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/cpu x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!lock.spin_perm_s.LockPermToRaw.) (<= 0 (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/cpu (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. x)))) :pattern ((verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/cpu (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. x)) (has_type x TYPE%verismo!lock.spin_perm_s.LockPermToRaw.)))))
(assert (forall ((x verismo!lock.spin_perm_s.LockPermToRaw.)) (! (= (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to x) (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/?points_to x)) :pattern ((verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!lock.spin_perm_s.LockPermToRaw.) (has_type (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. x))) TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) :pattern ((verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. x)) (has_type x TYPE%verismo!lock.spin_perm_s.LockPermToRaw.)))))
(assert (forall ((x verismo!lock.spin_perm_s.LockPermToRaw.)) (! (= (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn x) (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/?invfn x)) :pattern ((verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!lock.spin_perm_s.LockPermToRaw.) (has_type (Poly%verismo!lock.spin_perm_s.InvRawFn. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. x))) TYPE%verismo!lock.spin_perm_s.InvRawFn.)) :pattern ((verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. x)) (has_type x TYPE%verismo!lock.spin_perm_s.LockPermToRaw.)))))
(assert (forall ((x verismo!mem.rawmem_s.SnpMemCoreConsole.)) (! (= x (%Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. (Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. x))) :pattern ((Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!mem.rawmem_s.SnpMemCoreConsole.) (= x (Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. (%Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. x)))) :pattern ((has_type x TYPE%verismo!mem.rawmem_s.SnpMemCoreConsole.)))))
(assert (forall ((_memperm! verismo!mem.rawmem_p.RawMemPerms.) (_cc! verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.)) (! (=> (has_type (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. _cc!) TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.) (has_type (Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. (verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole _memperm! _cc!)) TYPE%verismo!mem.rawmem_s.SnpMemCoreConsole.)) :pattern ((has_type (Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. (verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole _memperm! _cc!)) TYPE%verismo!mem.rawmem_s.SnpMemCoreConsole.)))))
(assert (forall ((x verismo!mem.rawmem_s.SnpMemCoreConsole.)) (! (= (verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/memperm x) (verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/?memperm x)) :pattern ((verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/memperm x)))))
(assert (forall ((x verismo!mem.rawmem_s.SnpMemCoreConsole.)) (! (= (verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/cc x) (verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/?cc x)) :pattern ((verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/cc x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!mem.rawmem_s.SnpMemCoreConsole.) (has_type (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. (verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/cc (%Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. x))) TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.)) :pattern ((verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/cc (%Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. x)) (has_type x TYPE%verismo!mem.rawmem_s.SnpMemCoreConsole.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= x (%Poly%verismo!pgtable_e.def.SpecPTE. (Poly%verismo!pgtable_e.def.SpecPTE. x))) :pattern ((Poly%verismo!pgtable_e.def.SpecPTE. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (= x (Poly%verismo!pgtable_e.def.SpecPTE. (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((_present! Int) (_write! Int) (_supervisor! Int) (_pwt! Int) (_pcd! Int) (_accessed! Int) (_dirty! Int) (_psize! Int) (_global! Int) (_bit12! Int) (_encrypted! Int) (_page! Int) (_nx! Int)) (! (=> (and (uInv 64 _present!) (uInv 64 _write!) (uInv 64 _supervisor!) (uInv 64 _pwt!) (uInv 64 _pcd!) (uInv 64 _accessed!) (uInv 64 _dirty!) (uInv 64 _psize!) (uInv 64 _global!) (uInv 64 _bit12!) (uInv 64 _encrypted!) (uInv 64 _page!) (uInv 64 _nx!)) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.SpecPTE./SpecPTE _present! _write! _supervisor! _pwt! _pcd! _accessed! _dirty! _psize! _global! _bit12! _encrypted! _page! _nx!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.SpecPTE./SpecPTE _present! _write! _supervisor! _pwt! _pcd! _accessed! _dirty! _psize! _global! _bit12! _encrypted! _page! _nx!)) TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/present x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?present x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/present x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/present (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/present (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/write x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?write x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/write x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/write (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/write (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?supervisor x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?pwt x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?pcd x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?accessed x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?dirty x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/psize x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?psize x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/psize x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/psize (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/psize (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/global x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?global x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/global x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/global (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/global (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?bit12 x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?encrypted x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/page x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?page x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/page x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/page (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/page (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/nx x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?nx x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/nx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/nx (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/nx (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.PTE.)) (! (= x (%Poly%verismo!pgtable_e.def.PTE. (Poly%verismo!pgtable_e.def.PTE. x))) :pattern ((Poly%verismo!pgtable_e.def.PTE. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.PTE.) (= x (Poly%verismo!pgtable_e.def.PTE. (%Poly%verismo!pgtable_e.def.PTE. x)))) :pattern ((has_type x TYPE%verismo!pgtable_e.def.PTE.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.PTE./PTE _value!)) TYPE%verismo!pgtable_e.def.PTE.)) :pattern ((has_type (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.PTE./PTE _value!)) TYPE%verismo!pgtable_e.def.PTE.)))))
(assert (forall ((x verismo!pgtable_e.def.PTE.)) (! (= (verismo!pgtable_e.def.PTE./PTE/value x) (verismo!pgtable_e.def.PTE./PTE/?value x)) :pattern ((verismo!pgtable_e.def.PTE./PTE/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. x)))) :pattern ((verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. x)) (has_type x TYPE%verismo!pgtable_e.def.PTE.)))))
(assert (forall ((x verismo!pgtable_e.def.PtePerm.)) (! (= x (%Poly%verismo!pgtable_e.def.PtePerm. (Poly%verismo!pgtable_e.def.PtePerm. x))) :pattern ((Poly%verismo!pgtable_e.def.PtePerm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.PtePerm.) (= x (Poly%verismo!pgtable_e.def.PtePerm. (%Poly%verismo!pgtable_e.def.PtePerm. x)))) :pattern ((has_type x TYPE%verismo!pgtable_e.def.PtePerm.)))))
(assert (forall ((_lvl! Int) (_val! verismo!pgtable_e.def.PTE.) (_range! tuple%2.) (_perm! core!option.Option.)) (! (=> (and (<= 0 _lvl!) (has_type (Poly%verismo!pgtable_e.def.PTE. _val!) TYPE%verismo!pgtable_e.def.PTE.) (has_type (Poly%tuple%2. _range!) (TYPE%tuple%2. $ INT $ NAT)) (has_type (Poly%core!option.Option. _perm!) (TYPE%core!option.Option. $ (TYPE%verismo!ptr.def_s.SnpPointsTo. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 512)))))) (has_type (Poly%verismo!pgtable_e.def.PtePerm. (verismo!pgtable_e.def.PtePerm./PtePerm _lvl! _val! _range! _perm!)) TYPE%verismo!pgtable_e.def.PtePerm.)) :pattern ((has_type (Poly%verismo!pgtable_e.def.PtePerm. (verismo!pgtable_e.def.PtePerm./PtePerm _lvl! _val! _range! _perm!)) TYPE%verismo!pgtable_e.def.PtePerm.)))))
(assert (forall ((x verismo!pgtable_e.def.PtePerm.)) (! (= (verismo!pgtable_e.def.PtePerm./PtePerm/lvl x) (verismo!pgtable_e.def.PtePerm./PtePerm/?lvl x)) :pattern ((verismo!pgtable_e.def.PtePerm./PtePerm/lvl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.PtePerm.) (<= 0 (verismo!pgtable_e.def.PtePerm./PtePerm/lvl (%Poly%verismo!pgtable_e.def.PtePerm. x)))) :pattern ((verismo!pgtable_e.def.PtePerm./PtePerm/lvl (%Poly%verismo!pgtable_e.def.PtePerm. x)) (has_type x TYPE%verismo!pgtable_e.def.PtePerm.)))))
(assert (forall ((x verismo!pgtable_e.def.PtePerm.)) (! (= (verismo!pgtable_e.def.PtePerm./PtePerm/val x) (verismo!pgtable_e.def.PtePerm./PtePerm/?val x)) :pattern ((verismo!pgtable_e.def.PtePerm./PtePerm/val x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.PtePerm.) (has_type (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.PtePerm./PtePerm/val (%Poly%verismo!pgtable_e.def.PtePerm. x))) TYPE%verismo!pgtable_e.def.PTE.)) :pattern ((verismo!pgtable_e.def.PtePerm./PtePerm/val (%Poly%verismo!pgtable_e.def.PtePerm. x)) (has_type x TYPE%verismo!pgtable_e.def.PtePerm.)))))
(assert (forall ((x verismo!pgtable_e.def.PtePerm.)) (! (= (verismo!pgtable_e.def.PtePerm./PtePerm/range x) (verismo!pgtable_e.def.PtePerm./PtePerm/?range x)) :pattern ((verismo!pgtable_e.def.PtePerm./PtePerm/range x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.PtePerm.) (has_type (Poly%tuple%2. (verismo!pgtable_e.def.PtePerm./PtePerm/range (%Poly%verismo!pgtable_e.def.PtePerm. x))) (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!pgtable_e.def.PtePerm./PtePerm/range (%Poly%verismo!pgtable_e.def.PtePerm. x)) (has_type x TYPE%verismo!pgtable_e.def.PtePerm.)))))
(assert (forall ((x verismo!pgtable_e.def.PtePerm.)) (! (= (verismo!pgtable_e.def.PtePerm./PtePerm/perm x) (verismo!pgtable_e.def.PtePerm./PtePerm/?perm x)) :pattern ((verismo!pgtable_e.def.PtePerm./PtePerm/perm x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.PtePerm.) (has_type (Poly%core!option.Option. (verismo!pgtable_e.def.PtePerm./PtePerm/perm (%Poly%verismo!pgtable_e.def.PtePerm. x))) (TYPE%core!option.Option. $ (TYPE%verismo!ptr.def_s.SnpPointsTo. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 512)))))) :pattern ((verismo!pgtable_e.def.PtePerm./PtePerm/perm (%Poly%verismo!pgtable_e.def.PtePerm. x)) (has_type x TYPE%verismo!pgtable_e.def.PtePerm.)))))
(assert (forall ((x verismo!pgtable_e.def.TrackedPTEPerms.)) (! (= x (%Poly%verismo!pgtable_e.def.TrackedPTEPerms. (Poly%verismo!pgtable_e.def.TrackedPTEPerms. x))) :pattern ((Poly%verismo!pgtable_e.def.TrackedPTEPerms. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.TrackedPTEPerms.) (= x (Poly%verismo!pgtable_e.def.TrackedPTEPerms. (%Poly%verismo!pgtable_e.def.TrackedPTEPerms. x)))) :pattern ((has_type x TYPE%verismo!pgtable_e.def.TrackedPTEPerms.)))))
(assert (forall ((x verismo!pgtable_e.def.TrackedPTEPerms.)) (! (= (verismo!pgtable_e.def.TrackedPTEPerms./TrackedPTEPerms/perms x) (verismo!pgtable_e.def.TrackedPTEPerms./TrackedPTEPerms/?perms x)) :pattern ((verismo!pgtable_e.def.TrackedPTEPerms./TrackedPTEPerms/perms x)))))
(assert (forall ((x verismo!pgtable_e.def.TrackedPTEPerms.)) (! (has_type (Poly%verismo!pgtable_e.def.TrackedPTEPerms. x) TYPE%verismo!pgtable_e.def.TrackedPTEPerms.) :pattern ((has_type (Poly%verismo!pgtable_e.def.TrackedPTEPerms. x) TYPE%verismo!pgtable_e.def.TrackedPTEPerms.)))))
(assert (forall ((x verismo!pgtable_e.pte.SpecVAddrIndex.)) (! (= x (%Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. x))) :pattern ((Poly%verismo!pgtable_e.pte.SpecVAddrIndex. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (= x (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (%Poly%verismo!pgtable_e.pte.SpecVAddrIndex. x)))) :pattern ((has_type x TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.)))))
(assert (forall ((_index0! Int) (_index1! Int) (_index2! Int) (_index3! Int)) (! (=> (and (uInv 64 _index0!) (uInv 64 _index1!) (uInv 64 _index2!) (uInv 64 _index3!)) (has_type (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex _index0! _index1! _index2! _index3!)) TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.)) :pattern ((has_type (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex _index0! _index1! _index2! _index3!)) TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.)))))
(assert (forall ((x verismo!pgtable_e.pte.SpecVAddrIndex.)) (! (= (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index0 x) (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/?index0 x)) :pattern ((verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (uInv 64 (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index0 (%Poly%verismo!pgtable_e.pte.SpecVAddrIndex. x)))) :pattern ((verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index0 (%Poly%verismo!pgtable_e.pte.SpecVAddrIndex. x)) (has_type x TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.)))))
(assert (forall ((x verismo!pgtable_e.pte.SpecVAddrIndex.)) (! (= (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index1 x) (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/?index1 x)) :pattern ((verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (uInv 64 (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index1 (%Poly%verismo!pgtable_e.pte.SpecVAddrIndex. x)))) :pattern ((verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index1 (%Poly%verismo!pgtable_e.pte.SpecVAddrIndex. x)) (has_type x TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.)))))
(assert (forall ((x verismo!pgtable_e.pte.SpecVAddrIndex.)) (! (= (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index2 x) (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/?index2 x)) :pattern ((verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (uInv 64 (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index2 (%Poly%verismo!pgtable_e.pte.SpecVAddrIndex. x)))) :pattern ((verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index2 (%Poly%verismo!pgtable_e.pte.SpecVAddrIndex. x)) (has_type x TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.)))))
(assert (forall ((x verismo!pgtable_e.pte.SpecVAddrIndex.)) (! (= (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index3 x) (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/?index3 x)) :pattern ((verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index3 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (uInv 64 (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index3 (%Poly%verismo!pgtable_e.pte.SpecVAddrIndex. x)))) :pattern ((verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index3 (%Poly%verismo!pgtable_e.pte.SpecVAddrIndex. x)) (has_type x TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.)))))
(assert (forall ((x verismo!pgtable_e.pte.VAddrIndex.)) (! (= x (%Poly%verismo!pgtable_e.pte.VAddrIndex. (Poly%verismo!pgtable_e.pte.VAddrIndex. x))) :pattern ((Poly%verismo!pgtable_e.pte.VAddrIndex. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.pte.VAddrIndex.) (= x (Poly%verismo!pgtable_e.pte.VAddrIndex. (%Poly%verismo!pgtable_e.pte.VAddrIndex. x)))) :pattern ((has_type x TYPE%verismo!pgtable_e.pte.VAddrIndex.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!pgtable_e.pte.VAddrIndex. (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex _value!)) TYPE%verismo!pgtable_e.pte.VAddrIndex.)) :pattern ((has_type (Poly%verismo!pgtable_e.pte.VAddrIndex. (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex _value!)) TYPE%verismo!pgtable_e.pte.VAddrIndex.)))))
(assert (forall ((x verismo!pgtable_e.pte.VAddrIndex.)) (! (= (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value x) (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/?value x)) :pattern ((verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.pte.VAddrIndex.) (uInv 64 (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (%Poly%verismo!pgtable_e.pte.VAddrIndex. x)))) :pattern ((verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (%Poly%verismo!pgtable_e.pte.VAddrIndex. x)) (has_type x TYPE%verismo!pgtable_e.pte.VAddrIndex.)))))
(assert (forall ((x verismo!ptr.def_s.SnpPPtr.)) (! (= x (%Poly%verismo!ptr.def_s.SnpPPtr. (Poly%verismo!ptr.def_s.SnpPPtr. x))) :pattern ((Poly%verismo!ptr.def_s.SnpPPtr. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)) (= x (Poly%verismo!ptr.def_s.SnpPPtr. (%Poly%verismo!ptr.def_s.SnpPPtr. x)))) :pattern ((has_type x (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_uptr! Int) (_dummy! Poly)) (! (=> (and (uInv SZ _uptr!) (has_type _dummy! V&)) (has_type (Poly%verismo!ptr.def_s.SnpPPtr. (verismo!ptr.def_s.SnpPPtr./SnpPPtr _uptr! _dummy!)) (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))) :pattern ((has_type (Poly%verismo!ptr.def_s.SnpPPtr. (verismo!ptr.def_s.SnpPPtr./SnpPPtr _uptr! _dummy!)) (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))))))
(assert (forall ((x verismo!ptr.def_s.SnpPPtr.)) (! (= (verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr x) (verismo!ptr.def_s.SnpPPtr./SnpPPtr/?uptr x)) :pattern ((verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)) (uInv SZ (verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr (%Poly%verismo!ptr.def_s.SnpPPtr. x)))) :pattern ((verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr (%Poly%verismo!ptr.def_s.SnpPPtr. x)) (has_type x (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))))))
(assert (forall ((x verismo!ptr.def_s.SnpPPtr.)) (! (= (verismo!ptr.def_s.SnpPPtr./SnpPPtr/dummy x) (verismo!ptr.def_s.SnpPPtr./SnpPPtr/?dummy x)) :pattern ((verismo!ptr.def_s.SnpPPtr./SnpPPtr/dummy x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)) (has_type (verismo!ptr.def_s.SnpPPtr./SnpPPtr/dummy (%Poly%verismo!ptr.def_s.SnpPPtr. x)) V&)) :pattern ((verismo!ptr.def_s.SnpPPtr./SnpPPtr/dummy (%Poly%verismo!ptr.def_s.SnpPPtr. x)) (has_type x (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))))))
(define-fun is-verismo!ptr.def_s.SnpPPtr./SnpPPtr_ ((c verismo!ptr.def_s.SnpPPtr.)) Bool ((_ is verismo!ptr.def_s.SnpPPtr./SnpPPtr) c))
(assert (forall ((x verismo!ptr.def_s.SnpPPtr.)) (! (=> (is-verismo!ptr.def_s.SnpPPtr./SnpPPtr_ x) (height_lt (height (verismo!ptr.def_s.SnpPPtr./SnpPPtr/dummy x)) (height (Poly%verismo!ptr.def_s.SnpPPtr. x)))) :pattern ((height (verismo!ptr.def_s.SnpPPtr./SnpPPtr/dummy x))))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsToData.)) (! (= x (%Poly%verismo!ptr.def_s.SnpPointsToData. (Poly%verismo!ptr.def_s.SnpPointsToData. x))) :pattern ((Poly%verismo!ptr.def_s.SnpPointsToData. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&)) (= x (Poly%verismo!ptr.def_s.SnpPointsToData. (%Poly%verismo!ptr.def_s.SnpPointsToData. x)))) :pattern ((has_type x (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_ptr! Int) (_value! core!option.Option.) (_snp! verismo!ptr.snp.snp_u.SnpMemAttr.)) (! (=> (and (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. V&. V&)) (has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. _snp!) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) (has_type (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData _ptr! _value! _snp!)) (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))) :pattern ((has_type (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData _ptr! _value! _snp!)) (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsToData.)) (! (= (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/ptr x) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/?ptr x)) :pattern ((verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/ptr x)))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsToData.)) (! (= (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value x) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/?value x)) :pattern ((verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&)) (has_type (Poly%core!option.Option. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. x))) (TYPE%core!option.Option. V&. V&))) :pattern ((verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. x)) (has_type x (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsToData.)) (! (= (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp x) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/?snp x)) :pattern ((verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&)) (has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (%Poly%verismo!ptr.def_s.SnpPointsToData. x))) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) :pattern ((verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (%Poly%verismo!ptr.def_s.SnpPointsToData. x)) (has_type x (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))))))
(define-fun is-verismo!ptr.def_s.SnpPointsToData./SnpPointsToData_ ((c verismo!ptr.def_s.SnpPointsToData.)) Bool ((_ is verismo!ptr.def_s.SnpPointsToData./SnpPointsToData) c))
(assert (forall ((x verismo!ptr.def_s.SnpPointsToData.)) (! (=> (is-verismo!ptr.def_s.SnpPointsToData./SnpPointsToData_ x) (height_lt (height (Poly%core!option.Option. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value x))) (height (Poly%verismo!ptr.def_s.SnpPointsToData. x)))) :pattern ((height (Poly%core!option.Option. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value x)))))))
(assert (forall ((x verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) (! (= x (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. x))) :pattern ((Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (= x (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. x)))) :pattern ((has_type x TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)))))
(assert (forall ((_pptr! Int) (_snp_bytes! vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.) (_snp! verismo!ptr.snp.snp_u.SnpMemAttr.)) (! (=> (has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. _snp!) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.) (has_type (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes _pptr! _snp_bytes! _snp!)) TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) :pattern ((has_type (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes _pptr! _snp_bytes! _snp!)) TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)))))
(assert (forall ((x verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) (! (= (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr x) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/?pptr x)) :pattern ((verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr x)))))
(assert (forall ((x verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) (! (= (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes x) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/?snp_bytes x)) :pattern ((verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes x)))))
(assert (forall ((x verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) (! (= (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp x) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/?snp x)) :pattern ((verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. x))) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) :pattern ((verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. x)) (has_type x TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= x (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. x))) :pattern ((Poly%verismo!registers.core_perm_s.CoreMode. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.) (= x (Poly%verismo!registers.core_perm_s.CoreMode. (%Poly%verismo!registers.core_perm_s.CoreMode. x)))) :pattern ((has_type x TYPE%verismo!registers.core_perm_s.CoreMode.)))))
(assert (forall ((_cpu! Int) (_run! Bool) (_vmpl! Int) (_count! Int) (_sent_ghcb_msrs! vstd!seq.Seq<tuple%2<nat./nat.>.>.) (_sent_mem! vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)) (! (=> (and (<= 0 _cpu!) (<= 0 _vmpl!) (<= 0 _count!)) (has_type (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.CoreMode./CoreMode _cpu! _run! _vmpl! _count! _sent_ghcb_msrs! _sent_mem!)) TYPE%verismo!registers.core_perm_s.CoreMode.)) :pattern ((has_type (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.CoreMode./CoreMode _cpu! _run! _vmpl! _count! _sent_ghcb_msrs! _sent_mem!)) TYPE%verismo!registers.core_perm_s.CoreMode.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?cpu x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/cpu x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. x)))) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. x)) (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/run x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?run x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/run x)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?vmpl x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. x)))) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. x)) (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/count x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?count x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/count x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.CoreMode./CoreMode/count (%Poly%verismo!registers.core_perm_s.CoreMode. x)))) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/count (%Poly%verismo!registers.core_perm_s.CoreMode. x)) (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_ghcb_msrs x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?sent_ghcb_msrs x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/sent_ghcb_msrs x)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_mem x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?sent_mem x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/sent_mem x)))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (= x (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. (Poly%verismo!registers.msr_perm_s.RegisterPermValue. x))) :pattern ((Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&)) (= x (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)))) :pattern ((has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_cpu! Int) (_id! verismo!arch.reg.RegName.) (_shared! Bool) (_value! Poly)) (! (=> (and (<= 0 _cpu!) (has_type (Poly%verismo!arch.reg.RegName. _id!) TYPE%verismo!arch.reg.RegName.) (has_type _value! T&)) (has_type (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue _cpu! _id! _shared! _value!)) (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))) :pattern ((has_type (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue _cpu! _id! _shared! _value!)) (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (= (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/cpu x) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?cpu x)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/cpu x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&)) (<= 0 (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/cpu (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)))) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/cpu (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)) (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (= (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/id x) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?id x)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/id x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&)) (has_type (Poly%verismo!arch.reg.RegName. (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/id (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x))) TYPE%verismo!arch.reg.RegName.)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/id (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)) (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (= (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/shared x) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?shared x)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/shared x)))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (= (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value x) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?value x)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&)) (has_type (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)) T&)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)) (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))))))
(define-fun is-verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue_ ((c verismo!registers.msr_perm_s.RegisterPermValue.)) Bool ((_ is verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue) c))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (=> (is-verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue_ x) (height_lt (height (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value x)) (height (Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)))) :pattern ((height (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value x))))))
(assert (forall ((x verismo!security.mem.OSMemPermSpec.)) (! (= x (%Poly%verismo!security.mem.OSMemPermSpec. (Poly%verismo!security.mem.OSMemPermSpec. x))) :pattern ((Poly%verismo!security.mem.OSMemPermSpec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.mem.OSMemPermSpec.) (= x (Poly%verismo!security.mem.OSMemPermSpec. (%Poly%verismo!security.mem.OSMemPermSpec. x)))) :pattern ((has_type x TYPE%verismo!security.mem.OSMemPermSpec.)))))
(assert (forall ((_read! Int) (_write! Int) (_user_exe! Int) (_kern_exe! Int)) (! (=> (and (uInv 8 _read!) (uInv 8 _write!) (uInv 8 _user_exe!) (uInv 8 _kern_exe!)) (has_type (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.OSMemPermSpec./OSMemPermSpec _read! _write! _user_exe! _kern_exe!)) TYPE%verismo!security.mem.OSMemPermSpec.)) :pattern ((has_type (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.OSMemPermSpec./OSMemPermSpec _read! _write! _user_exe! _kern_exe!)) TYPE%verismo!security.mem.OSMemPermSpec.)))))
(assert (forall ((x verismo!security.mem.OSMemPermSpec.)) (! (= (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/read x) (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/?read x)) :pattern ((verismo!security.mem.OSMemPermSpec./OSMemPermSpec/read x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.mem.OSMemPermSpec.) (uInv 8 (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/read (%Poly%verismo!security.mem.OSMemPermSpec. x)))) :pattern ((verismo!security.mem.OSMemPermSpec./OSMemPermSpec/read (%Poly%verismo!security.mem.OSMemPermSpec. x)) (has_type x TYPE%verismo!security.mem.OSMemPermSpec.)))))
(assert (forall ((x verismo!security.mem.OSMemPermSpec.)) (! (= (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/write x) (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/?write x)) :pattern ((verismo!security.mem.OSMemPermSpec./OSMemPermSpec/write x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.mem.OSMemPermSpec.) (uInv 8 (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/write (%Poly%verismo!security.mem.OSMemPermSpec. x)))) :pattern ((verismo!security.mem.OSMemPermSpec./OSMemPermSpec/write (%Poly%verismo!security.mem.OSMemPermSpec. x)) (has_type x TYPE%verismo!security.mem.OSMemPermSpec.)))))
(assert (forall ((x verismo!security.mem.OSMemPermSpec.)) (! (= (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/user_exe x) (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/?user_exe x)) :pattern ((verismo!security.mem.OSMemPermSpec./OSMemPermSpec/user_exe x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.mem.OSMemPermSpec.) (uInv 8 (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/user_exe (%Poly%verismo!security.mem.OSMemPermSpec. x)))) :pattern ((verismo!security.mem.OSMemPermSpec./OSMemPermSpec/user_exe (%Poly%verismo!security.mem.OSMemPermSpec. x)) (has_type x TYPE%verismo!security.mem.OSMemPermSpec.)))))
(assert (forall ((x verismo!security.mem.OSMemPermSpec.)) (! (= (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/kern_exe x) (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/?kern_exe x)) :pattern ((verismo!security.mem.OSMemPermSpec./OSMemPermSpec/kern_exe x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.mem.OSMemPermSpec.) (uInv 8 (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/kern_exe (%Poly%verismo!security.mem.OSMemPermSpec. x)))) :pattern ((verismo!security.mem.OSMemPermSpec./OSMemPermSpec/kern_exe (%Poly%verismo!security.mem.OSMemPermSpec. x)) (has_type x TYPE%verismo!security.mem.OSMemPermSpec.)))))
(assert (forall ((x verismo!security.mem.OSMemPerm.)) (! (= x (%Poly%verismo!security.mem.OSMemPerm. (Poly%verismo!security.mem.OSMemPerm. x))) :pattern ((Poly%verismo!security.mem.OSMemPerm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.mem.OSMemPerm.) (= x (Poly%verismo!security.mem.OSMemPerm. (%Poly%verismo!security.mem.OSMemPerm. x)))) :pattern ((has_type x TYPE%verismo!security.mem.OSMemPerm.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 8 _value!) (has_type (Poly%verismo!security.mem.OSMemPerm. (verismo!security.mem.OSMemPerm./OSMemPerm _value!)) TYPE%verismo!security.mem.OSMemPerm.)) :pattern ((has_type (Poly%verismo!security.mem.OSMemPerm. (verismo!security.mem.OSMemPerm./OSMemPerm _value!)) TYPE%verismo!security.mem.OSMemPerm.)))))
(assert (forall ((x verismo!security.mem.OSMemPerm.)) (! (= (verismo!security.mem.OSMemPerm./OSMemPerm/value x) (verismo!security.mem.OSMemPerm./OSMemPerm/?value x)) :pattern ((verismo!security.mem.OSMemPerm./OSMemPerm/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.mem.OSMemPerm.) (uInv 8 (verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. x)))) :pattern ((verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. x)) (has_type x TYPE%verismo!security.mem.OSMemPerm.)))))
(assert (forall ((x verismo!security.mem.OSMemEntry.)) (! (= x (%Poly%verismo!security.mem.OSMemEntry. (Poly%verismo!security.mem.OSMemEntry. x))) :pattern ((Poly%verismo!security.mem.OSMemEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.mem.OSMemEntry.) (= x (Poly%verismo!security.mem.OSMemEntry. (%Poly%verismo!security.mem.OSMemEntry. x)))) :pattern ((has_type x TYPE%verismo!security.mem.OSMemEntry.)))))
(assert (forall ((x verismo!security.mem.OSMemEntry.)) (! (= (verismo!security.mem.OSMemEntry./OSMemEntry/start_page x) (verismo!security.mem.OSMemEntry./OSMemEntry/?start_page x)) :pattern ((verismo!security.mem.OSMemEntry./OSMemEntry/start_page x)))))
(assert (forall ((x verismo!security.mem.OSMemEntry.)) (! (= (verismo!security.mem.OSMemEntry./OSMemEntry/npages x) (verismo!security.mem.OSMemEntry./OSMemEntry/?npages x)) :pattern ((verismo!security.mem.OSMemEntry./OSMemEntry/npages x)))))
(assert (forall ((x verismo!security.mem.OSMemEntry.)) (! (= (verismo!security.mem.OSMemEntry./OSMemEntry/osperm x) (verismo!security.mem.OSMemEntry./OSMemEntry/?osperm x)) :pattern ((verismo!security.mem.OSMemEntry./OSMemEntry/osperm x)))))
(assert (forall ((x verismo!security.mem.OSMemEntry.)) (! (= (verismo!security.mem.OSMemEntry./OSMemEntry/page_perms x) (verismo!security.mem.OSMemEntry./OSMemEntry/?page_perms x)) :pattern ((verismo!security.mem.OSMemEntry./OSMemEntry/page_perms x)))))
(assert (forall ((x verismo!security.mem.OSMemEntry.)) (! (has_type (Poly%verismo!security.mem.OSMemEntry. x) TYPE%verismo!security.mem.OSMemEntry.) :pattern ((has_type (Poly%verismo!security.mem.OSMemEntry. x) TYPE%verismo!security.mem.OSMemEntry.)))))
(assert (forall ((x verismo!security.secret.Copyauthtag.)) (! (= x (%Poly%verismo!security.secret.Copyauthtag. (Poly%verismo!security.secret.Copyauthtag. x))) :pattern ((Poly%verismo!security.secret.Copyauthtag. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.secret.Copyauthtag.) (= x (Poly%verismo!security.secret.Copyauthtag. (%Poly%verismo!security.secret.Copyauthtag. x)))) :pattern ((has_type x TYPE%verismo!security.secret.Copyauthtag.)))))
(assert (forall ((x verismo!security.secret.Copyauthtag.)) (! (has_type (Poly%verismo!security.secret.Copyauthtag. x) TYPE%verismo!security.secret.Copyauthtag.) :pattern ((has_type (Poly%verismo!security.secret.Copyauthtag. x) TYPE%verismo!security.secret.Copyauthtag.)))))
(assert (forall ((x verismo!security.secret.Updateauthtag.)) (! (= x (%Poly%verismo!security.secret.Updateauthtag. (Poly%verismo!security.secret.Updateauthtag. x))) :pattern ((Poly%verismo!security.secret.Updateauthtag. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.secret.Updateauthtag.) (= x (Poly%verismo!security.secret.Updateauthtag. (%Poly%verismo!security.secret.Updateauthtag. x)))) :pattern ((has_type x TYPE%verismo!security.secret.Updateauthtag.)))))
(assert (forall ((_val! Poly)) (! (=> (has_type _val! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type (Poly%verismo!security.secret.Updateauthtag. (verismo!security.secret.Updateauthtag./Updateauthtag _val!)) TYPE%verismo!security.secret.Updateauthtag.)) :pattern ((has_type (Poly%verismo!security.secret.Updateauthtag. (verismo!security.secret.Updateauthtag./Updateauthtag _val!)) TYPE%verismo!security.secret.Updateauthtag.)))))
(assert (forall ((x verismo!security.secret.Updateauthtag.)) (! (= (verismo!security.secret.Updateauthtag./Updateauthtag/val x) (verismo!security.secret.Updateauthtag./Updateauthtag/?val x)) :pattern ((verismo!security.secret.Updateauthtag./Updateauthtag/val x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.secret.Updateauthtag.) (has_type (verismo!security.secret.Updateauthtag./Updateauthtag/val (%Poly%verismo!security.secret.Updateauthtag. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)))) :pattern ((verismo!security.secret.Updateauthtag./Updateauthtag/val (%Poly%verismo!security.secret.Updateauthtag. x)) (has_type x TYPE%verismo!security.secret.Updateauthtag.)))))
(assert (forall ((x verismo!security.secret.Copyalgo.)) (! (= x (%Poly%verismo!security.secret.Copyalgo. (Poly%verismo!security.secret.Copyalgo. x))) :pattern ((Poly%verismo!security.secret.Copyalgo. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.secret.Copyalgo.) (= x (Poly%verismo!security.secret.Copyalgo. (%Poly%verismo!security.secret.Copyalgo. x)))) :pattern ((has_type x TYPE%verismo!security.secret.Copyalgo.)))))
(assert (forall ((x verismo!security.secret.Copyalgo.)) (! (has_type (Poly%verismo!security.secret.Copyalgo. x) TYPE%verismo!security.secret.Copyalgo.) :pattern ((has_type (Poly%verismo!security.secret.Copyalgo. x) TYPE%verismo!security.secret.Copyalgo.)))))
(assert (forall ((x verismo!security.secret.Updatealgo.)) (! (= x (%Poly%verismo!security.secret.Updatealgo. (Poly%verismo!security.secret.Updatealgo. x))) :pattern ((Poly%verismo!security.secret.Updatealgo. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.secret.Updatealgo.) (= x (Poly%verismo!security.secret.Updatealgo. (%Poly%verismo!security.secret.Updatealgo. x)))) :pattern ((has_type x TYPE%verismo!security.secret.Updatealgo.)))))
(assert (forall ((x verismo!security.secret.Updatealgo.)) (! (= (verismo!security.secret.Updatealgo./Updatealgo/val x) (verismo!security.secret.Updatealgo./Updatealgo/?val x)) :pattern ((verismo!security.secret.Updatealgo./Updatealgo/val x)))))
(assert (forall ((x verismo!security.secret.Updatealgo.)) (! (has_type (Poly%verismo!security.secret.Updatealgo. x) TYPE%verismo!security.secret.Updatealgo.) :pattern ((has_type (Poly%verismo!security.secret.Updatealgo. x) TYPE%verismo!security.secret.Updatealgo.)))))
(assert (forall ((x verismo!security.secret.FillSecretForVMPL.)) (! (= x (%Poly%verismo!security.secret.FillSecretForVMPL. (Poly%verismo!security.secret.FillSecretForVMPL. x))) :pattern ((Poly%verismo!security.secret.FillSecretForVMPL. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.secret.FillSecretForVMPL.) (= x (Poly%verismo!security.secret.FillSecretForVMPL. (%Poly%verismo!security.secret.FillSecretForVMPL. x)))) :pattern ((has_type x TYPE%verismo!security.secret.FillSecretForVMPL.)))))
(assert (forall ((_master_secret! verismo!security.secret.SnpSecretsPageLayout.) (_vmpl! Int)) (! (=> (uInv 8 _vmpl!) (has_type (Poly%verismo!security.secret.FillSecretForVMPL. (verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL _master_secret! _vmpl!)) TYPE%verismo!security.secret.FillSecretForVMPL.)) :pattern ((has_type (Poly%verismo!security.secret.FillSecretForVMPL. (verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL _master_secret! _vmpl!)) TYPE%verismo!security.secret.FillSecretForVMPL.)))))
(assert (forall ((x verismo!security.secret.FillSecretForVMPL.)) (! (= (verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/master_secret x) (verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/?master_secret x)) :pattern ((verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/master_secret x)))))
(assert (forall ((x verismo!security.secret.FillSecretForVMPL.)) (! (= (verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/vmpl x) (verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/?vmpl x)) :pattern ((verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/vmpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.secret.FillSecretForVMPL.) (uInv 8 (verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/vmpl (%Poly%verismo!security.secret.FillSecretForVMPL. x)))) :pattern ((verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/vmpl (%Poly%verismo!security.secret.FillSecretForVMPL. x)) (has_type x TYPE%verismo!security.secret.FillSecretForVMPL.)))))
(assert (forall ((x verismo!security.secret.FillSecretForVMPLOut.)) (! (= x (%Poly%verismo!security.secret.FillSecretForVMPLOut. (Poly%verismo!security.secret.FillSecretForVMPLOut. x))) :pattern ((Poly%verismo!security.secret.FillSecretForVMPLOut. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.secret.FillSecretForVMPLOut.) (= x (Poly%verismo!security.secret.FillSecretForVMPLOut. (%Poly%verismo!security.secret.FillSecretForVMPLOut. x)))) :pattern ((has_type x TYPE%verismo!security.secret.FillSecretForVMPLOut.)))))
(assert (forall ((x verismo!security.secret.FillSecretForVMPLOut.)) (! (has_type (Poly%verismo!security.secret.FillSecretForVMPLOut. x) TYPE%verismo!security.secret.FillSecretForVMPLOut.) :pattern ((has_type (Poly%verismo!security.secret.FillSecretForVMPLOut. x) TYPE%verismo!security.secret.FillSecretForVMPLOut.)))))
(assert (forall ((x verismo!snp.cpuid.RegABCD.)) (! (= x (%Poly%verismo!snp.cpuid.RegABCD. (Poly%verismo!snp.cpuid.RegABCD. x))) :pattern ((Poly%verismo!snp.cpuid.RegABCD. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpuid.RegABCD.) (= x (Poly%verismo!snp.cpuid.RegABCD. (%Poly%verismo!snp.cpuid.RegABCD. x)))) :pattern ((has_type x TYPE%verismo!snp.cpuid.RegABCD.)))))
(assert (forall ((x verismo!snp.cpuid.RegABCD.)) (! (= (verismo!snp.cpuid.RegABCD./RegABCD/eax x) (verismo!snp.cpuid.RegABCD./RegABCD/?eax x)) :pattern ((verismo!snp.cpuid.RegABCD./RegABCD/eax x)))))
(assert (forall ((x verismo!snp.cpuid.RegABCD.)) (! (= (verismo!snp.cpuid.RegABCD./RegABCD/ebx x) (verismo!snp.cpuid.RegABCD./RegABCD/?ebx x)) :pattern ((verismo!snp.cpuid.RegABCD./RegABCD/ebx x)))))
(assert (forall ((x verismo!snp.cpuid.RegABCD.)) (! (= (verismo!snp.cpuid.RegABCD./RegABCD/ecx x) (verismo!snp.cpuid.RegABCD./RegABCD/?ecx x)) :pattern ((verismo!snp.cpuid.RegABCD./RegABCD/ecx x)))))
(assert (forall ((x verismo!snp.cpuid.RegABCD.)) (! (= (verismo!snp.cpuid.RegABCD./RegABCD/edx x) (verismo!snp.cpuid.RegABCD./RegABCD/?edx x)) :pattern ((verismo!snp.cpuid.RegABCD./RegABCD/edx x)))))
(assert (forall ((x verismo!snp.cpuid.RegABCD.)) (! (has_type (Poly%verismo!snp.cpuid.RegABCD. x) TYPE%verismo!snp.cpuid.RegABCD.) :pattern ((has_type (Poly%verismo!snp.cpuid.RegABCD. x) TYPE%verismo!snp.cpuid.RegABCD.)))))
(assert (forall ((x verismo!snp.cpuid.SnpCpuidFn.)) (! (= x (%Poly%verismo!snp.cpuid.SnpCpuidFn. (Poly%verismo!snp.cpuid.SnpCpuidFn. x))) :pattern ((Poly%verismo!snp.cpuid.SnpCpuidFn. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpuid.SnpCpuidFn.) (= x (Poly%verismo!snp.cpuid.SnpCpuidFn. (%Poly%verismo!snp.cpuid.SnpCpuidFn. x)))) :pattern ((has_type x TYPE%verismo!snp.cpuid.SnpCpuidFn.)))))
(assert (forall ((x verismo!snp.cpuid.SnpCpuidFn.)) (! (= (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/eax_in x) (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/?eax_in x)) :pattern ((verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/eax_in x)))))
(assert (forall ((x verismo!snp.cpuid.SnpCpuidFn.)) (! (= (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/ecx_in x) (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/?ecx_in x)) :pattern ((verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/ecx_in x)))))
(assert (forall ((x verismo!snp.cpuid.SnpCpuidFn.)) (! (= (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xcr0_in x) (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/?xcr0_in x)) :pattern ((verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xcr0_in x)))))
(assert (forall ((x verismo!snp.cpuid.SnpCpuidFn.)) (! (= (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xss_in x) (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/?xss_in x)) :pattern ((verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xss_in x)))))
(assert (forall ((x verismo!snp.cpuid.SnpCpuidFn.)) (! (= (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/rets x) (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/?rets x)) :pattern ((verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/rets x)))))
(assert (forall ((x verismo!snp.cpuid.SnpCpuidFn.)) (! (= (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/reserved x) (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/?reserved x)) :pattern ((verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/reserved x)))))
(assert (forall ((x verismo!snp.cpuid.SnpCpuidFn.)) (! (has_type (Poly%verismo!snp.cpuid.SnpCpuidFn. x) TYPE%verismo!snp.cpuid.SnpCpuidFn.) :pattern ((has_type (Poly%verismo!snp.cpuid.SnpCpuidFn. x) TYPE%verismo!snp.cpuid.SnpCpuidFn.)))))
(assert (forall ((x verismo!snp.cpuid.SnpCpuidTable.)) (! (= x (%Poly%verismo!snp.cpuid.SnpCpuidTable. (Poly%verismo!snp.cpuid.SnpCpuidTable. x))) :pattern ((Poly%verismo!snp.cpuid.SnpCpuidTable. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpuid.SnpCpuidTable.) (= x (Poly%verismo!snp.cpuid.SnpCpuidTable. (%Poly%verismo!snp.cpuid.SnpCpuidTable. x)))) :pattern ((has_type x TYPE%verismo!snp.cpuid.SnpCpuidTable.)))))
(assert (forall ((_count! verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (_reserved_1! verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (_reserved_2! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_fn_! Poly) (_reserved_3! Poly)) (! (=> (and (has_type _fn_! (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!snp.cpuid.SnpCpuidFn. $ (CONST_INT 64))) (has_type _reserved_3! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 1008)))) (has_type (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable _count! _reserved_1! _reserved_2! _fn_! _reserved_3!)) TYPE%verismo!snp.cpuid.SnpCpuidTable.)) :pattern ((has_type (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable _count! _reserved_1! _reserved_2! _fn_! _reserved_3!)) TYPE%verismo!snp.cpuid.SnpCpuidTable.)))))
(assert (forall ((x verismo!snp.cpuid.SnpCpuidTable.)) (! (= (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/count x) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/?count x)) :pattern ((verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/count x)))))
(assert (forall ((x verismo!snp.cpuid.SnpCpuidTable.)) (! (= (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_1 x) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/?reserved_1 x)) :pattern ((verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_1 x)))))
(assert (forall ((x verismo!snp.cpuid.SnpCpuidTable.)) (! (= (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_2 x) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/?reserved_2 x)) :pattern ((verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_2 x)))))
(assert (forall ((x verismo!snp.cpuid.SnpCpuidTable.)) (! (= (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/fn_ x) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/?fn_ x)) :pattern ((verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/fn_ x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpuid.SnpCpuidTable.) (has_type (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/fn_ (%Poly%verismo!snp.cpuid.SnpCpuidTable. x)) (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!snp.cpuid.SnpCpuidFn. $ (CONST_INT 64)))) :pattern ((verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/fn_ (%Poly%verismo!snp.cpuid.SnpCpuidTable. x)) (has_type x TYPE%verismo!snp.cpuid.SnpCpuidTable.)))))
(assert (forall ((x verismo!snp.cpuid.SnpCpuidTable.)) (! (= (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_3 x) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/?reserved_3 x)) :pattern ((verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_3 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpuid.SnpCpuidTable.) (has_type (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_3 (%Poly%verismo!snp.cpuid.SnpCpuidTable. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 1008)))) :pattern ((verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_3 (%Poly%verismo!snp.cpuid.SnpCpuidTable. x)) (has_type x TYPE%verismo!snp.cpuid.SnpCpuidTable.)))))
(assert (forall ((x verismo!linkedlist.Node.)) (! (= x (%Poly%verismo!linkedlist.Node. (Poly%verismo!linkedlist.Node. x))) :pattern ((Poly%verismo!linkedlist.Node. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!linkedlist.Node. T&. T&)) (= x (Poly%verismo!linkedlist.Node. (%Poly%verismo!linkedlist.Node. x)))) :pattern ((has_type x (TYPE%verismo!linkedlist.Node. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_next! Int) (_val! Poly)) (! (=> (and (uInv SZ _next!) (has_type _val! T&)) (has_type (Poly%verismo!linkedlist.Node. (verismo!linkedlist.Node./Node _next! _val!)) (TYPE%verismo!linkedlist.Node. T&. T&))) :pattern ((has_type (Poly%verismo!linkedlist.Node. (verismo!linkedlist.Node./Node _next! _val!)) (TYPE%verismo!linkedlist.Node. T&. T&))))))
(assert (forall ((x verismo!linkedlist.Node.)) (! (= (verismo!linkedlist.Node./Node/next x) (verismo!linkedlist.Node./Node/?next x)) :pattern ((verismo!linkedlist.Node./Node/next x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!linkedlist.Node. T&. T&)) (uInv SZ (verismo!linkedlist.Node./Node/next (%Poly%verismo!linkedlist.Node. x)))) :pattern ((verismo!linkedlist.Node./Node/next (%Poly%verismo!linkedlist.Node. x)) (has_type x (TYPE%verismo!linkedlist.Node. T&. T&))))))
(assert (forall ((x verismo!linkedlist.Node.)) (! (= (verismo!linkedlist.Node./Node/val x) (verismo!linkedlist.Node./Node/?val x)) :pattern ((verismo!linkedlist.Node./Node/val x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!linkedlist.Node. T&. T&)) (has_type (verismo!linkedlist.Node./Node/val (%Poly%verismo!linkedlist.Node. x)) T&)) :pattern ((verismo!linkedlist.Node./Node/val (%Poly%verismo!linkedlist.Node. x)) (has_type x (TYPE%verismo!linkedlist.Node. T&. T&))))))
(define-fun is-verismo!linkedlist.Node./Node_ ((c verismo!linkedlist.Node.)) Bool ((_ is verismo!linkedlist.Node./Node) c))
(assert (forall ((x verismo!linkedlist.Node.)) (! (=> (is-verismo!linkedlist.Node./Node_ x) (height_lt (height (verismo!linkedlist.Node./Node/val x)) (height (Poly%verismo!linkedlist.Node. x)))) :pattern ((height (verismo!linkedlist.Node./Node/val x))))))
(assert (forall ((x verismo!linkedlist.SpecListItem.)) (! (= x (%Poly%verismo!linkedlist.SpecListItem. (Poly%verismo!linkedlist.SpecListItem. x))) :pattern ((Poly%verismo!linkedlist.SpecListItem. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!linkedlist.SpecListItem. T&. T&)) (= x (Poly%verismo!linkedlist.SpecListItem. (%Poly%verismo!linkedlist.SpecListItem. x)))) :pattern ((has_type x (TYPE%verismo!linkedlist.SpecListItem. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_ptr! verismo!ptr.def_s.SnpPPtr.) (_snp! verismo!ptr.snp.snp_u.SwSnpMemAttr.) (_val! Poly)) (! (=> (and (has_type (Poly%verismo!ptr.def_s.SnpPPtr. _ptr!) (TYPE%verismo!ptr.def_s.SnpPPtr. $ (TYPE%verismo!linkedlist.Node. T&. T&))) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. _snp!) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (has_type _val! T&)) (has_type (Poly%verismo!linkedlist.SpecListItem. (verismo!linkedlist.SpecListItem./SpecListItem _ptr! _snp! _val!)) (TYPE%verismo!linkedlist.SpecListItem. T&. T&))) :pattern ((has_type (Poly%verismo!linkedlist.SpecListItem. (verismo!linkedlist.SpecListItem./SpecListItem _ptr! _snp! _val!)) (TYPE%verismo!linkedlist.SpecListItem. T&. T&))))))
(assert (forall ((x verismo!linkedlist.SpecListItem.)) (! (= (verismo!linkedlist.SpecListItem./SpecListItem/ptr x) (verismo!linkedlist.SpecListItem./SpecListItem/?ptr x)) :pattern ((verismo!linkedlist.SpecListItem./SpecListItem/ptr x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!linkedlist.SpecListItem. T&. T&)) (has_type (Poly%verismo!ptr.def_s.SnpPPtr. (verismo!linkedlist.SpecListItem./SpecListItem/ptr (%Poly%verismo!linkedlist.SpecListItem. x))) (TYPE%verismo!ptr.def_s.SnpPPtr. $ (TYPE%verismo!linkedlist.Node. T&. T&)))) :pattern ((verismo!linkedlist.SpecListItem./SpecListItem/ptr (%Poly%verismo!linkedlist.SpecListItem. x)) (has_type x (TYPE%verismo!linkedlist.SpecListItem. T&. T&))))))
(assert (forall ((x verismo!linkedlist.SpecListItem.)) (! (= (verismo!linkedlist.SpecListItem./SpecListItem/snp x) (verismo!linkedlist.SpecListItem./SpecListItem/?snp x)) :pattern ((verismo!linkedlist.SpecListItem./SpecListItem/snp x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!linkedlist.SpecListItem. T&. T&)) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!linkedlist.SpecListItem./SpecListItem/snp (%Poly%verismo!linkedlist.SpecListItem. x))) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!linkedlist.SpecListItem./SpecListItem/snp (%Poly%verismo!linkedlist.SpecListItem. x)) (has_type x (TYPE%verismo!linkedlist.SpecListItem. T&. T&))))))
(assert (forall ((x verismo!linkedlist.SpecListItem.)) (! (= (verismo!linkedlist.SpecListItem./SpecListItem/val x) (verismo!linkedlist.SpecListItem./SpecListItem/?val x)) :pattern ((verismo!linkedlist.SpecListItem./SpecListItem/val x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!linkedlist.SpecListItem. T&. T&)) (has_type (verismo!linkedlist.SpecListItem./SpecListItem/val (%Poly%verismo!linkedlist.SpecListItem. x)) T&)) :pattern ((verismo!linkedlist.SpecListItem./SpecListItem/val (%Poly%verismo!linkedlist.SpecListItem. x)) (has_type x (TYPE%verismo!linkedlist.SpecListItem. T&. T&))))))
(define-fun is-verismo!linkedlist.SpecListItem./SpecListItem_ ((c verismo!linkedlist.SpecListItem.)) Bool ((_ is verismo!linkedlist.SpecListItem./SpecListItem) c))
(assert (forall ((x verismo!linkedlist.SpecListItem.)) (! (=> (is-verismo!linkedlist.SpecListItem./SpecListItem_ x) (height_lt (height (Poly%verismo!ptr.def_s.SnpPPtr. (verismo!linkedlist.SpecListItem./SpecListItem/ptr x))) (height (Poly%verismo!linkedlist.SpecListItem. x)))) :pattern ((height (Poly%verismo!ptr.def_s.SnpPPtr. (verismo!linkedlist.SpecListItem./SpecListItem/ptr x)))))))
(assert (forall ((x verismo!linkedlist.SpecListItem.)) (! (=> (is-verismo!linkedlist.SpecListItem./SpecListItem_ x) (height_lt (height (verismo!linkedlist.SpecListItem./SpecListItem/val x)) (height (Poly%verismo!linkedlist.SpecListItem. x)))) :pattern ((height (verismo!linkedlist.SpecListItem./SpecListItem/val x))))))
(assert (forall ((x verismo!linkedlist.LinkedList.)) (! (= x (%Poly%verismo!linkedlist.LinkedList. (Poly%verismo!linkedlist.LinkedList. x))) :pattern ((Poly%verismo!linkedlist.LinkedList. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!linkedlist.LinkedList. T&. T&)) (= x (Poly%verismo!linkedlist.LinkedList. (%Poly%verismo!linkedlist.LinkedList. x)))) :pattern ((has_type x (TYPE%verismo!linkedlist.LinkedList. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_ptrs! Poly) (_perms! Poly) (_head! Int)) (! (=> (and (has_type _ptrs! (TYPE%vstd!seq.Seq. $ (TYPE%verismo!linkedlist.SpecListItem. T&. T&))) (has_type _perms! (TYPE%vstd!map.Map. $ NAT $ (TYPE%verismo!ptr.def_s.SnpPointsTo. $ (TYPE%verismo!linkedlist.Node. T&. T&)))) (uInv SZ _head!)) (has_type (Poly%verismo!linkedlist.LinkedList. (verismo!linkedlist.LinkedList./LinkedList _ptrs! _perms! _head!)) (TYPE%verismo!linkedlist.LinkedList. T&. T&))) :pattern ((has_type (Poly%verismo!linkedlist.LinkedList. (verismo!linkedlist.LinkedList./LinkedList _ptrs! _perms! _head!)) (TYPE%verismo!linkedlist.LinkedList. T&. T&))))))
(assert (forall ((x verismo!linkedlist.LinkedList.)) (! (= (verismo!linkedlist.LinkedList./LinkedList/ptrs x) (verismo!linkedlist.LinkedList./LinkedList/?ptrs x)) :pattern ((verismo!linkedlist.LinkedList./LinkedList/ptrs x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!linkedlist.LinkedList. T&. T&)) (has_type (verismo!linkedlist.LinkedList./LinkedList/ptrs (%Poly%verismo!linkedlist.LinkedList. x)) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!linkedlist.SpecListItem. T&. T&)))) :pattern ((verismo!linkedlist.LinkedList./LinkedList/ptrs (%Poly%verismo!linkedlist.LinkedList. x)) (has_type x (TYPE%verismo!linkedlist.LinkedList. T&. T&))))))
(assert (forall ((x verismo!linkedlist.LinkedList.)) (! (= (verismo!linkedlist.LinkedList./LinkedList/perms x) (verismo!linkedlist.LinkedList./LinkedList/?perms x)) :pattern ((verismo!linkedlist.LinkedList./LinkedList/perms x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!linkedlist.LinkedList. T&. T&)) (has_type (verismo!linkedlist.LinkedList./LinkedList/perms (%Poly%verismo!linkedlist.LinkedList. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%verismo!ptr.def_s.SnpPointsTo. $ (TYPE%verismo!linkedlist.Node. T&. T&))))) :pattern ((verismo!linkedlist.LinkedList./LinkedList/perms (%Poly%verismo!linkedlist.LinkedList. x)) (has_type x (TYPE%verismo!linkedlist.LinkedList. T&. T&))))))
(assert (forall ((x verismo!linkedlist.LinkedList.)) (! (= (verismo!linkedlist.LinkedList./LinkedList/head x) (verismo!linkedlist.LinkedList./LinkedList/?head x)) :pattern ((verismo!linkedlist.LinkedList./LinkedList/head x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!linkedlist.LinkedList. T&. T&)) (uInv SZ (verismo!linkedlist.LinkedList./LinkedList/head (%Poly%verismo!linkedlist.LinkedList. x)))) :pattern ((verismo!linkedlist.LinkedList./LinkedList/head (%Poly%verismo!linkedlist.LinkedList. x)) (has_type x (TYPE%verismo!linkedlist.LinkedList. T&. T&))))))
(define-fun is-verismo!linkedlist.LinkedList./LinkedList_ ((c verismo!linkedlist.LinkedList.)) Bool ((_ is verismo!linkedlist.LinkedList./LinkedList) c))
(assert (forall ((x verismo!linkedlist.LinkedList.)) (! (=> (is-verismo!linkedlist.LinkedList./LinkedList_ x) (height_lt (height (verismo!linkedlist.LinkedList./LinkedList/ptrs x)) (height (Poly%verismo!linkedlist.LinkedList. x)))) :pattern ((height (verismo!linkedlist.LinkedList./LinkedList/ptrs x))))))
(assert (forall ((x verismo!linkedlist.LinkedList.)) (! (=> (is-verismo!linkedlist.LinkedList./LinkedList_ x) (height_lt (height (verismo!linkedlist.LinkedList./LinkedList/perms x)) (height (Poly%verismo!linkedlist.LinkedList. x)))) :pattern ((height (verismo!linkedlist.LinkedList./LinkedList/perms x))))))
(assert (forall ((x verismo!global.Globals.)) (! (= x (%Poly%verismo!global.Globals. (Poly%verismo!global.Globals. x))) :pattern ((Poly%verismo!global.Globals. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!global.Globals.) (= x (Poly%verismo!global.Globals. (%Poly%verismo!global.Globals. x)))) :pattern ((has_type x TYPE%verismo!global.Globals.)))))
(assert (forall ((x verismo!global.Globals.)) (! (has_type (Poly%verismo!global.Globals. x) TYPE%verismo!global.Globals.) :pattern ((has_type (Poly%verismo!global.Globals. x) TYPE%verismo!global.Globals.)))))
(assert (forall ((x verismo!security.Copysnphdr.)) (! (= x (%Poly%verismo!security.Copysnphdr. (Poly%verismo!security.Copysnphdr. x))) :pattern ((Poly%verismo!security.Copysnphdr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.Copysnphdr.) (= x (Poly%verismo!security.Copysnphdr. (%Poly%verismo!security.Copysnphdr. x)))) :pattern ((has_type x TYPE%verismo!security.Copysnphdr.)))))
(assert (forall ((x verismo!security.Copysnphdr.)) (! (has_type (Poly%verismo!security.Copysnphdr. x) TYPE%verismo!security.Copysnphdr.) :pattern ((has_type (Poly%verismo!security.Copysnphdr. x) TYPE%verismo!security.Copysnphdr.)))))
(assert (forall ((x verismo!security.Updatesnphdr.)) (! (= x (%Poly%verismo!security.Updatesnphdr. (Poly%verismo!security.Updatesnphdr. x))) :pattern ((Poly%verismo!security.Updatesnphdr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.Updatesnphdr.) (= x (Poly%verismo!security.Updatesnphdr. (%Poly%verismo!security.Updatesnphdr. x)))) :pattern ((has_type x TYPE%verismo!security.Updatesnphdr.)))))
(assert (forall ((x verismo!security.Updatesnphdr.)) (! (= (verismo!security.Updatesnphdr./Updatesnphdr/val x) (verismo!security.Updatesnphdr./Updatesnphdr/?val x)) :pattern ((verismo!security.Updatesnphdr./Updatesnphdr/val x)))))
(assert (forall ((x verismo!security.Updatesnphdr.)) (! (has_type (Poly%verismo!security.Updatesnphdr. x) TYPE%verismo!security.Updatesnphdr.) :pattern ((has_type (Poly%verismo!security.Updatesnphdr. x) TYPE%verismo!security.Updatesnphdr.)))))
(assert (forall ((x verismo!security.Copypayload.)) (! (= x (%Poly%verismo!security.Copypayload. (Poly%verismo!security.Copypayload. x))) :pattern ((Poly%verismo!security.Copypayload. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.Copypayload.) (= x (Poly%verismo!security.Copypayload. (%Poly%verismo!security.Copypayload. x)))) :pattern ((has_type x TYPE%verismo!security.Copypayload.)))))
(assert (forall ((x verismo!security.Copypayload.)) (! (has_type (Poly%verismo!security.Copypayload. x) TYPE%verismo!security.Copypayload.) :pattern ((has_type (Poly%verismo!security.Copypayload. x) TYPE%verismo!security.Copypayload.)))))
(assert (forall ((x verismo!security.Updatepayload.)) (! (= x (%Poly%verismo!security.Updatepayload. (Poly%verismo!security.Updatepayload. x))) :pattern ((Poly%verismo!security.Updatepayload. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.Updatepayload.) (= x (Poly%verismo!security.Updatepayload. (%Poly%verismo!security.Updatepayload. x)))) :pattern ((has_type x TYPE%verismo!security.Updatepayload.)))))
(assert (forall ((_val! Poly)) (! (=> (has_type _val! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000))) (has_type (Poly%verismo!security.Updatepayload. (verismo!security.Updatepayload./Updatepayload _val!)) TYPE%verismo!security.Updatepayload.)) :pattern ((has_type (Poly%verismo!security.Updatepayload. (verismo!security.Updatepayload./Updatepayload _val!)) TYPE%verismo!security.Updatepayload.)))))
(assert (forall ((x verismo!security.Updatepayload.)) (! (= (verismo!security.Updatepayload./Updatepayload/val x) (verismo!security.Updatepayload./Updatepayload/?val x)) :pattern ((verismo!security.Updatepayload./Updatepayload/val x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.Updatepayload.) (has_type (verismo!security.Updatepayload./Updatepayload/val (%Poly%verismo!security.Updatepayload. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)))) :pattern ((verismo!security.Updatepayload./Updatepayload/val (%Poly%verismo!security.Updatepayload. x)) (has_type x TYPE%verismo!security.Updatepayload.)))))
(assert (forall ((x verismo!security.SnpGuestMsg.)) (! (= x (%Poly%verismo!security.SnpGuestMsg. (Poly%verismo!security.SnpGuestMsg. x))) :pattern ((Poly%verismo!security.SnpGuestMsg. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.SnpGuestMsg.) (= x (Poly%verismo!security.SnpGuestMsg. (%Poly%verismo!security.SnpGuestMsg. x)))) :pattern ((has_type x TYPE%verismo!security.SnpGuestMsg.)))))
(assert (forall ((_snphdr! verismo!security.secret.SnpGuestMsgHdr.) (_payload! Poly)) (! (=> (has_type _payload! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000))) (has_type (Poly%verismo!security.SnpGuestMsg. (verismo!security.SnpGuestMsg./SnpGuestMsg _snphdr! _payload!)) TYPE%verismo!security.SnpGuestMsg.)) :pattern ((has_type (Poly%verismo!security.SnpGuestMsg. (verismo!security.SnpGuestMsg./SnpGuestMsg _snphdr! _payload!)) TYPE%verismo!security.SnpGuestMsg.)))))
(assert (forall ((x verismo!security.SnpGuestMsg.)) (! (= (verismo!security.SnpGuestMsg./SnpGuestMsg/snphdr x) (verismo!security.SnpGuestMsg./SnpGuestMsg/?snphdr x)) :pattern ((verismo!security.SnpGuestMsg./SnpGuestMsg/snphdr x)))))
(assert (forall ((x verismo!security.SnpGuestMsg.)) (! (= (verismo!security.SnpGuestMsg./SnpGuestMsg/payload x) (verismo!security.SnpGuestMsg./SnpGuestMsg/?payload x)) :pattern ((verismo!security.SnpGuestMsg./SnpGuestMsg/payload x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!security.SnpGuestMsg.) (has_type (verismo!security.SnpGuestMsg./SnpGuestMsg/payload (%Poly%verismo!security.SnpGuestMsg. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)))) :pattern ((verismo!security.SnpGuestMsg./SnpGuestMsg/payload (%Poly%verismo!security.SnpGuestMsg. x)) (has_type x TYPE%verismo!security.SnpGuestMsg.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%1.)) (! (= x (%Poly%tuple%1. (Poly%tuple%1. x))) :pattern ((Poly%tuple%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (= x (Poly%tuple%1. (%Poly%tuple%1. x)))) :pattern ((has_type x (TYPE%tuple%1. T%0&. T%0&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (_0! Poly)) (! (=> (has_type _0! T%0&) (has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))) :pattern ((has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))))))
(assert (forall ((x tuple%1.)) (! (= (tuple%1./tuple%1/0 x) (tuple%1./tuple%1/?0 x)) :pattern ((tuple%1./tuple%1/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) T%0&)) :pattern ((tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (has_type x (TYPE%tuple%1. T%0&. T%0&))))))
(define-fun is-tuple%1./tuple%1_ ((c tuple%1.)) Bool ((_ is tuple%1./tuple%1) c))
(assert (forall ((x tuple%1.)) (! (=> (is-tuple%1./tuple%1_ x) (height_lt (height (tuple%1./tuple%1/0 x)) (height (Poly%tuple%1. x)))) :pattern ((height (tuple%1./tuple%1/0 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type y (TYPE%tuple%1. T%0&. T%0&)) (ext_eq deep T%0& (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (tuple%1./tuple%1/0 (%Poly%tuple%1. y)))) (ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)) :pattern ((ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x tuple%6.)) (! (= x (%Poly%tuple%6. (Poly%tuple%6. x))) :pattern ((Poly%tuple%6. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (= x (Poly%tuple%6. (%Poly%tuple%6. x)))) :pattern ((has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly) (_4! Poly) (_5! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&) (has_type _4! T%4&) (has_type _5! T%5&)) (has_type (Poly%tuple%6. (tuple%6./tuple%6 _0! _1! _2! _3! _4! _5!)) (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))) :pattern ((has_type (Poly%tuple%6. (tuple%6./tuple%6 _0! _1! _2! _3! _4! _5!)) (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/0 x) (tuple%6./tuple%6/?0 x)) :pattern ((tuple%6./tuple%6/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/0 (%Poly%tuple%6. x)) T%0&)) :pattern ((tuple%6./tuple%6/0 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/1 x) (tuple%6./tuple%6/?1 x)) :pattern ((tuple%6./tuple%6/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/1 (%Poly%tuple%6. x)) T%1&)) :pattern ((tuple%6./tuple%6/1 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/2 x) (tuple%6./tuple%6/?2 x)) :pattern ((tuple%6./tuple%6/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/2 (%Poly%tuple%6. x)) T%2&)) :pattern ((tuple%6./tuple%6/2 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/3 x) (tuple%6./tuple%6/?3 x)) :pattern ((tuple%6./tuple%6/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/3 (%Poly%tuple%6. x)) T%3&)) :pattern ((tuple%6./tuple%6/3 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/4 x) (tuple%6./tuple%6/?4 x)) :pattern ((tuple%6./tuple%6/4 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/4 (%Poly%tuple%6. x)) T%4&)) :pattern ((tuple%6./tuple%6/4 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/5 x) (tuple%6./tuple%6/?5 x)) :pattern ((tuple%6./tuple%6/5 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/5 (%Poly%tuple%6. x)) T%5&)) :pattern ((tuple%6./tuple%6/5 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))))))
(define-fun is-tuple%6./tuple%6_ ((c tuple%6.)) Bool ((_ is tuple%6./tuple%6) c))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/0 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/0 x))))))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/1 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/1 x))))))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/2 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/2 x))))))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/3 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/3 x))))))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/4 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/4 x))))))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/5 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/5 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type y (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (ext_eq deep T%0& (tuple%6./tuple%6/0 (%Poly%tuple%6. x)) (tuple%6./tuple%6/0 (%Poly%tuple%6. y))) (ext_eq deep T%1& (tuple%6./tuple%6/1 (%Poly%tuple%6. x)) (tuple%6./tuple%6/1 (%Poly%tuple%6. y))) (ext_eq deep T%2& (tuple%6./tuple%6/2 (%Poly%tuple%6. x)) (tuple%6./tuple%6/2 (%Poly%tuple%6. y))) (ext_eq deep T%3& (tuple%6./tuple%6/3 (%Poly%tuple%6. x)) (tuple%6./tuple%6/3 (%Poly%tuple%6. y))) (ext_eq deep T%4& (tuple%6./tuple%6/4 (%Poly%tuple%6. x)) (tuple%6./tuple%6/4 (%Poly%tuple%6. y))) (ext_eq deep T%5& (tuple%6./tuple%6/5 (%Poly%tuple%6. x)) (tuple%6./tuple%6/5 (%Poly%tuple%6. y)))) (ext_eq deep (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&) x y)) :pattern ((ext_eq deep (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&) x y)))))
(declare-fun tr_bound%vstd!slice.SliceAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.cast.VTypeCast. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.default.SpecDefault. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.isconst.IsConstant. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecOrd. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecEq. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecNot. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecAdd. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecSub. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecMul. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.range_set.VRange. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.security.sectype.SecMemType. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.integer.IntValue. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.integer.IntOrd. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.size_s.SpecSize. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.wellformed.WellFormed. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!primitives_e.sectype.ToSecSeq. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!primitives_e.sectype.FromSecSeq. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!addr_e.addr_interface.SpecAddrTrait. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!addr_e.addr_interface.SpecPageTrait. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!addr_e.addr_interface.AddrTrait. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!addr_e.addr_interface.PageTrait. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!addr_e.range_interface.MemRangeInterface. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!addr_e.range_interface.GeneratedMemRangeInterface. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!addr_e.range_interface.MemRangeSeqInterface. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!lock.spin_perm_s.MapRawLockTrait. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!ptr.snp.snp_u.SnpMemAttrTrait. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!global.IsConsole. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!vbox.vbox.MutFnTrait. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!vbox.vbox.MutFnWithCSTrait. (Dcr Type Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!vbox.vbox.BorrowFnTrait. (Dcr Type Dcr Type Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 16)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 16)) (UINT 16)))
(assert (= (proj%%vstd!view.View./V $ (UINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 32)) (UINT 32)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT 128)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 128)) (UINT 128)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&))))))
(assert (forall ((A0&. Dcr) (A0& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&)) (TYPE%tuple%1. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_len%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(declare-fun vstd!std_specs.vec.vec_clone_trigger.? (Dcr Type Dcr Type Poly Poly) Bool)
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.take.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.skip.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.filter.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.insert.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.full.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set_lib.impl&%0.is_empty.? (Dcr Type Poly) Bool)
(declare-fun vstd!slice.SliceAdditionalSpecFns.view.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!slice.SliceAdditionalSpecFns.view%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!string.impl&%0.view.? (Poly) vstd!seq.Seq<char.>.)
(declare-fun vstd!string.impl&%0.is_ascii.? (Poly) Bool)
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.math.pow_s.spec_nat_pow2.? (Poly) Int)
(declare-fun verismo!tspec.math.pow_s.rec%spec_nat_pow2.? (Poly Fuel) Int)
(declare-fun verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? (Poly) Bool)
(declare-fun verismo!tspec.security.sectype.impl&%0.is_Symbol.? (Poly) Bool)
(declare-fun verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.? (Poly) Bool)
(declare-fun verismo!tspec.security.sectype.impl&%0.is_Secret.? (Poly) Bool)
(declare-fun verismo!tspec.security.sectype.impl&%2.spec_new.? (Dcr Type Dcr Type Poly Poly Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(declare-fun verismo!tspec.security.sectype.impl&%3.spec_val.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.impl&%3.spec__unused.? (Dcr Type Dcr Type Poly) core!option.Option.)
(declare-fun verismo!tspec.security.sectype.impl&%3.spec_valsets.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.impl&%3.spec_labels.? (Dcr Type Dcr Type Poly) vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)
(declare-fun verismo!tspec.security.sectype.SecMemType.view.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.SecMemType.view%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.impl&%9.spec_new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.impl&%9.wf_value.? (Dcr Type Dcr Type Poly) Bool)
(declare-fun verismo!tspec.security.sectype.impl&%16.wf_vmpl.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-fun verismo!tspec.security.sectype.impl&%16.wf_value.? (Dcr Type Dcr Type Poly) Bool)
(declare-fun verismo!tspec.security.sectype.impl&%16.bop_new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(declare-fun verismo!tspec.security.sectype.impl&%16.uop_new.? (Dcr Type Dcr Type Dcr Type Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(declare-fun verismo!tspec.security.sectype.impl&%16.constant.? (Dcr Type Dcr Type Poly) verismo!tspec.security.sectype.SpecSecType.)
(declare-fun verismo!tspec.security.sectype.impl&%17.spec_constant.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.impl&%20.wf.? (Dcr Type Poly) Bool)
(declare-fun verismo!tspec.security.seq.fn_spec_to_seq_index.? (Dcr Type Poly) %%Function%%)
(declare-fun verismo!tspec.seqlib.seq_multiset.seq_is_sorted.? (Dcr Type Poly Poly) Bool)
(declare-fun verismo!tspec.seqlib.seq_multiset.seq_uop.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.stream.basic.bool_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!tspec.stream.basic.char_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!tspec.stream.basic.u8_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!tspec.stream.basic.u16_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!tspec.stream.basic.u32_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!tspec.stream.basic.u64_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!tspec.stream.basic.u128_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!tspec.stream.basic.usize_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!arch.addr_s.def_s.PAGE_SIZE.? () Int)
(declare-fun verismo!arch.addr_s.def_s.VM_MEM_SIZE.? () Int)
(declare-fun verismo!arch.addr_s.def_s.VM_PAGE_NUM.? () Int)
(declare-fun verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? (Poly) core!option.Option.)
(declare-fun verismo!arch.addr_s.page.impl&%2.value.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.addr_s.page.impl&%2.to_offset.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.addr_s.page.impl&%2.new2.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.page.impl&%2.new.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.page.impl&%3.value.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.addr_s.page.impl&%3.new.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.addr_s.page.impl&%3.new2.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.addr_s.page.impl&%8.first.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.page.impl&%8.offset.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.addr_s.page.impl&%8.len.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.rmp.access_u.impl&%0.view.? (Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun verismo!arch.rmp.access_u.impl&%1.inv.? (Poly) Bool)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_immutable.? (Poly) Bool)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_assigned.? (Poly) Bool)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly) Bool)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? (Poly) Bool)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly) Int)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(declare-fun verismo!arch.rmp.def_s.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun verismo!arch.rmp.def_s.impl&%3.spec_val.? (Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun verismo!arch.rmp.def_s.impl&%4.spec_set_val.? (Poly Poly) verismo!arch.rmp.def_s.RmpEntry.)
(declare-fun verismo!arch.rmp.def_s.impl&%5.spec_new.? (Poly) verismo!arch.rmp.def_s.RmpEntry.)
(declare-fun verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel.? (Poly Poly) Bool)
(declare-fun verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private.? (Poly Poly) Bool)
(declare-fun verismo!arch.rmp.entry_s.impl&%0.is_confidential_to.? (Poly Poly) Bool)
(declare-fun verismo!arch.rmp.entry_s.impl&%0.is_valid.? (Poly) Bool)
(declare-fun verismo!arch.rmp.perm_s.rmp_perm_init.? (Poly) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(declare-fun verismo!boot.init.mshv_alloc.init_allocator_requires.? (Poly Poly Poly Poly Poly Poly) Bool)
(declare-fun verismo!boot.init.mshv_fmt.get_hv_mem_count_ensures.? (Poly Poly) Bool)
(declare-fun verismo!boot.init.mshv_fmt.fmt_hvparam_ensures.? (Poly Poly Poly Poly) Bool)
(declare-fun verismo!boot.mshyper.param_e.impl&%11.spec_cpu_count.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.mshyper.param_e.impl&%11.spec_reserved.? (Poly) Poly)
(declare-fun verismo!boot.mshyper.param_e.impl&%11.spec_mem_table.? (Poly) Poly)
(declare-fun verismo!boot.mshyper.param_e.impl&%13.spec_new.? (Poly Poly Poly) verismo!boot.mshyper.param_e.HvParamTable.)
(declare-fun verismo!boot.mshyper.param_e.impl&%21.range.? (Poly) tuple%2.)
(declare-fun verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? (Poly) Int)
(declare-fun verismo!ptr.snp.snp_u.impl&%0.spec_perms.? (Poly) Int)
(declare-fun verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? (Poly) Int)
(declare-fun verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.? (Poly Poly) verismo!ptr.snp.snp_u.RmpAttrSpec.)
(declare-fun verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.? (Poly Poly) verismo!ptr.snp.snp_u.RmpAttrSpec.)
(declare-fun verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.? (Poly Poly) verismo!ptr.snp.snp_u.RmpAttrSpec.)
(declare-fun verismo!ptr.snp.snp_u.impl&%2.spec_new.? (Poly Poly Poly) verismo!ptr.snp.snp_u.RmpAttrSpec.)
(declare-fun verismo!ptr.snp.snp_u.impl&%3.new.? (Poly) verismo!ptr.snp.snp_u.RmpAttrSpec.)
(declare-fun verismo!ptr.snp.snp_u.impl&%3.to_value.? (Poly) verismo!ptr.snp.snp_u.RmpAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%16.inv.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%16.spec_new.? (Poly) verismo!ptr.snp.snp_u.RmpAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.? (Poly) Int)
(declare-fun verismo!ptr.snp.snp_u.impl&%16.spec_perms.? (Poly) Int)
(declare-fun verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.? (Poly) Int)
(declare-fun verismo!ptr.snp.snp_u.impl&%16.view.? (Poly) verismo!ptr.snp.snp_u.RmpAttrSpec.)
(declare-fun verismo!ptr.snp.snp_u.impl&%17.spec_set_encrypted.? (Poly Poly) verismo!ptr.snp.snp_u.PTAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%18.spec_new.? (Poly Poly Poly) verismo!ptr.snp.snp_u.PTAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%19.spec_w.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%19.spec_x.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? (Poly Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.? (Poly Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.? (Poly Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.? (Poly Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly Poly Poly Poly Poly Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? (Poly) verismo!arch.rmp.def_s.RmpEntry.)
(declare-fun verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? (Poly) vstd!map.Map<int./int.>.)
(declare-fun verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? (Poly) vstd!map.Map<int./int.>.)
(declare-fun verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? (Poly) vstd!map.Map<int./int.>.)
(declare-fun verismo!ptr.snp.snp_u.impl&%24.spec_pte.? (Poly) vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.)
(declare-fun verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.pte.? (Poly) verismo!ptr.snp.snp_u.PTAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.encrypted.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.deterministic_pte.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private.? (Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? (Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.inv_confidential.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.ensures_read.? (Dcr Type Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel.? (Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? (Dcr Type Poly) Poly)
(declare-fun verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? (Dcr Type Poly) Poly)
(declare-fun verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!ptr.snp.snp_u.impl&%31.wf.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%31.init.? (Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%31.allocator_default.? (Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%31.shared.? (Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%35.sw_eq.? (Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly) Bool)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? (Poly) verismo!registers.core_perm_s.CoreIdPerm.)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? (Poly) Int)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? (Poly) Int)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? (Poly) vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.? (Poly Poly) verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? (Poly Poly) verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly Poly Poly Poly) verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.cpu.? (Poly) Int)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.? (Poly) Bool)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.inv.? (Poly) Bool)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? (Poly Poly Poly) Bool)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.only_reg_updated.? (Poly Poly Poly) Bool)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.only_reg_coremode_updated.? (Poly Poly Poly) Bool)
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_accessed.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_write.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_conform.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_exe.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_sys.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_dpl.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_present.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_write.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_present.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%3.new.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%3.to_value.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7.)
(declare-fun verismo!snp.cpu.gdt.impl&%16.inv.? (Poly) Bool)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_new.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7.)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_accessed.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_write.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_conform.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_exe.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_sys.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_dpl.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_present.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%16.view.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%17.spec_avl.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%17.spec_long.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%17.spec_granularity.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%18.spec_set_long.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%19.spec_new.? (Poly Poly Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%20.new.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%20.to_value.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11.)
(declare-fun verismo!snp.cpu.gdt.impl&%33.inv.? (Poly) Bool)
(declare-fun verismo!snp.cpu.gdt.impl&%33.spec_new.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11.)
(declare-fun verismo!snp.cpu.gdt.impl&%33.spec_avl.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%33.spec_long.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%33.spec_granularity.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%33.view.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%36.spec_new.? (Poly Poly Poly Poly Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%37.empty.? (Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%37.new.? (Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%37.to_value.? (Poly) verismo!snp.cpu.gdt.Descriptor.)
(declare-fun verismo!snp.cpu.gdt.impl&%50.inv.? (Poly) Bool)
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_new.? (Poly) verismo!snp.cpu.gdt.Descriptor.)
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%50.view.? (Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%0.spec_snp.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%1.spec_set_snp.? (Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom.? (Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc.? (Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj.? (Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj.? (Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation.? (Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc.? (Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%3.new.? (Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%3.to_value.? (Poly) verismo!snp.cpu.vmsa.SevFeatures.)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.inv.? (Poly) Bool)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_new.? (Poly) verismo!snp.cpu.vmsa.SevFeatures.)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_snp.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_vtom.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.view.? (Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_es.? (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_cs.? (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_ss.? (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_ds.? (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_fs.? (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_gs.? (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? (Poly) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? (Poly) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_efer.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rip.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rax.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%26.spec_set_vmpl.? (Poly Poly) verismo!snp.cpu.vmsa.Vmsa.)
(declare-fun verismo!snp.cpu.vmsa.impl&%26.spec_set_rax.? (Poly Poly) verismo!snp.cpu.vmsa.Vmsa.)
(declare-fun verismo!snp.cpu.vmsa.impl&%26.spec_set_rcx.? (Poly Poly) verismo!snp.cpu.vmsa.Vmsa.)
(declare-fun verismo!snp.cpu.vmsa.impl&%26.spec_set_rdx.? (Poly Poly) verismo!snp.cpu.vmsa.Vmsa.)
(declare-fun verismo!snp.cpu.vmsa.impl&%26.spec_set_rbx.? (Poly Poly) verismo!snp.cpu.vmsa.Vmsa.)
(declare-fun verismo!snp.cpu.vmsa.impl&%26.spec_set_guest_error_code.? (Poly Poly) verismo!snp.cpu.vmsa.Vmsa.)
(declare-fun verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly) verismo!snp.cpu.vmsa.Vmsa.)
(declare-fun verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%65.inv.? (Poly) Bool)
(declare-fun verismo!snp.cpu.vmsa.ensures_init_ap_vmsa.? (Poly Poly Poly Poly Poly) Bool)
(declare-fun verismo!snp.cpu.vmsa.requires_init_ap_vmsa.? (Poly Poly Poly) Bool)
(declare-fun verismo!snp.ghcb.proto_s.SM_TERM_INVALID_PARAM.? () Int)
(declare-fun verismo!snp.ghcb.proto_s.SM_TERM_MEM.? () Int)
(declare-fun verismo!snp.ghcb.proto_e.GHCB_REGID.? (Poly) verismo!arch.reg.RegName.)
(declare-fun verismo!snp.trackedcore.snpmulticore.impl&%0.spec_snpcore.? (Poly) verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-fun verismo!snp.trackedcore.snpmulticore.impl&%0.spec_lockperms.? (Poly) vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>.)
(declare-fun verismo!snp.trackedcore.snpmulticore.impl&%2.spec_new.? (Poly Poly) verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.)
(declare-fun verismo!snp.trackedcore.snpmulticore.impl&%3.inv.? (Poly) Bool)
(declare-fun verismo!snp.trackedcore.snpmulticore.impl&%3.wf_top_pt.? (Poly) Bool)
(declare-fun verismo!snp.trackedcore.snpmulticore.impl&%3.wf_pt.? (Poly) Bool)
(declare-fun verismo!snp.trackedcore.snpmulticore.impl&%3.pte_perms.? (Poly) vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>.)
(declare-fun verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_updated.? (Poly Poly Poly Poly) Bool)
(declare-fun verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_coremode_updated.? (Poly Poly Poly Poly) Bool)
(declare-fun verismo!snp.trackedcore.snpmulticore.snpcore_console_wf.? (Poly Poly) Bool)
(declare-fun verismo!snp.trackedcore.snpmulticore.impl&%4.wf.? (Poly) Bool)
(declare-fun verismo!snp.trackedcore.snpmulticore.impl&%4.wf_core.? (Poly Poly) Bool)
(declare-fun verismo!tspec_e.array.array_t.impl&%2._spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec_e.array.array_t.impl&%2.view.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec_e.array.array_t.impl&%2.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec_e.array.array_t.impl&%4.spec_len.? (Dcr Type Dcr Type) Int)
(declare-fun verismo!tspec.cast.VTypeCast.vspec_cast_to.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.cast.VTypeCast.vspec_cast_to%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.cast.field_at.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.cast.field_set.? (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun verismo!tspec.cast.fn_vspec_cast_to.? (Dcr Type Dcr Type) %%Function%%)
(declare-fun verismo!tspec.default.SpecDefault.spec_default.? (Dcr Type) Poly)
(declare-fun verismo!tspec.default.SpecDefault.spec_default%default%.? (Dcr Type) Poly)
(declare-fun verismo!tspec.isconst.IsConstant.is_constant.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.isconst.IsConstant.is_constant%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.isconst.IsConstant.is_constant_to.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.isconst.IsConstant.is_constant_to%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecOrd.spec_lt.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecOrd.spec_lt%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecOrd.spec_le.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecOrd.spec_le%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecOrd.spec_gt.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecOrd.spec_gt%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecEq.spec_eq.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecEq.spec_eq%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecNot.spec_not.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecNot.spec_not%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecAdd.spec_add.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecAdd.spec_add%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecSub.spec_sub.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecSub.spec_sub%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecMul.spec_mul.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecMul.spec_mul%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.range_set.range.? (Poly Poly) tuple%2.)
(declare-fun verismo!tspec.range_set.VRange.end.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.range_set.VRange.end%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.range_set.inside_range.? (Poly Poly) Bool)
(declare-fun verismo!tspec.range_set.range_disjoint.? (Poly Poly Poly Poly) Bool)
(declare-fun verismo!tspec.range_set.range_disjoint_.? (Poly Poly) Bool)
(declare-fun verismo!tspec.range_set.ranges_disjoint.? (Poly Poly) Bool)
(declare-fun verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_add_int_int_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_sub_int_int_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_mul_int_int_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_not_u64_u64.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_not_u32_u32.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_not_u16_u16.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_not_u8_u8.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_not_usize_usize.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_not_bool_bool.? (Poly) %%Function%%)
(declare-fun verismo!tspec.integer.IntValue.as_int.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntValue.as_int%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntValue.from_int.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntValue.from_int%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntOrd.ord_int.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntOrd.ord_int%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.setlib.uop_to_bop.? (Dcr Type Dcr Type Dcr Type Poly) %%Function%%)
(declare-fun verismo!tspec.setlib.set_op.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun verismo!tspec.size_s.spec_max_count.? (Dcr Type) Int)
(declare-fun verismo!tspec.size_s.SpecSize.spec_size_def.? (Dcr Type) Poly)
(declare-fun verismo!tspec.size_s.SpecSize.spec_size_def%default%.? (Dcr Type) Poly)
(declare-fun verismo!tspec.size_s.spec_size.? (Dcr Type) Int)
(declare-fun verismo!tspec.wellformed.WellFormed.wf.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.wellformed.WellFormed.wf%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!arch.entities.impl&%6.spec_from_int.? (Poly) core!option.Option.)
(declare-fun verismo!arch.entities.impl&%9.is_VMPL0.? (Poly) Bool)
(declare-fun verismo!arch.attack.spec_attack.? (Poly) Bool)
(declare-fun verismo!arch.reg.MSR_GHCB_BASE.? () Int)
(declare-fun verismo!arch.reg.MSR_EFER_BASE.? () Int)
(declare-fun verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? (Dcr Type Poly) Poly)
(declare-fun verismo!primitives_e.sectype.ToSecSeq.sec_bytes%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!primitives_e.seq.recursive_sec_bytes.? (Dcr Type Poly) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun verismo!primitives_e.seq.rec%recursive_sec_bytes.? (Dcr Type Poly Fuel) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun verismo!addr_e.addr_interface.spec_va_to_pa.? (Poly) Int)
(declare-fun verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.SpecAddrTrait.to_page%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.SpecPageTrait.to_addr%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.AddrTrait.spec_to_page.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.AddrTrait.spec_to_page%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.AddrTrait.addrt_to_int%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.AddrTrait.spec_ensures_to_page.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.AddrTrait.spec_ensures_to_page%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.AddrTrait.spec_check_valid_addr_requires.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.AddrTrait.spec_check_valid_addr_requires%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.spec_to_addr%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.paget_to_int.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.paget_to_int%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.range_interface.spec_valid_range.? (Poly Poly) tuple%2.)
(declare-fun verismo!addr_e.range_interface.MemRangeInterface.spec_end_max.? (Dcr Type) Poly)
(declare-fun verismo!addr_e.range_interface.MemRangeInterface.spec_end_max%default%.? (Dcr Type) Poly)
(declare-fun verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.range_interface.MemRangeInterface.spec_real_range%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.range_interface.range_speclt.? (Dcr Type) %%Function%%)
(declare-fun verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_max.? (Dcr Type) Poly)
(declare-fun verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_max%default%.? (Dcr Type) Poly)
(declare-fun verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_sec_max.? (Dcr Type) Poly)
(declare-fun verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_sec_max%default%.? (Dcr Type) Poly)
(declare-fun verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_valid_range.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_valid_range%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.range_interface.GeneratedMemRangeInterface.wf_range.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.range_interface.GeneratedMemRangeInterface.wf_range%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.range_interface.to_range_fn.? (Dcr Type) %%Function%%)
(declare-fun verismo!addr_e.range_interface.MemRangeSeqInterface.to_valid_ranges.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.range_interface.MemRangeSeqInterface.to_valid_ranges%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.range_interface.MemRangeSeqInterface.to_range_seq.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.range_interface.MemRangeSeqInterface.to_range_seq%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.range_interface.empty_ranges.? (Poly) vstd!set.Set<tuple%2<int./nat.>.>.)
(declare-fun verismo!addr_e.range_interface.mem_range_formatted.? (Dcr Type Poly) Bool)
(declare-fun verismo!allocator.linkedlist.impl&%7.inv.? (Poly) Bool)
(declare-fun verismo!allocator.linkedlist.impl&%8.invfn.? (Poly) %%Function%%)
(declare-fun verismo!allocator.linkedlist.impl&%8.view.? (Poly) verismo!allocator.linkedlist.SpecLinkedListAllocator.)
(declare-fun verismo!allocator.linkedlist.impl&%8.spec_minsize.? (Poly) Int)
(declare-fun verismo!boot.linux.impl&%0.spec_bp.? (Poly) verismo!boot.params.BootParams.)
(declare-fun verismo!boot.linux.impl&%0.spec_secret.? (Poly) verismo!security.secret.SnpSecretsPageLayout.)
(declare-fun verismo!boot.linux.impl&%0.spec_cpuid.? (Poly) verismo!snp.cpuid.SnpCpuidTable.)
(declare-fun verismo!boot.linux.impl&%0.spec_gdt.? (Poly) Poly)
(declare-fun verismo!boot.linux.impl&%0.spec_cmdline.? (Poly) Poly)
(declare-fun verismo!boot.linux.impl&%0.spec_ccblob.? (Poly) verismo!boot.linux.CCBlobSevInfo.)
(declare-fun verismo!boot.linux.impl&%0.spec_reserved.? (Poly) Poly)
(declare-fun verismo!boot.linux.impl&%1.spec_set_bp.? (Poly Poly) verismo!boot.linux.BootInfo.)
(declare-fun verismo!boot.linux.impl&%1.spec_set_secret.? (Poly Poly) verismo!boot.linux.BootInfo.)
(declare-fun verismo!boot.linux.impl&%1.spec_set_cpuid.? (Poly Poly) verismo!boot.linux.BootInfo.)
(declare-fun verismo!boot.linux.impl&%1.spec_set_gdt.? (Poly Poly) verismo!boot.linux.BootInfo.)
(declare-fun verismo!boot.linux.impl&%1.spec_set_cmdline.? (Poly Poly) verismo!boot.linux.BootInfo.)
(declare-fun verismo!boot.linux.impl&%1.spec_set_ccblob.? (Poly Poly) verismo!boot.linux.BootInfo.)
(declare-fun verismo!boot.linux.impl&%1.spec_set_reserved.? (Poly Poly) verismo!boot.linux.BootInfo.)
(declare-fun verismo!boot.linux.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly Poly) verismo!boot.linux.BootInfo.)
(declare-fun verismo!boot.linux.impl&%7.spec_bp_offset.? (Poly) Int)
(declare-fun verismo!boot.linux.impl&%7.spec_secret_offset.? (Poly) Int)
(declare-fun verismo!boot.linux.impl&%7.spec_cpuid_offset.? (Poly) Int)
(declare-fun verismo!boot.linux.impl&%7.spec_gdt_offset.? (Poly) Int)
(declare-fun verismo!boot.linux.impl&%7.spec_cmdline_offset.? (Poly) Int)
(declare-fun verismo!boot.linux.impl&%7.spec_ccblob_offset.? (Poly) Int)
(declare-fun verismo!boot.monitor_params.impl&%1.spec_new.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly) verismo!boot.monitor_params.MonitorParams.)
(declare-fun verismo!boot.monitor_params.impl&%2.spec_cpu_count.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.impl&%2.spec_cpuid_page.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.impl&%2.spec_secret_page.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.impl&%2.spec_hv_param.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.impl&%2.spec_validated_entries.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.impl&%2.spec_validated_e820.? (Poly) Poly)
(declare-fun verismo!boot.monitor_params.impl&%2.spec_acpi.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.impl&%2.spec_acpi_size.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.impl&%2.spec_richos_start.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.impl&%2.spec_richos_size.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.impl&%2.spec_richos_cmdline.? (Poly) Poly)
(declare-fun verismo!boot.monitor_params.impl&%2.spec_richos_cmdline_len.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.monitor_params.impl&%10.mp_wf.? (Poly) Bool)
(declare-fun verismo!boot.params.impl&%21.spec__pad0.? (Poly) Poly)
(declare-fun verismo!boot.params.impl&%21.spec_acpi_rsdp_addr.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!boot.params.impl&%21.spec__pad1.? (Poly) Poly)
(declare-fun verismo!boot.params.impl&%21.spec__ext_cmd_line_ptr.? (Poly) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.impl&%21.spec__pad2_0.? (Poly) Poly)
(declare-fun verismo!boot.params.impl&%21.spec_cc_blob_addr.? (Poly) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!boot.params.impl&%21.spec__pad2_1.? (Poly) Poly)
(declare-fun verismo!boot.params.impl&%21.spec_e820_entries.? (Poly) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!boot.params.impl&%21.spec_reserved_4.? (Poly) Poly)
(declare-fun verismo!boot.params.impl&%21.spec_hdr.? (Poly) verismo!boot.params.SetupHeader.)
(declare-fun verismo!boot.params.impl&%21.spec_reserved_5.? (Poly) Poly)
(declare-fun verismo!boot.params.impl&%21.spec_e820.? (Poly) Poly)
(declare-fun verismo!boot.params.impl&%21.spec_reserved_6.? (Poly) Poly)
(declare-fun verismo!boot.params.impl&%22.spec_set_e820_entries.? (Poly Poly) verismo!boot.params.BootParams.)
(declare-fun verismo!boot.params.impl&%22.spec_set_e820.? (Poly Poly) verismo!boot.params.BootParams.)
(declare-fun verismo!boot.params.impl&%23.spec_new.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly) verismo!boot.params.BootParams.)
(declare-fun verismo!boot.params.impl&%30.spec_e820_entries_offset.? (Poly) Int)
(declare-fun verismo!boot.params.impl&%30.spec_e820_offset.? (Poly) Int)
(declare-fun verismo!debug.interface.impl&%7.invfn.? (Poly) %%Function%%)
(declare-fun verismo!lock.spin_perm_s.lockid_to_ptr.? (Poly) Int)
(declare-fun verismo!lock.spin_perm_s.ptrid_to_lockid.? (Poly) Int)
(declare-fun verismo!lock.spin_perm_s.impl&%0.value_invfn.? (Dcr Type Poly) %%Function%%)
(declare-fun verismo!lock.spin_perm_s.impl&%2.spec_new.? (Poly Poly Poly Poly) verismo!lock.spin_perm_s.LockPermToRaw.)
(declare-fun verismo!lock.spin_perm_s.impl&%3.spec_locked.? (Poly) Bool)
(declare-fun verismo!lock.spin_perm_s.impl&%3.spec_cpu.? (Poly) Int)
(declare-fun verismo!lock.spin_perm_s.impl&%3.spec_points_to.? (Poly) verismo!ptr.raw_ptr_s.SnpPointsToBytes.)
(declare-fun verismo!lock.spin_perm_s.impl&%3.spec_invfn.? (Poly) verismo!lock.spin_perm_s.InvRawFn.)
(declare-fun verismo!lock.spin_perm_s.impl&%4.lockid.? (Poly) Int)
(declare-fun verismo!lock.spin_perm_s.impl&%5.view.? (Poly) verismo!lock.spin_perm_s.LockPermToRaw.)
(declare-fun verismo!lock.spin_perm_s.impl&%6.wf.? (Poly) Bool)
(declare-fun verismo!lock.spin_perm_s.impl&%6.wf_for.? (Poly Poly Poly) Bool)
(declare-fun verismo!lock.spin_perm_s.impl&%6.is_unlocked.? (Poly Poly Poly Poly) Bool)
(declare-fun verismo!lock.spin_perm_s.impl&%6.is_locked.? (Poly Poly Poly Poly) Bool)
(declare-fun verismo!lock.spin_perm_s.MapRawLockTrait.inv.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!lock.spin_perm_s.MapRawLockTrait.inv%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!lock.spin_perm_s.MapRawLockTrait.inv_locked.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun verismo!lock.spin_perm_s.MapRawLockTrait.inv_locked%default%.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun verismo!lock.spin_perm_s.MapRawLockTrait.contains_lock.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun verismo!lock.spin_perm_s.MapRawLockTrait.contains_lock%default%.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun verismo!lock.spin_perm_s.MapRawLockTrait.updated_lock.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun verismo!lock.spin_perm_s.MapRawLockTrait.updated_lock%default%.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun verismo!lock.spin_t.impl&%4.id.? (Poly) Int)
(declare-fun verismo!lock.spincell_e.impl&%1.spec_lock.? (Dcr Type Poly) verismo!lock.spin_t.SpinLock.)
(declare-fun verismo!lock.spincell_e.impl&%1.spec_data.? (Dcr Type Poly) Poly)
(declare-fun verismo!lock.spincell_e.impl&%3.spec_new.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!lock.spincell_e.impl&%11.lockid.? (Dcr Type Poly) Int)
(declare-fun verismo!lock.spincell_e.impl&%11.ptrid.? (Dcr Type Poly) Int)
(declare-fun verismo!lock.spincell_e.impl&%11.ptr_range.? (Dcr Type Poly) tuple%2.)
(declare-fun verismo!mem.rawmem_p.impl&%0.wf.? (Poly) Bool)
(declare-fun verismo!mem.rawmem_p.impl&%0.spec_index.? (Poly Poly) verismo!ptr.raw_ptr_s.SnpPointsToBytes.)
(declare-fun verismo!mem.rawmem_p.impl&%0.contains_range.? (Poly Poly) Bool)
(declare-fun verismo!mem.rawmem_p.impl&%0.contains_with_snp_except.? (Poly Poly Poly Poly) Bool)
(declare-fun verismo!mem.rawmem_p.impl&%0.contains_default_except.? (Poly Poly Poly) Bool)
(declare-fun verismo!mem.rawmem_s.impl&%0.wf.? (Poly) Bool)
(declare-fun verismo!pgtable_e.def.PAGE_TABLE_LEVELS.? () Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_present.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_write.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_supervisor.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_pwt.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_pcd.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_accessed.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_dirty.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_psize.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_global.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_bit12.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_encrypted.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_page.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_nx.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_present.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_write.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_pwt.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_pcd.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_accessed.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_dirty.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_psize.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_global.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_bit12.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_page.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_nx.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%3.new.? (Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%3.to_value.? (Poly) verismo!pgtable_e.def.PTE.)
(declare-fun verismo!pgtable_e.def.impl&%16.inv.? (Poly) Bool)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_new.? (Poly) verismo!pgtable_e.def.PTE.)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_present.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_write.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_supervisor.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_pwt.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_pcd.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_accessed.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_dirty.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_psize.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_global.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_bit12.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_encrypted.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_page.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_nx.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.view.? (Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.static_cr3_value.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.top_lvl_idx.? (Poly) tuple%2.)
(declare-fun verismo!pgtable_e.pte.impl&%1.val.? (Poly) verismo!pgtable_e.def.PTE.)
(declare-fun verismo!pgtable_e.pte.impl&%1.wf.? (Poly Poly) Bool)
(declare-fun verismo!pgtable_e.pte.impl&%2.invfn.? (Poly) %%Function%%)
(declare-fun verismo!pgtable_e.pte.impl&%2.view.? (Poly) vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>.)
(declare-fun verismo!pgtable_e.pte.pte_perms_wf_prev.? (Poly Poly Poly) Bool)
(declare-fun verismo!pgtable_e.pte.wf_ptes.? (Poly) Bool)
(declare-fun verismo!pgtable_e.pte.impl&%4.spec_index0.? (Poly) Int)
(declare-fun verismo!pgtable_e.pte.impl&%4.spec_index1.? (Poly) Int)
(declare-fun verismo!pgtable_e.pte.impl&%4.spec_index2.? (Poly) Int)
(declare-fun verismo!pgtable_e.pte.impl&%4.spec_index3.? (Poly) Int)
(declare-fun verismo!pgtable_e.pte.impl&%5.spec_set_index0.? (Poly Poly) verismo!pgtable_e.pte.SpecVAddrIndex.)
(declare-fun verismo!pgtable_e.pte.impl&%5.spec_set_index1.? (Poly Poly) verismo!pgtable_e.pte.SpecVAddrIndex.)
(declare-fun verismo!pgtable_e.pte.impl&%5.spec_set_index2.? (Poly Poly) verismo!pgtable_e.pte.SpecVAddrIndex.)
(declare-fun verismo!pgtable_e.pte.impl&%5.spec_set_index3.? (Poly Poly) verismo!pgtable_e.pte.SpecVAddrIndex.)
(declare-fun verismo!pgtable_e.pte.impl&%6.spec_new.? (Poly Poly Poly Poly) verismo!pgtable_e.pte.SpecVAddrIndex.)
(declare-fun verismo!pgtable_e.pte.impl&%7.new.? (Poly) verismo!pgtable_e.pte.SpecVAddrIndex.)
(declare-fun verismo!pgtable_e.pte.impl&%7.to_value.? (Poly) verismo!pgtable_e.pte.VAddrIndex.)
(declare-fun verismo!pgtable_e.pte.impl&%20.inv.? (Poly) Bool)
(declare-fun verismo!pgtable_e.pte.impl&%20.spec_new.? (Poly) verismo!pgtable_e.pte.VAddrIndex.)
(declare-fun verismo!pgtable_e.pte.impl&%20.spec_index0.? (Poly) Int)
(declare-fun verismo!pgtable_e.pte.impl&%20.spec_index1.? (Poly) Int)
(declare-fun verismo!pgtable_e.pte.impl&%20.spec_index2.? (Poly) Int)
(declare-fun verismo!pgtable_e.pte.impl&%20.spec_index3.? (Poly) Int)
(declare-fun verismo!pgtable_e.pte.impl&%20.view.? (Poly) verismo!pgtable_e.pte.SpecVAddrIndex.)
(declare-fun verismo!ptr.def_s.impl&%19.id.? (Dcr Type Poly) Int)
(declare-fun verismo!ptr.def_s.impl&%20.spec_ptr.? (Dcr Type Poly) Int)
(declare-fun verismo!ptr.def_s.impl&%20.spec_value.? (Dcr Type Poly) core!option.Option.)
(declare-fun verismo!ptr.def_s.impl&%20.spec_snp.? (Dcr Type Poly) verismo!ptr.snp.snp_u.SnpMemAttr.)
(declare-fun verismo!ptr.def_s.impl&%22.spec_new.? (Dcr Type Poly Poly Poly) verismo!ptr.def_s.SnpPointsToData.)
(declare-fun verismo!ptr.def_s.impl&%24.view.? (Dcr Type Poly) verismo!ptr.def_s.SnpPointsToData.)
(declare-fun verismo!ptr.ptr_s.inv_snp_value.? (Dcr Type Poly Poly) Bool)
(declare-fun verismo!ptr.ptr_u.impl&%1.not_null.? (Dcr Type Poly) Bool)
(declare-fun verismo!ptr.ptr_u.impl&%2.id.? (Dcr Type Poly) Int)
(declare-fun verismo!ptr.ptr_u.impl&%2.pptr.? (Dcr Type Poly) Int)
(declare-fun verismo!ptr.ptr_u.impl&%2.value.? (Dcr Type Poly) core!option.Option.)
(declare-fun verismo!ptr.ptr_u.impl&%2.get_value.? (Dcr Type Poly) Poly)
(declare-fun verismo!ptr.ptr_u.impl&%2.wf_value.? (Dcr Type Poly Poly) Bool)
(declare-fun verismo!ptr.ptr_u.impl&%2.wf_at.? (Dcr Type Poly Poly) Bool)
(declare-fun verismo!ptr.ptr_u.impl&%2.wf_not_null_at.? (Dcr Type Poly Poly) Bool)
(declare-fun verismo!ptr.raw_ptr_s.impl&%1.spec_new.? (Poly Poly Poly) verismo!ptr.raw_ptr_s.SnpPointsToBytes.)
(declare-fun verismo!ptr.raw_ptr_s.impl&%2.spec_pptr.? (Poly) Int)
(declare-fun verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes.? (Poly) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun verismo!ptr.raw_ptr_s.impl&%2.spec_snp.? (Poly) verismo!ptr.snp.snp_u.SnpMemAttr.)
(declare-fun verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly) verismo!ptr.raw_ptr_s.SnpPointsToBytes.)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.only_val_updated.? (Poly Poly) Bool)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.size.? (Poly) Int)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly) tuple%2.)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.wf_range.? (Poly Poly) Bool)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.? (Poly Poly) Bool)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.wf_const_default.? (Poly Poly) Bool)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.wf_default.? (Poly Poly) Bool)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.wf_not_null.? (Poly Poly) Bool)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.wf.? (Poly) Bool)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.value.? (Dcr Type Poly) Poly)
(declare-fun verismo!ptr.raw_ptr_t.spec_mem_copy.? (Poly Poly Poly) Bool)
(declare-fun verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_start.? (Poly Poly Poly) Int)
(declare-fun verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_end.? (Poly Poly Poly) Int)
(declare-fun verismo!ptr.raw_ptr_t.spec_mem_copy_page.? (Poly Poly Poly Poly Poly Poly) Bool)
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_cpu.? (Poly) Int)
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_run.? (Poly) Bool)
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_vmpl.? (Poly) Int)
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_count.? (Poly) Int)
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.? (Poly) vstd!seq.Seq<tuple%2<nat./nat.>.>.)
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_sent_mem.? (Poly) vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)
(declare-fun verismo!registers.core_perm_s.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly) verismo!registers.core_perm_s.CoreMode.)
(declare-fun verismo!registers.core_perm_s.impl&%4.view.? (Poly) verismo!registers.core_perm_s.CoreMode.)
(declare-fun verismo!registers.msr_perm_s.impl&%0.shared.? (Dcr Type Poly) Bool)
(declare-fun verismo!registers.msr_perm_s.impl&%0.value.? (Dcr Type Poly) Poly)
(declare-fun verismo!registers.msr_perm_s.impl&%1.wf.? (Dcr Type Poly) Bool)
(declare-fun verismo!registers.msr_perm_s.impl&%2.view.? (Dcr Type Poly) verismo!registers.msr_perm_s.RegisterPermValue.)
(declare-fun verismo!registers.msr_perm_s.impl&%2.cpu.? (Poly) Int)
(declare-fun verismo!registers.msr_perm_s.impl&%2.id.? (Poly) verismo!arch.reg.RegName.)
(declare-fun verismo!registers.msr_perm_s.impl&%2.shared.? (Poly) Bool)
(declare-fun verismo!registers.msr_perm_s.impl&%2.val.? (Dcr Type Poly) Poly)
(declare-fun verismo!registers.msr_perm_s.impl&%2.wf.? (Poly) Bool)
(declare-fun verismo!security.mem.spec_is_default_pages_const_to_vmpl.? (Poly Poly Poly Poly) Bool)
(declare-fun verismo!security.mem.RICHOS_VMPL.? () Int)
(declare-fun verismo!security.mem.impl&%0.spec_read.? (Poly) Int)
(declare-fun verismo!security.mem.impl&%0.spec_write.? (Poly) Int)
(declare-fun verismo!security.mem.impl&%0.spec_user_exe.? (Poly) Int)
(declare-fun verismo!security.mem.impl&%0.spec_kern_exe.? (Poly) Int)
(declare-fun verismo!security.mem.impl&%1.spec_set_read.? (Poly Poly) verismo!security.mem.OSMemPermSpec.)
(declare-fun verismo!security.mem.impl&%1.spec_set_write.? (Poly Poly) verismo!security.mem.OSMemPermSpec.)
(declare-fun verismo!security.mem.impl&%1.spec_set_user_exe.? (Poly Poly) verismo!security.mem.OSMemPermSpec.)
(declare-fun verismo!security.mem.impl&%1.spec_set_kern_exe.? (Poly Poly) verismo!security.mem.OSMemPermSpec.)
(declare-fun verismo!security.mem.impl&%2.spec_new.? (Poly Poly Poly Poly) verismo!security.mem.OSMemPermSpec.)
(declare-fun verismo!security.mem.impl&%3.new.? (Poly) verismo!security.mem.OSMemPermSpec.)
(declare-fun verismo!security.mem.impl&%3.to_value.? (Poly) verismo!security.mem.OSMemPerm.)
(declare-fun verismo!security.mem.impl&%16.inv.? (Poly) Bool)
(declare-fun verismo!security.mem.impl&%16.spec_new.? (Poly) verismo!security.mem.OSMemPerm.)
(declare-fun verismo!security.mem.impl&%16.spec_read.? (Poly) Int)
(declare-fun verismo!security.mem.impl&%16.spec_write.? (Poly) Int)
(declare-fun verismo!security.mem.impl&%16.spec_user_exe.? (Poly) Int)
(declare-fun verismo!security.mem.impl&%16.spec_kern_exe.? (Poly) Int)
(declare-fun verismo!security.mem.impl&%16.view.? (Poly) verismo!security.mem.OSMemPermSpec.)
(declare-fun verismo!security.mem.impl&%18.ram.? (Poly) verismo!security.mem.OSMemPermSpec.)
(declare-fun verismo!security.mem.impl&%18.readonly.? (Poly) verismo!security.mem.OSMemPermSpec.)
(declare-fun verismo!security.mem.impl&%19.to_page_perm.? (Poly) vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)
(declare-fun verismo!security.mem.os_mem_valid_snp.? (Poly Poly) Bool)
(declare-fun verismo!security.mem.spec_contains_page_perm.? (Poly Poly Poly) Bool)
(declare-fun verismo!security.mem.spec_contains_page_perms.? (Poly Poly Poly Poly) Bool)
(declare-fun verismo!security.mem.impl&%28.spec_osperm.? (Poly) verismo!security.mem.OSMemPerm.)
(declare-fun verismo!security.mem.impl&%28.open_wf.? (Poly) Bool)
(declare-fun verismo!security.mem.impl&%28.closed_wf.? (Poly) Bool)
(declare-fun verismo!security.mem.impl&%28.wf.? (Poly) Bool)
(declare-fun verismo!security.mem.impl&%28.spec_start.? (Poly) Int)
(declare-fun verismo!security.mem.impl&%28.spec_end.? (Poly) Int)
(declare-fun verismo!security.mem.osmem_wf.? (Poly) Bool)
(declare-fun verismo!security.secret.impl&%0.spec_version.? (Poly) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!security.secret.impl&%0.spec_imien.? (Poly) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!security.secret.impl&%0.spec_fms.? (Poly) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!security.secret.impl&%0.spec_reserved_2.? (Poly) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!security.secret.impl&%0.spec_gosvw.? (Poly) Poly)
(declare-fun verismo!security.secret.impl&%0.spec_vmpck0.? (Poly) Poly)
(declare-fun verismo!security.secret.impl&%0.spec_vmpck1.? (Poly) Poly)
(declare-fun verismo!security.secret.impl&%0.spec_vmpck2.? (Poly) Poly)
(declare-fun verismo!security.secret.impl&%0.spec_vmpck3.? (Poly) Poly)
(declare-fun verismo!security.secret.impl&%0.spec_os_area.? (Poly) verismo!security.SecretsOSArea.)
(declare-fun verismo!security.secret.impl&%0.spec_reserved_3.? (Poly) Poly)
(declare-fun verismo!security.secret.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly) verismo!security.secret.SnpSecretsPageLayout.)
(declare-fun verismo!security.secret.impl&%12.spec_authtag.? (Poly) Poly)
(declare-fun verismo!security.secret.impl&%12.spec_msg_seqno.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!security.secret.impl&%12.spec_reserved1.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!security.secret.impl&%12.spec_algo.? (Poly) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!security.secret.impl&%12.spec_hdr_version.? (Poly) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!security.secret.impl&%12.spec_hdr_sz.? (Poly) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!security.secret.impl&%12.spec_msg_type.? (Poly) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!security.secret.impl&%12.spec_msg_version.? (Poly) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!security.secret.impl&%12.spec_msg_sz.? (Poly) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!security.secret.impl&%12.spec_reserved2.? (Poly) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!security.secret.impl&%12.spec_msg_vmpck.? (Poly) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!security.secret.impl&%12.spec_reserved3.? (Poly) Poly)
(declare-fun verismo!security.secret.impl&%13.spec_set_authtag.? (Poly Poly) verismo!security.secret.SnpGuestMsgHdr.)
(declare-fun verismo!security.secret.impl&%13.spec_set_algo.? (Poly Poly) verismo!security.secret.SnpGuestMsgHdr.)
(declare-fun verismo!security.secret.impl&%14.spec_new.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly) verismo!security.secret.SnpGuestMsgHdr.)
(declare-fun verismo!security.secret.impl&%21.spec_authtag_offset.? (Poly) Int)
(declare-fun verismo!security.secret.impl&%21.spec_algo_offset.? (Poly) Int)
(declare-fun verismo!security.secret.impl&%33.closed_wf_mastersecret.? (Poly) Bool)
(declare-fun verismo!security.secret.impl&%33.wf_mastersecret.? (Poly) Bool)
(declare-fun verismo!snp.mem.spec_is_shared_page_perms.? (Poly Poly Poly) Bool)
(declare-fun verismo!vbox.vbox.spec_box_size.? (Poly) Int)
(declare-fun verismo!vbox.vbox.impl&%4.is_page.? (Dcr Type Poly) Bool)
(declare-fun verismo!vbox.vbox.impl&%4.is_shared_page.? (Dcr Type Poly) Bool)
(declare-fun verismo!vbox.vbox.impl&%4.is_default_page.? (Dcr Type Poly) Bool)
(declare-fun verismo!vbox.vbox.impl&%6.view.? (Dcr Type Poly) Poly)
(declare-fun verismo!vbox.vbox.impl&%6.id.? (Dcr Type Poly) Int)
(declare-fun verismo!vbox.vbox.impl&%6.snp.? (Dcr Type Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!vbox.vbox.impl&%6.only_val_updated.? (Dcr Type Poly Poly) Bool)
(declare-fun verismo!vbox.vbox.MutFnTrait.spec_update_requires.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!vbox.vbox.MutFnTrait.spec_update_requires%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!vbox.vbox.MutFnTrait.spec_update.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) Poly)
(declare-fun verismo!vbox.vbox.MutFnTrait.spec_update%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) Poly)
(declare-fun verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs_requires.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs_requires%default%.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly Poly Poly) Poly)
(declare-fun verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs%default%.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly Poly Poly) Poly)
(declare-fun verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun verismo!tspec.spec_unused.? (Dcr Type) Poly)
(declare-fun verismo!bsp.impl&%0.inv_ac.? (Poly) Bool)
(declare-fun verismo!linkedlist.impl&%18.view.? (Dcr Type Poly) Poly)
(declare-fun verismo!global.g_range.? (Poly) tuple%2.)
(declare-fun verismo!global.spec_ALLOCATOR.? (Poly) verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>.)
(declare-fun verismo!global.spec_ALLOCATOR_range.? (Poly) tuple%2.)
(declare-fun verismo!global.spec_ALLOCATOR_lockid.? (Poly) Int)
(declare-fun verismo!global.contains_ALLOCATOR.? (Poly) Bool)
(declare-fun verismo!global.spec_CONSOLE.? (Poly) verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>.)
(declare-fun verismo!global.spec_CONSOLE_range.? (Poly) tuple%2.)
(declare-fun verismo!global.spec_CONSOLE_lockid.? (Poly) Int)
(declare-fun verismo!global.contains_CONSOLE.? (Poly) Bool)
(declare-fun verismo!global.spec_PT.? (Poly) verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>.)
(declare-fun verismo!global.spec_PT_range.? (Poly) tuple%2.)
(declare-fun verismo!global.spec_PT_lockid.? (Poly) Int)
(declare-fun verismo!global.contains_PT.? (Poly) Bool)
(declare-fun verismo!global.spec_SEC_PERM.? (Poly) verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>.)
(declare-fun verismo!global.spec_SEC_PERM_range.? (Poly) tuple%2.)
(declare-fun verismo!global.spec_SEC_PERM_lockid.? (Poly) Int)
(declare-fun verismo!global.spec_OSMEM.? (Poly) verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>.)
(declare-fun verismo!global.spec_OSMEM_range.? (Poly) tuple%2.)
(declare-fun verismo!global.spec_OSMEM_lockid.? (Poly) Int)
(declare-fun verismo!global.spec_RICHOS_VMSA.? (Poly) verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>.)
(declare-fun verismo!global.spec_RICHOS_VMSA_range.? (Poly) tuple%2.)
(declare-fun verismo!global.spec_RICHOS_VMSA_lockid.? (Poly) Int)
(declare-fun verismo!global.spec_PCR.? (Poly) Poly)
(declare-fun verismo!global.spec_PCR_range.? (Poly) tuple%2.)
(declare-fun verismo!global.spec_PCR_lockid.? (Poly) Int)
(declare-fun verismo!global.IsConsole.is_console.? (Dcr Type Poly) Poly)
(declare-fun verismo!global.IsConsole.is_console%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!security.impl&%9.spec_snphdr.? (Poly) verismo!security.secret.SnpGuestMsgHdr.)
(declare-fun verismo!security.impl&%9.spec_payload.? (Poly) Poly)
(declare-fun verismo!security.impl&%10.spec_set_snphdr.? (Poly Poly) verismo!security.SnpGuestMsg.)
(declare-fun verismo!security.impl&%10.spec_set_payload.? (Poly Poly) verismo!security.SnpGuestMsg.)
(declare-fun verismo!security.impl&%11.spec_new.? (Poly Poly) verismo!security.SnpGuestMsg.)
(declare-fun verismo!security.impl&%16.spec_snphdr_offset.? (Poly) Int)
(declare-fun verismo!security.impl&%16.spec_payload_offset.? (Poly) Int)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.isconst.IsConstant.is_constant.? Self%&. Self%& self!) BOOL)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? Self%&. Self%& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (vmpl! Poly)) (! (=> (and (has_type self! Self%&) (has_type vmpl! NAT)) (has_type (verismo!tspec.isconst.IsConstant.is_constant_to.? Self%&. Self%& self! vmpl!) BOOL)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? Self%&. Self%& self! vmpl!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.wellformed.WellFormed.wf.? Self%&. Self%& self!) BOOL)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? Self%&. Self%& self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (has_type (Poly%verismo!arch.reg.RegName. (verismo!registers.msr_perm_s.impl&%2.id.? self!)) TYPE%verismo!arch.reg.RegName.)) :pattern ((verismo!registers.msr_perm_s.impl&%2.id.? self!)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (has_type (verismo!registers.msr_perm_s.impl&%2.val.? T&. T& self!) T&)) :pattern ((verismo!registers.msr_perm_s.impl&%2.val.? T&. T& self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (<= 0 (verismo!registers.msr_perm_s.impl&%2.cpu.? self!))) :pattern ((verismo!registers.msr_perm_s.impl&%2.cpu.? self!)))))
(assert (fuel_bool_default fuel%verismo!registers.msr_perm_s.impl&%2.view.))
(assert (=> (fuel_bool fuel%verismo!registers.msr_perm_s.impl&%2.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue (%I (I (verismo!registers.msr_perm_s.impl&%2.cpu.? self!))) (%Poly%verismo!arch.reg.RegName. (Poly%verismo!arch.reg.RegName. (verismo!registers.msr_perm_s.impl&%2.id.? self!))) (%B (B (verismo!registers.msr_perm_s.impl&%2.shared.? self!))) (verismo!registers.msr_perm_s.impl&%2.val.? T&. T& self!))) :pattern ((verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (has_type (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!)) (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))) :pattern ((verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!registers.msr_perm_s.impl&%0.shared.))
(assert (=> (fuel_bool fuel%verismo!registers.msr_perm_s.impl&%0.shared.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!registers.msr_perm_s.impl&%0.shared.? T&. T& self!) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/shared (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. self!))) :pattern ((verismo!registers.msr_perm_s.impl&%0.shared.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!registers.msr_perm_s.impl&%0.value.))
(assert (=> (fuel_bool fuel%verismo!registers.msr_perm_s.impl&%0.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. self!))) :pattern ((verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&)) (has_type (verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!) T&)) :pattern ((verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!)))))
(declare-fun ens%core!clone.Clone.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (a! Poly) (%return! Poly)) (! (= (ens%core!clone.Clone.clone. Self%&. Self%& a! %return!) (has_type %return! Self%&)) :pattern ((ens%core!clone.Clone.clone. Self%&. Self%& a! %return!)))))
(assert (forall ((tmp%%$ Poly) (Self%&. Dcr) (Self%& Type)) (! (=> (has_type tmp%%$ (TYPE%tuple%1. (REF Self%&.) Self%&)) (=> (let ((a$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) true) (closure_req (FNDEF%core!clone.Clone.clone. Self%&. Self%&) $ (TYPE%tuple%1. (REF Self%&.) Self%&) (F fndef_singleton) tmp%%$))) :pattern ((closure_req (FNDEF%core!clone.Clone.clone. Self%&. Self%&) $ (TYPE%tuple%1. (REF Self%&.) Self%&) (F fndef_singleton) tmp%%$)))))
(declare-fun ens%core!clone.impls.impl&%6.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%6.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 8) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%6.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 8))) (has_type res$ (UINT 8))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 8)) $ (TYPE%tuple%1. (REF $) (UINT 8)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 8)) $ (TYPE%tuple%1. (REF $) (UINT 8)) (F fndef_singleton) tmp%%$ res$)))))
(declare-fun ens%core!clone.impls.impl&%7.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%7.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 16) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%7.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 16))) (has_type res$ (UINT 16))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 16)) $ (TYPE%tuple%1. (REF $) (UINT 16)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 16)) $ (TYPE%tuple%1. (REF $) (UINT 16)) (F fndef_singleton) tmp%%$ res$)))))
(declare-fun ens%core!clone.impls.impl&%8.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%8.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 32) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%8.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 32))) (has_type res$ (UINT 32))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 32)) $ (TYPE%tuple%1. (REF $) (UINT 32)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 32)) $ (TYPE%tuple%1. (REF $) (UINT 32)) (F fndef_singleton) tmp%%$ res$)))))
(declare-fun ens%core!clone.impls.impl&%9.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%9.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 64) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%9.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 64))) (has_type res$ (UINT 64))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 64)) $ (TYPE%tuple%1. (REF $) (UINT 64)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 64)) $ (TYPE%tuple%1. (REF $) (UINT 64)) (F fndef_singleton) tmp%%$ res$)))))
(declare-fun ens%core!clone.impls.impl&%10.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%10.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 128) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%10.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 128))) (has_type res$ (UINT 128))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 128)) $ (TYPE%tuple%1. (REF $) (UINT 128)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 128)) $ (TYPE%tuple%1. (REF $) (UINT 128)) (F fndef_singleton) tmp%%$ res$)))))
(declare-fun ens%core!clone.impls.impl&%5.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%5.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT SZ) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%5.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT SZ))) (has_type res$ (UINT SZ))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT SZ)) $ (TYPE%tuple%1. (REF $) (UINT SZ)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT SZ)) $ (TYPE%tuple%1. (REF $) (UINT SZ)) (F fndef_singleton) tmp%%$ res$)))))
(declare-fun ens%core!clone.impls.impl&%19.clone. (Poly Poly) Bool)
(assert (forall ((b! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%19.clone. b! res!) (and (ens%core!clone.Clone.clone. $ BOOL b! res!) (= res! b!))) :pattern ((ens%core!clone.impls.impl&%19.clone. b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) BOOL)) (has_type res$ BOOL)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ BOOL) $ (TYPE%tuple%1. (REF $) BOOL) (F fndef_singleton) tmp%%$ res$) (let ((b$ (%B (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%B res$) b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ BOOL) $ (TYPE%tuple%1. (REF $) BOOL) (F fndef_singleton) tmp%%$ res$)))))
(declare-fun ens%core!clone.impls.impl&%3.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%3.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (REF T&.) T& b! res!) (= res! b!))) :pattern ((ens%core!clone.impls.impl&%3.clone. T&. T& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (REF T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (REF T&.) T&) $ (TYPE%tuple%1. (REF (REF T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (REF T&.) T&) $ (TYPE%tuple%1. (REF (REF T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(declare-fun ens%builtin!impl&%4.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%builtin!impl&%4.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (TRACKED T&.) T& b! res!) (= res! b!))) :pattern ((ens%builtin!impl&%4.clone. T&. T& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (TRACKED T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (TRACKED T&.) T&) $ (TYPE%tuple%1. (REF (TRACKED T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (TRACKED T&.) T&) $ (TYPE%tuple%1. (REF (TRACKED T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(declare-fun ens%builtin!impl&%2.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%builtin!impl&%2.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (GHOST T&.) T& b! res!) (= res! b!))) :pattern ((ens%builtin!impl&%2.clone. T&. T& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (GHOST T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (GHOST T&.) T&) $ (TYPE%tuple%1. (REF (GHOST T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (GHOST T&.) T&) $ (TYPE%tuple%1. (REF (GHOST T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%0 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!) T&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Ok_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Ok_0.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (core!result.Result./Ok/0 (%Poly%core!result.Result. self!))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? Self%&. Self%& T&. T& self!) NAT)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? Self%&. Self%& T&. T& self!)))))
(declare-fun req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (%I (vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? Self%&. Self%& T&. T& self!)))))) :pattern ((req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(declare-fun req%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int)) (! (= (req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!) (=> %%global_location_label%%3 (< i! (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!))))) :pattern ((req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!)))))
(declare-fun ens%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!) (and (has_type element! T&) (= element! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (I i!))))) :pattern ((ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!)))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)))))
(declare-fun ens%vstd!std_specs.vec.axiom_spec_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (= (ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!)))))
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!)))))
(declare-fun ens%alloc!vec.impl&%1.len. (Dcr Type Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (len! Int)) (! (= (ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!) (and (uInv SZ len!) (= len! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec!)))) :pattern ((ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%4 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%5 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)))))
(declare-fun ens%alloc!vec.impl&%1.append. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (pre%other! Poly) (other! Poly)) (! (= (ens%alloc!vec.impl&%1.append. T&. T& A&. A& pre%vec! vec! pre%other! other!) (and (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (has_type other! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq.Seq.add.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%other!))))) :pattern ((ens%alloc!vec.impl&%1.append. T&. T& A&. A& pre%vec! vec! pre%other! other!)))))
(declare-fun req%vstd!seq_lib.impl&%0.insert. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!) (=> %%global_location_label%%6 (and (<= 0 (%I i!)) (<= (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!)))))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.insert.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.insert.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) a!) (vstd!seq.Seq.subrange.? A&. A& self! i! (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!)))))
(declare-fun req%alloc!vec.impl&%1.insert. (Dcr Type Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (i! Int) (element! Poly)) (! (= (req%alloc!vec.impl&%1.insert. T&. T& A&. A& pre%vec! i! element!) (=> %%global_location_label%%7 (<= i! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& pre%vec!)))) :pattern ((req%alloc!vec.impl&%1.insert. T&. T& A&. A& pre%vec! i! element!)))))
(declare-fun ens%alloc!vec.impl&%1.insert. (Dcr Type Dcr Type Poly Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%alloc!vec.impl&%1.insert. T&. T& A&. A& pre%vec! vec! i! element!) (and (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq_lib.impl&%0.insert.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) (I i!) element!)))) :pattern ((ens%alloc!vec.impl&%1.insert. T&. T& A&. A& pre%vec! vec! i! element!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!) i!)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!))))))
(declare-fun req%vstd!seq_lib.impl&%0.remove. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!) (=> %%global_location_label%%8 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!)))))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.remove.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.remove.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) (vstd!seq.Seq.subrange.? A&. A& self! (I (Add (%I i!) 1)) (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!)))))
(declare-fun req%alloc!vec.impl&%1.remove. (Dcr Type Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (i! Int)) (! (= (req%alloc!vec.impl&%1.remove. T&. T& A&. A& pre%vec! i!) (=> %%global_location_label%%9 (< i! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& pre%vec!)))) :pattern ((req%alloc!vec.impl&%1.remove. T&. T& A&. A& pre%vec! i!)))))
(declare-fun ens%alloc!vec.impl&%1.remove. (Dcr Type Dcr Type Poly Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%alloc!vec.impl&%1.remove. T&. T& A&. A& pre%vec! vec! i! element!) (and (has_type element! T&) (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= element! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) (I i!))) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq_lib.impl&%0.remove.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) (I i!))))) :pattern ((ens%alloc!vec.impl&%1.remove. T&. T& A&. A& pre%vec! vec! i! element!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!slice.SliceAdditionalSpecFns.view.? Self%&. Self%& T&. T& self!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!slice.SliceAdditionalSpecFns.view.? Self%&. Self%& T&. T& self!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.vec.vec_clone_trigger.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.vec_clone_trigger.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v1! Poly) (v2! Poly)) (! (= (vstd!std_specs.vec.vec_clone_trigger.? T&. T& A&. A& v1! v2!) true) :pattern ((vstd!std_specs.vec.vec_clone_trigger.? T&. T& A&. A& v1! v2!))))))
(declare-fun ens%alloc!vec.impl&%10.clone. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (res! Poly)) (! (= (ens%alloc!vec.impl&%10.clone. T&. T& A&. A& vec! res!) (and (ens%core!clone.Clone.clone. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec! res!) (= (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& res!) (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec!))) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) i$))) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) res!) i$)))) :pattern ((vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) i$)) :pattern ((tuple%1./tuple%1 (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) i$))) :pattern ((vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) res!) i$)) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) i$))) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) res!) i$))))) (vstd!std_specs.vec.vec_clone_trigger.? T&. T& A&. A& vec! res!) (=> (ext_eq false (TYPE%vstd!seq.Seq. T&. T&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) res!)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) res!))))) :pattern ((ens%alloc!vec.impl&%10.clone. T&. T& A&. A& vec! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (TYPE%alloc!vec.Vec. T&. T& A&. A&))) (has_type res$ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $ (TYPE%tuple%1. (REF $) (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (F fndef_singleton) tmp%%$ res$) (let ((vec$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (and (and (and (= (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& res$) (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec$)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec$))) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec$) i$))) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) res$) i$)))) :pattern ((vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec$) i$)) :pattern ((tuple%1./tuple%1 (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec$) i$))) :pattern ((vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) res$) i$)) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec$) i$))) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) res$) i$)))))) (vstd!std_specs.vec.vec_clone_trigger.? T&. T& A&. A& vec$ res$)) (=> (ext_eq false (TYPE%vstd!seq.Seq. T&. T&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec$) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) res$)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec$) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) res$))))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $ (TYPE%tuple%1. (REF $) (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (F fndef_singleton) tmp%%$ res$)))))
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%10 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.size_of.? V&. V&)) :pattern ((vstd!layout.size_of.? V&. V&)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_empty. (Dcr Type Dcr Type Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (out_v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_empty. K&. K& V&. V& out_v!) (and (has_type out_v! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= out_v! (vstd!map.impl&%0.empty.? K&. K& V&. V&)))) :pattern ((ens%vstd!map.impl&%0.tracked_empty. K&. K& V&. V& out_v!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_insert. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!) (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.insert.? K&. K& V&. V& pre%self! key! value!)))) :pattern ((ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!)))))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%12 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%13 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%14 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%15 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))))))
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)))))
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%16 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%17 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))))))
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%18 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%19 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)))))
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%20 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))))))
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))))))
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)))))
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))))))
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%21 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))))))
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%22 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%23 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%24 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))))))
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%25 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)))))
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%26 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%27 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%28 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)))))
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%29 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))))))
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%30 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%31 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))))))
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%32 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%33 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%34 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)))))
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (has_type (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)))))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$))))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!))))))
(declare-fun ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. (Dcr Type Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A&. A& self! pred!) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!))))) (and (%B (%%apply%%0 pred! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$))) (vstd!seq_lib.impl&%0.contains.? A&. A& self! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 pred! (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) (vstd!seq.Seq.index.? A&. A& self! i$))))) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!))) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A&. A& self! pred!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (and (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)))) (and (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))) (vstd!seq_lib.impl&%0.contains.? A&. A& self! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))))) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!))))))
(declare-fun ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. (Dcr Type Poly Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (pred! %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A&. A& a! b! pred!) (= (vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) (Poly%fun%1. pred!)) (vstd!seq.Seq.add.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& a! (Poly%fun%1. pred!)) (vstd!seq_lib.impl&%0.filter.? A&. A& b! (Poly%fun%1. pred!))))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A&. A& a! b! pred!)))))
(assert (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (pred! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (= (vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!) (vstd!seq.Seq.add.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& a! pred!) (vstd!seq_lib.impl&%0.filter.? A&. A& b! pred!)))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!)))))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%0 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)))))
(declare-fun ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (= (ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A&. A& seq!) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A&. A& seq!)))))
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)))))
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)))))
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)))))
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%35 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)))))
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)))))
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%36 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)))))
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%37 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)))))
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)))))
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)))))
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)))))
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)))))
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))))))
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%38 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)))))
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%39 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%40 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%41 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%42 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))))))
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%43 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))))))
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%44 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)))) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)))))
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%45 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%46 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%47 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%48 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%49 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)))))
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%50 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%51 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.is_empty.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set_lib.impl&%0.is_empty.? A&. A& self!) (= (vstd!set.impl&%0.len.? A&. A& self!) 0)) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& self!))))))
(declare-fun req%vstd!set_lib.axiom_is_empty. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%52 Bool)
(declare-const %%global_location_label%%53 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set_lib.axiom_is_empty. A&. A& s!) (and (=> %%global_location_label%%52 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%53 (not (vstd!set_lib.impl&%0.is_empty.? A&. A& s!))))) :pattern ((req%vstd!set_lib.axiom_is_empty. A&. A& s!)))))
(declare-fun ens%vstd!set_lib.axiom_is_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set_lib.axiom_is_empty. A&. A& s!) (exists ((a$ Poly)) (! (and (has_type a$ A&) (vstd!set.impl&%0.contains.? A&. A& s! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a$))))) :pattern ((ens%vstd!set_lib.axiom_is_empty. A&. A& s!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (vstd!set_lib.impl&%0.is_empty.? A&. A& s!))) (exists ((a$ Poly)) (! (and (has_type a$ A&) (vstd!set.impl&%0.contains.? A&. A& s! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a$)))))) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& s!)))))
(declare-fun ens%vstd!string.axiom_str_literal_is_ascii. (StrSlice) Bool)
(assert (forall ((s! StrSlice)) (! (= (ens%vstd!string.axiom_str_literal_is_ascii. s!) (= (vstd!string.impl&%0.is_ascii.? (S s!)) (str%strslice_is_ascii s!))) :pattern ((ens%vstd!string.axiom_str_literal_is_ascii. s!)))))
(assert (forall ((s! Poly)) (! (=> (has_type s! STRSLICE) (= (vstd!string.impl&%0.is_ascii.? s!) (str%strslice_is_ascii (%S s!)))) :pattern ((vstd!string.impl&%0.is_ascii.? s!)))))
(declare-fun ens%vstd!string.axiom_str_literal_len. (StrSlice) Bool)
(assert (forall ((s! StrSlice)) (! (= (ens%vstd!string.axiom_str_literal_len. s!) (= (vstd!seq.Seq.len.? $ CHAR (Poly%vstd!seq.Seq<char.>. (vstd!string.impl&%0.view.? (S s!)))) (str%strslice_len s!))) :pattern ((ens%vstd!string.axiom_str_literal_len. s!)))))
(assert (forall ((s! Poly)) (! (=> (has_type s! STRSLICE) (= (vstd!seq.Seq.len.? $ CHAR (Poly%vstd!seq.Seq<char.>. (vstd!string.impl&%0.view.? s!))) (str%strslice_len (%S s!)))) :pattern ((vstd!seq.Seq.len.? $ CHAR (Poly%vstd!seq.Seq<char.>. (vstd!string.impl&%0.view.? s!)))))))
(declare-fun ens%vstd!string.axiom_str_literal_get_char. (StrSlice Int) Bool)
(assert (forall ((s! StrSlice) (i! Int)) (! (= (ens%vstd!string.axiom_str_literal_get_char. s! i!) (= (%C (vstd!seq.Seq.index.? $ CHAR (Poly%vstd!seq.Seq<char.>. (vstd!string.impl&%0.view.? (S s!))) (I i!))) (str%strslice_get_char s! i!))) :pattern ((ens%vstd!string.axiom_str_literal_get_char. s! i!)))))
(assert (forall ((s! Poly) (i! Poly)) (! (=> (and (has_type s! STRSLICE) (has_type i! INT)) (= (%C (vstd!seq.Seq.index.? $ CHAR (Poly%vstd!seq.Seq<char.>. (vstd!string.impl&%0.view.? s!)) i!)) (str%strslice_get_char (%S s!) (%I i!)))) :pattern ((vstd!seq.Seq.index.? $ CHAR (Poly%vstd!seq.Seq<char.>. (vstd!string.impl&%0.view.? s!)) i!)))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.size.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.size.) (forall ((self! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.size.? self!) (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.size.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (<= 0 (verismo!ptr.raw_ptr_s.impl&%5.size.? self!))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.size.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.range.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.range.) (forall ((self! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.range.? self!) (tuple%2./tuple%2 (I (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))) (I (verismo!ptr.raw_ptr_s.impl&%5.size.? self!)))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.range.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (has_type (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? self!)) (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.range.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (<= 0 (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!))))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.full.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.full.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.full.? A&. A&) (vstd!set.impl&%0.complement.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((vstd!set.impl&%0.full.? A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.full.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.full.? A&. A&)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.entry_s.impl&%0.is_valid.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.entry_s.impl&%0.is_valid.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.entry_s.impl&%0.is_valid.? self!) (and (and (or (not (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!) 0)) (not (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!))) (or (not (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!)) (and (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!) (not (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!) 0))))) (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL0)) (vstd!set.impl&%0.full.? $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) :pattern ((verismo!arch.rmp.entry_s.impl&%0.is_valid.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel.) (forall ((self! Poly) (preventry! Poly)) (! (= (verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel.? self! preventry!) (and (and (verismo!arch.rmp.entry_s.impl&%0.is_valid.? self!) (=> (not (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (not (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))))) (=> (not (= self! preventry!)) (and (and (and (and (and (and (and (ext_eq true (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL0)) (vstd!set.impl&%0.full.? $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (ext_eq true (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL0)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL0)))) (vstd!set.impl&%0.subset_of.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)))) (vstd!set.impl&%0.subset_of.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)))) (vstd!set.impl&%0.subset_of.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)))) (or (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)) (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1))))) (or (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)) (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2))))) (or (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)) (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)))))))) :pattern ((verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel.? self! preventry!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%3.spec_val.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%3.spec_val.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%3.spec_val.? self!) (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (%Poly%verismo!arch.rmp.def_s.RmpEntry. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%3.spec_val.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%3.spec_val.? self!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%3.spec_val.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.access_u.impl&%0.view.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.access_u.impl&%0.view.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.access_u.impl&%0.view.? self!) (verismo!arch.rmp.def_s.impl&%3.spec_val.? self!)) :pattern ((verismo!arch.rmp.access_u.impl&%0.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.access_u.impl&%0.view.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel.) (forall ((self! Poly) (prev! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel.? self! prev!) (and (verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))) (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. prev!)))))) (= (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. prev!))))) :pattern ((verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel.? self! prev!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.access_u.impl&%1.inv.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.access_u.impl&%1.inv.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.access_u.impl&%1.inv.? self!) (verismo!arch.rmp.entry_s.impl&%0.is_valid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!)))) :pattern ((verismo!arch.rmp.access_u.impl&%1.inv.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf.? self!) (and (verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!))) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!)))) (verismo!arch.rmp.access_u.impl&%1.inv.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!))))))))) :pattern ((verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%27.encrypted.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%27.encrypted.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%27.encrypted.? self!) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/encrypted (%Poly%verismo!ptr.snp.snp_u.PTAttr. (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%27.pte.? self!))))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.encrypted.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.? self!) (and (verismo!ptr.snp.snp_u.impl&%27.encrypted.? self!) (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%6.spec_from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%6.spec_from_int.) (forall ((val! Poly)) (! (= (verismo!arch.entities.impl&%6.spec_from_int.? val!) (ite (< (%I val!) 0) core!option.Option./None (ite (= (%I val!) 0) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL0)) (ite (= (%I val!) 1) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)) (ite (= (%I val!) 2) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)) (ite (= (%I val!) 3) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)) core!option.Option./None)))))) :pattern ((verismo!arch.entities.impl&%6.spec_from_int.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%core!option.Option. (verismo!arch.entities.impl&%6.spec_from_int.? val!)) (TYPE%core!option.Option. $ TYPE%verismo!arch.entities.VMPL.))) :pattern ((verismo!arch.entities.impl&%6.spec_from_int.? val!)))))
(declare-fun req%verismo!arch.rmp.entry_s.impl&%0.is_confidential_to. (Poly Poly) Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((self! Poly) (vmpl! Poly)) (! (= (req%verismo!arch.rmp.entry_s.impl&%0.is_confidential_to. self! vmpl!) (=> %%global_location_label%%54 (and (< 0 (%I vmpl!)) (<= (%I vmpl!) 4)))) :pattern ((req%verismo!arch.rmp.entry_s.impl&%0.is_confidential_to. self! vmpl!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.entry_s.impl&%0.is_confidential_to.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.entry_s.impl&%0.is_confidential_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!arch.rmp.entry_s.impl&%0.is_confidential_to.? self! vmpl!) (ite (>= (%I vmpl!) 4) (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!) (and (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!) (ext_eq false (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.entities.impl&%6.spec_from_int.? vmpl!))))) (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.))))) :pattern ((verismo!arch.rmp.entry_s.impl&%0.is_confidential_to.? self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! vmpl!) (and (verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.? self!) (verismo!arch.rmp.entry_s.impl&%0.is_confidential_to.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))) vmpl!))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%27.inv_confidential.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%27.inv_confidential.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%27.inv_confidential.? self!) (and (=> (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! (I 4)) (verismo!ptr.snp.snp_u.impl&%27.encrypted.? self!)) (=> (or (or (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! (I 1)) (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! (I 2))) (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! (I 3))) (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! (I 4))))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.inv_confidential.? self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.spec_va_to_pa.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.spec_va_to_pa.) (forall ((pa! Poly)) (! (= (verismo!addr_e.addr_interface.spec_va_to_pa.? pa!) (%I pa!)) :pattern ((verismo!addr_e.addr_interface.spec_va_to_pa.? pa!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%27.deterministic_pte.))
(declare-fun %%lambda%%1 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (gva$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0) gva$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0) gva$)))))
(declare-fun %%lambda%%2 () %%Function%%)
(assert (forall ((gva$ Poly)) (! (= (%%apply%%0 %%lambda%%2 gva$) (I (verismo!addr_e.addr_interface.spec_va_to_pa.? gva$))) :pattern ((%%apply%%0 %%lambda%%2 gva$)))))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%27.deterministic_pte.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%27.deterministic_pte.? self!) (and (and (= (vstd!seq.Seq.len.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))) 1) (= (verismo!ptr.snp.snp_u.impl&%27.pte.? self!) (%Poly%verismo!ptr.snp.snp_u.PTAttr. (vstd!seq.Seq.last.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))))) (ext_eq true (TYPE%vstd!map.Map. $ INT $ INT) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) (vstd!map.impl&%0.new.? $ INT $ INT $ (TYPE%fun%1. $ INT $ BOOL) $ (TYPE%fun%1. $ INT $ INT) (Poly%fun%1. (mk_fun (%%lambda%%1 (B true)))) (Poly%fun%1. (mk_fun %%lambda%%2)))))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.deterministic_pte.? self!))))))
(assert (forall ((rmp! Poly) (guestmap! Poly) (sysmap! Poly) (rmpmap! Poly) (pte! Poly) (is_pte! Poly)) (! (=> (and (has_type rmp! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type guestmap! (TYPE%vstd!map.Map. $ INT $ INT)) (has_type sysmap! (TYPE%vstd!map.Map. $ INT $ INT)) (has_type rmpmap! (TYPE%vstd!map.Map. $ INT $ INT)) (has_type pte! (TYPE%vstd!seq.Seq. $ TYPE%verismo!ptr.snp.snp_u.PTAttr.)) (has_type is_pte! BOOL)) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmp.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmp.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? self!) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? self!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? self!) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? self!) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/sysmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? self!) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmpmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? self!) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/is_pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.? self! val!) (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? self!)) val! (B (verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? self!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (has_type val! (TYPE%vstd!seq.Seq. $ TYPE%verismo!ptr.snp.snp_u.PTAttr.))) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.? self! val!)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%24.spec_pte.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%24.spec_pte.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%24.spec_pte.? self!) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%24.spec_pte.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? self! val!) (verismo!ptr.snp.snp_u.impl&%23.spec_new.? val! (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? self!)) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.impl&%24.spec_pte.? self!)) (B (verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? self!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (has_type val! TYPE%verismo!arch.rmp.def_s.RmpEntry.)) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? self! val!)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? self! val!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (verismo!tspec.default.SpecDefault.spec_default.? Self%&. Self%&) Self%&) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? Self%&. Self%&)))))
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%9.is_VMPL0.))
(define-fun is-verismo!arch.entities.VMPL./VMPL0_ ((c verismo!arch.entities.VMPL.)) Bool ((_ is verismo!arch.entities.VMPL./VMPL0) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%9.is_VMPL0.) (forall ((self! Poly)) (! (= (verismo!arch.entities.impl&%9.is_VMPL0.? self!) (is-verismo!arch.entities.VMPL./VMPL0_ (%Poly%verismo!arch.entities.VMPL. self!))) :pattern ((verismo!arch.entities.impl&%9.is_VMPL0.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.perm_s.rmp_perm_init.))
(declare-fun %%lambda%%3 (Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (vmpl$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1) vmpl$) (ite (is-verismo!arch.entities.VMPL./VMPL0_ (%Poly%verismo!arch.entities.VMPL. vmpl$)) %%hole%%0 %%hole%%1)) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1) vmpl$)))))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.perm_s.rmp_perm_init.) (forall ((no%param Poly)) (! (= (verismo!arch.rmp.perm_s.rmp_perm_init.? no%param) (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (vstd!map.impl&%0.new.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) $ (TYPE%fun%1. $ TYPE%verismo!arch.entities.VMPL. $ BOOL) $ (TYPE%fun%1. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (Poly%fun%1. (mk_fun (%%lambda%%1 (B true)))) (Poly%fun%1. (mk_fun (%%lambda%%3 (vstd!set.impl&%0.full.? $ TYPE%verismo!arch.rmp.perm_s.Perm.) (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))) :pattern ((verismo!arch.rmp.perm_s.rmp_perm_init.? no%param))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%5.spec_new.? val!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!arch.rmp.def_s.impl&%5.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%4.spec_set_val.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%4.spec_set_val.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%4.spec_set_val.? self! val!) (verismo!arch.rmp.def_s.impl&%5.spec_new.? val!)) :pattern ((verismo!arch.rmp.def_s.impl&%4.spec_set_val.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type val! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%4.spec_set_val.? self! val!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!arch.rmp.def_s.impl&%4.spec_set_val.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%21.spec_default.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%21.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr.) (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.PTAttr./PTAttr (%B (B true)) (%B (B true)) (%B (B false)))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%31.init.))
(declare-fun %%lambda%%4 () %%Function%%)
(assert (forall ((gva$ Poly)) (! (= (%%apply%%0 %%lambda%%4 gva$) gva$) :pattern ((%%apply%%0 %%lambda%%4 gva$)))))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%31.init.) (forall ((no%param Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%31.init.? no%param) (let ((rmp_psp$ (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP (%B (B false)) (%B (B true)) (%B (B false)) (%B (B false)) (%I (I (nClip (Add (%I (vstd!pervasive.arbitrary.? $ NAT)) 1)))) (%Poly%verismo!arch.addr_s.def_s.SpecPage. (vstd!pervasive.arbitrary.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (%Poly%verismo!arch.addr_s.def_s.PageSize. (Poly%verismo!arch.addr_s.def_s.PageSize. verismo!arch.addr_s.def_s.PageSize./Size4k)) (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (vstd!map.impl&%0.new.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) $ (TYPE%fun%1. $ TYPE%verismo!arch.entities.VMPL. $ BOOL) $ (TYPE%fun%1. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (Poly%fun%1. (mk_fun (%%lambda%%1 (B true)))) (Poly%fun%1. (mk_fun (%%lambda%%3 (vstd!set.impl&%0.full.? $ TYPE%verismo!arch.rmp.perm_s.Perm.) (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))))))) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr (%Poly%verismo!arch.rmp.def_s.RmpEntry. (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%4.spec_set_val.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!arch.rmp.def_s.RmpEntry.) (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. rmp_psp$)))) (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.new.? $ INT $ INT $ (TYPE%fun%1. $ INT $ BOOL) $ (TYPE%fun%1. $ INT $ INT) (Poly%fun%1. (mk_fun (%%lambda%%1 (B true)))) (Poly%fun%1. (mk_fun %%lambda%%4)))) (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.empty.? $ INT $ INT)) (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.empty.? $ INT $ INT)) (%Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (vstd!seq.Seq.push.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (vstd!seq.Seq.empty.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr.) (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr.))) (%B (B false))))) :pattern ((verismo!ptr.snp.snp_u.impl&%31.init.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%31.init.? no%param)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%31.init.? no%param)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%31.allocator_default.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%31.allocator_default.) (forall ((no%param Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%31.allocator_default.? no%param) (let ((rmp_psp$ (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP (%B (B false)) (%B (B true)) (%B (B true)) (%B (B false)) (%I (I (nClip (Add (%I (vstd!pervasive.arbitrary.? $ NAT)) 1)))) (%Poly%verismo!arch.addr_s.def_s.SpecPage. (vstd!pervasive.arbitrary.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (%Poly%verismo!arch.addr_s.def_s.PageSize. (Poly%verismo!arch.addr_s.def_s.PageSize. verismo!arch.addr_s.def_s.PageSize./Size4k)) (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (vstd!map.impl&%0.new.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) $ (TYPE%fun%1. $ TYPE%verismo!arch.entities.VMPL. $ BOOL) $ (TYPE%fun%1. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (Poly%fun%1. (mk_fun (%%lambda%%1 (B true)))) (Poly%fun%1. (mk_fun (%%lambda%%3 (vstd!set.impl&%0.full.? $ TYPE%verismo!arch.rmp.perm_s.Perm.) (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))))))) (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%31.init.? (I 0))) (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpEntry./RmpEntry (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. rmp_psp$))))))) :pattern ((verismo!ptr.snp.snp_u.impl&%31.allocator_default.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%31.allocator_default.? no%param)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%31.allocator_default.? no%param)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%32.spec_default.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%32.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%31.allocator_default.? (I 0))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_size.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_size.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_size.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.? self!) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/encrypted (%Poly%verismo!ptr.snp.snp_u.PTAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%31.wf.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%31.wf.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%31.wf.? self!) (and (and (and (and (and (and (and (verismo!arch.rmp.access_u.impl&%1.inv.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))) (verismo!ptr.snp.snp_u.impl&%27.inv_confidential.? self!)) (and (and (= (vstd!seq.Seq.len.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))) 1) (= (verismo!ptr.snp.snp_u.impl&%27.pte.? self!) (%Poly%verismo!ptr.snp.snp_u.PTAttr. (vstd!seq.Seq.last.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))))) (ext_eq true (TYPE%vstd!map.Map. $ INT $ INT) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) (vstd!map.impl&%0.new.? $ INT $ INT $ (TYPE%fun%1. $ INT $ BOOL) $ (TYPE%fun%1. $ INT $ INT) (Poly%fun%1. (mk_fun (%%lambda%%1 (B true)))) (Poly%fun%1. (mk_fun %%lambda%%2)))))) (= (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!) (verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))) (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))) (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.))))))))) (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))) (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.))))))))) (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))) (verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.))))))))) (=> (not (verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.? (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%27.pte.? self!)))) (not (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))))))) :pattern ((verismo!ptr.snp.snp_u.impl&%31.wf.? self!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? Self%&. Self%& self!) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? Self%&. Self%& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? Self%&. Self%& self!) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%30.snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%30.snp.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. self!) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!)))) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%35.wf.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%35.wf.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%35.wf.? self!) (and (verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf.? self!) (verismo!ptr.snp.snp_u.impl&%31.wf.? (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. self!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%35.wf.? self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!) (B (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$))))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%1.is_constant.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%1.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. T&. T&) self!) (B (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$))))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%1.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%1.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. T&. T&) self! vmpl!) (B (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$) vmpl!)))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. T&. T&) self! vmpl!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%vstd!seq.Seq. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%vstd!seq.Seq. T&. T&))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./Symbol_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./Symbol) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_Symbol.? self!) (is-verismo!tspec.security.sectype.DataLabel./Symbol_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_Symbol.? self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./TrustedRandom) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.? self!) (is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.? self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_Secret.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./Secret_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./Secret) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_Secret.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_Secret.? self!) (is-verismo!tspec.security.sectype.DataLabel./Secret_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_Secret.? self!))))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (valsets! Poly) (labels! Poly) (vmpl! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& valsets! labels! vmpl!) (and (and (and (and (and (=> (is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. labels! vmpl!))) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!) (vstd!set.impl&%0.full.? T&. T&))) (=> (is-verismo!tspec.security.sectype.DataLabel./Secret_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. labels! vmpl!))) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!) (vstd!set.impl&%0.full.? T&. T&)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. labels!) vmpl!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets!) vmpl!)) (> (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!)) 0)) (vstd!set.impl&%0.finite.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!)))) :pattern ((verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& valsets! labels! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.wf_value.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.wf_value.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& self!) (and (and (and (and (and (and (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 1)) (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 2))) (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 3))) (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 4))) (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) core!option.Option./None)) (ext_eq true (TYPE%vstd!set.Set. $ NAT) (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.empty.? $ NAT) (I 1)) (I 2)) (I 3)) (I 4)))) (ext_eq true (TYPE%vstd!set.Set. $ NAT) (vstd!map.impl&%0.dom.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.empty.? $ NAT) (I 1)) (I 2)) (I 3)) (I 4))))) :pattern ((verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! vmpl!) (B (and (and (and (= (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) vmpl!)) 1) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) vmpl!) (vstd!set.impl&%0.insert.? T&. T& (vstd!set.impl&%0.empty.? T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))))) (is-verismo!tspec.security.sectype.DataLabel./Symbol_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) vmpl!)))) (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%12.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%12.is_constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self!) (B (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 4)))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.) self!) (B (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& $ TYPE%tuple%0. self!))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.) self!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.)) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_s.inv_snp_value.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_s.inv_snp_value.) (forall ((T&. Dcr) (T& Type) (snp! Poly) (val! Poly)) (! (= (verismo!ptr.ptr_s.inv_snp_value.? T&. T& snp! val!) (and (and (and (and (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& val!)) (=> (not (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? snp! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& val! (I 1))))) (=> (not (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? snp! (I 2))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& val! (I 2))))) (=> (not (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? snp! (I 3))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& val! (I 3))))) (=> (not (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? snp! (I 4))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& val! (I 4)))))) :pattern ((verismo!ptr.ptr_s.inv_snp_value.? T&. T& snp! val!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.? self! val!) (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? self!)) val! (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? self!)) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.impl&%24.spec_pte.? self!)) (B (verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? self!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (has_type val! (TYPE%vstd!map.Map. $ INT $ INT))) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.? self! val!)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.? self! val!) (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? self!)) val! (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.impl&%24.spec_pte.? self!)) (B (verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? self!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (has_type val! (TYPE%vstd!map.Map. $ INT $ INT))) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.? self! val!)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%8.snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%8.snp.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!)))))) (vstd!map.impl&%0.empty.? $ INT $ INT))) (vstd!map.impl&%0.empty.? $ INT $ INT)))) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.integer.IntValue.as_int.? Self%&. Self%& self!) INT)) :pattern ((verismo!tspec.integer.IntValue.as_int.? Self%&. Self%& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (val! Poly)) (! (=> (has_type val! INT) (has_type (verismo!tspec.integer.IntValue.from_int.? Self%&. Self%& val!) Self%&)) :pattern ((verismo!tspec.integer.IntValue.from_int.? Self%&. Self%& val!)))))
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%4.as_int.))
(define-fun is-verismo!arch.entities.VMPL./VMPL1_ ((c verismo!arch.entities.VMPL.)) Bool ((_ is verismo!arch.entities.VMPL./VMPL1) c))
(define-fun is-verismo!arch.entities.VMPL./VMPL2_ ((c verismo!arch.entities.VMPL.)) Bool ((_ is verismo!arch.entities.VMPL./VMPL2) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%4.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. self!) (I (let ((val$ (ite (is-verismo!arch.entities.VMPL./VMPL0_ (%Poly%verismo!arch.entities.VMPL. self!)) 0 (ite (is-verismo!arch.entities.VMPL./VMPL1_ (%Poly%verismo!arch.entities.VMPL. self!)) 1 (ite (is-verismo!arch.entities.VMPL./VMPL2_ (%Poly%verismo!arch.entities.VMPL. self!)) 2 3))))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private.? self! vmpl!) (and (and (and (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!) (=> (not (= vmpl! (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)))) (not (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write))))) (=> (not (= vmpl! (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)))) (not (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write))))) (=> (not (= vmpl! (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)))) (not (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write)))))) :pattern ((verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private.? self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private.? self! vmpl!) (and (verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.? self!) (verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))) vmpl!))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private.? self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.? self!) (verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private.? self! (I 0))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.? self!))))))
(declare-fun req%verismo!ptr.raw_ptr_s.impl&%5.bytes. (Poly) Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((self! Poly)) (! (= (req%verismo!ptr.raw_ptr_s.impl&%5.bytes. self!) (=> %%global_location_label%%55 (verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.? (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!)))) :pattern ((req%verismo!ptr.raw_ptr_s.impl&%5.bytes. self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.bytes.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.bytes.) (forall ((self! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.bytes.? self!) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.bytes.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.wf.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.wf.) (forall ((self! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.wf.? self!) (and (verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!)))) (verismo!ptr.ptr_s.inv_snp_value.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? self!))))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.wf.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_range.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_range.) (forall ((self! Poly) (range! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.wf_range.? self! range!) (and (= (verismo!ptr.raw_ptr_s.impl&%5.range.? self!) (%Poly%tuple%2. range!)) (verismo!ptr.raw_ptr_s.impl&%5.wf.? self!))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.wf_range.? self! range!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.def_s.SnpPointsToRaw.) (has_type (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? self!)) TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) :pattern ((verismo!ptr.raw_ptr_s.impl&%4.view.? self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (size! Poly)) (! (=> (and (has_type self! Self%&) (has_type size! NAT)) (has_type (verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? Self%&. Self%& self! size!) BOOL)) :pattern ((verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? Self%&. Self%& self! size!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? Self%&. Self%& self!) INT)) :pattern ((verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%0.to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%0.to_addr.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT self!) (I (Mul (%I self!) 4096))) :pattern ((verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.PAGE_SIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.PAGE_SIZE.) (= verismo!arch.addr_s.def_s.PAGE_SIZE.? 4096)))
(assert (uInv SZ verismo!arch.addr_s.def_s.PAGE_SIZE.?))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.cast.VTypeCast.vspec_cast_to.? Self%&. Self%& T&. T& self!) T&)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? Self%&. Self%& T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%44.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%44.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64) self!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.security.sectype.SecMemType.view.? Self%&. Self%& T&. T& M&. M& self!) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? Self%&. Self%& T&. T& M&. M& self!)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (_unused! Poly) (valsets! Poly) (labels! Poly)) (! (=> (and (has_type val! T&) (has_type _unused! (TYPE%core!option.Option. M&. M&)) (has_type valsets! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&))) (has_type labels! (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec__unused.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec__unused.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (Poly%core!option.Option. (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!)) (TYPE%core!option.Option. M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!) (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec_labels.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec_labels.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.core_perm_s.CoreIdPerm.) (has_type (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? self!)) TYPE%verismo!registers.core_perm_s.CoreMode.)) :pattern ((verismo!registers.core_perm_s.impl&%4.view.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.reg.MSR_GHCB_BASE.))
(assert (=> (fuel_bool fuel%verismo!arch.reg.MSR_GHCB_BASE.) (= verismo!arch.reg.MSR_GHCB_BASE.? 3221291312)))
(assert (uInv 32 verismo!arch.reg.MSR_GHCB_BASE.?))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%15.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%15.is_constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!))) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%60.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%60.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (%Poly%verismo!snp.cpu.gdt.Gdtr. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/base (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%25.is_constant.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%25.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.idt.def.Idtr. self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/limit (%Poly%verismo!boot.idt.def.Idtr. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/base (%Poly%verismo!boot.idt.def.Idtr. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.idt.def.Idtr. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.reg.MSR_EFER_BASE.))
(assert (=> (fuel_bool fuel%verismo!arch.reg.MSR_EFER_BASE.) (= verismo!arch.reg.MSR_EFER_BASE.? 3221225600)))
(assert (uInv 32 verismo!arch.reg.MSR_EFER_BASE.?))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.? self!) (let ((regs$ (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))) (let ((coreid$ (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))) (let ((cr3_pte$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr3)))))))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid$))))) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) (verismo!registers.core_perm_s.CoreMode./CoreMode/run (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid$)))))) (= (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid$))))) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%verismo!arch.reg.RegName.) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.reg.RegName. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$)) id$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.reg.RegName. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$)) id$))))) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%verismo!arch.reg.RegName.) (= (verismo!registers.msr_perm_s.impl&%2.cpu.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$)) (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid$))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))))) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%verismo!arch.reg.RegName.) (= (verismo!registers.msr_perm_s.impl&%2.id.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$)) (%Poly%verismo!arch.reg.RegName. id$))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))))) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%verismo!arch.reg.RegName.) (verismo!registers.msr_perm_s.impl&%2.wf.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))))) (= (verismo!registers.msr_perm_s.impl&%2.shared.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName./MSR (%I (I verismo!arch.reg.MSR_GHCB_BASE.?)))))) true)) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%verismo!arch.reg.RegName.) (=> (not (= (%Poly%verismo!arch.reg.RegName. id$) (verismo!arch.reg.RegName./MSR (%I (I verismo!arch.reg.MSR_GHCB_BASE.?))))) (not (verismo!registers.msr_perm_s.impl&%2.shared.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. (verismo!registers.msr_perm_s.impl&%2.val.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./GdtrBaseLimit)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.idt.def.Idtr. (verismo!registers.msr_perm_s.impl&%2.val.? $ TYPE%verismo!boot.idt.def.Idtr. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./IdtrBaseLimit)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./XCr0)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr0)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr1)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr2)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr3)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr4)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cs)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName./MSR (%I (I verismo!arch.reg.MSR_EFER_BASE.?))))))))) (= cr3_pte$ (verismo!pgtable_e.def.static_cr3_value.? (I 0)))))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.? self!))))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.inv.? self!) (and (verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.? self!) (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)) 0))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.inv.? self!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? Self%&. Self%& AddrT&. AddrT& self!) AddrT&)) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? Self%&. Self%& AddrT&. AddrT& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (AddrT&. Dcr) (AddrT& Type) (self! Poly) (ret! Poly)) (! (=> (and (has_type self! Self%&) (has_type ret! AddrT&)) (has_type (verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? Self%&. Self%& AddrT&. AddrT& self! ret!) BOOL)) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? Self%&. Self%& AddrT&. AddrT& self! ret!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (AddrT&. Dcr) (AddrT& Type) (self! Poly) (size! Poly)) (! (=> (and (has_type self! Self%&) (has_type size! NAT)) (has_type (verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? Self%&. Self%& AddrT&. AddrT& self! size!) BOOL)) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? Self%&. Self%& AddrT&. AddrT& self! size!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (AddrT&. Dcr) (AddrT& Type) (v! Poly)) (! (=> (has_type v! AddrT&) (has_type (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? Self%&. Self%& AddrT&. AddrT& v!) INT)) :pattern ((verismo!addr_e.addr_interface.PageTrait.paget_to_int.? Self%&. Self%& AddrT&. AddrT& v!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecEq.spec_eq.? Self%&. Self%& Rhs&. Rhs& self! rhs!) BOOL)) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? Self%&. Self%& Rhs&. Rhs& self! rhs!)))))
(assert (fuel_bool_default fuel%verismo!tspec.ops.impl&%6.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.ops.impl&%6.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ BOOL $ BOOL self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ BOOL $ BOOL self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%72.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%72.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!) (I (nClip (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!))))))
(declare-fun req%verismo!addr_e.addr_interface.PageTrait.to_addr. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (req%verismo!addr_e.addr_interface.PageTrait.to_addr. Self%&. Self%& AddrT&. AddrT& self!) (=> %%global_location_label%%56 (%B (verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? Self%&. Self%& AddrT&. AddrT& self! (I 0))))) :pattern ((req%verismo!addr_e.addr_interface.PageTrait.to_addr. Self%&. Self%& AddrT&. AddrT& self!)))))
(declare-fun ens%verismo!addr_e.addr_interface.PageTrait.to_addr. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (AddrT&. Dcr) (AddrT& Type) (self! Poly) (ret! Poly)) (! (= (ens%verismo!addr_e.addr_interface.PageTrait.to_addr. Self%&. Self%& AddrT&. AddrT& self! ret!) (and (has_type ret! AddrT&) (= ret! (verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? Self%&. Self%& AddrT&. AddrT& self!)) (%B (verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? Self%&. Self%& AddrT&. AddrT& self! ret!)))) :pattern ((ens%verismo!addr_e.addr_interface.PageTrait.to_addr. Self%&. Self%& AddrT&. AddrT& self! ret!)))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%63.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%63.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.VM_PAGE_NUM.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.VM_PAGE_NUM.) (= verismo!arch.addr_s.def_s.VM_PAGE_NUM.? 1099511627776)))
(assert (uInv SZ verismo!arch.addr_s.def_s.VM_PAGE_NUM.?))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%0.spec_valid_pn_with.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%0.spec_valid_pn_with.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? $ INT self! size!) (B (and (let ((tmp%%$ (Add (%I self!) (%I size!)))) (and (<= 0 tmp%%$) (<= tmp%%$ verismo!arch.addr_s.def_s.VM_PAGE_NUM.?))) (and (<= 0 (%I self!)) (<= (%I self!) verismo!arch.addr_s.def_s.VM_PAGE_NUM.?))))) :pattern ((verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? $ INT self! size!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%9.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%9.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT SZ) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%5.spec_valid_pn_with.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%5.spec_valid_pn_with.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (UINT SZ) $ (UINT SZ) self! size!) (B (let ((start$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!)))) (and (%B (verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? $ INT (I start$) size!)) (%B (B true)))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (UINT SZ) $ (UINT SZ) self! size!))))))
(assert (forall ((immutable! Poly) (assigned! Poly) (validated! Poly) (vmsa! Poly) (asid! Poly) (gpn! Poly) (size! Poly) (perms! Poly)) (! (=> (and (has_type immutable! BOOL) (has_type assigned! BOOL) (has_type validated! BOOL) (has_type vmsa! BOOL) (has_type asid! NAT) (has_type gpn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type size! TYPE%verismo!arch.addr_s.def_s.PageSize.) (has_type perms! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.new2.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.new2.) (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!) (verismo!arch.addr_s.def_s.SpecPage./SpecPage (%I (I (nClip (%I val!)))) dummy!)) :pattern ((verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (=> (and (has_type val! INT) (has_type dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!)))))
(assert (fuel_bool_default fuel%verismo!tspec.spec_unused.))
(assert (=> (fuel_bool fuel%verismo!tspec.spec_unused.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.spec_unused.? T&. T&) (vstd!pervasive.arbitrary.? T&. T&)) :pattern ((verismo!tspec.spec_unused.? T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (verismo!tspec.spec_unused.? T&. T&) T&) :pattern ((verismo!tspec.spec_unused.? T&. T&)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.new.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.new.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!) (verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%5.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%5.as_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!) (I (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. self!)))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.value.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.value.? T&. T& self!) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!))) :pattern ((verismo!arch.addr_s.page.impl&%2.value.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.new2.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.new2.) (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr (%I (I (nClip (%I val!)))) dummy!)) :pattern ((verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (=> (and (has_type val! INT) (has_type dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.new.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.new.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!) (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%5.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%5.from_int.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) val!) (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) val!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecSub.spec_sub.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%1.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%1.spec_sub.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& $ INT T1&. T1& self! rhs!) (verismo!tspec.integer.IntValue.from_int.? T1&. T1& (I (Sub (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& $ INT T1&. T1& self! rhs!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecAdd.spec_add.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%0.spec_add.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? T1&. T1& $ INT T1&. T1& self! rhs!) (verismo!tspec.integer.IntValue.from_int.? T1&. T1& (I (Add (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? T1&. T1& $ INT T1&. T1& self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%4.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%4.as_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!) (I (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!)))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.value.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!))) :pattern ((verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u8_to_stream.))
(declare-fun %%lambda%%5 (Int Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (%%hole%%2 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2) i$) (I (ite (= (%I i$) %%hole%%0) %%hole%%1 %%hole%%2))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2) i$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u8_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u8_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I 1) (Poly%fun%1. (mk_fun (%%lambda%%5 0 (%I data!) 0)))))) :pattern ((verismo!tspec.stream.basic.u8_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u16_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u16_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u16_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I data!))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I data!) 256))))))))) :pattern ((verismo!tspec.stream.basic.u16_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%3.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I self!))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I self!) 256)))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (forall ((T&. Dcr) (T& Type)) (! (<= 0 (verismo!tspec.size_s.spec_size.? T&. T&)) :pattern ((verismo!tspec.size_s.spec_size.? T&. T&)))))
(assert (fuel_bool_default fuel%verismo!tspec.setlib.set_op.))
(declare-fun %%lambda%%6 (Dcr Type Poly Dcr Type Poly Type Type Dcr Type Poly Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Type) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Poly) (%%hole%%11 Dcr) (%%hole%%12 Type) (%%hole%%13 Poly) (%%hole%%14 %%Function%%) (val$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14) val$) (B (exists ((v1$ Poly) (v2$ Poly)) (! (and (and (has_type v1$ %%hole%%6) (has_type v2$ %%hole%%7)) (and (and (vstd!set.impl&%0.contains.? %%hole%%8 %%hole%%9 %%hole%%10 v1$) (vstd!set.impl&%0.contains.? %%hole%%11 %%hole%%12 %%hole%%13 v2$)) (= val$ (%%apply%%1 %%hole%%14 v1$ v2$)))) :pattern ((vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 v1$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 v2$)))))) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14) val$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.setlib.set_op.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (s1! Poly) (s2! Poly) (op_fn! Poly)) (! (= (verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!) (vstd!set.impl&%0.new.? T3&. T3& $ (TYPE%fun%1. T3&. T3& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%6 T1&. T1& s1! T2&. T2& s2! T1& T2& T1&. T1& s1! T2&. T2& s2! (%Poly%fun%2. op_fn!)))))) :pattern ((verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (s1! Poly) (s2! Poly) (op_fn! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. T1&. T1&)) (has_type s2! (TYPE%vstd!set.Set. T2&. T2&)) (has_type op_fn! (TYPE%fun%2. T1&. T1& T2&. T2& T3&. T3&))) (has_type (verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!) (TYPE%vstd!set.Set. T3&. T3&))) :pattern ((verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.bop_new.))
(declare-fun %%lambda%%7 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (vmpl$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1) vmpl$) (B (and (<= %%hole%%0 (%I vmpl$)) (<= (%I vmpl$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1) vmpl$)))))
(declare-fun %%lambda%%8 (Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Type Type Dcr Type Dcr Type %%Function%% Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Poly) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Poly) (%%hole%%15 Dcr) (%%hole%%16 Type) (%%hole%%17 Dcr) (%%hole%%18 Type) (%%hole%%19 Poly) (%%hole%%20 Dcr) (%%hole%%21 Type) (%%hole%%22 Dcr) (%%hole%%23 Type) (%%hole%%24 Type) (%%hole%%25 Type) (%%hole%%26 Dcr) (%%hole%%27 Type) (%%hole%%28 Dcr) (%%hole%%29 Type) (%%hole%%30 %%Function%%) (%%hole%%31 Dcr) (%%hole%%32 Type) (%%hole%%33 Dcr) (%%hole%%34 Type) (vmpl$ Poly)) (! (= (%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28 %%hole%%29 %%hole%%30 %%hole%%31 %%hole%%32 %%hole%%33 %%hole%%34) vmpl$) (vstd!set.impl&%0.new.? %%hole%%31 %%hole%%32 %%hole%%33 %%hole%%34 (Poly%fun%1. (mk_fun (%%lambda%%6 %%hole%%20 %%hole%%21 (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 vmpl$) %%hole%%22 %%hole%%23 (vstd!map.impl&%0.index.? %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 vmpl$) %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 (vstd!map.impl&%0.index.? %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 vmpl$) %%hole%%28 %%hole%%29 (vstd!map.impl&%0.index.? %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 vmpl$) %%hole%%30))))) :pattern ((%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28 %%hole%%29 %%hole%%30 %%hole%%31 %%hole%%32 %%hole%%33 %%hole%%34) vmpl$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.bop_new.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (Rhs&. Dcr) (Rhs& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly) (op! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType (%%apply%%1 (%Poly%fun%2. op!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!))) (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)))) (vstd!map.impl&%0.new.? $ NAT $ (TYPE%vstd!set.Set. T2&. T2&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ (TYPE%vstd!set.Set. T2&. T2&)) (Poly%fun%1. (mk_fun (%%lambda%%7 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%8 $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) $ NAT $ (TYPE%vstd!set.Set. Rhs&. Rhs&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)) $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) $ NAT $ (TYPE%vstd!set.Set. Rhs&. Rhs&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)) T&. T& Rhs&. Rhs& T& Rhs& T&. T& Rhs&. Rhs& (%Poly%fun%2. op!) T2&. T2& $ (TYPE%fun%1. T2&. T2& $ BOOL))))) (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.) (Poly%fun%1. (mk_fun (%%lambda%%7 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%1 (Poly%verismo!tspec.security.sectype.DataLabel. verismo!tspec.security.sectype.DataLabel./Symbol)))))))) :pattern ((verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (Rhs&. Dcr) (Rhs& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly) (op! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type rhs! (TYPE%verismo!tspec.security.sectype.SpecSecType. Rhs&. Rhs& M&. M&)) (has_type op! (TYPE%fun%2. T&. T& Rhs&. Rhs& T2&. T2&))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType val! (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (vstd!map.impl&%0.new.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ (TYPE%vstd!set.Set. T&. T&)) (Poly%fun%1. (mk_fun (%%lambda%%7 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%1 (vstd!set.impl&%0.insert.? T&. T& (vstd!set.impl&%0.empty.? T&. T&) val!))))) (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.) (Poly%fun%1. (mk_fun (%%lambda%%7 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%1 (Poly%verismo!tspec.security.sectype.DataLabel. verismo!tspec.security.sectype.DataLabel./Symbol)))))))) :pattern ((verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! T&) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)))))
(assert (fuel_bool_default fuel%verismo!tspec.setlib.uop_to_bop.))
(declare-fun %%lambda%%9 (%%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 %%Function%%) (v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 (%%lambda%%9 %%hole%%0) v1$ v2$) (%%apply%%0 %%hole%%0 v1$)) :pattern ((%%apply%%1 (%%lambda%%9 %%hole%%0) v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.setlib.uop_to_bop.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (op! Poly)) (! (= (verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!) (mk_fun (%%lambda%%9 (%Poly%fun%1. op!)))) :pattern ((verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (op! Poly)) (! (=> (has_type op! (TYPE%fun%1. T1&. T1& T3&. T3&)) (has_type (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!)) (TYPE%fun%2. T1&. T1& T2&. T2& T3&. T3&))) :pattern ((verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.uop_new.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.uop_new.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (T2&. Dcr) (T2& Type) (self! Poly) (op! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!) (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& T&. T& T2&. T2& self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& (vstd!pervasive.arbitrary.? T&. T&))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T&. T& T&. T& T2&. T2& op!)))) :pattern ((verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (T2&. Dcr) (T2& Type) (self! Poly) (op! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type op! (TYPE%fun%1. T&. T& T2&. T2&))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.seq.fn_spec_to_seq_index.))
(declare-fun %%lambda%%10 (Dcr Type Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) v$) (vstd!seq.Seq.index.? %%hole%%4 %%hole%%5 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 v$) %%hole%%6)) :pattern ((%%apply%%0 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) v$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.security.seq.fn_spec_to_seq_index.) (forall ((T&. Dcr) (T& Type) (i! Poly)) (! (= (verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!) (mk_fun (%%lambda%%10 T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8) i!))) :pattern ((verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!))))))
(assert (forall ((T&. Dcr) (T& Type) (i! Poly)) (! (=> (has_type i! INT) (has_type (Poly%fun%1. (verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!)) (TYPE%fun%1. T&. T& $ (UINT 8)))) :pattern ((verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to.))
(declare-fun %%lambda%%11 (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Dcr) (%%hole%%15 Type) (%%hole%%16 Poly) (%%hole%%17 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%11 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17) i$) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 (Poly%fun%1. (verismo!tspec.security.seq.fn_spec_to_seq_index.? %%hole%%0 %%hole%%1 i$))))))) :pattern ((%%apply%%0 (%%lambda%%11 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17) i$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) (I (verismo!tspec.size_s.spec_size.? T&. T&)) (Poly%fun%1. (mk_fun (%%lambda%%11 T&. T& T&. T& T&. T& $ (UINT 8) T&. T& M&. M& T&. T& $ (UINT 8) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& (vstd!pervasive.arbitrary.? T&. T&)))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u32_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u32_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u32_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I data!)))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I data!)))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I data!) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I data!) 65536))))) 256)))))))))))) :pattern ((verismo!tspec.stream.basic.u32_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%5.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%5.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I self!)))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I self!)))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I self!) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I self!) 65536))))) 256))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u64_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u64_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u64_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I data!))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I data!))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I data!)))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I data!)))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296))))) 65536))))) 256))))))))))))))) :pattern ((verismo!tspec.stream.basic.u64_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%7.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%7.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I self!))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I self!))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I self!)))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I self!)))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296))))) 65536))))) 256)))))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%20.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%20.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? Self%&. Self%& self!) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? T&. T& self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!)) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&)) :pattern ((tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%1.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%1.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? self!))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.recursive_sec_bytes.))
(declare-const fuel_nat%verismo!primitives_e.seq.recursive_sec_bytes. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (s! Poly) (fuel% Fuel)) (! (= (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! fuel%) (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! zero)) :pattern ((verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! fuel%)))))
(assert (forall ((T&. Dcr) (T& Type) (s! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (has_type s! (TYPE%vstd!seq.Seq. T&. T&))) (= (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! (succ fuel%)) (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (ite (> (vstd!seq.Seq.len.? T&. T& s!) 0) (let ((prevs$ (vstd!seq.Seq.subrange.? T&. T& s! (I 0) (I (Sub (vstd!seq.Seq.len.? T&. T& s!) 1))))) (ite (< (vstd!seq.Seq.len.? T&. T& prevs$) (vstd!seq.Seq.len.? T&. T& s!)) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& prevs$ fuel%)) (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? T&. T& (vstd!seq.Seq.last.? T&. T& s!))) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! (succ fuel%))))))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.recursive_sec_bytes.) (forall ((T&. Dcr) (T& Type) (s! Poly)) (! (=> (and (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (has_type s! (TYPE%vstd!seq.Seq. T&. T&))) (= (verismo!primitives_e.seq.recursive_sec_bytes.? T&. T& s!) (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! (succ fuel_nat%verismo!primitives_e.seq.recursive_sec_bytes.)))) :pattern ((verismo!primitives_e.seq.recursive_sec_bytes.? T&. T& s!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!primitives_e.seq.recursive_sec_bytes.? T&. T& self!))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_t.impl&%4.spec_len.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_t.impl&%4.spec_len.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (verismo!tspec_e.array.array_t.impl&%4.spec_len.? T&. T& N&. N&) (const_int N&)) :pattern ((verismo!tspec_e.array.array_t.impl&%4.spec_len.? T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (<= 0 (verismo!tspec_e.array.array_t.impl&%4.spec_len.? T&. T& N&. N&)) :pattern ((verismo!tspec_e.array.array_t.impl&%4.spec_len.? T&. T& N&. N&)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)) (has_type i! INT)) (has_type (verismo!tspec_e.array.array_t.impl&%2._spec_index.? T&. T& N&. N& self! i!) T&)) :pattern ((verismo!tspec_e.array.array_t.impl&%2._spec_index.? T&. T& N&. N& self! i!)))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_t.impl&%2.view.))
(declare-fun %%lambda%%12 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%12 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (verismo!tspec_e.array.array_t.impl&%2._spec_index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%12 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_t.impl&%2.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (verismo!tspec_e.array.array_t.impl&%4.spec_len.? T&. T& N&. N&)) (Poly%fun%1. (mk_fun (%%lambda%%12 T&. T& N&. N& self!))))) :pattern ((verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)) (has_type (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!)))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%3.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%31.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%31.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/es (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? Self%&. Self%& T&. T& self!) T&)) :pattern ((verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? Self%&. Self%& T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes.))
(declare-fun %%choose%%1 (Type Dcr Type Bool Type Poly Dcr Type) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Bool) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type)) (! (=> (exists ((v$ Poly)) (! (and (has_type v$ %%hole%%0) (ext_eq %%hole%%3 %%hole%%4 (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%1 %%hole%%2 v$) %%hole%%5)) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%6 %%hole%%7 v$)))) (exists ((v$ Poly)) (! (and (and (has_type v$ %%hole%%0) (ext_eq %%hole%%3 %%hole%%4 (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%1 %%hole%%2 v$) %%hole%%5)) (= (%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7) v$)) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%6 %%hole%%7 v$))))) :pattern ((%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7)))))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!) (as_type (%%choose%%1 T& T&. T& true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self! T&. T&) T&)) :pattern ((verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!) (verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? self!) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmpl (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (uInv 64 (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? self!) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmsa (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (uInv 64 (verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.integer.IntOrd.ord_int.? Self%&. Self%& self!) INT)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%480.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%480.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%481.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%481.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%30.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%30.spec_eq.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ NAT self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ NAT self! rhs!))))))
(assert (forall ((vmpl! Poly) (perms! Poly) (vmsa! Poly)) (! (=> (and (has_type vmpl! (UINT 64)) (has_type perms! (UINT 64)) (has_type vmsa! (UINT 64))) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%2.spec_new.? vmpl! perms! vmsa!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)) :pattern ((verismo!ptr.snp.snp_u.impl&%2.spec_new.? vmpl! perms! vmsa!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%0.spec_perms.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%0.spec_perms.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%0.spec_perms.? self!) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/perms (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%0.spec_perms.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (uInv 64 (verismo!ptr.snp.snp_u.impl&%0.spec_perms.? self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%0.spec_perms.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.? self! val!) (verismo!ptr.snp.snp_u.impl&%2.spec_new.? (I (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? self!)) (I (verismo!ptr.snp.snp_u.impl&%0.spec_perms.? self!)) val!)) :pattern ((verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.? self! val!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)) :pattern ((verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.? self! val!) (verismo!ptr.snp.snp_u.impl&%2.spec_new.? (I (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? self!)) val! (I (verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? self!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.? self! val!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)) :pattern ((verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.? self! val!) (verismo!ptr.snp.snp_u.impl&%2.spec_new.? val! (I (verismo!ptr.snp.snp_u.impl&%0.spec_perms.? self!)) (I (verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? self!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.? self! val!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)) :pattern ((verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.? self!) (let ((mask$ (uClip 64 255))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (uInv 64 (verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.? self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%16.spec_perms.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%16.spec_perms.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%16.spec_perms.? self!) (let ((mask$ (uClip 64 255))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. self!)))) (I (uClip 64 8))))) (I mask$))))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_perms.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (uInv 64 (verismo!ptr.snp.snp_u.impl&%16.spec_perms.? self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_perms.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. self!)))) (I (uClip 64 16))))) (I mask$))))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (uInv 64 (verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.? self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%16.view.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%16.view.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%16.view.? self!) (verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (I (uClip 64 (verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.? self!))))) (I (uClip 64 (verismo!ptr.snp.snp_u.impl&%16.spec_perms.? self!))))) (I (uClip 64 (verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.? self!))))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%16.view.? self!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)) :pattern ((verismo!ptr.snp.snp_u.impl&%16.view.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%4.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%4.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.entities.VMPL. val!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.entities.impl&%6.spec_from_int.? val!))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.entities.VMPL. val!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.perm_s.impl&%1.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.perm_s.impl&%1.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) val!) (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (let ((ret$ (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) (let ((ret$1 (ite (= (EucMod (%I val!) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Read))) ret$))) (let ((ret$2 (ite (= (EucMod (EucDiv (%I val!) 2) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$1) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write))) ret$1))) (let ((ret$3 (ite (= (EucMod (EucDiv (%I val!) 4) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$2) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeU))) ret$2))) (let ((ret$4 (ite (= (EucMod (EucDiv (%I val!) 8) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$3) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeS))) ret$3))) (let ((ret$5 (ite (= (EucMod (EucDiv (%I val!) 16) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$4) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Shadow))) ret$4))) ret$5)))))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) val!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec_val.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec_val.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!) T&)) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%2.axiom_spec_new. (Dcr Type Dcr Type Poly core!option.Option. Poly vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (_unused! core!option.Option.) (valsets! Poly) (labels! vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (= (ens%verismo!tspec.security.sectype.impl&%2.axiom_spec_new. T&. T& M&. M& val! _unused! valsets! labels!) (and (= (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) val!) (= (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) _unused!) (= (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) valsets!) (= (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) labels!))) :pattern ((ens%verismo!tspec.security.sectype.impl&%2.axiom_spec_new. T&. T& M&. M& val! _unused! valsets! labels!)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (_unused! Poly) (valsets! Poly) (labels! Poly)) (! (=> (and (has_type val! T&) (has_type _unused! (TYPE%core!option.Option. M&. M&)) (has_type valsets! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&))) (has_type labels! (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))) (and (and (and (= (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) val!) (= (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) (%Poly%core!option.Option. _unused!))) (= (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) valsets!)) (= (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) :pattern ((verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%7.clone. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (ret! Poly)) (! (= (ens%verismo!tspec.security.sectype.impl&%7.clone. T&. T& M&. M& self! ret!) (and (ens%core!clone.Clone.clone. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self! ret!) (= self! ret!))) :pattern ((ens%verismo!tspec.security.sectype.impl&%7.clone. T&. T& M&. M& self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly) (T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) (has_type ret$ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) $ (TYPE%tuple%1. (REF $) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= self$ ret$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) $ (TYPE%tuple%1. (REF $) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (F fndef_singleton) tmp%%$ ret$)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%9.axiom_spec_new. (Dcr Type Dcr Type verismo!tspec.security.sectype.SpecSecType.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! verismo!tspec.security.sectype.SpecSecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%9.axiom_spec_new. T&. T& M&. M& val!) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. val!)))) val!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%9.axiom_spec_new. T&. T& M&. M& val!)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!)) val!)) :pattern ((verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%9.axiom_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (val2! Poly)) (! (= (ens%verismo!tspec.security.sectype.impl&%9.axiom_ext_equal. T&. T& M&. M& val! val2!) (= (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)) (= val! val2!))) :pattern ((ens%verismo!tspec.security.sectype.impl&%9.axiom_ext_equal. T&. T& M&. M& val! val2!)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (val2! Poly)) (! (=> (and (has_type val! (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (has_type val2! (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) (= (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)) (= val! val2!))) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%46.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%46.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT SZ)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.fn_vspec_cast_to.))
(declare-fun %%lambda%%13 (Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%13 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 v$)) :pattern ((%%apply%%0 (%%lambda%%13 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.fn_vspec_cast_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (= (verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&) (mk_fun (%%lambda%%13 T1&. T1& T2&. T2&))) :pattern ((verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (has_type (Poly%fun%1. (verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&)) (TYPE%fun%1. T1&. T1& T2&. T2&)) :pattern ((verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? T1&. T1& M&. M& T1&. T1& T2&. T2& self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T1&. T1& M&. M& (vstd!pervasive.arbitrary.? T1&. T1&))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T1&. T1& T1&. T1& T2&. T2& (Poly%fun%1. (verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? T2&. T2& M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) T1&. T1& M&. M& self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%43.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%43.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 32)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%42.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%42.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 16)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%41.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%41.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 8)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%38.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%38.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT SZ)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%36.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%36.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%34.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%34.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 16)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%33.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%33.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 8)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%30.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%30.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT SZ)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%28.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%28.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%27.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%27.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 32)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%25.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%25.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 8)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%22.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%22.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT SZ)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%20.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%20.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%19.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%19.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 32)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%18.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%18.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 16)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%60.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%60.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%59.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%59.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 32)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%58.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%58.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 16)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%57.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%57.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 8)))
(declare-fun ens%verismo!arch.addr_s.page.impl&%0.axiom_equal. (Dcr Type verismo!arch.addr_s.def_s.SpecAddr. verismo!arch.addr_s.def_s.SpecAddr.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (left! verismo!arch.addr_s.def_s.SpecAddr.) (right! verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (ens%verismo!arch.addr_s.page.impl&%0.axiom_equal. T&. T& left! right!) (and (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. left!))) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. right!)))) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. left!) (Poly%verismo!arch.addr_s.def_s.SpecAddr. right!))) (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. left!))) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. right!)))) (= left! right!)))) :pattern ((ens%verismo!arch.addr_s.page.impl&%0.axiom_equal. T&. T& left! right!)))))
(assert (forall ((T&. Dcr) (T& Type) (left! Poly) (right! Poly)) (! (=> (and (has_type left! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type right! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) (and (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left!)) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) right!))) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left! right!)) (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left!)) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) right!))) (= left! right!)))) :pattern ((ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left! right!)))))
(declare-fun ens%verismo!arch.addr_s.page.impl&%0.axiom_addr_type_dummy_holder. (Dcr Type verismo!arch.addr_s.def_s.SpecAddr.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (ens%verismo!arch.addr_s.page.impl&%0.axiom_addr_type_dummy_holder. T&. T& self!) (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly%verismo!arch.addr_s.def_s.SpecAddr. self!))) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((ens%verismo!arch.addr_s.page.impl&%0.axiom_addr_type_dummy_holder. T&. T& self!)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&)))))
(declare-fun ens%verismo!arch.addr_s.page.impl&%1.axiom_equal. (Dcr Type verismo!arch.addr_s.def_s.SpecPage. verismo!arch.addr_s.def_s.SpecPage.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (left! verismo!arch.addr_s.def_s.SpecPage.) (right! verismo!arch.addr_s.def_s.SpecPage.)) (! (= (ens%verismo!arch.addr_s.page.impl&%1.axiom_equal. T&. T& left! right!) (and (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. left!)) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. right!))) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecPage. left!) (Poly%verismo!arch.addr_s.def_s.SpecPage. right!))) (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. left!)) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. right!))) (= left! right!)))) :pattern ((ens%verismo!arch.addr_s.page.impl&%1.axiom_equal. T&. T& left! right!)))))
(assert (forall ((T&. Dcr) (T& Type) (left! Poly) (right! Poly)) (! (=> (and (has_type left! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type right! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) (and (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& left!) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& right!)) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) left! right!)) (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& left!) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& right!)) (= left! right!)))) :pattern ((ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) left! right!)))))
(declare-fun ens%verismo!arch.addr_s.page.impl&%1.axiom_addr_type_dummy_holder. (Dcr Type verismo!arch.addr_s.def_s.SpecPage.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.addr_s.def_s.SpecPage.)) (! (= (ens%verismo!arch.addr_s.page.impl&%1.axiom_addr_type_dummy_holder. T&. T& self!) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly%verismo!arch.addr_s.def_s.SpecPage. self!))) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((ens%verismo!arch.addr_s.page.impl&%1.axiom_addr_type_dummy_holder. T&. T& self!)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.to_offset.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.to_offset.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& self!) (EucMod (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!)) verismo!arch.addr_s.def_s.PAGE_SIZE.?)) :pattern ((verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.first.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.first.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.offset.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.offset.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) (nClip (verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!)))))) :pattern ((verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (<= 0 (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.len.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.len.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (<= 0 (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!)))))
(declare-fun ens%verismo!arch.addr_s.page.impl&%8.axiom_inv. (Dcr Type verismo!arch.addr_s.def_s.SpecMem.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.addr_s.def_s.SpecMem.)) (! (= (ens%verismo!arch.addr_s.page.impl&%8.axiom_inv. T&. T& self!) (and (<= (nClip (Add (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecMem. self!)) (verismo!arch.addr_s.page.impl&%8.len.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecMem. self!)))) 4096) (< (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecMem. self!)) 4096))) :pattern ((ens%verismo!arch.addr_s.page.impl&%8.axiom_inv. T&. T& self!)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (and (<= (nClip (Add (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!))) 4096) (< (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) 4096))) :pattern ((verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!)) :pattern ((verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!)))))
(declare-fun ens%verismo!arch.rmp.def_s.impl&%2.axiom_spec_new. (Bool Bool Bool Bool Int verismo!arch.addr_s.def_s.SpecPage. verismo!arch.addr_s.def_s.PageSize. vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) Bool)
(assert (forall ((immutable! Bool) (assigned! Bool) (validated! Bool) (vmsa! Bool) (asid! Int) (gpn! verismo!arch.addr_s.def_s.SpecPage.) (size! verismo!arch.addr_s.def_s.PageSize.) (perms! vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (= (ens%verismo!arch.rmp.def_s.impl&%2.axiom_spec_new. immutable! assigned! validated! vmsa! asid! gpn! size! perms!) (and (= (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) immutable!) (= (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) assigned!) (= (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) validated!) (= (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) vmsa!) (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) asid!) (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) gpn!) (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) size!) (= (verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) perms!))) :pattern ((ens%verismo!arch.rmp.def_s.impl&%2.axiom_spec_new. immutable! assigned! validated! vmsa! asid! gpn! size! perms!)))))
(assert (forall ((immutable! Poly) (assigned! Poly) (validated! Poly) (vmsa! Poly) (asid! Poly) (gpn! Poly) (size! Poly) (perms! Poly)) (! (=> (and (has_type immutable! BOOL) (has_type assigned! BOOL) (has_type validated! BOOL) (has_type vmsa! BOOL) (has_type asid! NAT) (has_type gpn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type size! TYPE%verismo!arch.addr_s.def_s.PageSize.) (has_type perms! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) (and (and (and (and (and (and (and (= (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B immutable!)) (= (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B assigned!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B validated!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B vmsa!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%I asid!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%Poly%verismo!arch.addr_s.def_s.PageSize. size!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) :pattern ((verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!)))))
(declare-fun ens%verismo!arch.rmp.def_s.impl&%5.axiom_spec_new. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(assert (forall ((val! verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (ens%verismo!arch.rmp.def_s.impl&%5.axiom_spec_new. val!) (= (verismo!arch.rmp.def_s.impl&%3.spec_val.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%5.spec_new.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. val!)))) val!)) :pattern ((ens%verismo!arch.rmp.def_s.impl&%5.axiom_spec_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (= (verismo!arch.rmp.def_s.impl&%3.spec_val.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%5.spec_new.? val!))) (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. val!))) :pattern ((verismo!arch.rmp.def_s.impl&%5.spec_new.? val!)))))
(declare-fun ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. (vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. verismo!arch.entities.VMPL.) Bool)
(assert (forall ((p! vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) (vmpl! verismo!arch.entities.VMPL.)) (! (= (ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. p! vmpl!) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. p!)) (Poly%verismo!arch.entities.VMPL. vmpl!))) :pattern ((ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. p! vmpl!)))))
(assert (forall ((p! Poly) (vmpl! Poly)) (! (=> (and (has_type p! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) (has_type vmpl! TYPE%verismo!arch.entities.VMPL.)) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) p!) vmpl!)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) p!) vmpl!)))))
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_nat_pow2.))
(declare-const fuel_nat%verismo!tspec.math.pow_s.spec_nat_pow2. Fuel)
(assert (forall ((e! Poly) (fuel% Fuel)) (! (= (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! fuel%) (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! zero)) :pattern ((verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! fuel%)))))
(assert (forall ((e! Poly) (fuel% Fuel)) (! (=> (has_type e! NAT) (= (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel%)) (ite (= (%I e!) 0) 1 (Mul 2 (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? (I (nClip (Sub (%I e!) 1))) fuel%))))) :pattern ((verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel%))))))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_nat_pow2.) (forall ((e! Poly)) (! (=> (has_type e! NAT) (= (verismo!tspec.math.pow_s.spec_nat_pow2.? e!) (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel_nat%verismo!tspec.math.pow_s.spec_nat_pow2.)))) :pattern ((verismo!tspec.math.pow_s.spec_nat_pow2.? e!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%11.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%11.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%47.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%47.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%5.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%5.ord_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.entities.VMPL. self!) (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.entities.VMPL. self!))))))
(assert (tr_bound%verismo!tspec.integer.IntOrd. $ TYPE%verismo!arch.entities.VMPL.))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecOrd.spec_lt.? Self%&. Self%& Rhs&. Rhs& self! rhs!) BOOL)) :pattern ((verismo!tspec.ops.VSpecOrd.spec_lt.? Self%&. Self%& Rhs&. Rhs& self! rhs!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecOrd.spec_le.? Self%&. Self%& Rhs&. Rhs& self! rhs!) BOOL)) :pattern ((verismo!tspec.ops.VSpecOrd.spec_le.? Self%&. Self%& Rhs&. Rhs& self! rhs!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecOrd.spec_gt.? Self%&. Self%& Rhs&. Rhs& self! rhs!) BOOL)) :pattern ((verismo!tspec.ops.VSpecOrd.spec_gt.? Self%&. Self%& Rhs&. Rhs& self! rhs!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%17.spec_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%17.spec_constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (= (verismo!tspec.security.sectype.impl&%17.spec_constant.? T&. T& M&. M& val!) (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)))) :pattern ((verismo!tspec.security.sectype.impl&%17.spec_constant.? T&. T& M&. M& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! T&) (has_type (verismo!tspec.security.sectype.impl&%17.spec_constant.? T&. T& M&. M& val!) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%17.spec_constant.? T&. T& M&. M& val!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%96.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%96.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (I 0))))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%102.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%102.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I 0))))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%18.spec_default.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%18.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!boot.idt.def.Idtr.) (Poly%verismo!boot.idt.def.Idtr. (verismo!boot.idt.def.Idtr./Idtr (%Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) $ TYPE%tuple%0. (I 0))))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) $ TYPE%tuple%0. (I 0))))))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%20.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%20.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%20.wf.? T&. T& self!) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& $ TYPE%tuple%0. self!)) :pattern ((verismo!tspec.security.sectype.impl&%20.wf.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%24.wf.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%24.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.idt.def.Idtr. self!) (B (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/limit (%Poly%verismo!boot.idt.def.Idtr. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/base (%Poly%verismo!boot.idt.def.Idtr. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.idt.def.Idtr. self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%8.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%8.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT SZ) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT SZ) self!))))))
(declare-fun ens%verismo!boot.mshyper.param_e.impl&%0.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!boot.mshyper.param_e.impl&%0.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self! ret!) (= ret! self!))) :pattern ((ens%verismo!boot.mshyper.param_e.impl&%0.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.)) (has_type ret$ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. ret$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (forall ((cpu_count! Poly) (reserved! Poly) (mem_table! Poly)) (! (=> (and (has_type cpu_count! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16))) (has_type mem_table! (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. $ (CONST_INT 128)))) (has_type (Poly%verismo!boot.mshyper.param_e.HvParamTable. (verismo!boot.mshyper.param_e.impl&%13.spec_new.? cpu_count! reserved! mem_table!)) TYPE%verismo!boot.mshyper.param_e.HvParamTable.)) :pattern ((verismo!boot.mshyper.param_e.impl&%13.spec_new.? cpu_count! reserved! mem_table!)))))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%11.spec_cpu_count.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%11.spec_cpu_count.) (forall ((self! Poly)) (! (= (verismo!boot.mshyper.param_e.impl&%11.spec_cpu_count.? self!) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/cpu_count (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!))) :pattern ((verismo!boot.mshyper.param_e.impl&%11.spec_cpu_count.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%11.spec_reserved.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%11.spec_reserved.) (forall ((self! Poly)) (! (= (verismo!boot.mshyper.param_e.impl&%11.spec_reserved.? self!) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/reserved (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!))) :pattern ((verismo!boot.mshyper.param_e.impl&%11.spec_reserved.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.mshyper.param_e.HvParamTable.) (has_type (verismo!boot.mshyper.param_e.impl&%11.spec_reserved.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)))) :pattern ((verismo!boot.mshyper.param_e.impl&%11.spec_reserved.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%11.spec_mem_table.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%11.spec_mem_table.) (forall ((self! Poly)) (! (= (verismo!boot.mshyper.param_e.impl&%11.spec_mem_table.? self!) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/mem_table (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!))) :pattern ((verismo!boot.mshyper.param_e.impl&%11.spec_mem_table.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.mshyper.param_e.HvParamTable.) (has_type (verismo!boot.mshyper.param_e.impl&%11.spec_mem_table.? self!) (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. $ (CONST_INT 128)))) :pattern ((verismo!boot.mshyper.param_e.impl&%11.spec_mem_table.? self!)))))
(declare-fun ens%verismo!boot.mshyper.param_e.impl&%13.axiom_spec_new. (verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly Poly) Bool)
(assert (forall ((cpu_count! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved! Poly) (mem_table! Poly)) (! (= (ens%verismo!boot.mshyper.param_e.impl&%13.axiom_spec_new. cpu_count! reserved! mem_table!) (and (= (verismo!boot.mshyper.param_e.impl&%11.spec_cpu_count.? (Poly%verismo!boot.mshyper.param_e.HvParamTable. (verismo!boot.mshyper.param_e.impl&%13.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!) reserved! mem_table!))) cpu_count!) (= (verismo!boot.mshyper.param_e.impl&%11.spec_reserved.? (Poly%verismo!boot.mshyper.param_e.HvParamTable. (verismo!boot.mshyper.param_e.impl&%13.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!) reserved! mem_table!))) reserved!) (= (verismo!boot.mshyper.param_e.impl&%11.spec_mem_table.? (Poly%verismo!boot.mshyper.param_e.HvParamTable. (verismo!boot.mshyper.param_e.impl&%13.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!) reserved! mem_table!))) mem_table!))) :pattern ((ens%verismo!boot.mshyper.param_e.impl&%13.axiom_spec_new. cpu_count! reserved! mem_table!)))))
(assert (forall ((cpu_count! Poly) (reserved! Poly) (mem_table! Poly)) (! (=> (and (has_type cpu_count! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16))) (has_type mem_table! (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. $ (CONST_INT 128)))) (and (and (= (verismo!boot.mshyper.param_e.impl&%11.spec_cpu_count.? (Poly%verismo!boot.mshyper.param_e.HvParamTable. (verismo!boot.mshyper.param_e.impl&%13.spec_new.? cpu_count! reserved! mem_table!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!)) (= (verismo!boot.mshyper.param_e.impl&%11.spec_reserved.? (Poly%verismo!boot.mshyper.param_e.HvParamTable. (verismo!boot.mshyper.param_e.impl&%13.spec_new.? cpu_count! reserved! mem_table!))) reserved!)) (= (verismo!boot.mshyper.param_e.impl&%11.spec_mem_table.? (Poly%verismo!boot.mshyper.param_e.HvParamTable. (verismo!boot.mshyper.param_e.impl&%13.spec_new.? cpu_count! reserved! mem_table!))) mem_table!))) :pattern ((verismo!boot.mshyper.param_e.impl&%13.spec_new.? cpu_count! reserved! mem_table!)))))
(declare-fun ens%verismo!ptr.snp.snp_u.impl&%2.axiom_spec_new. (Int Int Int) Bool)
(assert (forall ((vmpl! Int) (perms! Int) (vmsa! Int)) (! (= (ens%verismo!ptr.snp.snp_u.impl&%2.axiom_spec_new. vmpl! perms! vmsa!) (and (= (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%2.spec_new.? (I vmpl!) (I perms!) (I vmsa!)))) vmpl!) (= (verismo!ptr.snp.snp_u.impl&%0.spec_perms.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%2.spec_new.? (I vmpl!) (I perms!) (I vmsa!)))) perms!) (= (verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%2.spec_new.? (I vmpl!) (I perms!) (I vmsa!)))) vmsa!))) :pattern ((ens%verismo!ptr.snp.snp_u.impl&%2.axiom_spec_new. vmpl! perms! vmsa!)))))
(assert (forall ((vmpl! Poly) (perms! Poly) (vmsa! Poly)) (! (=> (and (has_type vmpl! (UINT 64)) (has_type perms! (UINT 64)) (has_type vmsa! (UINT 64))) (and (and (= (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%2.spec_new.? vmpl! perms! vmsa!))) (%I vmpl!)) (= (verismo!ptr.snp.snp_u.impl&%0.spec_perms.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%2.spec_new.? vmpl! perms! vmsa!))) (%I perms!))) (= (verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%2.spec_new.? vmpl! perms! vmsa!))) (%I vmsa!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%2.spec_new.? vmpl! perms! vmsa!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%3.new.? val!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)) :pattern ((verismo!ptr.snp.snp_u.impl&%3.new.? val!)))))
(declare-fun ens%verismo!ptr.snp.snp_u.impl&%3.axiom_new. (verismo!ptr.snp.snp_u.RmpAttr.) Bool)
(assert (forall ((val! verismo!ptr.snp.snp_u.RmpAttr.)) (! (= (ens%verismo!ptr.snp.snp_u.impl&%3.axiom_new. val!) (= (verismo!ptr.snp.snp_u.impl&%3.new.? (I (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. (Poly%verismo!ptr.snp.snp_u.RmpAttr. val!))))) (verismo!ptr.snp.snp_u.impl&%16.view.? (Poly%verismo!ptr.snp.snp_u.RmpAttr. val!)))) :pattern ((ens%verismo!ptr.snp.snp_u.impl&%3.axiom_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (= (verismo!ptr.snp.snp_u.impl&%3.new.? (I (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. val!)))) (verismo!ptr.snp.snp_u.impl&%16.view.? val!))) :pattern ((verismo!ptr.snp.snp_u.impl&%3.new.? (I (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. val!)))) (verismo!ptr.snp.snp_u.impl&%16.view.? val!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttr. (verismo!ptr.snp.snp_u.impl&%3.to_value.? self!)) TYPE%verismo!ptr.snp.snp_u.RmpAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%3.to_value.? self!)))))
(declare-fun ens%verismo!ptr.snp.snp_u.impl&%3.axiom_into. (verismo!ptr.snp.snp_u.RmpAttrSpec.) Bool)
(assert (forall ((self! verismo!ptr.snp.snp_u.RmpAttrSpec.)) (! (= (ens%verismo!ptr.snp.snp_u.impl&%3.axiom_into. self!) (= (verismo!ptr.snp.snp_u.impl&%16.view.? (Poly%verismo!ptr.snp.snp_u.RmpAttr. (verismo!ptr.snp.snp_u.impl&%3.to_value.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. self!)))) self!)) :pattern ((ens%verismo!ptr.snp.snp_u.impl&%3.axiom_into. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (= (verismo!ptr.snp.snp_u.impl&%16.view.? (Poly%verismo!ptr.snp.snp_u.RmpAttr. (verismo!ptr.snp.snp_u.impl&%3.to_value.? self!))) (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%3.to_value.? self!)))))
(declare-fun ens%verismo!ptr.snp.snp_u.impl&%15.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!ptr.snp.snp_u.impl&%15.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self! ret!) (= self! ret!))) :pattern ((ens%verismo!ptr.snp.snp_u.impl&%15.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!ptr.snp.snp_u.RmpAttr.)) (has_type ret$ TYPE%verismo!ptr.snp.snp_u.RmpAttr.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!ptr.snp.snp_u.RmpAttr.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!ptr.snp.snp_u.RmpAttr. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= self$ (%Poly%verismo!ptr.snp.snp_u.RmpAttr. ret$))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!ptr.snp.snp_u.RmpAttr.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%16.inv.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%16.inv.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 65535)))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.inv.? self!))))))
(declare-fun ens%verismo!ptr.snp.snp_u.impl&%16.axiom_inv. (verismo!ptr.snp.snp_u.RmpAttr.) Bool)
(assert (forall ((self! verismo!ptr.snp.snp_u.RmpAttr.)) (! (= (ens%verismo!ptr.snp.snp_u.impl&%16.axiom_inv. self!) (and (verismo!ptr.snp.snp_u.impl&%16.inv.? (Poly%verismo!ptr.snp.snp_u.RmpAttr. self!)) (let ((tmp%%$ (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. (Poly%verismo!ptr.snp.snp_u.RmpAttr. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 65535))))) :pattern ((ens%verismo!ptr.snp.snp_u.impl&%16.axiom_inv. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (and (verismo!ptr.snp.snp_u.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 65535))))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.inv.? self!) (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%19.spec_w.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%19.spec_w.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%19.spec_w.? self!) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/w (%Poly%verismo!ptr.snp.snp_u.PTAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%19.spec_w.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%19.spec_x.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%19.spec_x.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%19.spec_x.? self!) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/x (%Poly%verismo!ptr.snp.snp_u.PTAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%19.spec_x.? self!))))))
(declare-fun ens%verismo!ptr.snp.snp_u.impl&%18.axiom_spec_new. (Bool Bool Bool) Bool)
(assert (forall ((encrypted! Bool) (w! Bool) (x! Bool)) (! (= (ens%verismo!ptr.snp.snp_u.impl&%18.axiom_spec_new. encrypted! w! x!) (and (= (verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.? (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%18.spec_new.? (B encrypted!) (B w!) (B x!)))) encrypted!) (= (verismo!ptr.snp.snp_u.impl&%19.spec_w.? (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%18.spec_new.? (B encrypted!) (B w!) (B x!)))) w!) (= (verismo!ptr.snp.snp_u.impl&%19.spec_x.? (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%18.spec_new.? (B encrypted!) (B w!) (B x!)))) x!))) :pattern ((ens%verismo!ptr.snp.snp_u.impl&%18.axiom_spec_new. encrypted! w! x!)))))
(assert (forall ((encrypted! Poly) (w! Poly) (x! Poly)) (! (=> (and (has_type encrypted! BOOL) (has_type w! BOOL) (has_type x! BOOL)) (and (and (= (verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.? (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%18.spec_new.? encrypted! w! x!))) (%B encrypted!)) (= (verismo!ptr.snp.snp_u.impl&%19.spec_w.? (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%18.spec_new.? encrypted! w! x!))) (%B w!))) (= (verismo!ptr.snp.snp_u.impl&%19.spec_x.? (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%18.spec_new.? encrypted! w! x!))) (%B x!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%18.spec_new.? encrypted! w! x!)))))
(declare-fun ens%verismo!ptr.snp.snp_u.impl&%23.axiom_spec_new. (verismo!arch.rmp.def_s.RmpEntry. vstd!map.Map<int./int.>. vstd!map.Map<int./int.>. vstd!map.Map<int./int.>. vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. Bool) Bool)
(assert (forall ((rmp! verismo!arch.rmp.def_s.RmpEntry.) (guestmap! vstd!map.Map<int./int.>.) (sysmap! vstd!map.Map<int./int.>.) (rmpmap! vstd!map.Map<int./int.>.) (pte! vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.) (is_pte! Bool)) (! (= (ens%verismo!ptr.snp.snp_u.impl&%23.axiom_spec_new. rmp! guestmap! sysmap! rmpmap! pte! is_pte!) (and (= (verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. rmp!) (Poly%vstd!map.Map<int./int.>. guestmap!) (Poly%vstd!map.Map<int./int.>. sysmap!) (Poly%vstd!map.Map<int./int.>. rmpmap!) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. pte!) (B is_pte!)))) rmp!) (= (verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. rmp!) (Poly%vstd!map.Map<int./int.>. guestmap!) (Poly%vstd!map.Map<int./int.>. sysmap!) (Poly%vstd!map.Map<int./int.>. rmpmap!) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. pte!) (B is_pte!)))) guestmap!) (= (verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. rmp!) (Poly%vstd!map.Map<int./int.>. guestmap!) (Poly%vstd!map.Map<int./int.>. sysmap!) (Poly%vstd!map.Map<int./int.>. rmpmap!) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. pte!) (B is_pte!)))) sysmap!) (= (verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. rmp!) (Poly%vstd!map.Map<int./int.>. guestmap!) (Poly%vstd!map.Map<int./int.>. sysmap!) (Poly%vstd!map.Map<int./int.>. rmpmap!) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. pte!) (B is_pte!)))) rmpmap!) (= (verismo!ptr.snp.snp_u.impl&%24.spec_pte.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. rmp!) (Poly%vstd!map.Map<int./int.>. guestmap!) (Poly%vstd!map.Map<int./int.>. sysmap!) (Poly%vstd!map.Map<int./int.>. rmpmap!) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. pte!) (B is_pte!)))) pte!) (= (verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. rmp!) (Poly%vstd!map.Map<int./int.>. guestmap!) (Poly%vstd!map.Map<int./int.>. sysmap!) (Poly%vstd!map.Map<int./int.>. rmpmap!) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. pte!) (B is_pte!)))) is_pte!))) :pattern ((ens%verismo!ptr.snp.snp_u.impl&%23.axiom_spec_new. rmp! guestmap! sysmap! rmpmap! pte! is_pte!)))))
(assert (forall ((rmp! Poly) (guestmap! Poly) (sysmap! Poly) (rmpmap! Poly) (pte! Poly) (is_pte! Poly)) (! (=> (and (has_type rmp! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type guestmap! (TYPE%vstd!map.Map. $ INT $ INT)) (has_type sysmap! (TYPE%vstd!map.Map. $ INT $ INT)) (has_type rmpmap! (TYPE%vstd!map.Map. $ INT $ INT)) (has_type pte! (TYPE%vstd!seq.Seq. $ TYPE%verismo!ptr.snp.snp_u.PTAttr.)) (has_type is_pte! BOOL)) (and (and (and (and (and (= (verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!))) (%Poly%verismo!arch.rmp.def_s.RmpEntry. rmp!)) (= (verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!))) (%Poly%vstd!map.Map<int./int.>. guestmap!))) (= (verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!))) (%Poly%vstd!map.Map<int./int.>. sysmap!))) (= (verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!))) (%Poly%vstd!map.Map<int./int.>. rmpmap!))) (= (verismo!ptr.snp.snp_u.impl&%24.spec_pte.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!))) (%Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. pte!))) (= (verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!))) (%B is_pte!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!)))))
(declare-fun ens%verismo!ptr.snp.snp_u.impl&%27.axiom_pte. (verismo!ptr.snp.snp_u.SwSnpMemAttr.) Bool)
(assert (forall ((self! verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= (ens%verismo!ptr.snp.snp_u.impl&%27.axiom_pte. self!) (=> (= (vstd!seq.Seq.len.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))) 1) (= (verismo!ptr.snp.snp_u.impl&%27.pte.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)) (%Poly%verismo!ptr.snp.snp_u.PTAttr. (vstd!seq.Seq.last.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))))))) :pattern ((ens%verismo!ptr.snp.snp_u.impl&%27.axiom_pte. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (=> (= (vstd!seq.Seq.len.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))) 1) (= (verismo!ptr.snp.snp_u.impl&%27.pte.? self!) (%Poly%verismo!ptr.snp.snp_u.PTAttr. (vstd!seq.Seq.last.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.pte.? self!)))))
(assert (forall ((coreid! Poly) (vmpl! Poly) (cpu! Poly) (regs! Poly)) (! (=> (and (has_type coreid! TYPE%verismo!registers.core_perm_s.CoreIdPerm.) (has_type vmpl! NAT) (has_type cpu! NAT) (has_type regs! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.))) (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)) :pattern ((verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!)))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? self!) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? self!))))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!)))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!)))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? self!) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? self!))))))
(declare-fun ens%verismo!registers.trackedcore.snpcore.impl&%2.axiom_spec_new. (verismo!registers.core_perm_s.CoreIdPerm. Int Int vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.) Bool)
(assert (forall ((coreid! verismo!registers.core_perm_s.CoreIdPerm.) (vmpl! Int) (cpu! Int) (regs! vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)) (! (= (ens%verismo!registers.trackedcore.snpcore.impl&%2.axiom_spec_new. coreid! vmpl! cpu! regs!) (and (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid!) (I vmpl!) (I cpu!) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs!)))) coreid!) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid!) (I vmpl!) (I cpu!) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs!)))) vmpl!) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid!) (I vmpl!) (I cpu!) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs!)))) cpu!) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid!) (I vmpl!) (I cpu!) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs!)))) regs!))) :pattern ((ens%verismo!registers.trackedcore.snpcore.impl&%2.axiom_spec_new. coreid! vmpl! cpu! regs!)))))
(assert (forall ((coreid! Poly) (vmpl! Poly) (cpu! Poly) (regs! Poly)) (! (=> (and (has_type coreid! TYPE%verismo!registers.core_perm_s.CoreIdPerm.) (has_type vmpl! NAT) (has_type cpu! NAT) (has_type regs! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.))) (and (and (and (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!))) (%Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid!)) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!))) (%I vmpl!))) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!))) (%I cpu!))) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!))) (%Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs!)))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!)))))
(assert (forall ((accessed! Poly) (write! Poly) (conform! Poly) (exe! Poly) (sys! Poly) (dpl! Poly) (present! Poly)) (! (=> (and (has_type accessed! (UINT 64)) (has_type write! (UINT 64)) (has_type conform! (UINT 64)) (has_type exe! (UINT 64)) (has_type sys! (UINT 64)) (has_type dpl! (UINT 64)) (has_type present! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_accessed.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_accessed.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_write.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_write.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_write.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_conform.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_conform.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_exe.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_exe.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_sys.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_sys.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_dpl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_dpl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_present.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_present.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_present.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%2.axiom_spec_new. (Int Int Int Int Int Int Int) Bool)
(assert (forall ((accessed! Int) (write! Int) (conform! Int) (exe! Int) (sys! Int) (dpl! Int) (present! Int)) (! (= (ens%verismo!snp.cpu.gdt.impl&%2.axiom_spec_new. accessed! write! conform! exe! sys! dpl! present!) (and (= (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) accessed!) (= (verismo!snp.cpu.gdt.impl&%0.spec_write.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) write!) (= (verismo!snp.cpu.gdt.impl&%0.spec_conform.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) conform!) (= (verismo!snp.cpu.gdt.impl&%0.spec_exe.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) exe!) (= (verismo!snp.cpu.gdt.impl&%0.spec_sys.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) sys!) (= (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) dpl!) (= (verismo!snp.cpu.gdt.impl&%0.spec_present.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) present!))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%2.axiom_spec_new. accessed! write! conform! exe! sys! dpl! present!)))))
(assert (forall ((accessed! Poly) (write! Poly) (conform! Poly) (exe! Poly) (sys! Poly) (dpl! Poly) (present! Poly)) (! (=> (and (has_type accessed! (UINT 64)) (has_type write! (UINT 64)) (has_type conform! (UINT 64)) (has_type exe! (UINT 64)) (has_type sys! (UINT 64)) (has_type dpl! (UINT 64)) (has_type present! (UINT 64))) (and (and (and (and (and (and (= (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I accessed!)) (= (verismo!snp.cpu.gdt.impl&%0.spec_write.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I write!))) (= (verismo!snp.cpu.gdt.impl&%0.spec_conform.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I conform!))) (= (verismo!snp.cpu.gdt.impl&%0.spec_exe.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I exe!))) (= (verismo!snp.cpu.gdt.impl&%0.spec_sys.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I sys!))) (= (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I dpl!))) (= (verismo!snp.cpu.gdt.impl&%0.spec_present.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I present!)))) :pattern ((verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%3.new.? val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%3.new.? val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_present.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_present.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_present.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) val!)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_present.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_present.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_present.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_sys.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_sys.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_exe.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_exe.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_conform.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_conform.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_write.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_write.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_write.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_write.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_write.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_write.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? val! (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_accessed.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_accessed.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_accessed.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_accessed.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_accessed.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_accessed.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_write.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_write.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_write.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 1))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_write.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_write.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_write.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_conform.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_conform.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_conform.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 2))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_conform.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_conform.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_conform.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_exe.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_exe.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_exe.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 3))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_exe.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_exe.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_exe.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_sys.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_sys.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_sys.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 4))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_sys.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_sys.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_sys.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_dpl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_dpl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_dpl.? self!) (let ((mask$ (uClip 64 3))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 5))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_dpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_dpl.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_dpl.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_present.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_present.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_present.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 7))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_present.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_present.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_present.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.view.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.view.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.view.? self!) (verismo!snp.cpu.gdt.impl&%1.spec_set_present.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_write.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_accessed.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_write.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_conform.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_exe.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_sys.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_dpl.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_present.? self!))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%16.view.? self!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%16.view.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%3.axiom_new. (verismo!snp.cpu.gdt.DescriptorAttr0_7.) Bool)
(assert (forall ((val! verismo!snp.cpu.gdt.DescriptorAttr0_7.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%3.axiom_new. val!) (= (verismo!snp.cpu.gdt.impl&%3.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. val!))))) (verismo!snp.cpu.gdt.impl&%16.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. val!)))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%3.axiom_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (= (verismo!snp.cpu.gdt.impl&%3.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. val!)))) (verismo!snp.cpu.gdt.impl&%16.view.? val!))) :pattern ((verismo!snp.cpu.gdt.impl&%3.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. val!)))) (verismo!snp.cpu.gdt.impl&%16.view.? val!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.impl&%3.to_value.? self!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)) :pattern ((verismo!snp.cpu.gdt.impl&%3.to_value.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%3.axiom_into. (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%3.axiom_into. self!) (= (verismo!snp.cpu.gdt.impl&%16.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.impl&%3.to_value.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!)))) self!)) :pattern ((ens%verismo!snp.cpu.gdt.impl&%3.axiom_into. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (= (verismo!snp.cpu.gdt.impl&%16.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.impl&%3.to_value.? self!))) (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%3.to_value.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%15.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!snp.cpu.gdt.impl&%15.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self! ret!) (= self! ret!))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%15.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)) (has_type ret$ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= self$ (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. ret$))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.inv.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.inv.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 127)))) :pattern ((verismo!snp.cpu.gdt.impl&%16.inv.? self!))))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%16.axiom_inv. (verismo!snp.cpu.gdt.DescriptorAttr0_7.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.DescriptorAttr0_7.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%16.axiom_inv. self!) (and (verismo!snp.cpu.gdt.impl&%16.inv.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 127))))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%16.axiom_inv. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (and (verismo!snp.cpu.gdt.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 127))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.inv.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!))))))
(assert (forall ((avl! Poly) (long! Poly) (size32_or_16! Poly) (granularity! Poly)) (! (=> (and (has_type avl! (UINT 64)) (has_type long! (UINT 64)) (has_type size32_or_16! (UINT 64)) (has_type granularity! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%17.spec_avl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%17.spec_avl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%17.spec_long.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%17.spec_long.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%17.spec_long.? self!) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_long.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%17.spec_long.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_long.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%17.spec_granularity.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%17.spec_granularity.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%19.axiom_spec_new. (Int Int Int Int) Bool)
(assert (forall ((avl! Int) (long! Int) (size32_or_16! Int) (granularity! Int)) (! (= (ens%verismo!snp.cpu.gdt.impl&%19.axiom_spec_new. avl! long! size32_or_16! granularity!) (and (= (verismo!snp.cpu.gdt.impl&%17.spec_avl.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I avl!) (I long!) (I size32_or_16!) (I granularity!)))) avl!) (= (verismo!snp.cpu.gdt.impl&%17.spec_long.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I avl!) (I long!) (I size32_or_16!) (I granularity!)))) long!) (= (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I avl!) (I long!) (I size32_or_16!) (I granularity!)))) size32_or_16!) (= (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I avl!) (I long!) (I size32_or_16!) (I granularity!)))) granularity!))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%19.axiom_spec_new. avl! long! size32_or_16! granularity!)))))
(assert (forall ((avl! Poly) (long! Poly) (size32_or_16! Poly) (granularity! Poly)) (! (=> (and (has_type avl! (UINT 64)) (has_type long! (UINT 64)) (has_type size32_or_16! (UINT 64)) (has_type granularity! (UINT 64))) (and (and (and (= (verismo!snp.cpu.gdt.impl&%17.spec_avl.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!))) (%I avl!)) (= (verismo!snp.cpu.gdt.impl&%17.spec_long.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!))) (%I long!))) (= (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!))) (%I size32_or_16!))) (= (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!))) (%I granularity!)))) :pattern ((verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%20.new.? val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%20.new.? val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? self! val!) (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I (verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_long.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!)) val!)) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? self! val!) (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I (verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_long.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_long.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_long.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%18.spec_set_long.? self! val!) (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I (verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_long.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_long.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_long.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_avl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_avl.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? self! val!) (verismo!snp.cpu.gdt.impl&%19.spec_new.? val! (I (verismo!snp.cpu.gdt.impl&%17.spec_long.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.spec_avl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.spec_avl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.spec_avl.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_avl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (uInv 64 (verismo!snp.cpu.gdt.impl&%33.spec_avl.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_avl.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.spec_long.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.spec_long.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.spec_long.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (I (uClip 64 1))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_long.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (uInv 64 (verismo!snp.cpu.gdt.impl&%33.spec_long.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_long.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (I (uClip 64 2))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (uInv 64 (verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.spec_granularity.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.spec_granularity.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.spec_granularity.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (I (uClip 64 3))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_granularity.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (uInv 64 (verismo!snp.cpu.gdt.impl&%33.spec_granularity.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_granularity.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.view.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.view.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.view.? self!) (verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_long.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%33.spec_avl.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%33.spec_long.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%33.spec_granularity.? self!))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%33.view.? self!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%33.view.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%20.axiom_new. (verismo!snp.cpu.gdt.DescriptorAttr8_11.) Bool)
(assert (forall ((val! verismo!snp.cpu.gdt.DescriptorAttr8_11.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%20.axiom_new. val!) (= (verismo!snp.cpu.gdt.impl&%20.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. val!))))) (verismo!snp.cpu.gdt.impl&%33.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. val!)))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%20.axiom_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (= (verismo!snp.cpu.gdt.impl&%20.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. val!)))) (verismo!snp.cpu.gdt.impl&%33.view.? val!))) :pattern ((verismo!snp.cpu.gdt.impl&%20.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. val!)))) (verismo!snp.cpu.gdt.impl&%33.view.? val!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.impl&%20.to_value.? self!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)) :pattern ((verismo!snp.cpu.gdt.impl&%20.to_value.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%20.axiom_into. (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%20.axiom_into. self!) (= (verismo!snp.cpu.gdt.impl&%33.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.impl&%20.to_value.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!)))) self!)) :pattern ((ens%verismo!snp.cpu.gdt.impl&%20.axiom_into. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (= (verismo!snp.cpu.gdt.impl&%33.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.impl&%20.to_value.? self!))) (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%20.to_value.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%32.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!snp.cpu.gdt.impl&%32.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self! ret!) (= self! ret!))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%32.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)) (has_type ret$ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= self$ (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. ret$))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.inv.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.inv.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 7)))) :pattern ((verismo!snp.cpu.gdt.impl&%33.inv.? self!))))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%33.axiom_inv. (verismo!snp.cpu.gdt.DescriptorAttr8_11.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.DescriptorAttr8_11.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%33.axiom_inv. self!) (and (verismo!snp.cpu.gdt.impl&%33.inv.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 7))))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%33.axiom_inv. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (and (verismo!snp.cpu.gdt.impl&%33.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 7))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.inv.? self!) (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!))))))
(assert (forall ((limit0_15! Poly) (base0_23! Poly) (attr_0_7! Poly) (limit16_19! Poly) (attr_8_11! Poly) (base24_31! Poly)) (! (=> (and (has_type limit0_15! (UINT 64)) (has_type base0_23! (UINT 64)) (has_type attr_0_7! (UINT 64)) (has_type limit16_19! (UINT 64)) (has_type attr_8_11! (UINT 64)) (has_type base24_31! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_base0_23.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_base0_23.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_base24_31.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_base24_31.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%36.axiom_spec_new. (Int Int Int Int Int Int) Bool)
(assert (forall ((limit0_15! Int) (base0_23! Int) (attr_0_7! Int) (limit16_19! Int) (attr_8_11! Int) (base24_31! Int)) (! (= (ens%verismo!snp.cpu.gdt.impl&%36.axiom_spec_new. limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!) (and (= (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) limit0_15!) (= (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) base0_23!) (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) attr_0_7!) (= (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) limit16_19!) (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) attr_8_11!) (= (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) base24_31!))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%36.axiom_spec_new. limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!)))))
(assert (forall ((limit0_15! Poly) (base0_23! Poly) (attr_0_7! Poly) (limit16_19! Poly) (attr_8_11! Poly) (base24_31! Poly)) (! (=> (and (has_type limit0_15! (UINT 64)) (has_type base0_23! (UINT 64)) (has_type attr_0_7! (UINT 64)) (has_type limit16_19! (UINT 64)) (has_type attr_8_11! (UINT 64)) (has_type base24_31! (UINT 64))) (and (and (and (and (and (= (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I limit0_15!)) (= (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I base0_23!))) (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I attr_0_7!))) (= (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I limit16_19!))) (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I attr_8_11!))) (= (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I base24_31!)))) :pattern ((verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%37.new.? val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%37.new.? val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)) val!)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? val! (I (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? self!) (let ((mask$ (uClip 64 65535))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_base0_23.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_base0_23.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? self!) (let ((mask$ (uClip 64 16777215))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 16))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? self!) (let ((mask$ (uClip 64 255))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 40))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? self!) (let ((mask$ (uClip 64 15))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 48))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? self!) (let ((mask$ (uClip 64 15))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 52))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_base24_31.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_base24_31.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? self!) (let ((mask$ (uClip 64 511))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 56))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.view.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.view.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.view.? self!) (verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? self!))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%50.view.? self!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%50.view.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%37.axiom_new. (verismo!snp.cpu.gdt.Descriptor.) Bool)
(assert (forall ((val! verismo!snp.cpu.gdt.Descriptor.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%37.axiom_new. val!) (= (verismo!snp.cpu.gdt.impl&%37.new.? (I (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. (Poly%verismo!snp.cpu.gdt.Descriptor. val!))))) (verismo!snp.cpu.gdt.impl&%50.view.? (Poly%verismo!snp.cpu.gdt.Descriptor. val!)))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%37.axiom_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!snp.cpu.gdt.Descriptor.) (= (verismo!snp.cpu.gdt.impl&%37.new.? (I (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. val!)))) (verismo!snp.cpu.gdt.impl&%50.view.? val!))) :pattern ((verismo!snp.cpu.gdt.impl&%37.new.? (I (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. val!)))) (verismo!snp.cpu.gdt.impl&%50.view.? val!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.impl&%37.to_value.? self!)) TYPE%verismo!snp.cpu.gdt.Descriptor.)) :pattern ((verismo!snp.cpu.gdt.impl&%37.to_value.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%37.axiom_into. (verismo!snp.cpu.gdt.DescriptorSpec.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%37.axiom_into. self!) (= (verismo!snp.cpu.gdt.impl&%50.view.? (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.impl&%37.to_value.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!)))) self!)) :pattern ((ens%verismo!snp.cpu.gdt.impl&%37.axiom_into. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (= (verismo!snp.cpu.gdt.impl&%50.view.? (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.impl&%37.to_value.? self!))) (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%37.to_value.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%49.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!snp.cpu.gdt.impl&%49.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!snp.cpu.gdt.Descriptor. self! ret!) (= self! ret!))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%49.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpu.gdt.Descriptor.)) (has_type ret$ TYPE%verismo!snp.cpu.gdt.Descriptor.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!snp.cpu.gdt.Descriptor.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpu.gdt.Descriptor.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!snp.cpu.gdt.Descriptor. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= self$ (%Poly%verismo!snp.cpu.gdt.Descriptor. ret$))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!snp.cpu.gdt.Descriptor.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpu.gdt.Descriptor.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.inv.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.inv.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 18446744073709551615)))) :pattern ((verismo!snp.cpu.gdt.impl&%50.inv.? self!))))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%50.axiom_inv. (verismo!snp.cpu.gdt.Descriptor.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.Descriptor.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%50.axiom_inv. self!) (and (verismo!snp.cpu.gdt.impl&%50.inv.? (Poly%verismo!snp.cpu.gdt.Descriptor. self!)) (let ((tmp%%$ (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. (Poly%verismo!snp.cpu.gdt.Descriptor. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 18446744073709551615))))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%50.axiom_inv. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (and (verismo!snp.cpu.gdt.impl&%50.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 18446744073709551615))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.inv.? self!) (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%53.spec_default.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%53.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!snp.cpu.gdt.Gdtr.) (Poly%verismo!snp.cpu.gdt.Gdtr. (verismo!snp.cpu.gdt.Gdtr./Gdtr (%Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) $ TYPE%tuple%0. (I 0))))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) $ TYPE%tuple%0. (I 0))))))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%59.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%59.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self!) (B (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/base (%Poly%verismo!snp.cpu.gdt.Gdtr. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%2.axiom_spec_new. (Int Int Int Int Int Int Int) Bool)
(assert (forall ((snp! Int) (vtom! Int) (reflectvc! Int) (restrict_inj! Int) (alternate_inj! Int) (btb_isolation! Int) (secure_tsc! Int)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%2.axiom_spec_new. snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!) (and (= (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I snp!) (I vtom!) (I reflectvc!) (I restrict_inj!) (I alternate_inj!) (I btb_isolation!) (I secure_tsc!)))) snp!) (= (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I snp!) (I vtom!) (I reflectvc!) (I restrict_inj!) (I alternate_inj!) (I btb_isolation!) (I secure_tsc!)))) vtom!) (= (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I snp!) (I vtom!) (I reflectvc!) (I restrict_inj!) (I alternate_inj!) (I btb_isolation!) (I secure_tsc!)))) reflectvc!) (= (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I snp!) (I vtom!) (I reflectvc!) (I restrict_inj!) (I alternate_inj!) (I btb_isolation!) (I secure_tsc!)))) restrict_inj!) (= (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I snp!) (I vtom!) (I reflectvc!) (I restrict_inj!) (I alternate_inj!) (I btb_isolation!) (I secure_tsc!)))) alternate_inj!) (= (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I snp!) (I vtom!) (I reflectvc!) (I restrict_inj!) (I alternate_inj!) (I btb_isolation!) (I secure_tsc!)))) btb_isolation!) (= (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I snp!) (I vtom!) (I reflectvc!) (I restrict_inj!) (I alternate_inj!) (I btb_isolation!) (I secure_tsc!)))) secure_tsc!))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%2.axiom_spec_new. snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!)))))
(assert (forall ((snp! Poly) (vtom! Poly) (reflectvc! Poly) (restrict_inj! Poly) (alternate_inj! Poly) (btb_isolation! Poly) (secure_tsc! Poly)) (! (=> (and (has_type snp! (UINT 64)) (has_type vtom! (UINT 64)) (has_type reflectvc! (UINT 64)) (has_type restrict_inj! (UINT 64)) (has_type alternate_inj! (UINT 64)) (has_type btb_isolation! (UINT 64)) (has_type secure_tsc! (UINT 64))) (and (and (and (and (and (and (= (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!))) (%I snp!)) (= (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!))) (%I vtom!))) (= (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!))) (%I reflectvc!))) (= (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!))) (%I restrict_inj!))) (= (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!))) (%I alternate_inj!))) (= (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!))) (%I btb_isolation!))) (= (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!))) (%I secure_tsc!)))) :pattern ((verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc.? self! val!) (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!)) val!)) :pattern ((verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation.? self! val!) (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!)) val! (I (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!)))) :pattern ((verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj.? self! val!) (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!)) val! (I (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!)))) :pattern ((verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj.? self! val!) (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!)) val! (I (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!)))) :pattern ((verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc.? self! val!) (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!)) val! (I (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!)))) :pattern ((verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom.? self! val!) (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!)) val! (I (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!)))) :pattern ((verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_snp.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_snp.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%1.spec_set_snp.? self! val!) (verismo!snp.cpu.vmsa.impl&%2.spec_new.? val! (I (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!)))) :pattern ((verismo!snp.cpu.vmsa.impl&%1.spec_set_snp.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_snp.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_snp.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_snp.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_snp.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%16.spec_snp.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_snp.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_vtom.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_vtom.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_vtom.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (I (uClip 64 1))))) (I mask$))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_vtom.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%16.spec_vtom.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_vtom.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (I (uClip 64 2))))) (I mask$))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (I (uClip 64 3))))) (I mask$))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (I (uClip 64 4))))) (I mask$))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (I (uClip 64 7))))) (I mask$))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (I (uClip 64 9))))) (I mask$))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.view.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.view.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.view.? self!) (verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%1.spec_set_snp.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (I (uClip 64 (verismo!snp.cpu.vmsa.impl&%16.spec_snp.? self!))))) (I (uClip 64 (verismo!snp.cpu.vmsa.impl&%16.spec_vtom.? self!))))) (I (uClip 64 (verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.? self!))))) (I (uClip 64 (verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.? self!))))) (I (uClip 64 (verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.? self!))))) (I (uClip 64 (verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.? self!))))) (I (uClip 64 (verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.? self!))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.view.? self!))))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%3.axiom_new. (verismo!snp.cpu.vmsa.SevFeatures.) Bool)
(assert (forall ((val! verismo!snp.cpu.vmsa.SevFeatures.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%3.axiom_new. val!) (= (verismo!snp.cpu.vmsa.impl&%3.new.? (I (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. (Poly%verismo!snp.cpu.vmsa.SevFeatures. val!))))) (verismo!snp.cpu.vmsa.impl&%16.view.? (Poly%verismo!snp.cpu.vmsa.SevFeatures. val!)))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%3.axiom_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (= (verismo!snp.cpu.vmsa.impl&%3.new.? (I (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. val!)))) (verismo!snp.cpu.vmsa.impl&%16.view.? val!))) :pattern ((verismo!snp.cpu.vmsa.impl&%3.new.? (I (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. val!)))) (verismo!snp.cpu.vmsa.impl&%16.view.? val!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (has_type (Poly%verismo!snp.cpu.vmsa.SevFeatures. (verismo!snp.cpu.vmsa.impl&%3.to_value.? self!)) TYPE%verismo!snp.cpu.vmsa.SevFeatures.)) :pattern ((verismo!snp.cpu.vmsa.impl&%3.to_value.? self!)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%3.axiom_into. (verismo!snp.cpu.vmsa.SevFeaturesSpec.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.SevFeaturesSpec.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%3.axiom_into. self!) (= (verismo!snp.cpu.vmsa.impl&%16.view.? (Poly%verismo!snp.cpu.vmsa.SevFeatures. (verismo!snp.cpu.vmsa.impl&%3.to_value.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. self!)))) self!)) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%3.axiom_into. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (= (verismo!snp.cpu.vmsa.impl&%16.view.? (Poly%verismo!snp.cpu.vmsa.SevFeatures. (verismo!snp.cpu.vmsa.impl&%3.to_value.? self!))) (%Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%3.to_value.? self!)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%15.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%15.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self! ret!) (= self! ret!))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%15.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpu.vmsa.SevFeatures.)) (has_type ret$ TYPE%verismo!snp.cpu.vmsa.SevFeatures.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!snp.cpu.vmsa.SevFeatures.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!snp.cpu.vmsa.SevFeatures. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= self$ (%Poly%verismo!snp.cpu.vmsa.SevFeatures. ret$))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!snp.cpu.vmsa.SevFeatures.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.inv.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.inv.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 511)))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.inv.? self!))))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%16.axiom_inv. (verismo!snp.cpu.vmsa.SevFeatures.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.SevFeatures.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%16.axiom_inv. self!) (and (verismo!snp.cpu.vmsa.impl&%16.inv.? (Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)) (let ((tmp%%$ (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. (Poly%verismo!snp.cpu.vmsa.SevFeatures. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 511))))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%16.axiom_inv. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (and (verismo!snp.cpu.vmsa.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 511))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.inv.? self!) (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!))))))
(assert (forall ((es! Poly) (cs! Poly) (ss! Poly) (ds! Poly) (fs! Poly) (gs! Poly) (gdtr! Poly) (reserved_ldtr_idtr_tr! Poly) (vmpl! Poly) (cpl! Poly) (reserved2! Poly) (efer! Poly) (reserved3! Poly) (cr4! Poly) (cr3! Poly) (cr0! Poly) (reserved_dr7_6! Poly) (rflags! Poly) (rip! Poly) (reserved4! Poly) (rsp! Poly) (reserved5! Poly) (rax! Poly) (reserved6! Poly) (gpat! Poly) (reserved7! Poly) (rcx! Poly) (rdx! Poly) (rbx! Poly) (reserved8! Poly) (rbp! Poly) (rsi! Poly) (rdi! Poly) (reserved_9_r9_15_exits_scratch! Poly) (sev_features! Poly) (vintr_ctrl! Poly) (guest_error_code! Poly) (virtual_tom! Poly) (reserved_12! Poly) (xcr0! Poly) (reserved13! Poly)) (! (=> (and (has_type es! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type cs! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type ss! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type ds! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type fs! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type gs! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type gdtr! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type reserved_ldtr_idtr_tr! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90))) (has_type vmpl! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type cpl! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type reserved2! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4))) (has_type efer! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved3! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type cr4! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type cr3! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type cr0! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved_dr7_6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16))) (has_type rflags! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rip! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved4! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88))) (has_type rsp! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved5! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24))) (has_type rax! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104))) (has_type gpat! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved7! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152))) (has_type rcx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rdx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rbx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved8! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8))) (has_type rbp! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rsi! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rdi! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved_9_r9_15_exits_scratch! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type sev_features! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type vintr_ctrl! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type guest_error_code! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type virtual_tom! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved_12! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24))) (has_type xcr0! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved13! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)))) (has_type (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!)) TYPE%verismo!snp.cpu.vmsa.Vmsa.)) :pattern ((verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_es.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_es.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_es.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/es (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_es.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cs.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cs.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_cs.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_cs.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ss.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ss.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_ss.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_ss.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ds.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ds.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_ds.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_ds.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_fs.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_fs.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_fs.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_fs.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gs.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gs.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_gs.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_gs.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cpl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cpl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_efer.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_efer.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_efer.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_efer.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr4.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr4.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr3.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr3.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr0.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr0.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rflags.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rflags.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rip.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rip.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rip.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rip.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsp.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsp.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rax.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rax.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rax.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gpat.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gpat.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rcx.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rcx.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdx.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdx.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbx.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbx.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbp.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbp.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsi.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsi.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdi.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdi.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? self!)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%27.axiom_spec_new. (verismo!snp.cpu.vmsa.VmsaSegmentRegister. verismo!snp.cpu.vmsa.VmsaSegmentRegister. verismo!snp.cpu.vmsa.VmsaSegmentRegister. verismo!snp.cpu.vmsa.VmsaSegmentRegister. verismo!snp.cpu.vmsa.VmsaSegmentRegister. verismo!snp.cpu.vmsa.VmsaSegmentRegister. verismo!snp.cpu.vmsa.VmsaSegmentRegister. Poly verismo!tspec.security.sectype.SecType<u8./tuple%0.>. verismo!tspec.security.sectype.SecType<u8./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly) Bool)
(assert (forall ((es! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (cs! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (ss! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (ds! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (fs! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (gs! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (gdtr! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (reserved_ldtr_idtr_tr! Poly) (vmpl! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (cpl! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (reserved2! Poly) (efer! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved3! Poly) (cr4! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (cr3! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (cr0! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved_dr7_6! Poly) (rflags! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (rip! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved4! Poly) (rsp! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved5! Poly) (rax! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved6! Poly) (gpat! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved7! Poly) (rcx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (rdx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (rbx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved8! Poly) (rbp! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (rsi! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (rdi! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved_9_r9_15_exits_scratch! Poly) (sev_features! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (vintr_ctrl! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (guest_error_code! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (virtual_tom! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved_12! Poly) (xcr0! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved13! Poly)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%27.axiom_spec_new. es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!) (and (= (verismo!snp.cpu.vmsa.impl&%25.spec_es.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) es!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cs.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) cs!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_ss.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) ss!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_ds.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) ds!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_fs.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) fs!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_gs.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) gs!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) gdtr!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved_ldtr_idtr_tr!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) vmpl!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) cpl!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved2!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_efer.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) efer!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved3!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) cr4!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) cr3!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) cr0!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved_dr7_6!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rflags!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rip.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rip!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved4!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rsp!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved5!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rax!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved6!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) gpat!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved7!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rcx!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rdx!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rbx!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved8!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rbp!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rsi!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rdi!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved_9_r9_15_exits_scratch!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) sev_features!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) vintr_ctrl!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) guest_error_code!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) virtual_tom!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved_12!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) xcr0!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved13!))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%27.axiom_spec_new. es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!)))))
(assert (forall ((es! Poly) (cs! Poly) (ss! Poly) (ds! Poly) (fs! Poly) (gs! Poly) (gdtr! Poly) (reserved_ldtr_idtr_tr! Poly) (vmpl! Poly) (cpl! Poly) (reserved2! Poly) (efer! Poly) (reserved3! Poly) (cr4! Poly) (cr3! Poly) (cr0! Poly) (reserved_dr7_6! Poly) (rflags! Poly) (rip! Poly) (reserved4! Poly) (rsp! Poly) (reserved5! Poly) (rax! Poly) (reserved6! Poly) (gpat! Poly) (reserved7! Poly) (rcx! Poly) (rdx! Poly) (rbx! Poly) (reserved8! Poly) (rbp! Poly) (rsi! Poly) (rdi! Poly) (reserved_9_r9_15_exits_scratch! Poly) (sev_features! Poly) (vintr_ctrl! Poly) (guest_error_code! Poly) (virtual_tom! Poly) (reserved_12! Poly) (xcr0! Poly) (reserved13! Poly)) (! (=> (and (has_type es! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type cs! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type ss! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type ds! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type fs! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type gs! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type gdtr! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type reserved_ldtr_idtr_tr! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90))) (has_type vmpl! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type cpl! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type reserved2! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4))) (has_type efer! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved3! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type cr4! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type cr3! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type cr0! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved_dr7_6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16))) (has_type rflags! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rip! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved4! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88))) (has_type rsp! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved5! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24))) (has_type rax! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104))) (has_type gpat! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved7! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152))) (has_type rcx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rdx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rbx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved8! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8))) (has_type rbp! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rsi! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rdi! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved_9_r9_15_exits_scratch! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type sev_features! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type vintr_ctrl! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type guest_error_code! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type virtual_tom! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved_12! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24))) (has_type xcr0! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved13! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (verismo!snp.cpu.vmsa.impl&%25.spec_es.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cs.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_ss.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_ds.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_fs.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_gs.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved_ldtr_idtr_tr!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved2!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_efer.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved3!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved_dr7_6!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rip.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved4!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved5!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved6!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved7!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved8!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved_9_r9_15_exits_scratch!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved_12!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved13!))) :pattern ((verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!)))))
(assert (forall ((T&. Dcr) (T& Type) (F&. Dcr) (F& Type) (val! Poly) (offset! Poly)) (! (=> (and (has_type val! T&) (has_type offset! NAT)) (has_type (verismo!tspec.cast.field_at.? T&. T& F&. F& val! offset!) F&)) :pattern ((verismo!tspec.cast.field_at.? T&. T& F&. F& val! offset!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (verismo!tspec.size_s.SpecSize.spec_size_def.? Self%&. Self%&) NAT) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? Self%&. Self%&)))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%12.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%12.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16)) (I 2))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 16)))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%19.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%19.spec_size_def.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32)) (I 4))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 32)))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%10.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%10.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)) (I 8))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%21.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%21.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%13.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%13.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8)) (I 1))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 8)))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%4.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%4.spec_size_def.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int N&) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)))))) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 90)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.? no%param))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.? no%param)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_vmpl. (verismo!snp.cpu.vmsa.Vmsa.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.Vmsa.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_vmpl. self!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? (Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (I (verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.? (I 0))))))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_vmpl. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (= (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! (I (verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.? (I 0))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 90)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 4)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 88)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 24)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.? no%param))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.? no%param)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rax. (verismo!snp.cpu.vmsa.Vmsa.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.Vmsa.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rax. self!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? (Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (I (verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.? (I 0))))))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rax. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.? (I 0))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rax.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 90)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 4)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 88)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 24)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 104)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 152)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.? no%param))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.? no%param)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rcx. (verismo!snp.cpu.vmsa.Vmsa.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.Vmsa.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rcx. self!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (I (verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.? (I 0))))))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rcx. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.? (I 0))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 90)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 4)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 88)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 24)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 104)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 152)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.? no%param))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.? no%param)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rdx. (verismo!snp.cpu.vmsa.Vmsa.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.Vmsa.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rdx. self!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (I (verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.? (I 0))))))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rdx. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.? (I 0))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 90)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 4)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 88)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 24)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 104)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 152)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.? no%param))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.? no%param)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rbx. (verismo!snp.cpu.vmsa.Vmsa.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.Vmsa.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rbx. self!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (I (verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.? (I 0))))))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rbx. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.? (I 0))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 90)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 4)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 88)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 24)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 104)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 152)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 8)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.? no%param))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.? no%param)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_guest_error_code. (verismo!snp.cpu.vmsa.Vmsa.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.Vmsa.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_guest_error_code. self!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? (Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (I (verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.? (I 0))))))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_guest_error_code. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (= (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.? (I 0))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (size! Poly)) (! (=> (and (has_type self! Self%&) (has_type size! NAT)) (has_type (verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with.? Self%&. Self%& self! size!) BOOL)) :pattern ((verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with.? Self%&. Self%& self! size!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? Self%&. Self%& self!) INT)) :pattern ((verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%1.to_page.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%1.to_page.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT self!) (I (EucDiv (%I self!) 4096))) :pattern ((verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (forall ((snpcore! Poly) (lockperms! Poly)) (! (=> (and (has_type snpcore! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type lockperms! (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.))) (has_type (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. (verismo!snp.trackedcore.snpmulticore.impl&%2.spec_new.? snpcore! lockperms!)) TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.)) :pattern ((verismo!snp.trackedcore.snpmulticore.impl&%2.spec_new.? snpcore! lockperms!)))))
(assert (fuel_bool_default fuel%verismo!snp.trackedcore.snpmulticore.impl&%0.spec_snpcore.))
(assert (=> (fuel_bool fuel%verismo!snp.trackedcore.snpmulticore.impl&%0.spec_snpcore.) (forall ((self! Poly)) (! (= (verismo!snp.trackedcore.snpmulticore.impl&%0.spec_snpcore.? self!) (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) :pattern ((verismo!snp.trackedcore.snpmulticore.impl&%0.spec_snpcore.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem.) (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.impl&%0.spec_snpcore.? self!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)) :pattern ((verismo!snp.trackedcore.snpmulticore.impl&%0.spec_snpcore.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.trackedcore.snpmulticore.impl&%0.spec_lockperms.))
(assert (=> (fuel_bool fuel%verismo!snp.trackedcore.snpmulticore.impl&%0.spec_lockperms.) (forall ((self! Poly)) (! (= (verismo!snp.trackedcore.snpmulticore.impl&%0.spec_lockperms.? self!) (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) :pattern ((verismo!snp.trackedcore.snpmulticore.impl&%0.spec_lockperms.? self!))))))
(declare-fun ens%verismo!snp.trackedcore.snpmulticore.impl&%2.axiom_spec_new. (verismo!registers.trackedcore.snpcore.SnpCore. vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>.) Bool)
(assert (forall ((snpcore! verismo!registers.trackedcore.snpcore.SnpCore.) (lockperms! vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>.)) (! (= (ens%verismo!snp.trackedcore.snpmulticore.impl&%2.axiom_spec_new. snpcore! lockperms!) (and (= (verismo!snp.trackedcore.snpmulticore.impl&%0.spec_snpcore.? (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. (verismo!snp.trackedcore.snpmulticore.impl&%2.spec_new.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. snpcore!) (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. lockperms!)))) snpcore!) (= (verismo!snp.trackedcore.snpmulticore.impl&%0.spec_lockperms.? (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. (verismo!snp.trackedcore.snpmulticore.impl&%2.spec_new.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. snpcore!) (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. lockperms!)))) lockperms!))) :pattern ((ens%verismo!snp.trackedcore.snpmulticore.impl&%2.axiom_spec_new. snpcore! lockperms!)))))
(assert (forall ((snpcore! Poly) (lockperms! Poly)) (! (=> (and (has_type snpcore! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type lockperms! (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.))) (and (= (verismo!snp.trackedcore.snpmulticore.impl&%0.spec_snpcore.? (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. (verismo!snp.trackedcore.snpmulticore.impl&%2.spec_new.? snpcore! lockperms!))) (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. snpcore!)) (= (verismo!snp.trackedcore.snpmulticore.impl&%0.spec_lockperms.? (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. (verismo!snp.trackedcore.snpmulticore.impl&%2.spec_new.? snpcore! lockperms!))) (%Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. lockperms!)))) :pattern ((verismo!snp.trackedcore.snpmulticore.impl&%2.spec_new.? snpcore! lockperms!)))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%69.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%69.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ NAT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%29.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%29.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ NAT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%28.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%28.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ INT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ INT self! rhs!))))))
(declare-fun ens%verismo!tspec_e.array.array_t.impl&%1.clone. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (ret! Poly)) (! (= (ens%verismo!tspec_e.array.array_t.impl&%1.clone. T&. T& N&. N& self! ret!) (and (ens%core!clone.Clone.clone. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self! ret!) (= ret! self!))) :pattern ((ens%verismo!tspec_e.array.array_t.impl&%1.clone. T&. T& N&. N& self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly) (T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))) (has_type ret$ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)) $ (TYPE%tuple%1. (REF $) (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= ret$ self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)) $ (TYPE%tuple%1. (REF $) (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)) (F fndef_singleton) tmp%%$ ret$)))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_t.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_t.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (= (verismo!tspec_e.array.array_t.impl&%2.spec_index.? T&. T& N&. N& self! i!) (vstd!seq.Seq.index.? T&. T& (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) i!)) :pattern ((verismo!tspec_e.array.array_t.impl&%2.spec_index.? T&. T& N&. N& self! i!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)) (has_type i! INT)) (has_type (verismo!tspec_e.array.array_t.impl&%2.spec_index.? T&. T& N&. N& self! i!) T&)) :pattern ((verismo!tspec_e.array.array_t.impl&%2.spec_index.? T&. T& N&. N& self! i!)))))
(declare-fun ens%verismo!tspec.cast.axiom_cast_to_seq_unique. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (ens%verismo!tspec.cast.axiom_cast_to_seq_unique. T&. T& val!) (= val! (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!)))) :pattern ((ens%verismo!tspec.cast.axiom_cast_to_seq_unique. T&. T& val!)))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! T&) (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (= val! (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!))))))
(declare-fun req%verismo!tspec.cast.proof_into_is_constant_to. (Dcr Type Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%57 Bool)
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (v! Poly) (vmpl! Int)) (! (= (req%verismo!tspec.cast.proof_into_is_constant_to. T1&. T1& T2&. T2& v! vmpl!) (=> %%global_location_label%%57 (and (<= 1 vmpl!) (<= vmpl! 4)))) :pattern ((req%verismo!tspec.cast.proof_into_is_constant_to. T1&. T1& T2&. T2& v! vmpl!)))))
(declare-fun ens%verismo!tspec.cast.proof_into_is_constant_to. (Dcr Type Dcr Type Poly Int) Bool)
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (v! Poly) (vmpl! Int)) (! (= (ens%verismo!tspec.cast.proof_into_is_constant_to. T1&. T1& T2&. T2& v! vmpl!) (= (verismo!tspec.isconst.IsConstant.is_constant_to.? T1&. T1& v! (I vmpl!)) (verismo!tspec.isconst.IsConstant.is_constant_to.? T2&. T2& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T1&. T1& T2&. T2& v!) (I vmpl!)))) :pattern ((ens%verismo!tspec.cast.proof_into_is_constant_to. T1&. T1& T2&. T2& v! vmpl!)))))
(declare-fun ens%verismo!tspec.isconst.axiom_const_forall. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (= (ens%verismo!tspec.isconst.axiom_const_forall. T&. T& v!) (and (and (and (= (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& v!) (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 4))))) :pattern ((ens%verismo!tspec.isconst.axiom_const_forall. T&. T& v!)))))
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (=> (has_type v! T&) (=> (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (and (and (and (= (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& v!) (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 4)))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? T&. T& v!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.ops.VSpecNot.spec_not.? Self%&. Self%& self!) Self%&)) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? Self%&. Self%& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecMul.spec_mul.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.range_set.VRange.end.? Self%&. Self%& self!) INT)) :pattern ((verismo!tspec.range_set.VRange.end.? Self%&. Self%& self!)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (<= 0 (verismo!tspec.size_s.spec_max_count.? T&. T&)) :pattern ((verismo!tspec.size_s.spec_max_count.? T&. T&)))))
(declare-fun ens%verismo!tspec.size_s.axiom_max_count_size_rel. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!tspec.size_s.axiom_max_count_size_rel. T&. T&) (let ((tmp%%$ (verismo!tspec.size_s.spec_max_count.? T&. T&))) (and (< (EucDiv (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (verismo!tspec.size_s.spec_size.? T&. T&))) 2) tmp%%$) (<= tmp%%$ (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (nClip (Mul (verismo!tspec.size_s.spec_size.? T&. T&) 8)))))))) :pattern ((ens%verismo!tspec.size_s.axiom_max_count_size_rel. T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (let ((tmp%%$ (verismo!tspec.size_s.spec_max_count.? T&. T&))) (and (< (EucDiv (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (verismo!tspec.size_s.spec_size.? T&. T&))) 2) tmp%%$) (<= tmp%%$ (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (nClip (Mul (verismo!tspec.size_s.spec_size.? T&. T&) 8))))))) :pattern ((verismo!tspec.size_s.spec_max_count.? T&. T&)))))
(declare-fun ens%verismo!tspec.size_s.axiom_set_full_max_count_rel. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!tspec.size_s.axiom_set_full_max_count_rel. T&. T&) (= (vstd!set.impl&%0.len.? T&. T& (vstd!set.impl&%0.full.? T&. T&)) (verismo!tspec.size_s.spec_max_count.? T&. T&))) :pattern ((ens%verismo!tspec.size_s.axiom_set_full_max_count_rel. T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (vstd!set.impl&%0.len.? T&. T& (vstd!set.impl&%0.full.? T&. T&)) (verismo!tspec.size_s.spec_max_count.? T&. T&)) :pattern ((verismo!tspec.size_s.spec_max_count.? T&. T&)))))
(declare-fun ens%verismo!tspec.size_s.axiom_size_from_cast_bytes. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!tspec.size_s.axiom_size_from_cast_bytes. T&. T&) (= (verismo!tspec.size_s.spec_size.? T&. T&) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)))) :pattern ((ens%verismo!tspec.size_s.axiom_size_from_cast_bytes. T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (= (verismo!tspec.size_s.spec_size.? T&. T&) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)))) :pattern ((verismo!tspec.size_s.spec_size.? T&. T&)))))
(declare-fun ens%verismo!tspec.size_s.axiom_size_from_cast_bytes_def. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (ens%verismo!tspec.size_s.axiom_size_from_cast_bytes_def. T&. T& val!) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (UINT 8) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) val!)))) :pattern ((ens%verismo!tspec.size_s.axiom_size_from_cast_bytes_def. T&. T& val!)))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! T&) (=> (and (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (UINT 8) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) val!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) val!)))))
(declare-fun ens%verismo!primitives_e.sectype.axiom_size_from_cast_secbytes_def. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (ens%verismo!primitives_e.sectype.axiom_size_from_cast_secbytes_def. T&. T& val!) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!)))) :pattern ((ens%verismo!primitives_e.sectype.axiom_size_from_cast_secbytes_def. T&. T& val!)))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! T&) (=> (and (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (PageT&. Dcr) (PageT& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!addr_e.addr_interface.AddrTrait.spec_to_page.? Self%&. Self%& PageT&. PageT& self!) PageT&)) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_to_page.? Self%&. Self%& PageT&. PageT& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (PageT&. Dcr) (PageT& Type) (v! Poly)) (! (=> (has_type v! PageT&) (has_type (verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? Self%&. Self%& PageT&. PageT& v!) INT)) :pattern ((verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? Self%&. Self%& PageT&. PageT& v!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (PageT&. Dcr) (PageT& Type) (self! Poly) (ret! Poly)) (! (=> (and (has_type self! Self%&) (has_type ret! PageT&)) (has_type (verismo!addr_e.addr_interface.AddrTrait.spec_ensures_to_page.? Self%&. Self%& PageT&. PageT& self! ret!) BOOL)) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_ensures_to_page.? Self%&. Self%& PageT&. PageT& self! ret!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (PageT&. Dcr) (PageT& Type) (self! Poly) (size! Poly)) (! (=> (and (has_type self! Self%&) (has_type size! NAT)) (has_type (verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with.? Self%&. Self%& PageT&. PageT& self! size!) BOOL)) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with.? Self%&. Self%& PageT&. PageT& self! size!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (PageT&. Dcr) (PageT& Type) (self! Poly) (size! Poly)) (! (=> (and (has_type self! Self%&) (has_type size! PageT&)) (has_type (verismo!addr_e.addr_interface.AddrTrait.spec_check_valid_addr_requires.? Self%&. Self%& PageT&. PageT& self! size!) BOOL)) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_check_valid_addr_requires.? Self%&. Self%& PageT&. PageT& self! size!)))))
(declare-fun req%verismo!addr_e.addr_interface.AddrTrait.check_valid_addr. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (PageT&. Dcr) (PageT& Type) (self! Poly) (size! Poly)) (! (= (req%verismo!addr_e.addr_interface.AddrTrait.check_valid_addr. Self%&. Self%& PageT&. PageT& self! size!) (=> %%global_location_label%%58 (%B (verismo!addr_e.addr_interface.AddrTrait.spec_check_valid_addr_requires.? Self%&. Self%& PageT&. PageT& self! size!)))) :pattern ((req%verismo!addr_e.addr_interface.AddrTrait.check_valid_addr. Self%&. Self%& PageT&. PageT& self! size!)))))
(declare-fun ens%verismo!addr_e.addr_interface.AddrTrait.check_valid_addr. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (PageT&. Dcr) (PageT& Type) (self! Poly) (size! Poly) (ret! Poly)) (! (= (ens%verismo!addr_e.addr_interface.AddrTrait.check_valid_addr. Self%&. Self%& PageT&. PageT& self! size! ret!) (and (has_type ret! BOOL) (%B (B (= ret! (verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with.? Self%&. Self%& PageT&. PageT& self! (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? Self%&. Self%& PageT&. PageT& size!)))))))) :pattern ((ens%verismo!addr_e.addr_interface.AddrTrait.check_valid_addr. Self%&. Self%& PageT&. PageT& self! size! ret!)))))
(declare-fun req%verismo!addr_e.addr_interface.AddrTrait.to_page. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (PageT&. Dcr) (PageT& Type) (self! Poly)) (! (= (req%verismo!addr_e.addr_interface.AddrTrait.to_page. Self%&. Self%& PageT&. PageT& self!) (=> %%global_location_label%%59 (%B (verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with.? Self%&. Self%& PageT&. PageT& self! (I 0))))) :pattern ((req%verismo!addr_e.addr_interface.AddrTrait.to_page. Self%&. Self%& PageT&. PageT& self!)))))
(declare-fun ens%verismo!addr_e.addr_interface.AddrTrait.to_page. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (PageT&. Dcr) (PageT& Type) (self! Poly) (ret! Poly)) (! (= (ens%verismo!addr_e.addr_interface.AddrTrait.to_page. Self%&. Self%& PageT&. PageT& self! ret!) (and (has_type ret! PageT&) (= ret! (verismo!addr_e.addr_interface.AddrTrait.spec_to_page.? Self%&. Self%& PageT&. PageT& self!)) (%B (verismo!addr_e.addr_interface.AddrTrait.spec_ensures_to_page.? Self%&. Self%& PageT&. PageT& self! ret!)))) :pattern ((ens%verismo!addr_e.addr_interface.AddrTrait.to_page. Self%&. Self%& PageT&. PageT& self! ret!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self! vmpl!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self! vmpl!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%2.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%2.is_constant.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? T1&. T1& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T2&. T2& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? Self%&. Self%& self!) (TYPE%tuple%2. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.)))) :pattern ((verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%696.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%696.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%697.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%697.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%70.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%70.spec_eq.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT SZ) self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT SZ) self! rhs!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (verismo!addr_e.range_interface.MemRangeInterface.spec_end_max.? Self%&. Self%&) (UINT SZ)) :pattern ((verismo!addr_e.range_interface.MemRangeInterface.spec_end_max.? Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_max.? Self%&. Self%&) NAT) :pattern ((verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_max.? Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_sec_max.? Self%&. Self%&) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.)) :pattern ((verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_sec_max.? Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range.? Self%&. Self%& self!) (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range.? Self%&. Self%& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_valid_range.? Self%&. Self%& self!) (TYPE%tuple%2. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.)))) :pattern ((verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_valid_range.? Self%&. Self%& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!addr_e.range_interface.GeneratedMemRangeInterface.wf_range.? Self%&. Self%& self!) BOOL)) :pattern ((verismo!addr_e.range_interface.GeneratedMemRangeInterface.wf_range.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%22.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%22.spec_eq.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ INT self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%9.spec_le.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%9.spec_le.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& $ NAT self! rhs!) (B (<= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.range_set.impl&%0.end.))
(assert (=> (fuel_bool fuel%verismo!tspec.range_set.impl&%0.end.) (forall ((self! Poly)) (! (= (verismo!tspec.range_set.VRange.end.? $ (TYPE%tuple%2. $ INT $ NAT) self!) (I (Add (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)))))) :pattern ((verismo!tspec.range_set.VRange.end.? $ (TYPE%tuple%2. $ INT $ NAT) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%21.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%21.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ NAT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.range_set.range_disjoint.))
(assert (=> (fuel_bool fuel%verismo!tspec.range_set.range_disjoint.) (forall ((f1! Poly) (n1! Poly) (f2! Poly) (n2! Poly)) (! (= (verismo!tspec.range_set.range_disjoint.? f1! n1! f2! n2!) (or (or (or (= (%I n1!) 0) (= (%I n2!) 0)) (>= (%I f1!) (Add (%I f2!) (%I n2!)))) (>= (%I f2!) (Add (%I f1!) (%I n1!))))) :pattern ((verismo!tspec.range_set.range_disjoint.? f1! n1! f2! n2!))))))
(assert (fuel_bool_default fuel%verismo!tspec.range_set.range_disjoint_.))
(assert (=> (fuel_bool fuel%verismo!tspec.range_set.range_disjoint_.) (forall ((r1! Poly) (r2! Poly)) (! (= (verismo!tspec.range_set.range_disjoint_.? r1! r2!) (verismo!tspec.range_set.range_disjoint.? (tuple%2./tuple%2/0 (%Poly%tuple%2. r1!)) (tuple%2./tuple%2/1 (%Poly%tuple%2. r1!)) (tuple%2./tuple%2/0 (%Poly%tuple%2. r2!)) (tuple%2./tuple%2/1 (%Poly%tuple%2. r2!)))) :pattern ((verismo!tspec.range_set.range_disjoint_.? r1! r2!))))))
(assert (fuel_bool_default fuel%verismo!tspec.range_set.inside_range.))
(assert (=> (fuel_bool fuel%verismo!tspec.range_set.inside_range.) (forall ((x! Poly) (range! Poly)) (! (= (verismo!tspec.range_set.inside_range.? x! range!) (and (let ((tmp%%$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. x!))))) (and (<= (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. range!))) tmp%%$) (< tmp%%$ (Add (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. range!))) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. range!))))))) (<= (Add (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. x!))) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. x!)))) (Add (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. range!))) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. range!))))))) :pattern ((verismo!tspec.range_set.inside_range.? x! range!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!addr_e.range_interface.MemRangeSeqInterface.to_valid_ranges.? Self%&. Self%& self!) (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ INT $ NAT)))) :pattern ((verismo!addr_e.range_interface.MemRangeSeqInterface.to_valid_ranges.? Self%&. Self%& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!addr_e.range_interface.MemRangeSeqInterface.to_range_seq.? Self%&. Self%& self!) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ INT $ NAT)))) :pattern ((verismo!addr_e.range_interface.MemRangeSeqInterface.to_range_seq.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%1.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%1.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%tuple%0. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%tuple%0. self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%1.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%1.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%tuple%0. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%tuple%0. self! vmpl!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%tuple%0.))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%0.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%tuple%0. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%tuple%0. self!))))))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%tuple%0.))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%16.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%16.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%tuple%0.) (I 0))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%tuple%0.))
(assert (fuel_bool_default fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!linkedlist.LinkedList. T&. T&)) (has_type (verismo!linkedlist.impl&%18.view.? T&. T& self!) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!linkedlist.SpecListItem. T&. T&)))) :pattern ((verismo!linkedlist.impl&%18.view.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!linkedlist.impl&%8.is_constant.))
(assert (=> (fuel_bool fuel%verismo!linkedlist.impl&%8.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!linkedlist.Node. T&. T&) self!) (B (and (%B (B true)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& (verismo!linkedlist.Node./Node/val (%Poly%verismo!linkedlist.Node. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!linkedlist.Node. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%8.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%8.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT SZ) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT SZ) self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!linkedlist.impl&%8.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!linkedlist.impl&%8.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!linkedlist.Node. T&. T&) self! vmpl!) (B (and (%B (B true)) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& (verismo!linkedlist.Node./Node/val (%Poly%verismo!linkedlist.Node. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!linkedlist.Node. T&. T&) self! vmpl!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!linkedlist.Node. T&. T&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!linkedlist.Node. T&. T&))))))
(assert (fuel_bool_default fuel%verismo!linkedlist.impl&%7.wf.))
(assert (=> (fuel_bool fuel%verismo!linkedlist.impl&%7.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!linkedlist.Node. T&. T&) self!) (B (and (%B (B true)) (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& (verismo!linkedlist.Node./Node/val (%Poly%verismo!linkedlist.Node. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!linkedlist.Node. T&. T&) self!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&)) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!linkedlist.Node. T&. T&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!linkedlist.Node. T&. T&))))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%8.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%8.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT SZ)) (I 8))))
(assert (fuel_bool_default fuel%verismo!linkedlist.impl&%5.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!linkedlist.impl&%5.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!linkedlist.Node. T&. T&)) (I (nClip (Add (%I (I 8)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)))))) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!linkedlist.Node. T&. T&)))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&)) (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!linkedlist.Node. T&. T&))) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!linkedlist.Node. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!ptr.def_s.SnpPointsTo. T&. T&)) (has_type (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%24.view.? T&. T& self!)) (TYPE%verismo!ptr.def_s.SnpPointsToData. T&. T&))) :pattern ((verismo!ptr.def_s.impl&%24.view.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.VM_MEM_SIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.VM_MEM_SIZE.) (= verismo!arch.addr_s.def_s.VM_MEM_SIZE.? 4503599627370496)))
(assert (uInv SZ verismo!arch.addr_s.def_s.VM_MEM_SIZE.?))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%1.spec_valid_addr_with.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%1.spec_valid_addr_with.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with.? $ INT self! size!) (B (and (let ((tmp%%$ (Add (%I self!) (%I size!)))) (and (<= 0 tmp%%$) (<= tmp%%$ verismo!arch.addr_s.def_s.VM_MEM_SIZE.?))) (and (<= 0 (%I self!)) (<= (%I self!) verismo!arch.addr_s.def_s.VM_MEM_SIZE.?))))) :pattern ((verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with.? $ INT self! size!))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_u.impl&%2.pptr.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_u.impl&%2.pptr.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.ptr_u.impl&%2.pptr.? V&. V& self!) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/ptr (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))) :pattern ((verismo!ptr.ptr_u.impl&%2.pptr.? V&. V& self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_s.impl&%1.snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_s.impl&%1.snp.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))))))) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_s.impl&%1.hw_snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_s.impl&%1.hw_snp.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))))))) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!))))))
(declare-fun req%verismo!ptr.ptr_u.impl&%2.value. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%60 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (req%verismo!ptr.ptr_u.impl&%2.value. V&. V& self!) (=> %%global_location_label%%60 (verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.? (verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!)))) :pattern ((req%verismo!ptr.ptr_u.impl&%2.value. V&. V& self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_u.impl&%2.value.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_u.impl&%2.value.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.ptr_u.impl&%2.value.? V&. V& self!) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))) :pattern ((verismo!ptr.ptr_u.impl&%2.value.? V&. V& self!))))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&)) (has_type (Poly%core!option.Option. (verismo!ptr.ptr_u.impl&%2.value.? V&. V& self!)) (TYPE%core!option.Option. V&. V&))) :pattern ((verismo!ptr.ptr_u.impl&%2.value.? V&. V& self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_u.impl&%2.wf_value.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_u.impl&%2.wf_value.) (forall ((V&. Dcr) (V& Type) (self! Poly) (val! Poly)) (! (= (verismo!ptr.ptr_u.impl&%2.wf_value.? V&. V& self! val!) (and (=> (not (verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.? (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? V&. V& val!))) (%B (verismo!tspec.wellformed.WellFormed.wf.? V&. V& val!)))) :pattern ((verismo!ptr.ptr_u.impl&%2.wf_value.? V&. V& self! val!))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_u.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_u.impl&%0.wf.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!) (B (and (and (verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (%Poly%verismo!ptr.def_s.SnpPointsToData. self!)))) (not (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/is_pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.ptr_u.impl&%2.value.? V&. V& self!)))))) (verismo!ptr.ptr_u.impl&%2.wf_value.? V&. V& self! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.ptr_u.impl&%2.value.? V&. V& self!))))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_u.impl&%2.wf_at.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_u.impl&%2.wf_at.) (forall ((V&. Dcr) (V& Type) (self! Poly) (ptr! Poly)) (! (= (verismo!ptr.ptr_u.impl&%2.wf_at.? V&. V& self! ptr!) (and (= (verismo!ptr.ptr_u.impl&%2.pptr.? V&. V& self!) (%I ptr!)) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!)))) :pattern ((verismo!ptr.ptr_u.impl&%2.wf_at.? V&. V& self! ptr!))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_u.impl&%2.wf_not_null_at.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_u.impl&%2.wf_not_null_at.) (forall ((V&. Dcr) (V& Type) (self! Poly) (ptr! Poly)) (! (= (verismo!ptr.ptr_u.impl&%2.wf_not_null_at.? V&. V& self! ptr!) (and (=> (> (verismo!tspec.size_s.spec_size.? V&. V&) 0) (%B (verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with.? $ INT ptr! (I (verismo!tspec.size_s.spec_size.? V&. V&))))) (verismo!ptr.ptr_u.impl&%2.wf_at.? V&. V& self! ptr!))) :pattern ((verismo!ptr.ptr_u.impl&%2.wf_not_null_at.? V&. V& self! ptr!))))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%19.id.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%19.id.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.def_s.impl&%19.id.? V&. V& self!) (verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr (%Poly%verismo!ptr.def_s.SnpPPtr. self!))) :pattern ((verismo!ptr.def_s.impl&%19.id.? V&. V& self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%4.spec_valid_addr_with.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%4.spec_valid_addr_with.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with.? $ (UINT SZ) $ (UINT SZ) self! size!) (B (let ((start$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!)))) (and (%B (verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with.? $ INT (I start$) size!)) (%B (B true)))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with.? $ (UINT SZ) $ (UINT SZ) self! size!))))))
(assert (fuel_bool_default fuel%verismo!linkedlist.impl&%14.wf.))
(assert (=> (fuel_bool fuel%verismo!linkedlist.impl&%14.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!linkedlist.impl&%15.is_constant.))
(assert (=> (fuel_bool fuel%verismo!linkedlist.impl&%15.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!linkedlist.impl&%15.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!linkedlist.impl&%15.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&) self! vmpl!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!linkedlist.LinkedList. T&. T&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!linkedlist.LinkedList. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&)) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!linkedlist.LinkedList. T&. T&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!linkedlist.LinkedList. T&. T&))))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self!) (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. T&. T&) (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self!))))))
(assert (forall ((bp! Poly) (secret! Poly) (cpuid! Poly) (gdt! Poly) (cmdline! Poly) (ccblob! Poly) (reserved! Poly)) (! (=> (and (has_type bp! TYPE%verismo!boot.params.BootParams.) (has_type secret! TYPE%verismo!security.secret.SnpSecretsPageLayout.) (has_type cpuid! TYPE%verismo!snp.cpuid.SnpCpuidTable.) (has_type gdt! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type cmdline! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256))) (has_type ccblob! TYPE%verismo!boot.linux.CCBlobSevInfo.) (has_type reserved! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3536)))) (has_type (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%2.spec_new.? bp! secret! cpuid! gdt! cmdline! ccblob! reserved!)) TYPE%verismo!boot.linux.BootInfo.)) :pattern ((verismo!boot.linux.impl&%2.spec_new.? bp! secret! cpuid! gdt! cmdline! ccblob! reserved!)))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%0.spec_bp.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%0.spec_bp.) (forall ((self! Poly)) (! (= (verismo!boot.linux.impl&%0.spec_bp.? self!) (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!))) :pattern ((verismo!boot.linux.impl&%0.spec_bp.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.linux.BootInfo.) (has_type (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.impl&%0.spec_bp.? self!)) TYPE%verismo!boot.params.BootParams.)) :pattern ((verismo!boot.linux.impl&%0.spec_bp.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%0.spec_secret.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%0.spec_secret.) (forall ((self! Poly)) (! (= (verismo!boot.linux.impl&%0.spec_secret.? self!) (verismo!boot.linux.BootInfo./BootInfo/secret (%Poly%verismo!boot.linux.BootInfo. self!))) :pattern ((verismo!boot.linux.impl&%0.spec_secret.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%0.spec_cpuid.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%0.spec_cpuid.) (forall ((self! Poly)) (! (= (verismo!boot.linux.impl&%0.spec_cpuid.? self!) (verismo!boot.linux.BootInfo./BootInfo/cpuid (%Poly%verismo!boot.linux.BootInfo. self!))) :pattern ((verismo!boot.linux.impl&%0.spec_cpuid.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.linux.BootInfo.) (has_type (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.impl&%0.spec_cpuid.? self!)) TYPE%verismo!snp.cpuid.SnpCpuidTable.)) :pattern ((verismo!boot.linux.impl&%0.spec_cpuid.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%0.spec_gdt.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%0.spec_gdt.) (forall ((self! Poly)) (! (= (verismo!boot.linux.impl&%0.spec_gdt.? self!) (verismo!boot.linux.BootInfo./BootInfo/gdt (%Poly%verismo!boot.linux.BootInfo. self!))) :pattern ((verismo!boot.linux.impl&%0.spec_gdt.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.linux.BootInfo.) (has_type (verismo!boot.linux.impl&%0.spec_gdt.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)))) :pattern ((verismo!boot.linux.impl&%0.spec_gdt.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%0.spec_cmdline.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%0.spec_cmdline.) (forall ((self! Poly)) (! (= (verismo!boot.linux.impl&%0.spec_cmdline.? self!) (verismo!boot.linux.BootInfo./BootInfo/cmdline (%Poly%verismo!boot.linux.BootInfo. self!))) :pattern ((verismo!boot.linux.impl&%0.spec_cmdline.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.linux.BootInfo.) (has_type (verismo!boot.linux.impl&%0.spec_cmdline.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)))) :pattern ((verismo!boot.linux.impl&%0.spec_cmdline.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%0.spec_ccblob.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%0.spec_ccblob.) (forall ((self! Poly)) (! (= (verismo!boot.linux.impl&%0.spec_ccblob.? self!) (verismo!boot.linux.BootInfo./BootInfo/ccblob (%Poly%verismo!boot.linux.BootInfo. self!))) :pattern ((verismo!boot.linux.impl&%0.spec_ccblob.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%0.spec_reserved.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%0.spec_reserved.) (forall ((self! Poly)) (! (= (verismo!boot.linux.impl&%0.spec_reserved.? self!) (verismo!boot.linux.BootInfo./BootInfo/reserved (%Poly%verismo!boot.linux.BootInfo. self!))) :pattern ((verismo!boot.linux.impl&%0.spec_reserved.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.linux.BootInfo.) (has_type (verismo!boot.linux.impl&%0.spec_reserved.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3536)))) :pattern ((verismo!boot.linux.impl&%0.spec_reserved.? self!)))))
(declare-fun ens%verismo!boot.linux.impl&%2.axiom_spec_new. (verismo!boot.params.BootParams. verismo!security.secret.SnpSecretsPageLayout. verismo!snp.cpuid.SnpCpuidTable. Poly Poly verismo!boot.linux.CCBlobSevInfo. Poly) Bool)
(assert (forall ((bp! verismo!boot.params.BootParams.) (secret! verismo!security.secret.SnpSecretsPageLayout.) (cpuid! verismo!snp.cpuid.SnpCpuidTable.) (gdt! Poly) (cmdline! Poly) (ccblob! verismo!boot.linux.CCBlobSevInfo.) (reserved! Poly)) (! (= (ens%verismo!boot.linux.impl&%2.axiom_spec_new. bp! secret! cpuid! gdt! cmdline! ccblob! reserved!) (and (= (verismo!boot.linux.impl&%0.spec_bp.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%2.spec_new.? (Poly%verismo!boot.params.BootParams. bp!) (Poly%verismo!security.secret.SnpSecretsPageLayout. secret!) (Poly%verismo!snp.cpuid.SnpCpuidTable. cpuid!) gdt! cmdline! (Poly%verismo!boot.linux.CCBlobSevInfo. ccblob!) reserved!))) bp!) (= (verismo!boot.linux.impl&%0.spec_secret.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%2.spec_new.? (Poly%verismo!boot.params.BootParams. bp!) (Poly%verismo!security.secret.SnpSecretsPageLayout. secret!) (Poly%verismo!snp.cpuid.SnpCpuidTable. cpuid!) gdt! cmdline! (Poly%verismo!boot.linux.CCBlobSevInfo. ccblob!) reserved!))) secret!) (= (verismo!boot.linux.impl&%0.spec_cpuid.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%2.spec_new.? (Poly%verismo!boot.params.BootParams. bp!) (Poly%verismo!security.secret.SnpSecretsPageLayout. secret!) (Poly%verismo!snp.cpuid.SnpCpuidTable. cpuid!) gdt! cmdline! (Poly%verismo!boot.linux.CCBlobSevInfo. ccblob!) reserved!))) cpuid!) (= (verismo!boot.linux.impl&%0.spec_gdt.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%2.spec_new.? (Poly%verismo!boot.params.BootParams. bp!) (Poly%verismo!security.secret.SnpSecretsPageLayout. secret!) (Poly%verismo!snp.cpuid.SnpCpuidTable. cpuid!) gdt! cmdline! (Poly%verismo!boot.linux.CCBlobSevInfo. ccblob!) reserved!))) gdt!) (= (verismo!boot.linux.impl&%0.spec_cmdline.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%2.spec_new.? (Poly%verismo!boot.params.BootParams. bp!) (Poly%verismo!security.secret.SnpSecretsPageLayout. secret!) (Poly%verismo!snp.cpuid.SnpCpuidTable. cpuid!) gdt! cmdline! (Poly%verismo!boot.linux.CCBlobSevInfo. ccblob!) reserved!))) cmdline!) (= (verismo!boot.linux.impl&%0.spec_ccblob.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%2.spec_new.? (Poly%verismo!boot.params.BootParams. bp!) (Poly%verismo!security.secret.SnpSecretsPageLayout. secret!) (Poly%verismo!snp.cpuid.SnpCpuidTable. cpuid!) gdt! cmdline! (Poly%verismo!boot.linux.CCBlobSevInfo. ccblob!) reserved!))) ccblob!) (= (verismo!boot.linux.impl&%0.spec_reserved.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%2.spec_new.? (Poly%verismo!boot.params.BootParams. bp!) (Poly%verismo!security.secret.SnpSecretsPageLayout. secret!) (Poly%verismo!snp.cpuid.SnpCpuidTable. cpuid!) gdt! cmdline! (Poly%verismo!boot.linux.CCBlobSevInfo. ccblob!) reserved!))) reserved!))) :pattern ((ens%verismo!boot.linux.impl&%2.axiom_spec_new. bp! secret! cpuid! gdt! cmdline! ccblob! reserved!)))))
(assert (forall ((bp! Poly) (secret! Poly) (cpuid! Poly) (gdt! Poly) (cmdline! Poly) (ccblob! Poly) (reserved! Poly)) (! (=> (and (has_type bp! TYPE%verismo!boot.params.BootParams.) (has_type secret! TYPE%verismo!security.secret.SnpSecretsPageLayout.) (has_type cpuid! TYPE%verismo!snp.cpuid.SnpCpuidTable.) (has_type gdt! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type cmdline! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256))) (has_type ccblob! TYPE%verismo!boot.linux.CCBlobSevInfo.) (has_type reserved! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3536)))) (and (and (and (and (and (and (= (verismo!boot.linux.impl&%0.spec_bp.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%2.spec_new.? bp! secret! cpuid! gdt! cmdline! ccblob! reserved!))) (%Poly%verismo!boot.params.BootParams. bp!)) (= (verismo!boot.linux.impl&%0.spec_secret.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%2.spec_new.? bp! secret! cpuid! gdt! cmdline! ccblob! reserved!))) (%Poly%verismo!security.secret.SnpSecretsPageLayout. secret!))) (= (verismo!boot.linux.impl&%0.spec_cpuid.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%2.spec_new.? bp! secret! cpuid! gdt! cmdline! ccblob! reserved!))) (%Poly%verismo!snp.cpuid.SnpCpuidTable. cpuid!))) (= (verismo!boot.linux.impl&%0.spec_gdt.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%2.spec_new.? bp! secret! cpuid! gdt! cmdline! ccblob! reserved!))) gdt!)) (= (verismo!boot.linux.impl&%0.spec_cmdline.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%2.spec_new.? bp! secret! cpuid! gdt! cmdline! ccblob! reserved!))) cmdline!)) (= (verismo!boot.linux.impl&%0.spec_ccblob.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%2.spec_new.? bp! secret! cpuid! gdt! cmdline! ccblob! reserved!))) (%Poly%verismo!boot.linux.CCBlobSevInfo. ccblob!))) (= (verismo!boot.linux.impl&%0.spec_reserved.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%2.spec_new.? bp! secret! cpuid! gdt! cmdline! ccblob! reserved!))) reserved!))) :pattern ((verismo!boot.linux.impl&%2.spec_new.? bp! secret! cpuid! gdt! cmdline! ccblob! reserved!)))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%16.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%16.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.params.SetupHeader. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/setup_sects (%Poly%verismo!boot.params.SetupHeader. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/root_flags (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/syssize (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ram_size (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/vid_mode (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/root_dev (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/boot_flag (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/jump (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/header (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/version (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/realmode_swtch (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/start_sys_seg (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/kernel_version (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/type_of_loader (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/loadflags (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/setup_move_size (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/code32_start (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ramdisk_image (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ramdisk_size (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/bootsect_kludge (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/heap_end_ptr (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ext_loader_ver (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ext_loader_type (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/cmd_line_ptr (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/initrd_addr_max (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/kernel_alignment (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/relocatable_kernel (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/min_alignment (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/xloadflags (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/cmdline_size (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch_data (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/payload_offset (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/payload_length (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/setup_data (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/pref_address (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/init_size (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/handover_offset (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/kernel_info_offset (%Poly%verismo!boot.params.SetupHeader. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.params.SetupHeader. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%4.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%4.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.params.E820Entry. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/addr (%Poly%verismo!boot.params.E820Entry. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/size (%Poly%verismo!boot.params.E820Entry. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/memty (%Poly%verismo!boot.params.E820Entry. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.params.E820Entry. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!boot.params.E820Entry. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%28.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%28.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.params.BootParams. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!boot.params.BootParams./BootParams/_pad0 (%Poly%verismo!boot.params.BootParams. self!))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.BootParams./BootParams/acpi_rsdp_addr (%Poly%verismo!boot.params.BootParams. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 80)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!boot.params.BootParams./BootParams/_pad1 (%Poly%verismo!boot.params.BootParams. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.BootParams./BootParams/_ext_cmd_line_ptr (%Poly%verismo!boot.params.BootParams. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!boot.params.BootParams./BootParams/_pad2_0 (%Poly%verismo!boot.params.BootParams. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.BootParams./BootParams/cc_blob_addr (%Poly%verismo!boot.params.BootParams. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 168)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!boot.params.BootParams./BootParams/_pad2_1 (%Poly%verismo!boot.params.BootParams. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.BootParams./BootParams/e820_entries (%Poly%verismo!boot.params.BootParams. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!boot.params.BootParams./BootParams/reserved_4 (%Poly%verismo!boot.params.BootParams. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.params.SetupHeader. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!boot.params.SetupHeader. (verismo!boot.params.BootParams./BootParams/hdr (%Poly%verismo!boot.params.BootParams. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 100)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!boot.params.BootParams./BootParams/reserved_5 (%Poly%verismo!boot.params.BootParams. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 816)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!boot.params.BootParams./BootParams/reserved_6 (%Poly%verismo!boot.params.BootParams. self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.params.BootParams. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpuid.impl&%4.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpuid.impl&%4.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpuid.RegABCD. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/eax (%Poly%verismo!snp.cpuid.RegABCD. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/ebx (%Poly%verismo!snp.cpuid.RegABCD. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/ecx (%Poly%verismo!snp.cpuid.RegABCD. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/edx (%Poly%verismo!snp.cpuid.RegABCD. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpuid.RegABCD. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpuid.impl&%13.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpuid.impl&%13.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpuid.SnpCpuidFn. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/eax_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/ecx_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xcr0_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xss_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpuid.RegABCD. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpuid.RegABCD. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/rets (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/reserved (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpuid.SnpCpuidFn. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!snp.cpuid.SnpCpuidFn. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (fuel_bool_default fuel%verismo!snp.cpuid.impl&%22.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpuid.impl&%22.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpuid.SnpCpuidTable. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/count (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_1 (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_2 (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!snp.cpuid.SnpCpuidFn. $ (CONST_INT 64)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/fn_ (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 1008)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_3 (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpuid.SnpCpuidTable. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%39.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%39.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.linux.CCBlobSevInfo. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0_1 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved1 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_phys (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_len (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved2 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_phys (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_len (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved3 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/shared_page (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.linux.CCBlobSevInfo. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%5.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%5.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.linux.BootInfo. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.params.BootParams. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!boot.linux.BootInfo./BootInfo/secret (%Poly%verismo!boot.linux.BootInfo. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpuid.SnpCpuidTable. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.BootInfo./BootInfo/cpuid (%Poly%verismo!boot.linux.BootInfo. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!boot.linux.BootInfo./BootInfo/gdt (%Poly%verismo!boot.linux.BootInfo. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!boot.linux.BootInfo./BootInfo/cmdline (%Poly%verismo!boot.linux.BootInfo. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.linux.CCBlobSevInfo. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!boot.linux.BootInfo./BootInfo/ccblob (%Poly%verismo!boot.linux.BootInfo. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3536)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!boot.linux.BootInfo./BootInfo/reserved (%Poly%verismo!boot.linux.BootInfo. self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.linux.BootInfo. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!boot.linux.BootInfo. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!boot.params.BootParams. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%7.spec_bp_offset.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%7.spec_bp_offset.) (forall ((no%param Poly)) (! (= (verismo!boot.linux.impl&%7.spec_bp_offset.? no%param) 0) :pattern ((verismo!boot.linux.impl&%7.spec_bp_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!boot.linux.impl&%7.spec_bp_offset.? no%param))) :pattern ((verismo!boot.linux.impl&%7.spec_bp_offset.? no%param)))))
(declare-fun ens%verismo!boot.linux.impl&%7.axiom_field_bp. (verismo!boot.linux.BootInfo.) Bool)
(assert (forall ((self! verismo!boot.linux.BootInfo.)) (! (= (ens%verismo!boot.linux.impl&%7.axiom_field_bp. self!) (= (verismo!boot.linux.impl&%0.spec_bp.? (Poly%verismo!boot.linux.BootInfo. self!)) (%Poly%verismo!boot.params.BootParams. (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.params.BootParams. (Poly%verismo!boot.linux.BootInfo. self!) (I (verismo!boot.linux.impl&%7.spec_bp_offset.? (I 0))))))) :pattern ((ens%verismo!boot.linux.impl&%7.axiom_field_bp. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.linux.BootInfo.) (= (verismo!boot.linux.impl&%0.spec_bp.? self!) (%Poly%verismo!boot.params.BootParams. (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.params.BootParams. self! (I (verismo!boot.linux.impl&%7.spec_bp_offset.? (I 0))))))) :pattern ((verismo!boot.linux.impl&%0.spec_bp.? self!)))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!security.secret.SnpSecretsPageLayout. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%17.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%17.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.params.SetupHeader.) (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32)))))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%5.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%5.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.params.E820Entry.) (I (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32)))))))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!boot.params.E820Entry.))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%29.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%29.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.params.BootParams.) (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 80)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 168)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 8)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 100)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 128)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.params.E820Entry.)))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 816)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%7.spec_secret_offset.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%7.spec_secret_offset.) (forall ((no%param Poly)) (! (= (verismo!boot.linux.impl&%7.spec_secret_offset.? no%param) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 80)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 168)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 8)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 100)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 128)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.params.E820Entry.)))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 816)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))))) :pattern ((verismo!boot.linux.impl&%7.spec_secret_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!boot.linux.impl&%7.spec_secret_offset.? no%param))) :pattern ((verismo!boot.linux.impl&%7.spec_secret_offset.? no%param)))))
(declare-fun ens%verismo!boot.linux.impl&%7.axiom_field_secret. (verismo!boot.linux.BootInfo.) Bool)
(assert (forall ((self! verismo!boot.linux.BootInfo.)) (! (= (ens%verismo!boot.linux.impl&%7.axiom_field_secret. self!) (= (verismo!boot.linux.impl&%0.spec_secret.? (Poly%verismo!boot.linux.BootInfo. self!)) (%Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!security.secret.SnpSecretsPageLayout. (Poly%verismo!boot.linux.BootInfo. self!) (I (verismo!boot.linux.impl&%7.spec_secret_offset.? (I 0))))))) :pattern ((ens%verismo!boot.linux.impl&%7.axiom_field_secret. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.linux.BootInfo.) (= (verismo!boot.linux.impl&%0.spec_secret.? self!) (%Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!security.secret.SnpSecretsPageLayout. self! (I (verismo!boot.linux.impl&%7.spec_secret_offset.? (I 0))))))) :pattern ((verismo!boot.linux.impl&%0.spec_secret.? self!)))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!snp.cpuid.SnpCpuidTable. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (fuel_bool_default fuel%verismo!security.impl&%5.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%5.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!security.SecretsOSArea.) (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 40)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%8.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%8.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout.) (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 40)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 3840)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%7.spec_cpuid_offset.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%7.spec_cpuid_offset.) (forall ((no%param Poly)) (! (= (verismo!boot.linux.impl&%7.spec_cpuid_offset.? no%param) (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 80)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 168)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 8)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 100)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 128)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.params.E820Entry.)))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 816)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 40)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 3840)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))))))) :pattern ((verismo!boot.linux.impl&%7.spec_cpuid_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!boot.linux.impl&%7.spec_cpuid_offset.? no%param))) :pattern ((verismo!boot.linux.impl&%7.spec_cpuid_offset.? no%param)))))
(declare-fun ens%verismo!boot.linux.impl&%7.axiom_field_cpuid. (verismo!boot.linux.BootInfo.) Bool)
(assert (forall ((self! verismo!boot.linux.BootInfo.)) (! (= (ens%verismo!boot.linux.impl&%7.axiom_field_cpuid. self!) (= (verismo!boot.linux.impl&%0.spec_cpuid.? (Poly%verismo!boot.linux.BootInfo. self!)) (%Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!snp.cpuid.SnpCpuidTable. (Poly%verismo!boot.linux.BootInfo. self!) (I (verismo!boot.linux.impl&%7.spec_cpuid_offset.? (I 0))))))) :pattern ((ens%verismo!boot.linux.impl&%7.axiom_field_cpuid. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.linux.BootInfo.) (= (verismo!boot.linux.impl&%0.spec_cpuid.? self!) (%Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!snp.cpuid.SnpCpuidTable. self! (I (verismo!boot.linux.impl&%7.spec_cpuid_offset.? (I 0))))))) :pattern ((verismo!boot.linux.impl&%0.spec_cpuid.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpuid.impl&%5.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpuid.impl&%5.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpuid.RegABCD.) (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32)))))))))
(assert (fuel_bool_default fuel%verismo!snp.cpuid.impl&%14.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpuid.impl&%14.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpuid.SnpCpuidFn.) (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!snp.cpuid.SnpCpuidFn.))
(assert (fuel_bool_default fuel%verismo!snp.cpuid.impl&%23.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpuid.impl&%23.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpuid.SnpCpuidTable.) (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 64)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpuid.SnpCpuidFn.)))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 1008)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%7.spec_gdt_offset.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%7.spec_gdt_offset.) (forall ((no%param Poly)) (! (= (verismo!boot.linux.impl&%7.spec_gdt_offset.? no%param) (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 80)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 168)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 8)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 100)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 128)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.params.E820Entry.)))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 816)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 40)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 3840)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 64)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpuid.SnpCpuidFn.)))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 1008)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))))))) :pattern ((verismo!boot.linux.impl&%7.spec_gdt_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!boot.linux.impl&%7.spec_gdt_offset.? no%param))) :pattern ((verismo!boot.linux.impl&%7.spec_gdt_offset.? no%param)))))
(declare-fun ens%verismo!boot.linux.impl&%7.axiom_field_gdt. (verismo!boot.linux.BootInfo.) Bool)
(assert (forall ((self! verismo!boot.linux.BootInfo.)) (! (= (ens%verismo!boot.linux.impl&%7.axiom_field_gdt. self!) (= (verismo!boot.linux.impl&%0.spec_gdt.? (Poly%verismo!boot.linux.BootInfo. self!)) (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.linux.BootInfo. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)) (Poly%verismo!boot.linux.BootInfo. self!) (I (verismo!boot.linux.impl&%7.spec_gdt_offset.? (I 0)))))) :pattern ((ens%verismo!boot.linux.impl&%7.axiom_field_gdt. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.linux.BootInfo.) (= (verismo!boot.linux.impl&%0.spec_gdt.? self!) (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.linux.BootInfo. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)) self! (I (verismo!boot.linux.impl&%7.spec_gdt_offset.? (I 0)))))) :pattern ((verismo!boot.linux.impl&%0.spec_gdt.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%7.spec_cmdline_offset.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%7.spec_cmdline_offset.) (forall ((no%param Poly)) (! (= (verismo!boot.linux.impl&%7.spec_cmdline_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 80)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 168)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 8)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 100)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 128)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.params.E820Entry.)))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 816)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 40)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 3840)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 64)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpuid.SnpCpuidFn.)))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 1008)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!boot.linux.impl&%7.spec_cmdline_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!boot.linux.impl&%7.spec_cmdline_offset.? no%param))) :pattern ((verismo!boot.linux.impl&%7.spec_cmdline_offset.? no%param)))))
(declare-fun ens%verismo!boot.linux.impl&%7.axiom_field_cmdline. (verismo!boot.linux.BootInfo.) Bool)
(assert (forall ((self! verismo!boot.linux.BootInfo.)) (! (= (ens%verismo!boot.linux.impl&%7.axiom_field_cmdline. self!) (= (verismo!boot.linux.impl&%0.spec_cmdline.? (Poly%verismo!boot.linux.BootInfo. self!)) (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.linux.BootInfo. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)) (Poly%verismo!boot.linux.BootInfo. self!) (I (verismo!boot.linux.impl&%7.spec_cmdline_offset.? (I 0)))))) :pattern ((ens%verismo!boot.linux.impl&%7.axiom_field_cmdline. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.linux.BootInfo.) (= (verismo!boot.linux.impl&%0.spec_cmdline.? self!) (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.linux.BootInfo. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)) self! (I (verismo!boot.linux.impl&%7.spec_cmdline_offset.? (I 0)))))) :pattern ((verismo!boot.linux.impl&%0.spec_cmdline.? self!)))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!boot.linux.CCBlobSevInfo. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%7.spec_ccblob_offset.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%7.spec_ccblob_offset.) (forall ((no%param Poly)) (! (= (verismo!boot.linux.impl&%7.spec_ccblob_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 80)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 168)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 8)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 100)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 128)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.params.E820Entry.)))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 816)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 40)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 3840)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 64)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpuid.SnpCpuidFn.)))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 1008)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 256)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!boot.linux.impl&%7.spec_ccblob_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!boot.linux.impl&%7.spec_ccblob_offset.? no%param))) :pattern ((verismo!boot.linux.impl&%7.spec_ccblob_offset.? no%param)))))
(declare-fun ens%verismo!boot.linux.impl&%7.axiom_field_ccblob. (verismo!boot.linux.BootInfo.) Bool)
(assert (forall ((self! verismo!boot.linux.BootInfo.)) (! (= (ens%verismo!boot.linux.impl&%7.axiom_field_ccblob. self!) (= (verismo!boot.linux.impl&%0.spec_ccblob.? (Poly%verismo!boot.linux.BootInfo. self!)) (%Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.CCBlobSevInfo. (Poly%verismo!boot.linux.BootInfo. self!) (I (verismo!boot.linux.impl&%7.spec_ccblob_offset.? (I 0))))))) :pattern ((ens%verismo!boot.linux.impl&%7.axiom_field_ccblob. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.linux.BootInfo.) (= (verismo!boot.linux.impl&%0.spec_ccblob.? self!) (%Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.CCBlobSevInfo. self! (I (verismo!boot.linux.impl&%7.spec_ccblob_offset.? (I 0))))))) :pattern ((verismo!boot.linux.impl&%0.spec_ccblob.? self!)))))
(declare-fun ens%verismo!boot.linux.impl&%36.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!boot.linux.impl&%36.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!boot.linux.CCBlobSevInfo. self! ret!) (= ret! self!))) :pattern ((ens%verismo!boot.linux.impl&%36.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!boot.linux.CCBlobSevInfo.)) (has_type ret$ TYPE%verismo!boot.linux.CCBlobSevInfo.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!boot.linux.CCBlobSevInfo.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!boot.linux.CCBlobSevInfo.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!boot.linux.CCBlobSevInfo. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%verismo!boot.linux.CCBlobSevInfo. ret$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!boot.linux.CCBlobSevInfo.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!boot.linux.CCBlobSevInfo.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (forall ((cpu_count! Poly) (cpuid_page! Poly) (secret_page! Poly) (hv_param! Poly) (validated_entries! Poly) (validated_e820! Poly) (acpi! Poly) (acpi_size! Poly) (richos_start! Poly) (richos_size! Poly) (richos_cmdline! Poly) (richos_cmdline_len! Poly)) (! (=> (and (has_type cpu_count! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type cpuid_page! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type secret_page! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type hv_param! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type validated_entries! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type validated_e820! (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16))) (has_type acpi! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type acpi_size! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type richos_start! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type richos_size! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type richos_cmdline! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256))) (has_type richos_cmdline_len! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))) (has_type (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!)) TYPE%verismo!boot.monitor_params.MonitorParams.)) :pattern ((verismo!boot.monitor_params.impl&%1.spec_new.? cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!)))))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%2.spec_cpu_count.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%2.spec_cpu_count.) (forall ((self! Poly)) (! (= (verismo!boot.monitor_params.impl&%2.spec_cpu_count.? self!) (verismo!boot.monitor_params.MonitorParams./MonitorParams/cpu_count (%Poly%verismo!boot.monitor_params.MonitorParams. self!))) :pattern ((verismo!boot.monitor_params.impl&%2.spec_cpu_count.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%2.spec_cpuid_page.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%2.spec_cpuid_page.) (forall ((self! Poly)) (! (= (verismo!boot.monitor_params.impl&%2.spec_cpuid_page.? self!) (verismo!boot.monitor_params.MonitorParams./MonitorParams/cpuid_page (%Poly%verismo!boot.monitor_params.MonitorParams. self!))) :pattern ((verismo!boot.monitor_params.impl&%2.spec_cpuid_page.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%2.spec_secret_page.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%2.spec_secret_page.) (forall ((self! Poly)) (! (= (verismo!boot.monitor_params.impl&%2.spec_secret_page.? self!) (verismo!boot.monitor_params.MonitorParams./MonitorParams/secret_page (%Poly%verismo!boot.monitor_params.MonitorParams. self!))) :pattern ((verismo!boot.monitor_params.impl&%2.spec_secret_page.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%2.spec_hv_param.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%2.spec_hv_param.) (forall ((self! Poly)) (! (= (verismo!boot.monitor_params.impl&%2.spec_hv_param.? self!) (verismo!boot.monitor_params.MonitorParams./MonitorParams/hv_param (%Poly%verismo!boot.monitor_params.MonitorParams. self!))) :pattern ((verismo!boot.monitor_params.impl&%2.spec_hv_param.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%2.spec_validated_entries.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%2.spec_validated_entries.) (forall ((self! Poly)) (! (= (verismo!boot.monitor_params.impl&%2.spec_validated_entries.? self!) (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_entries (%Poly%verismo!boot.monitor_params.MonitorParams. self!))) :pattern ((verismo!boot.monitor_params.impl&%2.spec_validated_entries.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%2.spec_validated_e820.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%2.spec_validated_e820.) (forall ((self! Poly)) (! (= (verismo!boot.monitor_params.impl&%2.spec_validated_e820.? self!) (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_e820 (%Poly%verismo!boot.monitor_params.MonitorParams. self!))) :pattern ((verismo!boot.monitor_params.impl&%2.spec_validated_e820.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.monitor_params.MonitorParams.) (has_type (verismo!boot.monitor_params.impl&%2.spec_validated_e820.? self!) (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16)))) :pattern ((verismo!boot.monitor_params.impl&%2.spec_validated_e820.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%2.spec_acpi.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%2.spec_acpi.) (forall ((self! Poly)) (! (= (verismo!boot.monitor_params.impl&%2.spec_acpi.? self!) (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi (%Poly%verismo!boot.monitor_params.MonitorParams. self!))) :pattern ((verismo!boot.monitor_params.impl&%2.spec_acpi.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%2.spec_acpi_size.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%2.spec_acpi_size.) (forall ((self! Poly)) (! (= (verismo!boot.monitor_params.impl&%2.spec_acpi_size.? self!) (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi_size (%Poly%verismo!boot.monitor_params.MonitorParams. self!))) :pattern ((verismo!boot.monitor_params.impl&%2.spec_acpi_size.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%2.spec_richos_start.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%2.spec_richos_start.) (forall ((self! Poly)) (! (= (verismo!boot.monitor_params.impl&%2.spec_richos_start.? self!) (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_start (%Poly%verismo!boot.monitor_params.MonitorParams. self!))) :pattern ((verismo!boot.monitor_params.impl&%2.spec_richos_start.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%2.spec_richos_size.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%2.spec_richos_size.) (forall ((self! Poly)) (! (= (verismo!boot.monitor_params.impl&%2.spec_richos_size.? self!) (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_size (%Poly%verismo!boot.monitor_params.MonitorParams. self!))) :pattern ((verismo!boot.monitor_params.impl&%2.spec_richos_size.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%2.spec_richos_cmdline.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%2.spec_richos_cmdline.) (forall ((self! Poly)) (! (= (verismo!boot.monitor_params.impl&%2.spec_richos_cmdline.? self!) (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline (%Poly%verismo!boot.monitor_params.MonitorParams. self!))) :pattern ((verismo!boot.monitor_params.impl&%2.spec_richos_cmdline.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.monitor_params.MonitorParams.) (has_type (verismo!boot.monitor_params.impl&%2.spec_richos_cmdline.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)))) :pattern ((verismo!boot.monitor_params.impl&%2.spec_richos_cmdline.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%2.spec_richos_cmdline_len.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%2.spec_richos_cmdline_len.) (forall ((self! Poly)) (! (= (verismo!boot.monitor_params.impl&%2.spec_richos_cmdline_len.? self!) (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline_len (%Poly%verismo!boot.monitor_params.MonitorParams. self!))) :pattern ((verismo!boot.monitor_params.impl&%2.spec_richos_cmdline_len.? self!))))))
(declare-fun ens%verismo!boot.monitor_params.impl&%1.axiom_spec_new. (verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) Bool)
(assert (forall ((cpu_count! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (cpuid_page! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (secret_page! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (hv_param! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (validated_entries! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (validated_e820! Poly) (acpi! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (acpi_size! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (richos_start! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (richos_size! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (richos_cmdline! Poly) (richos_cmdline_len! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)) (! (= (ens%verismo!boot.monitor_params.impl&%1.axiom_spec_new. cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!) (and (= (verismo!boot.monitor_params.impl&%2.spec_cpu_count.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpuid_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. secret_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. hv_param!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. validated_entries!) validated_e820! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_size!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_start!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_size!) richos_cmdline! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_cmdline_len!)))) cpu_count!) (= (verismo!boot.monitor_params.impl&%2.spec_cpuid_page.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpuid_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. secret_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. hv_param!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. validated_entries!) validated_e820! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_size!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_start!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_size!) richos_cmdline! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_cmdline_len!)))) cpuid_page!) (= (verismo!boot.monitor_params.impl&%2.spec_secret_page.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpuid_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. secret_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. hv_param!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. validated_entries!) validated_e820! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_size!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_start!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_size!) richos_cmdline! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_cmdline_len!)))) secret_page!) (= (verismo!boot.monitor_params.impl&%2.spec_hv_param.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpuid_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. secret_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. hv_param!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. validated_entries!) validated_e820! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_size!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_start!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_size!) richos_cmdline! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_cmdline_len!)))) hv_param!) (= (verismo!boot.monitor_params.impl&%2.spec_validated_entries.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpuid_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. secret_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. hv_param!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. validated_entries!) validated_e820! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_size!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_start!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_size!) richos_cmdline! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_cmdline_len!)))) validated_entries!) (= (verismo!boot.monitor_params.impl&%2.spec_validated_e820.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpuid_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. secret_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. hv_param!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. validated_entries!) validated_e820! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_size!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_start!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_size!) richos_cmdline! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_cmdline_len!)))) validated_e820!) (= (verismo!boot.monitor_params.impl&%2.spec_acpi.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpuid_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. secret_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. hv_param!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. validated_entries!) validated_e820! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_size!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_start!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_size!) richos_cmdline! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_cmdline_len!)))) acpi!) (= (verismo!boot.monitor_params.impl&%2.spec_acpi_size.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpuid_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. secret_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. hv_param!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. validated_entries!) validated_e820! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_size!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_start!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_size!) richos_cmdline! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_cmdline_len!)))) acpi_size!) (= (verismo!boot.monitor_params.impl&%2.spec_richos_start.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpuid_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. secret_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. hv_param!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. validated_entries!) validated_e820! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_size!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_start!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_size!) richos_cmdline! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_cmdline_len!)))) richos_start!) (= (verismo!boot.monitor_params.impl&%2.spec_richos_size.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpuid_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. secret_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. hv_param!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. validated_entries!) validated_e820! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_size!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_start!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_size!) richos_cmdline! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_cmdline_len!)))) richos_size!) (= (verismo!boot.monitor_params.impl&%2.spec_richos_cmdline.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpuid_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. secret_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. hv_param!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. validated_entries!) validated_e820! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_size!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_start!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_size!) richos_cmdline! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_cmdline_len!)))) richos_cmdline!) (= (verismo!boot.monitor_params.impl&%2.spec_richos_cmdline_len.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpuid_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. secret_page!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. hv_param!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. validated_entries!) validated_e820! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_size!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_start!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_size!) richos_cmdline! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_cmdline_len!)))) richos_cmdline_len!))) :pattern ((ens%verismo!boot.monitor_params.impl&%1.axiom_spec_new. cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!)))))
(assert (forall ((cpu_count! Poly) (cpuid_page! Poly) (secret_page! Poly) (hv_param! Poly) (validated_entries! Poly) (validated_e820! Poly) (acpi! Poly) (acpi_size! Poly) (richos_start! Poly) (richos_size! Poly) (richos_cmdline! Poly) (richos_cmdline_len! Poly)) (! (=> (and (has_type cpu_count! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type cpuid_page! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type secret_page! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type hv_param! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type validated_entries! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type validated_e820! (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16))) (has_type acpi! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type acpi_size! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type richos_start! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type richos_size! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type richos_cmdline! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256))) (has_type richos_cmdline_len! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))) (and (and (and (and (and (and (and (and (and (and (and (= (verismo!boot.monitor_params.impl&%2.spec_cpu_count.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpu_count!)) (= (verismo!boot.monitor_params.impl&%2.spec_cpuid_page.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cpuid_page!))) (= (verismo!boot.monitor_params.impl&%2.spec_secret_page.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. secret_page!))) (= (verismo!boot.monitor_params.impl&%2.spec_hv_param.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. hv_param!))) (= (verismo!boot.monitor_params.impl&%2.spec_validated_entries.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. validated_entries!))) (= (verismo!boot.monitor_params.impl&%2.spec_validated_e820.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!))) validated_e820!)) (= (verismo!boot.monitor_params.impl&%2.spec_acpi.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi!))) (= (verismo!boot.monitor_params.impl&%2.spec_acpi_size.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_size!))) (= (verismo!boot.monitor_params.impl&%2.spec_richos_start.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_start!))) (= (verismo!boot.monitor_params.impl&%2.spec_richos_size.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_size!))) (= (verismo!boot.monitor_params.impl&%2.spec_richos_cmdline.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!))) richos_cmdline!)) (= (verismo!boot.monitor_params.impl&%2.spec_richos_cmdline_len.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.monitor_params.impl&%1.spec_new.? cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. richos_cmdline_len!)))) :pattern ((verismo!boot.monitor_params.impl&%1.spec_new.? cpu_count! cpuid_page! secret_page! hv_param! validated_entries! validated_e820! acpi! acpi_size! richos_start! richos_size! richos_cmdline! richos_cmdline_len!)))))
(declare-fun ens%verismo!boot.params.impl&%0.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!boot.params.impl&%0.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!boot.params.E820Entry. self! ret!) (= ret! self!))) :pattern ((ens%verismo!boot.params.impl&%0.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!boot.params.E820Entry.)) (has_type ret$ TYPE%verismo!boot.params.E820Entry.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!boot.params.E820Entry.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!boot.params.E820Entry.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!boot.params.E820Entry. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%verismo!boot.params.E820Entry. ret$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!boot.params.E820Entry.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!boot.params.E820Entry.) (F fndef_singleton) tmp%%$ ret$)))))
(declare-fun ens%verismo!boot.params.impl&%13.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!boot.params.impl&%13.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!boot.params.SetupHeader. self! ret!) (= ret! self!))) :pattern ((ens%verismo!boot.params.impl&%13.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!boot.params.SetupHeader.)) (has_type ret$ TYPE%verismo!boot.params.SetupHeader.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!boot.params.SetupHeader.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!boot.params.SetupHeader.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!boot.params.SetupHeader. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%verismo!boot.params.SetupHeader. ret$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!boot.params.SetupHeader.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!boot.params.SetupHeader.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (forall ((_pad0! Poly) (acpi_rsdp_addr! Poly) (_pad1! Poly) (_ext_cmd_line_ptr! Poly) (_pad2_0! Poly) (cc_blob_addr! Poly) (_pad2_1! Poly) (e820_entries! Poly) (reserved_4! Poly) (hdr! Poly) (reserved_5! Poly) (e820! Poly) (reserved_6! Poly)) (! (=> (and (has_type _pad0! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type acpi_rsdp_addr! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type _pad1! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 80))) (has_type _ext_cmd_line_ptr! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)) (has_type _pad2_0! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type cc_blob_addr! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)) (has_type _pad2_1! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 168))) (has_type e820_entries! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type reserved_4! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8))) (has_type hdr! TYPE%verismo!boot.params.SetupHeader.) (has_type reserved_5! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 100))) (has_type e820! (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128))) (has_type reserved_6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 816)))) (has_type (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!)) TYPE%verismo!boot.params.BootParams.)) :pattern ((verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!)))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%21.spec__pad0.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%21.spec__pad0.) (forall ((self! Poly)) (! (= (verismo!boot.params.impl&%21.spec__pad0.? self!) (verismo!boot.params.BootParams./BootParams/_pad0 (%Poly%verismo!boot.params.BootParams. self!))) :pattern ((verismo!boot.params.impl&%21.spec__pad0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.impl&%21.spec__pad0.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)))) :pattern ((verismo!boot.params.impl&%21.spec__pad0.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%21.spec_acpi_rsdp_addr.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%21.spec_acpi_rsdp_addr.) (forall ((self! Poly)) (! (= (verismo!boot.params.impl&%21.spec_acpi_rsdp_addr.? self!) (verismo!boot.params.BootParams./BootParams/acpi_rsdp_addr (%Poly%verismo!boot.params.BootParams. self!))) :pattern ((verismo!boot.params.impl&%21.spec_acpi_rsdp_addr.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%21.spec__pad1.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%21.spec__pad1.) (forall ((self! Poly)) (! (= (verismo!boot.params.impl&%21.spec__pad1.? self!) (verismo!boot.params.BootParams./BootParams/_pad1 (%Poly%verismo!boot.params.BootParams. self!))) :pattern ((verismo!boot.params.impl&%21.spec__pad1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.impl&%21.spec__pad1.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 80)))) :pattern ((verismo!boot.params.impl&%21.spec__pad1.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%21.spec__ext_cmd_line_ptr.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%21.spec__ext_cmd_line_ptr.) (forall ((self! Poly)) (! (= (verismo!boot.params.impl&%21.spec__ext_cmd_line_ptr.? self!) (verismo!boot.params.BootParams./BootParams/_ext_cmd_line_ptr (%Poly%verismo!boot.params.BootParams. self!))) :pattern ((verismo!boot.params.impl&%21.spec__ext_cmd_line_ptr.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%21.spec__pad2_0.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%21.spec__pad2_0.) (forall ((self! Poly)) (! (= (verismo!boot.params.impl&%21.spec__pad2_0.? self!) (verismo!boot.params.BootParams./BootParams/_pad2_0 (%Poly%verismo!boot.params.BootParams. self!))) :pattern ((verismo!boot.params.impl&%21.spec__pad2_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.impl&%21.spec__pad2_0.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)))) :pattern ((verismo!boot.params.impl&%21.spec__pad2_0.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%21.spec_cc_blob_addr.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%21.spec_cc_blob_addr.) (forall ((self! Poly)) (! (= (verismo!boot.params.impl&%21.spec_cc_blob_addr.? self!) (verismo!boot.params.BootParams./BootParams/cc_blob_addr (%Poly%verismo!boot.params.BootParams. self!))) :pattern ((verismo!boot.params.impl&%21.spec_cc_blob_addr.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%21.spec__pad2_1.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%21.spec__pad2_1.) (forall ((self! Poly)) (! (= (verismo!boot.params.impl&%21.spec__pad2_1.? self!) (verismo!boot.params.BootParams./BootParams/_pad2_1 (%Poly%verismo!boot.params.BootParams. self!))) :pattern ((verismo!boot.params.impl&%21.spec__pad2_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.impl&%21.spec__pad2_1.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 168)))) :pattern ((verismo!boot.params.impl&%21.spec__pad2_1.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%21.spec_e820_entries.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%21.spec_e820_entries.) (forall ((self! Poly)) (! (= (verismo!boot.params.impl&%21.spec_e820_entries.? self!) (verismo!boot.params.BootParams./BootParams/e820_entries (%Poly%verismo!boot.params.BootParams. self!))) :pattern ((verismo!boot.params.impl&%21.spec_e820_entries.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%21.spec_reserved_4.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%21.spec_reserved_4.) (forall ((self! Poly)) (! (= (verismo!boot.params.impl&%21.spec_reserved_4.? self!) (verismo!boot.params.BootParams./BootParams/reserved_4 (%Poly%verismo!boot.params.BootParams. self!))) :pattern ((verismo!boot.params.impl&%21.spec_reserved_4.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.impl&%21.spec_reserved_4.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)))) :pattern ((verismo!boot.params.impl&%21.spec_reserved_4.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%21.spec_hdr.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%21.spec_hdr.) (forall ((self! Poly)) (! (= (verismo!boot.params.impl&%21.spec_hdr.? self!) (verismo!boot.params.BootParams./BootParams/hdr (%Poly%verismo!boot.params.BootParams. self!))) :pattern ((verismo!boot.params.impl&%21.spec_hdr.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%21.spec_reserved_5.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%21.spec_reserved_5.) (forall ((self! Poly)) (! (= (verismo!boot.params.impl&%21.spec_reserved_5.? self!) (verismo!boot.params.BootParams./BootParams/reserved_5 (%Poly%verismo!boot.params.BootParams. self!))) :pattern ((verismo!boot.params.impl&%21.spec_reserved_5.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.impl&%21.spec_reserved_5.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 100)))) :pattern ((verismo!boot.params.impl&%21.spec_reserved_5.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%21.spec_e820.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%21.spec_e820.) (forall ((self! Poly)) (! (= (verismo!boot.params.impl&%21.spec_e820.? self!) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!))) :pattern ((verismo!boot.params.impl&%21.spec_e820.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.impl&%21.spec_e820.? self!) (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128)))) :pattern ((verismo!boot.params.impl&%21.spec_e820.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%21.spec_reserved_6.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%21.spec_reserved_6.) (forall ((self! Poly)) (! (= (verismo!boot.params.impl&%21.spec_reserved_6.? self!) (verismo!boot.params.BootParams./BootParams/reserved_6 (%Poly%verismo!boot.params.BootParams. self!))) :pattern ((verismo!boot.params.impl&%21.spec_reserved_6.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.params.BootParams.) (has_type (verismo!boot.params.impl&%21.spec_reserved_6.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 816)))) :pattern ((verismo!boot.params.impl&%21.spec_reserved_6.? self!)))))
(declare-fun ens%verismo!boot.params.impl&%23.axiom_spec_new. (Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u32./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u32./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u8./tuple%0.>. Poly verismo!boot.params.SetupHeader. Poly Poly Poly) Bool)
(assert (forall ((_pad0! Poly) (acpi_rsdp_addr! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_pad1! Poly) (_ext_cmd_line_ptr! verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (_pad2_0! Poly) (cc_blob_addr! verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (_pad2_1! Poly) (e820_entries! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (reserved_4! Poly) (hdr! verismo!boot.params.SetupHeader.) (reserved_5! Poly) (e820! Poly) (reserved_6! Poly)) (! (= (ens%verismo!boot.params.impl&%23.axiom_spec_new. _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!) (and (= (verismo!boot.params.impl&%21.spec__pad0.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_rsdp_addr!) _pad1! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. _ext_cmd_line_ptr!) _pad2_0! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. cc_blob_addr!) _pad2_1! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. e820_entries!) reserved_4! (Poly%verismo!boot.params.SetupHeader. hdr!) reserved_5! e820! reserved_6!))) _pad0!) (= (verismo!boot.params.impl&%21.spec_acpi_rsdp_addr.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_rsdp_addr!) _pad1! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. _ext_cmd_line_ptr!) _pad2_0! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. cc_blob_addr!) _pad2_1! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. e820_entries!) reserved_4! (Poly%verismo!boot.params.SetupHeader. hdr!) reserved_5! e820! reserved_6!))) acpi_rsdp_addr!) (= (verismo!boot.params.impl&%21.spec__pad1.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_rsdp_addr!) _pad1! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. _ext_cmd_line_ptr!) _pad2_0! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. cc_blob_addr!) _pad2_1! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. e820_entries!) reserved_4! (Poly%verismo!boot.params.SetupHeader. hdr!) reserved_5! e820! reserved_6!))) _pad1!) (= (verismo!boot.params.impl&%21.spec__ext_cmd_line_ptr.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_rsdp_addr!) _pad1! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. _ext_cmd_line_ptr!) _pad2_0! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. cc_blob_addr!) _pad2_1! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. e820_entries!) reserved_4! (Poly%verismo!boot.params.SetupHeader. hdr!) reserved_5! e820! reserved_6!))) _ext_cmd_line_ptr!) (= (verismo!boot.params.impl&%21.spec__pad2_0.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_rsdp_addr!) _pad1! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. _ext_cmd_line_ptr!) _pad2_0! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. cc_blob_addr!) _pad2_1! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. e820_entries!) reserved_4! (Poly%verismo!boot.params.SetupHeader. hdr!) reserved_5! e820! reserved_6!))) _pad2_0!) (= (verismo!boot.params.impl&%21.spec_cc_blob_addr.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_rsdp_addr!) _pad1! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. _ext_cmd_line_ptr!) _pad2_0! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. cc_blob_addr!) _pad2_1! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. e820_entries!) reserved_4! (Poly%verismo!boot.params.SetupHeader. hdr!) reserved_5! e820! reserved_6!))) cc_blob_addr!) (= (verismo!boot.params.impl&%21.spec__pad2_1.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_rsdp_addr!) _pad1! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. _ext_cmd_line_ptr!) _pad2_0! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. cc_blob_addr!) _pad2_1! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. e820_entries!) reserved_4! (Poly%verismo!boot.params.SetupHeader. hdr!) reserved_5! e820! reserved_6!))) _pad2_1!) (= (verismo!boot.params.impl&%21.spec_e820_entries.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_rsdp_addr!) _pad1! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. _ext_cmd_line_ptr!) _pad2_0! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. cc_blob_addr!) _pad2_1! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. e820_entries!) reserved_4! (Poly%verismo!boot.params.SetupHeader. hdr!) reserved_5! e820! reserved_6!))) e820_entries!) (= (verismo!boot.params.impl&%21.spec_reserved_4.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_rsdp_addr!) _pad1! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. _ext_cmd_line_ptr!) _pad2_0! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. cc_blob_addr!) _pad2_1! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. e820_entries!) reserved_4! (Poly%verismo!boot.params.SetupHeader. hdr!) reserved_5! e820! reserved_6!))) reserved_4!) (= (verismo!boot.params.impl&%21.spec_hdr.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_rsdp_addr!) _pad1! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. _ext_cmd_line_ptr!) _pad2_0! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. cc_blob_addr!) _pad2_1! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. e820_entries!) reserved_4! (Poly%verismo!boot.params.SetupHeader. hdr!) reserved_5! e820! reserved_6!))) hdr!) (= (verismo!boot.params.impl&%21.spec_reserved_5.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_rsdp_addr!) _pad1! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. _ext_cmd_line_ptr!) _pad2_0! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. cc_blob_addr!) _pad2_1! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. e820_entries!) reserved_4! (Poly%verismo!boot.params.SetupHeader. hdr!) reserved_5! e820! reserved_6!))) reserved_5!) (= (verismo!boot.params.impl&%21.spec_e820.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_rsdp_addr!) _pad1! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. _ext_cmd_line_ptr!) _pad2_0! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. cc_blob_addr!) _pad2_1! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. e820_entries!) reserved_4! (Poly%verismo!boot.params.SetupHeader. hdr!) reserved_5! e820! reserved_6!))) e820!) (= (verismo!boot.params.impl&%21.spec_reserved_6.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_rsdp_addr!) _pad1! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. _ext_cmd_line_ptr!) _pad2_0! (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. cc_blob_addr!) _pad2_1! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. e820_entries!) reserved_4! (Poly%verismo!boot.params.SetupHeader. hdr!) reserved_5! e820! reserved_6!))) reserved_6!))) :pattern ((ens%verismo!boot.params.impl&%23.axiom_spec_new. _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!)))))
(assert (forall ((_pad0! Poly) (acpi_rsdp_addr! Poly) (_pad1! Poly) (_ext_cmd_line_ptr! Poly) (_pad2_0! Poly) (cc_blob_addr! Poly) (_pad2_1! Poly) (e820_entries! Poly) (reserved_4! Poly) (hdr! Poly) (reserved_5! Poly) (e820! Poly) (reserved_6! Poly)) (! (=> (and (has_type _pad0! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type acpi_rsdp_addr! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type _pad1! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 80))) (has_type _ext_cmd_line_ptr! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)) (has_type _pad2_0! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type cc_blob_addr! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)) (has_type _pad2_1! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 168))) (has_type e820_entries! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type reserved_4! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8))) (has_type hdr! TYPE%verismo!boot.params.SetupHeader.) (has_type reserved_5! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 100))) (has_type e820! (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128))) (has_type reserved_6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 816)))) (and (and (and (and (and (and (and (and (and (and (and (and (= (verismo!boot.params.impl&%21.spec__pad0.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!))) _pad0!) (= (verismo!boot.params.impl&%21.spec_acpi_rsdp_addr.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. acpi_rsdp_addr!))) (= (verismo!boot.params.impl&%21.spec__pad1.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!))) _pad1!)) (= (verismo!boot.params.impl&%21.spec__ext_cmd_line_ptr.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!))) (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. _ext_cmd_line_ptr!))) (= (verismo!boot.params.impl&%21.spec__pad2_0.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!))) _pad2_0!)) (= (verismo!boot.params.impl&%21.spec_cc_blob_addr.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!))) (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. cc_blob_addr!))) (= (verismo!boot.params.impl&%21.spec__pad2_1.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!))) _pad2_1!)) (= (verismo!boot.params.impl&%21.spec_e820_entries.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!))) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. e820_entries!))) (= (verismo!boot.params.impl&%21.spec_reserved_4.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!))) reserved_4!)) (= (verismo!boot.params.impl&%21.spec_hdr.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!))) (%Poly%verismo!boot.params.SetupHeader. hdr!))) (= (verismo!boot.params.impl&%21.spec_reserved_5.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!))) reserved_5!)) (= (verismo!boot.params.impl&%21.spec_e820.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!))) e820!)) (= (verismo!boot.params.impl&%21.spec_reserved_6.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!))) reserved_6!))) :pattern ((verismo!boot.params.impl&%23.spec_new.? _pad0! acpi_rsdp_addr! _pad1! _ext_cmd_line_ptr! _pad2_0! cc_blob_addr! _pad2_1! e820_entries! reserved_4! hdr! reserved_5! e820! reserved_6!)))))
(declare-fun ens%verismo!boot.params.impl&%25.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!boot.params.impl&%25.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!boot.params.BootParams. self! ret!) (= ret! self!))) :pattern ((ens%verismo!boot.params.impl&%25.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!boot.params.BootParams.)) (has_type ret$ TYPE%verismo!boot.params.BootParams.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!boot.params.BootParams.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!boot.params.BootParams.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!boot.params.BootParams. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%verismo!boot.params.BootParams. ret$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!boot.params.BootParams.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!boot.params.BootParams.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%30.spec_e820_entries_offset.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%30.spec_e820_entries_offset.) (forall ((no%param Poly)) (! (= (verismo!boot.params.impl&%30.spec_e820_entries_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 80)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 168)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!boot.params.impl&%30.spec_e820_entries_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!boot.params.impl&%30.spec_e820_entries_offset.? no%param))) :pattern ((verismo!boot.params.impl&%30.spec_e820_entries_offset.? no%param)))))
(declare-fun ens%verismo!boot.params.impl&%30.axiom_field_e820_entries. (verismo!boot.params.BootParams.) Bool)
(assert (forall ((self! verismo!boot.params.BootParams.)) (! (= (ens%verismo!boot.params.impl&%30.axiom_field_e820_entries. self!) (= (verismo!boot.params.impl&%21.spec_e820_entries.? (Poly%verismo!boot.params.BootParams. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.params.BootParams. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!boot.params.BootParams. self!) (I (verismo!boot.params.impl&%30.spec_e820_entries_offset.? (I 0))))))) :pattern ((ens%verismo!boot.params.impl&%30.axiom_field_e820_entries. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.params.BootParams.) (= (verismo!boot.params.impl&%21.spec_e820_entries.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.params.BootParams. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! (I (verismo!boot.params.impl&%30.spec_e820_entries_offset.? (I 0))))))) :pattern ((verismo!boot.params.impl&%21.spec_e820_entries.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%30.spec_e820_offset.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%30.spec_e820_offset.) (forall ((no%param Poly)) (! (= (verismo!boot.params.impl&%30.spec_e820_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 80)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 168)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 8)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 100)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!boot.params.impl&%30.spec_e820_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!boot.params.impl&%30.spec_e820_offset.? no%param))) :pattern ((verismo!boot.params.impl&%30.spec_e820_offset.? no%param)))))
(declare-fun ens%verismo!boot.params.impl&%30.axiom_field_e820. (verismo!boot.params.BootParams.) Bool)
(assert (forall ((self! verismo!boot.params.BootParams.)) (! (= (ens%verismo!boot.params.impl&%30.axiom_field_e820. self!) (= (verismo!boot.params.impl&%21.spec_e820.? (Poly%verismo!boot.params.BootParams. self!)) (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.params.BootParams. $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128)) (Poly%verismo!boot.params.BootParams. self!) (I (verismo!boot.params.impl&%30.spec_e820_offset.? (I 0)))))) :pattern ((ens%verismo!boot.params.impl&%30.axiom_field_e820. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.params.BootParams.) (= (verismo!boot.params.impl&%21.spec_e820.? self!) (verismo!tspec.cast.field_at.? $ TYPE%verismo!boot.params.BootParams. $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128)) self! (I (verismo!boot.params.impl&%30.spec_e820_offset.? (I 0)))))) :pattern ((verismo!boot.params.impl&%21.spec_e820.? self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!global.IsConsole.is_console.? Self%&. Self%& self!) BOOL)) :pattern ((verismo!global.IsConsole.is_console.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.lockid_to_ptr.))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.lockid_to_ptr.) (forall ((lockid! Poly)) (! (= (verismo!lock.spin_perm_s.lockid_to_ptr.? lockid!) (%I lockid!)) :pattern ((verismo!lock.spin_perm_s.lockid_to_ptr.? lockid!))))))
(assert (fuel_bool_default fuel%verismo!lock.spincell_e.impl&%11.lockid.))
(assert (=> (fuel_bool fuel%verismo!lock.spincell_e.impl&%11.lockid.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!lock.spincell_e.impl&%11.lockid.? T&. T& self!) (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? T&. T& self!)))) :pattern ((verismo!lock.spincell_e.impl&%11.lockid.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!lock.spincell_e.impl&%11.ptrid.))
(assert (=> (fuel_bool fuel%verismo!lock.spincell_e.impl&%11.ptrid.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!lock.spincell_e.impl&%11.ptrid.? T&. T& self!) (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? T&. T& self!)))))) :pattern ((verismo!lock.spincell_e.impl&%11.ptrid.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!lock.spincell_e.impl&%11.ptr_range.))
(assert (=> (fuel_bool fuel%verismo!lock.spincell_e.impl&%11.ptr_range.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!lock.spincell_e.impl&%11.ptr_range.? T&. T& self!) (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? T&. T& self!)))))) (I (verismo!tspec.size_s.spec_size.? T&. T&)))) :pattern ((verismo!lock.spincell_e.impl&%11.ptr_range.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!lock.spincell_e.VSpinLock. T&. T&)) (has_type (Poly%tuple%2. (verismo!lock.spincell_e.impl&%11.ptr_range.? T&. T& self!)) (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!lock.spincell_e.impl&%11.ptr_range.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!global.impl&%0.is_console.))
(assert (=> (fuel_bool fuel%verismo!global.impl&%0.is_console.) (forall ((self! Poly)) (! (= (verismo!global.IsConsole.is_console.? $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. self!) (B (and (verismo!ptr.raw_ptr_s.impl&%5.wf_range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? self!)) (Poly%tuple%2. (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!debug.interface.Console. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. (verismo!global.spec_CONSOLE.? (I 0))))))))) (I (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!debug.interface.Console.))))) (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? self!))) (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.))))) :pattern ((verismo!global.IsConsole.is_console.? $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.trackedcore.snpmulticore.snpcore_console_wf.))
(assert (=> (fuel_bool fuel%verismo!snp.trackedcore.snpmulticore.snpcore_console_wf.) (forall ((snpcore! Poly) (console! Poly)) (! (= (verismo!snp.trackedcore.snpmulticore.snpcore_console_wf.? snpcore! console!) (and (verismo!registers.trackedcore.snpcore.impl&%3.inv.? snpcore!) (%B (verismo!global.IsConsole.is_console.? $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. console!)))) :pattern ((verismo!snp.trackedcore.snpmulticore.snpcore_console_wf.? snpcore! console!))))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? self! val!) (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? self!)) (I (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!)) (I (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!)) val!)) :pattern ((verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type val! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.))) (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? self! val!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)) :pattern ((verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.? self! val!) (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? val! (I (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!)) (I (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!)) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? self!)))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type val! TYPE%verismo!registers.core_perm_s.CoreIdPerm.)) (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.? self! val!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)) :pattern ((verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.) (forall ((self! Poly) (prev! Poly) (regs! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? self! prev! regs!) (forall ((i$ Poly)) (! (=> (has_type i$ TYPE%verismo!arch.reg.RegName.) (=> (not (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.reg.RegName. regs! i$)) (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) i$) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. prev!))) i$)))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) i$))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? self! prev! regs!))))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_coremode_updated.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_coremode_updated.) (forall ((self! Poly) (prev! Poly) (regs! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.only_reg_coremode_updated.? self! prev! regs!) (and (= (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!) (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.? prev! (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))))) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))))) (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? self! prev! regs!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.only_reg_coremode_updated.? self! prev! regs!))))))
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_e.GHCB_REGID.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_e.GHCB_REGID.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_e.GHCB_REGID.? no%param) (verismo!arch.reg.RegName./MSR (%I (I verismo!arch.reg.MSR_GHCB_BASE.?)))) :pattern ((verismo!snp.ghcb.proto_e.GHCB_REGID.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%verismo!arch.reg.RegName. (verismo!snp.ghcb.proto_e.GHCB_REGID.? no%param)) TYPE%verismo!arch.reg.RegName.)) :pattern ((verismo!snp.ghcb.proto_e.GHCB_REGID.? no%param)))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.only_val_updated.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.only_val_updated.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.only_val_updated.? self! rhs!) (and (and (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!) (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. rhs!)) (= (verismo!ptr.raw_ptr_s.impl&%5.range.? self!) (verismo!ptr.raw_ptr_s.impl&%5.range.? rhs!))) (=> (verismo!ptr.raw_ptr_s.impl&%5.wf.? rhs!) (verismo!ptr.raw_ptr_s.impl&%5.wf.? self!)))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.only_val_updated.? self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!snp.trackedcore.snpmulticore.impl&%4.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.trackedcore.snpmulticore.impl&%4.wf.) (forall ((self! Poly)) (! (= (verismo!snp.trackedcore.snpmulticore.impl&%4.wf.? self!) (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/console (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. self!)))) (I 0)) (verismo!snp.trackedcore.snpmulticore.snpcore_console_wf.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. self!))) (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/console (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. self!))) (I 0))))) :pattern ((verismo!snp.trackedcore.snpmulticore.impl&%4.wf.? self!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (cpu! Poly)) (! (=> (and (has_type self! Self%&) (has_type cpu! NAT)) (has_type (verismo!lock.spin_perm_s.MapRawLockTrait.inv.? Self%&. Self%& self! cpu!) BOOL)) :pattern ((verismo!lock.spin_perm_s.MapRawLockTrait.inv.? Self%&. Self%& self! cpu!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (cpu! Poly) (lockid! Poly)) (! (=> (and (has_type self! Self%&) (has_type cpu! NAT) (has_type lockid! (TYPE%vstd!set.Set. $ INT))) (has_type (verismo!lock.spin_perm_s.MapRawLockTrait.inv_locked.? Self%&. Self%& self! cpu! lockid!) BOOL)) :pattern ((verismo!lock.spin_perm_s.MapRawLockTrait.inv_locked.? Self%&. Self%& self! cpu! lockid!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (lockid! Poly) (ptr_range! Poly)) (! (=> (and (has_type self! Self%&) (has_type lockid! INT) (has_type ptr_range! (TYPE%tuple%2. $ INT $ NAT))) (has_type (verismo!lock.spin_perm_s.MapRawLockTrait.contains_lock.? Self%&. Self%& self! lockid! ptr_range!) BOOL)) :pattern ((verismo!lock.spin_perm_s.MapRawLockTrait.contains_lock.? Self%&. Self%& self! lockid! ptr_range!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (prev! Poly) (locks! Poly)) (! (=> (and (has_type self! Self%&) (has_type prev! Self%&) (has_type locks! (TYPE%vstd!set.Set. $ INT))) (has_type (verismo!lock.spin_perm_s.MapRawLockTrait.updated_lock.? Self%&. Self%& self! prev! locks!) BOOL)) :pattern ((verismo!lock.spin_perm_s.MapRawLockTrait.updated_lock.? Self%&. Self%& self! prev! locks!)))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_not_null.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_not_null.) (forall ((self! Poly) (range! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.wf_not_null.? self! range!) (and (%B (verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with.? $ INT (tuple%2./tuple%2/0 (%Poly%tuple%2. range!)) (tuple%2./tuple%2/1 (%Poly%tuple%2. range!)))) (verismo!ptr.raw_ptr_s.impl&%5.wf_range.? self! range!))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.wf_not_null.? self! range!))))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.impl&%6.wf.))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.impl&%6.wf.) (forall ((self! Poly)) (! (= (verismo!lock.spin_perm_s.impl&%6.wf.? self!) (and (ite (> (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)))))))) 0) (verismo!ptr.raw_ptr_s.impl&%5.wf_not_null.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))) (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)))))) (verismo!ptr.raw_ptr_s.impl&%5.wf.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))))) (%B (%%apply%%0 (verismo!lock.spin_perm_s.InvRawFn./InvRawFn/invfn (%Poly%verismo!lock.spin_perm_s.InvRawFn. (Poly%verismo!lock.spin_perm_s.InvRawFn. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))))) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))))))))) :pattern ((verismo!lock.spin_perm_s.impl&%6.wf.? self!))))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.ptrid_to_lockid.))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.ptrid_to_lockid.) (forall ((ptrid! Poly)) (! (= (verismo!lock.spin_perm_s.ptrid_to_lockid.? ptrid!) (%I ptrid!)) :pattern ((verismo!lock.spin_perm_s.ptrid_to_lockid.? ptrid!))))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.impl&%4.lockid.))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.impl&%4.lockid.) (forall ((self! Poly)) (! (= (verismo!lock.spin_perm_s.impl&%4.lockid.? self!) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))))))))) :pattern ((verismo!lock.spin_perm_s.impl&%4.lockid.? self!))))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.impl&%6.wf_for.))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.impl&%6.wf_for.) (forall ((self! Poly) (lockid! Poly) (range! Poly)) (! (= (verismo!lock.spin_perm_s.impl&%6.wf_for.? self! lockid! range!) (and (and (and (ite (> (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)))))))) 0) (verismo!ptr.raw_ptr_s.impl&%5.wf_not_null.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))) (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)))))) (verismo!ptr.raw_ptr_s.impl&%5.wf.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))))) (%B (%%apply%%0 (verismo!lock.spin_perm_s.InvRawFn./InvRawFn/invfn (%Poly%verismo!lock.spin_perm_s.InvRawFn. (Poly%verismo!lock.spin_perm_s.InvRawFn. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))))) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)))))))) (= (verismo!lock.spin_perm_s.impl&%4.lockid.? self!) (%I lockid!))) (= (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)))) (%Poly%tuple%2. range!)))) :pattern ((verismo!lock.spin_perm_s.impl&%6.wf_for.? self! lockid! range!))))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.impl&%6.is_unlocked.))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.impl&%6.is_unlocked.) (forall ((self! Poly) (cpu! Poly) (lockid! Poly) (range! Poly)) (! (= (verismo!lock.spin_perm_s.impl&%6.is_unlocked.? self! cpu! lockid! range!) (and (and (not (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/locked (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))) (= (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/cpu (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)) (%I cpu!))) (and (and (and (ite (> (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)))))))) 0) (verismo!ptr.raw_ptr_s.impl&%5.wf_not_null.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))) (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)))))) (verismo!ptr.raw_ptr_s.impl&%5.wf.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))))) (%B (%%apply%%0 (verismo!lock.spin_perm_s.InvRawFn./InvRawFn/invfn (%Poly%verismo!lock.spin_perm_s.InvRawFn. (Poly%verismo!lock.spin_perm_s.InvRawFn. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))))) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)))))))) (= (verismo!lock.spin_perm_s.impl&%4.lockid.? self!) (%I lockid!))) (= (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)))) (%Poly%tuple%2. range!))))) :pattern ((verismo!lock.spin_perm_s.impl&%6.is_unlocked.? self! cpu! lockid! range!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!lock.spin_perm_s.LockPermRaw.) (has_type (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? self!)) TYPE%verismo!lock.spin_perm_s.LockPermToRaw.)) :pattern ((verismo!lock.spin_perm_s.impl&%5.view.? self!)))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.impl&%6.is_locked.))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.impl&%6.is_locked.) (forall ((self! Poly) (cpu! Poly) (lockid! Poly) (range! Poly)) (! (= (verismo!lock.spin_perm_s.impl&%6.is_locked.? self! cpu! lockid! range!) (and (and (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/locked (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)) (= (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/cpu (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)) (%I cpu!))) (and (and (and (ite (> (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)))))))) 0) (verismo!ptr.raw_ptr_s.impl&%5.wf_not_null.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))) (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)))))) (verismo!ptr.raw_ptr_s.impl&%5.wf.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))))) (%B (%%apply%%0 (verismo!lock.spin_perm_s.InvRawFn./InvRawFn/invfn (%Poly%verismo!lock.spin_perm_s.InvRawFn. (Poly%verismo!lock.spin_perm_s.InvRawFn. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))))) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)))))))) (= (verismo!lock.spin_perm_s.impl&%4.lockid.? self!) (%I lockid!))) (= (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!)))) (%Poly%tuple%2. range!))))) :pattern ((verismo!lock.spin_perm_s.impl&%6.is_locked.? self! cpu! lockid! range!))))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.impl&%7.inv_locked.))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.impl&%7.inv_locked.) (forall ((self! Poly) (cpu! Poly) (locks! Poly)) (! (= (verismo!lock.spin_perm_s.MapRawLockTrait.inv_locked.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) self! cpu! locks!) (B (and (forall ((id$ Poly)) (! (=> (has_type id$ INT) (=> (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self!) id$) (not (vstd!set.impl&%0.contains.? $ INT locks! id$))) (verismo!lock.spin_perm_s.impl&%6.is_unlocked.? (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self! id$))) cpu! id$ (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self! id$))))))))))) :pattern ((vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self! id$)))) (forall ((id$ Poly)) (! (=> (has_type id$ INT) (=> (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self!) id$) (vstd!set.impl&%0.contains.? $ INT locks! id$)) (verismo!lock.spin_perm_s.impl&%6.is_locked.? (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self! id$))) cpu! id$ (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self! id$))))))))))) :pattern ((vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self! id$))))))) :pattern ((verismo!lock.spin_perm_s.MapRawLockTrait.inv_locked.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) self! cpu! locks!))))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.impl&%7.inv.))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.impl&%7.inv.) (forall ((self! Poly) (cpu! Poly)) (! (= (verismo!lock.spin_perm_s.MapRawLockTrait.inv.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) self! cpu!) (verismo!lock.spin_perm_s.MapRawLockTrait.inv_locked.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) self! cpu! (vstd!set.impl&%0.empty.? $ INT))) :pattern ((verismo!lock.spin_perm_s.MapRawLockTrait.inv.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) self! cpu!))))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.cpu.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.cpu.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.cpu.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.cpu.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.impl&%3.cpu.? self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.cpu.? self!)))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.impl&%7.contains_lock.))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.impl&%7.contains_lock.) (forall ((self! Poly) (lockid! Poly) (ptr_range! Poly)) (! (= (verismo!lock.spin_perm_s.MapRawLockTrait.contains_lock.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) self! lockid! ptr_range!) (B (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self!) lockid!) (= (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self! lockid!))))))) (%Poly%tuple%2. ptr_range!))))) :pattern ((verismo!lock.spin_perm_s.MapRawLockTrait.contains_lock.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) self! lockid! ptr_range!))))))
(assert (forall ((id! Poly)) (! (=> (has_type id! TYPE%verismo!global.Globals.) (has_type (Poly%tuple%2. (verismo!global.g_range.? id!)) (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!global.g_range.? id!)))))
(assert (fuel_bool_default fuel%verismo!global.spec_CONSOLE_lockid.))
(assert (=> (fuel_bool fuel%verismo!global.spec_CONSOLE_lockid.) (forall ((no%param Poly)) (! (= (verismo!global.spec_CONSOLE_lockid.? no%param) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE))))))) :pattern ((verismo!global.spec_CONSOLE_lockid.? no%param))))))
(assert (fuel_bool_default fuel%verismo!global.spec_CONSOLE_range.))
(assert (=> (fuel_bool fuel%verismo!global.spec_CONSOLE_range.) (forall ((no%param Poly)) (! (= (verismo!global.spec_CONSOLE_range.? no%param) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE))) :pattern ((verismo!global.spec_CONSOLE_range.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%tuple%2. (verismo!global.spec_CONSOLE_range.? no%param)) (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!global.spec_CONSOLE_range.? no%param)))))
(assert (fuel_bool_default fuel%verismo!debug.interface.impl&%2.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!debug.interface.impl&%2.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!debug.interface.Console. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!debug.interface.Console. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!debug.interface.Console. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.impl&%0.value_invfn.))
(declare-fun %%lambda%%14 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%14 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) v$) (%%apply%%0 %%hole%%4 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 v$))) :pattern ((%%apply%%0 (%%lambda%%14 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) v$)))))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.impl&%0.value_invfn.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!lock.spin_perm_s.impl&%0.value_invfn.? T&. T& self!) (mk_fun (%%lambda%%14 T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!lock.spin_perm_s.InvRawFn./InvRawFn/invfn (%Poly%verismo!lock.spin_perm_s.InvRawFn. self!))))) :pattern ((verismo!lock.spin_perm_s.impl&%0.value_invfn.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! TYPE%verismo!lock.spin_perm_s.InvRawFn.) (has_type (Poly%fun%1. (verismo!lock.spin_perm_s.impl&%0.value_invfn.? T&. T& self!)) (TYPE%fun%1. T&. T& $ BOOL))) :pattern ((verismo!lock.spin_perm_s.impl&%0.value_invfn.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!debug.interface.impl&%7.invfn.))
(assert (=> (fuel_bool fuel%verismo!debug.interface.impl&%7.invfn.) (forall ((no%param Poly)) (! (= (verismo!debug.interface.impl&%7.invfn.? no%param) (mk_fun (%%lambda%%1 (B true)))) :pattern ((verismo!debug.interface.impl&%7.invfn.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (verismo!debug.interface.impl&%7.invfn.? no%param)) (TYPE%fun%1. $ TYPE%verismo!debug.interface.Console. $ BOOL))) :pattern ((verismo!debug.interface.impl&%7.invfn.? no%param)))))
(assert (fuel_bool_default fuel%verismo!global.contains_CONSOLE.))
(assert (=> (fuel_bool fuel%verismo!global.contains_CONSOLE.) (forall ((m! Poly)) (! (= (verismo!global.contains_CONSOLE.? m!) (and (and (%B (verismo!lock.spin_perm_s.MapRawLockTrait.contains_lock.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) m! (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE))))))) (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE))))) (= (verismo!lock.spin_perm_s.impl&%0.value_invfn.? $ TYPE%verismo!debug.interface.Console. (Poly%verismo!lock.spin_perm_s.InvRawFn. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. m! (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE)))))))))))))) (verismo!debug.interface.impl&%7.invfn.? (I 0)))) (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. m! (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE)))))))))))))) (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)))) :pattern ((verismo!global.contains_CONSOLE.? m!))))))
(assert (fuel_bool_default fuel%verismo!global.spec_ALLOCATOR_lockid.))
(assert (=> (fuel_bool fuel%verismo!global.spec_ALLOCATOR_lockid.) (forall ((no%param Poly)) (! (= (verismo!global.spec_ALLOCATOR_lockid.? no%param) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR))))))) :pattern ((verismo!global.spec_ALLOCATOR_lockid.? no%param))))))
(assert (fuel_bool_default fuel%verismo!global.spec_ALLOCATOR_range.))
(assert (=> (fuel_bool fuel%verismo!global.spec_ALLOCATOR_range.) (forall ((no%param Poly)) (! (= (verismo!global.spec_ALLOCATOR_range.? no%param) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR))) :pattern ((verismo!global.spec_ALLOCATOR_range.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%tuple%2. (verismo!global.spec_ALLOCATOR_range.? no%param)) (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!global.spec_ALLOCATOR_range.? no%param)))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT SZ)))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.usize_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.usize_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.usize_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))) 256))))))))))))))) :pattern ((verismo!tspec.stream.basic.usize_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%11.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%11.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))) 256)))))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to.))
(declare-fun %%lambda%%15 (Dcr Type Poly Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%15 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) i$) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$)))) :pattern ((%%apply%%0 (%%lambda%%15 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) i$)))))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%15 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (fuel_bool_default fuel%verismo!linkedlist.impl&%11.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!linkedlist.impl&%11.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (verismo!linkedlist.LinkedList./LinkedList/head (%Poly%verismo!linkedlist.LinkedList. self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_const_default.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_const_default.) (forall ((self! Poly) (range! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.wf_const_default.? self! range!) (and (and (verismo!ptr.raw_ptr_s.impl&%5.wf_not_null.? self! range!) (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!) (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? self!)))))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.wf_const_default.? self! range!))))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%7.wf.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%7.wf.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_u.impl&%1.not_null.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_u.impl&%1.not_null.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.ptr_u.impl&%1.not_null.? V&. V& self!) (and (%B (verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with.? $ INT (I (verismo!ptr.def_s.impl&%19.id.? V&. V& self!)) (I (verismo!tspec.size_s.spec_size.? V&. V&)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) self!)))) :pattern ((verismo!ptr.ptr_u.impl&%1.not_null.? V&. V& self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!allocator.linkedlist.LinkedListAllocator.) (has_type (Poly%verismo!allocator.linkedlist.SpecLinkedListAllocator. (verismo!allocator.linkedlist.impl&%8.view.? self!)) TYPE%verismo!allocator.linkedlist.SpecLinkedListAllocator.)) :pattern ((verismo!allocator.linkedlist.impl&%8.view.? self!)))))
(assert (fuel_bool_default fuel%verismo!allocator.linkedlist.impl&%8.invfn.))
(declare-fun %%lambda%%16 () %%Function%%)
(assert (forall ((v$ Poly)) (! (= (%%apply%%0 %%lambda%%16 v$) (B (verismo!allocator.linkedlist.impl&%7.inv.? (Poly%verismo!allocator.linkedlist.SpecLinkedListAllocator. (verismo!allocator.linkedlist.impl&%8.view.? v$))))) :pattern ((%%apply%%0 %%lambda%%16 v$)))))
(assert (=> (fuel_bool fuel%verismo!allocator.linkedlist.impl&%8.invfn.) (forall ((no%param Poly)) (! (= (verismo!allocator.linkedlist.impl&%8.invfn.? no%param) (mk_fun %%lambda%%16)) :pattern ((verismo!allocator.linkedlist.impl&%8.invfn.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (verismo!allocator.linkedlist.impl&%8.invfn.? no%param)) (TYPE%fun%1. $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator. $ BOOL))) :pattern ((verismo!allocator.linkedlist.impl&%8.invfn.? no%param)))))
(assert (fuel_bool_default fuel%verismo!global.contains_ALLOCATOR.))
(assert (=> (fuel_bool fuel%verismo!global.contains_ALLOCATOR.) (forall ((m! Poly)) (! (= (verismo!global.contains_ALLOCATOR.? m!) (and (and (%B (verismo!lock.spin_perm_s.MapRawLockTrait.contains_lock.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) m! (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR))))))) (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR))))) (= (verismo!lock.spin_perm_s.impl&%0.value_invfn.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator. (Poly%verismo!lock.spin_perm_s.InvRawFn. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. m! (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR)))))))))))))) (verismo!allocator.linkedlist.impl&%8.invfn.? (I 0)))) (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. m! (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR)))))))))))))) (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)))) :pattern ((verismo!global.contains_ALLOCATOR.? m!))))))
(assert (fuel_bool_default fuel%verismo!global.spec_PT_lockid.))
(assert (=> (fuel_bool fuel%verismo!global.spec_PT_lockid.) (forall ((no%param Poly)) (! (= (verismo!global.spec_PT_lockid.? no%param) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT))))))) :pattern ((verismo!global.spec_PT_lockid.? no%param))))))
(assert (fuel_bool_default fuel%verismo!global.spec_PT_range.))
(assert (=> (fuel_bool fuel%verismo!global.spec_PT_range.) (forall ((no%param Poly)) (! (= (verismo!global.spec_PT_range.? no%param) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT))) :pattern ((verismo!global.spec_PT_range.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%tuple%2. (verismo!global.spec_PT_range.? no%param)) (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!global.spec_PT_range.? no%param)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%19.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%19.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PtePerm.) (has_type (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.pte.impl&%1.val.? self!)) TYPE%verismo!pgtable_e.def.PTE.)) :pattern ((verismo!pgtable_e.pte.impl&%1.val.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.PAGE_TABLE_LEVELS.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.PAGE_TABLE_LEVELS.) (= verismo!pgtable_e.def.PAGE_TABLE_LEVELS.? 4)))
(assert (uInv 8 verismo!pgtable_e.def.PAGE_TABLE_LEVELS.?))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.top_lvl_idx.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.top_lvl_idx.) (forall ((no%param Poly)) (! (= (verismo!pgtable_e.def.top_lvl_idx.? no%param) (tuple%2./tuple%2 (I verismo!pgtable_e.def.PAGE_TABLE_LEVELS.?) (I 0))) :pattern ((verismo!pgtable_e.def.top_lvl_idx.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%tuple%2. (verismo!pgtable_e.def.top_lvl_idx.? no%param)) (TYPE%tuple%2. $ NAT $ INT))) :pattern ((verismo!pgtable_e.def.top_lvl_idx.? no%param)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_psize.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_psize.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_psize.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 7))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_psize.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_psize.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_psize.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_present.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_present.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_present.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_present.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_present.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_present.? self!)))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant_to.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self! vmpl!) (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. T&. T&) (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) vmpl!)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self! vmpl!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self!) (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%1.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%1.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.) self!) (B (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& $ TYPE%tuple%0. self!))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.) self!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.)) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_u.impl&%2.get_value.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_u.impl&%2.get_value.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.ptr_u.impl&%2.get_value.? V&. V& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.ptr_u.impl&%2.value.? V&. V& self!))))) :pattern ((verismo!ptr.ptr_u.impl&%2.get_value.? V&. V& self!))))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&)) (has_type (verismo!ptr.ptr_u.impl&%2.get_value.? V&. V& self!) V&)) :pattern ((verismo!ptr.ptr_u.impl&%2.get_value.? V&. V& self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_page.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_page.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_page.? self!) (let ((mask$ (uClip 64 549755813887))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 12))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_page.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_page.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_page.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%20.spec_index0.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%20.spec_index0.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.pte.impl&%20.spec_index0.? self!) (let ((mask$ (uClip 64 511))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (%Poly%verismo!pgtable_e.pte.VAddrIndex. self!)))) (I (uClip 64 12))))) (I mask$))))) :pattern ((verismo!pgtable_e.pte.impl&%20.spec_index0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.pte.VAddrIndex.) (uInv 64 (verismo!pgtable_e.pte.impl&%20.spec_index0.? self!))) :pattern ((verismo!pgtable_e.pte.impl&%20.spec_index0.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%20.spec_new.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%20.spec_new.) (forall ((val! Poly)) (! (= (verismo!pgtable_e.pte.impl&%20.spec_new.? val!) (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex (%I val!))) :pattern ((verismo!pgtable_e.pte.impl&%20.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!pgtable_e.pte.VAddrIndex. (verismo!pgtable_e.pte.impl&%20.spec_new.? val!)) TYPE%verismo!pgtable_e.pte.VAddrIndex.)) :pattern ((verismo!pgtable_e.pte.impl&%20.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%20.spec_index1.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%20.spec_index1.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.pte.impl&%20.spec_index1.? self!) (let ((mask$ (uClip 64 511))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (%Poly%verismo!pgtable_e.pte.VAddrIndex. self!)))) (I (uClip 64 21))))) (I mask$))))) :pattern ((verismo!pgtable_e.pte.impl&%20.spec_index1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.pte.VAddrIndex.) (uInv 64 (verismo!pgtable_e.pte.impl&%20.spec_index1.? self!))) :pattern ((verismo!pgtable_e.pte.impl&%20.spec_index1.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%20.spec_index2.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%20.spec_index2.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.pte.impl&%20.spec_index2.? self!) (let ((mask$ (uClip 64 511))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (%Poly%verismo!pgtable_e.pte.VAddrIndex. self!)))) (I (uClip 64 30))))) (I mask$))))) :pattern ((verismo!pgtable_e.pte.impl&%20.spec_index2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.pte.VAddrIndex.) (uInv 64 (verismo!pgtable_e.pte.impl&%20.spec_index2.? self!))) :pattern ((verismo!pgtable_e.pte.impl&%20.spec_index2.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%20.spec_index3.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%20.spec_index3.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.pte.impl&%20.spec_index3.? self!) (let ((mask$ (uClip 64 511))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (%Poly%verismo!pgtable_e.pte.VAddrIndex. self!)))) (I (uClip 64 39))))) (I mask$))))) :pattern ((verismo!pgtable_e.pte.impl&%20.spec_index3.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.pte.VAddrIndex.) (uInv 64 (verismo!pgtable_e.pte.impl&%20.spec_index3.? self!))) :pattern ((verismo!pgtable_e.pte.impl&%20.spec_index3.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.wf_ptes.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.wf_ptes.) (forall ((m! Poly)) (! (= (verismo!pgtable_e.pte.wf_ptes.? m!) (and (and (and (= (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.pte.impl&%1.val.? (vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ NAT $ INT) $ TYPE%verismo!pgtable_e.def.PtePerm. m! (Poly%tuple%2. (tuple%2./tuple%2 (I verismo!pgtable_e.def.PAGE_TABLE_LEVELS.?) (I 0)))))))) (verismo!pgtable_e.def.static_cr3_value.? (I 0))) (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ NAT $ INT) (vstd!map.impl&%0.dom.? $ (TYPE%tuple%2. $ NAT $ INT) $ TYPE%verismo!pgtable_e.def.PtePerm. m!) (Poly%tuple%2. (verismo!pgtable_e.def.top_lvl_idx.? (I 0))))) (forall ((i$ Poly)) (! (=> (has_type i$ (TYPE%tuple%2. $ NAT $ INT)) (=> (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ NAT $ INT) (vstd!map.impl&%0.dom.? $ (TYPE%tuple%2. $ NAT $ INT) $ TYPE%verismo!pgtable_e.def.PtePerm. m!) i$) (verismo!pgtable_e.pte.impl&%1.wf.? (vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ NAT $ INT) $ TYPE%verismo!pgtable_e.def.PtePerm. m! i$) i$))) :pattern ((verismo!pgtable_e.pte.impl&%1.wf.? (vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ NAT $ INT) $ TYPE%verismo!pgtable_e.def.PtePerm. m! i$) i$))))) (forall ((lvl$ Poly) (addr$ Poly)) (! (=> (and (has_type lvl$ NAT) (has_type addr$ INT)) (=> (and (<= 0 (%I lvl$)) (< (%I lvl$) 4)) (verismo!pgtable_e.pte.pte_perms_wf_prev.? m! lvl$ addr$))) :pattern ((verismo!pgtable_e.pte.pte_perms_wf_prev.? m! lvl$ addr$)))))) :pattern ((verismo!pgtable_e.pte.wf_ptes.? m!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%2.view.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%2.view.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.pte.impl&%2.view.? self!) (verismo!pgtable_e.def.TrackedPTEPerms./TrackedPTEPerms/perms (%Poly%verismo!pgtable_e.def.TrackedPTEPerms. self!))) :pattern ((verismo!pgtable_e.pte.impl&%2.view.? self!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%2.invfn.))
(declare-fun %%lambda%%17 () %%Function%%)
(assert (forall ((v$ Poly)) (! (= (%%apply%%0 %%lambda%%17 v$) (B (verismo!pgtable_e.pte.wf_ptes.? (Poly%vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>. (verismo!pgtable_e.pte.impl&%2.view.? v$))))) :pattern ((%%apply%%0 %%lambda%%17 v$)))))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%2.invfn.) (forall ((no%param Poly)) (! (= (verismo!pgtable_e.pte.impl&%2.invfn.? no%param) (mk_fun %%lambda%%17)) :pattern ((verismo!pgtable_e.pte.impl&%2.invfn.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (verismo!pgtable_e.pte.impl&%2.invfn.? no%param)) (TYPE%fun%1. $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. $ BOOL))) :pattern ((verismo!pgtable_e.pte.impl&%2.invfn.? no%param)))))
(assert (fuel_bool_default fuel%verismo!global.contains_PT.))
(assert (=> (fuel_bool fuel%verismo!global.contains_PT.) (forall ((m! Poly)) (! (= (verismo!global.contains_PT.? m!) (and (and (%B (verismo!lock.spin_perm_s.MapRawLockTrait.contains_lock.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) m! (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT))))))) (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT))))) (= (verismo!lock.spin_perm_s.impl&%0.value_invfn.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. (Poly%verismo!lock.spin_perm_s.InvRawFn. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. m! (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT)))))))))))))) (verismo!pgtable_e.pte.impl&%2.invfn.? (I 0)))) (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. m! (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT)))))))))))))) (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)))) :pattern ((verismo!global.contains_PT.? m!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.value.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.value.? T&. T& self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (has_type (verismo!ptr.raw_ptr_s.impl&%5.value.? T&. T& self!) T&)) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.value.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.pte_perms.))
(assert (=> (fuel_bool fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.pte_perms.) (forall ((self! Poly)) (! (= (verismo!snp.trackedcore.snpmulticore.impl&%3.pte_perms.? self!) (verismo!pgtable_e.pte.impl&%2.view.? (verismo!ptr.raw_ptr_s.impl&%5.value.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT)))))))))))))))) :pattern ((verismo!snp.trackedcore.snpmulticore.impl&%3.pte_perms.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.wf_top_pt.))
(assert (=> (fuel_bool fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.wf_top_pt.) (forall ((self! Poly)) (! (= (verismo!snp.trackedcore.snpmulticore.impl&%3.wf_top_pt.? self!) (let ((cr3_u64$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!)))))) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr3)))))))))) (let ((top_pte$ (verismo!pgtable_e.pte.impl&%1.val.? (vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ NAT $ INT) $ TYPE%verismo!pgtable_e.def.PtePerm. (Poly%vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>. (verismo!snp.trackedcore.snpmulticore.impl&%3.pte_perms.? self!)) (Poly%tuple%2. (verismo!pgtable_e.def.top_lvl_idx.? (I 0))))))) (and (= (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. (Poly%verismo!pgtable_e.def.PTE. top_pte$))) (verismo!pgtable_e.def.static_cr3_value.? (I 0))) (= cr3_u64$ (verismo!pgtable_e.def.static_cr3_value.? (I 0))))))) :pattern ((verismo!snp.trackedcore.snpmulticore.impl&%3.wf_top_pt.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.wf_pt.))
(assert (=> (fuel_bool fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.wf_pt.) (forall ((self! Poly)) (! (= (verismo!snp.trackedcore.snpmulticore.impl&%3.wf_pt.? self!) (and (verismo!snp.trackedcore.snpmulticore.impl&%3.wf_top_pt.? self!) (verismo!pgtable_e.pte.wf_ptes.? (Poly%vstd!map.Map<tuple%2<nat./int.>./verismo!pgtable_e.def.PtePerm.>. (verismo!snp.trackedcore.snpmulticore.impl&%3.pte_perms.? self!))))) :pattern ((verismo!snp.trackedcore.snpmulticore.impl&%3.wf_pt.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.inv.))
(assert (=> (fuel_bool fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.inv.) (forall ((self! Poly)) (! (= (verismo!snp.trackedcore.snpmulticore.impl&%3.inv.? self!) (and (and (and (and (and (verismo!registers.trackedcore.snpcore.impl&%3.inv.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!)))) (%B (verismo!lock.spin_perm_s.MapRawLockTrait.inv.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) (I (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!)))))))))))))) (and (and (%B (verismo!lock.spin_perm_s.MapRawLockTrait.contains_lock.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE))))))) (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE))))) (= (verismo!lock.spin_perm_s.impl&%0.value_invfn.? $ TYPE%verismo!debug.interface.Console. (Poly%verismo!lock.spin_perm_s.InvRawFn. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE)))))))))))))) (verismo!debug.interface.impl&%7.invfn.? (I 0)))) (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE)))))))))))))) (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)))) (and (and (%B (verismo!lock.spin_perm_s.MapRawLockTrait.contains_lock.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR))))))) (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR))))) (= (verismo!lock.spin_perm_s.impl&%0.value_invfn.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator. (Poly%verismo!lock.spin_perm_s.InvRawFn. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR)))))))))))))) (verismo!allocator.linkedlist.impl&%8.invfn.? (I 0)))) (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR)))))))))))))) (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)))) (and (and (%B (verismo!lock.spin_perm_s.MapRawLockTrait.contains_lock.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT))))))) (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT))))) (= (verismo!lock.spin_perm_s.impl&%0.value_invfn.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. (Poly%verismo!lock.spin_perm_s.InvRawFn. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT)))))))))))))) (verismo!pgtable_e.pte.impl&%2.invfn.? (I 0)))) (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT)))))))))))))) (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)))) (verismo!snp.trackedcore.snpmulticore.impl&%3.wf_pt.? self!))) :pattern ((verismo!snp.trackedcore.snpmulticore.impl&%3.inv.? self!))))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.impl&%7.updated_lock.))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.impl&%7.updated_lock.) (forall ((self! Poly) (prev! Poly) (locks! Poly)) (! (= (verismo!lock.spin_perm_s.MapRawLockTrait.updated_lock.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) self! prev! locks!) (B (and (and (ext_eq true (TYPE%vstd!set.Set. $ INT) (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. prev!) (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self!)) (forall ((id$ Poly)) (! (=> (has_type id$ INT) (=> (and (vstd!set.impl&%0.contains.? $ INT locks! id$) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self!) id$)) (verismo!ptr.raw_ptr_s.impl&%5.only_val_updated.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self! id$)))))) (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%5.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. prev! id$))))))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self!) id$))))) (forall ((id$ Poly)) (! (=> (has_type id$ INT) (=> (and (not (vstd!set.impl&%0.contains.? $ INT locks! id$)) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self!) id$)) (= (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self! id$) (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. prev! id$)))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw. self!) id$))))))) :pattern ((verismo!lock.spin_perm_s.MapRawLockTrait.updated_lock.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) self! prev! locks!))))))
(assert (fuel_bool_default fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_coremode_updated.))
(assert (=> (fuel_bool fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_coremode_updated.) (forall ((self! Poly) (prev! Poly) (regs! Poly) (locks! Poly)) (! (= (verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_coremode_updated.? self! prev! regs! locks!) (and (%B (verismo!lock.spin_perm_s.MapRawLockTrait.updated_lock.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. prev!))) locks!)) (and (= (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!)))) (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. prev!))) (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!)))))))) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!)))))))) (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. prev!))) regs!)))) :pattern ((verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_coremode_updated.? self! prev! regs! locks!))))))
(assert (forall ((locked! Poly) (cpu! Poly) (points_to! Poly) (invfn! Poly)) (! (=> (and (has_type locked! BOOL) (has_type cpu! NAT) (has_type points_to! TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (has_type invfn! TYPE%verismo!lock.spin_perm_s.InvRawFn.)) (has_type (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%2.spec_new.? locked! cpu! points_to! invfn!)) TYPE%verismo!lock.spin_perm_s.LockPermToRaw.)) :pattern ((verismo!lock.spin_perm_s.impl&%2.spec_new.? locked! cpu! points_to! invfn!)))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.impl&%3.spec_locked.))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.impl&%3.spec_locked.) (forall ((self! Poly)) (! (= (verismo!lock.spin_perm_s.impl&%3.spec_locked.? self!) (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/locked (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))) :pattern ((verismo!lock.spin_perm_s.impl&%3.spec_locked.? self!))))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.impl&%3.spec_cpu.))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.impl&%3.spec_cpu.) (forall ((self! Poly)) (! (= (verismo!lock.spin_perm_s.impl&%3.spec_cpu.? self!) (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/cpu (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))) :pattern ((verismo!lock.spin_perm_s.impl&%3.spec_cpu.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!lock.spin_perm_s.LockPermToRaw.) (<= 0 (verismo!lock.spin_perm_s.impl&%3.spec_cpu.? self!))) :pattern ((verismo!lock.spin_perm_s.impl&%3.spec_cpu.? self!)))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.impl&%3.spec_points_to.))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.impl&%3.spec_points_to.) (forall ((self! Poly)) (! (= (verismo!lock.spin_perm_s.impl&%3.spec_points_to.? self!) (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/points_to (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))) :pattern ((verismo!lock.spin_perm_s.impl&%3.spec_points_to.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!lock.spin_perm_s.LockPermToRaw.) (has_type (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!lock.spin_perm_s.impl&%3.spec_points_to.? self!)) TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) :pattern ((verismo!lock.spin_perm_s.impl&%3.spec_points_to.? self!)))))
(assert (fuel_bool_default fuel%verismo!lock.spin_perm_s.impl&%3.spec_invfn.))
(assert (=> (fuel_bool fuel%verismo!lock.spin_perm_s.impl&%3.spec_invfn.) (forall ((self! Poly)) (! (= (verismo!lock.spin_perm_s.impl&%3.spec_invfn.? self!) (verismo!lock.spin_perm_s.LockPermToRaw./LockPermToRaw/invfn (%Poly%verismo!lock.spin_perm_s.LockPermToRaw. self!))) :pattern ((verismo!lock.spin_perm_s.impl&%3.spec_invfn.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!lock.spin_perm_s.LockPermToRaw.) (has_type (Poly%verismo!lock.spin_perm_s.InvRawFn. (verismo!lock.spin_perm_s.impl&%3.spec_invfn.? self!)) TYPE%verismo!lock.spin_perm_s.InvRawFn.)) :pattern ((verismo!lock.spin_perm_s.impl&%3.spec_invfn.? self!)))))
(declare-fun ens%verismo!lock.spin_perm_s.impl&%2.axiom_spec_new. (Bool Int verismo!ptr.raw_ptr_s.SnpPointsToBytes. verismo!lock.spin_perm_s.InvRawFn.) Bool)
(assert (forall ((locked! Bool) (cpu! Int) (points_to! verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (invfn! verismo!lock.spin_perm_s.InvRawFn.)) (! (= (ens%verismo!lock.spin_perm_s.impl&%2.axiom_spec_new. locked! cpu! points_to! invfn!) (and (= (verismo!lock.spin_perm_s.impl&%3.spec_locked.? (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%2.spec_new.? (B locked!) (I cpu!) (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. points_to!) (Poly%verismo!lock.spin_perm_s.InvRawFn. invfn!)))) locked!) (= (verismo!lock.spin_perm_s.impl&%3.spec_cpu.? (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%2.spec_new.? (B locked!) (I cpu!) (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. points_to!) (Poly%verismo!lock.spin_perm_s.InvRawFn. invfn!)))) cpu!) (= (verismo!lock.spin_perm_s.impl&%3.spec_points_to.? (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%2.spec_new.? (B locked!) (I cpu!) (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. points_to!) (Poly%verismo!lock.spin_perm_s.InvRawFn. invfn!)))) points_to!) (= (verismo!lock.spin_perm_s.impl&%3.spec_invfn.? (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%2.spec_new.? (B locked!) (I cpu!) (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. points_to!) (Poly%verismo!lock.spin_perm_s.InvRawFn. invfn!)))) invfn!))) :pattern ((ens%verismo!lock.spin_perm_s.impl&%2.axiom_spec_new. locked! cpu! points_to! invfn!)))))
(assert (forall ((locked! Poly) (cpu! Poly) (points_to! Poly) (invfn! Poly)) (! (=> (and (has_type locked! BOOL) (has_type cpu! NAT) (has_type points_to! TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (has_type invfn! TYPE%verismo!lock.spin_perm_s.InvRawFn.)) (and (and (and (= (verismo!lock.spin_perm_s.impl&%3.spec_locked.? (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%2.spec_new.? locked! cpu! points_to! invfn!))) (%B locked!)) (= (verismo!lock.spin_perm_s.impl&%3.spec_cpu.? (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%2.spec_new.? locked! cpu! points_to! invfn!))) (%I cpu!))) (= (verismo!lock.spin_perm_s.impl&%3.spec_points_to.? (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%2.spec_new.? locked! cpu! points_to! invfn!))) (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. points_to!))) (= (verismo!lock.spin_perm_s.impl&%3.spec_invfn.? (Poly%verismo!lock.spin_perm_s.LockPermToRaw. (verismo!lock.spin_perm_s.impl&%2.spec_new.? locked! cpu! points_to! invfn!))) (%Poly%verismo!lock.spin_perm_s.InvRawFn. invfn!)))) :pattern ((verismo!lock.spin_perm_s.impl&%2.spec_new.? locked! cpu! points_to! invfn!)))))
(assert (forall ((T&. Dcr) (T& Type) (lock! Poly) (data! Poly)) (! (=> (and (has_type lock! TYPE%verismo!lock.spin_t.SpinLock.) (has_type data! (TYPE%verismo!vcell.vcell.VCell. T&. T&))) (has_type (verismo!lock.spincell_e.impl&%3.spec_new.? T&. T& lock! data!) (TYPE%verismo!lock.spincell_e.VSpinLock. T&. T&))) :pattern ((verismo!lock.spincell_e.impl&%3.spec_new.? T&. T& lock! data!)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!lock.spincell_e.VSpinLock. T&. T&)) (has_type (verismo!lock.spincell_e.impl&%1.spec_data.? T&. T& self!) (TYPE%verismo!vcell.vcell.VCell. T&. T&))) :pattern ((verismo!lock.spincell_e.impl&%1.spec_data.? T&. T& self!)))))
(declare-fun ens%verismo!lock.spincell_e.impl&%3.axiom_spec_new. (Dcr Type verismo!lock.spin_t.SpinLock. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (lock! verismo!lock.spin_t.SpinLock.) (data! Poly)) (! (= (ens%verismo!lock.spincell_e.impl&%3.axiom_spec_new. T&. T& lock! data!) (and (= (verismo!lock.spincell_e.impl&%1.spec_lock.? T&. T& (verismo!lock.spincell_e.impl&%3.spec_new.? T&. T& (Poly%verismo!lock.spin_t.SpinLock. lock!) data!)) lock!) (= (verismo!lock.spincell_e.impl&%1.spec_data.? T&. T& (verismo!lock.spincell_e.impl&%3.spec_new.? T&. T& (Poly%verismo!lock.spin_t.SpinLock. lock!) data!)) data!))) :pattern ((ens%verismo!lock.spincell_e.impl&%3.axiom_spec_new. T&. T& lock! data!)))))
(assert (forall ((T&. Dcr) (T& Type) (lock! Poly) (data! Poly)) (! (=> (and (has_type lock! TYPE%verismo!lock.spin_t.SpinLock.) (has_type data! (TYPE%verismo!vcell.vcell.VCell. T&. T&))) (and (= (verismo!lock.spincell_e.impl&%1.spec_lock.? T&. T& (verismo!lock.spincell_e.impl&%3.spec_new.? T&. T& lock! data!)) (%Poly%verismo!lock.spin_t.SpinLock. lock!)) (= (verismo!lock.spincell_e.impl&%1.spec_data.? T&. T& (verismo!lock.spincell_e.impl&%3.spec_new.? T&. T& lock! data!)) data!))) :pattern ((verismo!lock.spincell_e.impl&%3.spec_new.? T&. T& lock! data!)))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%8.is_constant.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%8.is_constant.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.range_set.ranges_disjoint.))
(assert (=> (fuel_bool fuel%verismo!tspec.range_set.ranges_disjoint.) (forall ((rs! Poly) (r2! Poly)) (! (= (verismo!tspec.range_set.ranges_disjoint.? rs! r2!) (forall ((r1$ Poly)) (! (=> (has_type r1$ (TYPE%tuple%2. $ INT $ NAT)) (=> (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ INT $ NAT) rs! r1$) (verismo!tspec.range_set.range_disjoint_.? r1$ r2!))) :pattern ((vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ INT $ NAT) rs! r1$))))) :pattern ((verismo!tspec.range_set.ranges_disjoint.? rs! r2!))))))
(assert (forall ((self! Poly) (range! Poly)) (! (=> (and (has_type self! TYPE%verismo!mem.rawmem_p.RawMemPerms.) (has_type range! (TYPE%tuple%2. $ INT $ NAT))) (has_type (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!mem.rawmem_p.impl&%0.spec_index.? self! range!)) TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) :pattern ((verismo!mem.rawmem_p.impl&%0.spec_index.? self! range!)))))
(assert (fuel_bool_default fuel%verismo!mem.rawmem_p.impl&%0.contains_with_snp_except.))
(assert (=> (fuel_bool fuel%verismo!mem.rawmem_p.impl&%0.contains_with_snp_except.) (forall ((self! Poly) (range! Poly) (snp! Poly) (ranges! Poly)) (! (= (verismo!mem.rawmem_p.impl&%0.contains_with_snp_except.? self! range! snp! ranges!) (forall ((r$ Poly)) (! (=> (has_type r$ (TYPE%tuple%2. $ INT $ NAT)) (=> (and (and (and (let ((tmp%%$$0 (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. r$))))) (and (<= (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. range!))) tmp%%$$0) (< tmp%%$$0 (Add (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. range!))) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. range!))))))) (<= (Add (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. r$))) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. r$)))) (Add (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. range!))) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. range!)))))) (verismo!tspec.range_set.ranges_disjoint.? ranges! r$)) (not (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. r$))) 0))) (and (verismo!mem.rawmem_p.impl&%0.contains_range.? self! r$) (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!mem.rawmem_p.impl&%0.spec_index.? self! r$))) snp!)))) :pattern ((verismo!mem.rawmem_p.impl&%0.contains_range.? self! r$))))) :pattern ((verismo!mem.rawmem_p.impl&%0.contains_with_snp_except.? self! range! snp! ranges!))))))
(assert (forall ((present! Poly) (write! Poly) (supervisor! Poly) (pwt! Poly) (pcd! Poly) (accessed! Poly) (dirty! Poly) (psize! Poly) (global! Poly) (bit12! Poly) (encrypted! Poly) (page! Poly) (nx! Poly)) (! (=> (and (has_type present! (UINT 64)) (has_type write! (UINT 64)) (has_type supervisor! (UINT 64)) (has_type pwt! (UINT 64)) (has_type pcd! (UINT 64)) (has_type accessed! (UINT 64)) (has_type dirty! (UINT 64)) (has_type psize! (UINT 64)) (has_type global! (UINT 64)) (has_type bit12! (UINT 64)) (has_type encrypted! (UINT 64)) (has_type page! (UINT 64)) (has_type nx! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_present.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_present.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_present.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/present (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_present.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_present.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_present.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_write.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_write.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_write.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/write (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_write.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_write.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_write.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_supervisor.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_supervisor.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_pwt.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_pwt.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_pwt.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_pcd.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_pcd.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_pcd.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_accessed.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_accessed.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_accessed.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_dirty.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_dirty.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_dirty.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_psize.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_psize.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_psize.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/psize (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_psize.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_psize.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_psize.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_global.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_global.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_global.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/global (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_global.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_global.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_global.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_bit12.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_bit12.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_bit12.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_encrypted.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_encrypted.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_page.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_page.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_page.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/page (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_page.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_page.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_page.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_nx.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_nx.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_nx.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/nx (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_nx.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_nx.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))))
(declare-fun ens%verismo!pgtable_e.def.impl&%2.axiom_spec_new. (Int Int Int Int Int Int Int Int Int Int Int Int Int) Bool)
(assert (forall ((present! Int) (write! Int) (supervisor! Int) (pwt! Int) (pcd! Int) (accessed! Int) (dirty! Int) (psize! Int) (global! Int) (bit12! Int) (encrypted! Int) (page! Int) (nx! Int)) (! (= (ens%verismo!pgtable_e.def.impl&%2.axiom_spec_new. present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!) (and (= (verismo!pgtable_e.def.impl&%0.spec_present.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) present!) (= (verismo!pgtable_e.def.impl&%0.spec_write.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) write!) (= (verismo!pgtable_e.def.impl&%0.spec_supervisor.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) supervisor!) (= (verismo!pgtable_e.def.impl&%0.spec_pwt.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) pwt!) (= (verismo!pgtable_e.def.impl&%0.spec_pcd.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) pcd!) (= (verismo!pgtable_e.def.impl&%0.spec_accessed.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) accessed!) (= (verismo!pgtable_e.def.impl&%0.spec_dirty.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) dirty!) (= (verismo!pgtable_e.def.impl&%0.spec_psize.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) psize!) (= (verismo!pgtable_e.def.impl&%0.spec_global.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) global!) (= (verismo!pgtable_e.def.impl&%0.spec_bit12.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) bit12!) (= (verismo!pgtable_e.def.impl&%0.spec_encrypted.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) encrypted!) (= (verismo!pgtable_e.def.impl&%0.spec_page.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) page!) (= (verismo!pgtable_e.def.impl&%0.spec_nx.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) nx!))) :pattern ((ens%verismo!pgtable_e.def.impl&%2.axiom_spec_new. present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!)))))
(assert (forall ((present! Poly) (write! Poly) (supervisor! Poly) (pwt! Poly) (pcd! Poly) (accessed! Poly) (dirty! Poly) (psize! Poly) (global! Poly) (bit12! Poly) (encrypted! Poly) (page! Poly) (nx! Poly)) (! (=> (and (has_type present! (UINT 64)) (has_type write! (UINT 64)) (has_type supervisor! (UINT 64)) (has_type pwt! (UINT 64)) (has_type pcd! (UINT 64)) (has_type accessed! (UINT 64)) (has_type dirty! (UINT 64)) (has_type psize! (UINT 64)) (has_type global! (UINT 64)) (has_type bit12! (UINT 64)) (has_type encrypted! (UINT 64)) (has_type page! (UINT 64)) (has_type nx! (UINT 64))) (and (and (and (and (and (and (and (and (and (and (and (and (= (verismo!pgtable_e.def.impl&%0.spec_present.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I present!)) (= (verismo!pgtable_e.def.impl&%0.spec_write.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I write!))) (= (verismo!pgtable_e.def.impl&%0.spec_supervisor.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I supervisor!))) (= (verismo!pgtable_e.def.impl&%0.spec_pwt.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I pwt!))) (= (verismo!pgtable_e.def.impl&%0.spec_pcd.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I pcd!))) (= (verismo!pgtable_e.def.impl&%0.spec_accessed.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I accessed!))) (= (verismo!pgtable_e.def.impl&%0.spec_dirty.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I dirty!))) (= (verismo!pgtable_e.def.impl&%0.spec_psize.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I psize!))) (= (verismo!pgtable_e.def.impl&%0.spec_global.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I global!))) (= (verismo!pgtable_e.def.impl&%0.spec_bit12.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I bit12!))) (= (verismo!pgtable_e.def.impl&%0.spec_encrypted.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I encrypted!))) (= (verismo!pgtable_e.def.impl&%0.spec_page.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I page!))) (= (verismo!pgtable_e.def.impl&%0.spec_nx.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I nx!)))) :pattern ((verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%3.new.? val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%3.new.? val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_nx.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_nx.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_nx.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) val!)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_nx.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_nx.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_nx.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_page.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_page.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_page.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_page.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_page.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_page.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_encrypted.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_encrypted.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_bit12.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_bit12.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_bit12.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_bit12.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_bit12.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_bit12.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_global.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_global.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_global.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_global.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_global.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_global.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_psize.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_psize.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_psize.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_psize.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_psize.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_psize.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_dirty.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_dirty.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_dirty.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_dirty.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_dirty.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_dirty.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_accessed.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_accessed.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_accessed.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_accessed.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_accessed.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_accessed.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_pcd.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_pcd.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_pcd.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_pcd.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_pcd.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_pcd.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_pwt.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_pwt.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_pwt.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_pwt.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_pwt.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_pwt.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_supervisor.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_supervisor.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_write.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_write.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_write.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_write.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_write.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_write.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_present.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_present.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_present.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? val! (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_present.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_present.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_present.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_write.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_write.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_write.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 1))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_write.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_write.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_write.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_supervisor.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_supervisor.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_supervisor.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 2))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_supervisor.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_supervisor.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_supervisor.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_pwt.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_pwt.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_pwt.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 3))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_pwt.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_pwt.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_pwt.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_pcd.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_pcd.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_pcd.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 4))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_pcd.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_pcd.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_pcd.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_accessed.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_accessed.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_accessed.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 5))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_accessed.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_accessed.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_accessed.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_dirty.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_dirty.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_dirty.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 6))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_dirty.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_dirty.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_dirty.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_global.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_global.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_global.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 8))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_global.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_global.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_global.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_bit12.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_bit12.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_bit12.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 12))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_bit12.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_bit12.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_bit12.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_encrypted.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_encrypted.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_encrypted.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 51))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_encrypted.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_encrypted.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_encrypted.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_nx.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_nx.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_nx.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 63))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_nx.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_nx.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_nx.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.view.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.view.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.view.? self!) (verismo!pgtable_e.def.impl&%1.spec_set_nx.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_page.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_bit12.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_global.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_psize.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_dirty.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_accessed.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_pcd.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_pwt.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_write.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_present.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!pgtable_e.def.SpecPTE.) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_present.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_write.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_supervisor.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_pwt.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_pcd.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_accessed.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_dirty.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_psize.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_global.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_bit12.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_encrypted.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_page.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_nx.? self!))))) :pattern ((verismo!pgtable_e.def.impl&%16.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%16.view.? self!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%16.view.? self!)))))
(declare-fun ens%verismo!pgtable_e.def.impl&%3.axiom_new. (verismo!pgtable_e.def.PTE.) Bool)
(assert (forall ((val! verismo!pgtable_e.def.PTE.)) (! (= (ens%verismo!pgtable_e.def.impl&%3.axiom_new. val!) (= (verismo!pgtable_e.def.impl&%3.new.? (I (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. (Poly%verismo!pgtable_e.def.PTE. val!))))) (verismo!pgtable_e.def.impl&%16.view.? (Poly%verismo!pgtable_e.def.PTE. val!)))) :pattern ((ens%verismo!pgtable_e.def.impl&%3.axiom_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!pgtable_e.def.PTE.) (= (verismo!pgtable_e.def.impl&%3.new.? (I (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. val!)))) (verismo!pgtable_e.def.impl&%16.view.? val!))) :pattern ((verismo!pgtable_e.def.impl&%3.new.? (I (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. val!)))) (verismo!pgtable_e.def.impl&%16.view.? val!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.impl&%3.to_value.? self!)) TYPE%verismo!pgtable_e.def.PTE.)) :pattern ((verismo!pgtable_e.def.impl&%3.to_value.? self!)))))
(declare-fun ens%verismo!pgtable_e.def.impl&%3.axiom_into. (verismo!pgtable_e.def.SpecPTE.) Bool)
(assert (forall ((self! verismo!pgtable_e.def.SpecPTE.)) (! (= (ens%verismo!pgtable_e.def.impl&%3.axiom_into. self!) (= (verismo!pgtable_e.def.impl&%16.view.? (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.impl&%3.to_value.? (Poly%verismo!pgtable_e.def.SpecPTE. self!)))) self!)) :pattern ((ens%verismo!pgtable_e.def.impl&%3.axiom_into. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (= (verismo!pgtable_e.def.impl&%16.view.? (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.impl&%3.to_value.? self!))) (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%3.to_value.? self!)))))
(declare-fun ens%verismo!pgtable_e.def.impl&%15.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!pgtable_e.def.impl&%15.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!pgtable_e.def.PTE. self! ret!) (= self! ret!))) :pattern ((ens%verismo!pgtable_e.def.impl&%15.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!pgtable_e.def.PTE.)) (has_type ret$ TYPE%verismo!pgtable_e.def.PTE.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!pgtable_e.def.PTE.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!pgtable_e.def.PTE.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!pgtable_e.def.PTE. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= self$ (%Poly%verismo!pgtable_e.def.PTE. ret$))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!pgtable_e.def.PTE.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!pgtable_e.def.PTE.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.inv.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.inv.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 9223372036854775807)))) :pattern ((verismo!pgtable_e.def.impl&%16.inv.? self!))))))
(declare-fun ens%verismo!pgtable_e.def.impl&%16.axiom_inv. (verismo!pgtable_e.def.PTE.) Bool)
(assert (forall ((self! verismo!pgtable_e.def.PTE.)) (! (= (ens%verismo!pgtable_e.def.impl&%16.axiom_inv. self!) (and (verismo!pgtable_e.def.impl&%16.inv.? (Poly%verismo!pgtable_e.def.PTE. self!)) (let ((tmp%%$ (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. (Poly%verismo!pgtable_e.def.PTE. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 9223372036854775807))))) :pattern ((ens%verismo!pgtable_e.def.impl&%16.axiom_inv. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (and (verismo!pgtable_e.def.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 9223372036854775807))))) :pattern ((verismo!pgtable_e.def.impl&%16.inv.? self!) (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!))))))
(assert (forall ((index0! Poly) (index1! Poly) (index2! Poly) (index3! Poly)) (! (=> (and (has_type index0! (UINT 64)) (has_type index1! (UINT 64)) (has_type index2! (UINT 64)) (has_type index3! (UINT 64))) (has_type (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%6.spec_new.? index0! index1! index2! index3!)) TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.)) :pattern ((verismo!pgtable_e.pte.impl&%6.spec_new.? index0! index1! index2! index3!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%4.spec_index0.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%4.spec_index0.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.pte.impl&%4.spec_index0.? self!) (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index0 (%Poly%verismo!pgtable_e.pte.SpecVAddrIndex. self!))) :pattern ((verismo!pgtable_e.pte.impl&%4.spec_index0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (uInv 64 (verismo!pgtable_e.pte.impl&%4.spec_index0.? self!))) :pattern ((verismo!pgtable_e.pte.impl&%4.spec_index0.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%4.spec_index1.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%4.spec_index1.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.pte.impl&%4.spec_index1.? self!) (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index1 (%Poly%verismo!pgtable_e.pte.SpecVAddrIndex. self!))) :pattern ((verismo!pgtable_e.pte.impl&%4.spec_index1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (uInv 64 (verismo!pgtable_e.pte.impl&%4.spec_index1.? self!))) :pattern ((verismo!pgtable_e.pte.impl&%4.spec_index1.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%4.spec_index2.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%4.spec_index2.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.pte.impl&%4.spec_index2.? self!) (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index2 (%Poly%verismo!pgtable_e.pte.SpecVAddrIndex. self!))) :pattern ((verismo!pgtable_e.pte.impl&%4.spec_index2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (uInv 64 (verismo!pgtable_e.pte.impl&%4.spec_index2.? self!))) :pattern ((verismo!pgtable_e.pte.impl&%4.spec_index2.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%4.spec_index3.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%4.spec_index3.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.pte.impl&%4.spec_index3.? self!) (verismo!pgtable_e.pte.SpecVAddrIndex./SpecVAddrIndex/index3 (%Poly%verismo!pgtable_e.pte.SpecVAddrIndex. self!))) :pattern ((verismo!pgtable_e.pte.impl&%4.spec_index3.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (uInv 64 (verismo!pgtable_e.pte.impl&%4.spec_index3.? self!))) :pattern ((verismo!pgtable_e.pte.impl&%4.spec_index3.? self!)))))
(declare-fun ens%verismo!pgtable_e.pte.impl&%6.axiom_spec_new. (Int Int Int Int) Bool)
(assert (forall ((index0! Int) (index1! Int) (index2! Int) (index3! Int)) (! (= (ens%verismo!pgtable_e.pte.impl&%6.axiom_spec_new. index0! index1! index2! index3!) (and (= (verismo!pgtable_e.pte.impl&%4.spec_index0.? (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%6.spec_new.? (I index0!) (I index1!) (I index2!) (I index3!)))) index0!) (= (verismo!pgtable_e.pte.impl&%4.spec_index1.? (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%6.spec_new.? (I index0!) (I index1!) (I index2!) (I index3!)))) index1!) (= (verismo!pgtable_e.pte.impl&%4.spec_index2.? (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%6.spec_new.? (I index0!) (I index1!) (I index2!) (I index3!)))) index2!) (= (verismo!pgtable_e.pte.impl&%4.spec_index3.? (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%6.spec_new.? (I index0!) (I index1!) (I index2!) (I index3!)))) index3!))) :pattern ((ens%verismo!pgtable_e.pte.impl&%6.axiom_spec_new. index0! index1! index2! index3!)))))
(assert (forall ((index0! Poly) (index1! Poly) (index2! Poly) (index3! Poly)) (! (=> (and (has_type index0! (UINT 64)) (has_type index1! (UINT 64)) (has_type index2! (UINT 64)) (has_type index3! (UINT 64))) (and (and (and (= (verismo!pgtable_e.pte.impl&%4.spec_index0.? (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%6.spec_new.? index0! index1! index2! index3!))) (%I index0!)) (= (verismo!pgtable_e.pte.impl&%4.spec_index1.? (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%6.spec_new.? index0! index1! index2! index3!))) (%I index1!))) (= (verismo!pgtable_e.pte.impl&%4.spec_index2.? (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%6.spec_new.? index0! index1! index2! index3!))) (%I index2!))) (= (verismo!pgtable_e.pte.impl&%4.spec_index3.? (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%6.spec_new.? index0! index1! index2! index3!))) (%I index3!)))) :pattern ((verismo!pgtable_e.pte.impl&%6.spec_new.? index0! index1! index2! index3!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%7.new.? val!)) TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.)) :pattern ((verismo!pgtable_e.pte.impl&%7.new.? val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index3.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index3.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.pte.impl&%5.spec_set_index3.? self! val!) (verismo!pgtable_e.pte.impl&%6.spec_new.? (I (verismo!pgtable_e.pte.impl&%4.spec_index0.? self!)) (I (verismo!pgtable_e.pte.impl&%4.spec_index1.? self!)) (I (verismo!pgtable_e.pte.impl&%4.spec_index2.? self!)) val!)) :pattern ((verismo!pgtable_e.pte.impl&%5.spec_set_index3.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%5.spec_set_index3.? self! val!)) TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.)) :pattern ((verismo!pgtable_e.pte.impl&%5.spec_set_index3.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index2.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index2.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.pte.impl&%5.spec_set_index2.? self! val!) (verismo!pgtable_e.pte.impl&%6.spec_new.? (I (verismo!pgtable_e.pte.impl&%4.spec_index0.? self!)) (I (verismo!pgtable_e.pte.impl&%4.spec_index1.? self!)) val! (I (verismo!pgtable_e.pte.impl&%4.spec_index3.? self!)))) :pattern ((verismo!pgtable_e.pte.impl&%5.spec_set_index2.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%5.spec_set_index2.? self! val!)) TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.)) :pattern ((verismo!pgtable_e.pte.impl&%5.spec_set_index2.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index1.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index1.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.pte.impl&%5.spec_set_index1.? self! val!) (verismo!pgtable_e.pte.impl&%6.spec_new.? (I (verismo!pgtable_e.pte.impl&%4.spec_index0.? self!)) val! (I (verismo!pgtable_e.pte.impl&%4.spec_index2.? self!)) (I (verismo!pgtable_e.pte.impl&%4.spec_index3.? self!)))) :pattern ((verismo!pgtable_e.pte.impl&%5.spec_set_index1.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%5.spec_set_index1.? self! val!)) TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.)) :pattern ((verismo!pgtable_e.pte.impl&%5.spec_set_index1.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index0.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%5.spec_set_index0.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.pte.impl&%5.spec_set_index0.? self! val!) (verismo!pgtable_e.pte.impl&%6.spec_new.? val! (I (verismo!pgtable_e.pte.impl&%4.spec_index1.? self!)) (I (verismo!pgtable_e.pte.impl&%4.spec_index2.? self!)) (I (verismo!pgtable_e.pte.impl&%4.spec_index3.? self!)))) :pattern ((verismo!pgtable_e.pte.impl&%5.spec_set_index0.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%5.spec_set_index0.? self! val!)) TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.)) :pattern ((verismo!pgtable_e.pte.impl&%5.spec_set_index0.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%20.view.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%20.view.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.pte.impl&%20.view.? self!) (verismo!pgtable_e.pte.impl&%5.spec_set_index3.? (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%5.spec_set_index2.? (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%5.spec_set_index1.? (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%5.spec_set_index0.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (I (uClip 64 (verismo!pgtable_e.pte.impl&%20.spec_index0.? self!))))) (I (uClip 64 (verismo!pgtable_e.pte.impl&%20.spec_index1.? self!))))) (I (uClip 64 (verismo!pgtable_e.pte.impl&%20.spec_index2.? self!))))) (I (uClip 64 (verismo!pgtable_e.pte.impl&%20.spec_index3.? self!))))) :pattern ((verismo!pgtable_e.pte.impl&%20.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.pte.VAddrIndex.) (has_type (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. (verismo!pgtable_e.pte.impl&%20.view.? self!)) TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.)) :pattern ((verismo!pgtable_e.pte.impl&%20.view.? self!)))))
(declare-fun ens%verismo!pgtable_e.pte.impl&%7.axiom_new. (verismo!pgtable_e.pte.VAddrIndex.) Bool)
(assert (forall ((val! verismo!pgtable_e.pte.VAddrIndex.)) (! (= (ens%verismo!pgtable_e.pte.impl&%7.axiom_new. val!) (= (verismo!pgtable_e.pte.impl&%7.new.? (I (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (%Poly%verismo!pgtable_e.pte.VAddrIndex. (Poly%verismo!pgtable_e.pte.VAddrIndex. val!))))) (verismo!pgtable_e.pte.impl&%20.view.? (Poly%verismo!pgtable_e.pte.VAddrIndex. val!)))) :pattern ((ens%verismo!pgtable_e.pte.impl&%7.axiom_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!pgtable_e.pte.VAddrIndex.) (= (verismo!pgtable_e.pte.impl&%7.new.? (I (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (%Poly%verismo!pgtable_e.pte.VAddrIndex. val!)))) (verismo!pgtable_e.pte.impl&%20.view.? val!))) :pattern ((verismo!pgtable_e.pte.impl&%7.new.? (I (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (%Poly%verismo!pgtable_e.pte.VAddrIndex. val!)))) (verismo!pgtable_e.pte.impl&%20.view.? val!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (has_type (Poly%verismo!pgtable_e.pte.VAddrIndex. (verismo!pgtable_e.pte.impl&%7.to_value.? self!)) TYPE%verismo!pgtable_e.pte.VAddrIndex.)) :pattern ((verismo!pgtable_e.pte.impl&%7.to_value.? self!)))))
(declare-fun ens%verismo!pgtable_e.pte.impl&%7.axiom_into. (verismo!pgtable_e.pte.SpecVAddrIndex.) Bool)
(assert (forall ((self! verismo!pgtable_e.pte.SpecVAddrIndex.)) (! (= (ens%verismo!pgtable_e.pte.impl&%7.axiom_into. self!) (= (verismo!pgtable_e.pte.impl&%20.view.? (Poly%verismo!pgtable_e.pte.VAddrIndex. (verismo!pgtable_e.pte.impl&%7.to_value.? (Poly%verismo!pgtable_e.pte.SpecVAddrIndex. self!)))) self!)) :pattern ((ens%verismo!pgtable_e.pte.impl&%7.axiom_into. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.pte.SpecVAddrIndex.) (= (verismo!pgtable_e.pte.impl&%20.view.? (Poly%verismo!pgtable_e.pte.VAddrIndex. (verismo!pgtable_e.pte.impl&%7.to_value.? self!))) (%Poly%verismo!pgtable_e.pte.SpecVAddrIndex. self!))) :pattern ((verismo!pgtable_e.pte.impl&%7.to_value.? self!)))))
(declare-fun ens%verismo!pgtable_e.pte.impl&%19.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!pgtable_e.pte.impl&%19.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!pgtable_e.pte.VAddrIndex. self! ret!) (= self! ret!))) :pattern ((ens%verismo!pgtable_e.pte.impl&%19.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!pgtable_e.pte.VAddrIndex.)) (has_type ret$ TYPE%verismo!pgtable_e.pte.VAddrIndex.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!pgtable_e.pte.VAddrIndex.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!pgtable_e.pte.VAddrIndex.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!pgtable_e.pte.VAddrIndex. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= self$ (%Poly%verismo!pgtable_e.pte.VAddrIndex. ret$))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!pgtable_e.pte.VAddrIndex.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!pgtable_e.pte.VAddrIndex.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%20.inv.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%20.inv.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.pte.impl&%20.inv.? self!) (let ((tmp%%$ (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (%Poly%verismo!pgtable_e.pte.VAddrIndex. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 140737488355327)))) :pattern ((verismo!pgtable_e.pte.impl&%20.inv.? self!))))))
(declare-fun ens%verismo!pgtable_e.pte.impl&%20.axiom_inv. (verismo!pgtable_e.pte.VAddrIndex.) Bool)
(assert (forall ((self! verismo!pgtable_e.pte.VAddrIndex.)) (! (= (ens%verismo!pgtable_e.pte.impl&%20.axiom_inv. self!) (and (verismo!pgtable_e.pte.impl&%20.inv.? (Poly%verismo!pgtable_e.pte.VAddrIndex. self!)) (let ((tmp%%$ (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (%Poly%verismo!pgtable_e.pte.VAddrIndex. (Poly%verismo!pgtable_e.pte.VAddrIndex. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 140737488355327))))) :pattern ((ens%verismo!pgtable_e.pte.impl&%20.axiom_inv. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.pte.VAddrIndex.) (and (verismo!pgtable_e.pte.impl&%20.inv.? self!) (let ((tmp%%$ (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (%Poly%verismo!pgtable_e.pte.VAddrIndex. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 140737488355327))))) :pattern ((verismo!pgtable_e.pte.impl&%20.inv.? self!) (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (%Poly%verismo!pgtable_e.pte.VAddrIndex. self!))))))
(declare-fun ens%verismo!ptr.def_s.impl&%18.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (ret! Poly)) (! (= (ens%verismo!ptr.def_s.impl&%18.clone. V&. V& self! ret!) (and (ens%core!clone.Clone.clone. $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) self! ret!) (= self! ret!))) :pattern ((ens%verismo!ptr.def_s.impl&%18.clone. V&. V& self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly) (V&. Dcr) (V& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))) (has_type ret$ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)) $ (TYPE%tuple%1. (REF $) (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!ptr.def_s.SnpPPtr. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= self$ (%Poly%verismo!ptr.def_s.SnpPPtr. ret$))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)) $ (TYPE%tuple%1. (REF $) (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)) (F fndef_singleton) tmp%%$ ret$)))))
(assert (forall ((V&. Dcr) (V& Type) (ptr! Poly) (value! Poly) (snp! Poly)) (! (=> (and (has_type ptr! INT) (has_type value! (TYPE%core!option.Option. V&. V&)) (has_type snp! TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) (has_type (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%22.spec_new.? V&. V& ptr! value! snp!)) (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))) :pattern ((verismo!ptr.def_s.impl&%22.spec_new.? V&. V& ptr! value! snp!)))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%20.spec_ptr.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%20.spec_ptr.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.def_s.impl&%20.spec_ptr.? V&. V& self!) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/ptr (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))) :pattern ((verismo!ptr.def_s.impl&%20.spec_ptr.? V&. V& self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%20.spec_value.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%20.spec_value.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.def_s.impl&%20.spec_value.? V&. V& self!) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))) :pattern ((verismo!ptr.def_s.impl&%20.spec_value.? V&. V& self!))))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&)) (has_type (Poly%core!option.Option. (verismo!ptr.def_s.impl&%20.spec_value.? V&. V& self!)) (TYPE%core!option.Option. V&. V&))) :pattern ((verismo!ptr.def_s.impl&%20.spec_value.? V&. V& self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%20.spec_snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%20.spec_snp.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.def_s.impl&%20.spec_snp.? V&. V& self!) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))) :pattern ((verismo!ptr.def_s.impl&%20.spec_snp.? V&. V& self!))))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&)) (has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.def_s.impl&%20.spec_snp.? V&. V& self!)) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) :pattern ((verismo!ptr.def_s.impl&%20.spec_snp.? V&. V& self!)))))
(declare-fun ens%verismo!ptr.def_s.impl&%22.axiom_spec_new. (Dcr Type Int core!option.Option. verismo!ptr.snp.snp_u.SnpMemAttr.) Bool)
(assert (forall ((V&. Dcr) (V& Type) (ptr! Int) (value! core!option.Option.) (snp! verismo!ptr.snp.snp_u.SnpMemAttr.)) (! (= (ens%verismo!ptr.def_s.impl&%22.axiom_spec_new. V&. V& ptr! value! snp!) (and (= (verismo!ptr.def_s.impl&%20.spec_ptr.? V&. V& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%22.spec_new.? V&. V& (I ptr!) (Poly%core!option.Option. value!) (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!)))) ptr!) (= (verismo!ptr.def_s.impl&%20.spec_value.? V&. V& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%22.spec_new.? V&. V& (I ptr!) (Poly%core!option.Option. value!) (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!)))) value!) (= (verismo!ptr.def_s.impl&%20.spec_snp.? V&. V& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%22.spec_new.? V&. V& (I ptr!) (Poly%core!option.Option. value!) (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!)))) snp!))) :pattern ((ens%verismo!ptr.def_s.impl&%22.axiom_spec_new. V&. V& ptr! value! snp!)))))
(assert (forall ((V&. Dcr) (V& Type) (ptr! Poly) (value! Poly) (snp! Poly)) (! (=> (and (has_type ptr! INT) (has_type value! (TYPE%core!option.Option. V&. V&)) (has_type snp! TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) (=> (and (and (tr_bound%verismo!tspec.isconst.IsConstant. V&. V&) (tr_bound%verismo!tspec.wellformed.WellFormed. V&. V&)) (tr_bound%verismo!tspec.size_s.SpecSize. V&. V&)) (and (and (= (verismo!ptr.def_s.impl&%20.spec_ptr.? V&. V& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%22.spec_new.? V&. V& ptr! value! snp!))) (%I ptr!)) (= (verismo!ptr.def_s.impl&%20.spec_value.? V&. V& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%22.spec_new.? V&. V& ptr! value! snp!))) (%Poly%core!option.Option. value!))) (= (verismo!ptr.def_s.impl&%20.spec_snp.? V&. V& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%22.spec_new.? V&. V& ptr! value! snp!))) (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!))))) :pattern ((verismo!ptr.def_s.impl&%22.spec_new.? V&. V& ptr! value! snp!)))))
(declare-fun ens%verismo!ptr.ptr_s.impl&%0.axiom_id_equal. (Dcr Type verismo!ptr.def_s.SnpPPtr. verismo!ptr.def_s.SnpPPtr.) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! verismo!ptr.def_s.SnpPPtr.) (other! verismo!ptr.def_s.SnpPPtr.)) (! (= (ens%verismo!ptr.ptr_s.impl&%0.axiom_id_equal. V&. V& self! other!) (= (= (verismo!ptr.def_s.impl&%19.id.? V&. V& (Poly%verismo!ptr.def_s.SnpPPtr. self!)) (verismo!ptr.def_s.impl&%19.id.? V&. V& (Poly%verismo!ptr.def_s.SnpPPtr. other!))) (= self! other!))) :pattern ((ens%verismo!ptr.ptr_s.impl&%0.axiom_id_equal. V&. V& self! other!)))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)) (has_type other! (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))) (=> (and (and (tr_bound%verismo!tspec.isconst.IsConstant. V&. V&) (tr_bound%verismo!tspec.wellformed.WellFormed. V&. V&)) (tr_bound%verismo!tspec.size_s.SpecSize. V&. V&)) (= (= (verismo!ptr.def_s.impl&%19.id.? V&. V& self!) (verismo!ptr.def_s.impl&%19.id.? V&. V& other!)) (= self! other!)))) :pattern ((verismo!ptr.def_s.impl&%19.id.? V&. V& self!) (verismo!ptr.def_s.impl&%19.id.? V&. V& other!)))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_s.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_s.impl&%3.vspec_cast_to.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!) (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes (%I (I (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/ptr (%Poly%verismo!ptr.def_s.SnpPointsToData. self!)))) (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? V&. V& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.ptr_u.impl&%2.value.? V&. V& self!)))))) (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%6.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. $ (TYPE%verismo!ptr.def_s.SnpPointsToData. T&. T&) self!) (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData (%I (I (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))))))) (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. $ (TYPE%verismo!ptr.def_s.SnpPointsToData. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_u.impl&%2.id.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_u.impl&%2.id.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.ptr_u.impl&%2.id.? V&. V& self!) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/ptr (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))) :pattern ((verismo!ptr.ptr_u.impl&%2.id.? V&. V& self!))))))
(declare-fun req%verismo!ptr.ptr_e.impl&%0.from_usize. (Dcr Type Int) Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((V&. Dcr) (V& Type) (u! Int)) (! (= (req%verismo!ptr.ptr_e.impl&%0.from_usize. V&. V& u!) (=> %%global_location_label%%61 (%B (B true)))) :pattern ((req%verismo!ptr.ptr_e.impl&%0.from_usize. V&. V& u!)))))
(declare-fun ens%verismo!ptr.ptr_e.impl&%0.from_usize. (Dcr Type Int verismo!ptr.def_s.SnpPPtr.) Bool)
(assert (forall ((V&. Dcr) (V& Type) (u! Int) (p! verismo!ptr.def_s.SnpPPtr.)) (! (= (ens%verismo!ptr.ptr_e.impl&%0.from_usize. V&. V& u! p!) (and (has_type (Poly%verismo!ptr.def_s.SnpPPtr. p!) (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)) (= (verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr (%Poly%verismo!ptr.def_s.SnpPPtr. (Poly%verismo!ptr.def_s.SnpPPtr. p!))) u!) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) (Poly%verismo!ptr.def_s.SnpPPtr. p!))))) :pattern ((ens%verismo!ptr.ptr_e.impl&%0.from_usize. V&. V& u! p!)))))
(assert (forall ((pptr! Poly) (snp_bytes! Poly) (snp! Poly)) (! (=> (and (has_type pptr! INT) (has_type snp_bytes! (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (has_type snp! TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) (has_type (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%1.spec_new.? pptr! snp_bytes! snp!)) TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) :pattern ((verismo!ptr.raw_ptr_s.impl&%1.spec_new.? pptr! snp_bytes! snp!)))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_pptr.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_pptr.) (forall ((self! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%2.spec_pptr.? self!) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))) :pattern ((verismo!ptr.raw_ptr_s.impl&%2.spec_pptr.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes.) (forall ((self! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes.? self!) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))) :pattern ((verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp.) (forall ((self! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%2.spec_snp.? self!) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))) :pattern ((verismo!ptr.raw_ptr_s.impl&%2.spec_snp.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.impl&%2.spec_snp.? self!)) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) :pattern ((verismo!ptr.raw_ptr_s.impl&%2.spec_snp.? self!)))))
(declare-fun ens%verismo!ptr.raw_ptr_s.impl&%1.axiom_spec_new. (Int vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. verismo!ptr.snp.snp_u.SnpMemAttr.) Bool)
(assert (forall ((pptr! Int) (snp_bytes! vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.) (snp! verismo!ptr.snp.snp_u.SnpMemAttr.)) (! (= (ens%verismo!ptr.raw_ptr_s.impl&%1.axiom_spec_new. pptr! snp_bytes! snp!) (and (= (verismo!ptr.raw_ptr_s.impl&%2.spec_pptr.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%1.spec_new.? (I pptr!) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. snp_bytes!) (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!)))) pptr!) (= (verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%1.spec_new.? (I pptr!) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. snp_bytes!) (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!)))) snp_bytes!) (= (verismo!ptr.raw_ptr_s.impl&%2.spec_snp.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%1.spec_new.? (I pptr!) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. snp_bytes!) (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!)))) snp!))) :pattern ((ens%verismo!ptr.raw_ptr_s.impl&%1.axiom_spec_new. pptr! snp_bytes! snp!)))))
(assert (forall ((pptr! Poly) (snp_bytes! Poly) (snp! Poly)) (! (=> (and (has_type pptr! INT) (has_type snp_bytes! (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (has_type snp! TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) (and (and (= (verismo!ptr.raw_ptr_s.impl&%2.spec_pptr.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%1.spec_new.? pptr! snp_bytes! snp!))) (%I pptr!)) (= (verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%1.spec_new.? pptr! snp_bytes! snp!))) (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. snp_bytes!))) (= (verismo!ptr.raw_ptr_s.impl&%2.spec_snp.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%1.spec_new.? pptr! snp_bytes! snp!))) (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!)))) :pattern ((verismo!ptr.raw_ptr_s.impl&%1.spec_new.? pptr! snp_bytes! snp!)))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.) (forall ((self! Poly) (range! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.? self! range!) (and (= (verismo!ptr.raw_ptr_s.impl&%5.range.? self!) (%Poly%tuple%2. range!)) (verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!)))))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.? self! range!))))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.take.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.take.) (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (= (vstd!seq.impl&%0.take.? A&. A& self! n!) (vstd!seq.Seq.subrange.? A&. A& self! (I 0) n!)) :pattern ((vstd!seq.impl&%0.take.? A&. A& self! n!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type n! INT)) (has_type (vstd!seq.impl&%0.take.? A&. A& self! n!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.take.? A&. A& self! n!)))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.skip.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.skip.) (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (= (vstd!seq.impl&%0.skip.? A&. A& self! n!) (vstd!seq.Seq.subrange.? A&. A& self! n! (I (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type n! INT)) (has_type (vstd!seq.impl&%0.skip.? A&. A& self! n!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)))))
(declare-fun req%verismo!ptr.raw_ptr_s.impl&%7.trusted_split. (verismo!ptr.def_s.SnpPointsToRaw. Int) Bool)
(declare-const %%global_location_label%%62 Bool)
(declare-const %%global_location_label%%63 Bool)
(declare-const %%global_location_label%%64 Bool)
(assert (forall ((self! verismo!ptr.def_s.SnpPointsToRaw.) (len1! Int)) (! (= (req%verismo!ptr.raw_ptr_s.impl&%7.trusted_split. self! len1!) (and (=> %%global_location_label%%62 (verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))))) (=> %%global_location_label%%63 (<= len1! (verismo!ptr.raw_ptr_s.impl&%5.size.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))) (=> %%global_location_label%%64 (> (verismo!ptr.raw_ptr_s.impl&%5.size.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))) 0)))) :pattern ((req%verismo!ptr.raw_ptr_s.impl&%7.trusted_split. self! len1!)))))
(declare-fun ens%verismo!ptr.raw_ptr_s.impl&%7.trusted_split. (verismo!ptr.def_s.SnpPointsToRaw. Int tuple%2.) Bool)
(assert (forall ((self! verismo!ptr.def_s.SnpPointsToRaw.) (len1! Int) (res! tuple%2.)) (! (= (ens%verismo!ptr.raw_ptr_s.impl&%7.trusted_split. self! len1! res!) (and (has_type (Poly%tuple%2. res!) (TYPE%tuple%2. $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. $ TYPE%verismo!ptr.def_s.SnpPointsToRaw.)) (verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!))))) (Poly%tuple%2. (tuple%2./tuple%2 (I (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))) (I len1!)))) (verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!))))) (Poly%tuple%2. (tuple%2./tuple%2 (I (Add (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) len1!)) (I (nClip (Sub (verismo!ptr.raw_ptr_s.impl&%5.size.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))) len1!)))))) (= (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!)))))))) (= (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!)))))))) (ext_eq true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!))))))) (vstd!seq.Seq.subrange.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) (I 0) (I len1!))) (ext_eq true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!))))))) (vstd!seq.Seq.subrange.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) (I len1!) (I (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))))))))) :pattern ((ens%verismo!ptr.raw_ptr_s.impl&%7.trusted_split. self! len1! res!)))))
(declare-fun req%verismo!ptr.raw_ptr_s.impl&%7.trusted_join. (verismo!ptr.def_s.SnpPointsToRaw. verismo!ptr.def_s.SnpPointsToRaw.) Bool)
(declare-const %%global_location_label%%65 Bool)
(declare-const %%global_location_label%%66 Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(assert (forall ((self! verismo!ptr.def_s.SnpPointsToRaw.) (other! verismo!ptr.def_s.SnpPointsToRaw.)) (! (= (req%verismo!ptr.raw_ptr_s.impl&%7.trusted_join. self! other!) (and (=> %%global_location_label%%65 (= (I (Add (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))))) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))))))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. other!))))))))) (=> %%global_location_label%%66 (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))) (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. other!)))))) (=> %%global_location_label%%67 (verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))))) (=> %%global_location_label%%68 (verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. other!)))))))))) :pattern ((req%verismo!ptr.raw_ptr_s.impl&%7.trusted_join. self! other!)))))
(declare-fun ens%verismo!ptr.raw_ptr_s.impl&%7.trusted_join. (verismo!ptr.def_s.SnpPointsToRaw. verismo!ptr.def_s.SnpPointsToRaw. verismo!ptr.def_s.SnpPointsToRaw.) Bool)
(assert (forall ((self! verismo!ptr.def_s.SnpPointsToRaw.) (other! verismo!ptr.def_s.SnpPointsToRaw.) (res! verismo!ptr.def_s.SnpPointsToRaw.)) (! (= (ens%verismo!ptr.raw_ptr_s.impl&%7.trusted_join. self! other! res!) (and (= (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. res!))))) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))) (= (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. res!))))) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))) (= (verismo!ptr.raw_ptr_s.impl&%5.size.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. res!)))) (nClip (Add (verismo!ptr.raw_ptr_s.impl&%5.size.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))) (verismo!ptr.raw_ptr_s.impl&%5.size.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. other!))))))) (verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. res!))))))) (ext_eq true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. res!))))) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. other!))))))))) :pattern ((ens%verismo!ptr.raw_ptr_s.impl&%7.trusted_join. self! other! res!)))))
(declare-fun req%verismo!ptr.raw_ptr_s.impl&%7.tracked_to_pages. (verismo!ptr.def_s.SnpPointsToRaw.) Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(assert (forall ((self! verismo!ptr.def_s.SnpPointsToRaw.)) (! (= (req%verismo!ptr.raw_ptr_s.impl&%7.tracked_to_pages. self!) (and (=> %%global_location_label%%69 (= (EucMod (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))))) 4096) 0)) (=> %%global_location_label%%70 (= (EucMod (verismo!ptr.raw_ptr_s.impl&%5.size.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))) 4096) 0)) (=> %%global_location_label%%71 (verismo!ptr.raw_ptr_s.impl&%5.wf.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))))) :pattern ((req%verismo!ptr.raw_ptr_s.impl&%7.tracked_to_pages. self!)))))
(declare-fun ens%verismo!ptr.raw_ptr_s.impl&%7.tracked_to_pages. (verismo!ptr.def_s.SnpPointsToRaw. vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.) Bool)
(assert (forall ((self! verismo!ptr.def_s.SnpPointsToRaw.) (s! vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)) (! (= (ens%verismo!ptr.raw_ptr_s.impl&%7.tracked_to_pages. self! s!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (EucDiv (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))))) 4096) (%I i$)) (< (%I i$) (EucDiv (%I (I (Add (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))))) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))))))))) 4096))) (and (and (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. s!)) i$) (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. s!) i$)))) (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))) (verismo!ptr.raw_ptr_s.impl&%5.wf_range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. s!) i$))) (Poly%tuple%2. (tuple%2./tuple%2 (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i$) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?))))) (ext_eq true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. s!) i$))))) (vstd!seq.Seq.subrange.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) (I (Sub (%I (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i$)) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))))))) (I (Add (Sub (%I (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i$)) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))))))) verismo!arch.addr_s.def_s.PAGE_SIZE.?))))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. s!)) i$))))) :pattern ((ens%verismo!ptr.raw_ptr_s.impl&%7.tracked_to_pages. self! s!)))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_t.spec_mem_copy.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_t.spec_mem_copy.) (forall ((bytes! Poly) (dst_perm! Poly) (old_dst_perm! Poly)) (! (= (verismo!ptr.raw_ptr_t.spec_mem_copy.? bytes! dst_perm! old_dst_perm!) (and (and (and (and (and (= (verismo!ptr.raw_ptr_s.impl&%5.range.? dst_perm!) (verismo!ptr.raw_ptr_s.impl&%5.range.? old_dst_perm!)) (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. dst_perm!) (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. old_dst_perm!))) (verismo!ptr.raw_ptr_s.impl&%5.wf.? dst_perm!)) (=> (= (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) bytes!) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? dst_perm!)))))) (ext_eq true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? dst_perm!)) bytes!))) (=> (< (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) bytes!) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? dst_perm!)))))) (ext_eq true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? dst_perm!)) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) bytes! (vstd!seq.Seq.subrange.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? old_dst_perm!)) (I (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) bytes!)) (I (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? old_dst_perm!))))))))) (=> (> (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) bytes!) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? dst_perm!)))))) (ext_eq true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? dst_perm!)) (vstd!seq.Seq.subrange.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) bytes! (I 0) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? dst_perm!))))))))) :pattern ((verismo!ptr.raw_ptr_t.spec_mem_copy.? bytes! dst_perm! old_dst_perm!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_start.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_start.) (forall ((i! Poly) (dst_addr! Poly) (size! Poly)) (! (= (verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_start.? i! dst_addr! size!) (let ((start$ (Sub (%I (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i!)) (%I dst_addr!)))) (ite (< start$ (%I size!)) start$ (%I size!)))) :pattern ((verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_start.? i! dst_addr! size!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_end.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_end.) (forall ((i! Poly) (dst_addr! Poly) (size! Poly)) (! (= (verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_end.? i! dst_addr! size!) (let ((start$ (Sub (%I (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i!)) (%I dst_addr!)))) (let ((end$ (ite (> (Sub (%I (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT (I (Add (%I i!) 1)))) (%I dst_addr!)) (%I size!)) (%I size!) (Sub (%I (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT (I (Add (%I i!) 1)))) (%I dst_addr!))))) end$))) :pattern ((verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_end.? i! dst_addr! size!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_t.spec_mem_copy_page.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_t.spec_mem_copy_page.) (forall ((i! Poly) (dst_addr! Poly) (size! Poly) (bytes! Poly) (dst_perm! Poly) (old_dst_perm! Poly)) (! (= (verismo!ptr.raw_ptr_t.spec_mem_copy_page.? i! dst_addr! size! bytes! dst_perm! old_dst_perm!) (let ((start$ (verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_start.? i! dst_addr! size!))) (let ((end$ (verismo!ptr.raw_ptr_t.spec_mem_copy_onepage_end.? i! dst_addr! size!))) (verismo!ptr.raw_ptr_t.spec_mem_copy.? (vstd!seq.Seq.subrange.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) bytes! (I start$) (I end$)) dst_perm! old_dst_perm!)))) :pattern ((verismo!ptr.raw_ptr_t.spec_mem_copy_page.? i! dst_addr! size! bytes! dst_perm! old_dst_perm!))))))
(declare-fun req%verismo!ptr.raw_ptr_t.mem_copy_to_pages. (Int Int Int verismo!ptr.def_s.SnpPointsToRaw. vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.) Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(assert (forall ((src_addr! Int) (dst_addr! Int) (size! Int) (src_perm! verismo!ptr.def_s.SnpPointsToRaw.) (pre%dst_perm! vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)) (! (= (req%verismo!ptr.raw_ptr_t.mem_copy_to_pages. src_addr! dst_addr! size! src_perm! pre%dst_perm!) (and (=> %%global_location_label%%72 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I dst_addr!))) (%I i$)) (< (%I i$) (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I (Add dst_addr! size!)))))) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. pre%dst_perm!)) i$))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. pre%dst_perm!)) i$))))) (=> %%global_location_label%%73 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. pre%dst_perm!)) i$) (verismo!ptr.raw_ptr_s.impl&%5.wf_not_null.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. pre%dst_perm!) i$))) (Poly%tuple%2. (tuple%2./tuple%2 (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i$) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?)))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. pre%dst_perm!)) i$))))) (=> %%global_location_label%%74 (verismo!ptr.raw_ptr_s.impl&%5.wf_not_null.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. src_perm!))) (Poly%tuple%2. (tuple%2./tuple%2 (I src_addr!) (I size!))))) (=> %%global_location_label%%75 (= (EucMod dst_addr! verismo!arch.addr_s.def_s.PAGE_SIZE.?) 0)))) :pattern ((req%verismo!ptr.raw_ptr_t.mem_copy_to_pages. src_addr! dst_addr! size! src_perm! pre%dst_perm!)))))
(declare-fun ens%verismo!ptr.raw_ptr_t.mem_copy_to_pages. (Int Int Int verismo!ptr.def_s.SnpPointsToRaw. vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.) Bool)
(assert (forall ((src_addr! Int) (dst_addr! Int) (size! Int) (src_perm! verismo!ptr.def_s.SnpPointsToRaw.) (pre%dst_perm! vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.) (dst_perm! vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)) (! (= (ens%verismo!ptr.raw_ptr_t.mem_copy_to_pages. src_addr! dst_addr! size! src_perm! pre%dst_perm! dst_perm!) (and (ext_eq true (TYPE%vstd!set.Set. $ INT) (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. dst_perm!)) (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. pre%dst_perm!))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. dst_perm!)) i$) (verismo!ptr.raw_ptr_t.spec_mem_copy_page.? i$ (I dst_addr!) (I size!) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. src_perm!))))) (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. dst_perm!) i$))) (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. pre%dst_perm!) i$)))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. dst_perm!)) i$)))))) :pattern ((ens%verismo!ptr.raw_ptr_t.mem_copy_to_pages. src_addr! dst_addr! size! src_perm! pre%dst_perm! dst_perm!)))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%5.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%5.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 64) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%6.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%6.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 64) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 64) self!))))))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%5.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%5.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 64) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 64) self! vmpl!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!registers.msr_perm_s.impl&%1.wf.))
(assert (=> (fuel_bool fuel%verismo!registers.msr_perm_s.impl&%1.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!registers.msr_perm_s.impl&%1.wf.? T&. T& self!) (and (=> (verismo!registers.msr_perm_s.impl&%0.shared.? T&. T& self!) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& (verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& (verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!))))) :pattern ((verismo!registers.msr_perm_s.impl&%1.wf.? T&. T& self!))))))
(assert (forall ((cpu! Poly) (run! Poly) (vmpl! Poly) (count! Poly) (sent_ghcb_msrs! Poly) (sent_mem! Poly)) (! (=> (and (has_type cpu! NAT) (has_type run! BOOL) (has_type vmpl! NAT) (has_type count! NAT) (has_type sent_ghcb_msrs! (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT))) (has_type sent_mem! (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))) (has_type (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!)) TYPE%verismo!registers.core_perm_s.CoreMode.)) :pattern ((verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!)))))
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_cpu.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_cpu.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_cpu.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_cpu.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.impl&%0.spec_cpu.? self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_cpu.? self!)))))
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_run.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_run.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_run.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/run (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_run.? self!))))))
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_vmpl.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_vmpl.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_vmpl.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_vmpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.impl&%0.spec_vmpl.? self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_vmpl.? self!)))))
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_count.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_count.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_count.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/count (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_count.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.impl&%0.spec_count.? self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_count.? self!)))))
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_ghcb_msrs (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.? self!))))))
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_mem.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_mem.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_sent_mem.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_mem (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_sent_mem.? self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%48.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%48.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT self!))))))
(declare-fun ens%verismo!registers.core_perm_s.impl&%2.axiom_spec_new. (Int Bool Int Int vstd!seq.Seq<tuple%2<nat./nat.>.>. vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.) Bool)
(assert (forall ((cpu! Int) (run! Bool) (vmpl! Int) (count! Int) (sent_ghcb_msrs! vstd!seq.Seq<tuple%2<nat./nat.>.>.) (sent_mem! vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)) (! (= (ens%verismo!registers.core_perm_s.impl&%2.axiom_spec_new. cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!) (and (= (verismo!registers.core_perm_s.impl&%0.spec_cpu.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) cpu!) (= (verismo!registers.core_perm_s.impl&%0.spec_run.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) run!) (= (verismo!registers.core_perm_s.impl&%0.spec_vmpl.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) vmpl!) (= (verismo!registers.core_perm_s.impl&%0.spec_count.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) count!) (= (verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) sent_ghcb_msrs!) (= (verismo!registers.core_perm_s.impl&%0.spec_sent_mem.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) sent_mem!))) :pattern ((ens%verismo!registers.core_perm_s.impl&%2.axiom_spec_new. cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!)))))
(assert (forall ((cpu! Poly) (run! Poly) (vmpl! Poly) (count! Poly) (sent_ghcb_msrs! Poly) (sent_mem! Poly)) (! (=> (and (has_type cpu! NAT) (has_type run! BOOL) (has_type vmpl! NAT) (has_type count! NAT) (has_type sent_ghcb_msrs! (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT))) (has_type sent_mem! (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))) (and (and (and (and (and (= (verismo!registers.core_perm_s.impl&%0.spec_cpu.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%I cpu!)) (= (verismo!registers.core_perm_s.impl&%0.spec_run.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%B run!))) (= (verismo!registers.core_perm_s.impl&%0.spec_vmpl.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%I vmpl!))) (= (verismo!registers.core_perm_s.impl&%0.spec_count.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%I count!))) (= (verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!))) (= (verismo!registers.core_perm_s.impl&%0.spec_sent_mem.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) :pattern ((verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!)))))
(declare-fun req%verismo!registers.msr_perm_s.impl&%2.axiom_eq. (Dcr Type verismo!registers.msr_perm_s.RegisterPerm. verismo!registers.msr_perm_s.RegisterPerm.) Bool)
(declare-const %%global_location_label%%76 Bool)
(assert (forall ((T&. Dcr) (T& Type) (x! verismo!registers.msr_perm_s.RegisterPerm.) (y! verismo!registers.msr_perm_s.RegisterPerm.)) (! (= (req%verismo!registers.msr_perm_s.impl&%2.axiom_eq. T&. T& x! y!) (=> %%global_location_label%%76 (= (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& (Poly%verismo!registers.msr_perm_s.RegisterPerm. x!)) (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& (Poly%verismo!registers.msr_perm_s.RegisterPerm. y!))))) :pattern ((req%verismo!registers.msr_perm_s.impl&%2.axiom_eq. T&. T& x! y!)))))
(declare-fun ens%verismo!registers.msr_perm_s.impl&%2.axiom_eq. (Dcr Type verismo!registers.msr_perm_s.RegisterPerm. verismo!registers.msr_perm_s.RegisterPerm.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (x! verismo!registers.msr_perm_s.RegisterPerm.) (y! verismo!registers.msr_perm_s.RegisterPerm.)) (! (= (ens%verismo!registers.msr_perm_s.impl&%2.axiom_eq. T&. T& x! y!) (= x! y!)) :pattern ((ens%verismo!registers.msr_perm_s.impl&%2.axiom_eq. T&. T& x! y!)))))
(assert (forall ((T&. Dcr) (T& Type) (x! Poly) (y! Poly)) (! (=> (and (has_type x! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (has_type y! TYPE%verismo!registers.msr_perm_s.RegisterPerm.)) (=> (= (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& x!) (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& y!)) (= x! y!))) :pattern ((verismo!registers.msr_perm_s.impl&%2.view.? T&. T& x!) (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& y!)))))
(declare-fun ens%verismo!registers.msr_perm_s.impl&%2.axiom_wf. (Dcr Type verismo!registers.msr_perm_s.RegisterPerm.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!registers.msr_perm_s.RegisterPerm.)) (! (= (ens%verismo!registers.msr_perm_s.impl&%2.axiom_wf. T&. T& self!) (= (verismo!registers.msr_perm_s.impl&%2.wf.? (Poly%verismo!registers.msr_perm_s.RegisterPerm. self!)) (verismo!registers.msr_perm_s.impl&%1.wf.? T&. T& (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& (Poly%verismo!registers.msr_perm_s.RegisterPerm. self!)))))) :pattern ((ens%verismo!registers.msr_perm_s.impl&%2.axiom_wf. T&. T& self!)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (=> (and (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&)) (= (verismo!registers.msr_perm_s.impl&%2.wf.? self!) (verismo!registers.msr_perm_s.impl&%1.wf.? T&. T& (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!)))))) :pattern ((verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!)))))
(assert (forall ((read! Poly) (write! Poly) (user_exe! Poly) (kern_exe! Poly)) (! (=> (and (has_type read! (UINT 8)) (has_type write! (UINT 8)) (has_type user_exe! (UINT 8)) (has_type kern_exe! (UINT 8))) (has_type (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%2.spec_new.? read! write! user_exe! kern_exe!)) TYPE%verismo!security.mem.OSMemPermSpec.)) :pattern ((verismo!security.mem.impl&%2.spec_new.? read! write! user_exe! kern_exe!)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%0.spec_read.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%0.spec_read.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%0.spec_read.? self!) (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/read (%Poly%verismo!security.mem.OSMemPermSpec. self!))) :pattern ((verismo!security.mem.impl&%0.spec_read.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.mem.OSMemPermSpec.) (uInv 8 (verismo!security.mem.impl&%0.spec_read.? self!))) :pattern ((verismo!security.mem.impl&%0.spec_read.? self!)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%0.spec_write.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%0.spec_write.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%0.spec_write.? self!) (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/write (%Poly%verismo!security.mem.OSMemPermSpec. self!))) :pattern ((verismo!security.mem.impl&%0.spec_write.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.mem.OSMemPermSpec.) (uInv 8 (verismo!security.mem.impl&%0.spec_write.? self!))) :pattern ((verismo!security.mem.impl&%0.spec_write.? self!)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%0.spec_user_exe.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%0.spec_user_exe.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%0.spec_user_exe.? self!) (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/user_exe (%Poly%verismo!security.mem.OSMemPermSpec. self!))) :pattern ((verismo!security.mem.impl&%0.spec_user_exe.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.mem.OSMemPermSpec.) (uInv 8 (verismo!security.mem.impl&%0.spec_user_exe.? self!))) :pattern ((verismo!security.mem.impl&%0.spec_user_exe.? self!)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%0.spec_kern_exe.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%0.spec_kern_exe.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%0.spec_kern_exe.? self!) (verismo!security.mem.OSMemPermSpec./OSMemPermSpec/kern_exe (%Poly%verismo!security.mem.OSMemPermSpec. self!))) :pattern ((verismo!security.mem.impl&%0.spec_kern_exe.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.mem.OSMemPermSpec.) (uInv 8 (verismo!security.mem.impl&%0.spec_kern_exe.? self!))) :pattern ((verismo!security.mem.impl&%0.spec_kern_exe.? self!)))))
(declare-fun ens%verismo!security.mem.impl&%2.axiom_spec_new. (Int Int Int Int) Bool)
(assert (forall ((read! Int) (write! Int) (user_exe! Int) (kern_exe! Int)) (! (= (ens%verismo!security.mem.impl&%2.axiom_spec_new. read! write! user_exe! kern_exe!) (and (= (verismo!security.mem.impl&%0.spec_read.? (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%2.spec_new.? (I read!) (I write!) (I user_exe!) (I kern_exe!)))) read!) (= (verismo!security.mem.impl&%0.spec_write.? (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%2.spec_new.? (I read!) (I write!) (I user_exe!) (I kern_exe!)))) write!) (= (verismo!security.mem.impl&%0.spec_user_exe.? (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%2.spec_new.? (I read!) (I write!) (I user_exe!) (I kern_exe!)))) user_exe!) (= (verismo!security.mem.impl&%0.spec_kern_exe.? (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%2.spec_new.? (I read!) (I write!) (I user_exe!) (I kern_exe!)))) kern_exe!))) :pattern ((ens%verismo!security.mem.impl&%2.axiom_spec_new. read! write! user_exe! kern_exe!)))))
(assert (forall ((read! Poly) (write! Poly) (user_exe! Poly) (kern_exe! Poly)) (! (=> (and (has_type read! (UINT 8)) (has_type write! (UINT 8)) (has_type user_exe! (UINT 8)) (has_type kern_exe! (UINT 8))) (and (and (and (= (verismo!security.mem.impl&%0.spec_read.? (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%2.spec_new.? read! write! user_exe! kern_exe!))) (%I read!)) (= (verismo!security.mem.impl&%0.spec_write.? (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%2.spec_new.? read! write! user_exe! kern_exe!))) (%I write!))) (= (verismo!security.mem.impl&%0.spec_user_exe.? (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%2.spec_new.? read! write! user_exe! kern_exe!))) (%I user_exe!))) (= (verismo!security.mem.impl&%0.spec_kern_exe.? (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%2.spec_new.? read! write! user_exe! kern_exe!))) (%I kern_exe!)))) :pattern ((verismo!security.mem.impl&%2.spec_new.? read! write! user_exe! kern_exe!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 8)) (has_type (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%3.new.? val!)) TYPE%verismo!security.mem.OSMemPermSpec.)) :pattern ((verismo!security.mem.impl&%3.new.? val!)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%1.spec_set_kern_exe.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%1.spec_set_kern_exe.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!security.mem.impl&%1.spec_set_kern_exe.? self! val!) (verismo!security.mem.impl&%2.spec_new.? (I (verismo!security.mem.impl&%0.spec_read.? self!)) (I (verismo!security.mem.impl&%0.spec_write.? self!)) (I (verismo!security.mem.impl&%0.spec_user_exe.? self!)) val!)) :pattern ((verismo!security.mem.impl&%1.spec_set_kern_exe.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!security.mem.OSMemPermSpec.) (has_type val! (UINT 8))) (has_type (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%1.spec_set_kern_exe.? self! val!)) TYPE%verismo!security.mem.OSMemPermSpec.)) :pattern ((verismo!security.mem.impl&%1.spec_set_kern_exe.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%1.spec_set_user_exe.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%1.spec_set_user_exe.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!security.mem.impl&%1.spec_set_user_exe.? self! val!) (verismo!security.mem.impl&%2.spec_new.? (I (verismo!security.mem.impl&%0.spec_read.? self!)) (I (verismo!security.mem.impl&%0.spec_write.? self!)) val! (I (verismo!security.mem.impl&%0.spec_kern_exe.? self!)))) :pattern ((verismo!security.mem.impl&%1.spec_set_user_exe.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!security.mem.OSMemPermSpec.) (has_type val! (UINT 8))) (has_type (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%1.spec_set_user_exe.? self! val!)) TYPE%verismo!security.mem.OSMemPermSpec.)) :pattern ((verismo!security.mem.impl&%1.spec_set_user_exe.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%1.spec_set_write.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%1.spec_set_write.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!security.mem.impl&%1.spec_set_write.? self! val!) (verismo!security.mem.impl&%2.spec_new.? (I (verismo!security.mem.impl&%0.spec_read.? self!)) val! (I (verismo!security.mem.impl&%0.spec_user_exe.? self!)) (I (verismo!security.mem.impl&%0.spec_kern_exe.? self!)))) :pattern ((verismo!security.mem.impl&%1.spec_set_write.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!security.mem.OSMemPermSpec.) (has_type val! (UINT 8))) (has_type (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%1.spec_set_write.? self! val!)) TYPE%verismo!security.mem.OSMemPermSpec.)) :pattern ((verismo!security.mem.impl&%1.spec_set_write.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%1.spec_set_read.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%1.spec_set_read.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!security.mem.impl&%1.spec_set_read.? self! val!) (verismo!security.mem.impl&%2.spec_new.? val! (I (verismo!security.mem.impl&%0.spec_write.? self!)) (I (verismo!security.mem.impl&%0.spec_user_exe.? self!)) (I (verismo!security.mem.impl&%0.spec_kern_exe.? self!)))) :pattern ((verismo!security.mem.impl&%1.spec_set_read.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!security.mem.OSMemPermSpec.) (has_type val! (UINT 8))) (has_type (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%1.spec_set_read.? self! val!)) TYPE%verismo!security.mem.OSMemPermSpec.)) :pattern ((verismo!security.mem.impl&%1.spec_set_read.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%16.spec_read.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%16.spec_read.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%16.spec_read.? self!) (let ((mask$ (uClip 8 1))) (uClip 8 (uintand 8 (I (uClip 8 (uintshr 8 (I (uClip 8 (verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. self!)))) (I (uClip 8 0))))) (I mask$))))) :pattern ((verismo!security.mem.impl&%16.spec_read.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.mem.OSMemPerm.) (uInv 8 (verismo!security.mem.impl&%16.spec_read.? self!))) :pattern ((verismo!security.mem.impl&%16.spec_read.? self!)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%16.spec_write.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%16.spec_write.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%16.spec_write.? self!) (let ((mask$ (uClip 8 1))) (uClip 8 (uintand 8 (I (uClip 8 (uintshr 8 (I (uClip 8 (verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. self!)))) (I (uClip 8 1))))) (I mask$))))) :pattern ((verismo!security.mem.impl&%16.spec_write.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.mem.OSMemPerm.) (uInv 8 (verismo!security.mem.impl&%16.spec_write.? self!))) :pattern ((verismo!security.mem.impl&%16.spec_write.? self!)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%16.spec_user_exe.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%16.spec_user_exe.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%16.spec_user_exe.? self!) (let ((mask$ (uClip 8 1))) (uClip 8 (uintand 8 (I (uClip 8 (uintshr 8 (I (uClip 8 (verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. self!)))) (I (uClip 8 2))))) (I mask$))))) :pattern ((verismo!security.mem.impl&%16.spec_user_exe.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.mem.OSMemPerm.) (uInv 8 (verismo!security.mem.impl&%16.spec_user_exe.? self!))) :pattern ((verismo!security.mem.impl&%16.spec_user_exe.? self!)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%16.spec_kern_exe.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%16.spec_kern_exe.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%16.spec_kern_exe.? self!) (let ((mask$ (uClip 8 1))) (uClip 8 (uintand 8 (I (uClip 8 (uintshr 8 (I (uClip 8 (verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. self!)))) (I (uClip 8 3))))) (I mask$))))) :pattern ((verismo!security.mem.impl&%16.spec_kern_exe.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.mem.OSMemPerm.) (uInv 8 (verismo!security.mem.impl&%16.spec_kern_exe.? self!))) :pattern ((verismo!security.mem.impl&%16.spec_kern_exe.? self!)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%16.view.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%16.view.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%16.view.? self!) (verismo!security.mem.impl&%1.spec_set_kern_exe.? (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%1.spec_set_user_exe.? (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%1.spec_set_write.? (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%1.spec_set_read.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!security.mem.OSMemPermSpec.) (I (uClip 8 (verismo!security.mem.impl&%16.spec_read.? self!))))) (I (uClip 8 (verismo!security.mem.impl&%16.spec_write.? self!))))) (I (uClip 8 (verismo!security.mem.impl&%16.spec_user_exe.? self!))))) (I (uClip 8 (verismo!security.mem.impl&%16.spec_kern_exe.? self!))))) :pattern ((verismo!security.mem.impl&%16.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.mem.OSMemPerm.) (has_type (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%16.view.? self!)) TYPE%verismo!security.mem.OSMemPermSpec.)) :pattern ((verismo!security.mem.impl&%16.view.? self!)))))
(declare-fun ens%verismo!security.mem.impl&%3.axiom_new. (verismo!security.mem.OSMemPerm.) Bool)
(assert (forall ((val! verismo!security.mem.OSMemPerm.)) (! (= (ens%verismo!security.mem.impl&%3.axiom_new. val!) (= (verismo!security.mem.impl&%3.new.? (I (verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. (Poly%verismo!security.mem.OSMemPerm. val!))))) (verismo!security.mem.impl&%16.view.? (Poly%verismo!security.mem.OSMemPerm. val!)))) :pattern ((ens%verismo!security.mem.impl&%3.axiom_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!security.mem.OSMemPerm.) (= (verismo!security.mem.impl&%3.new.? (I (verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. val!)))) (verismo!security.mem.impl&%16.view.? val!))) :pattern ((verismo!security.mem.impl&%3.new.? (I (verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. val!)))) (verismo!security.mem.impl&%16.view.? val!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.mem.OSMemPermSpec.) (has_type (Poly%verismo!security.mem.OSMemPerm. (verismo!security.mem.impl&%3.to_value.? self!)) TYPE%verismo!security.mem.OSMemPerm.)) :pattern ((verismo!security.mem.impl&%3.to_value.? self!)))))
(declare-fun ens%verismo!security.mem.impl&%3.axiom_into. (verismo!security.mem.OSMemPermSpec.) Bool)
(assert (forall ((self! verismo!security.mem.OSMemPermSpec.)) (! (= (ens%verismo!security.mem.impl&%3.axiom_into. self!) (= (verismo!security.mem.impl&%16.view.? (Poly%verismo!security.mem.OSMemPerm. (verismo!security.mem.impl&%3.to_value.? (Poly%verismo!security.mem.OSMemPermSpec. self!)))) self!)) :pattern ((ens%verismo!security.mem.impl&%3.axiom_into. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.mem.OSMemPermSpec.) (= (verismo!security.mem.impl&%16.view.? (Poly%verismo!security.mem.OSMemPerm. (verismo!security.mem.impl&%3.to_value.? self!))) (%Poly%verismo!security.mem.OSMemPermSpec. self!))) :pattern ((verismo!security.mem.impl&%3.to_value.? self!)))))
(declare-fun ens%verismo!security.mem.impl&%15.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!security.mem.impl&%15.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!security.mem.OSMemPerm. self! ret!) (= self! ret!))) :pattern ((ens%verismo!security.mem.impl&%15.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!security.mem.OSMemPerm.)) (has_type ret$ TYPE%verismo!security.mem.OSMemPerm.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!security.mem.OSMemPerm.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!security.mem.OSMemPerm.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!security.mem.OSMemPerm. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= self$ (%Poly%verismo!security.mem.OSMemPerm. ret$))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!security.mem.OSMemPerm.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!security.mem.OSMemPerm.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%16.inv.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%16.inv.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 7)))) :pattern ((verismo!security.mem.impl&%16.inv.? self!))))))
(declare-fun ens%verismo!security.mem.impl&%16.axiom_inv. (verismo!security.mem.OSMemPerm.) Bool)
(assert (forall ((self! verismo!security.mem.OSMemPerm.)) (! (= (ens%verismo!security.mem.impl&%16.axiom_inv. self!) (and (verismo!security.mem.impl&%16.inv.? (Poly%verismo!security.mem.OSMemPerm. self!)) (let ((tmp%%$ (verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. (Poly%verismo!security.mem.OSMemPerm. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 7))))) :pattern ((ens%verismo!security.mem.impl&%16.axiom_inv. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.mem.OSMemPerm.) (and (verismo!security.mem.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 7))))) :pattern ((verismo!security.mem.impl&%16.inv.? self!) (verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.secret.SnpSecretsPageLayout.) (has_type (verismo!security.secret.impl&%0.spec_gosvw.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)))) :pattern ((verismo!security.secret.impl&%0.spec_gosvw.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.secret.SnpSecretsPageLayout.) (has_type (verismo!security.secret.impl&%0.spec_vmpck0.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)))) :pattern ((verismo!security.secret.impl&%0.spec_vmpck0.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.secret.SnpSecretsPageLayout.) (has_type (verismo!security.secret.impl&%0.spec_vmpck1.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)))) :pattern ((verismo!security.secret.impl&%0.spec_vmpck1.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.secret.SnpSecretsPageLayout.) (has_type (verismo!security.secret.impl&%0.spec_vmpck2.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)))) :pattern ((verismo!security.secret.impl&%0.spec_vmpck2.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.secret.SnpSecretsPageLayout.) (has_type (verismo!security.secret.impl&%0.spec_vmpck3.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)))) :pattern ((verismo!security.secret.impl&%0.spec_vmpck3.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.secret.SnpSecretsPageLayout.) (has_type (verismo!security.secret.impl&%0.spec_reserved_3.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3840)))) :pattern ((verismo!security.secret.impl&%0.spec_reserved_3.? self!)))))
(declare-fun ens%verismo!security.secret.impl&%2.axiom_spec_new. (verismo!tspec.security.sectype.SecType<u32./tuple%0.>. verismo!tspec.security.sectype.SecType<u32./tuple%0.>. verismo!tspec.security.sectype.SecType<u32./tuple%0.>. verismo!tspec.security.sectype.SecType<u32./tuple%0.>. Poly Poly Poly Poly Poly verismo!security.SecretsOSArea. Poly) Bool)
(assert (forall ((version! verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (imien! verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (fms! verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (reserved_2! verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (gosvw! Poly) (vmpck0! Poly) (vmpck1! Poly) (vmpck2! Poly) (vmpck3! Poly) (os_area! verismo!security.SecretsOSArea.) (reserved_3! Poly)) (! (= (ens%verismo!security.secret.impl&%2.axiom_spec_new. version! imien! fms! reserved_2! gosvw! vmpck0! vmpck1! vmpck2! vmpck3! os_area! reserved_3!) (and (= (verismo!security.secret.impl&%0.spec_version.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. imien!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. fms!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved_2!) gosvw! vmpck0! vmpck1! vmpck2! vmpck3! (Poly%verismo!security.SecretsOSArea. os_area!) reserved_3!))) version!) (= (verismo!security.secret.impl&%0.spec_imien.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. imien!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. fms!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved_2!) gosvw! vmpck0! vmpck1! vmpck2! vmpck3! (Poly%verismo!security.SecretsOSArea. os_area!) reserved_3!))) imien!) (= (verismo!security.secret.impl&%0.spec_fms.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. imien!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. fms!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved_2!) gosvw! vmpck0! vmpck1! vmpck2! vmpck3! (Poly%verismo!security.SecretsOSArea. os_area!) reserved_3!))) fms!) (= (verismo!security.secret.impl&%0.spec_reserved_2.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. imien!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. fms!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved_2!) gosvw! vmpck0! vmpck1! vmpck2! vmpck3! (Poly%verismo!security.SecretsOSArea. os_area!) reserved_3!))) reserved_2!) (= (verismo!security.secret.impl&%0.spec_gosvw.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. imien!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. fms!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved_2!) gosvw! vmpck0! vmpck1! vmpck2! vmpck3! (Poly%verismo!security.SecretsOSArea. os_area!) reserved_3!))) gosvw!) (= (verismo!security.secret.impl&%0.spec_vmpck0.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. imien!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. fms!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved_2!) gosvw! vmpck0! vmpck1! vmpck2! vmpck3! (Poly%verismo!security.SecretsOSArea. os_area!) reserved_3!))) vmpck0!) (= (verismo!security.secret.impl&%0.spec_vmpck1.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. imien!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. fms!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved_2!) gosvw! vmpck0! vmpck1! vmpck2! vmpck3! (Poly%verismo!security.SecretsOSArea. os_area!) reserved_3!))) vmpck1!) (= (verismo!security.secret.impl&%0.spec_vmpck2.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. imien!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. fms!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved_2!) gosvw! vmpck0! vmpck1! vmpck2! vmpck3! (Poly%verismo!security.SecretsOSArea. os_area!) reserved_3!))) vmpck2!) (= (verismo!security.secret.impl&%0.spec_vmpck3.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. imien!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. fms!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved_2!) gosvw! vmpck0! vmpck1! vmpck2! vmpck3! (Poly%verismo!security.SecretsOSArea. os_area!) reserved_3!))) vmpck3!) (= (verismo!security.secret.impl&%0.spec_os_area.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. imien!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. fms!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved_2!) gosvw! vmpck0! vmpck1! vmpck2! vmpck3! (Poly%verismo!security.SecretsOSArea. os_area!) reserved_3!))) os_area!) (= (verismo!security.secret.impl&%0.spec_reserved_3.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. imien!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. fms!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved_2!) gosvw! vmpck0! vmpck1! vmpck2! vmpck3! (Poly%verismo!security.SecretsOSArea. os_area!) reserved_3!))) reserved_3!))) :pattern ((ens%verismo!security.secret.impl&%2.axiom_spec_new. version! imien! fms! reserved_2! gosvw! vmpck0! vmpck1! vmpck2! vmpck3! os_area! reserved_3!)))))
(assert (forall ((version! Poly) (imien! Poly) (fms! Poly) (reserved_2! Poly) (gosvw! Poly) (vmpck0! Poly) (vmpck1! Poly) (vmpck2! Poly) (vmpck3! Poly) (os_area! Poly) (reserved_3! Poly)) (! (=> (and (has_type version! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)) (has_type imien! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)) (has_type fms! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)) (has_type reserved_2! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)) (has_type gosvw! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16))) (has_type vmpck0! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type vmpck1! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type vmpck2! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type vmpck3! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type os_area! TYPE%verismo!security.SecretsOSArea.) (has_type reserved_3! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3840)))) (and (and (and (and (and (and (and (and (and (and (= (verismo!security.secret.impl&%0.spec_version.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? version! imien! fms! reserved_2! gosvw! vmpck0! vmpck1! vmpck2! vmpck3! os_area! reserved_3!))) (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. version!)) (= (verismo!security.secret.impl&%0.spec_imien.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? version! imien! fms! reserved_2! gosvw! vmpck0! vmpck1! vmpck2! vmpck3! os_area! reserved_3!))) (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. imien!))) (= (verismo!security.secret.impl&%0.spec_fms.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? version! imien! fms! reserved_2! gosvw! vmpck0! vmpck1! vmpck2! vmpck3! os_area! reserved_3!))) (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. fms!))) (= (verismo!security.secret.impl&%0.spec_reserved_2.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? version! imien! fms! reserved_2! gosvw! vmpck0! vmpck1! vmpck2! vmpck3! os_area! reserved_3!))) (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved_2!))) (= (verismo!security.secret.impl&%0.spec_gosvw.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? version! imien! fms! reserved_2! gosvw! vmpck0! vmpck1! vmpck2! vmpck3! os_area! reserved_3!))) gosvw!)) (= (verismo!security.secret.impl&%0.spec_vmpck0.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? version! imien! fms! reserved_2! gosvw! vmpck0! vmpck1! vmpck2! vmpck3! os_area! reserved_3!))) vmpck0!)) (= (verismo!security.secret.impl&%0.spec_vmpck1.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? version! imien! fms! reserved_2! gosvw! vmpck0! vmpck1! vmpck2! vmpck3! os_area! reserved_3!))) vmpck1!)) (= (verismo!security.secret.impl&%0.spec_vmpck2.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? version! imien! fms! reserved_2! gosvw! vmpck0! vmpck1! vmpck2! vmpck3! os_area! reserved_3!))) vmpck2!)) (= (verismo!security.secret.impl&%0.spec_vmpck3.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? version! imien! fms! reserved_2! gosvw! vmpck0! vmpck1! vmpck2! vmpck3! os_area! reserved_3!))) vmpck3!)) (= (verismo!security.secret.impl&%0.spec_os_area.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? version! imien! fms! reserved_2! gosvw! vmpck0! vmpck1! vmpck2! vmpck3! os_area! reserved_3!))) (%Poly%verismo!security.SecretsOSArea. os_area!))) (= (verismo!security.secret.impl&%0.spec_reserved_3.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!security.secret.impl&%2.spec_new.? version! imien! fms! reserved_2! gosvw! vmpck0! vmpck1! vmpck2! vmpck3! os_area! reserved_3!))) reserved_3!))) :pattern ((verismo!security.secret.impl&%2.spec_new.? version! imien! fms! reserved_2! gosvw! vmpck0! vmpck1! vmpck2! vmpck3! os_area! reserved_3!)))))
(declare-fun ens%verismo!security.secret.impl&%4.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!security.secret.impl&%4.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!security.secret.SnpSecretsPageLayout. self! ret!) (= ret! self!))) :pattern ((ens%verismo!security.secret.impl&%4.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!security.secret.SnpSecretsPageLayout.)) (has_type ret$ TYPE%verismo!security.secret.SnpSecretsPageLayout.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!security.secret.SnpSecretsPageLayout.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!security.secret.SnpSecretsPageLayout.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!security.secret.SnpSecretsPageLayout. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%verismo!security.secret.SnpSecretsPageLayout. ret$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!security.secret.SnpSecretsPageLayout.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!security.secret.SnpSecretsPageLayout.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.secret.SnpGuestMsgHdr.) (has_type (verismo!security.secret.impl&%12.spec_authtag.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)))) :pattern ((verismo!security.secret.impl&%12.spec_authtag.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.secret.SnpGuestMsgHdr.) (has_type (verismo!security.secret.impl&%12.spec_reserved3.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 35)))) :pattern ((verismo!security.secret.impl&%12.spec_reserved3.? self!)))))
(declare-fun ens%verismo!security.secret.impl&%14.axiom_spec_new. (Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u8./tuple%0.>. verismo!tspec.security.sectype.SecType<u8./tuple%0.>. verismo!tspec.security.sectype.SecType<u16./tuple%0.>. verismo!tspec.security.sectype.SecType<u8./tuple%0.>. verismo!tspec.security.sectype.SecType<u8./tuple%0.>. verismo!tspec.security.sectype.SecType<u16./tuple%0.>. verismo!tspec.security.sectype.SecType<u32./tuple%0.>. verismo!tspec.security.sectype.SecType<u8./tuple%0.>. Poly) Bool)
(assert (forall ((authtag! Poly) (msg_seqno! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved1! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (algo! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (hdr_version! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (hdr_sz! verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (msg_type! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (msg_version! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (msg_sz! verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (reserved2! verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (msg_vmpck! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (reserved3! Poly)) (! (= (ens%verismo!security.secret.impl&%14.axiom_spec_new. authtag! msg_seqno! reserved1! algo! hdr_version! hdr_sz! msg_type! msg_version! msg_sz! reserved2! msg_vmpck! reserved3!) (and (= (verismo!security.secret.impl&%12.spec_authtag.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. msg_seqno!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. reserved1!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. algo!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. hdr_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. hdr_sz!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_type!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. msg_sz!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved2!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_vmpck!) reserved3!))) authtag!) (= (verismo!security.secret.impl&%12.spec_msg_seqno.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. msg_seqno!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. reserved1!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. algo!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. hdr_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. hdr_sz!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_type!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. msg_sz!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved2!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_vmpck!) reserved3!))) msg_seqno!) (= (verismo!security.secret.impl&%12.spec_reserved1.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. msg_seqno!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. reserved1!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. algo!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. hdr_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. hdr_sz!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_type!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. msg_sz!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved2!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_vmpck!) reserved3!))) reserved1!) (= (verismo!security.secret.impl&%12.spec_algo.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. msg_seqno!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. reserved1!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. algo!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. hdr_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. hdr_sz!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_type!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. msg_sz!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved2!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_vmpck!) reserved3!))) algo!) (= (verismo!security.secret.impl&%12.spec_hdr_version.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. msg_seqno!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. reserved1!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. algo!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. hdr_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. hdr_sz!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_type!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. msg_sz!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved2!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_vmpck!) reserved3!))) hdr_version!) (= (verismo!security.secret.impl&%12.spec_hdr_sz.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. msg_seqno!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. reserved1!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. algo!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. hdr_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. hdr_sz!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_type!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. msg_sz!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved2!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_vmpck!) reserved3!))) hdr_sz!) (= (verismo!security.secret.impl&%12.spec_msg_type.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. msg_seqno!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. reserved1!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. algo!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. hdr_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. hdr_sz!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_type!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. msg_sz!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved2!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_vmpck!) reserved3!))) msg_type!) (= (verismo!security.secret.impl&%12.spec_msg_version.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. msg_seqno!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. reserved1!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. algo!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. hdr_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. hdr_sz!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_type!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. msg_sz!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved2!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_vmpck!) reserved3!))) msg_version!) (= (verismo!security.secret.impl&%12.spec_msg_sz.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. msg_seqno!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. reserved1!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. algo!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. hdr_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. hdr_sz!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_type!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. msg_sz!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved2!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_vmpck!) reserved3!))) msg_sz!) (= (verismo!security.secret.impl&%12.spec_reserved2.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. msg_seqno!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. reserved1!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. algo!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. hdr_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. hdr_sz!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_type!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. msg_sz!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved2!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_vmpck!) reserved3!))) reserved2!) (= (verismo!security.secret.impl&%12.spec_msg_vmpck.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. msg_seqno!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. reserved1!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. algo!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. hdr_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. hdr_sz!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_type!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. msg_sz!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved2!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_vmpck!) reserved3!))) msg_vmpck!) (= (verismo!security.secret.impl&%12.spec_reserved3.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. msg_seqno!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. reserved1!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. algo!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. hdr_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. hdr_sz!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_type!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_version!) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. msg_sz!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved2!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_vmpck!) reserved3!))) reserved3!))) :pattern ((ens%verismo!security.secret.impl&%14.axiom_spec_new. authtag! msg_seqno! reserved1! algo! hdr_version! hdr_sz! msg_type! msg_version! msg_sz! reserved2! msg_vmpck! reserved3!)))))
(assert (forall ((authtag! Poly) (msg_seqno! Poly) (reserved1! Poly) (algo! Poly) (hdr_version! Poly) (hdr_sz! Poly) (msg_type! Poly) (msg_version! Poly) (msg_sz! Poly) (reserved2! Poly) (msg_vmpck! Poly) (reserved3! Poly)) (! (=> (and (has_type authtag! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type msg_seqno! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved1! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type algo! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type hdr_version! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type hdr_sz! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.)) (has_type msg_type! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type msg_version! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type msg_sz! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.)) (has_type reserved2! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)) (has_type msg_vmpck! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type reserved3! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 35)))) (and (and (and (and (and (and (and (and (and (and (and (= (verismo!security.secret.impl&%12.spec_authtag.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! msg_seqno! reserved1! algo! hdr_version! hdr_sz! msg_type! msg_version! msg_sz! reserved2! msg_vmpck! reserved3!))) authtag!) (= (verismo!security.secret.impl&%12.spec_msg_seqno.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! msg_seqno! reserved1! algo! hdr_version! hdr_sz! msg_type! msg_version! msg_sz! reserved2! msg_vmpck! reserved3!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. msg_seqno!))) (= (verismo!security.secret.impl&%12.spec_reserved1.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! msg_seqno! reserved1! algo! hdr_version! hdr_sz! msg_type! msg_version! msg_sz! reserved2! msg_vmpck! reserved3!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. reserved1!))) (= (verismo!security.secret.impl&%12.spec_algo.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! msg_seqno! reserved1! algo! hdr_version! hdr_sz! msg_type! msg_version! msg_sz! reserved2! msg_vmpck! reserved3!))) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. algo!))) (= (verismo!security.secret.impl&%12.spec_hdr_version.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! msg_seqno! reserved1! algo! hdr_version! hdr_sz! msg_type! msg_version! msg_sz! reserved2! msg_vmpck! reserved3!))) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. hdr_version!))) (= (verismo!security.secret.impl&%12.spec_hdr_sz.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! msg_seqno! reserved1! algo! hdr_version! hdr_sz! msg_type! msg_version! msg_sz! reserved2! msg_vmpck! reserved3!))) (%Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. hdr_sz!))) (= (verismo!security.secret.impl&%12.spec_msg_type.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! msg_seqno! reserved1! algo! hdr_version! hdr_sz! msg_type! msg_version! msg_sz! reserved2! msg_vmpck! reserved3!))) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_type!))) (= (verismo!security.secret.impl&%12.spec_msg_version.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! msg_seqno! reserved1! algo! hdr_version! hdr_sz! msg_type! msg_version! msg_sz! reserved2! msg_vmpck! reserved3!))) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_version!))) (= (verismo!security.secret.impl&%12.spec_msg_sz.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! msg_seqno! reserved1! algo! hdr_version! hdr_sz! msg_type! msg_version! msg_sz! reserved2! msg_vmpck! reserved3!))) (%Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. msg_sz!))) (= (verismo!security.secret.impl&%12.spec_reserved2.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! msg_seqno! reserved1! algo! hdr_version! hdr_sz! msg_type! msg_version! msg_sz! reserved2! msg_vmpck! reserved3!))) (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. reserved2!))) (= (verismo!security.secret.impl&%12.spec_msg_vmpck.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! msg_seqno! reserved1! algo! hdr_version! hdr_sz! msg_type! msg_version! msg_sz! reserved2! msg_vmpck! reserved3!))) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. msg_vmpck!))) (= (verismo!security.secret.impl&%12.spec_reserved3.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.secret.impl&%14.spec_new.? authtag! msg_seqno! reserved1! algo! hdr_version! hdr_sz! msg_type! msg_version! msg_sz! reserved2! msg_vmpck! reserved3!))) reserved3!))) :pattern ((verismo!security.secret.impl&%14.spec_new.? authtag! msg_seqno! reserved1! algo! hdr_version! hdr_sz! msg_type! msg_version! msg_sz! reserved2! msg_vmpck! reserved3!)))))
(declare-fun ens%verismo!security.secret.impl&%15.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!security.secret.impl&%15.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!security.secret.SnpGuestMsgHdr. self! ret!) (= ret! self!))) :pattern ((ens%verismo!security.secret.impl&%15.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!security.secret.SnpGuestMsgHdr.)) (has_type ret$ TYPE%verismo!security.secret.SnpGuestMsgHdr.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!security.secret.SnpGuestMsgHdr.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!security.secret.SnpGuestMsgHdr.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!security.secret.SnpGuestMsgHdr. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%verismo!security.secret.SnpGuestMsgHdr. ret$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!security.secret.SnpGuestMsgHdr.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!security.secret.SnpGuestMsgHdr.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%21.spec_authtag_offset.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%21.spec_authtag_offset.) (forall ((no%param Poly)) (! (= (verismo!security.secret.impl&%21.spec_authtag_offset.? no%param) 0) :pattern ((verismo!security.secret.impl&%21.spec_authtag_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!security.secret.impl&%21.spec_authtag_offset.? no%param))) :pattern ((verismo!security.secret.impl&%21.spec_authtag_offset.? no%param)))))
(declare-fun ens%verismo!security.secret.impl&%21.axiom_field_authtag. (verismo!security.secret.SnpGuestMsgHdr.) Bool)
(assert (forall ((self! verismo!security.secret.SnpGuestMsgHdr.)) (! (= (ens%verismo!security.secret.impl&%21.axiom_field_authtag. self!) (= (verismo!security.secret.impl&%12.spec_authtag.? (Poly%verismo!security.secret.SnpGuestMsgHdr. self!)) (verismo!tspec.cast.field_at.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)) (Poly%verismo!security.secret.SnpGuestMsgHdr. self!) (I (verismo!security.secret.impl&%21.spec_authtag_offset.? (I 0)))))) :pattern ((ens%verismo!security.secret.impl&%21.axiom_field_authtag. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.secret.SnpGuestMsgHdr.) (= (verismo!security.secret.impl&%12.spec_authtag.? self!) (verismo!tspec.cast.field_at.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)) self! (I (verismo!security.secret.impl&%21.spec_authtag_offset.? (I 0)))))) :pattern ((verismo!security.secret.impl&%12.spec_authtag.? self!)))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%21.spec_algo_offset.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%21.spec_algo_offset.) (forall ((no%param Poly)) (! (= (verismo!security.secret.impl&%21.spec_algo_offset.? no%param) (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))) :pattern ((verismo!security.secret.impl&%21.spec_algo_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!security.secret.impl&%21.spec_algo_offset.? no%param))) :pattern ((verismo!security.secret.impl&%21.spec_algo_offset.? no%param)))))
(declare-fun ens%verismo!security.secret.impl&%21.axiom_field_algo. (verismo!security.secret.SnpGuestMsgHdr.) Bool)
(assert (forall ((self! verismo!security.secret.SnpGuestMsgHdr.)) (! (= (ens%verismo!security.secret.impl&%21.axiom_field_algo. self!) (= (verismo!security.secret.impl&%12.spec_algo.? (Poly%verismo!security.secret.SnpGuestMsgHdr. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!security.secret.SnpGuestMsgHdr. self!) (I (verismo!security.secret.impl&%21.spec_algo_offset.? (I 0))))))) :pattern ((ens%verismo!security.secret.impl&%21.axiom_field_algo. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.secret.SnpGuestMsgHdr.) (= (verismo!security.secret.impl&%12.spec_algo.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! (I (verismo!security.secret.impl&%21.spec_algo_offset.? (I 0))))))) :pattern ((verismo!security.secret.impl&%12.spec_algo.? self!)))))
(declare-fun ens%verismo!snp.cpuid.impl&%0.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!snp.cpuid.impl&%0.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!snp.cpuid.RegABCD. self! ret!) (= ret! self!))) :pattern ((ens%verismo!snp.cpuid.impl&%0.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpuid.RegABCD.)) (has_type ret$ TYPE%verismo!snp.cpuid.RegABCD.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!snp.cpuid.RegABCD.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpuid.RegABCD.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!snp.cpuid.RegABCD. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%verismo!snp.cpuid.RegABCD. ret$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!snp.cpuid.RegABCD.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpuid.RegABCD.) (F fndef_singleton) tmp%%$ ret$)))))
(declare-fun ens%verismo!snp.cpuid.impl&%9.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!snp.cpuid.impl&%9.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!snp.cpuid.SnpCpuidFn. self! ret!) (= ret! self!))) :pattern ((ens%verismo!snp.cpuid.impl&%9.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpuid.SnpCpuidFn.)) (has_type ret$ TYPE%verismo!snp.cpuid.SnpCpuidFn.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!snp.cpuid.SnpCpuidFn.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpuid.SnpCpuidFn.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!snp.cpuid.SnpCpuidFn. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%verismo!snp.cpuid.SnpCpuidFn. ret$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!snp.cpuid.SnpCpuidFn.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpuid.SnpCpuidFn.) (F fndef_singleton) tmp%%$ ret$)))))
(declare-fun ens%verismo!snp.cpuid.impl&%18.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!snp.cpuid.impl&%18.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!snp.cpuid.SnpCpuidTable. self! ret!) (= ret! self!))) :pattern ((ens%verismo!snp.cpuid.impl&%18.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpuid.SnpCpuidTable.)) (has_type ret$ TYPE%verismo!snp.cpuid.SnpCpuidTable.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!snp.cpuid.SnpCpuidTable.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpuid.SnpCpuidTable.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!snp.cpuid.SnpCpuidTable. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%verismo!snp.cpuid.SnpCpuidTable. ret$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!snp.cpuid.SnpCpuidTable.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!snp.cpuid.SnpCpuidTable.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%588.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%588.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%589.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%589.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(declare-fun ens%core!mem.size_of. (Dcr Type Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (size! Int)) (! (= (ens%core!mem.size_of. T&. T& size!) (and (uInv SZ size!) (%B (B (= (I size!) (I (verismo!tspec.size_s.spec_size.? T&. T&))))))) :pattern ((ens%core!mem.size_of. T&. T& size!)))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!vbox.vbox.spec_box_size.? no%param))) :pattern ((verismo!vbox.vbox.spec_box_size.? no%param)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!vbox.vbox.VBox. T&. T&)) (has_type (verismo!vbox.vbox.impl&%6.view.? T&. T& self!) T&)) :pattern ((verismo!vbox.vbox.impl&%6.view.? T&. T& self!)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!vbox.vbox.VBox. T&. T&)) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!vbox.vbox.impl&%6.snp.? T&. T& self!)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!vbox.vbox.impl&%6.snp.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%27.ensures_read.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%27.ensures_read.) (forall ((T&. Dcr) (T& Type) (self! Poly) (val! Poly) (ret! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%27.ensures_read.? T&. T& self! val! ret!) (and (and (and (and (and (=> (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. val!)))) (verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.? self!)) (= (%Poly%core!option.Option. val!) (core!option.Option./Some ret!))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& ret!))) (=> (not (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& ret! (I 1))))) (=> (not (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! (I 2))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& ret! (I 2))))) (=> (not (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! (I 3))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& ret! (I 3))))) (=> (not (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! (I 4))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& ret! (I 4)))))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.ensures_read.? T&. T& self! val! ret!))))))
(declare-fun req%verismo!vbox.vbox.impl&%8.borrow. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%77 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%verismo!vbox.vbox.impl&%8.borrow. T&. T& self!) (=> %%global_location_label%%77 (verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!vbox.vbox.impl&%6.snp.? T&. T& self!))))) :pattern ((req%verismo!vbox.vbox.impl&%8.borrow. T&. T& self!)))))
(declare-fun ens%verismo!vbox.vbox.impl&%8.borrow. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ret! Poly)) (! (= (ens%verismo!vbox.vbox.impl&%8.borrow. T&. T& self! ret!) (and (has_type ret! T&) (verismo!ptr.snp.snp_u.impl&%27.ensures_read.? T&. T& (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!vbox.vbox.impl&%6.snp.? T&. T& self!)) (Poly%core!option.Option. (core!option.Option./Some (verismo!vbox.vbox.impl&%6.view.? T&. T& self!))) ret!))) :pattern ((ens%verismo!vbox.vbox.impl&%8.borrow. T&. T& self! ret!)))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%20.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%20.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ INT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ INT self! rhs!))))))
(declare-fun req%verismo!vbox.vbox.impl&%8.from_raw. (Dcr Type Int Poly) Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(assert (forall ((T&. Dcr) (T& Type) (ptr! Int) (perm! Poly)) (! (= (req%verismo!vbox.vbox.impl&%8.from_raw. T&. T& ptr! perm!) (and (=> %%global_location_label%%78 (verismo!ptr.ptr_u.impl&%2.wf_not_null_at.? T&. T& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%24.view.? T&. T& perm!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (I ptr!)))) (=> %%global_location_label%%79 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.ptr_u.impl&%2.value.? T&. T& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%24.view.? T&. T& perm!))))))))))) :pattern ((req%verismo!vbox.vbox.impl&%8.from_raw. T&. T& ptr! perm!)))))
(declare-fun ens%verismo!vbox.vbox.impl&%8.from_raw. (Dcr Type Int Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (ptr! Int) (perm! Poly) (res! Poly)) (! (= (ens%verismo!vbox.vbox.impl&%8.from_raw. T&. T& ptr! perm! res!) (and (has_type res! (TYPE%verismo!vbox.vbox.VBox. T&. T&)) (= (verismo!vbox.vbox.impl&%6.view.? T&. T& res!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.ptr_u.impl&%2.value.? T&. T& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%24.view.? T&. T& perm!))))))) (%B (B (= (I (verismo!vbox.vbox.impl&%6.id.? T&. T& res!)) (I (verismo!ptr.ptr_u.impl&%2.id.? T&. T& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%24.view.? T&. T& perm!))))))) (= (verismo!vbox.vbox.impl&%6.snp.? T&. T& res!) (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. T&. T&) (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%24.view.? T&. T& perm!))))))) :pattern ((ens%verismo!vbox.vbox.impl&%8.from_raw. T&. T& ptr! perm! res!)))))
(declare-fun ens%verismo!vbox.vbox.impl&%8.into_raw. (Dcr Type Poly tuple%2.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ptr_perm! tuple%2.)) (! (= (ens%verismo!vbox.vbox.impl&%8.into_raw. T&. T& self! ptr_perm!) (and (has_type (Poly%tuple%2. ptr_perm!) (TYPE%tuple%2. $ (TYPE%verismo!ptr.def_s.SnpPPtr. T&. T&) (TRACKED $) (TYPE%verismo!ptr.def_s.SnpPointsTo. T&. T&))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. T&. T&) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ptr_perm!))))) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.ptr_u.impl&%2.value.? T&. T& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%24.view.? T&. T& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ptr_perm!))))))))) (verismo!vbox.vbox.impl&%6.view.? T&. T& self!)) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.ptr_u.impl&%2.value.? T&. T& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%24.view.? T&. T& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ptr_perm!))))))))))) (verismo!ptr.ptr_u.impl&%2.wf_not_null_at.? T&. T& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%24.view.? T&. T& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ptr_perm!))))) (I (verismo!ptr.def_s.impl&%19.id.? T&. T& (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ptr_perm!)))))) (= (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. T&. T&) (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%24.view.? T&. T& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ptr_perm!))))))) (verismo!vbox.vbox.impl&%6.snp.? T&. T& self!)) (%B (B (= (I (verismo!vbox.vbox.impl&%6.id.? T&. T& self!)) (I (verismo!ptr.def_s.impl&%19.id.? T&. T& (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ptr_perm!)))))))))) :pattern ((ens%verismo!vbox.vbox.impl&%8.into_raw. T&. T& self! ptr_perm!)))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%19.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%19.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT SZ) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT SZ) self! rhs!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (self! Poly) (params! Poly)) (! (=> (and (has_type self! Self%&) (has_type params! Params&)) (has_type (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? Self%&. Self%& Params&. Params& Out&. Out& self! params!) BOOL)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? Self%&. Self%& Params&. Params& Out&. Out& self! params!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (=> (and (has_type self! Self%&) (has_type prev! Self%&) (has_type params! Params&) (has_type ret! Out&)) (has_type (verismo!vbox.vbox.MutFnTrait.spec_update.? Self%&. Self%& Params&. Params& Out&. Out& self! prev! params! ret!) BOOL)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? Self%&. Self%& Params&. Params& Out&. Out& self! prev! params! ret!)))))
(declare-fun req%verismo!vbox.vbox.MutFnTrait.box_update. (Dcr Type Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%80 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (pre%self! Poly) (params! Poly)) (! (= (req%verismo!vbox.vbox.MutFnTrait.box_update. Self%&. Self%& Params&. Params& Out&. Out& pre%self! params!) (=> %%global_location_label%%80 (%B (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? Self%&. Self%& Params&. Params& Out&. Out& pre%self! params!)))) :pattern ((req%verismo!vbox.vbox.MutFnTrait.box_update. Self%&. Self%& Params&. Params& Out&. Out& pre%self! params!)))))
(declare-fun ens%verismo!vbox.vbox.MutFnTrait.box_update. (Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (pre%self! Poly) (self! Poly) (params! Poly) (ret! Poly)) (! (= (ens%verismo!vbox.vbox.MutFnTrait.box_update. Self%&. Self%& Params&. Params& Out&. Out& pre%self! self! params! ret!) (and (has_type ret! Out&) (has_type self! Self%&) (%B (verismo!vbox.vbox.MutFnTrait.spec_update.? Self%&. Self%& Params&. Params& Out&. Out& self! pre%self! params! ret!)))) :pattern ((ens%verismo!vbox.vbox.MutFnTrait.box_update. Self%&. Self%& Params&. Params& Out&. Out& pre%self! self! params! ret!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (self! Poly) (params! Poly) (cs! Poly)) (! (=> (and (has_type self! Self%&) (has_type params! Params&) (has_type cs! T&)) (has_type (verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs_requires.? Self%&. Self%& T&. T& Params&. Params& Out&. Out& self! params! cs!) BOOL)) :pattern ((verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs_requires.? Self%&. Self%& T&. T& Params&. Params& Out&. Out& self! params! cs!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (self! Poly) (prev! Poly) (params! Poly) (oldcs! Poly) (ret! Poly) (cs! Poly)) (! (=> (and (has_type self! Self%&) (has_type prev! Self%&) (has_type params! Params&) (has_type oldcs! T&) (has_type ret! Out&) (has_type cs! T&)) (has_type (verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs.? Self%&. Self%& T&. T& Params&. Params& Out&. Out& self! prev! params! oldcs! ret! cs!) BOOL)) :pattern ((verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs.? Self%&. Self%& T&. T& Params&. Params& Out&. Out& self! prev! params! oldcs! ret! cs!)))))
(declare-fun req%verismo!vbox.vbox.MutFnWithCSTrait.box_update_cs. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%81 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (pre%self! Poly) (params! Poly) (pre%cs! Poly)) (! (= (req%verismo!vbox.vbox.MutFnWithCSTrait.box_update_cs. Self%&. Self%& T&. T& Params&. Params& Out&. Out& pre%self! params! pre%cs!) (=> %%global_location_label%%81 (%B (verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs_requires.? Self%&. Self%& T&. T& Params&. Params& Out&. Out& pre%self! params! pre%cs!)))) :pattern ((req%verismo!vbox.vbox.MutFnWithCSTrait.box_update_cs. Self%&. Self%& T&. T& Params&. Params& Out&. Out& pre%self! params! pre%cs!)))))
(declare-fun ens%verismo!vbox.vbox.MutFnWithCSTrait.box_update_cs. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (pre%self! Poly) (self! Poly) (params! Poly) (pre%cs! Poly) (cs! Poly) (ret! Poly)) (! (= (ens%verismo!vbox.vbox.MutFnWithCSTrait.box_update_cs. Self%&. Self%& T&. T& Params&. Params& Out&. Out& pre%self! self! params! pre%cs! cs! ret!) (and (has_type ret! Out&) (has_type self! Self%&) (has_type cs! T&) (%B (verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs.? Self%&. Self%& T&. T& Params&. Params& Out&. Out& self! pre%self! params! pre%cs! ret! cs!)))) :pattern ((ens%verismo!vbox.vbox.MutFnWithCSTrait.box_update_cs. Self%&. Self%& T&. T& Params&. Params& Out&. Out& pre%self! self! params! pre%cs! cs! ret!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (self! Poly) (params! Poly)) (! (=> (and (has_type self! Self%&) (has_type params! Params&)) (has_type (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? Self%&. Self%& Params&. Params& Out&. Out& self! params!) BOOL)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? Self%&. Self%& Params&. Params& Out&. Out& self! params!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (self! Poly) (params! Poly) (ret! Poly)) (! (=> (and (has_type self! Self%&) (has_type params! Params&) (has_type ret! Out&)) (has_type (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? Self%&. Self%& Params&. Params& Out&. Out& self! params! ret!) BOOL)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? Self%&. Self%& Params&. Params& Out&. Out& self! params! ret!)))))
(declare-fun req%verismo!vbox.vbox.BorrowFnTrait.box_borrow. (Dcr Type Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%82 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (self! Poly) (params! Poly)) (! (= (req%verismo!vbox.vbox.BorrowFnTrait.box_borrow. Self%&. Self%& Params&. Params& Out&. Out& self! params!) (=> %%global_location_label%%82 (%B (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? Self%&. Self%& Params&. Params& Out&. Out& self! params!)))) :pattern ((req%verismo!vbox.vbox.BorrowFnTrait.box_borrow. Self%&. Self%& Params&. Params& Out&. Out& self! params!)))))
(declare-fun ens%verismo!vbox.vbox.BorrowFnTrait.box_borrow. (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (self! Poly) (params! Poly) (ret! Poly)) (! (= (ens%verismo!vbox.vbox.BorrowFnTrait.box_borrow. Self%&. Self%& Params&. Params& Out&. Out& self! params! ret!) (and (has_type ret! Out&) (%B (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? Self%&. Self%& Params&. Params& Out&. Out& self! params! ret!)))) :pattern ((ens%verismo!vbox.vbox.BorrowFnTrait.box_borrow. Self%&. Self%& Params&. Params& Out&. Out& self! params! ret!)))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%7.wf.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%7.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.params.E820Entry. self!) (B (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/addr (%Poly%verismo!boot.params.E820Entry. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/size (%Poly%verismo!boot.params.E820Entry. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/memty (%Poly%verismo!boot.params.E820Entry. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.params.E820Entry. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%10.spec_real_range.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%10.spec_real_range.) (forall ((self! Poly)) (! (= (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? $ TYPE%verismo!boot.params.E820Entry. self!) (Poly%tuple%2. (tuple%2./tuple%2 (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/addr (%Poly%verismo!boot.params.E820Entry. self!)))))) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/size (%Poly%verismo!boot.params.E820Entry. self!))))))))) :pattern ((verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? $ TYPE%verismo!boot.params.E820Entry. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%10.spec_end_max.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%10.spec_end_max.) (= (verismo!addr_e.range_interface.MemRangeInterface.spec_end_max.? $ TYPE%verismo!boot.params.E820Entry.) (I verismo!arch.addr_s.def_s.VM_MEM_SIZE.?))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%62.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%62.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(declare-fun req%verismo!tspec.security.sectype.impl&%90.into. (Dcr Type Int) Bool)
(declare-const %%global_location_label%%83 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%90.into. M&. M& self!) (=> %%global_location_label%%83 (%B (B true)))) :pattern ((req%verismo!tspec.security.sectype.impl&%90.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%90.into. (Dcr Type Int Poly) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! Poly)) (! (= (ens%verismo!tspec.security.sectype.impl&%90.into. M&. M& self! ret!) (and (has_type ret! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= ret! (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (I self!)))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& ret!)) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (I self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%90.into. M&. M& self! ret!)))))
(assert (tr_bound%verismo!addr_e.range_interface.MemRangeInterface. $ TYPE%verismo!boot.params.E820Entry.))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%6.spec_lt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%6.spec_lt.) (forall ((T&. Dcr) (T& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& T2&. T2& self! rhs!) (B (< (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I (verismo!tspec.integer.IntOrd.ord_int.? T2&. T2& rhs!))))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& T2&. T2& self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%6.spec_le.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%6.spec_le.) (forall ((T&. Dcr) (T& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& T2&. T2& self! rhs!) (B (<= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I (verismo!tspec.integer.IntOrd.ord_int.? T2&. T2& rhs!))))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& T2&. T2& self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%70.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%70.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT SZ)))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.))
(declare-fun %%lambda%%18 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%18 v1$ v2$) (I (Sub (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%18 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param) (mk_fun %%lambda%%18)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%732.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%732.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%733.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%733.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.spec_valid_range.))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.spec_valid_range.) (forall ((real! Poly) (max! Poly)) (! (= (verismo!addr_e.range_interface.spec_valid_range.? real! max!) (let ((start$ (%Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. real!))))) (let ((size$ (%Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. real!))))) (let ((valid_start$ (ite (%B (B (< (%I (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. start$))) (%I (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) max!))))) start$ (%Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. max!)))) (let ((valid_size$ (ite (%B (B (<= (%I (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) max!)) (%I (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. start$)))))) (%Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) $ TYPE%tuple%0. (I 0))))) (ite (%B (B (< (%I (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. size$))) (%I (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT $ TYPE%tuple%0.) $ INT $ TYPE%tuple%0. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT $ TYPE%tuple%0. (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. max!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. start$)))))))))))) size$ (%Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT $ TYPE%tuple%0.) $ INT $ TYPE%tuple%0. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT $ TYPE%tuple%0. (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. max!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. start$)))))))))))) (tuple%2./tuple%2 (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. valid_start$) (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. valid_size$))))))) :pattern ((verismo!addr_e.range_interface.spec_valid_range.? real! max!))))))
(assert (forall ((real! Poly) (max! Poly)) (! (=> (and (has_type real! (TYPE%tuple%2. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.))) (has_type max! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.))) (has_type (Poly%tuple%2. (verismo!addr_e.range_interface.spec_valid_range.? real! max!)) (TYPE%tuple%2. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.)))) :pattern ((verismo!addr_e.range_interface.spec_valid_range.? real! max!)))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.impl&%2.spec_sec_max.))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.impl&%2.spec_sec_max.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_sec_max.? T&. T&) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) $ TYPE%tuple%0. (verismo!addr_e.range_interface.MemRangeInterface.spec_end_max.? T&. T&))))) :pattern ((verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_sec_max.? T&. T&))))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.impl&%2.spec_valid_range.))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.impl&%2.spec_valid_range.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_valid_range.? T&. T& self!) (Poly%tuple%2. (verismo!addr_e.range_interface.spec_valid_range.? (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? T&. T& self!) (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_sec_max.? T&. T&)))) :pattern ((verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_valid_range.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%64.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%64.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.impl&%2.spec_range.))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.impl&%2.spec_range.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range.? T&. T& self!) (Poly%tuple%2. (tuple%2./tuple%2 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. (tuple%2./tuple%2/0 (%Poly%tuple%2. (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_valid_range.? T&. T& self!))))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. (tuple%2./tuple%2/1 (%Poly%tuple%2. (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_valid_range.? T&. T& self!)))))))))) :pattern ((verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.range_set.range.))
(assert (=> (fuel_bool fuel%verismo!tspec.range_set.range.) (forall ((first! Poly) (end! Poly)) (! (= (verismo!tspec.range_set.range.? first! end!) (ite (> (%I end!) (%I first!)) (tuple%2./tuple%2 first! (I (nClip (Sub (%I end!) (%I first!))))) (tuple%2./tuple%2 first! (I 0)))) :pattern ((verismo!tspec.range_set.range.? first! end!))))))
(assert (forall ((first! Poly) (end! Poly)) (! (=> (and (has_type first! INT) (has_type end! INT)) (has_type (Poly%tuple%2. (verismo!tspec.range_set.range.? first! end!)) (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!tspec.range_set.range.? first! end!)))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%8.is_constant.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%8.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.E820Entry. self!) (B (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/addr (%Poly%verismo!boot.params.E820Entry. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/size (%Poly%verismo!boot.params.E820Entry. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/memty (%Poly%verismo!boot.params.E820Entry. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.E820Entry. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%8.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%8.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.params.E820Entry. self! vmpl!) (B (and (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/addr (%Poly%verismo!boot.params.E820Entry. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/addr (%Poly%verismo!boot.params.E820Entry. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/size (%Poly%verismo!boot.params.E820Entry. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/size (%Poly%verismo!boot.params.E820Entry. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/memty (%Poly%verismo!boot.params.E820Entry. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.E820Entry./E820Entry/memty (%Poly%verismo!boot.params.E820Entry. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.params.E820Entry. self! vmpl!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!boot.params.E820Entry.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!boot.params.E820Entry.))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%9.is_constant.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%9.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.monitor_params.MonitorParams. self!) (B (and (and (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/cpu_count (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/cpuid_page (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/secret_page (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/hv_param (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_entries (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16)) (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_e820 (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi_size (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_start (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_size (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)) (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline_len (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.monitor_params.MonitorParams. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%9.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%9.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.monitor_params.MonitorParams. self! vmpl!) (B (and (and (and (and (and (and (and (and (and (and (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/cpu_count (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/cpu_count (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/cpuid_page (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/cpuid_page (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/secret_page (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/secret_page (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/hv_param (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/hv_param (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_entries (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_entries (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16)) (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_e820 (%Poly%verismo!boot.monitor_params.MonitorParams. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi_size (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi_size (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_start (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_start (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_size (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_size (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)) (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline (%Poly%verismo!boot.monitor_params.MonitorParams. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline_len (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline_len (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.monitor_params.MonitorParams. self! vmpl!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!boot.monitor_params.MonitorParams.))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%8.wf.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%8.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.monitor_params.MonitorParams. self!) (B (and (and (and (and (and (and (and (and (and (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/cpu_count (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/cpuid_page (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/secret_page (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/hv_param (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_entries (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16)) (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_e820 (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi_size (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_start (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_size (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)) (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline_len (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.monitor_params.MonitorParams. self!))))))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!boot.monitor_params.MonitorParams.))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%6.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%6.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.monitor_params.MonitorParams.) (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.params.E820Entry.)))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 256)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!boot.monitor_params.MonitorParams.))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%5.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%5.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.monitor_params.MonitorParams. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/cpu_count (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/cpuid_page (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/secret_page (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/hv_param (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_entries (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_e820 (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi_size (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_start (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_size (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_cmdline_len (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.monitor_params.MonitorParams. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!boot.monitor_params.MonitorParams. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (fuel_bool_default fuel%verismo!mem.rawmem_s.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!mem.rawmem_s.impl&%0.wf.) (forall ((self! Poly)) (! (= (verismo!mem.rawmem_s.impl&%0.wf.? self!) (and (verismo!snp.trackedcore.snpmulticore.impl&%4.wf.? (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. (verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/cc (%Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. self!)))) (verismo!mem.rawmem_p.impl&%0.wf.? (Poly%verismo!mem.rawmem_p.RawMemPerms. (verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/memperm (%Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. self!)))))) :pattern ((verismo!mem.rawmem_s.impl&%0.wf.? self!))))))
(assert (fuel_bool_default fuel%verismo!mem.rawmem_p.impl&%0.contains_default_except.))
(assert (=> (fuel_bool fuel%verismo!mem.rawmem_p.impl&%0.contains_default_except.) (forall ((self! Poly) (range! Poly) (ranges! Poly)) (! (= (verismo!mem.rawmem_p.impl&%0.contains_default_except.? self! range! ranges!) (verismo!mem.rawmem_p.impl&%0.contains_with_snp_except.? self! range! (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) ranges!)) :pattern ((verismo!mem.rawmem_p.impl&%0.contains_default_except.? self! range! ranges!))))))
(assert (fuel_bool_default fuel%verismo!tspec.seqlib.seq_multiset.seq_uop.))
(declare-fun %%lambda%%19 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%19 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%0 %%hole%%3 (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%19 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.seqlib.seq_multiset.seq_uop.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (s! Poly) (op! Poly)) (! (= (verismo!tspec.seqlib.seq_multiset.seq_uop.? A&. A& B&. B& s! op!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& s!)) (Poly%fun%1. (mk_fun (%%lambda%%19 A&. A& s! (%Poly%fun%1. op!)))))) :pattern ((verismo!tspec.seqlib.seq_multiset.seq_uop.? A&. A& B&. B& s! op!))))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (s! Poly) (op! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type op! (TYPE%fun%1. A&. A& B&. B&))) (has_type (verismo!tspec.seqlib.seq_multiset.seq_uop.? A&. A& B&. B& s! op!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((verismo!tspec.seqlib.seq_multiset.seq_uop.? A&. A& B&. B& s! op!)))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.to_range_fn.))
(declare-fun %%lambda%%20 (Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%20 %%hole%%0 %%hole%%1) v$) (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range.? %%hole%%0 %%hole%%1 v$)) :pattern ((%%apply%%0 (%%lambda%%20 %%hole%%0 %%hole%%1) v$)))))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.to_range_fn.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!addr_e.range_interface.to_range_fn.? T&. T&) (mk_fun (%%lambda%%20 T&. T&))) :pattern ((verismo!addr_e.range_interface.to_range_fn.? T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%fun%1. (verismo!addr_e.range_interface.to_range_fn.? T&. T&)) (TYPE%fun%1. T&. T& $ (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!addr_e.range_interface.to_range_fn.? T&. T&)))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.impl&%3.to_range_seq.))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.impl&%3.to_range_seq.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!addr_e.range_interface.MemRangeSeqInterface.to_range_seq.? $ (TYPE%vstd!seq.Seq. T&. T&) self!) (verismo!tspec.seqlib.seq_multiset.seq_uop.? T&. T& $ (TYPE%tuple%2. $ INT $ NAT) self! (Poly%fun%1. (verismo!addr_e.range_interface.to_range_fn.? T&. T&)))) :pattern ((verismo!addr_e.range_interface.MemRangeSeqInterface.to_range_seq.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.empty_ranges.))
(declare-fun %%lambda%%21 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (r$ Poly)) (! (= (%%apply%%0 (%%lambda%%21 %%hole%%0) r$) (B (= (tuple%2./tuple%2/1 (%Poly%tuple%2. r$)) %%hole%%0))) :pattern ((%%apply%%0 (%%lambda%%21 %%hole%%0) r$)))))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.empty_ranges.) (forall ((no%param Poly)) (! (= (verismo!addr_e.range_interface.empty_ranges.? no%param) (%Poly%vstd!set.Set<tuple%2<int./nat.>.>. (vstd!set.impl&%0.new.? $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%fun%1. $ (TYPE%tuple%2. $ INT $ NAT) $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%21 (I 0))))))) :pattern ((verismo!addr_e.range_interface.empty_ranges.? no%param))))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.impl&%3.to_valid_ranges.))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.impl&%3.to_valid_ranges.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!addr_e.range_interface.MemRangeSeqInterface.to_valid_ranges.? $ (TYPE%vstd!seq.Seq. T&. T&) self!) (let ((s$ (%Poly%vstd!seq.Seq<tuple%2<int./nat.>.>. (verismo!addr_e.range_interface.MemRangeSeqInterface.to_range_seq.? $ (TYPE%vstd!seq.Seq. T&. T&) self!)))) (vstd!set.impl&%0.difference.? $ (TYPE%tuple%2. $ INT $ NAT) (vstd!seq_lib.impl&%0.to_set.? $ (TYPE%tuple%2. $ INT $ NAT) (Poly%vstd!seq.Seq<tuple%2<int./nat.>.>. s$)) (Poly%vstd!set.Set<tuple%2<int./nat.>.>. (verismo!addr_e.range_interface.empty_ranges.? (I 0)))))) :pattern ((verismo!addr_e.range_interface.MemRangeSeqInterface.to_valid_ranges.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator.))
(assert (fuel_bool_default fuel%verismo!linkedlist.impl&%12.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!linkedlist.impl&%12.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&)) (I 8)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&)))))))
(assert (fuel_bool_default fuel%verismo!allocator.linkedlist.impl&%3.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!allocator.linkedlist.impl&%3.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator.) (I 8))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator.))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%7.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%7.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT SZ)) (I (uClip SZ 0)))))
(assert (fuel_bool_default fuel%verismo!linkedlist.impl&%1.spec_default.))
(assert (=> (fuel_bool fuel%verismo!linkedlist.impl&%1.spec_default.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!linkedlist.Node. T&. T&)) (Poly%verismo!linkedlist.Node. (verismo!linkedlist.Node./Node (%I (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT SZ))) (verismo!tspec.default.SpecDefault.spec_default.? T&. T&)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!linkedlist.Node. T&. T&)))))))
(declare-fun ens%verismo!linkedlist.impl&%21.axiom_default. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!linkedlist.impl&%21.axiom_default. T&. T&) (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&) (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&)))) (= (vstd!seq.Seq.len.? $ (TYPE%verismo!linkedlist.SpecListItem. T&. T&) (verismo!linkedlist.impl&%18.view.? T&. T& (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&)))) 0))) :pattern ((ens%verismo!linkedlist.impl&%21.axiom_default. T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (and (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&)) (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&)) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&) (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&)))) (= (vstd!seq.Seq.len.? $ (TYPE%verismo!linkedlist.SpecListItem. T&. T&) (verismo!linkedlist.impl&%18.view.? T&. T& (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&)))) 0))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!linkedlist.LinkedList. T&. T&))))))
(declare-fun ens%verismo!global.axiom_global_auto. () Bool)
(assert (= ens%verismo!global.axiom_global_auto. (and (forall ((v1$ Poly) (v2$ Poly)) (! (=> (and (has_type v1$ TYPE%verismo!global.Globals.) (has_type v2$ TYPE%verismo!global.Globals.)) (=> (not (= v1$ v2$)) (not (= (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? v1$)))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? v2$)))))))) :pattern ((verismo!global.g_range.? v1$) (verismo!global.g_range.? v2$)))) (forall ((v1$ Poly) (v2$ Poly)) (! (=> (and (has_type v1$ TYPE%verismo!global.Globals.) (has_type v2$ TYPE%verismo!global.Globals.)) (=> (not (= v1$ v2$)) (verismo!tspec.range_set.range_disjoint_.? (Poly%tuple%2. (verismo!global.g_range.? v1$)) (Poly%tuple%2. (verismo!global.g_range.? v2$))))) :pattern ((verismo!global.g_range.? v1$) (verismo!global.g_range.? v2$)))))))
(assert (and (forall ((v1$ Poly) (v2$ Poly)) (! (=> (and (has_type v1$ TYPE%verismo!global.Globals.) (has_type v2$ TYPE%verismo!global.Globals.)) (=> (not (= v1$ v2$)) (not (= (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? v1$)))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? v2$)))))))) :pattern ((verismo!global.g_range.? v1$) (verismo!global.g_range.? v2$)))) (forall ((v1$ Poly) (v2$ Poly)) (! (=> (and (has_type v1$ TYPE%verismo!global.Globals.) (has_type v2$ TYPE%verismo!global.Globals.)) (=> (not (= v1$ v2$)) (verismo!tspec.range_set.range_disjoint_.? (Poly%tuple%2. (verismo!global.g_range.? v1$)) (Poly%tuple%2. (verismo!global.g_range.? v2$))))) :pattern ((verismo!global.g_range.? v1$) (verismo!global.g_range.? v2$))))))
(declare-fun ens%verismo!global.axiom_global_ALLOCATOR. () Bool)
(assert (= ens%verismo!global.axiom_global_ALLOCATOR. (and (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR)))))) (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator.)) (= (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. (verismo!global.spec_ALLOCATOR.? (I 0))))))))) (I (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator.))) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR))) (= (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. (verismo!global.spec_ALLOCATOR.? (I 0)))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator.) (Poly%verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. (verismo!global.spec_ALLOCATOR.? (I 0))))))))
(assert (and (and (and (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR)))))) (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator.)) (= (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. (verismo!global.spec_ALLOCATOR.? (I 0))))))))) (I (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator.))) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR)))) (= (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. (verismo!global.spec_ALLOCATOR.? (I 0)))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator.) (Poly%verismo!lock.spincell_e.VSpinLock<verismo!allocator.linkedlist.LinkedListAllocator.>. (verismo!global.spec_ALLOCATOR.? (I 0)))))))
(assert (fuel_bool_default fuel%verismo!debug.interface.impl&%6.is_constant.))
(assert (=> (fuel_bool fuel%verismo!debug.interface.impl&%6.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!debug.interface.Console. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!debug.interface.Console. self!))))))
(assert (fuel_bool_default fuel%verismo!debug.interface.impl&%6.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!debug.interface.impl&%6.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!debug.interface.Console. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!debug.interface.Console. self! vmpl!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!debug.interface.Console.))
(declare-fun ens%verismo!global.axiom_global_CONSOLE. () Bool)
(assert (= ens%verismo!global.axiom_global_CONSOLE. (and (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE)))))) (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!debug.interface.Console.)) (= (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!debug.interface.Console. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. (verismo!global.spec_CONSOLE.? (I 0))))))))) (I (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!debug.interface.Console.))) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE))) (= (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!debug.interface.Console. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. (verismo!global.spec_CONSOLE.? (I 0)))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!debug.interface.Console.) (Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. (verismo!global.spec_CONSOLE.? (I 0))))))))
(assert (and (and (and (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE)))))) (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!debug.interface.Console.)) (= (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!debug.interface.Console. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. (verismo!global.spec_CONSOLE.? (I 0))))))))) (I (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!debug.interface.Console.))) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE)))) (= (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!debug.interface.Console. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. (verismo!global.spec_CONSOLE.? (I 0)))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./CONSOLE)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!debug.interface.Console.) (Poly%verismo!lock.spincell_e.VSpinLock<verismo!debug.interface.Console.>. (verismo!global.spec_CONSOLE.? (I 0)))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%23.is_constant.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%23.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. self!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%23.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%23.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. self! vmpl!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.))
(declare-fun ens%verismo!global.axiom_global_PT. () Bool)
(assert (= ens%verismo!global.axiom_global_PT. (and (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT)))))) (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.)) (= (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (verismo!global.spec_PT.? (I 0))))))))) (I (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.))) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT))) (= (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (verismo!global.spec_PT.? (I 0)))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.) (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (verismo!global.spec_PT.? (I 0))))))))
(assert (and (and (and (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT)))))) (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.)) (= (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (verismo!global.spec_PT.? (I 0))))))))) (I (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.))) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT)))) (= (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (verismo!global.spec_PT.? (I 0)))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PT)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.) (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (verismo!global.spec_PT.? (I 0)))))))
(assert (fuel_bool_default fuel%verismo!global.spec_SEC_PERM_range.))
(assert (=> (fuel_bool fuel%verismo!global.spec_SEC_PERM_range.) (forall ((no%param Poly)) (! (= (verismo!global.spec_SEC_PERM_range.? no%param) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./SEC_PERM))) :pattern ((verismo!global.spec_SEC_PERM_range.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%tuple%2. (verismo!global.spec_SEC_PERM_range.? no%param)) (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!global.spec_SEC_PERM_range.? no%param)))))
(assert (fuel_bool_default fuel%verismo!global.spec_SEC_PERM_lockid.))
(assert (=> (fuel_bool fuel%verismo!global.spec_SEC_PERM_lockid.) (forall ((no%param Poly)) (! (= (verismo!global.spec_SEC_PERM_lockid.? no%param) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./SEC_PERM))))))) :pattern ((verismo!global.spec_SEC_PERM_lockid.? no%param))))))
(declare-fun ens%verismo!global.axiom_global_SEC_PERM. () Bool)
(assert (= ens%verismo!global.axiom_global_SEC_PERM. (and (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./SEC_PERM)))))) (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.)) (= (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (verismo!global.spec_SEC_PERM.? (I 0))))))))) (I (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.))) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./SEC_PERM))) (= (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (verismo!global.spec_SEC_PERM.? (I 0)))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./SEC_PERM))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.) (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (verismo!global.spec_SEC_PERM.? (I 0))))))))
(assert (and (and (and (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./SEC_PERM)))))) (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.)) (= (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (verismo!global.spec_SEC_PERM.? (I 0))))))))) (I (verismo!tspec.size_s.spec_size.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.))) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./SEC_PERM)))) (= (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (verismo!global.spec_SEC_PERM.? (I 0)))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./SEC_PERM)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.) (Poly%verismo!lock.spincell_e.VSpinLock<verismo!pgtable_e.def.TrackedPTEPerms.>. (verismo!global.spec_SEC_PERM.? (I 0)))))))
(assert (fuel_bool_default fuel%verismo!global.spec_OSMEM_range.))
(assert (=> (fuel_bool fuel%verismo!global.spec_OSMEM_range.) (forall ((no%param Poly)) (! (= (verismo!global.spec_OSMEM_range.? no%param) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./OSMEM))) :pattern ((verismo!global.spec_OSMEM_range.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%tuple%2. (verismo!global.spec_OSMEM_range.? no%param)) (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!global.spec_OSMEM_range.? no%param)))))
(assert (fuel_bool_default fuel%verismo!global.spec_OSMEM_lockid.))
(assert (=> (fuel_bool fuel%verismo!global.spec_OSMEM_lockid.) (forall ((no%param Poly)) (! (= (verismo!global.spec_OSMEM_lockid.? no%param) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./OSMEM))))))) :pattern ((verismo!global.spec_OSMEM_lockid.? no%param))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.vec.impl&%1.is_constant.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.vec.impl&%1.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) self!) (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. T&. T&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) self!))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.vec.impl&%1.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.vec.impl&%1.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) self! vmpl!) (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. T&. T&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) self!) vmpl!)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) self! vmpl!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.))))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%27.is_constant.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%27.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!security.mem.OSMemEntry. self!) (B (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/start_page (%Poly%verismo!security.mem.OSMemEntry. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/npages (%Poly%verismo!security.mem.OSMemEntry. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/osperm (%Poly%verismo!security.mem.OSMemEntry. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!security.mem.OSMemEntry. self!))))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%27.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%27.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!security.mem.OSMemEntry. self! vmpl!) (B (and (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/start_page (%Poly%verismo!security.mem.OSMemEntry. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/start_page (%Poly%verismo!security.mem.OSMemEntry. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/npages (%Poly%verismo!security.mem.OSMemEntry. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/npages (%Poly%verismo!security.mem.OSMemEntry. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/osperm (%Poly%verismo!security.mem.OSMemEntry. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/osperm (%Poly%verismo!security.mem.OSMemEntry. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!security.mem.OSMemEntry. self! vmpl!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!security.mem.OSMemEntry.))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%26.wf.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%26.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!security.mem.OSMemEntry. self!) (B (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT SZ) (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/start_page (%Poly%verismo!security.mem.OSMemEntry. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT SZ) (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/npages (%Poly%verismo!security.mem.OSMemEntry. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 8) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/osperm (%Poly%verismo!security.mem.OSMemEntry. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!security.mem.OSMemEntry. self!))))))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!security.mem.OSMemEntry.))
(declare-fun ens%verismo!global.axiom_global_OSMEM. () Bool)
(assert (= ens%verismo!global.axiom_global_OSMEM. (and (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./OSMEM)))))) (verismo!tspec.size_s.spec_size.? $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.))) (= (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.) (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. (verismo!global.spec_OSMEM.? (I 0))))))))) (I (verismo!tspec.size_s.spec_size.? $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.)))) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./OSMEM))) (= (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.) (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. (verismo!global.spec_OSMEM.? (I 0)))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./OSMEM))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.)) (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. (verismo!global.spec_OSMEM.? (I 0))))))))
(assert (and (and (and (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./OSMEM)))))) (verismo!tspec.size_s.spec_size.? $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.))) (= (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.) (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. (verismo!global.spec_OSMEM.? (I 0))))))))) (I (verismo!tspec.size_s.spec_size.? $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.)))) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./OSMEM)))) (= (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.) (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. (verismo!global.spec_OSMEM.? (I 0)))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./OSMEM)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.)) (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<verismo!security.mem.OSMemEntry./alloc!alloc.Global.>.>. (verismo!global.spec_OSMEM.? (I 0)))))))
(assert (fuel_bool_default fuel%verismo!global.spec_RICHOS_VMSA_range.))
(assert (=> (fuel_bool fuel%verismo!global.spec_RICHOS_VMSA_range.) (forall ((no%param Poly)) (! (= (verismo!global.spec_RICHOS_VMSA_range.? no%param) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./RICHOS_VMSA))) :pattern ((verismo!global.spec_RICHOS_VMSA_range.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%tuple%2. (verismo!global.spec_RICHOS_VMSA_range.? no%param)) (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!global.spec_RICHOS_VMSA_range.? no%param)))))
(assert (fuel_bool_default fuel%verismo!global.spec_RICHOS_VMSA_lockid.))
(assert (=> (fuel_bool fuel%verismo!global.spec_RICHOS_VMSA_lockid.) (forall ((no%param Poly)) (! (= (verismo!global.spec_RICHOS_VMSA_lockid.? no%param) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./RICHOS_VMSA))))))) :pattern ((verismo!global.spec_RICHOS_VMSA_lockid.? no%param))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%0.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%0.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%core!option.Option. T&. T&) self!) (B (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%core!option.Option. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%0.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%0.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%core!option.Option. T&. T&) self! vmpl!) (B (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%core!option.Option. T&. T&) self! vmpl!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%core!option.Option. T&. T&))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%3.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%3.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%core!option.Option. T&. T&) self!) (B (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%core!option.Option. T&. T&) self!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%core!option.Option. T&. T&))))))
(assert (fuel_bool_default fuel%verismo!vbox.vbox.impl&%0.is_constant.))
(assert (=> (fuel_bool fuel%verismo!vbox.vbox.impl&%0.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) self!) (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& (verismo!vbox.vbox.impl&%6.view.? T&. T& self!))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!vbox.vbox.impl&%0.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!vbox.vbox.impl&%0.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) self! vmpl!) (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& (verismo!vbox.vbox.impl&%6.view.? T&. T& self!) vmpl!)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) self! vmpl!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!vbox.vbox.VBox. T&. T&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!vbox.vbox.VBox. T&. T&))))))
(assert (fuel_bool_default fuel%verismo!vbox.vbox.impl&%5.wf.))
(assert (=> (fuel_bool fuel%verismo!vbox.vbox.impl&%5.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) self!) (B (and (verismo!ptr.ptr_s.inv_snp_value.? T&. T& (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!vbox.vbox.impl&%6.snp.? T&. T& self!)) (verismo!vbox.vbox.impl&%6.view.? T&. T& self!)) (%B (verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with.? $ INT (I (verismo!vbox.vbox.impl&%6.id.? T&. T& self!)) (I (verismo!tspec.size_s.spec_size.? T&. T&))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) self!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&)) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!vbox.vbox.VBox. T&. T&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!vbox.vbox.VBox. T&. T&))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!) (B (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. self!) (B (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/es (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self! vmpl!) (B (and (and (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. self! vmpl!) (B (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/es (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) vmpl!)) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. self! vmpl!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%23.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%23.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!) (B (and (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%59.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%59.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. self!) (B (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/es (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 8) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 8) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. self!))))))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.))
(declare-fun ens%verismo!global.axiom_global_RICHOS_VMSA. () Bool)
(assert (= ens%verismo!global.axiom_global_RICHOS_VMSA. (and (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./RICHOS_VMSA)))))) (verismo!tspec.size_s.spec_size.? $ (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.))) (= (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.) (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. (verismo!global.spec_RICHOS_VMSA.? (I 0))))))))) (I (verismo!tspec.size_s.spec_size.? $ (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.)))) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./RICHOS_VMSA))) (= (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.) (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. (verismo!global.spec_RICHOS_VMSA.? (I 0)))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./RICHOS_VMSA))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. $ (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.)) (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. (verismo!global.spec_RICHOS_VMSA.? (I 0))))))))
(assert (and (and (and (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./RICHOS_VMSA)))))) (verismo!tspec.size_s.spec_size.? $ (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.))) (= (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.) (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. (verismo!global.spec_RICHOS_VMSA.? (I 0))))))))) (I (verismo!tspec.size_s.spec_size.? $ (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.)))) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./RICHOS_VMSA)))) (= (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.) (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. (verismo!global.spec_RICHOS_VMSA.? (I 0)))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./RICHOS_VMSA)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. $ (TYPE%alloc!vec.Vec. $ (TYPE%core!option.Option. $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.)) $ TYPE%alloc!alloc.Global.)) (Poly%verismo!lock.spincell_e.VSpinLock<alloc!vec.Vec<core!option.Option<verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.Vmsa.>.>./alloc!alloc.Global.>.>. (verismo!global.spec_RICHOS_VMSA.? (I 0)))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (verismo!global.spec_PCR.? no%param) (TYPE%verismo!lock.spincell_e.VSpinLock. $ (TYPE%alloc!vec.Vec. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 64)) $ TYPE%alloc!alloc.Global.)))) :pattern ((verismo!global.spec_PCR.? no%param)))))
(assert (fuel_bool_default fuel%verismo!global.spec_PCR_range.))
(assert (=> (fuel_bool fuel%verismo!global.spec_PCR_range.) (forall ((no%param Poly)) (! (= (verismo!global.spec_PCR_range.? no%param) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PCR))) :pattern ((verismo!global.spec_PCR_range.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%tuple%2. (verismo!global.spec_PCR_range.? no%param)) (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!global.spec_PCR_range.? no%param)))))
(assert (fuel_bool_default fuel%verismo!global.spec_PCR_lockid.))
(assert (=> (fuel_bool fuel%verismo!global.spec_PCR_lockid.) (forall ((no%param Poly)) (! (= (verismo!global.spec_PCR_lockid.? no%param) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PCR))))))) :pattern ((verismo!global.spec_PCR_lockid.? no%param))))))
(declare-fun ens%verismo!global.axiom_global_PCR. () Bool)
(assert (= ens%verismo!global.axiom_global_PCR. (and (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PCR)))))) (verismo!tspec.size_s.spec_size.? $ (TYPE%alloc!vec.Vec. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 64)) $ TYPE%alloc!alloc.Global.))) (= (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ (TYPE%alloc!vec.Vec. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 64)) $ TYPE%alloc!alloc.Global.) (verismo!global.spec_PCR.? (I 0)))))))) (I (verismo!tspec.size_s.spec_size.? $ (TYPE%alloc!vec.Vec. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 64)) $ TYPE%alloc!alloc.Global.)))) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PCR))) (= (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ (TYPE%alloc!vec.Vec. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 64)) $ TYPE%alloc!alloc.Global.) (verismo!global.spec_PCR.? (I 0))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PCR))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. $ (TYPE%alloc!vec.Vec. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 64)) $ TYPE%alloc!alloc.Global.)) (verismo!global.spec_PCR.? (I 0)))))))
(assert (and (and (and (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PCR)))))) (verismo!tspec.size_s.spec_size.? $ (TYPE%alloc!vec.Vec. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 64)) $ TYPE%alloc!alloc.Global.))) (= (tuple%2./tuple%2 (I (%I (I (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ (TYPE%alloc!vec.Vec. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 64)) $ TYPE%alloc!alloc.Global.) (verismo!global.spec_PCR.? (I 0)))))))) (I (verismo!tspec.size_s.spec_size.? $ (TYPE%alloc!vec.Vec. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 64)) $ TYPE%alloc!alloc.Global.)))) (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PCR)))) (= (verismo!lock.spin_t.impl&%4.id.? (Poly%verismo!lock.spin_t.SpinLock. (verismo!lock.spincell_e.impl&%1.spec_lock.? $ (TYPE%alloc!vec.Vec. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 64)) $ TYPE%alloc!alloc.Global.) (verismo!global.spec_PCR.? (I 0))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./PCR)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. $ (TYPE%alloc!vec.Vec. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 64)) $ TYPE%alloc!alloc.Global.)) (verismo!global.spec_PCR.? (I 0))))))
(declare-fun ens%verismo!security.impl&%1.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (ret! Poly)) (! (= (ens%verismo!security.impl&%1.clone. self! ret!) (and (ens%core!clone.Clone.clone. $ TYPE%verismo!security.SecretsOSArea. self! ret!) (= ret! self!))) :pattern ((ens%verismo!security.impl&%1.clone. self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%verismo!security.SecretsOSArea.)) (has_type ret$ TYPE%verismo!security.SecretsOSArea.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!security.SecretsOSArea.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!security.SecretsOSArea.) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!security.SecretsOSArea. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%verismo!security.SecretsOSArea. ret$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%verismo!security.SecretsOSArea.) $ (TYPE%tuple%1. (REF $) TYPE%verismo!security.SecretsOSArea.) (F fndef_singleton) tmp%%$ ret$)))))
(assert (forall ((snphdr! Poly) (payload! Poly)) (! (=> (and (has_type snphdr! TYPE%verismo!security.secret.SnpGuestMsgHdr.) (has_type payload! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)))) (has_type (Poly%verismo!security.SnpGuestMsg. (verismo!security.impl&%11.spec_new.? snphdr! payload!)) TYPE%verismo!security.SnpGuestMsg.)) :pattern ((verismo!security.impl&%11.spec_new.? snphdr! payload!)))))
(assert (fuel_bool_default fuel%verismo!security.impl&%9.spec_snphdr.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%9.spec_snphdr.) (forall ((self! Poly)) (! (= (verismo!security.impl&%9.spec_snphdr.? self!) (verismo!security.SnpGuestMsg./SnpGuestMsg/snphdr (%Poly%verismo!security.SnpGuestMsg. self!))) :pattern ((verismo!security.impl&%9.spec_snphdr.? self!))))))
(assert (fuel_bool_default fuel%verismo!security.impl&%9.spec_payload.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%9.spec_payload.) (forall ((self! Poly)) (! (= (verismo!security.impl&%9.spec_payload.? self!) (verismo!security.SnpGuestMsg./SnpGuestMsg/payload (%Poly%verismo!security.SnpGuestMsg. self!))) :pattern ((verismo!security.impl&%9.spec_payload.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.SnpGuestMsg.) (has_type (verismo!security.impl&%9.spec_payload.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)))) :pattern ((verismo!security.impl&%9.spec_payload.? self!)))))
(declare-fun ens%verismo!security.impl&%11.axiom_spec_new. (verismo!security.secret.SnpGuestMsgHdr. Poly) Bool)
(assert (forall ((snphdr! verismo!security.secret.SnpGuestMsgHdr.) (payload! Poly)) (! (= (ens%verismo!security.impl&%11.axiom_spec_new. snphdr! payload!) (and (= (verismo!security.impl&%9.spec_snphdr.? (Poly%verismo!security.SnpGuestMsg. (verismo!security.impl&%11.spec_new.? (Poly%verismo!security.secret.SnpGuestMsgHdr. snphdr!) payload!))) snphdr!) (= (verismo!security.impl&%9.spec_payload.? (Poly%verismo!security.SnpGuestMsg. (verismo!security.impl&%11.spec_new.? (Poly%verismo!security.secret.SnpGuestMsgHdr. snphdr!) payload!))) payload!))) :pattern ((ens%verismo!security.impl&%11.axiom_spec_new. snphdr! payload!)))))
(assert (forall ((snphdr! Poly) (payload! Poly)) (! (=> (and (has_type snphdr! TYPE%verismo!security.secret.SnpGuestMsgHdr.) (has_type payload! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)))) (and (= (verismo!security.impl&%9.spec_snphdr.? (Poly%verismo!security.SnpGuestMsg. (verismo!security.impl&%11.spec_new.? snphdr! payload!))) (%Poly%verismo!security.secret.SnpGuestMsgHdr. snphdr!)) (= (verismo!security.impl&%9.spec_payload.? (Poly%verismo!security.SnpGuestMsg. (verismo!security.impl&%11.spec_new.? snphdr! payload!))) payload!))) :pattern ((verismo!security.impl&%11.spec_new.? snphdr! payload!)))))
(assert (fuel_bool_default fuel%verismo!security.impl&%14.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%14.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!security.SnpGuestMsg. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.SnpGuestMsg./SnpGuestMsg/snphdr (%Poly%verismo!security.SnpGuestMsg. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!security.SnpGuestMsg./SnpGuestMsg/payload (%Poly%verismo!security.SnpGuestMsg. self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!security.SnpGuestMsg. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!security.SnpGuestMsg. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (fuel_bool_default fuel%verismo!security.impl&%16.spec_snphdr_offset.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%16.spec_snphdr_offset.) (forall ((no%param Poly)) (! (= (verismo!security.impl&%16.spec_snphdr_offset.? no%param) 0) :pattern ((verismo!security.impl&%16.spec_snphdr_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!security.impl&%16.spec_snphdr_offset.? no%param))) :pattern ((verismo!security.impl&%16.spec_snphdr_offset.? no%param)))))
(declare-fun ens%verismo!security.impl&%16.axiom_field_snphdr. (verismo!security.SnpGuestMsg.) Bool)
(assert (forall ((self! verismo!security.SnpGuestMsg.)) (! (= (ens%verismo!security.impl&%16.axiom_field_snphdr. self!) (= (verismo!security.impl&%9.spec_snphdr.? (Poly%verismo!security.SnpGuestMsg. self!)) (%Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!tspec.cast.field_at.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.secret.SnpGuestMsgHdr. (Poly%verismo!security.SnpGuestMsg. self!) (I (verismo!security.impl&%16.spec_snphdr_offset.? (I 0))))))) :pattern ((ens%verismo!security.impl&%16.axiom_field_snphdr. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.SnpGuestMsg.) (= (verismo!security.impl&%9.spec_snphdr.? self!) (%Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!tspec.cast.field_at.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.secret.SnpGuestMsgHdr. self! (I (verismo!security.impl&%16.spec_snphdr_offset.? (I 0))))))) :pattern ((verismo!security.impl&%9.spec_snphdr.? self!)))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%20.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%20.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr.) (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 35)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))))))
(assert (fuel_bool_default fuel%verismo!security.impl&%16.spec_payload_offset.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%16.spec_payload_offset.) (forall ((no%param Poly)) (! (= (verismo!security.impl&%16.spec_payload_offset.? no%param) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 35)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))))) :pattern ((verismo!security.impl&%16.spec_payload_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!security.impl&%16.spec_payload_offset.? no%param))) :pattern ((verismo!security.impl&%16.spec_payload_offset.? no%param)))))
(declare-fun ens%verismo!security.impl&%16.axiom_field_payload. (verismo!security.SnpGuestMsg.) Bool)
(assert (forall ((self! verismo!security.SnpGuestMsg.)) (! (= (ens%verismo!security.impl&%16.axiom_field_payload. self!) (= (verismo!security.impl&%9.spec_payload.? (Poly%verismo!security.SnpGuestMsg. self!)) (verismo!tspec.cast.field_at.? $ TYPE%verismo!security.SnpGuestMsg. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)) (Poly%verismo!security.SnpGuestMsg. self!) (I (verismo!security.impl&%16.spec_payload_offset.? (I 0)))))) :pattern ((ens%verismo!security.impl&%16.axiom_field_payload. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.SnpGuestMsg.) (= (verismo!security.impl&%9.spec_payload.? self!) (verismo!tspec.cast.field_at.? $ TYPE%verismo!security.SnpGuestMsg. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)) self! (I (verismo!security.impl&%16.spec_payload_offset.? (I 0)))))) :pattern ((verismo!security.impl&%9.spec_payload.? self!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%2.spec_len.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%2.spec_len.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self!) (I (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!)))) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (BOX A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (BOX A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (RC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (RC A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (ARC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (ARC A&.) A& self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%8.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%8.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 16) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%16.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%16.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%18.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%18.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 128) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%22.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%22.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%36.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%36.view.) (forall ((A0&. Dcr) (A0& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%1. A0&. A0&) self!) (Poly%tuple%1. (tuple%1./tuple%1 (vstd!view.View.view.? A0&. A0& (tuple%1./tuple%1/0 (%Poly%tuple%1. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%1. A0&. A0&) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%38.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%38.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(assert (fuel_bool_default fuel%vstd!view.impl&%40.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%40.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.) (forall ((val! Poly)) (! (= (verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? val!) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I val!) 1) (= (%I val!) 2)) (= (%I val!) 4)) (= (%I val!) 8)) (= (%I val!) 16)) (= (%I val!) 32)) (= (%I val!) 64)) (= (%I val!) 128)) (= (%I val!) 256)) (= (%I val!) 512)) (= (%I val!) 1024)) (= (%I val!) 2048)) (= (%I val!) 4096)) (= (%I val!) 8192)) (= (%I val!) 16384)) (= (%I val!) 32768)) (= (%I val!) 65536)) (= (%I val!) 131072)) (= (%I val!) 262144)) (= (%I val!) 524288)) (= (%I val!) 1048576)) (= (%I val!) 2097152)) (= (%I val!) 4194304)) (= (%I val!) 8388608)) (= (%I val!) 16777216)) (= (%I val!) 33554432)) (= (%I val!) 67108864)) (= (%I val!) 134217728)) (= (%I val!) 268435456)) (= (%I val!) 536870912)) (= (%I val!) 1073741824)) (= (%I val!) 2147483648)) (= (%I val!) 4294967296)) (= (%I val!) 8589934592)) (= (%I val!) 17179869184)) (= (%I val!) 34359738368)) (= (%I val!) 68719476736)) (= (%I val!) 137438953472)) (= (%I val!) 274877906944)) (= (%I val!) 549755813888)) (= (%I val!) 1099511627776)) (= (%I val!) 2199023255552)) (= (%I val!) 4398046511104)) (= (%I val!) 8796093022208)) (= (%I val!) 17592186044416)) (= (%I val!) 35184372088832)) (= (%I val!) 70368744177664)) (= (%I val!) 140737488355328)) (= (%I val!) 281474976710656)) (= (%I val!) 562949953421312)) (= (%I val!) 1125899906842624)) (= (%I val!) 2251799813685248)) (= (%I val!) 4503599627370496)) (= (%I val!) 9007199254740992)) (= (%I val!) 18014398509481984)) (= (%I val!) 36028797018963968)) (= (%I val!) 72057594037927936)) (= (%I val!) 144115188075855872)) (= (%I val!) 288230376151711744)) (= (%I val!) 576460752303423488)) (= (%I val!) 1152921504606846976)) (= (%I val!) 2305843009213693952)) (= (%I val!) 4611686018427387904)) (= (%I val!) 9223372036854775808))) :pattern ((verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? val!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%92.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%92.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I 0)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%93.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%93.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I 0))))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%95.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%95.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (I 0)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%98.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%98.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (I 0)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%99.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%99.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (I 0))))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%101.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%101.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I 0)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%104.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%104.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (I 0)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%105.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%105.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (I 0))))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_not_u8_u8.))
(declare-fun %%lambda%%22 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (v1$ Poly)) (! (= (%%apply%%0 (%%lambda%%22 %%hole%%0 %%hole%%1) v1$) (I (uClip %%hole%%1 (uintnot %%hole%%0 (I (%I v1$)))))) :pattern ((%%apply%%0 (%%lambda%%22 %%hole%%0 %%hole%%1) v1$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_not_u8_u8.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_not_u8_u8.? no%param) (mk_fun (%%lambda%%22 8 8))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u8_u8.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u8_u8.? no%param)) (TYPE%fun%1. $ (UINT 8) $ (UINT 8)))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u8_u8.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%176.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%176.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ (UINT 8) self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (vstd!pervasive.arbitrary.? $ (UINT 8)))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? $ (UINT 8) $ (UINT 8) $ (UINT 8) (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u8_u8.? (I 0)))))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%177.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%177.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!)))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_not_u16_u16.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_not_u16_u16.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_not_u16_u16.? no%param) (mk_fun (%%lambda%%22 16 16))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u16_u16.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u16_u16.? no%param)) (TYPE%fun%1. $ (UINT 16) $ (UINT 16)))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u16_u16.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%250.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%250.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ (UINT 16) self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (vstd!pervasive.arbitrary.? $ (UINT 16)))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? $ (UINT 16) $ (UINT 16) $ (UINT 16) (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u16_u16.? (I 0)))))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%251.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%251.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!)))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_not_u32_u32.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_not_u32_u32.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_not_u32_u32.? no%param) (mk_fun (%%lambda%%22 32 32))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u32_u32.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u32_u32.? no%param)) (TYPE%fun%1. $ (UINT 32) $ (UINT 32)))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u32_u32.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%324.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%324.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ (UINT 32) self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (vstd!pervasive.arbitrary.? $ (UINT 32)))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? $ (UINT 32) $ (UINT 32) $ (UINT 32) (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u32_u32.? (I 0)))))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%325.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%325.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!)))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_not_u64_u64.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_not_u64_u64.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_not_u64_u64.? no%param) (mk_fun (%%lambda%%22 64 64))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u64_u64.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u64_u64.? no%param)) (TYPE%fun%1. $ (UINT 64) $ (UINT 64)))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u64_u64.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%398.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%398.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ (UINT 64) self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (vstd!pervasive.arbitrary.? $ (UINT 64)))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? $ (UINT 64) $ (UINT 64) $ (UINT 64) (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u64_u64.? (I 0)))))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%399.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%399.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!)))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_not_usize_usize.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_not_usize_usize.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_not_usize_usize.? no%param) (mk_fun (%%lambda%%22 SZ SZ))) :pattern ((verismo!tspec.fnspec.fn_spec_not_usize_usize.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_usize_usize.? no%param)) (TYPE%fun%1. $ (UINT SZ) $ (UINT SZ)))) :pattern ((verismo!tspec.fnspec.fn_spec_not_usize_usize.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%472.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%472.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ (UINT SZ) self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (vstd!pervasive.arbitrary.? $ (UINT SZ)))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? $ (UINT SZ) $ (UINT SZ) $ (UINT SZ) (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_usize_usize.? (I 0)))))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%473.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%473.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!)))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_not_bool_bool.))
(declare-fun %%lambda%%23 () %%Function%%)
(assert (forall ((v1$ Poly)) (! (= (%%apply%%0 %%lambda%%23 v1$) (B (not (%B v1$)))) :pattern ((%%apply%%0 %%lambda%%23 v1$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_not_bool_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_not_bool_bool.? no%param) (mk_fun %%lambda%%23)) :pattern ((verismo!tspec.fnspec.fn_spec_not_bool_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_bool_bool.? no%param)) (TYPE%fun%1. $ BOOL $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_not_bool_bool.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%476.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%476.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ BOOL M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ BOOL M&. M& $ BOOL $ BOOL self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ BOOL M&. M& (vstd!pervasive.arbitrary.? $ BOOL))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? $ BOOL $ BOOL $ BOOL (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_bool_bool.? (I 0)))))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ BOOL M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%477.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%477.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ BOOL M&. M& (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ BOOL M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& self!)))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%23.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%23.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%24.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%24.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%17.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%17.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int.))
(declare-fun %%lambda%%24 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%24 v1$ v2$) (I (Add (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%24 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param) (mk_fun %%lambda%%24)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%514.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%514.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%515.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%515.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param) (mk_fun %%lambda%%18)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%516.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%516.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%517.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%517.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.))
(declare-fun %%lambda%%25 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%25 v1$ v2$) (I (Mul (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%25 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? no%param) (mk_fun %%lambda%%25)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%518.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%518.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%519.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%519.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.))
(declare-fun %%lambda%%26 (Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 (%%lambda%%26 %%hole%%0) v1$ v2$) (I (uClip %%hole%%0 (EucDiv (%I v1$) (%I v2$))))) :pattern ((%%apply%%1 (%%lambda%%26 %%hole%%0) v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.? no%param) (mk_fun (%%lambda%%26 8))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ (UINT 8)))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%526.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%526.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ (UINT 8) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%527.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%527.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%534.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%534.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%535.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%535.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%31.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%31.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%32.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%32.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%26.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%26.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param) (mk_fun %%lambda%%24)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%568.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%568.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%569.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%569.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param) (mk_fun %%lambda%%18)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%570.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%570.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%571.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%571.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? no%param) (mk_fun %%lambda%%25)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%572.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%572.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%573.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%573.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.? no%param) (mk_fun (%%lambda%%26 16))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ (UINT 16)))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%580.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%580.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ (UINT 16) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%581.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%581.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%39.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%39.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%40.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%40.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%35.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%35.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param) (mk_fun %%lambda%%24)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%622.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%622.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%623.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%623.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param) (mk_fun %%lambda%%18)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%624.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%624.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%625.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%625.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? no%param) (mk_fun %%lambda%%25)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%626.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%626.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%627.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%627.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.? no%param) (mk_fun (%%lambda%%26 32))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ (UINT 32)))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%634.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%634.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ (UINT 32) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%635.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%635.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%642.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%642.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%643.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%643.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param) (mk_fun %%lambda%%24)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%676.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%676.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%677.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%677.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param) (mk_fun %%lambda%%18)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%678.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%678.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%679.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%679.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? no%param) (mk_fun %%lambda%%25)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%680.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%680.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%681.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%681.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.? no%param) (mk_fun (%%lambda%%26 64))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ (UINT 64)))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%688.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%688.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ (UINT 64) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%689.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%689.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param) (mk_fun %%lambda%%24)) :pattern ((verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%730.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%730.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%731.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%731.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? no%param) (mk_fun %%lambda%%25)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%734.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%734.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%735.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%735.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.? no%param) (mk_fun (%%lambda%%26 SZ))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%742.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%742.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ (UINT SZ) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%743.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%743.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%750.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%750.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%751.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%751.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%79.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%79.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%80.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%80.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%78.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%78.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%76.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%76.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%75.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%75.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%74.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%74.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%73.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%73.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.))
(declare-fun %%lambda%%27 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%27 v1$ v2$) (I (nClip (Add (%I v1$) (%I v2$))))) :pattern ((%%apply%%1 %%lambda%%27 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param) (mk_fun %%lambda%%27)) :pattern ((verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param)) (TYPE%fun%2. $ NAT $ NAT $ NAT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%780.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%780.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ NAT M&. M& $ NAT $ NAT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%781.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%781.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param) (mk_fun %%lambda%%18)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param)) (TYPE%fun%2. $ NAT $ NAT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%782.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%782.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ NAT M&. M& $ NAT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%783.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%783.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.))
(declare-fun %%lambda%%28 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%28 v1$ v2$) (I (nClip (Mul (%I v1$) (%I v2$))))) :pattern ((%%apply%%1 %%lambda%%28 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? no%param) (mk_fun %%lambda%%28)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? no%param)) (TYPE%fun%2. $ NAT $ NAT $ NAT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%784.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%784.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ NAT M&. M& $ NAT $ NAT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%785.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%785.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.))
(declare-fun %%lambda%%29 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%29 v1$ v2$) (I (nClip (EucDiv (%I v1$) (%I v2$))))) :pattern ((%%apply%%1 %%lambda%%29 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.? no%param) (mk_fun %%lambda%%29)) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.? no%param)) (TYPE%fun%2. $ NAT $ NAT $ NAT))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%786.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%786.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ NAT M&. M& $ NAT $ NAT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%787.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%787.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%790.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%790.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%791.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%791.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%71.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%71.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%68.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%68.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%67.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%67.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%66.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%66.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%65.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%65.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param) (mk_fun %%lambda%%24)) :pattern ((verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param)) (TYPE%fun%2. $ INT $ INT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%820.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%820.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ INT M&. M& $ INT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_int_int_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%821.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%821.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param) (mk_fun %%lambda%%18)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param)) (TYPE%fun%2. $ INT $ INT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%822.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%822.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ INT M&. M& $ INT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_int_int_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%823.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%823.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_int_int_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_int_int_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_int_int_int.? no%param) (mk_fun %%lambda%%25)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_int_int_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_int_int_int.? no%param)) (TYPE%fun%2. $ INT $ INT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_int_int_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%824.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%824.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ INT M&. M& $ INT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_int_int_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%825.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%825.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.))
(declare-fun %%lambda%%30 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%30 v1$ v2$) (I (EucDiv (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%30 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.? no%param) (mk_fun %%lambda%%30)) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.? no%param)) (TYPE%fun%2. $ INT $ INT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%826.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%826.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ INT M&. M& $ INT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%827.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%827.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.seqlib.seq_multiset.seq_is_sorted.))
(assert (=> (fuel_bool fuel%verismo!tspec.seqlib.seq_multiset.seq_is_sorted.) (forall ((T&. Dcr) (T& Type) (s! Poly) (speclt! Poly)) (! (= (verismo!tspec.seqlib.seq_multiset.seq_is_sorted.? T&. T& s! speclt!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (%I j$))) (< (%I j$) (vstd!seq.Seq.len.? T&. T& s!))) (not (%B (%%apply%%1 (%Poly%fun%2. speclt!) (vstd!seq.Seq.index.? T&. T& s! j$) (vstd!seq.Seq.index.? T&. T& s! i$)))))) :pattern ((vstd!seq.Seq.index.? T&. T& s! j$) (vstd!seq.Seq.index.? T&. T& s! i$))))) :pattern ((verismo!tspec.seqlib.seq_multiset.seq_is_sorted.? T&. T& s! speclt!))))))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.bool_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.bool_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.bool_to_stream.? data!) (verismo!tspec.stream.basic.u8_to_stream.? (I (ite (%B data!) 1 0)))) :pattern ((verismo!tspec.stream.basic.bool_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.char_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.char_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.char_to_stream.? data!) (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (char%to_unicode (%C data!)))))) :pattern ((verismo!tspec.stream.basic.char_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u128_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u128_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u128_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))) 256))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296)))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296)))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296))))) 65536))))) 256)))))))))))))))))) :pattern ((verismo!tspec.stream.basic.u128_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%14.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%14.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%15.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%15.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (I 0))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%16.wf.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%16.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%36.as_int.))
(define-fun is-verismo!arch.addr_s.def_s.PageSize./Size4k_ ((c verismo!arch.addr_s.def_s.PageSize.)) Bool ((_ is verismo!arch.addr_s.def_s.PageSize./Size4k) c))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%36.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. self!) (I (let ((val$ (ite (is-verismo!arch.addr_s.def_s.PageSize./Size4k_ (%Poly%verismo!arch.addr_s.def_s.PageSize. self!)) 0 1))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%38.spec_from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%38.spec_from_int.) (forall ((val! Poly)) (! (= (verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? val!) (ite (< (%I val!) 0) core!option.Option./None (ite (= (%I val!) 0) (core!option.Option./Some (Poly%verismo!arch.addr_s.def_s.PageSize. verismo!arch.addr_s.def_s.PageSize./Size4k)) (ite (= (%I val!) 1) (core!option.Option./Some (Poly%verismo!arch.addr_s.def_s.PageSize. verismo!arch.addr_s.def_s.PageSize./Size2m)) core!option.Option./None)))) :pattern ((verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%core!option.Option. (verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? val!)) (TYPE%core!option.Option. $ TYPE%verismo!arch.addr_s.def_s.PageSize.))) :pattern ((verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? val!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%36.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%36.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. val!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? val!))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. val!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%37.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%37.ord_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. self!) (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%4.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%4.from_int.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) val!) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) val!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%6.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%6.ord_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!) (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%7.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%7.ord_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!) (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.perm_s.impl&%1.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.perm_s.impl&%1.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) self!) (I (let ((v1$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Read)) 1 0))) (let ((v2$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write)) 2 0))) (let ((v3$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeU)) 4 0))) (let ((v4$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeS)) 8 0))) (let ((v5$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Shadow)) 16 0))) (Add (Add (Add (Add v1$ v2$) v3$) v4$) v5$)))))))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) self!))))))
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%21.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%21.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.idt.def.Idtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/limit (%Poly%verismo!boot.idt.def.Idtr. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/base (%Poly%verismo!boot.idt.def.Idtr. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.idt.def.Idtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%22.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%22.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.idt.def.Idtr.) (I (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))))))
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%25.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%25.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.idt.def.Idtr. self! vmpl!) (B (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/limit (%Poly%verismo!boot.idt.def.Idtr. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/limit (%Poly%verismo!boot.idt.def.Idtr. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/base (%Poly%verismo!boot.idt.def.Idtr. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/base (%Poly%verismo!boot.idt.def.Idtr. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.idt.def.Idtr. self! vmpl!))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%7.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%7.spec_eq.) (forall ((T&. Dcr) (T& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& T2&. T2& self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) (verismo!tspec.integer.IntOrd.ord_int.? T2&. T2& rhs!)))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& T2&. T2& self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.range_speclt.))
(declare-fun %%lambda%%31 (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Dcr) (%%hole%%15 Type) (%%hole%%16 Dcr) (%%hole%%17 Type) (%%hole%%18 Dcr) (%%hole%%19 Type) (%%hole%%20 Dcr) (%%hole%%21 Type) (%%hole%%22 Dcr) (%%hole%%23 Type) (v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 (%%lambda%%31 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23) v1$ v2$) (B (or (%B (B (< (%I (verismo!tspec.integer.IntOrd.ord_int.? %%hole%%2 %%hole%%3 (tuple%2./tuple%2/0 (%Poly%tuple%2. (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? %%hole%%0 %%hole%%1 v1$))))) (%I (verismo!tspec.integer.IntOrd.ord_int.? %%hole%%6 %%hole%%7 (tuple%2./tuple%2/0 (%Poly%tuple%2. (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? %%hole%%4 %%hole%%5 v2$)))))))) (and (%B (B (= (verismo!tspec.integer.IntOrd.ord_int.? %%hole%%10 %%hole%%11 (tuple%2./tuple%2/0 (%Poly%tuple%2. (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? %%hole%%8 %%hole%%9 v1$)))) (verismo!tspec.integer.IntOrd.ord_int.? %%hole%%14 %%hole%%15 (tuple%2./tuple%2/0 (%Poly%tuple%2. (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? %%hole%%12 %%hole%%13 v2$))))))) (%B (B (< (%I (verismo!tspec.integer.IntOrd.ord_int.? %%hole%%18 %%hole%%19 (tuple%2./tuple%2/1 (%Poly%tuple%2. (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? %%hole%%16 %%hole%%17 v1$))))) (%I (verismo!tspec.integer.IntOrd.ord_int.? %%hole%%22 %%hole%%23 (tuple%2./tuple%2/1 (%Poly%tuple%2. (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? %%hole%%20 %%hole%%21 v2$)))))))))))) :pattern ((%%apply%%1 (%%lambda%%31 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23) v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.range_speclt.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!addr_e.range_interface.range_speclt.? T&. T&) (mk_fun (%%lambda%%31 T&. T& $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) T&. T& $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) T&. T& $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) T&. T& $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) T&. T& $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) T&. T& $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.)))) :pattern ((verismo!addr_e.range_interface.range_speclt.? T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%fun%2. (verismo!addr_e.range_interface.range_speclt.? T&. T&)) (TYPE%fun%2. T&. T& T&. T& $ BOOL)) :pattern ((verismo!addr_e.range_interface.range_speclt.? T&. T&)))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.impl&%2.spec_max.))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.impl&%2.spec_max.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_max.? T&. T&) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT (verismo!addr_e.range_interface.MemRangeInterface.spec_end_max.? T&. T&))) :pattern ((verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_max.? T&. T&))))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.impl&%2.wf_range.))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.impl&%2.wf_range.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!addr_e.range_interface.GeneratedMemRangeInterface.wf_range.? T&. T& self!) (B (and (and (and (and (and (%B (B (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) (tuple%2./tuple%2/0 (%Poly%tuple%2. (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_valid_range.? T&. T& self!)))) (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) (tuple%2./tuple%2/0 (%Poly%tuple%2. (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? T&. T& self!))))))) (%B (B (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) (tuple%2./tuple%2/1 (%Poly%tuple%2. (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_valid_range.? T&. T& self!)))) (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) (tuple%2./tuple%2/1 (%Poly%tuple%2. (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? T&. T& self!)))))))) (not (%B (B (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) (tuple%2./tuple%2/1 (%Poly%tuple%2. (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_valid_range.? T&. T& self!)))) (I 0)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) (tuple%2./tuple%2/0 (%Poly%tuple%2. (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? T&. T& self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) (tuple%2./tuple%2/1 (%Poly%tuple%2. (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? T&. T& self!)))))) (<= (%I (I (Add (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range.? T&. T& self!)))) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range.? T&. T& self!))))))) (%I (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_max.? T&. T&)))))) :pattern ((verismo!addr_e.range_interface.GeneratedMemRangeInterface.wf_range.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.mem_range_formatted.))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.mem_range_formatted.) (forall ((T&. Dcr) (T& Type) (ret_seq! Poly)) (! (= (verismo!addr_e.range_interface.mem_range_formatted.? T&. T& ret_seq!) (and (and (and (verismo!tspec.seqlib.seq_multiset.seq_is_sorted.? T&. T& ret_seq! (Poly%fun%2. (verismo!addr_e.range_interface.range_speclt.? T&. T&))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& ret_seq!))) (%B (verismo!addr_e.range_interface.GeneratedMemRangeInterface.wf_range.? T&. T& (vstd!seq.Seq.index.? T&. T& ret_seq! i$))))) :pattern ((vstd!seq.Seq.index.? T&. T& ret_seq! i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& ret_seq!))) (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ INT $ NAT) (verismo!addr_e.range_interface.MemRangeSeqInterface.to_valid_ranges.? $ (TYPE%vstd!seq.Seq. T&. T&) ret_seq!) (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range.? T&. T& (vstd!seq.Seq.index.? T&. T& ret_seq! i$))))) :pattern ((verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range.? T&. T& (vstd!seq.Seq.index.? T&. T& ret_seq! i$)))))) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (%I j$))) (< (%I j$) (vstd!seq.Seq.len.? T&. T& ret_seq!))) (and (<= (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range.? T&. T& (vstd!seq.Seq.index.? T&. T& ret_seq! i$))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range.? T&. T& (vstd!seq.Seq.index.? T&. T& ret_seq! j$)))))) (<= (%I (I (Add (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range.? T&. T& (vstd!seq.Seq.index.? T&. T& ret_seq! i$))))) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range.? T&. T& (vstd!seq.Seq.index.? T&. T& ret_seq! i$)))))))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (verismo!addr_e.range_interface.GeneratedMemRangeInterface.spec_range.? T&. T& (vstd!seq.Seq.index.? T&. T& ret_seq! j$))))))))) :pattern ((vstd!seq.Seq.index.? T&. T& ret_seq! i$) (vstd!seq.Seq.index.? T&. T& ret_seq! j$)))))) :pattern ((verismo!addr_e.range_interface.mem_range_formatted.? T&. T& ret_seq!))))))
(assert (fuel_bool_default fuel%verismo!snp.trackedcore.snpmulticore.impl&%4.wf_core.))
(assert (=> (fuel_bool fuel%verismo!snp.trackedcore.snpmulticore.impl&%4.wf_core.) (forall ((self! Poly) (core! Poly)) (! (= (verismo!snp.trackedcore.snpmulticore.impl&%4.wf_core.? self! core!) (and (verismo!snp.trackedcore.snpmulticore.impl&%4.wf.? self!) (= (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. self!)))))))))) (%I core!)))) :pattern ((verismo!snp.trackedcore.snpmulticore.impl&%4.wf_core.? self! core!))))))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%8.wf.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%8.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!) (B (and (and (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/starting_gpn (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/numpages (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/mem_type (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/flags (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/reserved (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%10.spec_end_max.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%10.spec_end_max.) (= (verismo!addr_e.range_interface.MemRangeInterface.spec_end_max.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) (I verismo!arch.addr_s.def_s.VM_PAGE_NUM.?))))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%10.spec_real_range.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%10.spec_real_range.) (forall ((self! Poly)) (! (= (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!) (Poly%tuple%2. (tuple%2./tuple%2 (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/starting_gpn (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))))) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/numpages (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!))))))))) :pattern ((verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!))))))
(assert (tr_bound%verismo!addr_e.range_interface.MemRangeInterface. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%21.range.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%21.range.) (forall ((self! Poly)) (! (= (verismo!boot.mshyper.param_e.impl&%21.range.? self!) (tuple%2./tuple%2 (I (Mul (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/starting_gpn (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))))))) 4096)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/numpages (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))))))) 4096))))) :pattern ((verismo!boot.mshyper.param_e.impl&%21.range.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) (has_type (Poly%tuple%2. (verismo!boot.mshyper.param_e.impl&%21.range.? self!)) (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!boot.mshyper.param_e.impl&%21.range.? self!)))))
(assert (fuel_bool_default fuel%verismo!boot.init.mshv_alloc.init_allocator_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.init.mshv_alloc.init_allocator_requires.) (forall ((allocator! Poly) (hv_mem_tb! Poly) (e820! Poly) (static_start! Poly) (static_end! Poly) (memcc! Poly)) (! (= (verismo!boot.init.mshv_alloc.init_allocator_requires.? allocator! hv_mem_tb! e820! static_start! static_end! memcc!) (and (and (and (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator. allocator!)) (verismo!allocator.linkedlist.impl&%7.inv.? (Poly%verismo!allocator.linkedlist.SpecLinkedListAllocator. (verismo!allocator.linkedlist.impl&%8.view.? allocator!)))) (%B (B true))) (%B (B true))) (%B (verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with.? $ (UINT SZ) $ (UINT SZ) static_end! (I 0)))) (%B (verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with.? $ (UINT SZ) $ (UINT SZ) static_start! (I 1)))) (< (%I static_start!) (%I static_end!))) (verismo!addr_e.range_interface.mem_range_formatted.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. (vstd!slice.SliceAdditionalSpecFns.view.? $ (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. hv_mem_tb!))) (verismo!addr_e.range_interface.mem_range_formatted.? $ TYPE%verismo!boot.params.E820Entry. (vstd!slice.SliceAdditionalSpecFns.view.? $ (SLICE $ TYPE%verismo!boot.params.E820Entry.) $ TYPE%verismo!boot.params.E820Entry. e820!))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.params.E820Entry.) (vstd!slice.SliceAdditionalSpecFns.view.? $ (SLICE $ TYPE%verismo!boot.params.E820Entry.) $ TYPE%verismo!boot.params.E820Entry. e820!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) (vstd!slice.SliceAdditionalSpecFns.view.? $ (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. hv_mem_tb!)))) (verismo!mem.rawmem_s.impl&%0.wf.? memcc!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. (vstd!slice.SliceAdditionalSpecFns.view.? $ (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. hv_mem_tb!)))) (verismo!mem.rawmem_p.impl&%0.contains_with_snp_except.? (Poly%verismo!mem.rawmem_p.RawMemPerms. (verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/memperm (%Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. memcc!))) (Poly%tuple%2. (tuple%2./tuple%2 (I (Mul (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/starting_gpn (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. (vstd!seq.Seq.index.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. (vstd!slice.SliceAdditionalSpecFns.view.? $ (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. hv_mem_tb!) i$))))))))) 4096)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/numpages (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. (vstd!seq.Seq.index.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. (vstd!slice.SliceAdditionalSpecFns.view.? $ (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. hv_mem_tb!) i$))))))))) 4096))))) (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (vstd!set.impl&%0.insert.? $ (TYPE%tuple%2. $ INT $ NAT) (verismo!addr_e.range_interface.MemRangeSeqInterface.to_valid_ranges.? $ (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.params.E820Entry.) (vstd!slice.SliceAdditionalSpecFns.view.? $ (SLICE $ TYPE%verismo!boot.params.E820Entry.) $ TYPE%verismo!boot.params.E820Entry. e820!)) (Poly%tuple%2. (verismo!tspec.range_set.range.? static_start! static_end!)))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. (vstd!slice.SliceAdditionalSpecFns.view.? $ (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. hv_mem_tb!) i$)))))) :pattern ((verismo!boot.init.mshv_alloc.init_allocator_requires.? allocator! hv_mem_tb! e820! static_start! static_end! memcc!))))))
(assert (fuel_bool_default fuel%verismo!boot.init.mshv_alloc.impl&%0.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.init.mshv_alloc.impl&%0.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator. $ (TYPE%tuple%6. $ TYPE%verismo!boot.init.mshv_alloc.InitAllocFn. (REF $) (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) (REF $) (SLICE $ TYPE%verismo!boot.params.E820Entry.) $ (UINT SZ) $ (UINT SZ) (TRACKED $) TYPE%verismo!mem.rawmem_s.SnpMemCoreConsole.) (TRACKED $) TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. self! params!) (B (verismo!boot.init.mshv_alloc.init_allocator_requires.? self! (tuple%6./tuple%6/1 (%Poly%tuple%6. params!)) (tuple%6./tuple%6/2 (%Poly%tuple%6. params!)) (tuple%6./tuple%6/3 (%Poly%tuple%6. params!)) (tuple%6./tuple%6/4 (%Poly%tuple%6. params!)) (tuple%6./tuple%6/5 (%Poly%tuple%6. params!))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator. $ (TYPE%tuple%6. $ TYPE%verismo!boot.init.mshv_alloc.InitAllocFn. (REF $) (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) (REF $) (SLICE $ TYPE%verismo!boot.params.E820Entry.) $ (UINT SZ) $ (UINT SZ) (TRACKED $) TYPE%verismo!mem.rawmem_s.SnpMemCoreConsole.) (TRACKED $) TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.init.mshv_alloc.impl&%0.spec_update.))
(assert (=> (fuel_bool fuel%verismo!boot.init.mshv_alloc.impl&%0.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator. $ (TYPE%tuple%6. $ TYPE%verismo!boot.init.mshv_alloc.InitAllocFn. (REF $) (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) (REF $) (SLICE $ TYPE%verismo!boot.params.E820Entry.) $ (UINT SZ) $ (UINT SZ) (TRACKED $) TYPE%verismo!mem.rawmem_s.SnpMemCoreConsole.) (TRACKED $) TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. self! prev! params! ret!) (B (and (and (verismo!snp.trackedcore.snpmulticore.impl&%4.wf_core.? ret! (I (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. (verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/cc (%Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. (tuple%6./tuple%6/5 (%Poly%tuple%6. params!))))))))))))))))) (verismo!allocator.linkedlist.impl&%7.inv.? (Poly%verismo!allocator.linkedlist.SpecLinkedListAllocator. (verismo!allocator.linkedlist.impl&%8.view.? self!)))) (and (= (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. ret!)))) (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. (verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/cc (%Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. (tuple%6./tuple%6/5 (%Poly%tuple%6. params!)))))))) (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. ret!)))))))) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. ret!)))))))) (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. ret!))) (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. (Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. (verismo!mem.rawmem_s.SnpMemCoreConsole./SnpMemCoreConsole/cc (%Poly%verismo!mem.rawmem_s.SnpMemCoreConsole. (tuple%6./tuple%6/5 (%Poly%tuple%6. params!)))))))) (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.reg.RegName. (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.reg.RegName.) (Poly%verismo!arch.reg.RegName. (verismo!snp.ghcb.proto_e.GHCB_REGID.? (I 0))))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator. $ (TYPE%tuple%6. $ TYPE%verismo!boot.init.mshv_alloc.InitAllocFn. (REF $) (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) (REF $) (SLICE $ TYPE%verismo!boot.params.E820Entry.) $ (UINT SZ) $ (UINT SZ) (TRACKED $) TYPE%verismo!mem.rawmem_s.SnpMemCoreConsole.) (TRACKED $) TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%9.is_constant.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%9.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!) (B (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/starting_gpn (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/numpages (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/mem_type (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/flags (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/reserved (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%9.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%9.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self! vmpl!) (B (and (and (and (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/starting_gpn (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/starting_gpn (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/numpages (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/numpages (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/mem_type (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/mem_type (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/flags (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/flags (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/reserved (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/reserved (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self! vmpl!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%20.is_constant.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%20.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.mshyper.param_e.HvParamTable. self!) (B (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/cpu_count (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/reserved (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. $ (CONST_INT 128)) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/mem_table (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.mshyper.param_e.HvParamTable. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.init.mshv_fmt.impl&%0.spec_update_cs_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.init.mshv_fmt.impl&%0.spec_update_cs_requires.) (forall ((self! Poly) (params! Poly) (cs! Poly)) (! (= (verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs_requires.? $ TYPE%verismo!boot.mshyper.param_e.HvParamTable. $ TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. $ TYPE%verismo!boot.init.mshv_fmt.FmtHvParamCall. (REF $) (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) self! params! cs!) (B (and (verismo!snp.trackedcore.snpmulticore.impl&%4.wf.? cs!) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.mshyper.param_e.HvParamTable. self!))))) :pattern ((verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs_requires.? $ TYPE%verismo!boot.mshyper.param_e.HvParamTable. $ TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. $ TYPE%verismo!boot.init.mshv_fmt.FmtHvParamCall. (REF $) (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) self! params! cs!))))))
(assert (fuel_bool_default fuel%verismo!boot.init.mshv_fmt.impl&%0.spec_update_cs.))
(assert (=> (fuel_bool fuel%verismo!boot.init.mshv_fmt.impl&%0.spec_update_cs.) (forall ((self! Poly) (prev! Poly) (params! Poly) (oldcs! Poly) (ret! Poly) (cs! Poly)) (! (= (verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs.? $ TYPE%verismo!boot.mshyper.param_e.HvParamTable. $ TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. $ TYPE%verismo!boot.init.mshv_fmt.FmtHvParamCall. (REF $) (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) self! prev! params! oldcs! ret! cs!) (B (and (and (and (and (and (verismo!snp.trackedcore.snpmulticore.impl&%4.wf_core.? cs! (I (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. oldcs!)))))))))))) (= (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. cs!)) (verismo!snp.trackedcore.snpmulticore.SnpCoreConsole./SnpCoreConsole/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. oldcs!)))) (> (vstd!seq.Seq.len.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. (vstd!slice.SliceAdditionalSpecFns.view.? $ (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. ret!)) 0)) (verismo!addr_e.range_interface.mem_range_formatted.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. (vstd!slice.SliceAdditionalSpecFns.view.? $ (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. ret!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) (vstd!slice.SliceAdditionalSpecFns.view.? $ (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. ret!)))) (exists ((n$ Poly)) (! (and (has_type n$ NAT) (and (verismo!boot.init.mshv_fmt.get_hv_mem_count_ensures.? (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. $ (CONST_INT 128) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/mem_table (%Poly%verismo!boot.mshyper.param_e.HvParamTable. prev!))) n$) (verismo!boot.init.mshv_fmt.fmt_hvparam_ensures.? prev! self! n$ ret!))) :pattern ((verismo!boot.init.mshv_fmt.get_hv_mem_count_ensures.? (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. $ (CONST_INT 128) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/mem_table (%Poly%verismo!boot.mshyper.param_e.HvParamTable. prev!))) n$) (verismo!boot.init.mshv_fmt.fmt_hvparam_ensures.? prev! self! n$ ret!))))))) :pattern ((verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs.? $ TYPE%verismo!boot.mshyper.param_e.HvParamTable. $ TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. $ TYPE%verismo!boot.init.mshv_fmt.FmtHvParamCall. (REF $) (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) self! prev! params! oldcs! ret! cs!))))))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%5.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%5.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/starting_gpn (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/numpages (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/mem_type (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/flags (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.mshyper.param_e.HyperVMemMapEntry./HyperVMemMapEntry/reserved (%Poly%verismo!boot.mshyper.param_e.HyperVMemMapEntry. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%6.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%6.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32)))))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%16.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%16.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.mshyper.param_e.HvParamTable. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/cpu_count (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/reserved (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. $ (CONST_INT 128)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/mem_table (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.mshyper.param_e.HvParamTable. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%17.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%17.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.mshyper.param_e.HvParamTable.) (I (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 128)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.))))))))))))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%19.wf.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%19.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.mshyper.param_e.HvParamTable. self!) (B (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/cpu_count (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/reserved (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. $ (CONST_INT 128)) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/mem_table (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.mshyper.param_e.HvParamTable. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.mshyper.param_e.impl&%20.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!boot.mshyper.param_e.impl&%20.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.mshyper.param_e.HvParamTable. self! vmpl!) (B (and (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/cpu_count (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/cpu_count (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/reserved (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!)) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry. $ (CONST_INT 128)) (verismo!boot.mshyper.param_e.HvParamTable./HvParamTable/mem_table (%Poly%verismo!boot.mshyper.param_e.HvParamTable. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.mshyper.param_e.HvParamTable. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (I 8))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%55.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%55.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 64) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%12.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%12.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self! rhs!) (B (= (I (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. self!))) (I (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. rhs!)))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%14.wf.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%14.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%16.spec_new.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%16.spec_new.) (forall ((val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%16.spec_new.? val!) (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr (%I val!))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttr. (verismo!ptr.snp.snp_u.impl&%16.spec_new.? val!)) TYPE%verismo!ptr.snp.snp_u.RmpAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%17.spec_set_encrypted.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%17.spec_set_encrypted.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%17.spec_set_encrypted.? self! val!) (verismo!ptr.snp.snp_u.impl&%18.spec_new.? val! (B (verismo!ptr.snp.snp_u.impl&%19.spec_w.? self!)) (B (verismo!ptr.snp.snp_u.impl&%19.spec_x.? self!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%17.spec_set_encrypted.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%30.hw_snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%30.hw_snp.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. self!) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!)))) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%31.shared.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%31.shared.) (forall ((no%param Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%31.shared.? no%param) (let ((rmp_psp$ (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP (%B (B false)) (%B (B false)) (%B (B false)) (%B (B false)) (%I (I 0)) (%Poly%verismo!arch.addr_s.def_s.SpecPage. (vstd!pervasive.arbitrary.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (%Poly%verismo!arch.addr_s.def_s.PageSize. (Poly%verismo!arch.addr_s.def_s.PageSize. verismo!arch.addr_s.def_s.PageSize./Size4k)) (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (vstd!map.impl&%0.new.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) $ (TYPE%fun%1. $ TYPE%verismo!arch.entities.VMPL. $ BOOL) $ (TYPE%fun%1. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (Poly%fun%1. (mk_fun (%%lambda%%1 (B true)))) (Poly%fun%1. (mk_fun (%%lambda%%3 (vstd!set.impl&%0.full.? $ TYPE%verismo!arch.rmp.perm_s.Perm.) (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))))))) (verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%4.spec_set_val.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!arch.rmp.def_s.RmpEntry.) (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. rmp_psp$))))) (vstd!seq.Seq.push.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (vstd!seq.Seq.empty.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr.) (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%17.spec_set_encrypted.? (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr.) (B false))))))) :pattern ((verismo!ptr.snp.snp_u.impl&%31.shared.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%31.shared.? no%param)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%31.shared.? no%param)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%35.sw_eq.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%35.sw_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%35.sw_eq.? self! rhs!) (= (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!)) (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. rhs!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%35.sw_eq.? self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%34.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%34.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. self! rhs!) (B (= (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!)) (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. rhs!))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_updated.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_updated.) (forall ((self! Poly) (prev! Poly) (regs! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.only_reg_updated.? self! prev! regs!) (and (and (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? self! prev! regs!) (=> (vstd!set_lib.impl&%0.is_empty.? $ TYPE%verismo!arch.reg.RegName. regs!) (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. prev!))))) (= (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!) (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? prev! (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.only_reg_updated.? self! prev! regs!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (I 8))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%12.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%12.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self! rhs!) (B (= (I (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!))) (I (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. rhs!)))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%13.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%13.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%13.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%13.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%14.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%14.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_new.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_new.) (forall ((val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_new.? val!) (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7 (%I val!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.impl&%16.spec_new.? val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%28.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%28.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (I 8))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%29.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%29.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self! rhs!) (B (= (I (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!))) (I (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. rhs!)))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%30.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%30.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%30.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%30.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%31.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%31.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.spec_new.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.spec_new.) (forall ((val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.spec_new.? val!) (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11 (%I val!))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.impl&%33.spec_new.? val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%37.empty.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%37.empty.) (forall ((no%param Poly)) (! (= (verismo!snp.cpu.gdt.impl&%37.empty.? no%param) (verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (I 0))) (I 0))) (I 0))) (I 0))) (I 0))) (I 0))) :pattern ((verismo!snp.cpu.gdt.impl&%37.empty.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%37.empty.? no%param)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%37.empty.? no%param)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%45.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%45.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.gdt.Descriptor.) (I 8))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%46.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%46.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. $ TYPE%verismo!snp.cpu.gdt.Descriptor. self! rhs!) (B (= (I (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!))) (I (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. rhs!)))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. $ TYPE%verismo!snp.cpu.gdt.Descriptor. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%47.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%47.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%47.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%47.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%48.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%48.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_new.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_new.) (forall ((val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_new.? val!) (verismo!snp.cpu.gdt.Descriptor./Descriptor (%I val!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.impl&%50.spec_new.? val!)) TYPE%verismo!snp.cpu.gdt.Descriptor.)) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%56.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%56.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/base (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%57.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%57.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.gdt.Gdtr.) (I (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%60.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%60.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self! vmpl!) (B (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (%Poly%verismo!snp.cpu.gdt.Gdtr. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/base (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/base (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (I 8))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%12.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%12.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self! rhs!) (B (= (I (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!))) (I (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. rhs!)))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%14.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%14.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_new.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_new.) (forall ((val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_new.? val!) (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures (%I val!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.vmsa.SevFeatures. (verismo!snp.cpu.vmsa.impl&%16.spec_new.? val!)) TYPE%verismo!snp.cpu.vmsa.SevFeatures.)) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_vmpl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_vmpl.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%26.spec_set_vmpl.? self! val!) (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_es.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_cs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_ss.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_ds.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_fs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_gs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? self!) val! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_efer.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rip.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%26.spec_set_vmpl.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type val! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))) (has_type (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%26.spec_set_vmpl.? self! val!)) TYPE%verismo!snp.cpu.vmsa.Vmsa.)) :pattern ((verismo!snp.cpu.vmsa.impl&%26.spec_set_vmpl.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rax.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rax.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%26.spec_set_rax.? self! val!) (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_es.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_cs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_ss.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_ds.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_fs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_gs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? self!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_efer.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rip.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? self!) val! (verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%26.spec_set_rax.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type val! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))) (has_type (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%26.spec_set_rax.? self! val!)) TYPE%verismo!snp.cpu.vmsa.Vmsa.)) :pattern ((verismo!snp.cpu.vmsa.impl&%26.spec_set_rax.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rcx.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rcx.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%26.spec_set_rcx.? self! val!) (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_es.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_cs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_ss.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_ds.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_fs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_gs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? self!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_efer.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rip.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? self!) val! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%26.spec_set_rcx.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type val! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))) (has_type (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%26.spec_set_rcx.? self! val!)) TYPE%verismo!snp.cpu.vmsa.Vmsa.)) :pattern ((verismo!snp.cpu.vmsa.impl&%26.spec_set_rcx.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rdx.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rdx.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%26.spec_set_rdx.? self! val!) (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_es.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_cs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_ss.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_ds.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_fs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_gs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? self!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_efer.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rip.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? self!)) val! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%26.spec_set_rdx.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type val! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))) (has_type (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%26.spec_set_rdx.? self! val!)) TYPE%verismo!snp.cpu.vmsa.Vmsa.)) :pattern ((verismo!snp.cpu.vmsa.impl&%26.spec_set_rdx.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rbx.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_rbx.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%26.spec_set_rbx.? self! val!) (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_es.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_cs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_ss.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_ds.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_fs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_gs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? self!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_efer.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rip.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? self!)) val! (verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%26.spec_set_rbx.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type val! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))) (has_type (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%26.spec_set_rbx.? self! val!)) TYPE%verismo!snp.cpu.vmsa.Vmsa.)) :pattern ((verismo!snp.cpu.vmsa.impl&%26.spec_set_rbx.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_guest_error_code.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%26.spec_set_guest_error_code.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%26.spec_set_guest_error_code.? self! val!) (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_es.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_cs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_ss.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_ds.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_fs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_gs.? self!)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? self!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_efer.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rip.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? self!)) val! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? self!)) (verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%26.spec_set_guest_error_code.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type val! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))) (has_type (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%26.spec_set_guest_error_code.? self! val!)) TYPE%verismo!snp.cpu.vmsa.Vmsa.)) :pattern ((verismo!snp.cpu.vmsa.impl&%26.spec_set_guest_error_code.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%32.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%32.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa.) (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 90)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 4)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 88)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 24)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 104)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 152)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 8)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 24)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 3088)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%35.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%35.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyvmpl. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyvmpl. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! params!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%35.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%35.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyvmpl. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! params! ret!) (B (= (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. ret!)))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyvmpl. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%37.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%37.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updatevmpl. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updatevmpl. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%37.spec_update.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%37.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updatevmpl. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (verismo!snp.cpu.vmsa.impl&%26.spec_set_vmpl.? prev! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Updatevmpl./Updatevmpl/val (%Poly%verismo!snp.cpu.vmsa.Updatevmpl. params!))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updatevmpl. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%39.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%39.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrax. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrax. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%39.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%39.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrax. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params! ret!) (B (= (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. ret!)))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrax. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%41.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%41.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updaterax. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updaterax. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%41.spec_update.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%41.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updaterax. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (verismo!snp.cpu.vmsa.impl&%26.spec_set_rax.? prev! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Updaterax./Updaterax/val (%Poly%verismo!snp.cpu.vmsa.Updaterax. params!))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updaterax. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%43.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%43.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrcx. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrcx. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%43.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%43.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrcx. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params! ret!) (B (= (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. ret!)))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrcx. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%45.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%45.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updatercx. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updatercx. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%45.spec_update.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%45.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updatercx. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (verismo!snp.cpu.vmsa.impl&%26.spec_set_rcx.? prev! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Updatercx./Updatercx/val (%Poly%verismo!snp.cpu.vmsa.Updatercx. params!))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updatercx. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%47.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%47.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrdx. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrdx. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%47.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%47.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrdx. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params! ret!) (B (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. ret!)))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrdx. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%49.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%49.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updaterdx. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updaterdx. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%49.spec_update.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%49.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updaterdx. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (verismo!snp.cpu.vmsa.impl&%26.spec_set_rdx.? prev! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Updaterdx./Updaterdx/val (%Poly%verismo!snp.cpu.vmsa.Updaterdx. params!))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updaterdx. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%51.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%51.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrbx. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrbx. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%51.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%51.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrbx. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params! ret!) (B (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. ret!)))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyrbx. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%53.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%53.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updaterbx. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updaterbx. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%53.spec_update.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%53.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updaterbx. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (verismo!snp.cpu.vmsa.impl&%26.spec_set_rbx.? prev! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Updaterbx./Updaterbx/val (%Poly%verismo!snp.cpu.vmsa.Updaterbx. params!))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updaterbx. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%55.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%55.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyguest_error_code. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyguest_error_code. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%55.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%55.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyguest_error_code. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params! ret!) (B (= (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. ret!)))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Copyguest_error_code. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%57.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%57.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updateguest_error_code. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updateguest_error_code. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%57.spec_update.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%57.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updateguest_error_code. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (verismo!snp.cpu.vmsa.impl&%26.spec_set_guest_error_code.? prev! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Updateguest_error_code./Updateguest_error_code/val (%Poly%verismo!snp.cpu.vmsa.Updateguest_error_code. params!))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.Updateguest_error_code. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%6.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%6.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 32) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%61.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%61.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.PerCpuData. self!) (B (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/secret (%Poly%verismo!snp.cpu.vmsa.PerCpuData. self!))))) (%B (B true))) (%B (B true))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.PerCpuData. self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%6.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%6.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 32) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 32) self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%61.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%61.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.PerCpuData. self! vmpl!) (B (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/secret (%Poly%verismo!snp.cpu.vmsa.PerCpuData. self!))) vmpl!)) (%B (B true))) (%B (B true))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.PerCpuData. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%7.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%7.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 32) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%62.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%62.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.PerCpuData. self!) (B (and (and (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/secret (%Poly%verismo!snp.cpu.vmsa.PerCpuData. self!))))) (%B (B true))) (%B (B true))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.PerCpuData. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%63.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%63.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.vmsa.PerCpuData.) (I (nClip (Add (nClip (Add 8 (%I (I 4)))) (%I (I 4))))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%15 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%15 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%64.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%64.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.PerCpuData. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I 0)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/cpu (%Poly%verismo!snp.cpu.vmsa.PerCpuData. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/resvd (%Poly%verismo!snp.cpu.vmsa.PerCpuData. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.PerCpuData. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%33.wf_mastersecret.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%33.wf_mastersecret.) (forall ((self! Poly)) (! (= (verismo!security.secret.impl&%33.wf_mastersecret.? self!) (and (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. self!)) (verismo!security.secret.impl&%33.closed_wf_mastersecret.? self!))) :pattern ((verismo!security.secret.impl&%33.wf_mastersecret.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%65.inv.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%65.inv.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%65.inv.? self!) (and (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.PerCpuData. self!)) (verismo!security.secret.impl&%33.wf_mastersecret.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!snp.cpu.vmsa.PerCpuData./PerCpuData/secret (%Poly%verismo!snp.cpu.vmsa.PerCpuData. self!)))))) :pattern ((verismo!snp.cpu.vmsa.impl&%65.inv.? self!))))))
(assert (fuel_bool_default fuel%verismo!bsp.impl&%0.inv_ac.))
(assert (=> (fuel_bool fuel%verismo!bsp.impl&%0.inv_ac.) (forall ((self! Poly)) (! (= (verismo!bsp.impl&%0.inv_ac.? self!) (verismo!snp.trackedcore.snpmulticore.impl&%3.inv.? self!)) :pattern ((verismo!bsp.impl&%0.inv_ac.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_updated.))
(assert (=> (fuel_bool fuel%verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_updated.) (forall ((self! Poly) (prev! Poly) (regs! Poly) (locks! Poly)) (! (= (verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_updated.? self! prev! regs! locks!) (and (%B (verismo!lock.spin_perm_s.MapRawLockTrait.updated_lock.? $ (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!lock.spin_perm_s.LockPermRaw.) (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) (Poly%vstd!map.Map<int./verismo!lock.spin_perm_s.LockPermRaw.>. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/lockperms (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. prev!))) locks!)) (and (and (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))) (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. prev!))) regs!) (=> (vstd!set_lib.impl&%0.is_empty.? $ TYPE%verismo!arch.reg.RegName. regs!) (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))))) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. prev!)))))))) (= (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!)))) (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. prev!))) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem./SnpCoreSharedMem/snpcore (%Poly%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. self!))))))))))) :pattern ((verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_updated.? self! prev! regs! locks!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.ensures_init_ap_vmsa.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.ensures_init_ap_vmsa.) (forall ((vmsa! Poly) (new_vmsa! Poly) (cpu! Poly) (cs! Poly) (newcs! Poly)) (! (= (verismo!snp.cpu.vmsa.ensures_init_ap_vmsa.? vmsa! new_vmsa! cpu! cs! newcs!) (and (and (and (and (and (verismo!bsp.impl&%0.inv_ac.? newcs!) (verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_updated.? newcs! cs! (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.reg.RegName.) (vstd!set.impl&%0.insert.? $ INT (vstd!set.impl&%0.empty.? $ INT) (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR)))))))))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. vmsa!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. new_vmsa!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi (%Poly%verismo!snp.cpu.vmsa.Vmsa. new_vmsa!))))))) (verismo!vbox.vbox.impl&%6.id.? $ TYPE%verismo!snp.cpu.vmsa.PerCpuData. cpu!))) (not (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp (%Poly%verismo!snp.cpu.vmsa.Vmsa. new_vmsa!))))))) 0))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. new_vmsa!))))))) 0))) :pattern ((verismo!snp.cpu.vmsa.ensures_init_ap_vmsa.? vmsa! new_vmsa! cpu! cs! newcs!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!snp.cpu.vmsa.PerCpuData.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!snp.cpu.vmsa.PerCpuData.))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.requires_init_ap_vmsa.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.requires_init_ap_vmsa.) (forall ((cpu! Poly) (gdt! Poly) (cs! Poly)) (! (= (verismo!snp.cpu.vmsa.requires_init_ap_vmsa.? cpu! gdt! cs!) (and (and (and (verismo!bsp.impl&%0.inv_ac.? cs!) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (verismo!tspec_e.array.array_t.impl&%2.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32) gdt!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!vbox.vbox.VBox. $ TYPE%verismo!snp.cpu.vmsa.PerCpuData.) cpu!))) (verismo!snp.cpu.vmsa.impl&%65.inv.? (verismo!vbox.vbox.impl&%6.view.? $ TYPE%verismo!snp.cpu.vmsa.PerCpuData. cpu!)))) :pattern ((verismo!snp.cpu.vmsa.requires_init_ap_vmsa.? cpu! gdt! cs!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%66.spec_update_cs_requires.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%66.spec_update_cs_requires.) (forall ((self! Poly) (params! Poly) (cs! Poly)) (! (= (verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. $ TYPE%verismo!snp.cpu.vmsa.InitAPParams. $ (UINT 8) self! params! cs!) (B (verismo!snp.cpu.vmsa.requires_init_ap_vmsa.? (Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>. (verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/cpu (%Poly%verismo!snp.cpu.vmsa.InitAPParams. params!))) (verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/gdt (%Poly%verismo!snp.cpu.vmsa.InitAPParams. params!)) cs!))) :pattern ((verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. $ TYPE%verismo!snp.cpu.vmsa.InitAPParams. $ (UINT 8) self! params! cs!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%66.spec_update_cs.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%66.spec_update_cs.) (forall ((self! Poly) (prev! Poly) (params! Poly) (oldcs! Poly) (ret! Poly) (cs! Poly)) (! (= (verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. $ TYPE%verismo!snp.cpu.vmsa.InitAPParams. $ (UINT 8) self! prev! params! oldcs! ret! cs!) (B (verismo!snp.cpu.vmsa.ensures_init_ap_vmsa.? prev! self! (Poly%verismo!vbox.vbox.VBox<verismo!snp.cpu.vmsa.PerCpuData.>. (verismo!snp.cpu.vmsa.InitAPParams./InitAPParams/cpu (%Poly%verismo!snp.cpu.vmsa.InitAPParams. params!))) oldcs! cs!))) :pattern ((verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. $ TYPE%verismo!snp.cpu.vmsa.InitAPParams. $ (UINT 8) self! prev! params! oldcs! ret! cs!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%67.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%67.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.UpdateVMPL. $ (UINT 8) self! params!) (B (let ((tmp%%$ (verismo!snp.cpu.vmsa.UpdateVMPL./UpdateVMPL/vmpl (%Poly%verismo!snp.cpu.vmsa.UpdateVMPL. params!)))) (and (<= 0 tmp%%$) (< tmp%%$ 4))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.UpdateVMPL. $ (UINT 8) self! params!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%38.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%38.spec_eq.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 8) self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%67.spec_update.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%67.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.UpdateVMPL. $ (UINT 8) self! prev! params! ret!) (B (and (and (%B (B (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (I (verismo!snp.cpu.vmsa.UpdateVMPL./UpdateVMPL/vmpl (%Poly%verismo!snp.cpu.vmsa.UpdateVMPL. params!)))))) (= (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (verismo!snp.cpu.vmsa.impl&%26.spec_set_vmpl.? prev! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.UpdateVMPL. $ (UINT 8) self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%70.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%70.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%71.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%71.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut.) (I 0))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%73.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%73.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%74.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%74.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%74.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%74.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%75.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%75.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. self! params!) (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)) (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/gdt (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. params!)))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. self! params!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%15.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%15.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 64) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%62.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%62.spec_eq.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 64) self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%75.spec_update.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%75.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. self! prev! params! ret!) (B (let ((gdt$ (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/gdt (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. params!)))) (let ((vmpl$ (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. params!)))) (let ((gdtr_addr$ (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/gdtr_addr (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. params!)))) (let ((bp_addr$ (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/bp_addr (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. params!)))) (let ((kernel_addr$ (verismo!snp.cpu.vmsa.UpdateRichOSVmsa./UpdateRichOSVmsa/kernel_addr (%Poly%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. params!)))) (and (and (and (and (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. prev!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. self!))) (%B (B (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))))) (I gdtr_addr$))))) (%B (B (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (I vmpl$))))) (%B (B (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (I kernel_addr$))))) (%B (B (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (I bp_addr$)))))))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsa. $ TYPE%verismo!snp.cpu.vmsa.UpdateRichOSVmsaOut. self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_s.SM_TERM_INVALID_PARAM.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_s.SM_TERM_INVALID_PARAM.) (= verismo!snp.ghcb.proto_s.SM_TERM_INVALID_PARAM.? 7)))
(assert (uInv 64 verismo!snp.ghcb.proto_s.SM_TERM_INVALID_PARAM.?))
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_s.SM_TERM_MEM.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_s.SM_TERM_MEM.) (= verismo!snp.ghcb.proto_s.SM_TERM_MEM.? 17)))
(assert (uInv 64 verismo!snp.ghcb.proto_s.SM_TERM_MEM.?))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%9.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%9.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 8) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.vec.impl&%2.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.vec.impl&%2.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) self!))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%23.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%23.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!security.mem.OSMemEntry. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/start_page (%Poly%verismo!security.mem.OSMemEntry. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/npages (%Poly%verismo!security.mem.OSMemEntry. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/osperm (%Poly%verismo!security.mem.OSMemEntry. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!security.mem.OSMemEntry. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!security.mem.OSMemEntry. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%7.spec_valid_pn_with.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%7.spec_valid_pn_with.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self! size!) (B (let ((start$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. self!))))))) (and (%B (verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? $ INT (I start$) size!)) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT SZ) self!))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self! size!))))))
(assert (fuel_bool_default fuel%verismo!security.mem.RICHOS_VMPL.))
(assert (=> (fuel_bool fuel%verismo!security.mem.RICHOS_VMPL.) (= verismo!security.mem.RICHOS_VMPL.? 1)))
(assert (uInv 8 verismo!security.mem.RICHOS_VMPL.?))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%19.to_page_perm.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%19.to_page_perm.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%19.to_page_perm.? self!) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (verismo!tspec.integer.IntValue.from_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (I (verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. self!)))))) :pattern ((verismo!security.mem.impl&%19.to_page_perm.? self!))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%18.ram.? no%param)) TYPE%verismo!security.mem.OSMemPermSpec.)) :pattern ((verismo!security.mem.impl&%18.ram.? no%param)))))
(assert (fuel_bool_default fuel%verismo!security.mem.os_mem_valid_snp.))
(assert (=> (fuel_bool fuel%verismo!security.mem.os_mem_valid_snp.) (forall ((osperm! Poly) (snp! Poly)) (! (= (verismo!security.mem.os_mem_valid_snp.? osperm! snp!) (let ((pte$ (verismo!ptr.snp.snp_u.impl&%27.pte.? snp!))) (let ((rmp$ (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. snp!)))))) (let ((rmp_perm$ (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. rmp$)))) (verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.entities.VMPL. (I verismo!security.mem.RICHOS_VMPL.?)))))) (ite (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. rmp$)) (and (and (ext_eq true (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. rmp_perm$) (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (verismo!security.mem.impl&%19.to_page_perm.? osperm!))) (verismo!ptr.snp.snp_u.impl&%31.wf.? snp!)) (verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.? (Poly%verismo!ptr.snp.snp_u.PTAttr. pte$))) (and (and (= (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. snp!) (verismo!ptr.snp.snp_u.impl&%31.shared.? (I 0))) (= (verismo!security.mem.impl&%16.view.? osperm!) (verismo!security.mem.impl&%18.ram.? (I 0)))) (not (verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.? (Poly%verismo!ptr.snp.snp_u.PTAttr. pte$))))))))) :pattern ((verismo!security.mem.os_mem_valid_snp.? osperm! snp!))))))
(assert (fuel_bool_default fuel%verismo!security.mem.spec_contains_page_perm.))
(assert (=> (fuel_bool fuel%verismo!security.mem.spec_contains_page_perm.) (forall ((page_perms! Poly) (i! Poly) (osperm! Poly)) (! (= (verismo!security.mem.spec_contains_page_perm.? page_perms! i! osperm!) (let ((page_perm$ (verismo!ptr.raw_ptr_s.impl&%4.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms! i!)))) (and (and (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) i!) (verismo!ptr.raw_ptr_s.impl&%5.wf_not_null.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. page_perm$) (Poly%tuple%2. (tuple%2./tuple%2 (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i!) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?))))) (verismo!security.mem.os_mem_valid_snp.? osperm! (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. page_perm$)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. page_perm$))) (I verismo!security.mem.RICHOS_VMPL.?)))))) :pattern ((verismo!security.mem.spec_contains_page_perm.? page_perms! i! osperm!))))))
(assert (fuel_bool_default fuel%verismo!security.mem.spec_contains_page_perms.))
(declare-fun %%lambda%%32 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%32 %%hole%%0 %%hole%%1) i$) (B (and (<= %%hole%%0 (%I i$)) (< (%I i$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%32 %%hole%%0 %%hole%%1) i$)))))
(assert (=> (fuel_bool fuel%verismo!security.mem.spec_contains_page_perms.) (forall ((page_perms! Poly) (start_page! Poly) (npages! Poly) (osperm! Poly)) (! (= (verismo!security.mem.spec_contains_page_perms.? page_perms! start_page! npages! osperm!) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) i$) (verismo!security.mem.spec_contains_page_perm.? page_perms! i$ osperm!))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) i$)))) (ext_eq true (TYPE%vstd!set.Set. $ INT) (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) (vstd!set.impl&%0.new.? $ INT $ (TYPE%fun%1. $ INT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%32 (%I start_page!) (Add (%I start_page!) (%I npages!))))))))) :pattern ((verismo!security.mem.spec_contains_page_perms.? page_perms! start_page! npages! osperm!))))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%16.spec_new.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%16.spec_new.) (forall ((val! Poly)) (! (= (verismo!security.mem.impl&%16.spec_new.? val!) (verismo!security.mem.OSMemPerm./OSMemPerm (%I val!))) :pattern ((verismo!security.mem.impl&%16.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 8)) (has_type (Poly%verismo!security.mem.OSMemPerm. (verismo!security.mem.impl&%16.spec_new.? val!)) TYPE%verismo!security.mem.OSMemPerm.)) :pattern ((verismo!security.mem.impl&%16.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%28.spec_osperm.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%28.spec_osperm.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%28.spec_osperm.? self!) (verismo!security.mem.impl&%16.spec_new.? (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/osperm (%Poly%verismo!security.mem.OSMemEntry. self!))))))))) :pattern ((verismo!security.mem.impl&%28.spec_osperm.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!security.mem.OSMemEntry.) (has_type (Poly%verismo!security.mem.OSMemPerm. (verismo!security.mem.impl&%28.spec_osperm.? self!)) TYPE%verismo!security.mem.OSMemPerm.)) :pattern ((verismo!security.mem.impl&%28.spec_osperm.? self!)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%28.open_wf.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%28.open_wf.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%28.open_wf.? self!) (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!security.mem.OSMemEntry. self!)) (%B (verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/start_page (%Poly%verismo!security.mem.OSMemEntry. self!))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/npages (%Poly%verismo!security.mem.OSMemEntry. self!)))))))))) (verismo!security.mem.spec_contains_page_perms.? (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. (verismo!security.mem.OSMemEntry./OSMemEntry/page_perms (%Poly%verismo!security.mem.OSMemEntry. self!))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/start_page (%Poly%verismo!security.mem.OSMemEntry. self!))))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/npages (%Poly%verismo!security.mem.OSMemEntry. self!))))))) (Poly%verismo!security.mem.OSMemPerm. (verismo!security.mem.impl&%28.spec_osperm.? self!))))) :pattern ((verismo!security.mem.impl&%28.open_wf.? self!))))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%28.wf.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%28.wf.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%28.wf.? self!) (and (verismo!security.mem.impl&%28.closed_wf.? self!) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!security.mem.OSMemEntry. self!)))) :pattern ((verismo!security.mem.impl&%28.wf.? self!))))))
(assert (fuel_bool_default fuel%verismo!security.mem.osmem_wf.))
(assert (=> (fuel_bool fuel%verismo!security.mem.osmem_wf.) (forall ((osmem! Poly)) (! (= (verismo!security.mem.osmem_wf.? osmem!) (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. $ TYPE%verismo!security.mem.OSMemEntry.) osmem!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%verismo!security.mem.OSMemEntry. osmem!))) (verismo!security.mem.impl&%28.wf.? (vstd!seq.Seq.index.? $ TYPE%verismo!security.mem.OSMemEntry. osmem! i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%verismo!security.mem.OSMemEntry. osmem! i$)))))) :pattern ((verismo!security.mem.osmem_wf.? osmem!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (fuel_bool_default fuel%verismo!vbox.vbox.impl&%4.is_page.))
(assert (=> (fuel_bool fuel%verismo!vbox.vbox.impl&%4.is_page.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!vbox.vbox.impl&%4.is_page.? T&. T& self!) (and (= (EucMod (verismo!vbox.vbox.impl&%6.id.? T&. T& self!) verismo!arch.addr_s.def_s.PAGE_SIZE.?) 0) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) self!)))) :pattern ((verismo!vbox.vbox.impl&%4.is_page.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_e.impl&%3.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_e.impl&%3.spec_update_requires.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%verismo!tspec_e.array.array_e.ArrayUpdate. T&. T&) T&. T& self! params!) (B (let ((index$ (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/index (%Poly%verismo!tspec_e.array.array_e.ArrayUpdate. params!)))) (let ((val$ (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/val (%Poly%verismo!tspec_e.array.array_e.ArrayUpdate. params!)))) (< index$ (const_int N&)))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%verismo!tspec_e.array.array_e.ArrayUpdate. T&. T&) T&. T& self! params!))))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_e.impl&%3.spec_update.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_e.impl&%3.spec_update.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%verismo!tspec_e.array.array_e.ArrayUpdate. T&. T&) T&. T& self! prev! params! ret!) (B (let ((index$ (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/index (%Poly%verismo!tspec_e.array.array_e.ArrayUpdate. params!)))) (let ((val$ (verismo!tspec_e.array.array_e.ArrayUpdate./ArrayUpdate/val (%Poly%verismo!tspec_e.array.array_e.ArrayUpdate. params!)))) (and (and (= (vstd!seq.Seq.index.? T&. T& (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) (I index$)) val$) (= ret! (vstd!seq.Seq.index.? T&. T& (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& prev!) (I index$)))) (= (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) (vstd!seq.Seq.update.? T&. T& (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& prev!) (I index$) (vstd!seq.Seq.index.? T&. T& (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) (I index$))))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%verismo!tspec_e.array.array_e.ArrayUpdate. T&. T&) T&. T& self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%1.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%1.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (SLICE T&. T&) self!) (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. T&. T&) (vstd!slice.SliceAdditionalSpecFns.view.? $ (SLICE T&. T&) T&. T& self!))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (SLICE T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%1.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%1.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (SLICE T&. T&) self! vmpl!) (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. T&. T&) (vstd!slice.SliceAdditionalSpecFns.view.? $ (SLICE T&. T&) T&. T& self!) vmpl!)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (SLICE T&. T&) self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%2.vspec_cast_to.))
(declare-fun %%choose%%2 (Type Dcr Type Dcr Type Poly Dcr Type Dcr Type) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type)) (! (=> (exists ((ret$ Poly)) (! (and (has_type ret$ %%hole%%0) (= %%hole%%5 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 ret$))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 ret$)))) (exists ((ret$ Poly)) (! (and (and (has_type ret$ %%hole%%0) (= %%hole%%5 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 ret$))) (= (%%choose%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9) ret$)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 ret$))))) :pattern ((%%choose%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9)))))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%2.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8) self!) (as_type (%%choose%%2 (UINT 8) $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%4.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%4.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 16) self!) (as_type (%%choose%%2 (UINT 16) $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 16))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%6.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 32) self!) (as_type (%%choose%%2 (UINT 32) $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 32))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%8.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%8.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 64) self!) (as_type (%%choose%%2 (UINT 64) $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 64))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%9.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%9.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))) 256))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296)))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296)))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296))))) 65536))))) 256))))))))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%10.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%10.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 128) self!) (as_type (%%choose%%2 (UINT 128) $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 128))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%12.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%12.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT SZ) self!) (as_type (%%choose%%2 (UINT SZ) $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT SZ))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%13.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%13.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (char%to_unicode (%C self!))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%14.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%14.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ CHAR self!) (as_type (%%choose%%2 CHAR $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8))) CHAR)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ CHAR self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%15.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%15.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (ite (%B self!) 1 0))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%16.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%16.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ BOOL self!) (as_type (%%choose%%2 BOOL $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8))) BOOL)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%21.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%21.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%29.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%29.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%37.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%37.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%45.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%45.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%49.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%49.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%50.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%50.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%51.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%51.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%52.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%52.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%53.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%53.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%54.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%54.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%55.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%55.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%56.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%56.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%61.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%61.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%69.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%69.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%77.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%77.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%81.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%81.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%82.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%82.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 8) self!) (as_type (%%choose%%2 (UINT 8) $ (UINT 8) $ BOOL self! $ (UINT 8) $ BOOL) (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%83.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%83.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%84.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%84.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 16) self!) (as_type (%%choose%%2 (UINT 16) $ (UINT 16) $ BOOL self! $ (UINT 16) $ BOOL) (UINT 16))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%85.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%85.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%86.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%86.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 32) self!) (as_type (%%choose%%2 (UINT 32) $ (UINT 32) $ BOOL self! $ (UINT 32) $ BOOL) (UINT 32))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%87.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%87.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%88.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%88.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 64) self!) (as_type (%%choose%%2 (UINT 64) $ (UINT 64) $ BOOL self! $ (UINT 64) $ BOOL) (UINT 64))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%89.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%89.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%90.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%90.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 128) self!) (as_type (%%choose%%2 (UINT 128) $ (UINT 128) $ BOOL self! $ (UINT 128) $ BOOL) (UINT 128))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%91.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%91.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%92.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%92.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT SZ) self!) (as_type (%%choose%%2 (UINT SZ) $ (UINT SZ) $ BOOL self! $ (UINT SZ) $ BOOL) (UINT SZ))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%93.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%93.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%94.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%94.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ INT self!) (as_type (%%choose%%2 INT $ INT $ BOOL self! $ INT $ BOOL) INT)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%95.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%95.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%96.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%96.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ NAT self!) (as_type (%%choose%%2 NAT $ NAT $ BOOL self! $ NAT $ BOOL) NAT)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%97.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%97.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (UINT 8) self!) (I (uClip 8 (char%to_unicode (%C self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%98.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%98.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%99.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%99.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%100.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%100.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%101.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%101.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%1.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%1.spec_default.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? (GHOST T&.) T&) (vstd!pervasive.arbitrary.? (GHOST T&.) T&)) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? (GHOST T&.) T&))))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%2.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%2.spec_default.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? (TRACKED T&.) T&) (vstd!pervasive.arbitrary.? (TRACKED T&.) T&)) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? (TRACKED T&.) T&))))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%3.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%3.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT 64)) (I (uClip 64 0)))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%4.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%4.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT 32)) (I (uClip 32 0)))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%5.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%5.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT 16)) (I (uClip 16 0)))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%6.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%6.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT 8)) (I (uClip 8 0)))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%8.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%8.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ INT) (I 0))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%9.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%9.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ NAT) (I 0))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%2.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%2.is_constant_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self! vmpl!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T1&. T1& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)) vmpl!)) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T2&. T2& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%3.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%3.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? (GHOST T&.) T& self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? (GHOST T&.) T& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%3.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%3.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? (GHOST T&.) T& self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? (GHOST T&.) T& self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%4.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%4.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? (TRACKED T&.) T& self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? (TRACKED T&.) T& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%4.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%4.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? (TRACKED T&.) T& self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? (TRACKED T&.) T& self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%7.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%7.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 16) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%7.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%7.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 16) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 16) self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%9.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%9.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 8) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 8) self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%10.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%10.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ BOOL self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%10.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%10.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ BOOL self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ BOOL self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%11.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%11.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ CHAR self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ CHAR self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%11.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%11.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ CHAR self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ CHAR self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.ops.impl&%0.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.ops.impl&%0.spec_not.) (forall ((self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 64) self!) (I (uClip 64 (uintnot 64 (I (%I self!)))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.ops.impl&%1.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.ops.impl&%1.spec_not.) (forall ((self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 32) self!) (I (uClip 32 (uintnot 32 (I (%I self!)))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.ops.impl&%2.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.ops.impl&%2.spec_not.) (forall ((self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 16) self!) (I (uClip 16 (uintnot 16 (I (%I self!)))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.ops.impl&%3.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.ops.impl&%3.spec_not.) (forall ((self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT SZ) self!) (I (uClip SZ (uintnot SZ (I (%I self!)))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.ops.impl&%4.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.ops.impl&%4.spec_not.) (forall ((self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 8) self!) (I (uClip 8 (uintnot 8 (I (%I self!)))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.ops.impl&%5.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.ops.impl&%5.spec_not.) (forall ((self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ BOOL self!) (B (not (%B self!)))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%2.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%2.spec_sub.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& T1&. T1& $ INT self! rhs!) (I (Sub (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& rhs!))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& T1&. T1& $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%3.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%3.spec_euclidean_div.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? T1&. T1& $ INT T1&. T1& self! rhs!) (verismo!tspec.integer.IntValue.from_int.? T1&. T1& (I (EucDiv (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? T1&. T1& $ INT T1&. T1& self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%5.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%5.spec_mul.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? T1&. T1& $ INT T1&. T1& self! rhs!) (verismo!tspec.integer.IntValue.from_int.? T1&. T1& (I (Mul (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? T1&. T1& $ INT T1&. T1& self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%6.spec_gt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%6.spec_gt.) (forall ((T&. Dcr) (T& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& T2&. T2& self! rhs!) (B (> (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I (verismo!tspec.integer.IntOrd.ord_int.? T2&. T2& rhs!))))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& T2&. T2& self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%8.spec_lt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%8.spec_lt.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& $ INT self! rhs!) (B (< (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%8.spec_le.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%8.spec_le.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& $ INT self! rhs!) (B (<= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%8.spec_gt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%8.spec_gt.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& $ INT self! rhs!) (B (> (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%9.spec_lt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%9.spec_lt.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& $ NAT self! rhs!) (B (< (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%9.spec_gt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%9.spec_gt.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& $ NAT self! rhs!) (B (> (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%10.spec_lt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%10.spec_lt.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& $ (UINT 8) self! rhs!) (B (< (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%10.spec_le.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%10.spec_le.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& $ (UINT 8) self! rhs!) (B (<= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%10.spec_gt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%10.spec_gt.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& $ (UINT 8) self! rhs!) (B (> (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%11.spec_lt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%11.spec_lt.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& $ (UINT 16) self! rhs!) (B (< (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%11.spec_le.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%11.spec_le.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& $ (UINT 16) self! rhs!) (B (<= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%11.spec_gt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%11.spec_gt.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& $ (UINT 16) self! rhs!) (B (> (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%12.spec_lt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%12.spec_lt.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& $ (UINT 32) self! rhs!) (B (< (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%12.spec_le.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%12.spec_le.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& $ (UINT 32) self! rhs!) (B (<= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%12.spec_gt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%12.spec_gt.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& $ (UINT 32) self! rhs!) (B (> (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%13.spec_lt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%13.spec_lt.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& $ (UINT 64) self! rhs!) (B (< (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%13.spec_le.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%13.spec_le.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& $ (UINT 64) self! rhs!) (B (<= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%13.spec_gt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%13.spec_gt.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& $ (UINT 64) self! rhs!) (B (> (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%14.spec_lt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%14.spec_lt.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& $ (UINT SZ) self! rhs!) (B (< (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_lt.? T&. T& $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%14.spec_le.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%14.spec_le.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& $ (UINT SZ) self! rhs!) (B (<= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_le.? T&. T& $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%14.spec_gt.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%14.spec_gt.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& $ (UINT SZ) self! rhs!) (B (> (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_gt.? T&. T& $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%16.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%16.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 32) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%17.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%17.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 16) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%18.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%18.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 8) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%23.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%23.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 64) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%24.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%24.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 32) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%25.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%25.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 16) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%26.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%26.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 8) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%27.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%27.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT SZ) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%31.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%31.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 64) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%32.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%32.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 32) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%33.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%33.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 16) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%34.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%34.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 8) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%35.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%35.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT SZ) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%36.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%36.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ INT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%37.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%37.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ NAT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%39.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%39.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 64) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%40.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%40.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 32) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%41.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%41.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 16) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%42.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%42.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 8) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%43.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%43.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT SZ) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%44.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%44.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ INT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%45.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%45.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ NAT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%46.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%46.spec_eq.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 16) self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%47.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%47.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 64) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%48.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%48.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 32) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%49.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%49.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 16) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%50.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%50.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 8) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%51.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%51.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT SZ) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%52.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%52.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ INT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%53.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%53.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ NAT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%54.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%54.spec_eq.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 32) self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%56.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%56.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 32) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%57.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%57.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 16) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%58.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%58.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 8) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%59.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%59.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT SZ) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%60.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%60.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ INT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%61.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%61.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ NAT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%63.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%63.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 64) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%64.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%64.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 32) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%65.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%65.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 16) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%66.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%66.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 8) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%67.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%67.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT SZ) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%68.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%68.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ INT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%71.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%71.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%tuple%0. $ TYPE%tuple%0. self! rhs!) (B true)) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%tuple%0. $ TYPE%tuple%0. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%9.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%9.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 128)) (I 16))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%14.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%14.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ BOOL) (I 1))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%15.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%15.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ CHAR) (I 1))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%17.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%17.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? (GHOST T&.) T&) (I 0)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? (GHOST T&.) T&))))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%18.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%18.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? (TRACKED T&.) T&) (I 0)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? (TRACKED T&.) T&))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%1.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%1.wf.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!) (B (and (%B (verismo!tspec.wellformed.WellFormed.wf.? T1&. T1& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T2&. T2& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%2.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%2.wf.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%tuple%3. T1&. T1& T2&. T2& T3&. T3&) self!) (B (and (and (%B (verismo!tspec.wellformed.WellFormed.wf.? T1&. T1& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T2&. T2& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T3&. T3& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%tuple%3. T1&. T1& T2&. T2& T3&. T3&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%4.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%4.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? (GHOST T&.) T& self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? (GHOST T&.) T& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%5.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%5.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? (TRACKED T&.) T& self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? (TRACKED T&.) T& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%8.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%8.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 16) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%10.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%10.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 8) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%11.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%11.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ BOOL self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%12.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%12.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ CHAR self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ CHAR self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%15 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%15 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.vec.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.vec.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) self!) (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) self!))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.vec.impl&%4.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.vec.impl&%4.spec_update_requires.) (forall ((T&. Dcr) (T& Type) (self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) $ (TYPE%verismo!primitives_e.vec.PushParam. T&. T&) $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) $ (TYPE%verismo!primitives_e.vec.PushParam. T&. T&) $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.vec.impl&%4.spec_update.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.vec.impl&%4.spec_update.) (forall ((T&. Dcr) (T& Type) (self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) $ (TYPE%verismo!primitives_e.vec.PushParam. T&. T&) $ BOOL self! prev! params! ret!) (B (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) self!) (vstd!seq.Seq.push.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) prev!) (verismo!primitives_e.vec.PushParam./PushParam/val (%Poly%verismo!primitives_e.vec.PushParam. params!)))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) $ (TYPE%verismo!primitives_e.vec.PushParam. T&. T&) $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%2.spec_to_page.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%2.spec_to_page.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_to_page.? $ (UINT 64) $ (UINT 64) self!) (I (let ((s$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?))))) (uClip 64 (EucDiv (%I self!) s$))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_to_page.? $ (UINT 64) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%2.addrt_to_int.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%2.addrt_to_int.) (forall ((v! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (UINT 64) $ (UINT 64) v!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT v!)) :pattern ((verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (UINT 64) $ (UINT 64) v!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%2.spec_ensures_to_page.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%2.spec_ensures_to_page.) (forall ((self! Poly) (ret! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_ensures_to_page.? $ (UINT 64) $ (UINT 64) self! ret!) (B (and (and (%B (B true)) (=> (%B (B true)) (%B (B true)))) (= (%I (verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (UINT 64) $ (UINT 64) ret!)) (EucDiv (%I (verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (UINT 64) $ (UINT 64) self!)) 4096))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_ensures_to_page.? $ (UINT 64) $ (UINT 64) self! ret!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%2.spec_valid_addr_with.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%2.spec_valid_addr_with.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with.? $ (UINT 64) $ (UINT 64) self! size!) (B (let ((start$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!)))) (and (%B (verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with.? $ INT (I start$) size!)) (%B (B true)))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with.? $ (UINT 64) $ (UINT 64) self! size!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%2.spec_check_valid_addr_requires.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%2.spec_check_valid_addr_requires.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_check_valid_addr_requires.? $ (UINT 64) $ (UINT 64) self! size!) (B (and (%B (B true)) (%B (B true))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_check_valid_addr_requires.? $ (UINT 64) $ (UINT 64) self! size!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%3.spec_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%3.spec_to_addr.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (UINT 64) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) (I (Mul (%I self!) (uClip 64 verismo!arch.addr_s.def_s.PAGE_SIZE.?))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (UINT 64) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%3.paget_to_int.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%3.paget_to_int.) (forall ((v! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT 64) $ (UINT 64) v!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT v!)) :pattern ((verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT 64) $ (UINT 64) v!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%3.spec_ensures_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%3.spec_ensures_to_addr.) (forall ((self! Poly) (ret! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (UINT 64) $ (UINT 64) self! ret!) (B (and (and (%B (B true)) (=> (%B (B true)) (%B (B true)))) (= (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT 64) $ (UINT 64) ret!)) (Mul (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT 64) $ (UINT 64) self!)) 4096))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (UINT 64) $ (UINT 64) self! ret!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%3.spec_valid_pn_with.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%3.spec_valid_pn_with.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (UINT 64) $ (UINT 64) self! size!) (B (let ((start$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!)))) (and (%B (verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? $ INT (I start$) size!)) (%B (B true)))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (UINT 64) $ (UINT 64) self! size!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%4.spec_to_page.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%4.spec_to_page.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_to_page.? $ (UINT SZ) $ (UINT SZ) self!) (I (let ((s$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?))))) (uClip SZ (EucDiv (%I self!) s$))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_to_page.? $ (UINT SZ) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%4.addrt_to_int.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%4.addrt_to_int.) (forall ((v! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (UINT SZ) $ (UINT SZ) v!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT v!)) :pattern ((verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (UINT SZ) $ (UINT SZ) v!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%4.spec_ensures_to_page.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%4.spec_ensures_to_page.) (forall ((self! Poly) (ret! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_ensures_to_page.? $ (UINT SZ) $ (UINT SZ) self! ret!) (B (and (and (%B (B true)) (=> (%B (B true)) (%B (B true)))) (= (%I (verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (UINT SZ) $ (UINT SZ) ret!)) (EucDiv (%I (verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (UINT SZ) $ (UINT SZ) self!)) 4096))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_ensures_to_page.? $ (UINT SZ) $ (UINT SZ) self! ret!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%4.spec_check_valid_addr_requires.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%4.spec_check_valid_addr_requires.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_check_valid_addr_requires.? $ (UINT SZ) $ (UINT SZ) self! size!) (B (and (%B (B true)) (%B (B true))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_check_valid_addr_requires.? $ (UINT SZ) $ (UINT SZ) self! size!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%5.spec_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%5.spec_to_addr.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (UINT SZ) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) (I (Mul (%I self!) (uClip SZ verismo!arch.addr_s.def_s.PAGE_SIZE.?))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (UINT SZ) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%5.paget_to_int.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%5.paget_to_int.) (forall ((v! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT SZ) $ (UINT SZ) v!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT v!)) :pattern ((verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT SZ) $ (UINT SZ) v!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%5.spec_ensures_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%5.spec_ensures_to_addr.) (forall ((self! Poly) (ret! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (UINT SZ) $ (UINT SZ) self! ret!) (B (and (and (%B (B true)) (=> (%B (B true)) (%B (B true)))) (= (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT SZ) $ (UINT SZ) ret!)) (Mul (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT SZ) $ (UINT SZ) self!)) 4096))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (UINT SZ) $ (UINT SZ) self! ret!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%6.spec_to_page.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%6.spec_to_page.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_to_page.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self!) (let ((s$ (%Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?)))))))) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. s$)))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_to_page.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%6.addrt_to_int.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%6.addrt_to_int.) (forall ((v! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) v!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. v!))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) v!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%6.spec_ensures_to_page.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%6.spec_ensures_to_page.) (forall ((self! Poly) (ret! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_ensures_to_page.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self! ret!) (B (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT SZ) ret!) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) ret!)))) (= (%I (verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) ret!)) (EucDiv (%I (verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self!)) 4096))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_ensures_to_page.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self! ret!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%6.spec_valid_addr_with.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%6.spec_valid_addr_with.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self! size!) (B (let ((start$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. self!))))))) (and (%B (verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with.? $ INT (I start$) size!)) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT SZ) self!))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self! size!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%6.spec_check_valid_addr_requires.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%6.spec_check_valid_addr_requires.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_check_valid_addr_requires.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self! size!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) size!))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_check_valid_addr_requires.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self! size!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%7.spec_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%7.spec_to_addr.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT $ TYPE%tuple%0.) $ INT $ TYPE%tuple%0. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT $ TYPE%tuple%0. (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?)))))))))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%7.paget_to_int.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%7.paget_to_int.) (forall ((v! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) v!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. v!))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) v!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%7.spec_ensures_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%7.spec_ensures_to_addr.) (forall ((self! Poly) (ret! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self! ret!) (B (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT SZ) ret!) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) ret!)))) (= (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) ret!)) (Mul (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self!)) 4096))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self! ret!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%8.spec_to_page.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%8.spec_to_page.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_to_page.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self!) (let ((s$ (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?)))))))) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) $ TYPE%tuple%0. (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. s$)))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_to_page.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%8.addrt_to_int.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%8.addrt_to_int.) (forall ((v! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) v!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. v!))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) v!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%8.spec_ensures_to_page.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%8.spec_ensures_to_page.) (forall ((self! Poly) (ret! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_ensures_to_page.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! ret!) (B (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) ret!) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) ret!)))) (= (%I (verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) ret!)) (EucDiv (%I (verismo!addr_e.addr_interface.AddrTrait.addrt_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self!)) 4096))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_ensures_to_page.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! ret!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%8.spec_valid_addr_with.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%8.spec_valid_addr_with.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! size!) (B (let ((start$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. self!))))))) (and (%B (verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with.? $ INT (I start$) size!)) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) self!))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_valid_addr_with.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! size!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%8.spec_check_valid_addr_requires.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%8.spec_check_valid_addr_requires.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.AddrTrait.spec_check_valid_addr_requires.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! size!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) size!))))) :pattern ((verismo!addr_e.addr_interface.AddrTrait.spec_check_valid_addr_requires.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! size!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%9.spec_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%9.spec_to_addr.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT $ TYPE%tuple%0.) $ INT $ TYPE%tuple%0. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT $ TYPE%tuple%0. (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?)))))))))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%9.paget_to_int.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%9.paget_to_int.) (forall ((v! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) v!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. v!))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) v!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%9.spec_ensures_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%9.spec_ensures_to_addr.) (forall ((self! Poly) (ret! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! ret!) (B (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) ret!) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) ret!)))) (= (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) ret!)) (Mul (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self!)) 4096))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! ret!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%9.spec_valid_pn_with.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%9.spec_valid_pn_with.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! size!) (B (let ((start$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. self!))))))) (and (%B (verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? $ INT (I start$) size!)) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) self!))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! size!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.impl&%0.spec_end_max.))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.impl&%0.spec_end_max.) (= (verismo!addr_e.range_interface.MemRangeInterface.spec_end_max.? $ (TYPE%tuple%2. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (I verismo!arch.addr_s.def_s.VM_MEM_SIZE.?)))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.impl&%0.spec_real_range.))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.impl&%0.spec_real_range.) (forall ((self! Poly)) (! (= (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? $ (TYPE%tuple%2. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.)) self!) self!) :pattern ((verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? $ (TYPE%tuple%2. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.impl&%1.spec_end_max.))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.impl&%1.spec_end_max.) (= (verismo!addr_e.range_interface.MemRangeInterface.spec_end_max.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (I verismo!arch.addr_s.def_s.VM_MEM_SIZE.?)))))
(assert (fuel_bool_default fuel%verismo!addr_e.range_interface.impl&%1.spec_real_range.))
(assert (=> (fuel_bool fuel%verismo!addr_e.range_interface.impl&%1.spec_real_range.) (forall ((self! Poly)) (! (= (verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) self!) (Poly%tuple%2. (tuple%2./tuple%2 (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)))))) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))))) :pattern ((verismo!addr_e.range_interface.MemRangeInterface.spec_real_range.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) self!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!linkedlist.LinkedList. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!linkedlist.LinkedList. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&)) (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!linkedlist.LinkedList. T&. T&))) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!linkedlist.LinkedList. T&. T&))))))
(assert (fuel_bool_default fuel%verismo!allocator.linkedlist.impl&%8.spec_minsize.))
(assert (=> (fuel_bool fuel%verismo!allocator.linkedlist.impl&%8.spec_minsize.) (forall ((no%param Poly)) (! (= (verismo!allocator.linkedlist.impl&%8.spec_minsize.? no%param) (verismo!tspec.size_s.spec_size.? $ (TYPE%verismo!linkedlist.Node. $ (UINT SZ)))) :pattern ((verismo!allocator.linkedlist.impl&%8.spec_minsize.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!allocator.linkedlist.impl&%8.spec_minsize.? no%param))) :pattern ((verismo!allocator.linkedlist.impl&%8.spec_minsize.? no%param)))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%1.spec_set_bp.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%1.spec_set_bp.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!boot.linux.impl&%1.spec_set_bp.? self! val!) (verismo!boot.linux.impl&%2.spec_new.? val! (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!boot.linux.impl&%0.spec_secret.? self!)) (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.impl&%0.spec_cpuid.? self!)) (verismo!boot.linux.impl&%0.spec_gdt.? self!) (verismo!boot.linux.impl&%0.spec_cmdline.? self!) (Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!boot.linux.impl&%0.spec_ccblob.? self!)) (verismo!boot.linux.impl&%0.spec_reserved.? self!))) :pattern ((verismo!boot.linux.impl&%1.spec_set_bp.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!boot.linux.BootInfo.) (has_type val! TYPE%verismo!boot.params.BootParams.)) (has_type (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%1.spec_set_bp.? self! val!)) TYPE%verismo!boot.linux.BootInfo.)) :pattern ((verismo!boot.linux.impl&%1.spec_set_bp.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%1.spec_set_secret.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%1.spec_set_secret.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!boot.linux.impl&%1.spec_set_secret.? self! val!) (verismo!boot.linux.impl&%2.spec_new.? (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.impl&%0.spec_bp.? self!)) val! (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.impl&%0.spec_cpuid.? self!)) (verismo!boot.linux.impl&%0.spec_gdt.? self!) (verismo!boot.linux.impl&%0.spec_cmdline.? self!) (Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!boot.linux.impl&%0.spec_ccblob.? self!)) (verismo!boot.linux.impl&%0.spec_reserved.? self!))) :pattern ((verismo!boot.linux.impl&%1.spec_set_secret.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!boot.linux.BootInfo.) (has_type val! TYPE%verismo!security.secret.SnpSecretsPageLayout.)) (has_type (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%1.spec_set_secret.? self! val!)) TYPE%verismo!boot.linux.BootInfo.)) :pattern ((verismo!boot.linux.impl&%1.spec_set_secret.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%1.spec_set_cpuid.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%1.spec_set_cpuid.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!boot.linux.impl&%1.spec_set_cpuid.? self! val!) (verismo!boot.linux.impl&%2.spec_new.? (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.impl&%0.spec_bp.? self!)) (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!boot.linux.impl&%0.spec_secret.? self!)) val! (verismo!boot.linux.impl&%0.spec_gdt.? self!) (verismo!boot.linux.impl&%0.spec_cmdline.? self!) (Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!boot.linux.impl&%0.spec_ccblob.? self!)) (verismo!boot.linux.impl&%0.spec_reserved.? self!))) :pattern ((verismo!boot.linux.impl&%1.spec_set_cpuid.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!boot.linux.BootInfo.) (has_type val! TYPE%verismo!snp.cpuid.SnpCpuidTable.)) (has_type (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%1.spec_set_cpuid.? self! val!)) TYPE%verismo!boot.linux.BootInfo.)) :pattern ((verismo!boot.linux.impl&%1.spec_set_cpuid.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%1.spec_set_gdt.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%1.spec_set_gdt.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!boot.linux.impl&%1.spec_set_gdt.? self! val!) (verismo!boot.linux.impl&%2.spec_new.? (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.impl&%0.spec_bp.? self!)) (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!boot.linux.impl&%0.spec_secret.? self!)) (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.impl&%0.spec_cpuid.? self!)) val! (verismo!boot.linux.impl&%0.spec_cmdline.? self!) (Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!boot.linux.impl&%0.spec_ccblob.? self!)) (verismo!boot.linux.impl&%0.spec_reserved.? self!))) :pattern ((verismo!boot.linux.impl&%1.spec_set_gdt.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!boot.linux.BootInfo.) (has_type val! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)))) (has_type (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%1.spec_set_gdt.? self! val!)) TYPE%verismo!boot.linux.BootInfo.)) :pattern ((verismo!boot.linux.impl&%1.spec_set_gdt.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%1.spec_set_cmdline.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%1.spec_set_cmdline.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!boot.linux.impl&%1.spec_set_cmdline.? self! val!) (verismo!boot.linux.impl&%2.spec_new.? (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.impl&%0.spec_bp.? self!)) (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!boot.linux.impl&%0.spec_secret.? self!)) (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.impl&%0.spec_cpuid.? self!)) (verismo!boot.linux.impl&%0.spec_gdt.? self!) val! (Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!boot.linux.impl&%0.spec_ccblob.? self!)) (verismo!boot.linux.impl&%0.spec_reserved.? self!))) :pattern ((verismo!boot.linux.impl&%1.spec_set_cmdline.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!boot.linux.BootInfo.) (has_type val! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)))) (has_type (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%1.spec_set_cmdline.? self! val!)) TYPE%verismo!boot.linux.BootInfo.)) :pattern ((verismo!boot.linux.impl&%1.spec_set_cmdline.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%1.spec_set_ccblob.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%1.spec_set_ccblob.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!boot.linux.impl&%1.spec_set_ccblob.? self! val!) (verismo!boot.linux.impl&%2.spec_new.? (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.impl&%0.spec_bp.? self!)) (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!boot.linux.impl&%0.spec_secret.? self!)) (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.impl&%0.spec_cpuid.? self!)) (verismo!boot.linux.impl&%0.spec_gdt.? self!) (verismo!boot.linux.impl&%0.spec_cmdline.? self!) val! (verismo!boot.linux.impl&%0.spec_reserved.? self!))) :pattern ((verismo!boot.linux.impl&%1.spec_set_ccblob.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!boot.linux.BootInfo.) (has_type val! TYPE%verismo!boot.linux.CCBlobSevInfo.)) (has_type (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%1.spec_set_ccblob.? self! val!)) TYPE%verismo!boot.linux.BootInfo.)) :pattern ((verismo!boot.linux.impl&%1.spec_set_ccblob.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%1.spec_set_reserved.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%1.spec_set_reserved.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!boot.linux.impl&%1.spec_set_reserved.? self! val!) (verismo!boot.linux.impl&%2.spec_new.? (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.impl&%0.spec_bp.? self!)) (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!boot.linux.impl&%0.spec_secret.? self!)) (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.impl&%0.spec_cpuid.? self!)) (verismo!boot.linux.impl&%0.spec_gdt.? self!) (verismo!boot.linux.impl&%0.spec_cmdline.? self!) (Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!boot.linux.impl&%0.spec_ccblob.? self!)) val!)) :pattern ((verismo!boot.linux.impl&%1.spec_set_reserved.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!boot.linux.BootInfo.) (has_type val! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3536)))) (has_type (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%1.spec_set_reserved.? self! val!)) TYPE%verismo!boot.linux.BootInfo.)) :pattern ((verismo!boot.linux.impl&%1.spec_set_reserved.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%40.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%40.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.linux.CCBlobSevInfo.) (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%6.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%6.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.linux.BootInfo.) (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 80)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 168)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 8)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 100)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 128)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.params.E820Entry.)))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 816)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 40)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 3840)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 64)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpuid.SnpCpuidFn.)))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 1008)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 256)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 3536)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%9.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%9.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copybp. $ TYPE%verismo!boot.params.BootParams. self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copybp. $ TYPE%verismo!boot.params.BootParams. self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%9.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%9.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copybp. $ TYPE%verismo!boot.params.BootParams. self! params! ret!) (B (= (verismo!boot.linux.impl&%0.spec_bp.? self!) (%Poly%verismo!boot.params.BootParams. ret!)))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copybp. $ TYPE%verismo!boot.params.BootParams. self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%11.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%11.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatebp. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatebp. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%11.spec_update.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%11.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatebp. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!boot.linux.BootInfo. self!) (verismo!boot.linux.impl&%1.spec_set_bp.? prev! (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.Updatebp./Updatebp/val (%Poly%verismo!boot.linux.Updatebp. params!))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatebp. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%13.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%13.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copysecret. $ TYPE%verismo!security.secret.SnpSecretsPageLayout. self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copysecret. $ TYPE%verismo!security.secret.SnpSecretsPageLayout. self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%13.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%13.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copysecret. $ TYPE%verismo!security.secret.SnpSecretsPageLayout. self! params! ret!) (B (= (verismo!boot.linux.impl&%0.spec_secret.? self!) (%Poly%verismo!security.secret.SnpSecretsPageLayout. ret!)))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copysecret. $ TYPE%verismo!security.secret.SnpSecretsPageLayout. self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%15.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%15.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatesecret. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatesecret. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%15.spec_update.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%15.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatesecret. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!boot.linux.BootInfo. self!) (verismo!boot.linux.impl&%1.spec_set_secret.? prev! (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!boot.linux.Updatesecret./Updatesecret/val (%Poly%verismo!boot.linux.Updatesecret. params!))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatesecret. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%17.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%17.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copycpuid. $ TYPE%verismo!snp.cpuid.SnpCpuidTable. self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copycpuid. $ TYPE%verismo!snp.cpuid.SnpCpuidTable. self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%17.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%17.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copycpuid. $ TYPE%verismo!snp.cpuid.SnpCpuidTable. self! params! ret!) (B (= (verismo!boot.linux.impl&%0.spec_cpuid.? self!) (%Poly%verismo!snp.cpuid.SnpCpuidTable. ret!)))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copycpuid. $ TYPE%verismo!snp.cpuid.SnpCpuidTable. self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%19.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%19.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatecpuid. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatecpuid. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%19.spec_update.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%19.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatecpuid. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!boot.linux.BootInfo. self!) (verismo!boot.linux.impl&%1.spec_set_cpuid.? prev! (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.Updatecpuid./Updatecpuid/val (%Poly%verismo!boot.linux.Updatecpuid. params!))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatecpuid. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%21.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%21.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copygdt. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)) self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copygdt. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)) self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%21.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%21.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copygdt. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)) self! params! ret!) (B (= (verismo!boot.linux.impl&%0.spec_gdt.? self!) ret!))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copygdt. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)) self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%23.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%23.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updategdt. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updategdt. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%23.spec_update.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%23.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updategdt. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!boot.linux.BootInfo. self!) (verismo!boot.linux.impl&%1.spec_set_gdt.? prev! (verismo!boot.linux.Updategdt./Updategdt/val (%Poly%verismo!boot.linux.Updategdt. params!)))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updategdt. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%25.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%25.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copycmdline. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)) self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copycmdline. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)) self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%25.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%25.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copycmdline. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)) self! params! ret!) (B (= (verismo!boot.linux.impl&%0.spec_cmdline.? self!) ret!))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copycmdline. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)) self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%27.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%27.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatecmdline. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatecmdline. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%27.spec_update.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%27.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatecmdline. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!boot.linux.BootInfo. self!) (verismo!boot.linux.impl&%1.spec_set_cmdline.? prev! (verismo!boot.linux.Updatecmdline./Updatecmdline/val (%Poly%verismo!boot.linux.Updatecmdline. params!)))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatecmdline. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%29.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%29.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copyccblob. $ TYPE%verismo!boot.linux.CCBlobSevInfo. self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copyccblob. $ TYPE%verismo!boot.linux.CCBlobSevInfo. self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%29.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%29.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copyccblob. $ TYPE%verismo!boot.linux.CCBlobSevInfo. self! params! ret!) (B (= (verismo!boot.linux.impl&%0.spec_ccblob.? self!) (%Poly%verismo!boot.linux.CCBlobSevInfo. ret!)))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copyccblob. $ TYPE%verismo!boot.linux.CCBlobSevInfo. self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%31.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%31.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updateccblob. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updateccblob. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%31.spec_update.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%31.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updateccblob. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!boot.linux.BootInfo. self!) (verismo!boot.linux.impl&%1.spec_set_ccblob.? prev! (Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!boot.linux.Updateccblob./Updateccblob/val (%Poly%verismo!boot.linux.Updateccblob. params!))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updateccblob. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%19.wf.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%19.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.params.SetupHeader. self!) (B (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 8) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/setup_sects (%Poly%verismo!boot.params.SetupHeader. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/root_flags (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/syssize (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ram_size (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/vid_mode (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/root_dev (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/boot_flag (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/jump (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/header (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/version (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/realmode_swtch (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/start_sys_seg (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/kernel_version (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 8) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/type_of_loader (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 8) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/loadflags (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/setup_move_size (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/code32_start (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ramdisk_image (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ramdisk_size (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/bootsect_kludge (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/heap_end_ptr (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 8) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ext_loader_ver (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 8) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ext_loader_type (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/cmd_line_ptr (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/initrd_addr_max (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/kernel_alignment (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 8) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/relocatable_kernel (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 8) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/min_alignment (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/xloadflags (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/cmdline_size (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch_data (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/payload_offset (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/payload_length (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/setup_data (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/pref_address (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/init_size (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/handover_offset (%Poly%verismo!boot.params.SetupHeader. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/kernel_info_offset (%Poly%verismo!boot.params.SetupHeader. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.params.SetupHeader. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%40.wf.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%40.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.params.BootParams. self!) (B (and (and (and (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!boot.params.BootParams./BootParams/_pad0 (%Poly%verismo!boot.params.BootParams. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.BootParams./BootParams/acpi_rsdp_addr (%Poly%verismo!boot.params.BootParams. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 80)) (verismo!boot.params.BootParams./BootParams/_pad1 (%Poly%verismo!boot.params.BootParams. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.BootParams./BootParams/_ext_cmd_line_ptr (%Poly%verismo!boot.params.BootParams. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!boot.params.BootParams./BootParams/_pad2_0 (%Poly%verismo!boot.params.BootParams. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.BootParams./BootParams/cc_blob_addr (%Poly%verismo!boot.params.BootParams. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 168)) (verismo!boot.params.BootParams./BootParams/_pad2_1 (%Poly%verismo!boot.params.BootParams. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 8) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.BootParams./BootParams/e820_entries (%Poly%verismo!boot.params.BootParams. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)) (verismo!boot.params.BootParams./BootParams/reserved_4 (%Poly%verismo!boot.params.BootParams. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.params.SetupHeader. (Poly%verismo!boot.params.SetupHeader. (verismo!boot.params.BootParams./BootParams/hdr (%Poly%verismo!boot.params.BootParams. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 100)) (verismo!boot.params.BootParams./BootParams/reserved_5 (%Poly%verismo!boot.params.BootParams. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128)) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 816)) (verismo!boot.params.BootParams./BootParams/reserved_6 (%Poly%verismo!boot.params.BootParams. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.params.BootParams. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpuid.impl&%7.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpuid.impl&%7.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpuid.RegABCD. self!) (B (and (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/eax (%Poly%verismo!snp.cpuid.RegABCD. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/ebx (%Poly%verismo!snp.cpuid.RegABCD. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/ecx (%Poly%verismo!snp.cpuid.RegABCD. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/edx (%Poly%verismo!snp.cpuid.RegABCD. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpuid.RegABCD. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpuid.impl&%16.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpuid.impl&%16.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpuid.SnpCpuidFn. self!) (B (and (and (and (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/eax_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/ecx_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xcr0_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xss_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpuid.RegABCD. (Poly%verismo!snp.cpuid.RegABCD. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/rets (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/reserved (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpuid.SnpCpuidFn. self!))))))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!snp.cpuid.SnpCpuidFn.))
(assert (fuel_bool_default fuel%verismo!snp.cpuid.impl&%25.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpuid.impl&%25.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpuid.SnpCpuidTable. self!) (B (and (and (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/count (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_1 (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_2 (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!snp.cpuid.SnpCpuidFn. $ (CONST_INT 64)) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/fn_ (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 1008)) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_3 (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpuid.SnpCpuidTable. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%42.wf.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%42.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.linux.CCBlobSevInfo. self!) (B (and (and (and (and (and (and (and (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0_1 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved1 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_phys (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_len (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved2 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_phys (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_len (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved3 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/shared_page (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.linux.CCBlobSevInfo. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%33.wf.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%33.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.linux.BootInfo. self!) (B (and (and (and (and (and (and (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.params.BootParams. (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!boot.linux.BootInfo./BootInfo/secret (%Poly%verismo!boot.linux.BootInfo. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpuid.SnpCpuidTable. (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.BootInfo./BootInfo/cpuid (%Poly%verismo!boot.linux.BootInfo. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)) (verismo!boot.linux.BootInfo./BootInfo/gdt (%Poly%verismo!boot.linux.BootInfo. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)) (verismo!boot.linux.BootInfo./BootInfo/cmdline (%Poly%verismo!boot.linux.BootInfo. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.linux.CCBlobSevInfo. (Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!boot.linux.BootInfo./BootInfo/ccblob (%Poly%verismo!boot.linux.BootInfo. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3536)) (verismo!boot.linux.BootInfo./BootInfo/reserved (%Poly%verismo!boot.linux.BootInfo. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.linux.BootInfo. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%20.is_constant.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%20.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.SetupHeader. self!) (B (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/setup_sects (%Poly%verismo!boot.params.SetupHeader. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/root_flags (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/syssize (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ram_size (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/vid_mode (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/root_dev (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/boot_flag (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/jump (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/header (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/version (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/realmode_swtch (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/start_sys_seg (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/kernel_version (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/type_of_loader (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/loadflags (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/setup_move_size (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/code32_start (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ramdisk_image (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ramdisk_size (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/bootsect_kludge (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/heap_end_ptr (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ext_loader_ver (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ext_loader_type (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/cmd_line_ptr (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/initrd_addr_max (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/kernel_alignment (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/relocatable_kernel (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/min_alignment (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/xloadflags (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/cmdline_size (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch_data (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/payload_offset (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/payload_length (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/setup_data (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/pref_address (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/init_size (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/handover_offset (%Poly%verismo!boot.params.SetupHeader. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/kernel_info_offset (%Poly%verismo!boot.params.SetupHeader. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.SetupHeader. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%41.is_constant.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%41.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.BootParams. self!) (B (and (and (and (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!boot.params.BootParams./BootParams/_pad0 (%Poly%verismo!boot.params.BootParams. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.BootParams./BootParams/acpi_rsdp_addr (%Poly%verismo!boot.params.BootParams. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 80)) (verismo!boot.params.BootParams./BootParams/_pad1 (%Poly%verismo!boot.params.BootParams. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.BootParams./BootParams/_ext_cmd_line_ptr (%Poly%verismo!boot.params.BootParams. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!boot.params.BootParams./BootParams/_pad2_0 (%Poly%verismo!boot.params.BootParams. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.BootParams./BootParams/cc_blob_addr (%Poly%verismo!boot.params.BootParams. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 168)) (verismo!boot.params.BootParams./BootParams/_pad2_1 (%Poly%verismo!boot.params.BootParams. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.BootParams./BootParams/e820_entries (%Poly%verismo!boot.params.BootParams. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)) (verismo!boot.params.BootParams./BootParams/reserved_4 (%Poly%verismo!boot.params.BootParams. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.SetupHeader. (Poly%verismo!boot.params.SetupHeader. (verismo!boot.params.BootParams./BootParams/hdr (%Poly%verismo!boot.params.BootParams. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 100)) (verismo!boot.params.BootParams./BootParams/reserved_5 (%Poly%verismo!boot.params.BootParams. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128)) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 816)) (verismo!boot.params.BootParams./BootParams/reserved_6 (%Poly%verismo!boot.params.BootParams. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.BootParams. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpuid.impl&%8.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpuid.impl&%8.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpuid.RegABCD. self!) (B (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/eax (%Poly%verismo!snp.cpuid.RegABCD. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/ebx (%Poly%verismo!snp.cpuid.RegABCD. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/ecx (%Poly%verismo!snp.cpuid.RegABCD. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/edx (%Poly%verismo!snp.cpuid.RegABCD. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpuid.RegABCD. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpuid.impl&%17.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpuid.impl&%17.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpuid.SnpCpuidFn. self!) (B (and (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/eax_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/ecx_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xcr0_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xss_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpuid.RegABCD. (Poly%verismo!snp.cpuid.RegABCD. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/rets (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/reserved (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpuid.SnpCpuidFn. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpuid.impl&%8.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpuid.impl&%8.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpuid.RegABCD. self! vmpl!) (B (and (and (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/eax (%Poly%verismo!snp.cpuid.RegABCD. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/eax (%Poly%verismo!snp.cpuid.RegABCD. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/ebx (%Poly%verismo!snp.cpuid.RegABCD. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/ebx (%Poly%verismo!snp.cpuid.RegABCD. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/ecx (%Poly%verismo!snp.cpuid.RegABCD. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/ecx (%Poly%verismo!snp.cpuid.RegABCD. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/edx (%Poly%verismo!snp.cpuid.RegABCD. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.RegABCD./RegABCD/edx (%Poly%verismo!snp.cpuid.RegABCD. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpuid.RegABCD. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpuid.impl&%17.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpuid.impl&%17.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpuid.SnpCpuidFn. self! vmpl!) (B (and (and (and (and (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/eax_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/eax_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/ecx_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/ecx_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xcr0_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xcr0_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xss_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/xss_in (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpuid.RegABCD. (Poly%verismo!snp.cpuid.RegABCD. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/rets (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!))) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/reserved (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidFn./SnpCpuidFn/reserved (%Poly%verismo!snp.cpuid.SnpCpuidFn. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpuid.SnpCpuidFn. self! vmpl!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!snp.cpuid.SnpCpuidFn.))
(assert (fuel_bool_default fuel%verismo!snp.cpuid.impl&%26.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpuid.impl&%26.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpuid.SnpCpuidTable. self!) (B (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/count (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_1 (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_2 (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!snp.cpuid.SnpCpuidFn. $ (CONST_INT 64)) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/fn_ (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 1008)) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_3 (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpuid.SnpCpuidTable. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%43.is_constant.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%43.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.linux.CCBlobSevInfo. self!) (B (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0_1 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved1 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_phys (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_len (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved2 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_phys (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_len (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved3 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/shared_page (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.linux.CCBlobSevInfo. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%34.is_constant.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%34.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.linux.BootInfo. self!) (B (and (and (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.BootParams. (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!boot.linux.BootInfo./BootInfo/secret (%Poly%verismo!boot.linux.BootInfo. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpuid.SnpCpuidTable. (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.BootInfo./BootInfo/cpuid (%Poly%verismo!boot.linux.BootInfo. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)) (verismo!boot.linux.BootInfo./BootInfo/gdt (%Poly%verismo!boot.linux.BootInfo. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)) (verismo!boot.linux.BootInfo./BootInfo/cmdline (%Poly%verismo!boot.linux.BootInfo. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.linux.CCBlobSevInfo. (Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!boot.linux.BootInfo./BootInfo/ccblob (%Poly%verismo!boot.linux.BootInfo. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3536)) (verismo!boot.linux.BootInfo./BootInfo/reserved (%Poly%verismo!boot.linux.BootInfo. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.linux.BootInfo. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%20.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%20.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.params.SetupHeader. self! vmpl!) (B (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/setup_sects (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/setup_sects (%Poly%verismo!boot.params.SetupHeader. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/root_flags (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/root_flags (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/syssize (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/syssize (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ram_size (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ram_size (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/vid_mode (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/vid_mode (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/root_dev (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/root_dev (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/boot_flag (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/boot_flag (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/jump (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/jump (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/header (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/header (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/version (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/version (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/realmode_swtch (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/realmode_swtch (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/start_sys_seg (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/start_sys_seg (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/kernel_version (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/kernel_version (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/type_of_loader (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/type_of_loader (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/loadflags (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/loadflags (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/setup_move_size (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/setup_move_size (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/code32_start (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/code32_start (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ramdisk_image (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ramdisk_image (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ramdisk_size (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ramdisk_size (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/bootsect_kludge (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/bootsect_kludge (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/heap_end_ptr (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/heap_end_ptr (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ext_loader_ver (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ext_loader_ver (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ext_loader_type (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/ext_loader_type (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/cmd_line_ptr (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/cmd_line_ptr (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/initrd_addr_max (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/initrd_addr_max (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/kernel_alignment (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/kernel_alignment (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/relocatable_kernel (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/relocatable_kernel (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/min_alignment (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/min_alignment (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/xloadflags (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/xloadflags (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/cmdline_size (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/cmdline_size (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch_data (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/hardware_subarch_data (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/payload_offset (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/payload_offset (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/payload_length (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/payload_length (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/setup_data (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/setup_data (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/pref_address (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/pref_address (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/init_size (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/init_size (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/handover_offset (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/handover_offset (%Poly%verismo!boot.params.SetupHeader. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/kernel_info_offset (%Poly%verismo!boot.params.SetupHeader. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.SetupHeader./SetupHeader/kernel_info_offset (%Poly%verismo!boot.params.SetupHeader. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.params.SetupHeader. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%41.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%41.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.params.BootParams. self! vmpl!) (B (and (and (and (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!boot.params.BootParams./BootParams/_pad0 (%Poly%verismo!boot.params.BootParams. self!)) vmpl!)) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.BootParams./BootParams/acpi_rsdp_addr (%Poly%verismo!boot.params.BootParams. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.BootParams./BootParams/acpi_rsdp_addr (%Poly%verismo!boot.params.BootParams. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 80)) (verismo!boot.params.BootParams./BootParams/_pad1 (%Poly%verismo!boot.params.BootParams. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.BootParams./BootParams/_ext_cmd_line_ptr (%Poly%verismo!boot.params.BootParams. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.BootParams./BootParams/_ext_cmd_line_ptr (%Poly%verismo!boot.params.BootParams. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!boot.params.BootParams./BootParams/_pad2_0 (%Poly%verismo!boot.params.BootParams. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.BootParams./BootParams/cc_blob_addr (%Poly%verismo!boot.params.BootParams. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.BootParams./BootParams/cc_blob_addr (%Poly%verismo!boot.params.BootParams. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 168)) (verismo!boot.params.BootParams./BootParams/_pad2_1 (%Poly%verismo!boot.params.BootParams. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.BootParams./BootParams/e820_entries (%Poly%verismo!boot.params.BootParams. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.BootParams./BootParams/e820_entries (%Poly%verismo!boot.params.BootParams. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)) (verismo!boot.params.BootParams./BootParams/reserved_4 (%Poly%verismo!boot.params.BootParams. self!)) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.params.SetupHeader. (Poly%verismo!boot.params.SetupHeader. (verismo!boot.params.BootParams./BootParams/hdr (%Poly%verismo!boot.params.BootParams. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 100)) (verismo!boot.params.BootParams./BootParams/reserved_5 (%Poly%verismo!boot.params.BootParams. self!)) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128)) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!)) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 816)) (verismo!boot.params.BootParams./BootParams/reserved_6 (%Poly%verismo!boot.params.BootParams. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.params.BootParams. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpuid.impl&%26.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpuid.impl&%26.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpuid.SnpCpuidTable. self! vmpl!) (B (and (and (and (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/count (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/count (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_1 (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_1 (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_2 (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_2 (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!snp.cpuid.SnpCpuidFn. $ (CONST_INT 64)) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/fn_ (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!)) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 1008)) (verismo!snp.cpuid.SnpCpuidTable./SnpCpuidTable/reserved_3 (%Poly%verismo!snp.cpuid.SnpCpuidTable. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpuid.SnpCpuidTable. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%43.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%43.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.linux.CCBlobSevInfo. self! vmpl!) (B (and (and (and (and (and (and (and (and (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0_1 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved0_1 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved1 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved1 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_phys (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_phys (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_len (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/secrets_len (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved2 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved2 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_phys (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_phys (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_len (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/cpuid_len (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved3 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/reserved3 (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/shared_page (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.linux.CCBlobSevInfo./CCBlobSevInfo/shared_page (%Poly%verismo!boot.linux.CCBlobSevInfo. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.linux.CCBlobSevInfo. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%34.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%34.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.linux.BootInfo. self! vmpl!) (B (and (and (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.params.BootParams. (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!))) vmpl!)) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!boot.linux.BootInfo./BootInfo/secret (%Poly%verismo!boot.linux.BootInfo. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpuid.SnpCpuidTable. (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.BootInfo./BootInfo/cpuid (%Poly%verismo!boot.linux.BootInfo. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32)) (verismo!boot.linux.BootInfo./BootInfo/gdt (%Poly%verismo!boot.linux.BootInfo. self!)) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256)) (verismo!boot.linux.BootInfo./BootInfo/cmdline (%Poly%verismo!boot.linux.BootInfo. self!)) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.linux.CCBlobSevInfo. (Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!boot.linux.BootInfo./BootInfo/ccblob (%Poly%verismo!boot.linux.BootInfo. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3536)) (verismo!boot.linux.BootInfo./BootInfo/reserved (%Poly%verismo!boot.linux.BootInfo. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.linux.BootInfo. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%44.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%44.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.linux.BootUpdate. $ (UINT 8) self! params!) (B (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16)) (verismo!boot.linux.BootUpdate./BootUpdate/e820 (%Poly%verismo!boot.linux.BootUpdate. params!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.SetupHeader. (Poly%verismo!boot.params.SetupHeader. (verismo!boot.linux.BootUpdate./BootUpdate/hdr (%Poly%verismo!boot.linux.BootUpdate. params!)))))) (>= (vstd!seq.Seq.len.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16) (verismo!boot.linux.BootUpdate./BootUpdate/e820 (%Poly%verismo!boot.linux.BootUpdate. params!)))) (verismo!boot.linux.BootUpdate./BootUpdate/e820_entries (%Poly%verismo!boot.linux.BootUpdate. params!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.BootParams. self!))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.linux.BootUpdate. $ (UINT 8) self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%44.spec_update.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%44.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.linux.BootUpdate. $ (UINT 8) self! prev! params! ret!) (B (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.BootParams. self!)) (%B (B (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.BootParams./BootParams/e820_entries (%Poly%verismo!boot.params.BootParams. self!)))) (I (verismo!boot.linux.BootUpdate./BootUpdate/e820_entries (%Poly%verismo!boot.linux.BootUpdate. params!))))))) (ext_eq true (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.params.E820Entry.) (vstd!seq.Seq.subrange.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!))) (I 0) (I (verismo!boot.linux.BootUpdate./BootUpdate/e820_entries (%Poly%verismo!boot.linux.BootUpdate. params!)))) (vstd!seq.Seq.subrange.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16) (verismo!boot.linux.BootUpdate./BootUpdate/e820 (%Poly%verismo!boot.linux.BootUpdate. params!))) (I 0) (I (verismo!boot.linux.BootUpdate./BootUpdate/e820_entries (%Poly%verismo!boot.linux.BootUpdate. params!)))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.linux.BootUpdate. $ (UINT 8) self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.monitor_params.impl&%10.mp_wf.))
(assert (=> (fuel_bool fuel%verismo!boot.monitor_params.impl&%10.mp_wf.) (forall ((self! Poly)) (! (= (verismo!boot.monitor_params.impl&%10.mp_wf.? self!) (and (and (and (%B (B (<= (%I (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_entries (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))) (%I (I (vstd!seq.Seq.len.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16) (verismo!boot.monitor_params.MonitorParams./MonitorParams/validated_e820 (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))))))) (%B (verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with.? $ INT (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/acpi_size (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))))))) (%B (verismo!addr_e.addr_interface.SpecAddrTrait.spec_valid_addr_with.? $ INT (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_start (%Poly%verismo!boot.monitor_params.MonitorParams. self!))))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.monitor_params.MonitorParams./MonitorParams/richos_size (%Poly%verismo!boot.monitor_params.MonitorParams. self!)))))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.monitor_params.MonitorParams. self!)))) :pattern ((verismo!boot.monitor_params.impl&%10.mp_wf.? self!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%45.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%45.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.SetBasicBootInfoParam. $ (UINT 8) self! params!) (B (and (and (and (verismo!boot.monitor_params.impl&%10.mp_wf.? (Poly%verismo!boot.monitor_params.MonitorParams. (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/mparam (%Poly%verismo!boot.linux.SetBasicBootInfoParam. params!)))) (let ((tmp%%$ (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/vmpl (%Poly%verismo!boot.linux.SetBasicBootInfoParam. params!)))) (and (<= 1 tmp%%$) (< tmp%%$ 4)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.BootParams. (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.SetBasicBootInfoParam./SetBasicBootInfoParam/richos_boot (%Poly%verismo!boot.linux.SetBasicBootInfoParam. params!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.linux.BootInfo. self!))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.SetBasicBootInfoParam. $ (UINT 8) self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%45.spec_update.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%45.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.SetBasicBootInfoParam. $ (UINT 8) self! prev! params! ret!) (B (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.linux.BootInfo. self!)) (= (%Poly%verismo!boot.linux.BootInfo. self!) (verismo!boot.linux.impl&%1.spec_set_cmdline.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%1.spec_set_gdt.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%1.spec_set_bp.? prev! (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!))))) (verismo!boot.linux.BootInfo./BootInfo/gdt (%Poly%verismo!boot.linux.BootInfo. self!)))) (verismo!boot.linux.BootInfo./BootInfo/cmdline (%Poly%verismo!boot.linux.BootInfo. self!))))) (%B (B (<= (%I (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.BootParams./BootParams/e820_entries (%Poly%verismo!boot.params.BootParams. (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!)))))))) (%I (I (vstd!seq.Seq.len.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!))))))))))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.SetBasicBootInfoParam. $ (UINT 8) self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!vbox.vbox.impl&%4.is_shared_page.))
(assert (=> (fuel_bool fuel%verismo!vbox.vbox.impl&%4.is_shared_page.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!vbox.vbox.impl&%4.is_shared_page.? T&. T& self!) (and (verismo!vbox.vbox.impl&%4.is_page.? T&. T& self!) (= (verismo!vbox.vbox.impl&%6.snp.? T&. T& self!) (verismo!ptr.snp.snp_u.impl&%31.shared.? (I 0))))) :pattern ((verismo!vbox.vbox.impl&%4.is_shared_page.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%46.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%46.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.SetSnpBootInfoParam. $ (UINT 8) self! params!) (B (and (and (and (let ((tmp%%$ (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/vmpl (%Poly%verismo!boot.linux.SetSnpBootInfoParam. params!)))) (and (<= 1 tmp%%$) (< tmp%%$ 4))) (verismo!vbox.vbox.impl&%4.is_shared_page.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4096)) (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/early_shared (%Poly%verismo!boot.linux.SetSnpBootInfoParam. params!)))) (verismo!security.secret.impl&%33.wf_mastersecret.? (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/master_secret (%Poly%verismo!boot.linux.SetSnpBootInfoParam. params!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!boot.linux.BootInfo./BootInfo/secret (%Poly%verismo!boot.linux.BootInfo. self!)))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.SetSnpBootInfoParam. $ (UINT 8) self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%46.spec_update.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%46.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.SetSnpBootInfoParam. $ (UINT 8) self! prev! params! ret!) (B (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!boot.linux.BootInfo./BootInfo/secret (%Poly%verismo!boot.linux.BootInfo. self!))) (I (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/vmpl (%Poly%verismo!boot.linux.SetSnpBootInfoParam. params!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.linux.CCBlobSevInfo. (Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!boot.linux.BootInfo./BootInfo/ccblob (%Poly%verismo!boot.linux.BootInfo. self!)))))) (= (verismo!boot.linux.BootInfo./BootInfo/cpuid (%Poly%verismo!boot.linux.BootInfo. self!)) (verismo!boot.linux.SetSnpBootInfoParam./SetSnpBootInfoParam/cpuid (%Poly%verismo!boot.linux.SetSnpBootInfoParam. params!)))) (= (%Poly%verismo!boot.linux.BootInfo. self!) (verismo!boot.linux.impl&%1.spec_set_cpuid.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%1.spec_set_ccblob.? (Poly%verismo!boot.linux.BootInfo. (verismo!boot.linux.impl&%1.spec_set_secret.? prev! (Poly%verismo!security.secret.SnpSecretsPageLayout. (verismo!boot.linux.BootInfo./BootInfo/secret (%Poly%verismo!boot.linux.BootInfo. self!))))) (Poly%verismo!boot.linux.CCBlobSevInfo. (verismo!boot.linux.BootInfo./BootInfo/ccblob (%Poly%verismo!boot.linux.BootInfo. self!))))) (Poly%verismo!snp.cpuid.SnpCpuidTable. (verismo!boot.linux.BootInfo./BootInfo/cpuid (%Poly%verismo!boot.linux.BootInfo. self!)))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.SetSnpBootInfoParam. $ (UINT 8) self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%47.spec_update_cs_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%47.spec_update_cs_requires.) (forall ((self! Poly) (params! Poly) (cs! Poly)) (! (= (verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. $ TYPE%verismo!boot.linux.SetMemoryBootInfoParam. $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.) self! params! cs!) (B (and (and (and (let ((tmp%%$ (verismo!boot.linux.SetMemoryBootInfoParam./SetMemoryBootInfoParam/vmpl (%Poly%verismo!boot.linux.SetMemoryBootInfoParam. params!)))) (and (<= 1 tmp%%$) (< tmp%%$ 4))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.BootParams. (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!)))))) (%B (B (<= (%I (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.BootParams./BootParams/e820_entries (%Poly%verismo!boot.params.BootParams. (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!)))))))) (%I (I (vstd!seq.Seq.len.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!))))))))))))) (verismo!snp.trackedcore.snpmulticore.impl&%3.inv.? cs!)))) :pattern ((verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs_requires.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. $ TYPE%verismo!boot.linux.SetMemoryBootInfoParam. $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.) self! params! cs!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%22.spec_set_e820_entries.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%22.spec_set_e820_entries.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!boot.params.impl&%22.spec_set_e820_entries.? self! val!) (verismo!boot.params.impl&%23.spec_new.? (verismo!boot.params.impl&%21.spec__pad0.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.impl&%21.spec_acpi_rsdp_addr.? self!)) (verismo!boot.params.impl&%21.spec__pad1.? self!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.impl&%21.spec__ext_cmd_line_ptr.? self!)) (verismo!boot.params.impl&%21.spec__pad2_0.? self!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.impl&%21.spec_cc_blob_addr.? self!)) (verismo!boot.params.impl&%21.spec__pad2_1.? self!) val! (verismo!boot.params.impl&%21.spec_reserved_4.? self!) (Poly%verismo!boot.params.SetupHeader. (verismo!boot.params.impl&%21.spec_hdr.? self!)) (verismo!boot.params.impl&%21.spec_reserved_5.? self!) (verismo!boot.params.impl&%21.spec_e820.? self!) (verismo!boot.params.impl&%21.spec_reserved_6.? self!))) :pattern ((verismo!boot.params.impl&%22.spec_set_e820_entries.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!boot.params.BootParams.) (has_type val! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))) (has_type (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%22.spec_set_e820_entries.? self! val!)) TYPE%verismo!boot.params.BootParams.)) :pattern ((verismo!boot.params.impl&%22.spec_set_e820_entries.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%22.spec_set_e820.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%22.spec_set_e820.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!boot.params.impl&%22.spec_set_e820.? self! val!) (verismo!boot.params.impl&%23.spec_new.? (verismo!boot.params.impl&%21.spec__pad0.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.params.impl&%21.spec_acpi_rsdp_addr.? self!)) (verismo!boot.params.impl&%21.spec__pad1.? self!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.impl&%21.spec__ext_cmd_line_ptr.? self!)) (verismo!boot.params.impl&%21.spec__pad2_0.? self!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!boot.params.impl&%21.spec_cc_blob_addr.? self!)) (verismo!boot.params.impl&%21.spec__pad2_1.? self!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.impl&%21.spec_e820_entries.? self!)) (verismo!boot.params.impl&%21.spec_reserved_4.? self!) (Poly%verismo!boot.params.SetupHeader. (verismo!boot.params.impl&%21.spec_hdr.? self!)) (verismo!boot.params.impl&%21.spec_reserved_5.? self!) val! (verismo!boot.params.impl&%21.spec_reserved_6.? self!))) :pattern ((verismo!boot.params.impl&%22.spec_set_e820.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!boot.params.BootParams.) (has_type val! (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128)))) (has_type (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%22.spec_set_e820.? self! val!)) TYPE%verismo!boot.params.BootParams.)) :pattern ((verismo!boot.params.impl&%22.spec_set_e820.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!boot.linux.impl&%47.spec_update_cs.))
(assert (=> (fuel_bool fuel%verismo!boot.linux.impl&%47.spec_update_cs.) (forall ((self! Poly) (prev! Poly) (params! Poly) (oldcs! Poly) (ret! Poly) (cs! Poly)) (! (= (verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. $ TYPE%verismo!boot.linux.SetMemoryBootInfoParam. $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.) self! prev! params! oldcs! ret! cs!) (B (and (and (and (and (and (= (%Poly%verismo!boot.linux.BootInfo. self!) (verismo!boot.linux.impl&%1.spec_set_bp.? prev! (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!))))) (= (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!)) (verismo!boot.params.impl&%22.spec_set_e820_entries.? (Poly%verismo!boot.params.BootParams. (verismo!boot.params.impl&%22.spec_set_e820.? (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. prev!))) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!))))))) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.BootParams./BootParams/e820_entries (%Poly%verismo!boot.params.BootParams. (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!))))))))) (verismo!security.mem.osmem_wf.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.) ret!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.BootParams. (Poly%verismo!boot.params.BootParams. (verismo!boot.linux.BootInfo./BootInfo/bp (%Poly%verismo!boot.linux.BootInfo. self!)))))) (verismo!snp.trackedcore.snpmulticore.impl&%3.inv.? cs!)) (verismo!snp.trackedcore.snpmulticore.impl&%3.only_lock_reg_coremode_updated.? cs! oldcs! (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.reg.RegName.) (vstd!set.impl&%0.insert.? $ INT (vstd!set.impl&%0.empty.? $ INT) (I (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!global.g_range.? (Poly%verismo!global.Globals. verismo!global.Globals./ALLOCATOR)))))))))))) :pattern ((verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs.? $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreSharedMem. $ TYPE%verismo!boot.linux.SetMemoryBootInfoParam. $ (TYPE%alloc!vec.Vec. $ TYPE%verismo!security.mem.OSMemEntry. $ TYPE%alloc!alloc.Global.) self! prev! params! oldcs! ret! cs!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%32.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%32.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Copye820_entries. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Copye820_entries. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%32.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%32.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Copye820_entries. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! params! ret!) (B (= (verismo!boot.params.impl&%21.spec_e820_entries.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. ret!)))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Copye820_entries. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%34.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%34.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Updatee820_entries. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Updatee820_entries. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%34.spec_update.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%34.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Updatee820_entries. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!boot.params.BootParams. self!) (verismo!boot.params.impl&%22.spec_set_e820_entries.? prev! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!boot.params.Updatee820_entries./Updatee820_entries/val (%Poly%verismo!boot.params.Updatee820_entries. params!))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Updatee820_entries. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%36.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%36.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Copye820. $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128)) self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Copye820. $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128)) self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%36.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%36.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Copye820. $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128)) self! params! ret!) (B (= (verismo!boot.params.impl&%21.spec_e820.? self!) ret!))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Copye820. $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128)) self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%38.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%38.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Updatee820. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Updatee820. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!boot.params.impl&%38.spec_update.))
(assert (=> (fuel_bool fuel%verismo!boot.params.impl&%38.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Updatee820. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!boot.params.BootParams. self!) (verismo!boot.params.impl&%22.spec_set_e820.? prev! (verismo!boot.params.Updatee820./Updatee820/val (%Poly%verismo!boot.params.Updatee820. params!)))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!boot.params.BootParams. $ TYPE%verismo!boot.params.Updatee820. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!debug.interface.impl&%5.wf.))
(assert (=> (fuel_bool fuel%verismo!debug.interface.impl&%5.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!debug.interface.Console. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!debug.interface.Console. self!))))))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!debug.interface.Console.))
(assert (fuel_bool_default fuel%verismo!debug.interface.impl&%3.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!debug.interface.impl&%3.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!debug.interface.Console.) (I 0))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!debug.interface.Console.))
(assert (fuel_bool_default fuel%verismo!vcell.vcell.impl&%3.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!vcell.vcell.impl&%3.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!vcell.vcell.VCell. T&. T&)) (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!vcell.vcell.VCell. T&. T&)))))))
(assert (fuel_bool_default fuel%verismo!lock.spincell_e.impl&%7.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!lock.spincell_e.impl&%7.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. T&. T&)) (I (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!lock.spin_t.SpinLock.)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)))))) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!lock.spincell_e.VSpinLock. T&. T&)))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!pgtable_e.def.PTE.) (I 8))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%12.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%12.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!pgtable_e.def.PTE. $ TYPE%verismo!pgtable_e.def.PTE. self! rhs!) (B (= (I (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!))) (I (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. rhs!)))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!pgtable_e.def.PTE. $ TYPE%verismo!pgtable_e.def.PTE. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%13.is_constant.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%13.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!pgtable_e.def.PTE. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!pgtable_e.def.PTE. self!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%13.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%13.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!pgtable_e.def.PTE. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!pgtable_e.def.PTE. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%14.wf.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%14.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!pgtable_e.def.PTE. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!pgtable_e.def.PTE. self!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_new.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_new.) (forall ((val! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_new.? val!) (verismo!pgtable_e.def.PTE./PTE (%I val!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.impl&%16.spec_new.? val!)) TYPE%verismo!pgtable_e.def.PTE.)) :pattern ((verismo!pgtable_e.def.impl&%16.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%20.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%20.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms.) (I 0))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%22.wf.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%22.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!pgtable_e.def.TrackedPTEPerms. self!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%15.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%15.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!pgtable_e.pte.VAddrIndex.) (I 8))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%16.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%16.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!pgtable_e.pte.VAddrIndex. $ TYPE%verismo!pgtable_e.pte.VAddrIndex. self! rhs!) (B (= (I (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (%Poly%verismo!pgtable_e.pte.VAddrIndex. self!))) (I (verismo!pgtable_e.pte.VAddrIndex./VAddrIndex/value (%Poly%verismo!pgtable_e.pte.VAddrIndex. rhs!)))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!pgtable_e.pte.VAddrIndex. $ TYPE%verismo!pgtable_e.pte.VAddrIndex. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%17.is_constant.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%17.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!pgtable_e.pte.VAddrIndex. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!pgtable_e.pte.VAddrIndex. self!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%17.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%17.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!pgtable_e.pte.VAddrIndex. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!pgtable_e.pte.VAddrIndex. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.pte.impl&%18.wf.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.pte.impl&%18.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!pgtable_e.pte.VAddrIndex. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!pgtable_e.pte.VAddrIndex. self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%8.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%8.is_constant_to.) (forall ((V&. Dcr) (V& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) self! vmpl!))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. V&. V&) (tr_bound%verismo!tspec.wellformed.WellFormed. V&. V&) (tr_bound%verismo!tspec.size_s.SpecSize. V&. V&) (tr_bound%verismo!tspec.isconst.IsConstant. V&. V&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%4.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%4.vspec_cast_to.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr (%Poly%verismo!ptr.def_s.SnpPPtr. self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%5.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%5.spec_size_def.) (forall ((V&. Dcr) (V& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)) (I 8)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_s.impl&%5.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_s.impl&%5.is_constant_to.) (forall ((V&. Dcr) (V& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self! vmpl!) (B (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? V&. V& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))))) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_s.impl&%5.is_constant.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_s.impl&%5.is_constant.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!) (B (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? V&. V& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_default.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_default.) (forall ((self! Poly) (range! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.wf_default.? self! range!) (and (verismo!ptr.raw_ptr_s.impl&%5.wf_not_null.? self! range!) (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!) (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.wf_default.? self! range!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%8.hw_snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%8.hw_snp.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))))))) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))))))
(assert (fuel_bool_default fuel%verismo!security.mem.spec_is_default_pages_const_to_vmpl.))
(assert (=> (fuel_bool fuel%verismo!security.mem.spec_is_default_pages_const_to_vmpl.) (forall ((page_perms! Poly) (start_page! Poly) (npages! Poly) (vmpl! Poly)) (! (= (verismo!security.mem.spec_is_default_pages_const_to_vmpl.? page_perms! start_page! npages! vmpl!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I start_page!) (%I i$)) (< (%I i$) (Add (%I start_page!) (%I npages!)))) (and (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) i$) (verismo!ptr.raw_ptr_s.impl&%5.wf_default.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms! i$))) (Poly%tuple%2. (tuple%2./tuple%2 (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i$) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms! i$))))) vmpl!))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) i$))))) :pattern ((verismo!security.mem.spec_is_default_pages_const_to_vmpl.? page_perms! start_page! npages! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!security.mem.OSMemPerm.) (I 1))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%12.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%12.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!security.mem.OSMemPerm. $ TYPE%verismo!security.mem.OSMemPerm. self! rhs!) (B (= (I (verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. self!))) (I (verismo!security.mem.OSMemPerm./OSMemPerm/value (%Poly%verismo!security.mem.OSMemPerm. rhs!)))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!security.mem.OSMemPerm. $ TYPE%verismo!security.mem.OSMemPerm. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%13.is_constant.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%13.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!security.mem.OSMemPerm. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!security.mem.OSMemPerm. self!))))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%13.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%13.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!security.mem.OSMemPerm. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!security.mem.OSMemPerm. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%14.wf.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%14.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!security.mem.OSMemPerm. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!security.mem.OSMemPerm. self!))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%verismo!security.mem.OSMemPermSpec. (verismo!security.mem.impl&%18.readonly.? no%param)) TYPE%verismo!security.mem.OSMemPermSpec.)) :pattern ((verismo!security.mem.impl&%18.readonly.? no%param)))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%24.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%24.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!security.mem.OSMemEntry.) (I (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT SZ))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT SZ))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8)))))))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%28.spec_start.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%28.spec_start.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%28.spec_start.? self!) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/start_page (%Poly%verismo!security.mem.OSMemEntry. self!))))))))) :pattern ((verismo!security.mem.impl&%28.spec_start.? self!))))))
(assert (fuel_bool_default fuel%verismo!security.mem.impl&%28.spec_end.))
(assert (=> (fuel_bool fuel%verismo!security.mem.impl&%28.spec_end.) (forall ((self! Poly)) (! (= (verismo!security.mem.impl&%28.spec_end.? self!) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT $ TYPE%tuple%0.) $ INT $ TYPE%tuple%0. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT $ TYPE%tuple%0. (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/start_page (%Poly%verismo!security.mem.OSMemEntry. self!)))) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!security.mem.OSMemEntry./OSMemEntry/npages (%Poly%verismo!security.mem.OSMemEntry. self!)))))))))))) :pattern ((verismo!security.mem.impl&%28.spec_end.? self!))))))
(assert (fuel_bool_default fuel%verismo!security.impl&%27.is_constant.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%27.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!security.SnpGuestMsg. self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.SnpGuestMsg./SnpGuestMsg/snphdr (%Poly%verismo!security.SnpGuestMsg. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)) (verismo!security.SnpGuestMsg./SnpGuestMsg/payload (%Poly%verismo!security.SnpGuestMsg. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!security.SnpGuestMsg. self!))))))
(assert (fuel_bool_default fuel%verismo!security.impl&%27.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%27.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!security.SnpGuestMsg. self! vmpl!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.SnpGuestMsg./SnpGuestMsg/snphdr (%Poly%verismo!security.SnpGuestMsg. self!))) vmpl!)) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)) (verismo!security.SnpGuestMsg./SnpGuestMsg/payload (%Poly%verismo!security.SnpGuestMsg. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!security.SnpGuestMsg. self! vmpl!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!security.SnpGuestMsg.))
(assert (fuel_bool_default fuel%verismo!security.impl&%26.wf.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%26.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!security.SnpGuestMsg. self!) (B (and (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.SnpGuestMsg./SnpGuestMsg/snphdr (%Poly%verismo!security.SnpGuestMsg. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)) (verismo!security.SnpGuestMsg./SnpGuestMsg/payload (%Poly%verismo!security.SnpGuestMsg. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!security.SnpGuestMsg. self!))))))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!security.SnpGuestMsg.))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%13.spec_set_authtag.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%13.spec_set_authtag.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!security.secret.impl&%13.spec_set_authtag.? self! val!) (verismo!security.secret.impl&%14.spec_new.? val! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!security.secret.impl&%12.spec_msg_seqno.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!security.secret.impl&%12.spec_reserved1.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.secret.impl&%12.spec_algo.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.secret.impl&%12.spec_hdr_version.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!security.secret.impl&%12.spec_hdr_sz.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.secret.impl&%12.spec_msg_type.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.secret.impl&%12.spec_msg_version.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!security.secret.impl&%12.spec_msg_sz.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!security.secret.impl&%12.spec_reserved2.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.secret.impl&%12.spec_msg_vmpck.? self!)) (verismo!security.secret.impl&%12.spec_reserved3.? self!))) :pattern ((verismo!security.secret.impl&%13.spec_set_authtag.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%13.spec_set_algo.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%13.spec_set_algo.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!security.secret.impl&%13.spec_set_algo.? self! val!) (verismo!security.secret.impl&%14.spec_new.? (verismo!security.secret.impl&%12.spec_authtag.? self!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!security.secret.impl&%12.spec_msg_seqno.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!security.secret.impl&%12.spec_reserved1.? self!)) val! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.secret.impl&%12.spec_hdr_version.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!security.secret.impl&%12.spec_hdr_sz.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.secret.impl&%12.spec_msg_type.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.secret.impl&%12.spec_msg_version.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!security.secret.impl&%12.spec_msg_sz.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!security.secret.impl&%12.spec_reserved2.? self!)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.secret.impl&%12.spec_msg_vmpck.? self!)) (verismo!security.secret.impl&%12.spec_reserved3.? self!))) :pattern ((verismo!security.secret.impl&%13.spec_set_algo.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%23.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%23.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Copyauthtag. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)) self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Copyauthtag. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)) self! params!))))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%23.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%23.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Copyauthtag. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)) self! params! ret!) (B (= (verismo!security.secret.impl&%12.spec_authtag.? self!) ret!))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Copyauthtag. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)) self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%25.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%25.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Updateauthtag. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Updateauthtag. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%25.spec_update.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%25.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Updateauthtag. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!security.secret.SnpGuestMsgHdr. self!) (verismo!security.secret.impl&%13.spec_set_authtag.? prev! (verismo!security.secret.Updateauthtag./Updateauthtag/val (%Poly%verismo!security.secret.Updateauthtag. params!)))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Updateauthtag. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%27.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%27.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Copyalgo. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Copyalgo. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! params!))))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%27.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%27.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Copyalgo. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! params! ret!) (B (= (verismo!security.secret.impl&%12.spec_algo.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. ret!)))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Copyalgo. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%29.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%29.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Updatealgo. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Updatealgo. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%29.spec_update.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%29.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Updatealgo. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!security.secret.SnpGuestMsgHdr. self!) (verismo!security.secret.impl&%13.spec_set_algo.? prev! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!security.secret.Updatealgo./Updatealgo/val (%Poly%verismo!security.secret.Updatealgo. params!))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!security.secret.SnpGuestMsgHdr. $ TYPE%verismo!security.secret.Updatealgo. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%35.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%35.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. $ TYPE%verismo!security.secret.FillSecretForVMPL. $ TYPE%verismo!security.secret.FillSecretForVMPLOut. self! params!) (B (let ((master_secret$ (verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/master_secret (%Poly%verismo!security.secret.FillSecretForVMPL. params!)))) (let ((vmpl$ (verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/vmpl (%Poly%verismo!security.secret.FillSecretForVMPL. params!)))) (and (and (verismo!security.secret.impl&%33.wf_mastersecret.? (Poly%verismo!security.secret.SnpSecretsPageLayout. master_secret$)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. self!))) (and (< 0 vmpl$) (< vmpl$ 4))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. $ TYPE%verismo!security.secret.FillSecretForVMPL. $ TYPE%verismo!security.secret.FillSecretForVMPLOut. self! params!))))))
(assert (fuel_bool_default fuel%verismo!security.secret.impl&%35.spec_update.))
(assert (=> (fuel_bool fuel%verismo!security.secret.impl&%35.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. $ TYPE%verismo!security.secret.FillSecretForVMPL. $ TYPE%verismo!security.secret.FillSecretForVMPLOut. self! prev! params! ret!) (B (let ((master_secret$ (verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/master_secret (%Poly%verismo!security.secret.FillSecretForVMPL. params!)))) (let ((vmpl$ (verismo!security.secret.FillSecretForVMPL./FillSecretForVMPL/vmpl (%Poly%verismo!security.secret.FillSecretForVMPL. params!)))) (and (ite (= vmpl$ 1) (= (verismo!security.secret.impl&%0.spec_vmpck1.? self!) (verismo!security.secret.impl&%0.spec_vmpck1.? (Poly%verismo!security.secret.SnpSecretsPageLayout. master_secret$))) (ite (= vmpl$ 2) (= (verismo!security.secret.impl&%0.spec_vmpck2.? self!) (verismo!security.secret.impl&%0.spec_vmpck2.? (Poly%verismo!security.secret.SnpSecretsPageLayout. master_secret$))) (=> (= vmpl$ 3) (= (verismo!security.secret.impl&%0.spec_vmpck3.? self!) (verismo!security.secret.impl&%0.spec_vmpck3.? (Poly%verismo!security.secret.SnpSecretsPageLayout. master_secret$)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. self! (I vmpl$)))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!security.secret.SnpSecretsPageLayout. $ TYPE%verismo!security.secret.FillSecretForVMPL. $ TYPE%verismo!security.secret.FillSecretForVMPLOut. self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!snp.mem.spec_is_shared_page_perms.))
(assert (=> (fuel_bool fuel%verismo!snp.mem.spec_is_shared_page_perms.) (forall ((page_perms! Poly) (start_page! Poly) (npages! Poly)) (! (= (verismo!snp.mem.spec_is_shared_page_perms.? page_perms! start_page! npages!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I start_page!) (%I i$)) (< (%I i$) (Add (%I start_page!) (%I npages!)))) (and (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) i$) (verismo!ptr.raw_ptr_s.impl&%5.wf_range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms! i$))) (Poly%tuple%2. (tuple%2./tuple%2 (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i$) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?))))) (= (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms! i$))))) (verismo!ptr.snp.snp_u.impl&%31.shared.? (I 0)))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) i$))))) :pattern ((verismo!snp.mem.spec_is_shared_page_perms.? page_perms! start_page! npages!))))))
(assert (fuel_bool_default fuel%verismo!vbox.vbox.impl&%1.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!vbox.vbox.impl&%1.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&)) (I (verismo!vbox.vbox.spec_box_size.? (I 0)))) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&)))))))
(assert (fuel_bool_default fuel%verismo!vbox.vbox.impl&%4.is_default_page.))
(assert (=> (fuel_bool fuel%verismo!vbox.vbox.impl&%4.is_default_page.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!vbox.vbox.impl&%4.is_default_page.? T&. T& self!) (and (verismo!vbox.vbox.impl&%4.is_page.? T&. T& self!) (= (verismo!vbox.vbox.impl&%6.snp.? T&. T& self!) (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.))))) :pattern ((verismo!vbox.vbox.impl&%4.is_default_page.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!vbox.vbox.impl&%6.only_val_updated.))
(assert (=> (fuel_bool fuel%verismo!vbox.vbox.impl&%6.only_val_updated.) (forall ((T&. Dcr) (T& Type) (self! Poly) (prev! Poly)) (! (= (verismo!vbox.vbox.impl&%6.only_val_updated.? T&. T& self! prev!) (and (= (verismo!vbox.vbox.impl&%6.id.? T&. T& self!) (verismo!vbox.vbox.impl&%6.id.? T&. T& prev!)) (= (verismo!vbox.vbox.impl&%6.snp.? T&. T& self!) (verismo!vbox.vbox.impl&%6.snp.? T&. T& prev!)))) :pattern ((verismo!vbox.vbox.impl&%6.only_val_updated.? T&. T& self! prev!))))))
(assert (fuel_bool_default fuel%verismo!vbox.vbox.impl&%9.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!vbox.vbox.impl&%9.spec_update_requires.) (forall ((Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (T&. Dcr) (T& Type) (self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) Params&. Params& Out&. Out& self! params!) (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? T&. T& Params&. Params& Out&. Out& (verismo!vbox.vbox.impl&%6.view.? T&. T& self!) params!)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) Params&. Params& Out&. Out& self! params!))))))
(assert (fuel_bool_default fuel%verismo!vbox.vbox.impl&%9.spec_update.))
(assert (=> (fuel_bool fuel%verismo!vbox.vbox.impl&%9.spec_update.) (forall ((Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (T&. Dcr) (T& Type) (self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) Params&. Params& Out&. Out& self! prev! params! ret!) (B (and (%B (verismo!vbox.vbox.MutFnTrait.spec_update.? T&. T& Params&. Params& Out&. Out& (verismo!vbox.vbox.impl&%6.view.? T&. T& self!) (verismo!vbox.vbox.impl&%6.view.? T&. T& prev!) params! ret!)) (verismo!vbox.vbox.impl&%6.only_val_updated.? T&. T& self! prev!)))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) Params&. Params& Out&. Out& self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!vbox.vbox.impl&%10.spec_update_cs_requires.))
(assert (=> (fuel_bool fuel%verismo!vbox.vbox.impl&%10.spec_update_cs_requires.) (forall ((Params&. Dcr) (Params& Type) (T2&. Dcr) (T2& Type) (Out&. Dcr) (Out& Type) (T&. Dcr) (T& Type) (self! Poly) (params! Poly) (cs! Poly)) (! (= (verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs_requires.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) T2&. T2& Params&. Params& Out&. Out& self! params! cs!) (verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs_requires.? T&. T& T2&. T2& Params&. Params& Out&. Out& (verismo!vbox.vbox.impl&%6.view.? T&. T& self!) params! cs!)) :pattern ((verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs_requires.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) T2&. T2& Params&. Params& Out&. Out& self! params! cs!))))))
(assert (fuel_bool_default fuel%verismo!vbox.vbox.impl&%10.spec_update_cs.))
(assert (=> (fuel_bool fuel%verismo!vbox.vbox.impl&%10.spec_update_cs.) (forall ((Params&. Dcr) (Params& Type) (T2&. Dcr) (T2& Type) (Out&. Dcr) (Out& Type) (T&. Dcr) (T& Type) (self! Poly) (prev! Poly) (params! Poly) (oldcs! Poly) (ret! Poly) (cs! Poly)) (! (= (verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) T2&. T2& Params&. Params& Out&. Out& self! prev! params! oldcs! ret! cs!) (B (and (%B (verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs.? T&. T& T2&. T2& Params&. Params& Out&. Out& (verismo!vbox.vbox.impl&%6.view.? T&. T& self!) (verismo!vbox.vbox.impl&%6.view.? T&. T& prev!) params! oldcs! ret! cs!)) (verismo!vbox.vbox.impl&%6.only_val_updated.? T&. T& self! prev!)))) :pattern ((verismo!vbox.vbox.MutFnWithCSTrait.spec_update_cs.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) T2&. T2& Params&. Params& Out&. Out& self! prev! params! oldcs! ret! cs!))))))
(assert (fuel_bool_default fuel%verismo!vbox.vbox.impl&%11.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!vbox.vbox.impl&%11.spec_borrow_requires.) (forall ((Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (T&. Dcr) (T& Type) (self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) Params&. Params& Out&. Out& self! params!) (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? T&. T& Params&. Params& Out&. Out& (verismo!vbox.vbox.impl&%6.view.? T&. T& self!) params!)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) Params&. Params& Out&. Out& self! params!))))))
(assert (fuel_bool_default fuel%verismo!vbox.vbox.impl&%11.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!vbox.vbox.impl&%11.spec_borrow_ensures.) (forall ((Params&. Dcr) (Params& Type) (Out&. Dcr) (Out& Type) (T&. Dcr) (T& Type) (self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) Params&. Params& Out&. Out& self! params! ret!) (B (and (and (=> (verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!vbox.vbox.impl&%6.snp.? T&. T& self!))) (%B (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? T&. T& Params&. Params& Out&. Out& (verismo!vbox.vbox.impl&%6.view.? T&. T& self!) params! ret!))) (=> (%B (B (not (%B (B (verismo!arch.attack.spec_attack.? (I 0))))))) (%B (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? T&. T& Params&. Params& Out&. Out& (verismo!vbox.vbox.impl&%6.view.? T&. T& self!) params! ret!)))) (verismo!ptr.ptr_s.inv_snp_value.? Out&. Out& (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!vbox.vbox.impl&%6.snp.? T&. T& self!)) ret!)))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ (TYPE%verismo!vbox.vbox.VBox. T&. T&) Params&. Params& Out&. Out& self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!linkedlist.impl&%4.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!linkedlist.impl&%4.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!linkedlist.Node. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (verismo!linkedlist.Node./Node/next (%Poly%verismo!linkedlist.Node. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!linkedlist.Node./Node/val (%Poly%verismo!linkedlist.Node. self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!linkedlist.Node. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!security.impl&%10.spec_set_snphdr.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%10.spec_set_snphdr.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!security.impl&%10.spec_set_snphdr.? self! val!) (verismo!security.impl&%11.spec_new.? val! (verismo!security.impl&%9.spec_payload.? self!))) :pattern ((verismo!security.impl&%10.spec_set_snphdr.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!security.SnpGuestMsg.) (has_type val! TYPE%verismo!security.secret.SnpGuestMsgHdr.)) (has_type (Poly%verismo!security.SnpGuestMsg. (verismo!security.impl&%10.spec_set_snphdr.? self! val!)) TYPE%verismo!security.SnpGuestMsg.)) :pattern ((verismo!security.impl&%10.spec_set_snphdr.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!security.impl&%10.spec_set_payload.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%10.spec_set_payload.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!security.impl&%10.spec_set_payload.? self! val!) (verismo!security.impl&%11.spec_new.? (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.impl&%9.spec_snphdr.? self!)) val!)) :pattern ((verismo!security.impl&%10.spec_set_payload.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!security.SnpGuestMsg.) (has_type val! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)))) (has_type (Poly%verismo!security.SnpGuestMsg. (verismo!security.impl&%10.spec_set_payload.? self! val!)) TYPE%verismo!security.SnpGuestMsg.)) :pattern ((verismo!security.impl&%10.spec_set_payload.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!security.impl&%15.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%15.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!security.SnpGuestMsg.) (I (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 35)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 4000)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))))))
(assert (fuel_bool_default fuel%verismo!security.impl&%18.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%18.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Copysnphdr. $ TYPE%verismo!security.secret.SnpGuestMsgHdr. self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Copysnphdr. $ TYPE%verismo!security.secret.SnpGuestMsgHdr. self! params!))))))
(assert (fuel_bool_default fuel%verismo!security.impl&%18.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%18.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Copysnphdr. $ TYPE%verismo!security.secret.SnpGuestMsgHdr. self! params! ret!) (B (= (verismo!security.impl&%9.spec_snphdr.? self!) (%Poly%verismo!security.secret.SnpGuestMsgHdr. ret!)))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Copysnphdr. $ TYPE%verismo!security.secret.SnpGuestMsgHdr. self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!security.impl&%20.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%20.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Updatesnphdr. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Updatesnphdr. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!security.impl&%20.spec_update.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%20.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Updatesnphdr. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!security.SnpGuestMsg. self!) (verismo!security.impl&%10.spec_set_snphdr.? prev! (Poly%verismo!security.secret.SnpGuestMsgHdr. (verismo!security.Updatesnphdr./Updatesnphdr/val (%Poly%verismo!security.Updatesnphdr. params!))))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Updatesnphdr. $ BOOL self! prev! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!security.impl&%22.spec_borrow_requires.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%22.spec_borrow_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Copypayload. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)) self! params!) (B true)) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_requires.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Copypayload. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)) self! params!))))))
(assert (fuel_bool_default fuel%verismo!security.impl&%22.spec_borrow_ensures.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%22.spec_borrow_ensures.) (forall ((self! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Copypayload. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)) self! params! ret!) (B (= (verismo!security.impl&%9.spec_payload.? self!) ret!))) :pattern ((verismo!vbox.vbox.BorrowFnTrait.spec_borrow_ensures.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Copypayload. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4000)) self! params! ret!))))))
(assert (fuel_bool_default fuel%verismo!security.impl&%24.spec_update_requires.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%24.spec_update_requires.) (forall ((self! Poly) (params! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Updatepayload. $ BOOL self! params!) (B true)) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update_requires.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Updatepayload. $ BOOL self! params!))))))
(assert (fuel_bool_default fuel%verismo!security.impl&%24.spec_update.))
(assert (=> (fuel_bool fuel%verismo!security.impl&%24.spec_update.) (forall ((self! Poly) (prev! Poly) (params! Poly) (ret! Poly)) (! (= (verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Updatepayload. $ BOOL self! prev! params! ret!) (B (= (%Poly%verismo!security.SnpGuestMsg. self!) (verismo!security.impl&%10.spec_set_payload.? prev! (verismo!security.Updatepayload./Updatepayload/val (%Poly%verismo!security.Updatepayload. params!)))))) :pattern ((verismo!vbox.vbox.MutFnTrait.spec_update.? $ TYPE%verismo!security.SnpGuestMsg. $ TYPE%verismo!security.Updatepayload. $ BOOL self! prev! params! ret!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 8)))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 8)))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!slice.SliceAdditionalSpecFns. $ (SLICE T&. T&) T&. T&) :pattern ((tr_bound%vstd!slice.SliceAdditionalSpecFns. $ (SLICE T&. T&) T&. T&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC A&.) A&)))))
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(assert (tr_bound%vstd!view.View. $ BOOL))
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(assert (tr_bound%vstd!view.View. $ (UINT 16)))
(assert (tr_bound%vstd!view.View. $ (UINT 32)))
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(assert (tr_bound%vstd!view.View. $ (UINT 128)))
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type)) (! (=> (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. $ (TYPE%tuple%1. A0&. A0&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%1. A0&. A0&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&) :pattern ((tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&)))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&)))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ CHAR))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 8)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 16)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 32)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 8)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 16)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 32)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 64)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 8)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 16)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 32)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 64)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ CHAR $ (UINT 8)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ TYPE%tuple%0.))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. (GHOST T&.) T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. (TRACKED T&.) T&)))))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ (UINT 64)))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ (UINT 32)))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ (UINT 16)))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ (UINT 8)))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ INT))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ NAT))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T1&. T1&) (tr_bound%verismo!tspec.isconst.IsConstant. T2&. T2&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. (GHOST T&.) T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. (TRACKED T&.) T&)))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 32)))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 16)))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ BOOL))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ CHAR))
(assert (tr_bound%verismo!tspec.ops.VSpecNot. $ (UINT 64)))
(assert (tr_bound%verismo!tspec.ops.VSpecNot. $ (UINT 32)))
(assert (tr_bound%verismo!tspec.ops.VSpecNot. $ (UINT 16)))
(assert (tr_bound%verismo!tspec.ops.VSpecNot. $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.ops.VSpecNot. $ (UINT 8)))
(assert (tr_bound%verismo!tspec.ops.VSpecNot. $ BOOL))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ BOOL $ BOOL))
(assert (tr_bound%verismo!tspec.range_set.VRange. $ (TYPE%tuple%2. $ INT $ NAT)))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.security.sectype.SecMemType. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M&) :pattern ((tr_bound%verismo!tspec.security.sectype.SecMemType. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M&)))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T1&. T1& T2&. T2&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T1&. T1& T2&. T2&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ BOOL M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ BOOL M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecAdd. T1&. T1& $ INT T1&. T1&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. T1&. T1& $ INT T1&. T1&)))))
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& $ INT T1&. T1&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& $ INT T1&. T1&)))))
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& T1&. T1& $ INT)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& T1&. T1& $ INT)))))
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. T1&. T1& $ INT T1&. T1&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. T1&. T1& $ INT T1&. T1&)))))
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecMul. T1&. T1& $ INT T1&. T1&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. T1&. T1& $ INT T1&. T1&)))))
(assert (forall ((T&. Dcr) (T& Type) (T2&. Dcr) (T2& Type)) (! (=> (and (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.integer.IntOrd. T2&. T2&)) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& T2&. T2&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& T2&. T2&)))))
(assert (forall ((T&. Dcr) (T& Type) (T2&. Dcr) (T2& Type)) (! (=> (and (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.integer.IntOrd. T2&. T2&)) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& T2&. T2&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& T2&. T2&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ INT)) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ INT)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ NAT)) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ NAT)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 8))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 16))) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 16))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 32))) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 32))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 64))) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 64))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT SZ))) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT SZ))))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ INT $ (UINT 64)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ INT $ (UINT 32)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ INT $ (UINT 16)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ INT $ (UINT 8)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ INT $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ INT $ INT))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ INT $ NAT))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ INT)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ INT)))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ NAT $ (UINT 64)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ NAT $ (UINT 32)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ NAT $ (UINT 16)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ NAT $ (UINT 8)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ NAT $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ NAT $ INT))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ NAT $ NAT))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ NAT)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ NAT)))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 8) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 8) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 8) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 8) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 8) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 8) $ INT))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 8) $ NAT))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 8))))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 16) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 16) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 16) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 16) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 16) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 16) $ INT))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 16) $ NAT))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 16))) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 16))))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 32) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 32) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 32) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 32) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 32) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 32) $ INT))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 32) $ NAT))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 32))) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 32))))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 64) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 64) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 64) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 64) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 64) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 64) $ INT))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 64) $ NAT))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 64))) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 64))))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT SZ) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT SZ) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT SZ) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT SZ) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT SZ) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT SZ) $ INT))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT SZ) $ NAT))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT SZ))) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT SZ))))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 128)))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ BOOL))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ CHAR))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.size_s.SpecSize. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. (GHOST T&.) T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.size_s.SpecSize. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. (TRACKED T&.) T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%core!option.Option. T&. T&)) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%core!option.Option. T&. T&))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (=> (and (tr_bound%verismo!tspec.wellformed.WellFormed. T1&. T1&) (tr_bound%verismo!tspec.wellformed.WellFormed. T2&. T2&)) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type)) (! (=> (and (tr_bound%verismo!tspec.wellformed.WellFormed. T1&. T1&) (tr_bound%verismo!tspec.wellformed.WellFormed. T2&. T2&) (tr_bound%verismo!tspec.wellformed.WellFormed. T3&. T3&)) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%tuple%3. T1&. T1& T2&. T2& T3&. T3&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%tuple%3. T1&. T1& T2&. T2& T3&. T3&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. (GHOST T&.) T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. (TRACKED T&.) T&)))))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 32)))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 16)))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ BOOL))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ CHAR))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.addr_s.def_s.PageSize.))
(assert (tr_bound%verismo!tspec.integer.IntOrd. $ TYPE%verismo!arch.addr_s.def_s.PageSize.))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.entities.VMPL.))
(assert (tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (tr_bound%verismo!primitives_e.sectype.FromSecSeq. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)) :pattern ((tr_bound%verismo!primitives_e.sectype.FromSecSeq. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.))) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!vbox.vbox.MutFnTrait. $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) $ (TYPE%verismo!primitives_e.vec.PushParam. T&. T&) $ BOOL) :pattern ((tr_bound%verismo!vbox.vbox.MutFnTrait. $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) $ (TYPE%verismo!primitives_e.vec.PushParam. T&. T&) $ BOOL)))))
(assert (tr_bound%verismo!addr_e.addr_interface.SpecPageTrait. $ INT))
(assert (tr_bound%verismo!addr_e.addr_interface.SpecAddrTrait. $ INT))
(assert (tr_bound%verismo!addr_e.addr_interface.AddrTrait. $ (UINT 64) $ (UINT 64)))
(assert (tr_bound%verismo!addr_e.addr_interface.PageTrait. $ (UINT 64) $ (UINT 64)))
(assert (tr_bound%verismo!addr_e.addr_interface.AddrTrait. $ (UINT SZ) $ (UINT SZ)))
(assert (tr_bound%verismo!addr_e.addr_interface.PageTrait. $ (UINT SZ) $ (UINT SZ)))
(assert (tr_bound%verismo!addr_e.addr_interface.AddrTrait. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.)))
(declare-fun ens%verismo!tspec.security.sectype.impl&%17.constant. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (ret! Poly)) (! (= (ens%verismo!tspec.security.sectype.impl&%17.constant. T&. T& M&. M& val! ret!) (and (has_type ret! (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& ret!)) (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) ret!)) (= ret! (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%17.constant. T&. T& M&. M& val! ret!)))))
(assert (tr_bound%verismo!addr_e.addr_interface.PageTrait. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.)))
(declare-fun req%verismo!tspec.security.sectype.impl&%23.into. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%84 Bool)
(declare-const %%global_location_label%%85 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (req%verismo!tspec.security.sectype.impl&%23.into. M&. M& self!) (and (=> %%global_location_label%%84 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& self!)) (=> %%global_location_label%%85 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%23.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%23.into. (Dcr Type Poly Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Poly) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%23.into. M&. M& self! ret!) (and (uInv SZ ret!) (= ret! (uClip SZ (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!)))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%23.into. M&. M& self! ret!)))))
(assert (tr_bound%verismo!addr_e.addr_interface.AddrTrait. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)))
(assert (tr_bound%verismo!addr_e.addr_interface.PageTrait. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)))
(assert (tr_bound%verismo!addr_e.range_interface.MemRangeInterface. $ (TYPE%tuple%2. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!addr_e.range_interface.MemRangeInterface. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!addr_e.range_interface.MemRangeInterface. T&. T&) (tr_bound%verismo!addr_e.range_interface.GeneratedMemRangeInterface. T&. T&)) :pattern ((tr_bound%verismo!addr_e.range_interface.GeneratedMemRangeInterface. T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!addr_e.range_interface.MemRangeInterface. T&. T&) (tr_bound%verismo!addr_e.range_interface.MemRangeSeqInterface. $ (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((tr_bound%verismo!addr_e.range_interface.MemRangeSeqInterface. $ (TYPE%vstd!seq.Seq. T&. T&))))))
(declare-fun req%verismo!tspec.security.sectype.impl&%34.into. (Dcr Type Int) Bool)
(declare-const %%global_location_label%%86 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%34.into. M&. M& self!) (=> %%global_location_label%%86 (%B (B true)))) :pattern ((req%verismo!tspec.security.sectype.impl&%34.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%34.into. (Dcr Type Int Poly) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! Poly)) (! (= (ens%verismo!tspec.security.sectype.impl&%34.into. M&. M& self! ret!) (and (has_type ret! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= ret! (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (I self!)))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& ret!)) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%34.into. M&. M& self! ret!)))))
(declare-fun req%verismo!tspec_e.array.array_e.impl&%1.update. (Dcr Type Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%87 Bool)
(declare-const %%global_location_label%%88 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! Poly) (index! Int) (elem! Poly)) (! (= (req%verismo!tspec_e.array.array_e.impl&%1.update. T&. T& N&. N& pre%self! index! elem!) (and (=> %%global_location_label%%87 (< index! (vstd!seq.Seq.len.? T&. T& (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& pre%self!)))) (=> %%global_location_label%%88 (%B (B true))))) :pattern ((req%verismo!tspec_e.array.array_e.impl&%1.update. T&. T& N&. N& pre%self! index! elem!)))))
(declare-fun ens%verismo!tspec_e.array.array_e.impl&%1.update. (Dcr Type Dcr Type Poly Poly Int Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! Poly) (self! Poly) (index! Int) (elem! Poly) (ret! Poly)) (! (= (ens%verismo!tspec_e.array.array_e.impl&%1.update. T&. T& N&. N& pre%self! self! index! elem! ret!) (and (has_type ret! T&) (has_type self! (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)) (= (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) (vstd!seq.Seq.update.? T&. T& (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& pre%self!) (I index!) (vstd!seq.Seq.index.? T&. T& (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) (I index!)))) (= (vstd!seq.Seq.index.? T&. T& (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) (I index!)) elem!) (= ret! (vstd!seq.Seq.index.? T&. T& (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& pre%self!) (I index!))))) :pattern ((ens%verismo!tspec_e.array.array_e.impl&%1.update. T&. T& N&. N& pre%self! self! index! elem! ret!)))))
(declare-fun req%verismo!tspec_e.array.array_e.impl&%0.index. (Dcr Type Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%89 Bool)
(declare-const %%global_location_label%%90 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (index! Int)) (! (= (req%verismo!tspec_e.array.array_e.impl&%0.index. T&. T& N&. N& self! index!) (and (=> %%global_location_label%%89 (< index! (vstd!seq.Seq.len.? T&. T& (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!)))) (=> %%global_location_label%%90 (%B (B true))))) :pattern ((req%verismo!tspec_e.array.array_e.impl&%0.index. T&. T& N&. N& self! index!)))))
(declare-fun ens%verismo!tspec_e.array.array_e.impl&%0.index. (Dcr Type Dcr Type Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (index! Int) (ret! Poly)) (! (= (ens%verismo!tspec_e.array.array_e.impl&%0.index. T&. T& N&. N& self! index! ret!) (and (has_type ret! T&) (= ret! (vstd!seq.Seq.index.? T&. T& (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) (I index!))))) :pattern ((ens%verismo!tspec_e.array.array_e.impl&%0.index. T&. T& N&. N& self! index! ret!)))))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ TYPE%verismo!boot.idt.def.Idtr.))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!boot.idt.def.Idtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!boot.idt.def.Idtr.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!boot.idt.def.Idtr.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!boot.idt.def.Idtr.))
(assert (tr_bound%verismo!vbox.vbox.MutFnWithCSTrait. $ TYPE%verismo!boot.monitor_params.MonitorParams. $ TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. $ TYPE%verismo!boot.init.init_e.InitE820Fn. (REF $) (SLICE $ TYPE%verismo!boot.params.E820Entry.)))
(assert (tr_bound%verismo!vbox.vbox.MutFnTrait. $ TYPE%verismo!boot.monitor_params.MonitorParams. $ (TYPE%tuple%2. $ TYPE%verismo!boot.init.init_e.InitCpuCount. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)))
(declare-fun req%verismo!snp.ghcb.proto_e.vc_terminate. (Int verismo!registers.trackedcore.snpcore.SnpCore.) Bool)
(declare-const %%global_location_label%%91 Bool)
(assert (forall ((reason_code! Int) (pre%snpcore! verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (req%verismo!snp.ghcb.proto_e.vc_terminate. reason_code! pre%snpcore!) (=> %%global_location_label%%91 (verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. pre%snpcore!)))) :pattern ((req%verismo!snp.ghcb.proto_e.vc_terminate. reason_code! pre%snpcore!)))))
(declare-fun ens%verismo!snp.ghcb.proto_e.vc_terminate. (Int verismo!registers.trackedcore.snpcore.SnpCore. verismo!registers.trackedcore.snpcore.SnpCore. tuple%0.) Bool)
(assert (forall ((reason_code! Int) (pre%snpcore! verismo!registers.trackedcore.snpcore.SnpCore.) (snpcore! verismo!registers.trackedcore.snpcore.SnpCore.) (ret! tuple%0.)) (! (= (ens%verismo!snp.ghcb.proto_e.vc_terminate. reason_code! pre%snpcore! snpcore! ret!) false) :pattern ((ens%verismo!snp.ghcb.proto_e.vc_terminate. reason_code! pre%snpcore! snpcore! ret!)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!linkedlist.Node. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!linkedlist.Node. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(declare-fun ens%verismo!ptr.ptr_e.impl&%0.to_usize. (Dcr Type verismo!ptr.def_s.SnpPPtr. Int) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! verismo!ptr.def_s.SnpPPtr.) (u! Int)) (! (= (ens%verismo!ptr.ptr_e.impl&%0.to_usize. V&. V& self! u!) (and (uInv SZ u!) (= u! (verismo!ptr.def_s.impl&%19.id.? V&. V& (Poly%verismo!ptr.def_s.SnpPPtr. self!))) (= u! (verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr (%Poly%verismo!ptr.def_s.SnpPPtr. (Poly%verismo!ptr.def_s.SnpPPtr. self!)))))) :pattern ((ens%verismo!ptr.ptr_e.impl&%0.to_usize. V&. V& self! u!)))))
(assert (tr_bound%verismo!vbox.vbox.MutFnTrait. $ TYPE%verismo!allocator.linkedlist.LinkedListAllocator. $ (TYPE%tuple%6. $ TYPE%verismo!boot.init.mshv_alloc.InitAllocFn. (REF $) (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.) (REF $) (SLICE $ TYPE%verismo!boot.params.E820Entry.) $ (UINT SZ) $ (UINT SZ) (TRACKED $) TYPE%verismo!mem.rawmem_s.SnpMemCoreConsole.) (TRACKED $) TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole.))
(assert (tr_bound%verismo!vbox.vbox.MutFnWithCSTrait. $ TYPE%verismo!boot.mshyper.param_e.HvParamTable. $ TYPE%verismo!snp.trackedcore.snpmulticore.SnpCoreConsole. $ TYPE%verismo!boot.init.mshv_fmt.FmtHvParamCall. (REF $) (SLICE $ TYPE%verismo!boot.mshyper.param_e.HyperVMemMapEntry.)))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!boot.linux.BootInfo.))
(assert (tr_bound%verismo!vbox.vbox.BorrowFnTrait. $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copybp. $ TYPE%verismo!boot.params.BootParams.))
(assert (tr_bound%verismo!vbox.vbox.MutFnTrait. $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatebp. $ BOOL))
(assert (tr_bound%verismo!vbox.vbox.BorrowFnTrait. $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copysecret. $ TYPE%verismo!security.secret.SnpSecretsPageLayout.))
(assert (tr_bound%verismo!vbox.vbox.MutFnTrait. $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatesecret. $ BOOL))
(assert (tr_bound%verismo!vbox.vbox.BorrowFnTrait. $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copycpuid. $ TYPE%verismo!snp.cpuid.SnpCpuidTable.))
(assert (tr_bound%verismo!vbox.vbox.MutFnTrait. $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatecpuid. $ BOOL))
(assert (tr_bound%verismo!vbox.vbox.BorrowFnTrait. $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copygdt. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (CONST_INT 32))))
(assert (tr_bound%verismo!vbox.vbox.MutFnTrait. $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updategdt. $ BOOL))
(assert (tr_bound%verismo!vbox.vbox.BorrowFnTrait. $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copycmdline. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 256))))
(assert (tr_bound%verismo!vbox.vbox.MutFnTrait. $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updatecmdline. $ BOOL))
(assert (tr_bound%verismo!vbox.vbox.BorrowFnTrait. $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Copyccblob. $ TYPE%verismo!boot.linux.CCBlobSevInfo.))
(assert (tr_bound%verismo!vbox.vbox.MutFnTrait. $ TYPE%verismo!boot.linux.BootInfo. $ TYPE%verismo!boot.linux.Updateccblob. $ BOOL))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!boot.linux.BootInfo.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!boot.linux.BootInfo.))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!boot.linux.CCBlobSevInfo.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!boot.linux.CCBlobSevInfo.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!boot.linux.CCBlobSevInfo.))
(declare-fun ens%verismo!tspec.security.sectype.impl&%27.into. (Dcr Type Int Poly) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! Poly)) (! (= (ens%verismo!tspec.security.sectype.impl&%27.into. M&. M& self! ret!) (and (has_type ret! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (= ret! (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) (I self!)))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& ret!)) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (I (uClip 32 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%27.into. M&. M& self! ret!)))))
(declare-fun req%verismo!tspec.security.sectype.impl&%48.into. (Dcr Type Int) Bool)
(declare-const %%global_location_label%%92 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%48.into. M&. M& self!) (=> %%global_location_label%%92 (%B (B true)))) :pattern ((req%verismo!tspec.security.sectype.impl&%48.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%48.into. (Dcr Type Int Poly) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! Poly)) (! (= (ens%verismo!tspec.security.sectype.impl&%48.into. M&. M& self! ret!) (and (has_type ret! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (= ret! (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) (I self!)))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& ret!)) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (I self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%48.into. M&. M& self! ret!)))))
(declare-fun req%verismo!tspec.security.sectype.impl&%76.into. (Dcr Type Int) Bool)
(declare-const %%global_location_label%%93 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%76.into. M&. M& self!) (=> %%global_location_label%%93 (%B (B true)))) :pattern ((req%verismo!tspec.security.sectype.impl&%76.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%76.into. (Dcr Type Int Poly) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! Poly)) (! (= (ens%verismo!tspec.security.sectype.impl&%76.into. M&. M& self! ret!) (and (has_type ret! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= ret! (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) (I self!)))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& ret!)) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%76.into. M&. M& self! ret!)))))
(declare-const %return! Poly)
(declare-const self!@0 Poly)
(declare-const params! Poly)
(declare-const tmp%1 Poly)
(declare-const tmp%2 Poly)
(declare-const tmp%3 Poly)
(declare-const tmp%4 Int)
(declare-const tmp%5 Poly)
(declare-const tmp%6 Poly)
(declare-const tmp%7 Poly)
(declare-const tmp%8 Poly)
(declare-const verus_tmp_oldself@ verismo!boot.params.BootParams.)
(declare-const tmp%9 Bool)
(declare-const tmp%10 Bool)
(declare-const tmp%11 Poly)
(declare-const tmp%12 Poly)
(declare-const tmp%13 Poly)
(declare-const tmp%14 Bool)
(declare-const acpi_rsdp_addr@ Int)
(declare-const cc_blob_addr@ Int)
(declare-const cmd_line_addr@ Int)
(declare-const cmdline_size@ Int)
(declare-const e820_entries@ Int)
(declare-const e820@ Poly)
(declare-const hdr@ verismo!boot.params.SetupHeader.)
(declare-const verus_tmp@0 verismo!boot.params.BootParams.)
(declare-const oldself@0 verismo!boot.params.BootParams.)
(declare-const i@0 Int)
(assert fuel_defaults)
(assert (has_type self!@0 TYPE%verismo!boot.params.BootParams.))
(assert (has_type params! TYPE%verismo!boot.linux.BootUpdate.))
(assert (uInv 64 acpi_rsdp_addr@))
(assert (uInv 64 cc_blob_addr@))
(assert (uInv 64 cmd_line_addr@))
(assert (uInv 64 cmdline_size@))
(assert (uInv 8 e820_entries@))
(assert (has_type e820@ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16))))
(assert (has_type tmp%1 (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)))
(assert (has_type tmp%2 (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)))
(assert (has_type tmp%3 (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)))
(assert (uInv 32 tmp%4))
(assert (has_type tmp%5 TYPE%verismo!boot.params.SetupHeader.))
(assert (has_type tmp%6 (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)))
(assert (has_type tmp%7 (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)))
(assert (has_type tmp%8 (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))
(assert (has_type (Poly%verismo!boot.params.BootParams. verus_tmp@0) TYPE%verismo!boot.params.BootParams.))
(assert (has_type (Poly%verismo!boot.params.BootParams. verus_tmp_oldself@) TYPE%verismo!boot.params.BootParams.))
(assert (has_type (Poly%verismo!boot.params.BootParams. oldself@0) TYPE%verismo!boot.params.BootParams.))
(assert (uInv 8 i@0))
(declare-const self!@1 Poly)
(declare-const self!@2 Poly)
(declare-const i@1 Int)
(declare-const %%location_label%%0 Bool)
(declare-const %%location_label%%1 Bool)
(declare-const %%location_label%%2 Bool)
(declare-const %%location_label%%3 Bool)
(declare-const %%location_label%%4 Bool)
(declare-const %%location_label%%5 Bool)
(declare-const %%location_label%%6 Bool)
(declare-const %%location_label%%7 Bool)
(declare-const %%location_label%%8 Bool)
(declare-const %%location_label%%9 Bool)
(declare-const %%location_label%%10 Bool)
(declare-const %%location_label%%11 Bool)
(assert (not (=> (has_type self!@1 TYPE%verismo!boot.params.BootParams.) (=> (and (<= 0 i@0) (<= i@0 e820_entries@)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.BootParams. self!@1)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16)) e820@)) (=> (<= e820_entries@ (vstd!seq.Seq.len.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16) e820@))) (=> (ext_eq true (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.params.E820Entry.) (vstd!seq.Seq.subrange.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!@1))) (I 0) (I i@0)) (vstd!seq.Seq.subrange.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16) e820@) (I 0) (I i@0))) (=> (= (%Poly%verismo!boot.params.BootParams. self!@1) (verismo!boot.params.impl&%22.spec_set_e820.? (Poly%verismo!boot.params.BootParams. oldself@0) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!@1)))) (=> (< i@0 e820_entries@) (=> (= tmp%9 (ext_eq true (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.params.E820Entry.) (vstd!seq.Seq.subrange.? $ TYPE%verismo!boot.params.E820Entry. (vstd!seq.Seq.update.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!@1))) (I i@0) (vstd!seq.Seq.index.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16) e820@) (I i@0))) (I 0) (I (Add i@0 1))) (vstd!seq.Seq.push.? $ TYPE%verismo!boot.params.E820Entry. (vstd!seq.Seq.subrange.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!@1))) (I 0) (I i@0)) (vstd!seq.Seq.index.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16) e820@) (I i@0))))) (and (=> %%location_label%%0 tmp%9) (=> tmp%9 (=> (= tmp%10 (ext_eq true (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.params.E820Entry.) (vstd!seq.Seq.subrange.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16) e820@) (I 0) (I (Add i@0 1))) (vstd!seq.Seq.push.? $ TYPE%verismo!boot.params.E820Entry. (vstd!seq.Seq.subrange.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16) e820@) (I 0) (I i@0)) (vstd!seq.Seq.index.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16) e820@) (I i@0))))) (and (=> %%location_label%%1 tmp%10) (=> tmp%10 (and (=> %%location_label%%2 (req%verismo!tspec_e.array.array_e.impl&%0.index. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16) e820@ (uClip SZ i@0))) (=> (ens%verismo!tspec_e.array.array_e.impl&%0.index. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16) e820@ (uClip SZ i@0) tmp%11) (=> (ens%verismo!boot.params.impl&%0.clone. tmp%11 tmp%12) (and (=> %%location_label%%3 (req%verismo!tspec_e.array.array_e.impl&%1.update. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!@1)) (uClip SZ i@0) tmp%12)) (=> (and (= (verismo!boot.params.BootParams./BootParams/_pad0 (%Poly%verismo!boot.params.BootParams. self!@1)) (verismo!boot.params.BootParams./BootParams/_pad0 (%Poly%verismo!boot.params.BootParams. self!@2))) (= (verismo!boot.params.BootParams./BootParams/acpi_rsdp_addr (%Poly%verismo!boot.params.BootParams. self!@1)) (verismo!boot.params.BootParams./BootParams/acpi_rsdp_addr (%Poly%verismo!boot.params.BootParams. self!@2))) (= (verismo!boot.params.BootParams./BootParams/_pad1 (%Poly%verismo!boot.params.BootParams. self!@1)) (verismo!boot.params.BootParams./BootParams/_pad1 (%Poly%verismo!boot.params.BootParams. self!@2))) (= (verismo!boot.params.BootParams./BootParams/_ext_cmd_line_ptr (%Poly%verismo!boot.params.BootParams. self!@1)) (verismo!boot.params.BootParams./BootParams/_ext_cmd_line_ptr (%Poly%verismo!boot.params.BootParams. self!@2))) (= (verismo!boot.params.BootParams./BootParams/_pad2_0 (%Poly%verismo!boot.params.BootParams. self!@1)) (verismo!boot.params.BootParams./BootParams/_pad2_0 (%Poly%verismo!boot.params.BootParams. self!@2))) (= (verismo!boot.params.BootParams./BootParams/cc_blob_addr (%Poly%verismo!boot.params.BootParams. self!@1)) (verismo!boot.params.BootParams./BootParams/cc_blob_addr (%Poly%verismo!boot.params.BootParams. self!@2))) (= (verismo!boot.params.BootParams./BootParams/_pad2_1 (%Poly%verismo!boot.params.BootParams. self!@1)) (verismo!boot.params.BootParams./BootParams/_pad2_1 (%Poly%verismo!boot.params.BootParams. self!@2))) (= (verismo!boot.params.BootParams./BootParams/e820_entries (%Poly%verismo!boot.params.BootParams. self!@1)) (verismo!boot.params.BootParams./BootParams/e820_entries (%Poly%verismo!boot.params.BootParams. self!@2))) (= (verismo!boot.params.BootParams./BootParams/reserved_4 (%Poly%verismo!boot.params.BootParams. self!@1)) (verismo!boot.params.BootParams./BootParams/reserved_4 (%Poly%verismo!boot.params.BootParams. self!@2))) (= (verismo!boot.params.BootParams./BootParams/hdr (%Poly%verismo!boot.params.BootParams. self!@1)) (verismo!boot.params.BootParams./BootParams/hdr (%Poly%verismo!boot.params.BootParams. self!@2))) (= (verismo!boot.params.BootParams./BootParams/reserved_5 (%Poly%verismo!boot.params.BootParams. self!@1)) (verismo!boot.params.BootParams./BootParams/reserved_5 (%Poly%verismo!boot.params.BootParams. self!@2))) (= (verismo!boot.params.BootParams./BootParams/reserved_6 (%Poly%verismo!boot.params.BootParams. self!@1)) (verismo!boot.params.BootParams./BootParams/reserved_6 (%Poly%verismo!boot.params.BootParams. self!@2))) (= (Poly%verismo!boot.params.BootParams. (%Poly%verismo!boot.params.BootParams. self!@2)) self!@2)) (=> (has_type self!@2 TYPE%verismo!boot.params.BootParams.) (=> (ens%verismo!tspec_e.array.array_e.impl&%1.update. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!@1)) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!@2)) (uClip SZ i@0) tmp%12 tmp%13) (=> (= tmp%14 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.params.E820Entry.) (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!@2)))))) (and (=> %%location_label%%4 tmp%14) (=> tmp%14 (and (=> %%location_label%%5 (uInv 8 (Add i@0 1))) (=> (= i@1 (uClip 8 (Add i@0 1))) (and (=> %%location_label%%6 (and (<= 0 i@1) (<= i@1 e820_entries@))) (and (=> %%location_label%%7 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.params.BootParams. self!@2))) (and (=> %%location_label%%8 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16)) e820@))) (and (=> %%location_label%%9 (<= e820_entries@ (vstd!seq.Seq.len.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16) e820@)))) (and (=> %%location_label%%10 (ext_eq true (TYPE%vstd!seq.Seq. $ TYPE%verismo!boot.params.E820Entry.) (vstd!seq.Seq.subrange.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 128) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!@2))) (I 0) (I i@1)) (vstd!seq.Seq.subrange.? $ TYPE%verismo!boot.params.E820Entry. (verismo!tspec_e.array.array_t.impl&%2.view.? $ TYPE%verismo!boot.params.E820Entry. $ (CONST_INT 16) e820@) (I 0) (I i@1)))) (=> %%location_label%%11 (= (%Poly%verismo!boot.params.BootParams. self!@2) (verismo!boot.params.impl&%22.spec_set_e820.? (Poly%verismo!boot.params.BootParams. oldself@0) (verismo!boot.params.BootParams./BootParams/e820 (%Poly%verismo!boot.params.BootParams. self!@2))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
