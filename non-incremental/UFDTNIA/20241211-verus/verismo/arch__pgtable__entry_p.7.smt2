(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verismo (https://www.usenix.org/conference/osdi24/presentation/zhou) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties. FuelId)
(declare-const fuel%verismo!tspec.math.nonlinear.abs. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_int_pow2. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_nat_pow2. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.PAGE_SIZE. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.value. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.to_page. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.to_offset. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.new2. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.new. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.value. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.new. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.new2. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.to_addr. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%4.from_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%5.as_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%5.from_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.first. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.offset. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.len. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%4.from_int. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%6.spec_from_int. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.PT_ENTRY_SIZE. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.PT_ENTRY_NUM_BIT. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.L3_PGSIZE. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.L2_PGSIZE. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.L1_PGSIZE. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.L0_PGSIZE. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.PT_ENTRY_NUM. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.PT_ENTRY_IDX_MASK. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.impl&%4.from_int. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.impl&%6.spec_from_int. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.impl&%8.spec_value. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%0.parent_lvl. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_offset. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_table_index. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.contains_flag. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_ppn. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_addr. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%0.spec_add. FuelId)
(declare-const fuel%verismo!tspec.spec_unused. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties. fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties. fuel%verismo!tspec.math.nonlinear.abs. fuel%verismo!tspec.math.pow_s.spec_int_pow2. fuel%verismo!tspec.math.pow_s.spec_nat_pow2. fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2. fuel%verismo!arch.addr_s.def_s.PAGE_SIZE. fuel%verismo!arch.addr_s.page.impl&%2.value. fuel%verismo!arch.addr_s.page.impl&%2.to_page. fuel%verismo!arch.addr_s.page.impl&%2.to_offset. fuel%verismo!arch.addr_s.page.impl&%2.new2. fuel%verismo!arch.addr_s.page.impl&%2.new. fuel%verismo!arch.addr_s.page.impl&%3.value. fuel%verismo!arch.addr_s.page.impl&%3.new. fuel%verismo!arch.addr_s.page.impl&%3.new2. fuel%verismo!arch.addr_s.page.impl&%3.to_addr. fuel%verismo!arch.addr_s.page.impl&%4.as_int. fuel%verismo!arch.addr_s.page.impl&%4.from_int. fuel%verismo!arch.addr_s.page.impl&%5.as_int. fuel%verismo!arch.addr_s.page.impl&%5.from_int. fuel%verismo!arch.addr_s.page.impl&%8.first. fuel%verismo!arch.addr_s.page.impl&%8.offset. fuel%verismo!arch.addr_s.page.impl&%8.len. fuel%verismo!arch.entities.memtype.impl&%4.as_int. fuel%verismo!arch.entities.memtype.impl&%4.from_int. fuel%verismo!arch.entities.memtype.impl&%6.spec_from_int. fuel%verismo!arch.pgtable.def.PT_ENTRY_SIZE. fuel%verismo!arch.pgtable.def.PT_ENTRY_NUM_BIT. fuel%verismo!arch.pgtable.def.L3_PGSIZE. fuel%verismo!arch.pgtable.def.L2_PGSIZE. fuel%verismo!arch.pgtable.def.L1_PGSIZE. fuel%verismo!arch.pgtable.def.L0_PGSIZE. fuel%verismo!arch.pgtable.def.PT_ENTRY_NUM. fuel%verismo!arch.pgtable.def.PT_ENTRY_IDX_MASK. fuel%verismo!arch.pgtable.def.impl&%4.as_int. fuel%verismo!arch.pgtable.def.impl&%4.from_int. fuel%verismo!arch.pgtable.def.impl&%6.spec_from_int. fuel%verismo!arch.pgtable.def.impl&%8.spec_value. fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize. fuel%verismo!arch.pgtable.entry_s.impl&%0.parent_lvl. fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_offset. fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_table_index. fuel%verismo!arch.pgtable.entry_s.impl&%1.contains_flag. fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_ppn. fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_addr. fuel%verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx. fuel%verismo!tspec.integer.impl&%0.spec_add. fuel%verismo!tspec.spec_unused.))
(declare-datatypes ((core!option.Option. 0) (verismo!arch.addr_s.def_s.GuestVir. 0) (verismo!arch.addr_s.def_s.SpecPage. 0) (verismo!arch.addr_s.def_s.SpecAddr. 0) (verismo!arch.addr_s.def_s.SpecMem. 0) (verismo!arch.entities.memtype.PTLevel. 0) (verismo!arch.pgtable.def.PteFlag. 0) (verismo!arch.pgtable.def.SpecPageTableEntry. 0) (tuple%0. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((verismo!arch.addr_s.def_s.GuestVir./GuestVir )) ((verismo!arch.addr_s.def_s.SpecPage./SpecPage (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?value Int) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?dummy Poly))) ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?value Int) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?dummy Poly))) ((verismo!arch.addr_s.def_s.SpecMem./SpecMem (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?first verismo!arch.addr_s.def_s.SpecAddr.) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?size Int))) ((verismo!arch.entities.memtype.PTLevel./L3 ) (verismo!arch.entities.memtype.PTLevel./L2 ) (verismo!arch.entities.memtype.PTLevel./L1 ) (verismo!arch.entities.memtype.PTLevel./L0 )) ((verismo!arch.pgtable.def.PteFlag./P ) (verismo!arch.pgtable.def.PteFlag./W ) (verismo!arch.pgtable.def.PteFlag./S ) (verismo!arch.pgtable.def.PteFlag./PWT ) (verismo!arch.pgtable.def.PteFlag./PCD ) (verismo!arch.pgtable.def.PteFlag./A ) (verismo!arch.pgtable.def.PteFlag./D ) (verismo!arch.pgtable.def.PteFlag./C ) (verismo!arch.pgtable.def.PteFlag./NX )) ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?value Int) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?dummy Poly))) ((tuple%0./tuple%0 ))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (verismo!arch.addr_s.def_s.SpecPage.) Int)
(declare-fun verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (verismo!arch.addr_s.def_s.SpecPage.) Poly)
(declare-fun verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (verismo!arch.addr_s.def_s.SpecAddr.) Int)
(declare-fun verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (verismo!arch.addr_s.def_s.SpecAddr.) Poly)
(declare-fun verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (verismo!arch.addr_s.def_s.SpecMem.) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (verismo!arch.addr_s.def_s.SpecMem.) Int)
(declare-fun verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/value (verismo!arch.pgtable.def.SpecPageTableEntry.) Int)
(declare-fun verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy (verismo!arch.pgtable.def.SpecPageTableEntry.) Poly)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.addr_s.def_s.GuestVir. Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecPage. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecAddr. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecMem. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.entities.memtype.PTLevel. Type)
(declare-const TYPE%verismo!arch.pgtable.def.PteFlag. Type)
(declare-fun TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%verismo!arch.addr_s.def_s.GuestVir. (verismo!arch.addr_s.def_s.GuestVir.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.GuestVir. (Poly) verismo!arch.addr_s.def_s.GuestVir.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecAddr.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.def_s.SpecMem.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly) verismo!arch.addr_s.def_s.SpecMem.)
(declare-fun Poly%verismo!arch.entities.memtype.PTLevel. (verismo!arch.entities.memtype.PTLevel.) Poly)
(declare-fun %Poly%verismo!arch.entities.memtype.PTLevel. (Poly) verismo!arch.entities.memtype.PTLevel.)
(declare-fun Poly%verismo!arch.pgtable.def.PteFlag. (verismo!arch.pgtable.def.PteFlag.) Poly)
(declare-fun %Poly%verismo!arch.pgtable.def.PteFlag. (Poly) verismo!arch.pgtable.def.PteFlag.)
(declare-fun Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def.SpecPageTableEntry.) Poly)
(declare-fun %Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (Poly) verismo!arch.pgtable.def.SpecPageTableEntry.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestVir.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.GuestVir. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.GuestVir. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.addr_s.def_s.GuestVir.) (= x (Poly%verismo!arch.addr_s.def_s.GuestVir. (%Poly%verismo!arch.addr_s.def_s.GuestVir. x)))) :pattern ((has_type x TYPE%verismo!arch.addr_s.def_s.GuestVir.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestVir.)) (! (has_type (Poly%verismo!arch.addr_s.def_s.GuestVir. x) TYPE%verismo!arch.addr_s.def_s.GuestVir.) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.GuestVir. x) TYPE%verismo!arch.addr_s.def_s.GuestVir.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly%verismo!arch.addr_s.def_s.SpecPage. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecPage. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecPage. (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! Int) (_dummy! Poly)) (! (=> (and (<= 0 _value!) (has_type _dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage./SpecPage _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage./SpecPage _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value x) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?value x)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?dummy x)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) T&)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(define-fun is-verismo!arch.addr_s.def_s.SpecPage./SpecPage_ ((c verismo!arch.addr_s.def_s.SpecPage.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecPage./SpecPage) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecPage./SpecPage_ x) (height_lt (height (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x)) (height (Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((height (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x))))))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type y (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. y))) (ext_eq deep T& (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. y)))) (ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) x y)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly%verismo!arch.addr_s.def_s.SpecAddr. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecAddr. (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! Int) (_dummy! Poly)) (! (=> (and (<= 0 _value!) (has_type _dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value x) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?value x)) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?dummy x)) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) T&)) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(define-fun is-verismo!arch.addr_s.def_s.SpecAddr./SpecAddr_ ((c verismo!arch.addr_s.def_s.SpecAddr.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecAddr./SpecAddr) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecAddr./SpecAddr_ x) (height_lt (height (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x)) (height (Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))) :pattern ((height (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x))))))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type y (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. y))) (ext_eq deep T& (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. y)))) (ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) x y)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecMem. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecMem. (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_first! verismo!arch.addr_s.def_s.SpecAddr.) (_size! Int)) (! (=> (and (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. _first!) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (<= 0 _size!)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.def_s.SpecMem./SpecMem _first! _size!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.def_s.SpecMem./SpecMem _first! _size!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (= (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?first x)) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. x))) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (= (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size x) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?size x)) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/size x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(define-fun is-verismo!arch.addr_s.def_s.SpecMem./SpecMem_ ((c verismo!arch.addr_s.def_s.SpecMem.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecMem./SpecMem) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecMem./SpecMem_ x) (height_lt (height (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x))) (height (Poly%verismo!arch.addr_s.def_s.SpecMem. x)))) :pattern ((height (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x)))))))
(assert (forall ((x verismo!arch.entities.memtype.PTLevel.)) (! (= x (%Poly%verismo!arch.entities.memtype.PTLevel. (Poly%verismo!arch.entities.memtype.PTLevel. x))) :pattern ((Poly%verismo!arch.entities.memtype.PTLevel. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memtype.PTLevel.) (= x (Poly%verismo!arch.entities.memtype.PTLevel. (%Poly%verismo!arch.entities.memtype.PTLevel. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.memtype.PTLevel.)))))
(assert (forall ((x verismo!arch.entities.memtype.PTLevel.)) (! (has_type (Poly%verismo!arch.entities.memtype.PTLevel. x) TYPE%verismo!arch.entities.memtype.PTLevel.) :pattern ((has_type (Poly%verismo!arch.entities.memtype.PTLevel. x) TYPE%verismo!arch.entities.memtype.PTLevel.)))))
(assert (forall ((x verismo!arch.pgtable.def.PteFlag.)) (! (= x (%Poly%verismo!arch.pgtable.def.PteFlag. (Poly%verismo!arch.pgtable.def.PteFlag. x))) :pattern ((Poly%verismo!arch.pgtable.def.PteFlag. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.pgtable.def.PteFlag.) (= x (Poly%verismo!arch.pgtable.def.PteFlag. (%Poly%verismo!arch.pgtable.def.PteFlag. x)))) :pattern ((has_type x TYPE%verismo!arch.pgtable.def.PteFlag.)))))
(assert (forall ((x verismo!arch.pgtable.def.PteFlag.)) (! (has_type (Poly%verismo!arch.pgtable.def.PteFlag. x) TYPE%verismo!arch.pgtable.def.PteFlag.) :pattern ((has_type (Poly%verismo!arch.pgtable.def.PteFlag. x) TYPE%verismo!arch.pgtable.def.PteFlag.)))))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (= x (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x))) :pattern ((Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (= x (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)))) :pattern ((has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! Int) (_dummy! Poly)) (! (=> (has_type _dummy! T&) (has_type (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry _value! _dummy!)) (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))) :pattern ((has_type (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry _value! _dummy!)) (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))))))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (= (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/value x) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?value x)) :pattern ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/value x)))))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (= (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?dummy x)) :pattern ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (has_type (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)) T&)) :pattern ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)) (has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))))))
(define-fun is-verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry_ ((c verismo!arch.pgtable.def.SpecPageTableEntry.)) Bool ((_ is verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry) c))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (=> (is-verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry_ x) (height_lt (height (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x)) (height (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)))) :pattern ((height (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x))))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecAdd. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.integer.IntValue. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!arch.addr_s.def_s.AddrType. (Dcr Type) Bool)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(declare-fun verismo!tspec.math.bits_p.spec_bit64_or_properties.? (Poly Poly Poly) Bool)
(declare-fun verismo!tspec.math.bits_p.spec_bit64_not_properties.? (Poly Poly) Bool)
(declare-fun verismo!tspec.math.nonlinear.abs.? (Poly) Int)
(declare-fun verismo!tspec.math.pow_s.spec_int_pow2.? (Poly) Int)
(declare-fun verismo!tspec.math.pow_s.spec_nat_pow2.? (Poly) Int)
(declare-fun verismo!tspec.math.pow_s.rec%spec_nat_pow2.? (Poly Fuel) Int)
(declare-fun verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? (Poly) Bool)
(declare-fun verismo!arch.addr_s.def_s.PAGE_SIZE.? () Int)
(declare-fun verismo!arch.addr_s.page.impl&%2.value.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.addr_s.page.impl&%2.to_page.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.addr_s.page.impl&%2.to_offset.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.addr_s.page.impl&%2.new2.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.page.impl&%2.new.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.page.impl&%3.value.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.addr_s.page.impl&%3.new.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.addr_s.page.impl&%3.new2.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.addr_s.page.impl&%3.to_addr.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.page.impl&%8.first.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.page.impl&%8.offset.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.addr_s.page.impl&%8.len.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.entities.memtype.impl&%6.spec_from_int.? (Poly) core!option.Option.)
(declare-fun verismo!arch.pgtable.def.PT_ENTRY_SIZE.? () Int)
(declare-fun verismo!arch.pgtable.def.PT_ENTRY_NUM_BIT.? () Int)
(declare-fun verismo!arch.pgtable.def.L3_PGSIZE.? () Int)
(declare-fun verismo!arch.pgtable.def.L2_PGSIZE.? () Int)
(declare-fun verismo!arch.pgtable.def.L1_PGSIZE.? () Int)
(declare-fun verismo!arch.pgtable.def.L0_PGSIZE.? () Int)
(declare-fun verismo!arch.pgtable.def.PT_ENTRY_NUM.? () Int)
(declare-fun verismo!arch.pgtable.def.PT_ENTRY_IDX_MASK.? () Int)
(declare-fun verismo!arch.pgtable.def.impl&%6.spec_from_int.? (Poly) core!option.Option.)
(declare-fun verismo!arch.pgtable.def.impl&%8.spec_value.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.pgtable.def.spec_page_frame_bits.? (Poly) Int)
(declare-fun verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize.? (Poly) Int)
(declare-fun verismo!arch.pgtable.entry_s.impl&%0.parent_lvl.? (Poly) core!option.Option.)
(declare-fun verismo!arch.pgtable.entry_s.impl&%0.spec_offset.? (Poly) Int)
(declare-fun verismo!arch.pgtable.entry_s.impl&%0.spec_table_index.? (Dcr Type Poly Poly) Int)
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.contains_flag.? (Dcr Type Poly Poly) Bool)
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.spec_addr.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!tspec.ops.VSpecAdd.spec_add.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecAdd.spec_add%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.integer.IntValue.as_int.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntValue.as_int%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntValue.from_int.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntValue.from_int%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.spec_unused.? (Dcr Type) Poly)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.size_of.? V&. V&)) :pattern ((vstd!layout.size_of.? V&. V&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.integer.IntValue.as_int.? Self%&. Self%& self!) INT)) :pattern ((verismo!tspec.integer.IntValue.as_int.? Self%&. Self%& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (val! Poly)) (! (=> (has_type val! INT) (has_type (verismo!tspec.integer.IntValue.from_int.? Self%&. Self%& val!) Self%&)) :pattern ((verismo!tspec.integer.IntValue.from_int.? Self%&. Self%& val!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.PAGE_SIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.PAGE_SIZE.) (= verismo!arch.addr_s.def_s.PAGE_SIZE.? 4096)))
(assert (uInv SZ verismo!arch.addr_s.def_s.PAGE_SIZE.?))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.new2.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.new2.) (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!) (verismo!arch.addr_s.def_s.SpecPage./SpecPage (%I (I (nClip (%I val!)))) dummy!)) :pattern ((verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (=> (and (has_type val! INT) (has_type dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!)))))
(assert (fuel_bool_default fuel%verismo!tspec.spec_unused.))
(assert (=> (fuel_bool fuel%verismo!tspec.spec_unused.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.spec_unused.? T&. T&) (vstd!pervasive.arbitrary.? T&. T&)) :pattern ((verismo!tspec.spec_unused.? T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (verismo!tspec.spec_unused.? T&. T&) T&) :pattern ((verismo!tspec.spec_unused.? T&. T&)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.new.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.new.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!) (verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%5.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%5.as_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!) (I (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. self!)))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.value.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.value.? T&. T& self!) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!))) :pattern ((verismo!arch.addr_s.page.impl&%2.value.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.to_page.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.to_page.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!) (verismo!arch.addr_s.page.impl&%3.new.? T&. T& (I (EucDiv (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!)) 4096)))) :pattern ((verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.new2.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.new2.) (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr (%I (I (nClip (%I val!)))) dummy!)) :pattern ((verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (=> (and (has_type val! INT) (has_type dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.new.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.new.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!) (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!)))))
(assert (tr_bound%verismo!arch.addr_s.def_s.AddrType. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%5.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%5.from_int.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) val!) (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) val!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecAdd.spec_add.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%0.spec_add.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? T1&. T1& $ INT T1&. T1& self! rhs!) (verismo!tspec.integer.IntValue.from_int.? T1&. T1& (I (Add (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? T1&. T1& $ INT T1&. T1& self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%4.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%4.as_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!) (I (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!)))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.value.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!))) :pattern ((verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.to_addr.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.to_addr.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& self!) (let ((page$ (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!))) (verismo!arch.addr_s.page.impl&%2.new.? T&. T& (I (Mul (verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!) 4096))))) :pattern ((verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& self!)))))
(declare-fun ens%verismo!arch.addr_s.page.impl&%0.axiom_equal. (Dcr Type verismo!arch.addr_s.def_s.SpecAddr. verismo!arch.addr_s.def_s.SpecAddr.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (left! verismo!arch.addr_s.def_s.SpecAddr.) (right! verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (ens%verismo!arch.addr_s.page.impl&%0.axiom_equal. T&. T& left! right!) (and (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. left!))) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. right!)))) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. left!) (Poly%verismo!arch.addr_s.def_s.SpecAddr. right!))) (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. left!))) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. right!)))) (= left! right!)))) :pattern ((ens%verismo!arch.addr_s.page.impl&%0.axiom_equal. T&. T& left! right!)))))
(assert (forall ((T&. Dcr) (T& Type) (left! Poly) (right! Poly)) (! (=> (and (has_type left! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type right! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) (and (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left!)) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) right!))) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left! right!)) (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left!)) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) right!))) (= left! right!)))) :pattern ((ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left! right!)))))
(declare-fun ens%verismo!arch.addr_s.page.impl&%0.axiom_addr_type_dummy_holder. (Dcr Type verismo!arch.addr_s.def_s.SpecAddr.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (ens%verismo!arch.addr_s.page.impl&%0.axiom_addr_type_dummy_holder. T&. T& self!) (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly%verismo!arch.addr_s.def_s.SpecAddr. self!))) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((ens%verismo!arch.addr_s.page.impl&%0.axiom_addr_type_dummy_holder. T&. T& self!)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&)))))
(declare-fun ens%verismo!arch.addr_s.page.impl&%1.axiom_equal. (Dcr Type verismo!arch.addr_s.def_s.SpecPage. verismo!arch.addr_s.def_s.SpecPage.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (left! verismo!arch.addr_s.def_s.SpecPage.) (right! verismo!arch.addr_s.def_s.SpecPage.)) (! (= (ens%verismo!arch.addr_s.page.impl&%1.axiom_equal. T&. T& left! right!) (and (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. left!)) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. right!))) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecPage. left!) (Poly%verismo!arch.addr_s.def_s.SpecPage. right!))) (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. left!)) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. right!))) (= left! right!)))) :pattern ((ens%verismo!arch.addr_s.page.impl&%1.axiom_equal. T&. T& left! right!)))))
(assert (forall ((T&. Dcr) (T& Type) (left! Poly) (right! Poly)) (! (=> (and (has_type left! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type right! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) (and (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& left!) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& right!)) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) left! right!)) (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& left!) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& right!)) (= left! right!)))) :pattern ((ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) left! right!)))))
(declare-fun ens%verismo!arch.addr_s.page.impl&%1.axiom_addr_type_dummy_holder. (Dcr Type verismo!arch.addr_s.def_s.SpecPage.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.addr_s.def_s.SpecPage.)) (! (= (ens%verismo!arch.addr_s.page.impl&%1.axiom_addr_type_dummy_holder. T&. T& self!) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly%verismo!arch.addr_s.def_s.SpecPage. self!))) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((ens%verismo!arch.addr_s.page.impl&%1.axiom_addr_type_dummy_holder. T&. T& self!)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.to_offset.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.to_offset.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& self!) (EucMod (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!)) verismo!arch.addr_s.def_s.PAGE_SIZE.?)) :pattern ((verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.first.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.first.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.offset.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.offset.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) (nClip (verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!)))))) :pattern ((verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (<= 0 (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.len.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.len.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (<= 0 (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!)))))
(declare-fun ens%verismo!arch.addr_s.page.impl&%8.axiom_inv. (Dcr Type verismo!arch.addr_s.def_s.SpecMem.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.addr_s.def_s.SpecMem.)) (! (= (ens%verismo!arch.addr_s.page.impl&%8.axiom_inv. T&. T& self!) (and (<= (nClip (Add (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecMem. self!)) (verismo!arch.addr_s.page.impl&%8.len.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecMem. self!)))) 4096) (< (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecMem. self!)) 4096))) :pattern ((ens%verismo!arch.addr_s.page.impl&%8.axiom_inv. T&. T& self!)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (and (<= (nClip (Add (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!))) 4096) (< (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) 4096))) :pattern ((verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!)) :pattern ((verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!)))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (uInv 64 (verismo!arch.pgtable.def.spec_page_frame_bits.? no%param))) :pattern ((verismo!arch.pgtable.def.spec_page_frame_bits.? no%param)))))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.impl&%8.spec_value.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.impl&%8.spec_value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.pgtable.def.impl&%8.spec_value.? T&. T& self!) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/value (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. self!))) :pattern ((verismo!arch.pgtable.def.impl&%8.spec_value.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_nat_pow2.))
(declare-const fuel_nat%verismo!tspec.math.pow_s.spec_nat_pow2. Fuel)
(assert (forall ((e! Poly) (fuel% Fuel)) (! (= (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! fuel%) (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! zero)) :pattern ((verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! fuel%)))))
(assert (forall ((e! Poly) (fuel% Fuel)) (! (=> (has_type e! NAT) (= (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel%)) (ite (= (%I e!) 0) 1 (Mul 2 (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? (I (nClip (Sub (%I e!) 1))) fuel%))))) :pattern ((verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel%))))))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_nat_pow2.) (forall ((e! Poly)) (! (=> (has_type e! NAT) (= (verismo!tspec.math.pow_s.spec_nat_pow2.? e!) (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel_nat%verismo!tspec.math.pow_s.spec_nat_pow2.)))) :pattern ((verismo!tspec.math.pow_s.spec_nat_pow2.? e!))))))
(declare-fun req%verismo!tspec.math.pow_s.spec_int_pow2. (Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((offset! Poly)) (! (= (req%verismo!tspec.math.pow_s.spec_int_pow2. offset!) (=> %%global_location_label%%0 (>= (%I offset!) 0))) :pattern ((req%verismo!tspec.math.pow_s.spec_int_pow2. offset!)))))
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_int_pow2.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_int_pow2.) (forall ((offset! Poly)) (! (= (verismo!tspec.math.pow_s.spec_int_pow2.? offset!) (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (nClip (%I offset!))))) :pattern ((verismo!tspec.math.pow_s.spec_int_pow2.? offset!))))))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.impl&%4.as_int.))
(define-fun is-verismo!arch.pgtable.def.PteFlag./P_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./P) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./W_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./W) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./S_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./S) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./PWT_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./PWT) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./PCD_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./PCD) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./A_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./A) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./D_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./D) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./C_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./C) c))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.impl&%4.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. self!) (I (let ((val$ (ite (is-verismo!arch.pgtable.def.PteFlag./P_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 0 (ite (is-verismo!arch.pgtable.def.PteFlag./W_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 1 (ite (is-verismo!arch.pgtable.def.PteFlag./S_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 2 (ite (is-verismo!arch.pgtable.def.PteFlag./PWT_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 3 (ite (is-verismo!arch.pgtable.def.PteFlag./PCD_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 4 (ite (is-verismo!arch.pgtable.def.PteFlag./A_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 5 (ite (is-verismo!arch.pgtable.def.PteFlag./D_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 6 (ite (is-verismo!arch.pgtable.def.PteFlag./C_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 51 63)))))))))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.contains_flag.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.contains_flag.) (forall ((T&. Dcr) (T& Type) (self! Poly) (flag! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.contains_flag.? T&. T& self! flag!) (= (EucMod (EucDiv (verismo!arch.pgtable.def.impl&%8.spec_value.? T&. T& self!) (verismo!tspec.math.pow_s.spec_int_pow2.? (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. flag!))) 2) 1)) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.contains_flag.? T&. T& self! flag!))))))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!) (let ((bits$ (verismo!arch.pgtable.def.spec_page_frame_bits.? (I 0)))) (let ((addr$ (EucMod (verismo!arch.pgtable.def.impl&%8.spec_value.? T&. T& self!) (uClip 64 (uintshl 64 (I 1) (I (uClip 64 bits$))))))) (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& (I addr$) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. self!)))))))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%4.as_int.))
(define-fun is-verismo!arch.entities.memtype.PTLevel./L3_ ((c verismo!arch.entities.memtype.PTLevel.)) Bool ((_ is verismo!arch.entities.memtype.PTLevel./L3) c))
(define-fun is-verismo!arch.entities.memtype.PTLevel./L2_ ((c verismo!arch.entities.memtype.PTLevel.)) Bool ((_ is verismo!arch.entities.memtype.PTLevel./L2) c))
(define-fun is-verismo!arch.entities.memtype.PTLevel./L1_ ((c verismo!arch.entities.memtype.PTLevel.)) Bool ((_ is verismo!arch.entities.memtype.PTLevel./L1) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%4.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. self!) (I (let ((val$ (ite (is-verismo!arch.entities.memtype.PTLevel./L3_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) 0 (ite (is-verismo!arch.entities.memtype.PTLevel./L2_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) 1 (ite (is-verismo!arch.entities.memtype.PTLevel./L1_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) 2 3))))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%0.parent_lvl.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%0.parent_lvl.) (forall ((self! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%0.parent_lvl.? self!) (ite (is-verismo!arch.entities.memtype.PTLevel./L3_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) core!option.Option./None (ite (is-verismo!arch.entities.memtype.PTLevel./L2_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L3)) (ite (is-verismo!arch.entities.memtype.PTLevel./L1_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L2)) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L1)))))) :pattern ((verismo!arch.pgtable.entry_s.impl&%0.parent_lvl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.entities.memtype.PTLevel.) (has_type (Poly%core!option.Option. (verismo!arch.pgtable.entry_s.impl&%0.parent_lvl.? self!)) (TYPE%core!option.Option. $ TYPE%verismo!arch.entities.memtype.PTLevel.))) :pattern ((verismo!arch.pgtable.entry_s.impl&%0.parent_lvl.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.L3_PGSIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.L3_PGSIZE.) (= verismo!arch.pgtable.def.L3_PGSIZE.? (uClip 64 (uintshl 64 (I 1) (I (uClip 64 39)))))))
(assert (uInv 64 verismo!arch.pgtable.def.L3_PGSIZE.?))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.L2_PGSIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.L2_PGSIZE.) (= verismo!arch.pgtable.def.L2_PGSIZE.? (uClip 64 (uintshl 64 (I 1) (I (uClip 64 30)))))))
(assert (uInv 64 verismo!arch.pgtable.def.L2_PGSIZE.?))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.L1_PGSIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.L1_PGSIZE.) (= verismo!arch.pgtable.def.L1_PGSIZE.? (uClip 64 (uintshl 64 (I 1) (I (uClip 64 21)))))))
(assert (uInv 64 verismo!arch.pgtable.def.L1_PGSIZE.?))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.L0_PGSIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.L0_PGSIZE.) (= verismo!arch.pgtable.def.L0_PGSIZE.? (uClip 64 (uintshl 64 (I 1) (I (uClip 64 12)))))))
(assert (uInv 64 verismo!arch.pgtable.def.L0_PGSIZE.?))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize.) (forall ((self! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize.? self!) (let ((val$ (ite (is-verismo!arch.entities.memtype.PTLevel./L3_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) verismo!arch.pgtable.def.L3_PGSIZE.? (ite (is-verismo!arch.entities.memtype.PTLevel./L2_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) verismo!arch.pgtable.def.L2_PGSIZE.? (ite (is-verismo!arch.entities.memtype.PTLevel./L1_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) verismo!arch.pgtable.def.L1_PGSIZE.? verismo!arch.pgtable.def.L0_PGSIZE.?))))) val$)) :pattern ((verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.PT_ENTRY_NUM.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.PT_ENTRY_NUM.) (= verismo!arch.pgtable.def.PT_ENTRY_NUM.? (uClip 64 (uintshl 64 (I 1) (I (uClip 64 9)))))))
(assert (uInv 64 verismo!arch.pgtable.def.PT_ENTRY_NUM.?))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_table_index.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_table_index.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vaddr! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%0.spec_table_index.? T&. T& self! vaddr!) (EucMod (EucDiv (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) vaddr!)) (verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize.? self!)) verismo!arch.pgtable.def.PT_ENTRY_NUM.?)) :pattern ((verismo!arch.pgtable.entry_s.impl&%0.spec_table_index.? T&. T& self! vaddr!))))))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.PT_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.PT_ENTRY_SIZE.) (= verismo!arch.pgtable.def.PT_ENTRY_SIZE.? 8)))
(assert (uInv 64 verismo!arch.pgtable.def.PT_ENTRY_SIZE.?))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_addr.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_addr.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.spec_addr.? T&. T& self!) (verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!)))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.spec_addr.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.pgtable.entry_s.impl&%1.spec_addr.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.spec_addr.? T&. T& self!)))))
(declare-fun req%verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (idx! Poly)) (! (= (req%verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx. T&. T& self! idx!) (=> %%global_location_label%%1 (< (%I idx!) verismo!arch.pgtable.def.PT_ENTRY_NUM.?))) :pattern ((req%verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx. T&. T& self! idx!)))))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.) (forall ((T&. Dcr) (T& Type) (self! Poly) (idx! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.? T&. T& self! idx!) (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (let ((offset$ (Mul (%I idx!) verismo!arch.pgtable.def.PT_ENTRY_SIZE.?))) (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) $ INT $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.pgtable.entry_s.impl&%1.spec_addr.? T&. T& self!)) (I offset$))))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.? T&. T& self! idx!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (idx! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (has_type idx! NAT)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.? T&. T& self! idx!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.? T&. T& self! idx!)))))
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.) (forall ((val! Poly)) (! (= (verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? val!) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I val!) 1) (= (%I val!) 2)) (= (%I val!) 4)) (= (%I val!) 8)) (= (%I val!) 16)) (= (%I val!) 32)) (= (%I val!) 64)) (= (%I val!) 128)) (= (%I val!) 256)) (= (%I val!) 512)) (= (%I val!) 1024)) (= (%I val!) 2048)) (= (%I val!) 4096)) (= (%I val!) 8192)) (= (%I val!) 16384)) (= (%I val!) 32768)) (= (%I val!) 65536)) (= (%I val!) 131072)) (= (%I val!) 262144)) (= (%I val!) 524288)) (= (%I val!) 1048576)) (= (%I val!) 2097152)) (= (%I val!) 4194304)) (= (%I val!) 8388608)) (= (%I val!) 16777216)) (= (%I val!) 33554432)) (= (%I val!) 67108864)) (= (%I val!) 134217728)) (= (%I val!) 268435456)) (= (%I val!) 536870912)) (= (%I val!) 1073741824)) (= (%I val!) 2147483648)) (= (%I val!) 4294967296)) (= (%I val!) 8589934592)) (= (%I val!) 17179869184)) (= (%I val!) 34359738368)) (= (%I val!) 68719476736)) (= (%I val!) 137438953472)) (= (%I val!) 274877906944)) (= (%I val!) 549755813888)) (= (%I val!) 1099511627776)) (= (%I val!) 2199023255552)) (= (%I val!) 4398046511104)) (= (%I val!) 8796093022208)) (= (%I val!) 17592186044416)) (= (%I val!) 35184372088832)) (= (%I val!) 70368744177664)) (= (%I val!) 140737488355328)) (= (%I val!) 281474976710656)) (= (%I val!) 562949953421312)) (= (%I val!) 1125899906842624)) (= (%I val!) 2251799813685248)) (= (%I val!) 4503599627370496)) (= (%I val!) 9007199254740992)) (= (%I val!) 18014398509481984)) (= (%I val!) 36028797018963968)) (= (%I val!) 72057594037927936)) (= (%I val!) 144115188075855872)) (= (%I val!) 288230376151711744)) (= (%I val!) 576460752303423488)) (= (%I val!) 1152921504606846976)) (= (%I val!) 2305843009213693952)) (= (%I val!) 4611686018427387904)) (= (%I val!) 9223372036854775808))) :pattern ((verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? val!))))))
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties.) (forall ((a! Poly) (b! Poly) (ret! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit64_or_properties.? a! b! ret!) (and (and (and (and (and (and (= (%I ret!) (uClip 64 (uintor 64 (I (%I a!)) (I (%I b!))))) (= (%I ret!) (uClip 64 (uintor 64 (I (%I b!)) (I (%I a!)))))) (and (<= 0 (%I ret!)) (<= (%I ret!) 18446744073709551615))) (= (uClip 64 (uintand 64 (I (%I ret!)) (I (%I b!)))) (%I b!))) (>= (%I ret!) (%I a!))) (>= (%I ret!) (%I b!))) (= (uClip 64 (uintand 64 (I (%I ret!)) (I (uClip 64 (uintnot 64 (I (%I b!))))))) (uClip 64 (uintand 64 (I (%I a!)) (I (uClip 64 (uintnot 64 (I (%I b!)))))))))) :pattern ((verismo!tspec.math.bits_p.spec_bit64_or_properties.? a! b! ret!))))))
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties.) (forall ((a! Poly) (ret! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit64_not_properties.? a! ret!) (and (and (and (and (= (%I ret!) (uClip 64 (uintnot 64 (I (%I a!))))) (= (uClip 64 (uintand 64 (I (%I ret!)) (I (%I a!)))) 0)) (= (%I ret!) (uClip 64 (Sub 18446744073709551615 (%I a!))))) (and (<= 0 (%I ret!)) (<= (%I ret!) 18446744073709551615))) (= (uClip 64 (uintnot 64 (I (%I ret!)))) (%I a!)))) :pattern ((verismo!tspec.math.bits_p.spec_bit64_not_properties.? a! ret!))))))
(assert (fuel_bool_default fuel%verismo!tspec.math.nonlinear.abs.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.nonlinear.abs.) (forall ((a! Poly)) (! (= (verismo!tspec.math.nonlinear.abs.? a!) (ite (> (%I a!) 0) (%I a!) (Sub 0 (%I a!)))) :pattern ((verismo!tspec.math.nonlinear.abs.? a!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%4.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%4.from_int.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) val!) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) val!))))))
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%6.spec_from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%6.spec_from_int.) (forall ((val! Poly)) (! (= (verismo!arch.entities.memtype.impl&%6.spec_from_int.? val!) (ite (< (%I val!) 0) core!option.Option./None (ite (= (%I val!) 0) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L3)) (ite (= (%I val!) 1) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L2)) (ite (= (%I val!) 2) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L1)) (ite (= (%I val!) 3) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L0)) core!option.Option./None)))))) :pattern ((verismo!arch.entities.memtype.impl&%6.spec_from_int.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%core!option.Option. (verismo!arch.entities.memtype.impl&%6.spec_from_int.? val!)) (TYPE%core!option.Option. $ TYPE%verismo!arch.entities.memtype.PTLevel.))) :pattern ((verismo!arch.entities.memtype.impl&%6.spec_from_int.? val!)))))
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%4.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%4.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. val!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.entities.memtype.impl&%6.spec_from_int.? val!))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. val!))))))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.PT_ENTRY_NUM_BIT.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.PT_ENTRY_NUM_BIT.) (= verismo!arch.pgtable.def.PT_ENTRY_NUM_BIT.? 9)))
(assert (uInv 64 verismo!arch.pgtable.def.PT_ENTRY_NUM_BIT.?))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.PT_ENTRY_IDX_MASK.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.PT_ENTRY_IDX_MASK.) (= verismo!arch.pgtable.def.PT_ENTRY_IDX_MASK.? 511)))
(assert (uInv 64 verismo!arch.pgtable.def.PT_ENTRY_IDX_MASK.?))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.impl&%6.spec_from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.impl&%6.spec_from_int.) (forall ((val! Poly)) (! (= (verismo!arch.pgtable.def.impl&%6.spec_from_int.? val!) (ite (< (%I val!) 0) core!option.Option./None (ite (= (%I val!) 0) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./P)) (ite (= (%I val!) 1) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./W)) (ite (= (%I val!) 2) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./S)) (ite (= (%I val!) 3) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./PWT)) (ite (= (%I val!) 4) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./PCD)) (ite (= (%I val!) 5) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./A)) (ite (= (%I val!) 6) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./D)) (ite (= (%I val!) 51) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./C)) (ite (= (%I val!) 63) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./NX)) core!option.Option./None))))))))))) :pattern ((verismo!arch.pgtable.def.impl&%6.spec_from_int.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%core!option.Option. (verismo!arch.pgtable.def.impl&%6.spec_from_int.? val!)) (TYPE%core!option.Option. $ TYPE%verismo!arch.pgtable.def.PteFlag.))) :pattern ((verismo!arch.pgtable.def.impl&%6.spec_from_int.? val!)))))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.impl&%4.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.impl&%4.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. val!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.def.impl&%6.spec_from_int.? val!))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. val!))))))
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_offset.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_offset.) (forall ((self! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%0.spec_offset.? self!) (Sub 39 (Mul (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. self!)) verismo!arch.pgtable.def.PT_ENTRY_NUM_BIT.?))) :pattern ((verismo!arch.pgtable.entry_s.impl&%0.spec_offset.? self!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecAdd. T1&. T1& $ INT T1&. T1&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. T1&. T1& $ INT T1&. T1&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.entities.memtype.PTLevel.))
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.pgtable.def.PteFlag.))
(declare-fun ens%verismo!tspec.math.bits_p.bit64_shl_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_shl_auto. no%param) (and (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintshl 64 (I (%I a$)) (I 0))) (%I a$))) :pattern ((uClip 64 (uintshl 64 (I (%I a$)) (I 0)))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (=> (< (%I a$) 64) (> (uClip 64 (uintshl 64 (I 1) (I (%I a$)))) 0))) :pattern ((uClip 64 (uintshl 64 (I 1) (I (%I a$))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (=> (< (%I b$) 64) (or (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintshl 64 (I 1) (I (%I b$))))))) (uClip 64 (uintshl 64 (I 1) (I (%I b$))))) (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintshl 64 (I 1) (I (%I b$))))))) 0)))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintshl 64 (I 1) (I (%I b$)))))))))) (=> (< 0 64) (= (uClip 64 (uintshl 64 (I 1) (I 0))) 1)) (=> (< 1 64) (= (uClip 64 (uintshl 64 (I 1) (I 1))) 2)) (=> (< 2 64) (= (uClip 64 (uintshl 64 (I 1) (I 2))) 4)) (=> (< 3 64) (= (uClip 64 (uintshl 64 (I 1) (I 3))) 8)) (=> (< 4 64) (= (uClip 64 (uintshl 64 (I 1) (I 4))) 16)) (=> (< 5 64) (= (uClip 64 (uintshl 64 (I 1) (I 5))) 32)) (=> (< 6 64) (= (uClip 64 (uintshl 64 (I 1) (I 6))) 64)) (=> (< 7 64) (= (uClip 64 (uintshl 64 (I 1) (I 7))) 128)) (=> (< 8 64) (= (uClip 64 (uintshl 64 (I 1) (I 8))) 256)) (=> (< 9 64) (= (uClip 64 (uintshl 64 (I 1) (I 9))) 512)) (=> (< 10 64) (= (uClip 64 (uintshl 64 (I 1) (I 10))) 1024)) (=> (< 11 64) (= (uClip 64 (uintshl 64 (I 1) (I 11))) 2048)) (=> (< 12 64) (= (uClip 64 (uintshl 64 (I 1) (I 12))) 4096)) (=> (< 13 64) (= (uClip 64 (uintshl 64 (I 1) (I 13))) 8192)) (=> (< 14 64) (= (uClip 64 (uintshl 64 (I 1) (I 14))) 16384)) (=> (< 15 64) (= (uClip 64 (uintshl 64 (I 1) (I 15))) 32768)) (=> (< 16 64) (= (uClip 64 (uintshl 64 (I 1) (I 16))) 65536)) (=> (< 17 64) (= (uClip 64 (uintshl 64 (I 1) (I 17))) 131072)) (=> (< 18 64) (= (uClip 64 (uintshl 64 (I 1) (I 18))) 262144)) (=> (< 19 64) (= (uClip 64 (uintshl 64 (I 1) (I 19))) 524288)) (=> (< 20 64) (= (uClip 64 (uintshl 64 (I 1) (I 20))) 1048576)) (=> (< 21 64) (= (uClip 64 (uintshl 64 (I 1) (I 21))) 2097152)) (=> (< 22 64) (= (uClip 64 (uintshl 64 (I 1) (I 22))) 4194304)) (=> (< 23 64) (= (uClip 64 (uintshl 64 (I 1) (I 23))) 8388608)) (=> (< 24 64) (= (uClip 64 (uintshl 64 (I 1) (I 24))) 16777216)) (=> (< 25 64) (= (uClip 64 (uintshl 64 (I 1) (I 25))) 33554432)) (=> (< 26 64) (= (uClip 64 (uintshl 64 (I 1) (I 26))) 67108864)) (=> (< 27 64) (= (uClip 64 (uintshl 64 (I 1) (I 27))) 134217728)) (=> (< 28 64) (= (uClip 64 (uintshl 64 (I 1) (I 28))) 268435456)) (=> (< 29 64) (= (uClip 64 (uintshl 64 (I 1) (I 29))) 536870912)) (=> (< 30 64) (= (uClip 64 (uintshl 64 (I 1) (I 30))) 1073741824)) (=> (< 31 64) (= (uClip 64 (uintshl 64 (I 1) (I 31))) 2147483648)) (=> (< 32 64) (= (uClip 64 (uintshl 64 (I 1) (I 32))) 4294967296)) (=> (< 33 64) (= (uClip 64 (uintshl 64 (I 1) (I 33))) 8589934592)) (=> (< 34 64) (= (uClip 64 (uintshl 64 (I 1) (I 34))) 17179869184)) (=> (< 35 64) (= (uClip 64 (uintshl 64 (I 1) (I 35))) 34359738368)) (=> (< 36 64) (= (uClip 64 (uintshl 64 (I 1) (I 36))) 68719476736)) (=> (< 37 64) (= (uClip 64 (uintshl 64 (I 1) (I 37))) 137438953472)) (=> (< 38 64) (= (uClip 64 (uintshl 64 (I 1) (I 38))) 274877906944)) (=> (< 39 64) (= (uClip 64 (uintshl 64 (I 1) (I 39))) 549755813888)) (=> (< 40 64) (= (uClip 64 (uintshl 64 (I 1) (I 40))) 1099511627776)) (=> (< 41 64) (= (uClip 64 (uintshl 64 (I 1) (I 41))) 2199023255552)) (=> (< 42 64) (= (uClip 64 (uintshl 64 (I 1) (I 42))) 4398046511104)) (=> (< 43 64) (= (uClip 64 (uintshl 64 (I 1) (I 43))) 8796093022208)) (=> (< 44 64) (= (uClip 64 (uintshl 64 (I 1) (I 44))) 17592186044416)) (=> (< 45 64) (= (uClip 64 (uintshl 64 (I 1) (I 45))) 35184372088832)) (=> (< 46 64) (= (uClip 64 (uintshl 64 (I 1) (I 46))) 70368744177664)) (=> (< 47 64) (= (uClip 64 (uintshl 64 (I 1) (I 47))) 140737488355328)) (=> (< 48 64) (= (uClip 64 (uintshl 64 (I 1) (I 48))) 281474976710656)) (=> (< 49 64) (= (uClip 64 (uintshl 64 (I 1) (I 49))) 562949953421312)) (=> (< 50 64) (= (uClip 64 (uintshl 64 (I 1) (I 50))) 1125899906842624)) (=> (< 51 64) (= (uClip 64 (uintshl 64 (I 1) (I 51))) 2251799813685248)) (=> (< 52 64) (= (uClip 64 (uintshl 64 (I 1) (I 52))) 4503599627370496)) (=> (< 53 64) (= (uClip 64 (uintshl 64 (I 1) (I 53))) 9007199254740992)) (=> (< 54 64) (= (uClip 64 (uintshl 64 (I 1) (I 54))) 18014398509481984)) (=> (< 55 64) (= (uClip 64 (uintshl 64 (I 1) (I 55))) 36028797018963968)) (=> (< 56 64) (= (uClip 64 (uintshl 64 (I 1) (I 56))) 72057594037927936)) (=> (< 57 64) (= (uClip 64 (uintshl 64 (I 1) (I 57))) 144115188075855872)) (=> (< 58 64) (= (uClip 64 (uintshl 64 (I 1) (I 58))) 288230376151711744)) (=> (< 59 64) (= (uClip 64 (uintshl 64 (I 1) (I 59))) 576460752303423488)) (=> (< 60 64) (= (uClip 64 (uintshl 64 (I 1) (I 60))) 1152921504606846976)) (=> (< 61 64) (= (uClip 64 (uintshl 64 (I 1) (I 61))) 2305843009213693952)) (=> (< 62 64) (= (uClip 64 (uintshl 64 (I 1) (I 62))) 4611686018427387904)) (=> (< 63 64) (= (uClip 64 (uintshl 64 (I 1) (I 63))) 9223372036854775808)))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_shl_auto. no%param)))))
(declare-fun ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. no%param) (and (=> (< 0 64) (= (uClip 64 (uintshl 64 (I 1) (I 0))) 1)) (=> (< 1 64) (= (uClip 64 (uintshl 64 (I 1) (I 1))) 2)) (=> (< 2 64) (= (uClip 64 (uintshl 64 (I 1) (I 2))) 4)) (=> (< 3 64) (= (uClip 64 (uintshl 64 (I 1) (I 3))) 8)) (=> (< 4 64) (= (uClip 64 (uintshl 64 (I 1) (I 4))) 16)) (=> (< 5 64) (= (uClip 64 (uintshl 64 (I 1) (I 5))) 32)) (=> (< 6 64) (= (uClip 64 (uintshl 64 (I 1) (I 6))) 64)) (=> (< 7 64) (= (uClip 64 (uintshl 64 (I 1) (I 7))) 128)) (=> (< 8 64) (= (uClip 64 (uintshl 64 (I 1) (I 8))) 256)) (=> (< 9 64) (= (uClip 64 (uintshl 64 (I 1) (I 9))) 512)) (=> (< 10 64) (= (uClip 64 (uintshl 64 (I 1) (I 10))) 1024)) (=> (< 11 64) (= (uClip 64 (uintshl 64 (I 1) (I 11))) 2048)) (=> (< 12 64) (= (uClip 64 (uintshl 64 (I 1) (I 12))) 4096)) (=> (< 13 64) (= (uClip 64 (uintshl 64 (I 1) (I 13))) 8192)) (=> (< 14 64) (= (uClip 64 (uintshl 64 (I 1) (I 14))) 16384)) (=> (< 15 64) (= (uClip 64 (uintshl 64 (I 1) (I 15))) 32768)) (=> (< 16 64) (= (uClip 64 (uintshl 64 (I 1) (I 16))) 65536)) (=> (< 17 64) (= (uClip 64 (uintshl 64 (I 1) (I 17))) 131072)) (=> (< 18 64) (= (uClip 64 (uintshl 64 (I 1) (I 18))) 262144)) (=> (< 19 64) (= (uClip 64 (uintshl 64 (I 1) (I 19))) 524288)) (=> (< 20 64) (= (uClip 64 (uintshl 64 (I 1) (I 20))) 1048576)) (=> (< 21 64) (= (uClip 64 (uintshl 64 (I 1) (I 21))) 2097152)) (=> (< 22 64) (= (uClip 64 (uintshl 64 (I 1) (I 22))) 4194304)) (=> (< 23 64) (= (uClip 64 (uintshl 64 (I 1) (I 23))) 8388608)) (=> (< 24 64) (= (uClip 64 (uintshl 64 (I 1) (I 24))) 16777216)) (=> (< 25 64) (= (uClip 64 (uintshl 64 (I 1) (I 25))) 33554432)) (=> (< 26 64) (= (uClip 64 (uintshl 64 (I 1) (I 26))) 67108864)) (=> (< 27 64) (= (uClip 64 (uintshl 64 (I 1) (I 27))) 134217728)) (=> (< 28 64) (= (uClip 64 (uintshl 64 (I 1) (I 28))) 268435456)) (=> (< 29 64) (= (uClip 64 (uintshl 64 (I 1) (I 29))) 536870912)) (=> (< 30 64) (= (uClip 64 (uintshl 64 (I 1) (I 30))) 1073741824)) (=> (< 31 64) (= (uClip 64 (uintshl 64 (I 1) (I 31))) 2147483648)) (=> (< 32 64) (= (uClip 64 (uintshl 64 (I 1) (I 32))) 4294967296)) (=> (< 33 64) (= (uClip 64 (uintshl 64 (I 1) (I 33))) 8589934592)) (=> (< 34 64) (= (uClip 64 (uintshl 64 (I 1) (I 34))) 17179869184)) (=> (< 35 64) (= (uClip 64 (uintshl 64 (I 1) (I 35))) 34359738368)) (=> (< 36 64) (= (uClip 64 (uintshl 64 (I 1) (I 36))) 68719476736)) (=> (< 37 64) (= (uClip 64 (uintshl 64 (I 1) (I 37))) 137438953472)) (=> (< 38 64) (= (uClip 64 (uintshl 64 (I 1) (I 38))) 274877906944)) (=> (< 39 64) (= (uClip 64 (uintshl 64 (I 1) (I 39))) 549755813888)) (=> (< 40 64) (= (uClip 64 (uintshl 64 (I 1) (I 40))) 1099511627776)) (=> (< 41 64) (= (uClip 64 (uintshl 64 (I 1) (I 41))) 2199023255552)) (=> (< 42 64) (= (uClip 64 (uintshl 64 (I 1) (I 42))) 4398046511104)) (=> (< 43 64) (= (uClip 64 (uintshl 64 (I 1) (I 43))) 8796093022208)) (=> (< 44 64) (= (uClip 64 (uintshl 64 (I 1) (I 44))) 17592186044416)) (=> (< 45 64) (= (uClip 64 (uintshl 64 (I 1) (I 45))) 35184372088832)) (=> (< 46 64) (= (uClip 64 (uintshl 64 (I 1) (I 46))) 70368744177664)) (=> (< 47 64) (= (uClip 64 (uintshl 64 (I 1) (I 47))) 140737488355328)) (=> (< 48 64) (= (uClip 64 (uintshl 64 (I 1) (I 48))) 281474976710656)) (=> (< 49 64) (= (uClip 64 (uintshl 64 (I 1) (I 49))) 562949953421312)) (=> (< 50 64) (= (uClip 64 (uintshl 64 (I 1) (I 50))) 1125899906842624)) (=> (< 51 64) (= (uClip 64 (uintshl 64 (I 1) (I 51))) 2251799813685248)) (=> (< 52 64) (= (uClip 64 (uintshl 64 (I 1) (I 52))) 4503599627370496)) (=> (< 53 64) (= (uClip 64 (uintshl 64 (I 1) (I 53))) 9007199254740992)) (=> (< 54 64) (= (uClip 64 (uintshl 64 (I 1) (I 54))) 18014398509481984)) (=> (< 55 64) (= (uClip 64 (uintshl 64 (I 1) (I 55))) 36028797018963968)) (=> (< 56 64) (= (uClip 64 (uintshl 64 (I 1) (I 56))) 72057594037927936)) (=> (< 57 64) (= (uClip 64 (uintshl 64 (I 1) (I 57))) 144115188075855872)) (=> (< 58 64) (= (uClip 64 (uintshl 64 (I 1) (I 58))) 288230376151711744)) (=> (< 59 64) (= (uClip 64 (uintshl 64 (I 1) (I 59))) 576460752303423488)) (=> (< 60 64) (= (uClip 64 (uintshl 64 (I 1) (I 60))) 1152921504606846976)) (=> (< 61 64) (= (uClip 64 (uintshl 64 (I 1) (I 61))) 2305843009213693952)) (=> (< 62 64) (= (uClip 64 (uintshl 64 (I 1) (I 62))) 4611686018427387904)) (=> (< 63 64) (= (uClip 64 (uintshl 64 (I 1) (I 63))) 9223372036854775808)))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. no%param)))))
(declare-fun req%verismo!tspec.math.bits_p.bit64_shr_div_rel. (Int Int) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((b! Int) (a! Int)) (! (= (req%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a!) (=> %%global_location_label%%2 (< a! 64))) :pattern ((req%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a!)))))
(declare-fun ens%verismo!tspec.math.bits_p.bit64_shr_div_rel. (Int Int Int) Bool)
(assert (forall ((b! Int) (a! Int) (ret! Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a! ret!) (and (uInv 64 ret!) (= ret! (uClip 64 (uintshr 64 (I b!) (I a!)))) (<= (Mul ret! (uClip 64 (uintshl 64 (I 1) (I a!)))) 18446744073709551615) (= (uClip 64 (uintshr 64 (I b!) (I a!))) (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I a!)))))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a! ret!)))))
(declare-fun ens%verismo!tspec.math.bits_p.bit64_and_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_and_auto. no%param) (and (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (= (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$)))) (uClip 64 (uintand 64 (I (%I b$)) (I (%I a$)))))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))))) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64)) (has_type c$ (UINT 64))) (= (uClip 64 (uintand 64 (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))) (I (%I c$)))) (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintand 64 (I (%I b$)) (I (%I c$))))))))) :pattern ((uClip 64 (uintand 64 (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))) (I (%I c$))))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintand 64 (I (%I a$)) (I (%I a$)))) (%I a$))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (%I a$))))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintand 64 (I (%I a$)) (I 0))) 0)) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I 0)))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintand 64 (I (%I a$)) (I 18446744073709551615))) (%I a$))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I 18446744073709551615)))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (and (<= (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$)))) (%I b$)) (<= (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$)))) (%I a$)))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 32)) (has_type b$ (UINT 32))) (<= (uClip 32 (uintand 32 (I (%I a$)) (I (%I b$)))) (%I b$))) :pattern ((uClip 32 (uintand 32 (I (%I a$)) (I (%I b$))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 16)) (has_type b$ (UINT 16))) (<= (uClip 16 (uintand 16 (I (%I a$)) (I (%I b$)))) (%I b$))) :pattern ((uClip 16 (uintand 16 (I (%I a$)) (I (%I b$))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 8)) (has_type b$ (UINT 8))) (<= (uClip 8 (uintand 8 (I (%I a$)) (I (%I b$)))) (%I b$))) :pattern ((uClip 8 (uintand 8 (I (%I a$)) (I (%I b$))))))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_and_auto. no%param)))))
(declare-fun ens%verismo!tspec.math.bits_p.bit64_property_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_property_auto. no%param) (and (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))))) (%I a$))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (= (uClip 64 (uintor 64 (I (%I a$)) (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))))) (%I a$))) :pattern ((uClip 64 (uintor 64 (I (%I a$)) (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$)))))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintand 64 (I (uClip 64 (uintnot 64 (I (%I a$))))) (I (%I b$))))))) 0)) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintand 64 (I (uClip 64 (uintnot 64 (I (%I a$))))) (I (%I b$)))))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (or (= (%I a$) 0) (not (= (uClip 64 (uintand 64 (I (uClip 64 (uintnot 64 (I (%I a$))))) (I (%I b$)))) (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))))) :pattern ((uClip 64 (uintand 64 (I (uClip 64 (uintnot 64 (I (%I a$))))) (I (%I b$)))) (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))))) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64)) (has_type c$ (UINT 64))) (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintor 64 (I (%I b$)) (I (%I c$))))))) (uClip 64 (uintor 64 (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))) (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I c$))))))))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintor 64 (I (%I b$)) (I (%I c$)))))))))) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64)) (has_type c$ (UINT 64))) (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintxor 64 (I (%I b$)) (I (%I c$))))))) (uClip 64 (uintxor 64 (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))) (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I c$))))))))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintxor 64 (I (%I b$)) (I (%I c$)))))))))) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64)) (has_type c$ (UINT 64))) (= (uClip 64 (uintor 64 (I (%I a$)) (I (uClip 64 (uintand 64 (I (%I b$)) (I (%I c$))))))) (uClip 64 (uintand 64 (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))) (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I c$))))))))) :pattern ((uClip 64 (uintor 64 (I (%I a$)) (I (uClip 64 (uintand 64 (I (%I b$)) (I (%I c$)))))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (= (uClip 64 (uintnot 64 (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))))) (uClip 64 (uintor 64 (I (uClip 64 (uintnot 64 (I (%I a$))))) (I (uClip 64 (uintnot 64 (I (%I b$))))))))) :pattern ((uClip 64 (uintnot 64 (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$)))))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (= (uClip 64 (uintnot 64 (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))))) (uClip 64 (uintand 64 (I (uClip 64 (uintnot 64 (I (%I a$))))) (I (uClip 64 (uintnot 64 (I (%I b$))))))))) :pattern ((uClip 64 (uintnot 64 (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))))))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_property_auto. no%param)))))
(declare-fun ens%verismo!tspec.math.bits_p.bit64_or_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_or_auto. no%param) (and (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (and (and (and (and (and (and (= (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))) (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))) (= (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))) (uClip 64 (uintor 64 (I (%I b$)) (I (%I a$)))))) (and (<= 0 (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))))) (<= (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))) 18446744073709551615))) (= (uClip 64 (uintand 64 (I (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))))) (I (%I b$)))) (%I b$))) (>= (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))) (%I a$))) (>= (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))) (%I b$))) (= (uClip 64 (uintand 64 (I (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))))) (I (uClip 64 (uintnot 64 (I (%I b$))))))) (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintnot 64 (I (%I b$)))))))))) :pattern ((uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintor 64 (I (%I a$)) (I (%I a$)))) (%I a$))) :pattern ((uClip 64 (uintor 64 (I (%I a$)) (I (%I a$))))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintor 64 (I (%I a$)) (I 0))) (%I a$))) :pattern ((uClip 64 (uintor 64 (I (%I a$)) (I 0)))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintor 64 (I (%I a$)) (I 18446744073709551615))) 18446744073709551615)) :pattern ((uClip 64 (uintor 64 (I (%I a$)) (I 18446744073709551615)))))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_or_auto. no%param)))))
(declare-fun ens%verismo!tspec.math.bits_p.bit64_xor_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_xor_auto. no%param) (and (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (= (uClip 64 (uintxor 64 (I (%I a$)) (I (%I b$)))) (uClip 64 (uintxor 64 (I (%I b$)) (I (%I a$)))))) :pattern ((uClip 64 (uintxor 64 (I (%I a$)) (I (%I b$))))))) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64)) (has_type c$ (UINT 64))) (= (uClip 64 (uintxor 64 (I (uClip 64 (uintxor 64 (I (%I a$)) (I (%I b$))))) (I (%I c$)))) (uClip 64 (uintxor 64 (I (%I a$)) (I (uClip 64 (uintxor 64 (I (%I b$)) (I (%I c$))))))))) :pattern ((uClip 64 (uintxor 64 (I (uClip 64 (uintxor 64 (I (%I a$)) (I (%I b$))))) (I (%I c$))))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintxor 64 (I (%I a$)) (I (%I a$)))) 0)) :pattern ((uClip 64 (uintxor 64 (I (%I a$)) (I (%I a$))))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintxor 64 (I (%I a$)) (I 0))) (%I a$))) :pattern ((uClip 64 (uintxor 64 (I (%I a$)) (I 0)))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintxor 64 (I (%I a$)) (I 18446744073709551615))) (uClip 64 (uintnot 64 (I (%I a$)))))) :pattern ((uClip 64 (uintxor 64 (I (%I a$)) (I 18446744073709551615)))))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_xor_auto. no%param)))))
(declare-fun ens%verismo!tspec.math.bits_p.bit64_not_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_not_auto. no%param) (and (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (and (and (and (and (= (%I (I (uClip 64 (uintnot 64 (I (%I a$)))))) (uClip 64 (uintnot 64 (I (%I a$))))) (= (uClip 64 (uintand 64 (I (%I (I (uClip 64 (uintnot 64 (I (%I a$))))))) (I (%I a$)))) 0)) (= (%I (I (uClip 64 (uintnot 64 (I (%I a$)))))) (uClip 64 (Sub 18446744073709551615 (%I a$))))) (and (<= 0 (%I (I (uClip 64 (uintnot 64 (I (%I a$))))))) (<= (%I (I (uClip 64 (uintnot 64 (I (%I a$)))))) 18446744073709551615))) (= (uClip 64 (uintnot 64 (I (%I (I (uClip 64 (uintnot 64 (I (%I a$))))))))) (%I a$)))) :pattern ((uClip 64 (uintnot 64 (I (%I a$))))))) (= (uClip 64 (uintnot 64 (I 0))) 18446744073709551615))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_not_auto. no%param)))))
(declare-fun req%verismo!tspec.math.bits_p.proof_bit64_and_rel_mod. (Int Int) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((a! Int) (b! Int)) (! (= (req%verismo!tspec.math.bits_p.proof_bit64_and_rel_mod. a! b!) (=> %%global_location_label%%3 (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I (I b!)) 1) (= (%I (I b!)) 2)) (= (%I (I b!)) 4)) (= (%I (I b!)) 8)) (= (%I (I b!)) 16)) (= (%I (I b!)) 32)) (= (%I (I b!)) 64)) (= (%I (I b!)) 128)) (= (%I (I b!)) 256)) (= (%I (I b!)) 512)) (= (%I (I b!)) 1024)) (= (%I (I b!)) 2048)) (= (%I (I b!)) 4096)) (= (%I (I b!)) 8192)) (= (%I (I b!)) 16384)) (= (%I (I b!)) 32768)) (= (%I (I b!)) 65536)) (= (%I (I b!)) 131072)) (= (%I (I b!)) 262144)) (= (%I (I b!)) 524288)) (= (%I (I b!)) 1048576)) (= (%I (I b!)) 2097152)) (= (%I (I b!)) 4194304)) (= (%I (I b!)) 8388608)) (= (%I (I b!)) 16777216)) (= (%I (I b!)) 33554432)) (= (%I (I b!)) 67108864)) (= (%I (I b!)) 134217728)) (= (%I (I b!)) 268435456)) (= (%I (I b!)) 536870912)) (= (%I (I b!)) 1073741824)) (= (%I (I b!)) 2147483648)) (= (%I (I b!)) 4294967296)) (= (%I (I b!)) 8589934592)) (= (%I (I b!)) 17179869184)) (= (%I (I b!)) 34359738368)) (= (%I (I b!)) 68719476736)) (= (%I (I b!)) 137438953472)) (= (%I (I b!)) 274877906944)) (= (%I (I b!)) 549755813888)) (= (%I (I b!)) 1099511627776)) (= (%I (I b!)) 2199023255552)) (= (%I (I b!)) 4398046511104)) (= (%I (I b!)) 8796093022208)) (= (%I (I b!)) 17592186044416)) (= (%I (I b!)) 35184372088832)) (= (%I (I b!)) 70368744177664)) (= (%I (I b!)) 140737488355328)) (= (%I (I b!)) 281474976710656)) (= (%I (I b!)) 562949953421312)) (= (%I (I b!)) 1125899906842624)) (= (%I (I b!)) 2251799813685248)) (= (%I (I b!)) 4503599627370496)) (= (%I (I b!)) 9007199254740992)) (= (%I (I b!)) 18014398509481984)) (= (%I (I b!)) 36028797018963968)) (= (%I (I b!)) 72057594037927936)) (= (%I (I b!)) 144115188075855872)) (= (%I (I b!)) 288230376151711744)) (= (%I (I b!)) 576460752303423488)) (= (%I (I b!)) 1152921504606846976)) (= (%I (I b!)) 2305843009213693952)) (= (%I (I b!)) 4611686018427387904)) (= (%I (I b!)) 9223372036854775808)))) :pattern ((req%verismo!tspec.math.bits_p.proof_bit64_and_rel_mod. a! b!)))))
(declare-fun ens%verismo!tspec.math.bits_p.proof_bit64_and_rel_mod. (Int Int) Bool)
(assert (forall ((a! Int) (b! Int)) (! (= (ens%verismo!tspec.math.bits_p.proof_bit64_and_rel_mod. a! b!) (= (uClip 64 (uintand 64 (I a!) (I (uClip 64 (Sub b! 1))))) (uClip 64 (EucMod a! b!)))) :pattern ((ens%verismo!tspec.math.bits_p.proof_bit64_and_rel_mod. a! b!)))))
(declare-fun req%verismo!tspec.math.nonlinear.proof_mod_range. (Int Int) Bool)
(declare-const %%global_location_label%%4 Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((a! Int) (b! Int)) (! (= (req%verismo!tspec.math.nonlinear.proof_mod_range. a! b!) (and (=> %%global_location_label%%4 (>= a! 0)) (=> %%global_location_label%%5 (> b! 0)))) :pattern ((req%verismo!tspec.math.nonlinear.proof_mod_range. a! b!)))))
(declare-fun ens%verismo!tspec.math.nonlinear.proof_mod_range. (Int Int) Bool)
(assert (forall ((a! Int) (b! Int)) (! (= (ens%verismo!tspec.math.nonlinear.proof_mod_range. a! b!) (let ((tmp%%$ (EucMod a! b!))) (and (<= 0 tmp%%$) (< tmp%%$ b!)))) :pattern ((ens%verismo!tspec.math.nonlinear.proof_mod_range. a! b!)))))
(declare-fun req%verismo!tspec.math.nonlinear.proof_div_pos_neg_rel. (Int Int) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((a! Int) (b! Int)) (! (= (req%verismo!tspec.math.nonlinear.proof_div_pos_neg_rel. a! b!) (=> %%global_location_label%%6 (not (= b! 0)))) :pattern ((req%verismo!tspec.math.nonlinear.proof_div_pos_neg_rel. a! b!)))))
(declare-fun ens%verismo!tspec.math.nonlinear.proof_div_pos_neg_rel. (Int Int Int) Bool)
(assert (forall ((a! Int) (b! Int) (ret! Int)) (! (= (ens%verismo!tspec.math.nonlinear.proof_div_pos_neg_rel. a! b! ret!) (and (= ret! (EucDiv a! b!)) (=> (> (EucDiv a! b!) 0) (or (and (>= a! b!) (> b! 0)) (and (< a! 0) (< b! 0)))) (=> (or (and (>= a! b!) (> b! 0)) (and (< a! b!) (< b! 0))) (> (EucDiv a! b!) 0)) (= (= (EucDiv a! b!) 0) (and (<= 0 a!) (< a! (ite (> (%I (I b!)) 0) (%I (I b!)) (Sub 0 (%I (I b!))))))))) :pattern ((ens%verismo!tspec.math.nonlinear.proof_div_pos_neg_rel. a! b! ret!)))))
(declare-fun ens%verismo!arch.pgtable.entry_p.lemma_pt_entry_count. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!arch.pgtable.entry_p.lemma_pt_entry_count. no%param) (= verismo!arch.pgtable.def.PT_ENTRY_NUM.? 512)) :pattern ((ens%verismo!arch.pgtable.entry_p.lemma_pt_entry_count. no%param)))))
(declare-fun ens%verismo!arch.pgtable.entry_p.impl&%0.lemma_size_offset. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!arch.pgtable.entry_p.impl&%0.lemma_size_offset. no%param) (and (= 4096 (uClip 64 (uintshl 64 (I 1) (I (uClip 64 12))))) (= 2097152 (uClip 64 (uintshl 64 (I 1) (I (uClip 64 21))))) (= 1073741824 (uClip 64 (uintshl 64 (I 1) (I (uClip 64 30))))) (= 549755813888 (uClip 64 (uintshl 64 (I 1) (I (uClip 64 39))))))) :pattern ((ens%verismo!arch.pgtable.entry_p.impl&%0.lemma_size_offset. no%param)))))
(declare-fun req%verismo!arch.pgtable.entry_p.impl&%0.proof_size_offset. (verismo!arch.entities.memtype.PTLevel. Int Int) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((lvl! verismo!arch.entities.memtype.PTLevel.) (size! Int) (offset! Int)) (! (= (req%verismo!arch.pgtable.entry_p.impl&%0.proof_size_offset. lvl! size! offset!) (and (=> %%global_location_label%%7 (= size! (verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize.? (Poly%verismo!arch.entities.memtype.PTLevel. lvl!)))) (=> %%global_location_label%%8 (= offset! (verismo!arch.pgtable.entry_s.impl&%0.spec_offset.? (Poly%verismo!arch.entities.memtype.PTLevel. lvl!)))))) :pattern ((req%verismo!arch.pgtable.entry_p.impl&%0.proof_size_offset. lvl! size! offset!)))))
(declare-fun ens%verismo!arch.pgtable.entry_p.impl&%0.proof_size_offset. (verismo!arch.entities.memtype.PTLevel. Int Int) Bool)
(assert (forall ((lvl! verismo!arch.entities.memtype.PTLevel.) (size! Int) (offset! Int)) (! (= (ens%verismo!arch.pgtable.entry_p.impl&%0.proof_size_offset. lvl! size! offset!) (= size! (uClip 64 (uintshl 64 (I 1) (I offset!))))) :pattern ((ens%verismo!arch.pgtable.entry_p.impl&%0.proof_size_offset. lvl! size! offset!)))))
(declare-fun ens%verismo!arch.pgtable.entry_p.impl&%0.proof_table_index_range. (Dcr Type verismo!arch.entities.memtype.PTLevel. verismo!arch.addr_s.def_s.SpecAddr.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.entities.memtype.PTLevel.) (vaddr! verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (ens%verismo!arch.pgtable.entry_p.impl&%0.proof_table_index_range. T&. T& self! vaddr!) (let ((tmp%%$ (verismo!arch.pgtable.entry_s.impl&%0.spec_table_index.? T&. T& (Poly%verismo!arch.entities.memtype.PTLevel. self!) (Poly%verismo!arch.addr_s.def_s.SpecAddr. vaddr!)))) (and (<= 0 tmp%%$) (< tmp%%$ verismo!arch.pgtable.def.PT_ENTRY_NUM.?)))) :pattern ((ens%verismo!arch.pgtable.entry_p.impl&%0.proof_table_index_range. T&. T& self! vaddr!)))))
(declare-fun ens%verismo!arch.pgtable.entry_p.impl&%0.lemma_table_index. (Dcr Type Int verismo!arch.entities.memtype.PTLevel. Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Int) (lvl! verismo!arch.entities.memtype.PTLevel.) (ret! Int)) (! (= (ens%verismo!arch.pgtable.entry_p.impl&%0.lemma_table_index. T&. T& val! lvl! ret!) (and (= ret! (verismo!arch.pgtable.entry_s.impl&%0.spec_table_index.? T&. T& (Poly%verismo!arch.entities.memtype.PTLevel. lvl!) (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new.? T&. T& (I val!))))) (= (uClip 64 (uintshr 64 (I val!) (I (uClip 64 (verismo!arch.pgtable.entry_s.impl&%0.spec_offset.? (Poly%verismo!arch.entities.memtype.PTLevel. lvl!)))))) (uClip 64 (EucDiv val! (uClip 64 (verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize.? (Poly%verismo!arch.entities.memtype.PTLevel. lvl!)))))) (= (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I val!) (I (uClip 64 (verismo!arch.pgtable.entry_s.impl&%0.spec_offset.? (Poly%verismo!arch.entities.memtype.PTLevel. lvl!))))))) (I verismo!arch.pgtable.def.PT_ENTRY_IDX_MASK.?))) (uClip 64 (EucMod (uClip 64 (EucDiv val! (uClip 64 (verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize.? (Poly%verismo!arch.entities.memtype.PTLevel. lvl!))))) verismo!arch.pgtable.def.PT_ENTRY_NUM.?))) (= (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I val!) (I (uClip 64 (verismo!arch.pgtable.entry_s.impl&%0.spec_offset.? (Poly%verismo!arch.entities.memtype.PTLevel. lvl!))))))) (I verismo!arch.pgtable.def.PT_ENTRY_IDX_MASK.?))) ret!))) :pattern ((ens%verismo!arch.pgtable.entry_p.impl&%0.lemma_table_index. T&. T& val! lvl! ret!)))))
(declare-fun ens%verismo!arch.pgtable.entry_p.impl&%0.proof_table_index. (Dcr Type Int verismo!arch.entities.memtype.PTLevel.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (vaddr! Int) (lvl! verismo!arch.entities.memtype.PTLevel.)) (! (= (ens%verismo!arch.pgtable.entry_p.impl&%0.proof_table_index. T&. T& vaddr! lvl!) (and (let ((tmp%%$ (verismo!arch.pgtable.entry_s.impl&%0.spec_table_index.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.entities.memtype.PTLevel. lvl!) (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (I vaddr!)))))) (and (<= 0 tmp%%$) (< tmp%%$ verismo!arch.pgtable.def.PT_ENTRY_NUM.?))) (= (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I vaddr!) (I (uClip 64 (verismo!arch.pgtable.entry_s.impl&%0.spec_offset.? (Poly%verismo!arch.entities.memtype.PTLevel. lvl!))))))) (I verismo!arch.pgtable.def.PT_ENTRY_IDX_MASK.?))) (verismo!arch.pgtable.entry_s.impl&%0.spec_table_index.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.entities.memtype.PTLevel. lvl!) (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (I vaddr!))))))) :pattern ((ens%verismo!arch.pgtable.entry_p.impl&%0.proof_table_index. T&. T& vaddr! lvl!)))))
(declare-fun ens%verismo!arch.pgtable.entry_p.impl&%0.test_spec_next_lvl. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!arch.pgtable.entry_p.impl&%0.test_spec_next_lvl. no%param) (= (%Poly%verismo!arch.entities.memtype.PTLevel. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-verismo!arch.entities.memtype.PTLevel./L3_ (%Poly%verismo!arch.entities.memtype.PTLevel. (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L2))) core!option.Option./None (ite (is-verismo!arch.entities.memtype.PTLevel./L2_ (%Poly%verismo!arch.entities.memtype.PTLevel. (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L2))) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L3)) (ite (is-verismo!arch.entities.memtype.PTLevel./L1_ (%Poly%verismo!arch.entities.memtype.PTLevel. (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L2))) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L2)) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L1))))))))) verismo!arch.entities.memtype.PTLevel./L3)) :pattern ((ens%verismo!arch.pgtable.entry_p.impl&%0.test_spec_next_lvl. no%param)))))
(declare-fun req%verismo!arch.pgtable.entry_p.impl&%1.lemma_each_table_is_one_page. (Dcr Type verismo!arch.pgtable.def.SpecPageTableEntry. Int) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.pgtable.def.SpecPageTableEntry.) (idx! Int)) (! (= (req%verismo!arch.pgtable.entry_p.impl&%1.lemma_each_table_is_one_page. T&. T& self! idx!) (=> %%global_location_label%%9 (< idx! verismo!arch.pgtable.def.PT_ENTRY_NUM.?))) :pattern ((req%verismo!arch.pgtable.entry_p.impl&%1.lemma_each_table_is_one_page. T&. T& self! idx!)))))
(declare-fun ens%verismo!arch.pgtable.entry_p.impl&%1.lemma_each_table_is_one_page. (Dcr Type verismo!arch.pgtable.def.SpecPageTableEntry. Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.pgtable.def.SpecPageTableEntry.) (idx! Int)) (! (= (ens%verismo!arch.pgtable.entry_p.impl&%1.lemma_each_table_is_one_page. T&. T& self! idx!) (= (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.? T&. T& (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. self!) (I idx!)))) (verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. self!)))) :pattern ((ens%verismo!arch.pgtable.entry_p.impl&%1.lemma_each_table_is_one_page. T&. T& self! idx!)))))
(declare-const T&. Dcr)
(declare-const T& Type)
(declare-const self! verismo!arch.pgtable.def.SpecPageTableEntry.)
(declare-const idx! Int)
(declare-const tmp%1 Bool)
(assert fuel_defaults)
(assert (has_type (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. self!) (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)))
(assert (<= 0 idx!))
(assert (tr_bound%verismo!arch.addr_s.def_s.AddrType. T&. T&))
(assert (< idx! verismo!arch.pgtable.def.PT_ENTRY_NUM.?))
(declare-const %%location_label%%0 Bool)
(declare-const %%location_label%%1 Bool)
(declare-const %%location_label%%2 Bool)
(assert (not (and (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> %%location_label%%0 (= verismo!arch.pgtable.def.PT_ENTRY_NUM.? 512))) (=> (= verismo!arch.pgtable.def.PT_ENTRY_NUM.? 512) (=> (= tmp%1 (= 4096 (Mul verismo!arch.pgtable.def.PT_ENTRY_NUM.? verismo!arch.pgtable.def.PT_ENTRY_SIZE.?))) (and (=> %%location_label%%1 tmp%1) (=> tmp%1 (=> %%location_label%%2 (= (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.? T&. T& (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. self!) (I idx!)))) (verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. self!)))))))))))
(check-sat)
(exit)
