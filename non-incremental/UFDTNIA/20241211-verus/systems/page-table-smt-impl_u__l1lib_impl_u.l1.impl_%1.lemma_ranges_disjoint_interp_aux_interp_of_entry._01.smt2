(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
    (set-option :smt.arith.solver 6)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Ok. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Ok_0. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Err. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Err_0. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_pair. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.inv. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.mappings_are_of_valid_size. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.mappings_are_aligned. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.mappings_dont_overlap. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.mappings_in_bounds. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.accepted_mapping. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.valid_mapping. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.map_frame. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.accepted_resolve. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.resolve. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.remove. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.accepted_unmap. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.unmap. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.ranges_disjoint. FuelId)
(declare-const fuel%lib!impl_u.l0.impl&%0.mappings_disjoint. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%0.arrow_Directory_0. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%0.arrow_Page_0. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.well_formed. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.entry_size. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.num_entries. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.empty. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.pages_match_entry_size. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.directories_are_in_next_layer. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.directories_obey_invariant. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.directories_match_arch. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.directories_are_nonempty. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.frames_aligned. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.inv. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.interp. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.upper_vaddr. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.index_for_vaddr. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.entry_base. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.next_entry_base. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.entry_bounds. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.interp_of_entry. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.interp_aux. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.resolve. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.update. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.accepted_mapping. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.new_empty_dir. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.map_frame. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.accepted_unmap. FuelId)
(declare-const fuel%lib!impl_u.l1.impl&%1.unmap. FuelId)
(declare-const fuel%lib!impl_u.indexing.nat_mul. FuelId)
(declare-const fuel%lib!definitions_u.permissive_flags. FuelId)
(declare-const fuel%lib!extra.result_map. FuelId)
(declare-const fuel%lib!definitions_t.X86_NUM_LAYERS. FuelId)
(declare-const fuel%lib!definitions_t.X86_NUM_ENTRIES. FuelId)
(declare-const fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE. FuelId)
(declare-const fuel%lib!definitions_t.index_from_offset. FuelId)
(declare-const fuel%lib!definitions_t.index_from_base_and_addr. FuelId)
(declare-const fuel%lib!definitions_t.entry_base_from_index. FuelId)
(declare-const fuel%lib!definitions_t.next_entry_base_from_index. FuelId)
(declare-const fuel%lib!definitions_t.aligned. FuelId)
(declare-const fuel%lib!definitions_t.between. FuelId)
(declare-const fuel%lib!definitions_t.new_seq. FuelId)
(declare-const fuel%lib!definitions_t.overlap. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.num_entries. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.upper_vaddr. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.inv. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.contains_entry_size. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.index_for_vaddr. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.entry_base. FuelId)
(declare-const fuel%lib!definitions_t.impl&%8.next_entry_base. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.result.impl&%0.is_Ok. fuel%vstd!std_specs.result.impl&%0.get_Ok_0. fuel%vstd!std_specs.result.impl&%0.is_Err. fuel%vstd!std_specs.result.impl&%0.get_Err_0. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_pair. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_empty_len. fuel%vstd!set.axiom_set_insert_len. fuel%vstd!set.axiom_set_remove_len. fuel%vstd!set.axiom_set_contains_len. fuel%lib!impl_u.l0.impl&%0.inv. fuel%lib!impl_u.l0.impl&%0.mappings_are_of_valid_size. fuel%lib!impl_u.l0.impl&%0.mappings_are_aligned. fuel%lib!impl_u.l0.impl&%0.mappings_dont_overlap. fuel%lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds. fuel%lib!impl_u.l0.impl&%0.mappings_in_bounds. fuel%lib!impl_u.l0.impl&%0.accepted_mapping. fuel%lib!impl_u.l0.impl&%0.valid_mapping. fuel%lib!impl_u.l0.impl&%0.map_frame. fuel%lib!impl_u.l0.impl&%0.accepted_resolve. fuel%lib!impl_u.l0.impl&%0.resolve. fuel%lib!impl_u.l0.impl&%0.remove. fuel%lib!impl_u.l0.impl&%0.accepted_unmap. fuel%lib!impl_u.l0.impl&%0.unmap. fuel%lib!impl_u.l0.impl&%0.ranges_disjoint. fuel%lib!impl_u.l0.impl&%0.mappings_disjoint. fuel%lib!impl_u.l1.impl&%0.arrow_Directory_0. fuel%lib!impl_u.l1.impl&%0.arrow_Page_0. fuel%lib!impl_u.l1.impl&%1.well_formed. fuel%lib!impl_u.l1.impl&%1.entry_size. fuel%lib!impl_u.l1.impl&%1.num_entries. fuel%lib!impl_u.l1.impl&%1.empty. fuel%lib!impl_u.l1.impl&%1.pages_match_entry_size. fuel%lib!impl_u.l1.impl&%1.directories_are_in_next_layer. fuel%lib!impl_u.l1.impl&%1.directories_obey_invariant. fuel%lib!impl_u.l1.impl&%1.directories_match_arch. fuel%lib!impl_u.l1.impl&%1.directories_are_nonempty. fuel%lib!impl_u.l1.impl&%1.frames_aligned. fuel%lib!impl_u.l1.impl&%1.inv. fuel%lib!impl_u.l1.impl&%1.interp. fuel%lib!impl_u.l1.impl&%1.upper_vaddr. fuel%lib!impl_u.l1.impl&%1.index_for_vaddr. fuel%lib!impl_u.l1.impl&%1.entry_base. fuel%lib!impl_u.l1.impl&%1.next_entry_base. fuel%lib!impl_u.l1.impl&%1.entry_bounds. fuel%lib!impl_u.l1.impl&%1.interp_of_entry. fuel%lib!impl_u.l1.impl&%1.interp_aux. fuel%lib!impl_u.l1.impl&%1.resolve. fuel%lib!impl_u.l1.impl&%1.update. fuel%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds. fuel%lib!impl_u.l1.impl&%1.accepted_mapping. fuel%lib!impl_u.l1.impl&%1.new_empty_dir. fuel%lib!impl_u.l1.impl&%1.map_frame. fuel%lib!impl_u.l1.impl&%1.accepted_unmap. fuel%lib!impl_u.l1.impl&%1.unmap. fuel%lib!impl_u.indexing.nat_mul. fuel%lib!definitions_u.permissive_flags. fuel%lib!extra.result_map. fuel%lib!definitions_t.X86_NUM_LAYERS. fuel%lib!definitions_t.X86_NUM_ENTRIES. fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE. fuel%lib!definitions_t.index_from_offset. fuel%lib!definitions_t.index_from_base_and_addr. fuel%lib!definitions_t.entry_base_from_index. fuel%lib!definitions_t.next_entry_base_from_index. fuel%lib!definitions_t.aligned. fuel%lib!definitions_t.between. fuel%lib!definitions_t.new_seq. fuel%lib!definitions_t.overlap. fuel%lib!definitions_t.impl&%8.entry_size. fuel%lib!definitions_t.impl&%8.num_entries. fuel%lib!definitions_t.impl&%8.upper_vaddr. fuel%lib!definitions_t.impl&%8.inv. fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. fuel%lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast. fuel%lib!definitions_t.impl&%8.contains_entry_size. fuel%lib!definitions_t.impl&%8.index_for_vaddr. fuel%lib!definitions_t.impl&%8.entry_base. fuel%lib!definitions_t.impl&%8.next_entry_base. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_len.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_len.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-sort vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. 0)
(declare-sort vstd!seq.Seq<lib!definitions_t.ArchLayer.>. 0)
(declare-sort vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-datatypes ((core!result.Result. 0) (lib!impl_u.l0.PageTableContents. 0) (lib!impl_u.l1.NodeEntry. 0) (lib!impl_u.l1.Directory. 0) (lib!definitions_t.MemRegion. 0) (lib!definitions_t.Flags. 0) (lib!definitions_t.PageTableEntry. 0) (lib!definitions_t.ArchLayer. 0) (lib!definitions_t.Arch. 0) (tuple%0. 0) (tuple%2. 0)) (((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((lib!impl_u.l0.PageTableContents./PageTableContents (lib!impl_u.l0.PageTableContents./PageTableContents/?map vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.) (lib!impl_u.l0.PageTableContents./PageTableContents/?arch lib!definitions_t.Arch.) (lib!impl_u.l0.PageTableContents./PageTableContents/?lower Int) (lib!impl_u.l0.PageTableContents./PageTableContents/?upper Int))) ((lib!impl_u.l1.NodeEntry./Directory (lib!impl_u.l1.NodeEntry./Directory/?0 lib!impl_u.l1.Directory.)) (lib!impl_u.l1.NodeEntry./Page (lib!impl_u.l1.NodeEntry./Page/?0 lib!definitions_t.PageTableEntry.)) (lib!impl_u.l1.NodeEntry./Empty )) ((lib!impl_u.l1.Directory./Directory (lib!impl_u.l1.Directory./Directory/?entries vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.) (lib!impl_u.l1.Directory./Directory/?layer Int) (lib!impl_u.l1.Directory./Directory/?base_vaddr Int) (lib!impl_u.l1.Directory./Directory/?arch lib!definitions_t.Arch.) (lib!impl_u.l1.Directory./Directory/?flags lib!definitions_t.Flags.))) ((lib!definitions_t.MemRegion./MemRegion (lib!definitions_t.MemRegion./MemRegion/?base Int) (lib!definitions_t.MemRegion./MemRegion/?size Int))) ((lib!definitions_t.Flags./Flags (lib!definitions_t.Flags./Flags/?is_writable Bool) (lib!definitions_t.Flags./Flags/?is_supervisor Bool) (lib!definitions_t.Flags./Flags/?disable_execute Bool))) ((lib!definitions_t.PageTableEntry./PageTableEntry (lib!definitions_t.PageTableEntry./PageTableEntry/?frame lib!definitions_t.MemRegion.) (lib!definitions_t.PageTableEntry./PageTableEntry/?flags lib!definitions_t.Flags.))) ((lib!definitions_t.ArchLayer./ArchLayer (lib!definitions_t.ArchLayer./ArchLayer/?entry_size Int) (lib!definitions_t.ArchLayer./ArchLayer/?num_entries Int))) ((lib!definitions_t.Arch./Arch (lib!definitions_t.Arch./Arch/?layers vstd!seq.Seq<lib!definitions_t.ArchLayer.>.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun lib!impl_u.l0.PageTableContents./PageTableContents/map (lib!impl_u.l0.PageTableContents.) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(declare-fun lib!impl_u.l0.PageTableContents./PageTableContents/arch (lib!impl_u.l0.PageTableContents.) lib!definitions_t.Arch.)
(declare-fun lib!impl_u.l0.PageTableContents./PageTableContents/lower (lib!impl_u.l0.PageTableContents.) Int)
(declare-fun lib!impl_u.l0.PageTableContents./PageTableContents/upper (lib!impl_u.l0.PageTableContents.) Int)
(declare-fun lib!impl_u.l1.NodeEntry./Directory/0 (lib!impl_u.l1.NodeEntry.) lib!impl_u.l1.Directory.)
(declare-fun lib!impl_u.l1.NodeEntry./Page/0 (lib!impl_u.l1.NodeEntry.) lib!definitions_t.PageTableEntry.)
(declare-fun lib!impl_u.l1.Directory./Directory/entries (lib!impl_u.l1.Directory.) vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)
(declare-fun lib!impl_u.l1.Directory./Directory/layer (lib!impl_u.l1.Directory.) Int)
(declare-fun lib!impl_u.l1.Directory./Directory/base_vaddr (lib!impl_u.l1.Directory.) Int)
(declare-fun lib!impl_u.l1.Directory./Directory/arch (lib!impl_u.l1.Directory.) lib!definitions_t.Arch.)
(declare-fun lib!impl_u.l1.Directory./Directory/flags (lib!impl_u.l1.Directory.) lib!definitions_t.Flags.)
(declare-fun lib!definitions_t.MemRegion./MemRegion/base (lib!definitions_t.MemRegion.) Int)
(declare-fun lib!definitions_t.MemRegion./MemRegion/size (lib!definitions_t.MemRegion.) Int)
(declare-fun lib!definitions_t.Flags./Flags/is_writable (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/is_supervisor (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.Flags./Flags/disable_execute (lib!definitions_t.Flags.) Bool)
(declare-fun lib!definitions_t.PageTableEntry./PageTableEntry/frame (lib!definitions_t.PageTableEntry.) lib!definitions_t.MemRegion.)
(declare-fun lib!definitions_t.PageTableEntry./PageTableEntry/flags (lib!definitions_t.PageTableEntry.) lib!definitions_t.Flags.)
(declare-fun lib!definitions_t.ArchLayer./ArchLayer/entry_size (lib!definitions_t.ArchLayer.) Int)
(declare-fun lib!definitions_t.ArchLayer./ArchLayer/num_entries (lib!definitions_t.ArchLayer.) Int)
(declare-fun lib!definitions_t.Arch./Arch/layers (lib!definitions_t.Arch.) vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!impl_u.l0.PageTableContents. Type)
(declare-const TYPE%lib!impl_u.l1.NodeEntry. Type)
(declare-const TYPE%lib!impl_u.l1.Directory. Type)
(declare-const TYPE%lib!definitions_t.MemRegion. Type)
(declare-const TYPE%lib!definitions_t.Flags. Type)
(declare-const TYPE%lib!definitions_t.PageTableEntry. Type)
(declare-const TYPE%lib!definitions_t.ArchLayer. Type)
(declare-const TYPE%lib!definitions_t.Arch. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly) vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)
(declare-fun Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (vstd!seq.Seq<lib!definitions_t.ArchLayer.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (Poly) vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)
(declare-fun Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (Poly) vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l0.PageTableContents.) Poly)
(declare-fun %Poly%lib!impl_u.l0.PageTableContents. (Poly) lib!impl_u.l0.PageTableContents.)
(declare-fun Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry.) Poly)
(declare-fun %Poly%lib!impl_u.l1.NodeEntry. (Poly) lib!impl_u.l1.NodeEntry.)
(declare-fun Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.Directory.) Poly)
(declare-fun %Poly%lib!impl_u.l1.Directory. (Poly) lib!impl_u.l1.Directory.)
(declare-fun Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion.) Poly)
(declare-fun %Poly%lib!definitions_t.MemRegion. (Poly) lib!definitions_t.MemRegion.)
(declare-fun Poly%lib!definitions_t.Flags. (lib!definitions_t.Flags.) Poly)
(declare-fun %Poly%lib!definitions_t.Flags. (Poly) lib!definitions_t.Flags.)
(declare-fun Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry.) Poly)
(declare-fun %Poly%lib!definitions_t.PageTableEntry. (Poly) lib!definitions_t.PageTableEntry.)
(declare-fun Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer.) Poly)
(declare-fun %Poly%lib!definitions_t.ArchLayer. (Poly) lib!definitions_t.ArchLayer.)
(declare-fun Poly%lib!definitions_t.Arch. (lib!definitions_t.Arch.) Poly)
(declare-fun %Poly%lib!definitions_t.Arch. (Poly) lib!definitions_t.Arch.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (= x (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))
(assert (forall ((x vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.)) (= x (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (%Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.))))))
(assert (forall ((x vstd!seq.Seq<lib!definitions_t.ArchLayer.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!definitions_t.ArchLayer.))))))
(assert (forall ((x vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.)) (= x (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.))))))
(assert (forall ((x vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!impl_u.l1.NodeEntry.))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))))))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))))))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))))))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))))))
(assert (forall ((x lib!impl_u.l0.PageTableContents.)) (! (= x (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. x))) :pattern ((Poly%lib!impl_u.l0.PageTableContents. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l0.PageTableContents.) (= x (Poly%lib!impl_u.l0.PageTableContents. (%Poly%lib!impl_u.l0.PageTableContents. x)))) :pattern ((has_type x TYPE%lib!impl_u.l0.PageTableContents.)))))
(assert (forall ((_map! vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>.) (_arch! lib!definitions_t.Arch.) (_lower! Int) (_upper! Int)) (! (=> (and (<= 0 _lower!) (<= 0 _upper!)) (has_type (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l0.PageTableContents./PageTableContents _map! _arch! _lower! _upper!)) TYPE%lib!impl_u.l0.PageTableContents.)) :pattern ((has_type (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l0.PageTableContents./PageTableContents _map! _arch! _lower! _upper!)) TYPE%lib!impl_u.l0.PageTableContents.)))))
(assert (forall ((x lib!impl_u.l0.PageTableContents.)) (! (= (lib!impl_u.l0.PageTableContents./PageTableContents/map x) (lib!impl_u.l0.PageTableContents./PageTableContents/?map x)) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/map x)))))
(assert (forall ((x lib!impl_u.l0.PageTableContents.)) (! (= (lib!impl_u.l0.PageTableContents./PageTableContents/arch x) (lib!impl_u.l0.PageTableContents./PageTableContents/?arch x)) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/arch x)))))
(assert (forall ((x lib!impl_u.l0.PageTableContents.)) (! (= (lib!impl_u.l0.PageTableContents./PageTableContents/lower x) (lib!impl_u.l0.PageTableContents./PageTableContents/?lower x)) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/lower x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l0.PageTableContents.) (<= 0 (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. x)))) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. x)) (has_type x TYPE%lib!impl_u.l0.PageTableContents.)))))
(assert (forall ((x lib!impl_u.l0.PageTableContents.)) (! (= (lib!impl_u.l0.PageTableContents./PageTableContents/upper x) (lib!impl_u.l0.PageTableContents./PageTableContents/?upper x)) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/upper x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l0.PageTableContents.) (<= 0 (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. x)))) :pattern ((lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. x)) (has_type x TYPE%lib!impl_u.l0.PageTableContents.)))))
(assert (forall ((x lib!impl_u.l1.NodeEntry.)) (! (= x (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. x))) :pattern ((Poly%lib!impl_u.l1.NodeEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.NodeEntry.) (= x (Poly%lib!impl_u.l1.NodeEntry. (%Poly%lib!impl_u.l1.NodeEntry. x)))) :pattern ((has_type x TYPE%lib!impl_u.l1.NodeEntry.)))))
(assert (forall ((_0! lib!impl_u.l1.Directory.)) (! (=> (has_type (Poly%lib!impl_u.l1.Directory. _0!) TYPE%lib!impl_u.l1.Directory.) (has_type (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Directory _0!)) TYPE%lib!impl_u.l1.NodeEntry.)) :pattern ((has_type (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Directory _0!)) TYPE%lib!impl_u.l1.NodeEntry.)))))
(assert (forall ((x lib!impl_u.l1.NodeEntry.)) (! (= (lib!impl_u.l1.NodeEntry./Directory/0 x) (lib!impl_u.l1.NodeEntry./Directory/?0 x)) :pattern ((lib!impl_u.l1.NodeEntry./Directory/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.NodeEntry.) (has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. x))) TYPE%lib!impl_u.l1.Directory.)) :pattern ((lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. x)) (has_type x TYPE%lib!impl_u.l1.NodeEntry.)))))
(assert (forall ((_0! lib!definitions_t.PageTableEntry.)) (! (=> (has_type (Poly%lib!definitions_t.PageTableEntry. _0!) TYPE%lib!definitions_t.PageTableEntry.) (has_type (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Page _0!)) TYPE%lib!impl_u.l1.NodeEntry.)) :pattern ((has_type (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Page _0!)) TYPE%lib!impl_u.l1.NodeEntry.)))))
(assert (forall ((x lib!impl_u.l1.NodeEntry.)) (! (= (lib!impl_u.l1.NodeEntry./Page/0 x) (lib!impl_u.l1.NodeEntry./Page/?0 x)) :pattern ((lib!impl_u.l1.NodeEntry./Page/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.NodeEntry.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. x))) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. x)) (has_type x TYPE%lib!impl_u.l1.NodeEntry.)))))
(assert (has_type (Poly%lib!impl_u.l1.NodeEntry. lib!impl_u.l1.NodeEntry./Empty) TYPE%lib!impl_u.l1.NodeEntry.))
(define-fun is-lib!impl_u.l1.NodeEntry./Directory_ ((c lib!impl_u.l1.NodeEntry.)) Bool ((_ is lib!impl_u.l1.NodeEntry./Directory) c))
(assert (forall ((x lib!impl_u.l1.NodeEntry.)) (! (=> (is-lib!impl_u.l1.NodeEntry./Directory_ x) (height_lt (height (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 x))) (height (Poly%lib!impl_u.l1.NodeEntry. x)))) :pattern ((height (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 x)))))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= x (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. x))) :pattern ((Poly%lib!impl_u.l1.Directory. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.Directory.) (= x (Poly%lib!impl_u.l1.Directory. (%Poly%lib!impl_u.l1.Directory. x)))) :pattern ((has_type x TYPE%lib!impl_u.l1.Directory.)))))
(assert (forall ((_entries! vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>.) (_layer! Int) (_base_vaddr! Int) (_arch! lib!definitions_t.Arch.) (_flags! lib!definitions_t.Flags.)) (! (=> (and (<= 0 _layer!) (<= 0 _base_vaddr!)) (has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.Directory./Directory _entries! _layer! _base_vaddr! _arch! _flags!)) TYPE%lib!impl_u.l1.Directory.)) :pattern ((has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.Directory./Directory _entries! _layer! _base_vaddr! _arch! _flags!)) TYPE%lib!impl_u.l1.Directory.)))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= (lib!impl_u.l1.Directory./Directory/entries x) (lib!impl_u.l1.Directory./Directory/?entries x)) :pattern ((lib!impl_u.l1.Directory./Directory/entries x)))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= (lib!impl_u.l1.Directory./Directory/layer x) (lib!impl_u.l1.Directory./Directory/?layer x)) :pattern ((lib!impl_u.l1.Directory./Directory/layer x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.Directory.) (<= 0 (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. x)))) :pattern ((lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. x)) (has_type x TYPE%lib!impl_u.l1.Directory.)))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= (lib!impl_u.l1.Directory./Directory/base_vaddr x) (lib!impl_u.l1.Directory./Directory/?base_vaddr x)) :pattern ((lib!impl_u.l1.Directory./Directory/base_vaddr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!impl_u.l1.Directory.) (<= 0 (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. x)))) :pattern ((lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. x)) (has_type x TYPE%lib!impl_u.l1.Directory.)))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= (lib!impl_u.l1.Directory./Directory/arch x) (lib!impl_u.l1.Directory./Directory/?arch x)) :pattern ((lib!impl_u.l1.Directory./Directory/arch x)))))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (= (lib!impl_u.l1.Directory./Directory/flags x) (lib!impl_u.l1.Directory./Directory/?flags x)) :pattern ((lib!impl_u.l1.Directory./Directory/flags x)))))
(define-fun is-lib!impl_u.l1.Directory./Directory_ ((c lib!impl_u.l1.Directory.)) Bool ((_ is lib!impl_u.l1.Directory./Directory) c))
(assert (forall ((x lib!impl_u.l1.Directory.)) (! (=> (is-lib!impl_u.l1.Directory./Directory_ x) (height_lt (height (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries x))) (height (Poly%lib!impl_u.l1.Directory. x)))) :pattern ((height (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries x)))))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= x (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. x))) :pattern ((Poly%lib!definitions_t.MemRegion. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (= x (Poly%lib!definitions_t.MemRegion. (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((_base! Int) (_size! Int)) (! (=> (and (<= 0 _base!) (<= 0 _size!)) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion _base! _size!)) TYPE%lib!definitions_t.MemRegion.)) :pattern ((has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion _base! _size!)) TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= (lib!definitions_t.MemRegion./MemRegion/base x) (lib!definitions_t.MemRegion./MemRegion/?base x)) :pattern ((lib!definitions_t.MemRegion./MemRegion/base x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (<= 0 (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. x)) (has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.MemRegion.)) (! (= (lib!definitions_t.MemRegion./MemRegion/size x) (lib!definitions_t.MemRegion./MemRegion/?size x)) :pattern ((lib!definitions_t.MemRegion./MemRegion/size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.MemRegion.) (<= 0 (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. x)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. x)) (has_type x TYPE%lib!definitions_t.MemRegion.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= x (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. x))) :pattern ((Poly%lib!definitions_t.Flags. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.Flags.) (= x (Poly%lib!definitions_t.Flags. (%Poly%lib!definitions_t.Flags. x)))) :pattern ((has_type x TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_writable x) (lib!definitions_t.Flags./Flags/?is_writable x)) :pattern ((lib!definitions_t.Flags./Flags/is_writable x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/is_supervisor x) (lib!definitions_t.Flags./Flags/?is_supervisor x)) :pattern ((lib!definitions_t.Flags./Flags/is_supervisor x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (= (lib!definitions_t.Flags./Flags/disable_execute x) (lib!definitions_t.Flags./Flags/?disable_execute x)) :pattern ((lib!definitions_t.Flags./Flags/disable_execute x)))))
(assert (forall ((x lib!definitions_t.Flags.)) (! (has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.) :pattern ((has_type (Poly%lib!definitions_t.Flags. x) TYPE%lib!definitions_t.Flags.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= x (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. x))) :pattern ((Poly%lib!definitions_t.PageTableEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntry.) (= x (Poly%lib!definitions_t.PageTableEntry. (%Poly%lib!definitions_t.PageTableEntry. x)))) :pattern ((has_type x TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((_frame! lib!definitions_t.MemRegion.) (_flags! lib!definitions_t.Flags.)) (! (=> (has_type (Poly%lib!definitions_t.MemRegion. _frame!) TYPE%lib!definitions_t.MemRegion.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry./PageTableEntry _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%lib!definitions_t.PageTableEntry. (lib!definitions_t.PageTableEntry./PageTableEntry _frame! _flags!)) TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= (lib!definitions_t.PageTableEntry./PageTableEntry/frame x) (lib!definitions_t.PageTableEntry./PageTableEntry/?frame x)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/frame x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.PageTableEntry.) (has_type (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. x))) TYPE%lib!definitions_t.MemRegion.)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. x)) (has_type x TYPE%lib!definitions_t.PageTableEntry.)))))
(assert (forall ((x lib!definitions_t.PageTableEntry.)) (! (= (lib!definitions_t.PageTableEntry./PageTableEntry/flags x) (lib!definitions_t.PageTableEntry./PageTableEntry/?flags x)) :pattern ((lib!definitions_t.PageTableEntry./PageTableEntry/flags x)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= x (%Poly%lib!definitions_t.ArchLayer. (Poly%lib!definitions_t.ArchLayer. x))) :pattern ((Poly%lib!definitions_t.ArchLayer. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (= x (Poly%lib!definitions_t.ArchLayer. (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((_entry_size! Int) (_num_entries! Int)) (! (=> (and (<= 0 _entry_size!) (<= 0 _num_entries!)) (has_type (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayer.)) :pattern ((has_type (Poly%lib!definitions_t.ArchLayer. (lib!definitions_t.ArchLayer./ArchLayer _entry_size! _num_entries!)) TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= (lib!definitions_t.ArchLayer./ArchLayer/entry_size x) (lib!definitions_t.ArchLayer./ArchLayer/?entry_size x)) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/entry_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (<= 0 (lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. x)) (has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.ArchLayer.)) (! (= (lib!definitions_t.ArchLayer./ArchLayer/num_entries x) (lib!definitions_t.ArchLayer./ArchLayer/?num_entries x)) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/num_entries x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.ArchLayer.) (<= 0 (lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. x)))) :pattern ((lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. x)) (has_type x TYPE%lib!definitions_t.ArchLayer.)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (= x (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. x))) :pattern ((Poly%lib!definitions_t.Arch. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!definitions_t.Arch.) (= x (Poly%lib!definitions_t.Arch. (%Poly%lib!definitions_t.Arch. x)))) :pattern ((has_type x TYPE%lib!definitions_t.Arch.)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (= (lib!definitions_t.Arch./Arch/layers x) (lib!definitions_t.Arch./Arch/?layers x)) :pattern ((lib!definitions_t.Arch./Arch/layers x)))))
(assert (forall ((x lib!definitions_t.Arch.)) (! (has_type (Poly%lib!definitions_t.Arch. x) TYPE%lib!definitions_t.Arch.) :pattern ((has_type (Poly%lib!definitions_t.Arch. x) TYPE%lib!definitions_t.Arch.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(declare-fun tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. (Dcr Type Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! true :pattern ((tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. Self%&. Self%& T&. T& E&. E&)))))
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Err%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!definitions_t.overlap.? (Poly Poly) Bool)
(declare-fun lib!definitions_t.aligned.? (Poly Poly) Bool)
(declare-fun lib!definitions_t.X86_NUM_LAYERS.? () Int)
(declare-fun lib!definitions_t.impl&%8.entry_size.? (Poly Poly) Int)
(declare-fun lib!definitions_t.impl&%8.num_entries.? (Poly Poly) Int)
(declare-fun lib!definitions_t.X86_MAX_ENTRY_SIZE.? () Int)
(declare-fun lib!definitions_t.X86_NUM_ENTRIES.? () Int)
(declare-fun lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? (Poly Poly) Bool)
(declare-fun lib!definitions_t.impl&%8.inv.? (Poly) Bool)
(declare-fun lib!definitions_t.entry_base_from_index.? (Poly Poly Poly) Int)
(declare-fun lib!definitions_t.impl&%8.entry_base.? (Poly Poly Poly Poly) Int)
(declare-fun lib!definitions_t.impl&%8.upper_vaddr.? (Poly Poly Poly) Int)
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!definitions_t.between.? (Poly Poly Poly) Bool)
(declare-fun vstd!map_lib.impl&%0.contains_pair.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-fun lib!definitions_t.new_seq.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!definitions_t.rec%new_seq.? (Dcr Type Poly Poly Fuel) Poly)
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!definitions_u.permissive_flags.? () lib!definitions_t.Flags.)
(declare-fun lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? (Poly Poly Poly) Bool)
(declare-fun lib!definitions_t.impl&%8.contains_entry_size.? (Poly Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.mappings_are_of_valid_size.? (Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.mappings_are_aligned.? (Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.mappings_dont_overlap.? (Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? (Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.mappings_in_bounds.? (Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.inv.? (Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.accepted_mapping.? (Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.valid_mapping.? (Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.map_frame.? (Poly Poly Poly) core!result.Result.)
(declare-fun lib!impl_u.l0.impl&%0.accepted_resolve.? (Poly Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.resolve.? (Poly Poly) core!result.Result.)
(declare-fun lib!impl_u.l0.impl&%0.remove.? (Poly Poly) lib!impl_u.l0.PageTableContents.)
(declare-fun lib!impl_u.l0.impl&%0.accepted_unmap.? (Poly Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.unmap.? (Poly Poly) core!result.Result.)
(declare-fun lib!impl_u.l0.impl&%0.ranges_disjoint.? (Poly Poly) Bool)
(declare-fun lib!impl_u.l0.impl&%0.mappings_disjoint.? (Poly Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%0.arrow_Directory_0.? (Poly) lib!impl_u.l1.Directory.)
(declare-fun lib!impl_u.l1.impl&%0.arrow_Page_0.? (Poly) lib!definitions_t.PageTableEntry.)
(declare-fun lib!impl_u.l1.impl&%1.entry_size.? (Poly) Int)
(declare-fun lib!impl_u.l1.impl&%1.num_entries.? (Poly) Int)
(declare-fun lib!impl_u.l1.impl&%1.well_formed.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.empty.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.pages_match_entry_size.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.directories_are_in_next_layer.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.directories_match_arch.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.directories_are_nonempty.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.frames_aligned.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.inv.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.rec%inv.? (Poly Fuel) Bool)
(declare-fun lib!impl_u.l1.impl&%1.directories_obey_invariant.? (Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? (Poly Fuel) Bool)
(declare-fun lib!impl_u.l1.impl&%1.upper_vaddr.? (Poly) Int)
(declare-fun lib!impl_u.l1.impl&%1.entry_base.? (Poly Poly) Int)
(declare-fun lib!impl_u.l1.impl&%1.entry_bounds.? (Poly Poly) tuple%2.)
(declare-fun lib!impl_u.l1.impl&%1.interp_of_entry.? (Poly Poly) lib!impl_u.l0.PageTableContents.)
(declare-fun lib!impl_u.l1.impl&%1.rec%interp_of_entry.? (Poly Poly Fuel) lib!impl_u.l0.PageTableContents.)
(declare-fun lib!impl_u.l1.impl&%1.interp_aux.? (Poly Poly) lib!impl_u.l0.PageTableContents.)
(declare-fun lib!impl_u.l1.impl&%1.rec%interp_aux.? (Poly Poly Fuel) lib!impl_u.l0.PageTableContents.)
(declare-fun lib!impl_u.l1.impl&%1.interp.? (Poly) lib!impl_u.l0.PageTableContents.)
(declare-fun lib!definitions_t.index_from_offset.? (Poly Poly) Int)
(declare-fun lib!definitions_t.index_from_base_and_addr.? (Poly Poly Poly) Int)
(declare-fun lib!definitions_t.impl&%8.index_for_vaddr.? (Poly Poly Poly Poly) Int)
(declare-fun lib!impl_u.l1.impl&%1.index_for_vaddr.? (Poly Poly) Int)
(declare-fun lib!definitions_t.next_entry_base_from_index.? (Poly Poly Poly) Int)
(declare-fun lib!definitions_t.impl&%8.next_entry_base.? (Poly Poly Poly Poly) Int)
(declare-fun lib!impl_u.l1.impl&%1.next_entry_base.? (Poly Poly) Int)
(declare-fun lib!impl_u.indexing.nat_mul.? (Poly Poly) Int)
(declare-fun lib!impl_u.l1.impl&%1.resolve.? (Poly Poly) core!result.Result.)
(declare-fun lib!impl_u.l1.impl&%1.rec%resolve.? (Poly Poly Fuel) core!result.Result.)
(declare-fun lib!impl_u.l1.impl&%1.update.? (Poly Poly Poly) lib!impl_u.l1.Directory.)
(declare-fun lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds.? (Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.accepted_mapping.? (Poly Poly Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.new_empty_dir.? (Poly Poly) lib!impl_u.l1.Directory.)
(declare-fun lib!impl_u.l1.impl&%1.map_frame.? (Poly Poly Poly) core!result.Result.)
(declare-fun lib!impl_u.l1.impl&%1.rec%map_frame.? (Poly Poly Poly Fuel) core!result.Result.)
(declare-fun lib!impl_u.l1.impl&%1.accepted_unmap.? (Poly Poly) Bool)
(declare-fun lib!impl_u.l1.impl&%1.unmap.? (Poly Poly) core!result.Result.)
(declare-fun lib!impl_u.l1.impl&%1.rec%unmap.? (Poly Poly Fuel) core!result.Result.)
(declare-fun lib!extra.result_map.? (Dcr Type Dcr Type Poly Poly) core!result.Result.)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!) T&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? Self%&. Self%& T&. T& E&. E& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? Self%&. Self%& T&. T& E&. E& self!) E&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? Self%&. Self%& T&. T& E&. E& self!)))))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)))))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!))))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)))))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!))))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%4 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_len.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!))))))
(assert (fuel_bool_default fuel%lib!definitions_t.overlap.))
(assert (=> (fuel_bool fuel%lib!definitions_t.overlap.) (forall ((region1! Poly) (region2! Poly)) (! (= (lib!definitions_t.overlap.? region1! region2!) (ite (<= (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!))) (< (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!)) (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. region1!))))) (< (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region1!)) (nClip (Add (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. region2!)) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. region2!))))))) :pattern ((lib!definitions_t.overlap.? region1! region2!))))))
(assert (fuel_bool_default fuel%lib!definitions_t.aligned.))
(assert (=> (fuel_bool fuel%lib!definitions_t.aligned.) (forall ((addr! Poly) (size! Poly)) (! (= (lib!definitions_t.aligned.? addr! size!) (= (nClip (EucMod (%I addr!) (%I size!))) 0)) :pattern ((lib!definitions_t.aligned.? addr! size!))))))
(assert (fuel_bool_default fuel%lib!definitions_t.X86_NUM_LAYERS.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_NUM_LAYERS.) (= lib!definitions_t.X86_NUM_LAYERS.? 4)))
(assert (uInv SZ lib!definitions_t.X86_NUM_LAYERS.?))
(declare-fun req%lib!definitions_t.impl&%8.entry_size. (Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((self! Poly) (layer! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_size. self! layer!) (=> %%global_location_label%%5 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_size. self! layer!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_size.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_size.) (forall ((self! Poly) (layer! Poly)) (! (= (lib!definitions_t.impl&%8.entry_size.? self! layer!) (lib!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%lib!definitions_t.ArchLayer. (vstd!seq.Seq.index.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))) layer!)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! layer!))))))
(assert (forall ((self! Poly) (layer! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT)) (<= 0 (lib!definitions_t.impl&%8.entry_size.? self! layer!))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! layer!)))))
(declare-fun req%lib!definitions_t.impl&%8.num_entries. (Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((self! Poly) (layer! Poly)) (! (= (req%lib!definitions_t.impl&%8.num_entries. self! layer!) (=> %%global_location_label%%6 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.num_entries. self! layer!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.num_entries.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.num_entries.) (forall ((self! Poly) (layer! Poly)) (! (= (lib!definitions_t.impl&%8.num_entries.? self! layer!) (lib!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%lib!definitions_t.ArchLayer. (vstd!seq.Seq.index.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))) layer!)))) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! layer!))))))
(assert (forall ((self! Poly) (layer! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT)) (<= 0 (lib!definitions_t.impl&%8.num_entries.? self! layer!))) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! layer!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_MAX_ENTRY_SIZE.) (= lib!definitions_t.X86_MAX_ENTRY_SIZE.? (nClip (Mul (nClip (Mul (nClip (Mul 512 512)) 512)) 4096)))))
(assert (<= 0 lib!definitions_t.X86_MAX_ENTRY_SIZE.?))
(assert (fuel_bool_default fuel%lib!definitions_t.X86_NUM_ENTRIES.))
(assert (=> (fuel_bool fuel%lib!definitions_t.X86_NUM_ENTRIES.) (= lib!definitions_t.X86_NUM_ENTRIES.? 512)))
(assert (uInv SZ lib!definitions_t.X86_NUM_ENTRIES.?))
(declare-fun req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. (Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. self! i!) (=> %%global_location_label%%7 (< (%I i!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_size_is_next_layer_size. self! i!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_size_is_next_layer_size.) (forall ((self! Poly) (i! Poly)) (! (= (lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i!) (=> (< (nClip (Add (%I i!) 1)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))) (= (lib!definitions_t.impl&%8.entry_size.? self! i!) (nClip (Mul (lib!definitions_t.impl&%8.entry_size.? self! (I (nClip (Add (%I i!) 1)))) (lib!definitions_t.impl&%8.num_entries.? self! (I (nClip (Add (%I i!) 1))))))))) :pattern ((lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i!))))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.inv.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.inv.) (forall ((self! Poly)) (! (= (lib!definitions_t.impl&%8.inv.? self!) (and (<= (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))) lib!definitions_t.X86_NUM_LAYERS.?) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!))))) (and (and (let ((tmp%%$ (lib!definitions_t.impl&%8.entry_size.? self! i$))) (and (< 0 tmp%%$) (<= tmp%%$ lib!definitions_t.X86_MAX_ENTRY_SIZE.?))) (let ((tmp%%$ (lib!definitions_t.impl&%8.num_entries.? self! i$))) (and (< 0 tmp%%$) (<= tmp%%$ lib!definitions_t.X86_NUM_ENTRIES.?)))) (lib!definitions_t.impl&%8.entry_size_is_next_layer_size.? self! i$)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! i$)) :pattern ((lib!definitions_t.impl&%8.num_entries.? self! i$)))))) :pattern ((lib!definitions_t.impl&%8.inv.? self!))))))
(assert (fuel_bool_default fuel%lib!definitions_t.entry_base_from_index.))
(assert (=> (fuel_bool fuel%lib!definitions_t.entry_base_from_index.) (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.entry_base_from_index.? base! idx! entry_size!) (nClip (Add (%I base!) (nClip (Mul (%I idx!) (%I entry_size!)))))) :pattern ((lib!definitions_t.entry_base_from_index.? base! idx! entry_size!))))))
(assert (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (=> (and (has_type base! NAT) (has_type idx! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.entry_base_from_index.? base! idx! entry_size!))) :pattern ((lib!definitions_t.entry_base_from_index.? base! idx! entry_size!)))))
(declare-fun req%lib!definitions_t.impl&%8.entry_base. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (req%lib!definitions_t.impl&%8.entry_base. self! layer! base! idx!) (and (=> %%global_location_label%%8 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%9 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))))) :pattern ((req%lib!definitions_t.impl&%8.entry_base. self! layer! base! idx!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.entry_base.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.entry_base.) (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!) (lib!definitions_t.entry_base_from_index.? base! idx! (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT) (has_type idx! NAT)) (<= 0 (lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!))) :pattern ((lib!definitions_t.impl&%8.entry_base.? self! layer! base! idx!)))))
(declare-fun req%lib!definitions_t.impl&%8.upper_vaddr. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly)) (! (= (req%lib!definitions_t.impl&%8.upper_vaddr. self! layer! base!) (and (=> %%global_location_label%%10 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%11 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))))) :pattern ((req%lib!definitions_t.impl&%8.upper_vaddr. self! layer! base!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.upper_vaddr.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.upper_vaddr.) (forall ((self! Poly) (layer! Poly) (base! Poly)) (! (= (lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!) (lib!definitions_t.entry_base_from_index.? base! (I (lib!definitions_t.impl&%8.num_entries.? self! layer!)) (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT)) (<= 0 (lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!))) :pattern ((lib!definitions_t.impl&%8.upper_vaddr.? self! layer! base!)))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.between.))
(assert (=> (fuel_bool fuel%lib!definitions_t.between.) (forall ((x! Poly) (a! Poly) (b! Poly)) (! (= (lib!definitions_t.between.? x! a! b!) (and (<= (%I a!) (%I x!)) (< (%I x!) (%I b!)))) :pattern ((lib!definitions_t.between.? x! a! b!))))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_pair.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_pair.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k!) v!))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!))))))
(assert (fuel_bool_default fuel%lib!definitions_t.new_seq.))
(declare-const fuel_nat%lib!definitions_t.new_seq. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly) (fuel% Fuel)) (! (= (lib!definitions_t.rec%new_seq.? T&. T& i! e! fuel%) (lib!definitions_t.rec%new_seq.? T&. T& i! e! zero)) :pattern ((lib!definitions_t.rec%new_seq.? T&. T& i! e! fuel%)))))
(assert (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly) (fuel% Fuel)) (! (=> (and (has_type i! NAT) (has_type e! T&)) (= (lib!definitions_t.rec%new_seq.? T&. T& i! e! (succ fuel%)) (ite (= (%I i!) 0) (vstd!seq.Seq.empty.? T&. T&) (vstd!seq.Seq.push.? T&. T& (lib!definitions_t.rec%new_seq.? T&. T& (I (nClip (Sub (%I i!) 1))) e! fuel%) e!)))) :pattern ((lib!definitions_t.rec%new_seq.? T&. T& i! e! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!definitions_t.new_seq.) (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly)) (! (=> (and (has_type i! NAT) (has_type e! T&)) (= (lib!definitions_t.new_seq.? T&. T& i! e!) (lib!definitions_t.rec%new_seq.? T&. T& i! e! (succ fuel_nat%lib!definitions_t.new_seq.)))) :pattern ((lib!definitions_t.new_seq.? T&. T& i! e!))))))
(assert (forall ((T&. Dcr) (T& Type) (i! Poly) (e! Poly)) (! (=> (and (has_type i! NAT) (has_type e! T&)) (has_type (lib!definitions_t.new_seq.? T&. T& i! e!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!definitions_t.new_seq.? T&. T& i! e!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Ok_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Ok_0.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (core!result.Result./Ok/0 (%Poly%core!result.Result. self!))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Err.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Err.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Err_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Err_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Err_0.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (core!result.Result./Err/0 (%Poly%core!result.Result. self!))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!))))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%0 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%0 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)))))
(assert (fuel_bool_default fuel%lib!definitions_u.permissive_flags.))
(assert (=> (fuel_bool fuel%lib!definitions_u.permissive_flags.) (= lib!definitions_u.permissive_flags.? (lib!definitions_t.Flags./Flags (%B (B true)) (%B (B false)) (%B (B false))))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.) (forall ((self! Poly) (entry_size! Poly) (min_idx! Poly)) (! (= (lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? self! entry_size! min_idx!) (exists ((i$ Poly)) (! (and (has_type i$ NAT) (and (and (<= (%I min_idx!) (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))) (= (lib!definitions_t.impl&%8.entry_size.? self! i$) (%I entry_size!)))) :pattern ((lib!definitions_t.impl&%8.entry_size.? self! i$))))) :pattern ((lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? self! entry_size! min_idx!))))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.contains_entry_size.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.contains_entry_size.) (forall ((self! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.impl&%8.contains_entry_size.? self! entry_size!) (lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? self! entry_size! (I 0))) :pattern ((lib!definitions_t.impl&%8.contains_entry_size.? self! entry_size!))))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.mappings_are_of_valid_size.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.mappings_are_of_valid_size.) (forall ((self! Poly)) (! (= (lib!impl_u.l0.impl&%0.mappings_are_of_valid_size.? self!) (forall ((va$ Poly)) (! (=> (has_type va$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) va$) (lib!definitions_t.impl&%8.contains_entry_size.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%lib!impl_u.l0.PageTableContents. self!))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$)))))))))) :pattern ((lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$))))))) :pattern ((lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$)))))))))) :pattern ((lib!impl_u.l0.impl&%0.mappings_are_of_valid_size.? self!))))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.mappings_are_aligned.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.mappings_are_aligned.) (forall ((self! Poly)) (! (= (lib!impl_u.l0.impl&%0.mappings_are_aligned.? self!) (forall ((va$ Poly)) (! (=> (has_type va$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) va$) (and (lib!definitions_t.aligned.? va$ (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$)))))))) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$))))))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$))))))))))) :pattern ((lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$))))))) :pattern ((lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) va$)))))))))) :pattern ((lib!impl_u.l0.impl&%0.mappings_are_aligned.? self!))))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.mappings_dont_overlap.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.mappings_dont_overlap.) (forall ((self! Poly)) (! (= (lib!impl_u.l0.impl&%0.mappings_dont_overlap.? self!) (forall ((b1$ Poly) (b2$ Poly)) (! (=> (and (has_type b1$ NAT) (has_type b2$ NAT)) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b1$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b2$)) (or (= b1$ b2$) (not (lib!definitions_t.overlap.? (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I b1$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b1$)))))))))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I b2$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b2$))))))))))))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b1$) (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b2$)) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b1$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b2$))))) :pattern ((lib!impl_u.l0.impl&%0.mappings_dont_overlap.? self!))))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.) (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? self! base! pte!) (and (<= (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. self!)) (%I base!)) (<= (nClip (Add (%I base!) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. self!))))) :pattern ((lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? self! base! pte!))))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.mappings_in_bounds.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.mappings_in_bounds.) (forall ((self! Poly)) (! (= (lib!impl_u.l0.impl&%0.mappings_in_bounds.? self!) (forall ((b1$ Poly)) (! (=> (has_type b1$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b1$) (lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? self! b1$ (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b1$)))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b1$)) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b1$)) :pattern ((lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? self! b1$ (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b1$)))))) :pattern ((lib!impl_u.l0.impl&%0.mappings_in_bounds.? self!))))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.inv.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.inv.) (forall ((self! Poly)) (! (= (lib!impl_u.l0.impl&%0.inv.? self!) (and (and (and (and (and (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))))) (lib!definitions_t.impl&%8.inv.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%lib!impl_u.l0.PageTableContents. self!))))) (lib!impl_u.l0.impl&%0.mappings_are_of_valid_size.? self!)) (lib!impl_u.l0.impl&%0.mappings_are_aligned.? self!)) (lib!impl_u.l0.impl&%0.mappings_dont_overlap.? self!)) (lib!impl_u.l0.impl&%0.mappings_in_bounds.? self!))) :pattern ((lib!impl_u.l0.impl&%0.inv.? self!))))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.accepted_mapping.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.accepted_mapping.) (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (lib!impl_u.l0.impl&%0.accepted_mapping.? self! base! pte!) (and (and (and (lib!definitions_t.aligned.? base! (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))))) (lib!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? self! base! pte!)) (lib!definitions_t.impl&%8.contains_entry_size.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%lib!impl_u.l0.PageTableContents. self!))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))))) :pattern ((lib!impl_u.l0.impl&%0.accepted_mapping.? self! base! pte!))))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.valid_mapping.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.valid_mapping.) (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (lib!impl_u.l0.impl&%0.valid_mapping.? self! base! pte!) (forall ((b$ Poly)) (! (=> (has_type b$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b$) (not (lib!definitions_t.overlap.? (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I base!) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I b$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) b$)))))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) b$))))) :pattern ((lib!impl_u.l0.impl&%0.valid_mapping.? self! base! pte!))))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.map_frame.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.map_frame.) (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (lib!impl_u.l0.impl&%0.map_frame.? self! base! pte!) (ite (lib!impl_u.l0.impl&%0.accepted_mapping.? self! base! pte!) (ite (lib!impl_u.l0.impl&%0.valid_mapping.? self! base! pte!) (core!result.Result./Ok (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l0.PageTableContents./PageTableContents (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) base! pte!)) (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%lib!impl_u.l0.PageTableContents. self!)))) (%I (I (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. self!)))) (%I (I (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. self!))))))) (core!result.Result./Err self!)) (%Poly%core!result.Result. (vstd!pervasive.arbitrary.? $ (TYPE%core!result.Result. $ TYPE%lib!impl_u.l0.PageTableContents. $ TYPE%lib!impl_u.l0.PageTableContents.))))) :pattern ((lib!impl_u.l0.impl&%0.map_frame.? self! base! pte!))))))
(assert (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l0.PageTableContents.) (has_type base! NAT) (has_type pte! TYPE%lib!definitions_t.PageTableEntry.)) (has_type (Poly%core!result.Result. (lib!impl_u.l0.impl&%0.map_frame.? self! base! pte!)) (TYPE%core!result.Result. $ TYPE%lib!impl_u.l0.PageTableContents. $ TYPE%lib!impl_u.l0.PageTableContents.))) :pattern ((lib!impl_u.l0.impl&%0.map_frame.? self! base! pte!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.accepted_resolve.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.accepted_resolve.) (forall ((self! Poly) (vaddr! Poly)) (! (= (lib!impl_u.l0.impl&%0.accepted_resolve.? self! vaddr!) (lib!definitions_t.between.? vaddr! (I (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. self!))) (I (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. self!))))) :pattern ((lib!impl_u.l0.impl&%0.accepted_resolve.? self! vaddr!))))))
(declare-fun req%lib!impl_u.l0.impl&%0.resolve. (Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((self! Poly) (vaddr! Poly)) (! (= (req%lib!impl_u.l0.impl&%0.resolve. self! vaddr!) (=> %%global_location_label%%12 (lib!impl_u.l0.impl&%0.accepted_resolve.? self! vaddr!))) :pattern ((req%lib!impl_u.l0.impl&%0.resolve. self! vaddr!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.resolve.))
(declare-fun %%choose%%0 (Type Type Dcr Type Dcr Type Poly Poly Dcr Type Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly)) (! (=> (exists ((base$ Poly) (pte$ Poly)) (! (and (has_type base$ %%hole%%0) (has_type pte$ %%hole%%1) (and (vstd!map_lib.impl&%0.contains_pair.? %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 base$ pte$) (lib!definitions_t.between.? %%hole%%7 base$ (I (nClip (Add (%I base$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))))))))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 base$ pte$)))) (exists ((base$ Poly) (pte$ Poly)) (! (and (and (has_type base$ %%hole%%0) (has_type pte$ %%hole%%1) (and (vstd!map_lib.impl&%0.contains_pair.? %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 base$ pte$) (lib!definitions_t.between.? %%hole%%7 base$ (I (nClip (Add (%I base$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))))))))) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) (Poly%tuple%2. (tuple%2./tuple%2 base$ pte$)))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 base$ pte$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12)))))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.resolve.) (forall ((self! Poly) (vaddr! Poly)) (! (= (lib!impl_u.l0.impl&%0.resolve.? self! vaddr!) (ite (exists ((base$ Poly) (pte$ Poly)) (! (and (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.)) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) base$ pte$) (lib!definitions_t.between.? vaddr! base$ (I (nClip (Add (%I base$) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte$))))))))))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) base$ pte$)))) (let ((tmp%%$ (%Poly%tuple%2. (as_type (%%choose%%0 NAT TYPE%lib!definitions_t.PageTableEntry. $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) vaddr! $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))) (let ((base$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((pte$ (%Poly%lib!definitions_t.PageTableEntry. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (core!result.Result./Ok (Poly%tuple%2. (tuple%2./tuple%2 (I base$) (Poly%lib!definitions_t.PageTableEntry. pte$))))))) (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0)))) :pattern ((lib!impl_u.l0.impl&%0.resolve.? self! vaddr!))))))
(assert (forall ((self! Poly) (vaddr! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l0.PageTableContents.) (has_type vaddr! NAT)) (has_type (Poly%core!result.Result. (lib!impl_u.l0.impl&%0.resolve.? self! vaddr!)) (TYPE%core!result.Result. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) $ TYPE%tuple%0.))) :pattern ((lib!impl_u.l0.impl&%0.resolve.? self! vaddr!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.remove.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.remove.) (forall ((self! Poly) (n! Poly)) (! (= (lib!impl_u.l0.impl&%0.remove.? self! n!) (lib!impl_u.l0.PageTableContents./PageTableContents (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) n!)) (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%lib!impl_u.l0.PageTableContents. self!)))) (%I (I (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. self!)))) (%I (I (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. self!)))))) :pattern ((lib!impl_u.l0.impl&%0.remove.? self! n!))))))
(assert (forall ((self! Poly) (n! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l0.PageTableContents.) (has_type n! NAT)) (has_type (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l0.impl&%0.remove.? self! n!)) TYPE%lib!impl_u.l0.PageTableContents.)) :pattern ((lib!impl_u.l0.impl&%0.remove.? self! n!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.accepted_unmap.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.accepted_unmap.) (forall ((self! Poly) (base! Poly)) (! (= (lib!impl_u.l0.impl&%0.accepted_unmap.? self! base!) (and (lib!definitions_t.between.? base! (I (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. self!))) (I (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. self!)))) (exists ((size$ Poly)) (! (and (has_type size$ NAT) (and (lib!definitions_t.impl&%8.contains_entry_size.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%lib!impl_u.l0.PageTableContents. self!))) size$) (lib!definitions_t.aligned.? base! size$))) :pattern ((lib!definitions_t.impl&%8.contains_entry_size.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%lib!impl_u.l0.PageTableContents. self!))) size$)) :pattern ((lib!definitions_t.aligned.? base! size$)))))) :pattern ((lib!impl_u.l0.impl&%0.accepted_unmap.? self! base!))))))
(declare-fun req%lib!impl_u.l0.impl&%0.unmap. (Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((self! Poly) (base! Poly)) (! (= (req%lib!impl_u.l0.impl&%0.unmap. self! base!) (=> %%global_location_label%%13 (lib!impl_u.l0.impl&%0.accepted_unmap.? self! base!))) :pattern ((req%lib!impl_u.l0.impl&%0.unmap. self! base!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.unmap.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.unmap.) (forall ((self! Poly) (base! Poly)) (! (= (lib!impl_u.l0.impl&%0.unmap.? self! base!) (ite (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) base!) (core!result.Result./Ok (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l0.impl&%0.remove.? self! base!))) (core!result.Result./Err self!))) :pattern ((lib!impl_u.l0.impl&%0.unmap.? self! base!))))))
(assert (forall ((self! Poly) (base! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l0.PageTableContents.) (has_type base! NAT)) (has_type (Poly%core!result.Result. (lib!impl_u.l0.impl&%0.unmap.? self! base!)) (TYPE%core!result.Result. $ TYPE%lib!impl_u.l0.PageTableContents. $ TYPE%lib!impl_u.l0.PageTableContents.))) :pattern ((lib!impl_u.l0.impl&%0.unmap.? self! base!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.ranges_disjoint.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.ranges_disjoint.) (forall ((self! Poly) (other! Poly)) (! (= (lib!impl_u.l0.impl&%0.ranges_disjoint.? self! other!) (ite (<= (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. self!)) (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. other!))) (<= (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. self!)) (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. other!))) (<= (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. other!)) (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. self!))))) :pattern ((lib!impl_u.l0.impl&%0.ranges_disjoint.? self! other!))))))
(assert (fuel_bool_default fuel%lib!impl_u.l0.impl&%0.mappings_disjoint.))
(assert (=> (fuel_bool fuel%lib!impl_u.l0.impl&%0.mappings_disjoint.) (forall ((self! Poly) (other! Poly)) (! (= (lib!impl_u.l0.impl&%0.mappings_disjoint.? self! other!) (forall ((s$ Poly) (o$ Poly)) (! (=> (and (has_type s$ NAT) (has_type o$ NAT)) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!)))) s$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. other!)))) o$)) (not (lib!definitions_t.overlap.? (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I s$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) s$)))))))))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I o$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. other!))) o$)))))))))))))) :pattern ((lib!definitions_t.overlap.? (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I s$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. self!))) s$)))))))))) (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.MemRegion./MemRegion (%I o$) (%I (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. other!))) o$))))))))))))))) :pattern ((lib!impl_u.l0.impl&%0.mappings_disjoint.? self! other!))))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%0.arrow_Directory_0.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%0.arrow_Directory_0.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%0.arrow_Directory_0.? self!) (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. self!))) :pattern ((lib!impl_u.l1.impl&%0.arrow_Directory_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.NodeEntry.) (has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%0.arrow_Directory_0.? self!)) TYPE%lib!impl_u.l1.Directory.)) :pattern ((lib!impl_u.l1.impl&%0.arrow_Directory_0.? self!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%0.arrow_Page_0.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%0.arrow_Page_0.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%0.arrow_Page_0.? self!) (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. self!))) :pattern ((lib!impl_u.l1.impl&%0.arrow_Page_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.NodeEntry.) (has_type (Poly%lib!definitions_t.PageTableEntry. (lib!impl_u.l1.impl&%0.arrow_Page_0.? self!)) TYPE%lib!definitions_t.PageTableEntry.)) :pattern ((lib!impl_u.l1.impl&%0.arrow_Page_0.? self!)))))
(declare-fun req%lib!impl_u.l1.impl&%1.entry_size. (Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.entry_size. self!) (=> %%global_location_label%%14 (< (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))))))))) :pattern ((req%lib!impl_u.l1.impl&%1.entry_size. self!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.entry_size.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.entry_size.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.entry_size.? self!) (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))) (I (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!))))) :pattern ((lib!impl_u.l1.impl&%1.entry_size.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (<= 0 (lib!impl_u.l1.impl&%1.entry_size.? self!))) :pattern ((lib!impl_u.l1.impl&%1.entry_size.? self!)))))
(declare-fun req%lib!impl_u.l1.impl&%1.num_entries. (Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.num_entries. self!) (=> %%global_location_label%%15 (< (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))))))))) :pattern ((req%lib!impl_u.l1.impl&%1.num_entries. self!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.num_entries.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.num_entries.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.num_entries.? self!) (lib!definitions_t.impl&%8.num_entries.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))) (I (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!))))) :pattern ((lib!impl_u.l1.impl&%1.num_entries.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (<= 0 (lib!impl_u.l1.impl&%1.num_entries.? self!))) :pattern ((lib!impl_u.l1.impl&%1.num_entries.? self!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.well_formed.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.well_formed.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.well_formed.? self!) (and (and (and (and (lib!definitions_t.impl&%8.inv.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))) (< (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))))))))) (lib!definitions_t.aligned.? (I (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. self!))) (I (nClip (Mul (lib!impl_u.l1.impl&%1.entry_size.? self!) (lib!impl_u.l1.impl&%1.num_entries.? self!)))))) (= (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!)))) (lib!impl_u.l1.impl&%1.num_entries.? self!))) (= (lib!impl_u.l1.Directory./Directory/flags (%Poly%lib!impl_u.l1.Directory. self!)) lib!definitions_u.permissive_flags.?))) :pattern ((lib!impl_u.l1.impl&%1.well_formed.? self!))))))
(declare-fun req%lib!impl_u.l1.impl&%1.empty. (Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.empty. self!) (=> %%global_location_label%%16 (lib!impl_u.l1.impl&%1.well_formed.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.empty. self!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.empty.))
(define-fun is-lib!impl_u.l1.NodeEntry./Empty_ ((c lib!impl_u.l1.NodeEntry.)) Bool ((_ is lib!impl_u.l1.NodeEntry./Empty) c))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.empty.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.empty.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) (lib!impl_u.l1.impl&%1.num_entries.? self!)) (is-lib!impl_u.l1.NodeEntry./Empty_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))) :pattern ((lib!impl_u.l1.impl&%1.empty.? self!))))))
(declare-fun req%lib!impl_u.l1.impl&%1.pages_match_entry_size. (Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.pages_match_entry_size. self!) (=> %%global_location_label%%17 (lib!impl_u.l1.impl&%1.well_formed.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.pages_match_entry_size. self!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.pages_match_entry_size.))
(define-fun is-lib!impl_u.l1.NodeEntry./Page_ ((c lib!impl_u.l1.NodeEntry.)) Bool ((_ is lib!impl_u.l1.NodeEntry./Page) c))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.pages_match_entry_size.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.pages_match_entry_size.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))) (is-lib!impl_u.l1.NodeEntry./Page_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))) (= (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))))))) (lib!impl_u.l1.impl&%1.entry_size.? self!)))) :pattern ((lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))))))))))) :pattern ((lib!impl_u.l1.impl&%1.pages_match_entry_size.? self!))))))
(declare-fun req%lib!impl_u.l1.impl&%1.directories_are_in_next_layer. (Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.directories_are_in_next_layer. self!) (=> %%global_location_label%%18 (lib!impl_u.l1.impl&%1.well_formed.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.directories_are_in_next_layer. self!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.directories_are_in_next_layer.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.directories_are_in_next_layer.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.directories_are_in_next_layer.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))) (is-lib!impl_u.l1.NodeEntry./Directory_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))) (let ((directory$ (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))) (and (= (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. directory$))) (nClip (Add (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)) 1))) (= (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. directory$))) (nClip (Add (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. self!)) (nClip (Mul (%I i$) (lib!impl_u.l1.impl&%1.entry_size.? self!)))))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))) :pattern ((lib!impl_u.l1.impl&%1.directories_are_in_next_layer.? self!))))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.directories_match_arch.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.directories_match_arch.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.directories_match_arch.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))) (is-lib!impl_u.l1.NodeEntry./Directory_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))) (= (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))))) (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))))) :pattern ((lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))))))))) :pattern ((lib!impl_u.l1.impl&%1.directories_match_arch.? self!))))))
(declare-fun req%lib!impl_u.l1.impl&%1.directories_are_nonempty. (Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.directories_are_nonempty. self!) (and (=> %%global_location_label%%19 (lib!impl_u.l1.impl&%1.well_formed.? self!)) (=> %%global_location_label%%20 (lib!impl_u.l1.impl&%1.directories_are_in_next_layer.? self!)) (=> %%global_location_label%%21 (lib!impl_u.l1.impl&%1.directories_match_arch.? self!)))) :pattern ((req%lib!impl_u.l1.impl&%1.directories_are_nonempty. self!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.directories_are_nonempty.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.directories_are_nonempty.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.directories_are_nonempty.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))) (is-lib!impl_u.l1.NodeEntry./Directory_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))) (not (lib!impl_u.l1.impl&%1.empty.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))))))) :pattern ((lib!impl_u.l1.impl&%1.empty.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))))))) :pattern ((lib!impl_u.l1.impl&%1.directories_are_nonempty.? self!))))))
(declare-fun req%lib!impl_u.l1.impl&%1.frames_aligned. (Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.frames_aligned. self!) (=> %%global_location_label%%22 (lib!impl_u.l1.impl&%1.well_formed.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.frames_aligned. self!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.frames_aligned.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.frames_aligned.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.frames_aligned.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))) (is-lib!impl_u.l1.NodeEntry./Page_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. (Poly%lib!definitions_t.PageTableEntry. (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))))))))) (I (lib!impl_u.l1.impl&%1.entry_size.? self!))))) :pattern ((is-lib!impl_u.l1.NodeEntry./Page_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$))))))) :pattern ((lib!impl_u.l1.impl&%1.frames_aligned.? self!))))))
(declare-fun req%lib!impl_u.l1.impl&%1.directories_obey_invariant. (Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.directories_obey_invariant. self!) (and (=> %%global_location_label%%23 (lib!impl_u.l1.impl&%1.well_formed.? self!)) (=> %%global_location_label%%24 (lib!impl_u.l1.impl&%1.directories_are_in_next_layer.? self!)) (=> %%global_location_label%%25 (lib!impl_u.l1.impl&%1.directories_match_arch.? self!)))) :pattern ((req%lib!impl_u.l1.impl&%1.directories_obey_invariant. self!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.inv.))
(declare-const fuel_nat%lib!impl_u.l1.impl&%1.inv. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l1.impl&%1.rec%inv.? self! fuel%) (lib!impl_u.l1.impl&%1.rec%inv.? self! zero)) :pattern ((lib!impl_u.l1.impl&%1.rec%inv.? self! fuel%)))))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (= (lib!impl_u.l1.impl&%1.rec%inv.? self! (succ fuel%)) (and (and (and (and (and (and (lib!impl_u.l1.impl&%1.well_formed.? self!) (lib!impl_u.l1.impl&%1.pages_match_entry_size.? self!)) (lib!impl_u.l1.impl&%1.directories_are_in_next_layer.? self!)) (lib!impl_u.l1.impl&%1.directories_match_arch.? self!)) (lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? self! fuel%)) (lib!impl_u.l1.impl&%1.directories_are_nonempty.? self!)) (lib!impl_u.l1.impl&%1.frames_aligned.? self!)))) :pattern ((lib!impl_u.l1.impl&%1.rec%inv.? self! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.inv.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (= (lib!impl_u.l1.impl&%1.inv.? self!) (lib!impl_u.l1.impl&%1.rec%inv.? self! (succ (succ fuel_nat%lib!impl_u.l1.impl&%1.inv.))))) :pattern ((lib!impl_u.l1.impl&%1.inv.? self!))))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.directories_obey_invariant.))
(declare-const fuel_nat%lib!impl_u.l1.impl&%1.directories_obey_invariant. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? self! fuel%) (lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? self! zero)) :pattern ((lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? self! fuel%)))))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (= (lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? self! (succ fuel%)) (ite (and (and (lib!impl_u.l1.impl&%1.well_formed.? self!) (lib!impl_u.l1.impl&%1.directories_are_in_next_layer.? self!)) (lib!impl_u.l1.impl&%1.directories_match_arch.? self!)) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))) (is-lib!impl_u.l1.NodeEntry./Directory_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))) (lib!impl_u.l1.impl&%1.rec%inv.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))) fuel%))) :pattern ((is-lib!impl_u.l1.NodeEntry./Directory_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) i$)))))) (%B (vstd!pervasive.arbitrary.? $ BOOL))))) :pattern ((lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? self! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.directories_obey_invariant.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (= (lib!impl_u.l1.impl&%1.directories_obey_invariant.? self!) (lib!impl_u.l1.impl&%1.rec%directories_obey_invariant.? self! (succ (succ fuel_nat%lib!impl_u.l1.impl&%1.directories_obey_invariant.))))) :pattern ((lib!impl_u.l1.impl&%1.directories_obey_invariant.? self!))))))
(declare-fun req%lib!impl_u.l1.impl&%1.upper_vaddr. (Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.upper_vaddr. self!) (=> %%global_location_label%%26 (lib!impl_u.l1.impl&%1.well_formed.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.upper_vaddr. self!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.upper_vaddr.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.upper_vaddr.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.upper_vaddr.? self!) (lib!definitions_t.impl&%8.upper_vaddr.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))) (I (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!))) (I (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. self!))))) :pattern ((lib!impl_u.l1.impl&%1.upper_vaddr.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (<= 0 (lib!impl_u.l1.impl&%1.upper_vaddr.? self!))) :pattern ((lib!impl_u.l1.impl&%1.upper_vaddr.? self!)))))
(declare-fun req%lib!impl_u.l1.impl&%1.entry_base. (Poly Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((self! Poly) (idx! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.entry_base. self! idx!) (=> %%global_location_label%%27 (lib!impl_u.l1.impl&%1.inv.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.entry_base. self! idx!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.entry_base.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.entry_base.) (forall ((self! Poly) (idx! Poly)) (! (= (lib!impl_u.l1.impl&%1.entry_base.? self! idx!) (lib!definitions_t.entry_base_from_index.? (I (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. self!))) idx! (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))) (I (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!))))))) :pattern ((lib!impl_u.l1.impl&%1.entry_base.? self! idx!))))))
(assert (forall ((self! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type idx! NAT)) (<= 0 (lib!impl_u.l1.impl&%1.entry_base.? self! idx!))) :pattern ((lib!impl_u.l1.impl&%1.entry_base.? self! idx!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.entry_bounds.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.entry_bounds.) (forall ((self! Poly) (entry! Poly)) (! (= (lib!impl_u.l1.impl&%1.entry_bounds.? self! entry!) (tuple%2./tuple%2 (I (lib!impl_u.l1.impl&%1.entry_base.? self! entry!)) (I (lib!impl_u.l1.impl&%1.entry_base.? self! (I (nClip (Add (%I entry!) 1))))))) :pattern ((lib!impl_u.l1.impl&%1.entry_bounds.? self! entry!))))))
(assert (forall ((self! Poly) (entry! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type entry! NAT)) (has_type (Poly%tuple%2. (lib!impl_u.l1.impl&%1.entry_bounds.? self! entry!)) (TYPE%tuple%2. $ NAT $ NAT))) :pattern ((lib!impl_u.l1.impl&%1.entry_bounds.? self! entry!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.interp_of_entry.))
(declare-const fuel_nat%lib!impl_u.l1.impl&%1.interp_of_entry. Fuel)
(assert (forall ((self! Poly) (entry! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l1.impl&%1.rec%interp_of_entry.? self! entry! fuel%) (lib!impl_u.l1.impl&%1.rec%interp_of_entry.? self! entry! zero)) :pattern ((lib!impl_u.l1.impl&%1.rec%interp_of_entry.? self! entry! fuel%)))))
(assert (forall ((self! Poly) (entry! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type entry! NAT)) (= (lib!impl_u.l1.impl&%1.rec%interp_of_entry.? self! entry! (succ fuel%)) (ite (and (lib!impl_u.l1.impl&%1.inv.? self!) (< (%I entry!) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!)))))) (let ((tmp%%$ (lib!impl_u.l1.impl&%1.entry_bounds.? self! entry!))) (let ((lower$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((upper$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (lib!impl_u.l0.PageTableContents./PageTableContents (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (let ((tmp%%$1 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) entry!)))) (ite (is-lib!impl_u.l1.NodeEntry./Page_ tmp%%$1) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (let ((p$ (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$1))))) (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) (I (lib!impl_u.l1.impl&%1.entry_base.? self! entry!)) (Poly%lib!definitions_t.PageTableEntry. p$)))) (ite (is-lib!impl_u.l1.NodeEntry./Directory_ tmp%%$1) (let ((d$ (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$1))))) (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.rec%interp_aux.? (Poly%lib!impl_u.l1.Directory. d$) (I 0) fuel%))))) (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))))))) (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))) (%I (I lower$)) (%I (I upper$)))))) (%Poly%lib!impl_u.l0.PageTableContents. (vstd!pervasive.arbitrary.? $ TYPE%lib!impl_u.l0.PageTableContents.))))) :pattern ((lib!impl_u.l1.impl&%1.rec%interp_of_entry.? self! entry! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.interp_of_entry.) (forall ((self! Poly) (entry! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type entry! NAT)) (= (lib!impl_u.l1.impl&%1.interp_of_entry.? self! entry!) (lib!impl_u.l1.impl&%1.rec%interp_of_entry.? self! entry! (succ (succ fuel_nat%lib!impl_u.l1.impl&%1.interp_of_entry.))))) :pattern ((lib!impl_u.l1.impl&%1.interp_of_entry.? self! entry!))))))
(assert (forall ((self! Poly) (entry! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type entry! NAT)) (has_type (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp_of_entry.? self! entry!)) TYPE%lib!impl_u.l0.PageTableContents.)) :pattern ((lib!impl_u.l1.impl&%1.interp_of_entry.? self! entry!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.interp_aux.))
(declare-const fuel_nat%lib!impl_u.l1.impl&%1.interp_aux. Fuel)
(assert (forall ((self! Poly) (i! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l1.impl&%1.rec%interp_aux.? self! i! fuel%) (lib!impl_u.l1.impl&%1.rec%interp_aux.? self! i! zero)) :pattern ((lib!impl_u.l1.impl&%1.rec%interp_aux.? self! i! fuel%)))))
(assert (forall ((self! Poly) (i! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type i! NAT)) (= (lib!impl_u.l1.impl&%1.rec%interp_aux.? self! i! (succ fuel%)) (ite (lib!impl_u.l1.impl&%1.inv.? self!) (ite (>= (%I i!) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))) (lib!impl_u.l0.PageTableContents./PageTableContents (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))) (%I (I (lib!impl_u.l1.impl&%1.upper_vaddr.? self!))) (%I (I (lib!impl_u.l1.impl&%1.upper_vaddr.? self!)))) (let ((rem$ (lib!impl_u.l1.impl&%1.rec%interp_aux.? self! (I (nClip (Add (%I i!) 1))) fuel%))) (let ((entry_i$ (lib!impl_u.l1.impl&%1.rec%interp_of_entry.? self! i! fuel%))) (lib!impl_u.l0.PageTableContents./PageTableContents (%Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. rem$)))) (Poly%vstd!map.Map<nat./lib!definitions_t.PageTableEntry.>. (lib!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. entry_i$)))))) (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))) (%I (I (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. entry_i$))))) (%I (I (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. rem$))))))))) (%Poly%lib!impl_u.l0.PageTableContents. (vstd!pervasive.arbitrary.? $ TYPE%lib!impl_u.l0.PageTableContents.))))) :pattern ((lib!impl_u.l1.impl&%1.rec%interp_aux.? self! i! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.interp_aux.) (forall ((self! Poly) (i! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type i! NAT)) (= (lib!impl_u.l1.impl&%1.interp_aux.? self! i!) (lib!impl_u.l1.impl&%1.rec%interp_aux.? self! i! (succ fuel_nat%lib!impl_u.l1.impl&%1.interp_aux.)))) :pattern ((lib!impl_u.l1.impl&%1.interp_aux.? self! i!))))))
(assert (forall ((self! Poly) (i! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type i! NAT)) (has_type (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp_aux.? self! i!)) TYPE%lib!impl_u.l0.PageTableContents.)) :pattern ((lib!impl_u.l1.impl&%1.interp_aux.? self! i!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.interp.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.interp.) (forall ((self! Poly)) (! (= (lib!impl_u.l1.impl&%1.interp.? self!) (lib!impl_u.l1.impl&%1.interp_aux.? self! (I 0))) :pattern ((lib!impl_u.l1.impl&%1.interp.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? self!)) TYPE%lib!impl_u.l0.PageTableContents.)) :pattern ((lib!impl_u.l1.impl&%1.interp.? self!)))))
(declare-fun req%lib!definitions_t.index_from_offset. (Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((offset! Poly) (entry_size! Poly)) (! (= (req%lib!definitions_t.index_from_offset. offset! entry_size!) (=> %%global_location_label%%28 (> (%I entry_size!) 0))) :pattern ((req%lib!definitions_t.index_from_offset. offset! entry_size!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.index_from_offset.))
(assert (=> (fuel_bool fuel%lib!definitions_t.index_from_offset.) (forall ((offset! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.index_from_offset.? offset! entry_size!) (nClip (EucDiv (%I offset!) (%I entry_size!)))) :pattern ((lib!definitions_t.index_from_offset.? offset! entry_size!))))))
(assert (forall ((offset! Poly) (entry_size! Poly)) (! (=> (and (has_type offset! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.index_from_offset.? offset! entry_size!))) :pattern ((lib!definitions_t.index_from_offset.? offset! entry_size!)))))
(declare-fun req%lib!definitions_t.index_from_base_and_addr. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((base! Poly) (addr! Poly) (entry_size! Poly)) (! (= (req%lib!definitions_t.index_from_base_and_addr. base! addr! entry_size!) (and (=> %%global_location_label%%29 (>= (%I addr!) (%I base!))) (=> %%global_location_label%%30 (> (%I entry_size!) 0)))) :pattern ((req%lib!definitions_t.index_from_base_and_addr. base! addr! entry_size!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.index_from_base_and_addr.))
(assert (=> (fuel_bool fuel%lib!definitions_t.index_from_base_and_addr.) (forall ((base! Poly) (addr! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.index_from_base_and_addr.? base! addr! entry_size!) (lib!definitions_t.index_from_offset.? (I (nClip (Sub (%I addr!) (%I base!)))) entry_size!)) :pattern ((lib!definitions_t.index_from_base_and_addr.? base! addr! entry_size!))))))
(assert (forall ((base! Poly) (addr! Poly) (entry_size! Poly)) (! (=> (and (has_type base! NAT) (has_type addr! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.index_from_base_and_addr.? base! addr! entry_size!))) :pattern ((lib!definitions_t.index_from_base_and_addr.? base! addr! entry_size!)))))
(declare-fun req%lib!definitions_t.impl&%8.index_for_vaddr. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (vaddr! Poly)) (! (= (req%lib!definitions_t.impl&%8.index_for_vaddr. self! layer! base! vaddr!) (and (=> %%global_location_label%%31 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%32 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))) (=> %%global_location_label%%33 (<= (%I base!) (%I vaddr!))))) :pattern ((req%lib!definitions_t.impl&%8.index_for_vaddr. self! layer! base! vaddr!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.index_for_vaddr.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.index_for_vaddr.) (forall ((self! Poly) (layer! Poly) (base! Poly) (vaddr! Poly)) (! (= (lib!definitions_t.impl&%8.index_for_vaddr.? self! layer! base! vaddr!) (lib!definitions_t.index_from_base_and_addr.? base! vaddr! (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.index_for_vaddr.? self! layer! base! vaddr!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (vaddr! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT) (has_type vaddr! NAT)) (<= 0 (lib!definitions_t.impl&%8.index_for_vaddr.? self! layer! base! vaddr!))) :pattern ((lib!definitions_t.impl&%8.index_for_vaddr.? self! layer! base! vaddr!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.index_for_vaddr.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.index_for_vaddr.) (forall ((self! Poly) (vaddr! Poly)) (! (= (lib!impl_u.l1.impl&%1.index_for_vaddr.? self! vaddr!) (lib!definitions_t.index_from_base_and_addr.? (I (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. self!))) vaddr! (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))) (I (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!))))))) :pattern ((lib!impl_u.l1.impl&%1.index_for_vaddr.? self! vaddr!))))))
(assert (forall ((self! Poly) (vaddr! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type vaddr! NAT)) (<= 0 (lib!impl_u.l1.impl&%1.index_for_vaddr.? self! vaddr!))) :pattern ((lib!impl_u.l1.impl&%1.index_for_vaddr.? self! vaddr!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.next_entry_base_from_index.))
(assert (=> (fuel_bool fuel%lib!definitions_t.next_entry_base_from_index.) (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (= (lib!definitions_t.next_entry_base_from_index.? base! idx! entry_size!) (nClip (Add (%I base!) (nClip (Mul (nClip (Add (%I idx!) 1)) (%I entry_size!)))))) :pattern ((lib!definitions_t.next_entry_base_from_index.? base! idx! entry_size!))))))
(assert (forall ((base! Poly) (idx! Poly) (entry_size! Poly)) (! (=> (and (has_type base! NAT) (has_type idx! NAT) (has_type entry_size! NAT)) (<= 0 (lib!definitions_t.next_entry_base_from_index.? base! idx! entry_size!))) :pattern ((lib!definitions_t.next_entry_base_from_index.? base! idx! entry_size!)))))
(declare-fun req%lib!definitions_t.impl&%8.next_entry_base. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (req%lib!definitions_t.impl&%8.next_entry_base. self! layer! base! idx!) (and (=> %%global_location_label%%34 (lib!definitions_t.impl&%8.inv.? self!)) (=> %%global_location_label%%35 (< (%I layer!) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. self!)))))))) :pattern ((req%lib!definitions_t.impl&%8.next_entry_base. self! layer! base! idx!)))))
(assert (fuel_bool_default fuel%lib!definitions_t.impl&%8.next_entry_base.))
(assert (=> (fuel_bool fuel%lib!definitions_t.impl&%8.next_entry_base.) (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (= (lib!definitions_t.impl&%8.next_entry_base.? self! layer! base! idx!) (lib!definitions_t.next_entry_base_from_index.? base! idx! (I (lib!definitions_t.impl&%8.entry_size.? self! layer!)))) :pattern ((lib!definitions_t.impl&%8.next_entry_base.? self! layer! base! idx!))))))
(assert (forall ((self! Poly) (layer! Poly) (base! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!definitions_t.Arch.) (has_type layer! NAT) (has_type base! NAT) (has_type idx! NAT)) (<= 0 (lib!definitions_t.impl&%8.next_entry_base.? self! layer! base! idx!))) :pattern ((lib!definitions_t.impl&%8.next_entry_base.? self! layer! base! idx!)))))
(declare-fun req%lib!impl_u.l1.impl&%1.next_entry_base. (Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((self! Poly) (idx! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.next_entry_base. self! idx!) (=> %%global_location_label%%36 (lib!impl_u.l1.impl&%1.inv.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.next_entry_base. self! idx!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.next_entry_base.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.next_entry_base.) (forall ((self! Poly) (idx! Poly)) (! (= (lib!impl_u.l1.impl&%1.next_entry_base.? self! idx!) (lib!definitions_t.next_entry_base_from_index.? (I (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. self!))) idx! (I (lib!definitions_t.impl&%8.entry_size.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))) (I (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!))))))) :pattern ((lib!impl_u.l1.impl&%1.next_entry_base.? self! idx!))))))
(assert (forall ((self! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type idx! NAT)) (<= 0 (lib!impl_u.l1.impl&%1.next_entry_base.? self! idx!))) :pattern ((lib!impl_u.l1.impl&%1.next_entry_base.? self! idx!)))))
(declare-fun ens%lib!impl_u.l0.ambient_lemmas1. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!impl_u.l0.ambient_lemmas1. no%param) (and (forall ((s1$ Poly) (s2$ Poly)) (! (=> (and (has_type s1$ (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (has_type s2$ (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.))) (=> (and (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. s1$)) (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. s2$))) (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. s1$ s2$))))) :pattern ((vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. s1$ s2$)))))) (forall ((a$ Int) (b$ Int)) (! (= (Mul a$ b$) (Mul b$ a$)) :pattern ((Mul a$ b$)))) (forall ((m1$ Poly) (m2$ Poly) (n$ Poly)) (! (=> (and (has_type m1$ (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (has_type m2$ (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (has_type n$ NAT)) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$) n$) (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m2$) n$))) (= (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ n$) m2$) (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ m2$) n$)))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ n$) m2$)) :pattern ((vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ m2$) n$)))) (forall ((m1$ Poly) (m2$ Poly) (n$ Poly)) (! (=> (and (has_type m1$ (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (has_type m2$ (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (has_type n$ NAT)) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m2$) n$) (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$) n$))) (= (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m2$ n$)) (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ m2$) n$)))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m2$ n$))) :pattern ((vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ m2$) n$)))) (forall ((m1$ Poly) (m2$ Poly) (n$ Poly) (v$ Poly)) (! (=> (and (has_type m1$ (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (has_type m2$ (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (has_type n$ NAT) (has_type v$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$) n$)) (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m2$) n$))) (= (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ n$ v$) m2$) (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ m2$) n$ v$)))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ n$ v$) m2$)) :pattern ((vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ m2$) n$ v$)))) (forall ((m1$ Poly) (m2$ Poly) (n$ Poly) (v$ Poly)) (! (=> (and (has_type m1$ (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (has_type m2$ (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.)) (has_type n$ NAT) (has_type v$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$) n$)) (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m2$) n$))) (= (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m2$ n$ v$)) (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ m2$) n$ v$)))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m2$ n$ v$))) :pattern ((vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!definitions_t.PageTableEntry. m1$ m2$) n$ v$)))))) :pattern ((ens%lib!impl_u.l0.ambient_lemmas1. no%param)))))
(declare-fun req%lib!impl_u.indexing.lemma_entry_base_from_index. (Int Int Int) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((base! Int) (idx! Int) (entry_size! Int)) (! (= (req%lib!impl_u.indexing.lemma_entry_base_from_index. base! idx! entry_size!) (=> %%global_location_label%%37 (< 0 entry_size!))) :pattern ((req%lib!impl_u.indexing.lemma_entry_base_from_index. base! idx! entry_size!)))))
(declare-fun ens%lib!impl_u.indexing.lemma_entry_base_from_index. (Int Int Int) Bool)
(assert (forall ((base! Int) (idx! Int) (entry_size! Int)) (! (= (ens%lib!impl_u.indexing.lemma_entry_base_from_index. base! idx! entry_size!) (and (forall ((idx2$ Poly)) (! (=> (has_type idx2$ NAT) (=> (< idx! (%I idx2$)) (< (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!)) (lib!definitions_t.entry_base_from_index.? (I base!) idx2$ (I entry_size!))))) :pattern ((lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!)) (lib!definitions_t.entry_base_from_index.? (I base!) idx2$ (I entry_size!))))) (forall ((idx2$ Poly)) (! (=> (has_type idx2$ NAT) (=> (< idx! (%I idx2$)) (<= (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx!) (I entry_size!)) (lib!definitions_t.entry_base_from_index.? (I base!) idx2$ (I entry_size!))))) :pattern ((lib!definitions_t.entry_base_from_index.? (I base!) idx2$ (I entry_size!))))) (= (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx!) (I entry_size!)) (lib!definitions_t.entry_base_from_index.? (I base!) (I (nClip (Add idx! 1))) (I entry_size!))) (= (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx!) (I entry_size!)) (nClip (Add (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!)) entry_size!))) (= (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx!) (I entry_size!)) (nClip (Add entry_size! (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!))))) (forall ((n$ Poly)) (! (=> (has_type n$ NAT) (=> (and (and (< 0 (%I n$)) (lib!definitions_t.aligned.? (I base!) n$)) (lib!definitions_t.aligned.? (I entry_size!) n$)) (lib!definitions_t.aligned.? (I (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!))) n$))) :pattern ((lib!definitions_t.aligned.? (I (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!))) n$)))) (forall ((n$ Poly)) (! (=> (has_type n$ NAT) (=> (and (and (< 0 (%I n$)) (lib!definitions_t.aligned.? (I base!) n$)) (lib!definitions_t.aligned.? (I entry_size!) n$)) (lib!definitions_t.aligned.? (I (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx!) (I entry_size!))) n$))) :pattern ((lib!definitions_t.aligned.? (I (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx!) (I entry_size!))) n$)))) (=> (lib!definitions_t.aligned.? (I base!) (I entry_size!)) (lib!definitions_t.aligned.? (I (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!))) (I entry_size!))) (<= base! (lib!definitions_t.entry_base_from_index.? (I base!) (I idx!) (I entry_size!))))) :pattern ((ens%lib!impl_u.indexing.lemma_entry_base_from_index. base! idx! entry_size!)))))
(assert (fuel_bool_default fuel%lib!impl_u.indexing.nat_mul.))
(assert (=> (fuel_bool fuel%lib!impl_u.indexing.nat_mul.) (forall ((a! Poly) (b! Poly)) (! (= (lib!impl_u.indexing.nat_mul.? a! b!) (nClip (Mul (%I a!) (%I b!)))) :pattern ((lib!impl_u.indexing.nat_mul.? a! b!))))))
(assert (forall ((a! Poly) (b! Poly)) (! (=> (and (has_type a! NAT) (has_type b! NAT)) (<= 0 (lib!impl_u.indexing.nat_mul.? a! b!))) :pattern ((lib!impl_u.indexing.nat_mul.? a! b!)))))
(declare-fun req%lib!extra.mod_mult_zero_implies_mod_zero. (Int Int Int) Bool)
(declare-const %%global_location_label%%38 Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((a! Int) (b! Int) (c! Int)) (! (= (req%lib!extra.mod_mult_zero_implies_mod_zero. a! b! c!) (and (=> %%global_location_label%%38 (lib!definitions_t.aligned.? (I a!) (I (nClip (Mul b! c!))))) (=> %%global_location_label%%39 (> b! 0)) (=> %%global_location_label%%40 (> c! 0)))) :pattern ((req%lib!extra.mod_mult_zero_implies_mod_zero. a! b! c!)))))
(declare-fun ens%lib!extra.mod_mult_zero_implies_mod_zero. (Int Int Int) Bool)
(assert (forall ((a! Int) (b! Int) (c! Int)) (! (= (ens%lib!extra.mod_mult_zero_implies_mod_zero. a! b! c!) (lib!definitions_t.aligned.? (I a!) (I b!))) :pattern ((ens%lib!extra.mod_mult_zero_implies_mod_zero. a! b! c!)))))
(declare-fun req%lib!impl_u.indexing.lemma_entry_base_from_index_support. (Int Int Int) Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((base! Int) (idx! Int) (entry_size! Int)) (! (= (req%lib!impl_u.indexing.lemma_entry_base_from_index_support. base! idx! entry_size!) (=> %%global_location_label%%41 (> entry_size! 0))) :pattern ((req%lib!impl_u.indexing.lemma_entry_base_from_index_support. base! idx! entry_size!)))))
(declare-fun ens%lib!impl_u.indexing.lemma_entry_base_from_index_support. (Int Int Int) Bool)
(assert (forall ((base! Int) (idx! Int) (entry_size! Int)) (! (= (ens%lib!impl_u.indexing.lemma_entry_base_from_index_support. base! idx! entry_size!) (and (forall ((a$ Int) (b$ Int)) (! (=> (and (<= 0 a$) (<= 0 b$)) (= (lib!impl_u.indexing.nat_mul.? (I a$) (I b$)) (nClip (Mul a$ b$)))) :pattern ((nClip (Mul a$ b$))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ NAT) (has_type b$ NAT)) (= (lib!impl_u.indexing.nat_mul.? a$ b$) (lib!impl_u.indexing.nat_mul.? b$ a$))) :pattern ((lib!impl_u.indexing.nat_mul.? a$ b$)) :pattern ((lib!impl_u.indexing.nat_mul.? b$ a$)))) (forall ((a$ Poly)) (! (=> (has_type a$ NAT) (=> (and (lib!definitions_t.aligned.? (I base!) (I (lib!impl_u.indexing.nat_mul.? (I entry_size!) a$))) (> (%I a$) 0)) (lib!definitions_t.aligned.? (I base!) (I entry_size!)))) :pattern ((lib!definitions_t.aligned.? (I base!) (I (lib!impl_u.indexing.nat_mul.? (I entry_size!) a$)))))))) :pattern ((ens%lib!impl_u.indexing.lemma_entry_base_from_index_support. base! idx! entry_size!)))))
(declare-fun req%lib!impl_u.l0.impl&%0.lemma_ranges_disjoint_implies_mappings_disjoint. (lib!impl_u.l0.PageTableContents. lib!impl_u.l0.PageTableContents.) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((self! lib!impl_u.l0.PageTableContents.) (other! lib!impl_u.l0.PageTableContents.)) (! (= (req%lib!impl_u.l0.impl&%0.lemma_ranges_disjoint_implies_mappings_disjoint. self! other!) (and (=> %%global_location_label%%42 (lib!impl_u.l0.impl&%0.inv.? (Poly%lib!impl_u.l0.PageTableContents. self!))) (=> %%global_location_label%%43 (lib!impl_u.l0.impl&%0.inv.? (Poly%lib!impl_u.l0.PageTableContents. other!))) (=> %%global_location_label%%44 (lib!impl_u.l0.impl&%0.ranges_disjoint.? (Poly%lib!impl_u.l0.PageTableContents. self!) (Poly%lib!impl_u.l0.PageTableContents. other!))))) :pattern ((req%lib!impl_u.l0.impl&%0.lemma_ranges_disjoint_implies_mappings_disjoint. self! other!)))))
(declare-fun ens%lib!impl_u.l0.impl&%0.lemma_ranges_disjoint_implies_mappings_disjoint. (lib!impl_u.l0.PageTableContents. lib!impl_u.l0.PageTableContents.) Bool)
(assert (forall ((self! lib!impl_u.l0.PageTableContents.) (other! lib!impl_u.l0.PageTableContents.)) (! (= (ens%lib!impl_u.l0.impl&%0.lemma_ranges_disjoint_implies_mappings_disjoint. self! other!) (lib!impl_u.l0.impl&%0.mappings_disjoint.? (Poly%lib!impl_u.l0.PageTableContents. self!) (Poly%lib!impl_u.l0.PageTableContents. other!))) :pattern ((ens%lib!impl_u.l0.impl&%0.lemma_ranges_disjoint_implies_mappings_disjoint. self! other!)))))
(declare-fun req%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_aux_inv. (lib!impl_u.l1.Directory. Int) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.) (i! Int)) (! (= (req%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_aux_inv. self! i!) (=> %%global_location_label%%45 (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. self!)))) :pattern ((req%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_aux_inv. self! i!)))))
(declare-fun ens%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_aux_inv. (lib!impl_u.l1.Directory. Int) Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.) (i! Int)) (! (= (ens%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_aux_inv. self! i!) (and (lib!impl_u.l0.impl&%0.inv.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp_aux.? (Poly%lib!impl_u.l1.Directory. self!) (I i!)))) (=> (<= i! (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. self!)))))) (= (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp_aux.? (Poly%lib!impl_u.l1.Directory. self!) (I i!))))) (lib!impl_u.l1.impl&%1.entry_base.? (Poly%lib!impl_u.l1.Directory. self!) (I i!)))) (= (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp_aux.? (Poly%lib!impl_u.l1.Directory. self!) (I i!))))) (lib!impl_u.l1.impl&%1.upper_vaddr.? (Poly%lib!impl_u.l1.Directory. self!))) (=> (= i! 0) (= (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp_aux.? (Poly%lib!impl_u.l1.Directory. self!) (I 0))))) (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. self!))))))) :pattern ((ens%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_aux_inv. self! i!)))))
(declare-fun req%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_inv. (lib!impl_u.l1.Directory.) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.)) (! (= (req%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_inv. self!) (=> %%global_location_label%%46 (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. self!)))) :pattern ((req%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_inv. self!)))))
(declare-fun ens%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_inv. (lib!impl_u.l1.Directory.) Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.)) (! (= (ens%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_inv. self!) (and (lib!impl_u.l0.impl&%0.inv.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? (Poly%lib!impl_u.l1.Directory. self!)))) (= (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? (Poly%lib!impl_u.l1.Directory. self!))))) (lib!impl_u.l1.impl&%1.upper_vaddr.? (Poly%lib!impl_u.l1.Directory. self!))) (= (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? (Poly%lib!impl_u.l1.Directory. self!))))) (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. self!)))))) :pattern ((ens%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_inv. self!)))))
(declare-fun ens%lib!impl_u.l1.ambient_lemmas2. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!impl_u.l1.ambient_lemmas2. no%param) (and (forall ((d$ Poly) (i$ Poly)) (! (=> (and (has_type d$ TYPE%lib!impl_u.l1.Directory.) (has_type i$ NAT)) (=> (and (and (lib!impl_u.l1.impl&%1.inv.? d$) (< (%I i$) (lib!impl_u.l1.impl&%1.num_entries.? d$))) (is-lib!impl_u.l1.NodeEntry./Directory_ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. d$))) i$)))) (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. d$))) i$))))))) :pattern ((lib!impl_u.l1.impl&%1.inv.? d$) (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. d$))) i$)))) (forall ((d$ Poly)) (! (=> (has_type d$ TYPE%lib!impl_u.l1.Directory.) (=> (lib!impl_u.l1.impl&%1.inv.? d$) (= (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? d$)))) (lib!impl_u.l1.impl&%1.upper_vaddr.? d$)))) :pattern ((lib!impl_u.l1.impl&%1.interp.? d$)))) (forall ((d$ Poly)) (! (=> (has_type d$ TYPE%lib!impl_u.l1.Directory.) (=> (lib!impl_u.l1.impl&%1.inv.? d$) (= (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? d$)))) (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. d$))))) :pattern ((lib!impl_u.l1.impl&%1.interp.? d$)))))) :pattern ((ens%lib!impl_u.l1.ambient_lemmas2. no%param)))))
(declare-fun req%lib!impl_u.indexing.lemma_index_from_base_and_addr. (Int Int Int Int) Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((base! Int) (addr! Int) (entry_size! Int) (num_entries! Int)) (! (= (req%lib!impl_u.indexing.lemma_index_from_base_and_addr. base! addr! entry_size! num_entries!) (and (=> %%global_location_label%%47 (>= addr! base!)) (=> %%global_location_label%%48 (< addr! (lib!definitions_t.entry_base_from_index.? (I base!) (I num_entries!) (I entry_size!)))) (=> %%global_location_label%%49 (> entry_size! 0)))) :pattern ((req%lib!impl_u.indexing.lemma_index_from_base_and_addr. base! addr! entry_size! num_entries!)))))
(declare-fun ens%lib!impl_u.indexing.lemma_index_from_base_and_addr. (Int Int Int Int) Bool)
(assert (forall ((base! Int) (addr! Int) (entry_size! Int) (num_entries! Int)) (! (= (ens%lib!impl_u.indexing.lemma_index_from_base_and_addr. base! addr! entry_size! num_entries!) (let ((idx$ (lib!definitions_t.index_from_base_and_addr.? (I base!) (I addr!) (I entry_size!)))) (and (and (< idx$ num_entries!) (lib!definitions_t.between.? (I addr!) (I (lib!definitions_t.entry_base_from_index.? (I base!) (I idx$) (I entry_size!))) (I (lib!definitions_t.next_entry_base_from_index.? (I base!) (I idx$) (I entry_size!))))) (=> (and (lib!definitions_t.aligned.? (I base!) (I entry_size!)) (lib!definitions_t.aligned.? (I addr!) (I entry_size!))) (= addr! (lib!definitions_t.entry_base_from_index.? (I base!) (I idx$) (I entry_size!))))))) :pattern ((ens%lib!impl_u.indexing.lemma_index_from_base_and_addr. base! addr! entry_size! num_entries!)))))
(declare-fun req%lib!impl_u.l1.impl&%1.resolve. (Poly Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((self! Poly) (vaddr! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.resolve. self! vaddr!) (and (=> %%global_location_label%%50 (lib!impl_u.l1.impl&%1.inv.? self!)) (=> %%global_location_label%%51 (lib!impl_u.l0.impl&%0.accepted_resolve.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? self!)) vaddr!)) (=> %%global_location_label%%52 (and (lib!impl_u.l1.impl&%1.inv.? self!) (lib!impl_u.l0.impl&%0.accepted_resolve.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? self!)) vaddr!))))) :pattern ((req%lib!impl_u.l1.impl&%1.resolve. self! vaddr!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.resolve.))
(declare-const fuel_nat%lib!impl_u.l1.impl&%1.resolve. Fuel)
(assert (forall ((self! Poly) (vaddr! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l1.impl&%1.rec%resolve.? self! vaddr! fuel%) (lib!impl_u.l1.impl&%1.rec%resolve.? self! vaddr! zero)) :pattern ((lib!impl_u.l1.impl&%1.rec%resolve.? self! vaddr! fuel%)))))
(assert (forall ((self! Poly) (vaddr! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type vaddr! NAT) (and (lib!impl_u.l1.impl&%1.inv.? self!) (lib!impl_u.l0.impl&%0.accepted_resolve.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? self!)) vaddr!))) (= (lib!impl_u.l1.impl&%1.rec%resolve.? self! vaddr! (succ fuel%)) (let ((entry$ (lib!impl_u.l1.impl&%1.index_for_vaddr.? self! vaddr!))) (let ((tmp%%$ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) (I entry$))))) (ite (is-lib!impl_u.l1.NodeEntry./Page_ tmp%%$) (let ((pte$ (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$))))) (let ((offset$ (Sub (%I vaddr!) (lib!impl_u.l1.impl&%1.entry_base.? self! (I entry$))))) (core!result.Result./Ok (Poly%tuple%2. (tuple%2./tuple%2 (I (lib!impl_u.l1.impl&%1.entry_base.? self! (I entry$))) (Poly%lib!definitions_t.PageTableEntry. pte$)))))) (ite (is-lib!impl_u.l1.NodeEntry./Directory_ tmp%%$) (let ((d$ (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$))))) (lib!impl_u.l1.impl&%1.rec%resolve.? (Poly%lib!impl_u.l1.Directory. d$) vaddr! fuel%)) (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0)))))))) :pattern ((lib!impl_u.l1.impl&%1.rec%resolve.? self! vaddr! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.resolve.) (forall ((self! Poly) (vaddr! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type vaddr! NAT) (and (lib!impl_u.l1.impl&%1.inv.? self!) (lib!impl_u.l0.impl&%0.accepted_resolve.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? self!)) vaddr!))) (= (lib!impl_u.l1.impl&%1.resolve.? self! vaddr!) (lib!impl_u.l1.impl&%1.rec%resolve.? self! vaddr! (succ fuel_nat%lib!impl_u.l1.impl&%1.resolve.)))) :pattern ((lib!impl_u.l1.impl&%1.resolve.? self! vaddr!))))))
(assert (forall ((self! Poly) (vaddr! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type vaddr! NAT)) (has_type (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.resolve.? self! vaddr!)) (TYPE%core!result.Result. $ (TYPE%tuple%2. $ NAT $ TYPE%lib!definitions_t.PageTableEntry.) $ TYPE%tuple%0.))) :pattern ((lib!impl_u.l1.impl&%1.resolve.? self! vaddr!)))))
(declare-fun req%lib!impl_u.l1.impl&%1.update. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%53 Bool)
(assert (forall ((self! Poly) (n! Poly) (e! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.update. self! n! e!) (=> %%global_location_label%%53 (< (%I n!) (vstd!seq.Seq.len.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))))))) :pattern ((req%lib!impl_u.l1.impl&%1.update. self! n! e!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.update.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.update.) (forall ((self! Poly) (n! Poly) (e! Poly)) (! (= (lib!impl_u.l1.impl&%1.update.? self! n! e!) (lib!impl_u.l1.Directory./Directory (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (vstd!seq.Seq.update.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) n! e!)) (%I (I (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)))) (%I (I (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. self!)))) (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))) (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. (lib!impl_u.l1.Directory./Directory/flags (%Poly%lib!impl_u.l1.Directory. self!)))))) :pattern ((lib!impl_u.l1.impl&%1.update.? self! n! e!))))))
(assert (forall ((self! Poly) (n! Poly) (e! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type n! NAT) (has_type e! TYPE%lib!impl_u.l1.NodeEntry.)) (has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! n! e!)) TYPE%lib!impl_u.l1.Directory.)) :pattern ((lib!impl_u.l1.impl&%1.update.? self! n! e!)))))
(declare-fun req%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds. self! base! pte!) (=> %%global_location_label%%54 (lib!impl_u.l1.impl&%1.inv.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds. self! base! pte!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds.) (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds.? self! base! pte!) (and (<= (lib!impl_u.l1.Directory./Directory/base_vaddr (%Poly%lib!impl_u.l1.Directory. self!)) (%I base!)) (<= (nClip (Add (%I base!) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!impl_u.l1.impl&%1.upper_vaddr.? self!)))) :pattern ((lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds.? self! base! pte!))))))
(declare-fun req%lib!impl_u.l1.impl&%1.accepted_mapping. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.accepted_mapping. self! base! pte!) (=> %%global_location_label%%55 (lib!impl_u.l1.impl&%1.inv.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.accepted_mapping. self! base! pte!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.accepted_mapping.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.accepted_mapping.) (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (= (lib!impl_u.l1.impl&%1.accepted_mapping.? self! base! pte!) (and (and (and (lib!definitions_t.aligned.? base! (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!))))))) (lib!definitions_t.aligned.? (I (lib!definitions_t.MemRegion./MemRegion/base (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))))) (lib!impl_u.l1.impl&%1.candidate_mapping_in_bounds.? self! base! pte!)) (lib!definitions_t.impl&%8.contains_entry_size_at_index_atleast.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))) (I (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (I (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)))))) :pattern ((lib!impl_u.l1.impl&%1.accepted_mapping.? self! base! pte!))))))
(declare-fun req%lib!impl_u.l1.impl&%1.new_empty_dir. (Poly Poly) Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((self! Poly) (entry! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.new_empty_dir. self! entry!) (and (=> %%global_location_label%%56 (lib!impl_u.l1.impl&%1.inv.? self!)) (=> %%global_location_label%%57 (< (%I entry!) (lib!impl_u.l1.impl&%1.num_entries.? self!))) (=> %%global_location_label%%58 (< (nClip (Add (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)) 1)) (vstd!seq.Seq.len.? $ TYPE%lib!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<lib!definitions_t.ArchLayer.>. (lib!definitions_t.Arch./Arch/layers (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))))))))))) :pattern ((req%lib!impl_u.l1.impl&%1.new_empty_dir. self! entry!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.new_empty_dir.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.new_empty_dir.) (forall ((self! Poly) (entry! Poly)) (! (= (lib!impl_u.l1.impl&%1.new_empty_dir.? self! entry!) (lib!impl_u.l1.Directory./Directory (%Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!definitions_t.new_seq.? $ TYPE%lib!impl_u.l1.NodeEntry. (I (lib!definitions_t.impl&%8.num_entries.? (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!))) (I (nClip (Add (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)) 1))))) (Poly%lib!impl_u.l1.NodeEntry. lib!impl_u.l1.NodeEntry./Empty))) (%I (I (nClip (Add (lib!impl_u.l1.Directory./Directory/layer (%Poly%lib!impl_u.l1.Directory. self!)) 1)))) (%I (I (lib!impl_u.l1.impl&%1.entry_base.? self! entry!))) (%Poly%lib!definitions_t.Arch. (Poly%lib!definitions_t.Arch. (lib!impl_u.l1.Directory./Directory/arch (%Poly%lib!impl_u.l1.Directory. self!)))) (%Poly%lib!definitions_t.Flags. (Poly%lib!definitions_t.Flags. lib!definitions_u.permissive_flags.?)))) :pattern ((lib!impl_u.l1.impl&%1.new_empty_dir.? self! entry!))))))
(assert (forall ((self! Poly) (entry! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type entry! NAT)) (has_type (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.new_empty_dir.? self! entry!)) TYPE%lib!impl_u.l1.Directory.)) :pattern ((lib!impl_u.l1.impl&%1.new_empty_dir.? self! entry!)))))
(declare-fun req%lib!impl_u.l1.impl&%1.lemma_accepted_mapping_implies_interp_accepted_mapping_manual. (lib!impl_u.l1.Directory. Int lib!definitions_t.PageTableEntry.) Bool)
(declare-const %%global_location_label%%59 Bool)
(declare-const %%global_location_label%%60 Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.) (base! Int) (pte! lib!definitions_t.PageTableEntry.)) (! (= (req%lib!impl_u.l1.impl&%1.lemma_accepted_mapping_implies_interp_accepted_mapping_manual. self! base! pte!) (and (=> %%global_location_label%%59 (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. self!))) (=> %%global_location_label%%60 (lib!impl_u.l1.impl&%1.accepted_mapping.? (Poly%lib!impl_u.l1.Directory. self!) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))))) :pattern ((req%lib!impl_u.l1.impl&%1.lemma_accepted_mapping_implies_interp_accepted_mapping_manual. self! base! pte!)))))
(declare-fun ens%lib!impl_u.l1.impl&%1.lemma_accepted_mapping_implies_interp_accepted_mapping_manual. (lib!impl_u.l1.Directory. Int lib!definitions_t.PageTableEntry.) Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.) (base! Int) (pte! lib!definitions_t.PageTableEntry.)) (! (= (ens%lib!impl_u.l1.impl&%1.lemma_accepted_mapping_implies_interp_accepted_mapping_manual. self! base! pte!) (lib!impl_u.l0.impl&%0.accepted_mapping.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? (Poly%lib!impl_u.l1.Directory. self!))) (I base!) (Poly%lib!definitions_t.PageTableEntry. pte!))) :pattern ((ens%lib!impl_u.l1.impl&%1.lemma_accepted_mapping_implies_interp_accepted_mapping_manual. self! base! pte!)))))
(declare-fun ens%lib!impl_u.l1.impl&%1.lemma_accepted_mapping_implies_interp_accepted_mapping_auto. (lib!impl_u.l1.Directory.) Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.)) (! (= (ens%lib!impl_u.l1.impl&%1.lemma_accepted_mapping_implies_interp_accepted_mapping_auto. self!) (forall ((base$ Poly) (pte$ Poly)) (! (=> (and (has_type base$ NAT) (has_type pte$ TYPE%lib!definitions_t.PageTableEntry.)) (=> (and (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. self!)) (lib!impl_u.l1.impl&%1.accepted_mapping.? (Poly%lib!impl_u.l1.Directory. self!) base$ pte$)) (lib!impl_u.l0.impl&%0.accepted_mapping.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? (Poly%lib!impl_u.l1.Directory. self!))) base$ pte$))) :pattern ((lib!impl_u.l1.impl&%1.accepted_mapping.? (Poly%lib!impl_u.l1.Directory. self!) base$ pte$))))) :pattern ((ens%lib!impl_u.l1.impl&%1.lemma_accepted_mapping_implies_interp_accepted_mapping_auto. self!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.map_frame.))
(declare-const fuel_nat%lib!impl_u.l1.impl&%1.map_frame. Fuel)
(assert (forall ((self! Poly) (base! Poly) (pte! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l1.impl&%1.rec%map_frame.? self! base! pte! fuel%) (lib!impl_u.l1.impl&%1.rec%map_frame.? self! base! pte! zero)) :pattern ((lib!impl_u.l1.impl&%1.rec%map_frame.? self! base! pte! fuel%)))))
(assert (forall ((self! Poly) (base! Poly) (pte! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type base! NAT) (has_type pte! TYPE%lib!definitions_t.PageTableEntry.)) (= (lib!impl_u.l1.impl&%1.rec%map_frame.? self! base! pte! (succ fuel%)) (ite (and (lib!impl_u.l1.impl&%1.inv.? self!) (lib!impl_u.l1.impl&%1.accepted_mapping.? self! base! pte!)) (let ((entry$ (lib!impl_u.l1.impl&%1.index_for_vaddr.? self! base!))) (let ((tmp%%$ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) (I entry$))))) (ite (is-lib!impl_u.l1.NodeEntry./Page_ tmp%%$) (let ((p$ (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$))))) (core!result.Result./Err self!)) (ite (is-lib!impl_u.l1.NodeEntry./Directory_ tmp%%$) (let ((d$ (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$))))) (ite (= (lib!impl_u.l1.impl&%1.entry_size.? self!) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (core!result.Result./Err self!) (let ((tmp%%$1 (lib!impl_u.l1.impl&%1.rec%map_frame.? (Poly%lib!impl_u.l1.Directory. d$) base! pte! fuel%))) (ite (is-core!result.Result./Ok_ tmp%%$1) (let ((d$1 (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$1)))))) (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! (I entry$) (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Directory (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. d$1)))))))) (let ((d$2 (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$1)))))) (core!result.Result./Err (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! (I entry$) (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Directory (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. d$2)))))))))))) (ite (= (lib!impl_u.l1.impl&%1.entry_size.? self!) (lib!definitions_t.MemRegion./MemRegion/size (%Poly%lib!definitions_t.MemRegion. (Poly%lib!definitions_t.MemRegion. (lib!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! (I entry$) (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Page (%Poly%lib!definitions_t.PageTableEntry. pte!)))))) (let ((new_dir$ (lib!impl_u.l1.impl&%1.new_empty_dir.? self! (I entry$)))) (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! (I entry$) (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Directory (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.rec%map_frame.? (Poly%lib!impl_u.l1.Directory. new_dir$) base! pte! fuel%)))))))))))))))) (%Poly%core!result.Result. (vstd!pervasive.arbitrary.? $ (TYPE%core!result.Result. $ TYPE%lib!impl_u.l1.Directory. $ TYPE%lib!impl_u.l1.Directory.)))))) :pattern ((lib!impl_u.l1.impl&%1.rec%map_frame.? self! base! pte! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.map_frame.) (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type base! NAT) (has_type pte! TYPE%lib!definitions_t.PageTableEntry.)) (= (lib!impl_u.l1.impl&%1.map_frame.? self! base! pte!) (lib!impl_u.l1.impl&%1.rec%map_frame.? self! base! pte! (succ fuel_nat%lib!impl_u.l1.impl&%1.map_frame.)))) :pattern ((lib!impl_u.l1.impl&%1.map_frame.? self! base! pte!))))))
(assert (forall ((self! Poly) (base! Poly) (pte! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type base! NAT) (has_type pte! TYPE%lib!definitions_t.PageTableEntry.)) (has_type (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.map_frame.? self! base! pte!)) (TYPE%core!result.Result. $ TYPE%lib!impl_u.l1.Directory. $ TYPE%lib!impl_u.l1.Directory.))) :pattern ((lib!impl_u.l1.impl&%1.map_frame.? self! base! pte!)))))
(declare-fun req%lib!impl_u.l1.impl&%1.accepted_unmap. (Poly Poly) Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((self! Poly) (base! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.accepted_unmap. self! base!) (=> %%global_location_label%%61 (lib!impl_u.l1.impl&%1.well_formed.? self!))) :pattern ((req%lib!impl_u.l1.impl&%1.accepted_unmap. self! base!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.accepted_unmap.))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.accepted_unmap.) (forall ((self! Poly) (base! Poly)) (! (= (lib!impl_u.l1.impl&%1.accepted_unmap.? self! base!) (lib!impl_u.l0.impl&%0.accepted_unmap.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp.? self!)) base!)) :pattern ((lib!impl_u.l1.impl&%1.accepted_unmap.? self! base!))))))
(declare-fun req%lib!impl_u.l1.impl&%1.unmap. (Poly Poly) Bool)
(declare-const %%global_location_label%%62 Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((self! Poly) (base! Poly)) (! (= (req%lib!impl_u.l1.impl&%1.unmap. self! base!) (and (=> %%global_location_label%%62 (lib!impl_u.l1.impl&%1.inv.? self!)) (=> %%global_location_label%%63 (lib!impl_u.l1.impl&%1.accepted_unmap.? self! base!)))) :pattern ((req%lib!impl_u.l1.impl&%1.unmap. self! base!)))))
(assert (fuel_bool_default fuel%lib!impl_u.l1.impl&%1.unmap.))
(declare-const fuel_nat%lib!impl_u.l1.impl&%1.unmap. Fuel)
(assert (forall ((self! Poly) (base! Poly) (fuel% Fuel)) (! (= (lib!impl_u.l1.impl&%1.rec%unmap.? self! base! fuel%) (lib!impl_u.l1.impl&%1.rec%unmap.? self! base! zero)) :pattern ((lib!impl_u.l1.impl&%1.rec%unmap.? self! base! fuel%)))))
(assert (forall ((self! Poly) (base! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type base! NAT)) (= (lib!impl_u.l1.impl&%1.rec%unmap.? self! base! (succ fuel%)) (ite (and (lib!impl_u.l1.impl&%1.inv.? self!) (lib!impl_u.l1.impl&%1.accepted_unmap.? self! base!)) (let ((entry$ (lib!impl_u.l1.impl&%1.index_for_vaddr.? self! base!))) (let ((tmp%%$ (%Poly%lib!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? $ TYPE%lib!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<lib!impl_u.l1.NodeEntry.>. (lib!impl_u.l1.Directory./Directory/entries (%Poly%lib!impl_u.l1.Directory. self!))) (I entry$))))) (ite (is-lib!impl_u.l1.NodeEntry./Page_ tmp%%$) (let ((p$ (lib!impl_u.l1.NodeEntry./Page/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$))))) (ite (lib!definitions_t.aligned.? base! (I (lib!impl_u.l1.impl&%1.entry_size.? self!))) (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! (I entry$) (Poly%lib!impl_u.l1.NodeEntry. lib!impl_u.l1.NodeEntry./Empty)))) (core!result.Result./Err self!))) (ite (is-lib!impl_u.l1.NodeEntry./Directory_ tmp%%$) (let ((d$ (lib!impl_u.l1.NodeEntry./Directory/0 (%Poly%lib!impl_u.l1.NodeEntry. (Poly%lib!impl_u.l1.NodeEntry. tmp%%$))))) (let ((tmp%%$1 (lib!impl_u.l1.impl&%1.rec%unmap.? (Poly%lib!impl_u.l1.Directory. d$) base! fuel%))) (ite (is-core!result.Result./Ok_ tmp%%$1) (let ((new_d$ (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$1)))))) (core!result.Result./Ok (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! (I entry$) (Poly%lib!impl_u.l1.NodeEntry. (ite (lib!impl_u.l1.impl&%1.empty.? (Poly%lib!impl_u.l1.Directory. new_d$)) lib!impl_u.l1.NodeEntry./Empty (lib!impl_u.l1.NodeEntry./Directory (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. new_d$))))))))) (let ((new_d$ (%Poly%lib!impl_u.l1.Directory. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%$1)))))) (core!result.Result./Err (Poly%lib!impl_u.l1.Directory. (lib!impl_u.l1.impl&%1.update.? self! (I entry$) (Poly%lib!impl_u.l1.NodeEntry. (lib!impl_u.l1.NodeEntry./Directory (%Poly%lib!impl_u.l1.Directory. (Poly%lib!impl_u.l1.Directory. new_d$))))))))))) (core!result.Result./Err self!))))) (%Poly%core!result.Result. (vstd!pervasive.arbitrary.? $ (TYPE%core!result.Result. $ TYPE%lib!impl_u.l1.Directory. $ TYPE%lib!impl_u.l1.Directory.)))))) :pattern ((lib!impl_u.l1.impl&%1.rec%unmap.? self! base! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!impl_u.l1.impl&%1.unmap.) (forall ((self! Poly) (base! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type base! NAT)) (= (lib!impl_u.l1.impl&%1.unmap.? self! base!) (lib!impl_u.l1.impl&%1.rec%unmap.? self! base! (succ fuel_nat%lib!impl_u.l1.impl&%1.unmap.)))) :pattern ((lib!impl_u.l1.impl&%1.unmap.? self! base!))))))
(assert (forall ((self! Poly) (base! Poly)) (! (=> (and (has_type self! TYPE%lib!impl_u.l1.Directory.) (has_type base! NAT)) (has_type (Poly%core!result.Result. (lib!impl_u.l1.impl&%1.unmap.? self! base!)) (TYPE%core!result.Result. $ TYPE%lib!impl_u.l1.Directory. $ TYPE%lib!impl_u.l1.Directory.))) :pattern ((lib!impl_u.l1.impl&%1.unmap.? self! base!)))))
(assert (fuel_bool_default fuel%lib!extra.result_map.))
(assert (=> (fuel_bool fuel%lib!extra.result_map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (res! Poly) (f! Poly)) (! (= (lib!extra.result_map.? A&. A& B&. B& res! f!) (ite (is-core!result.Result./Ok_ (%Poly%core!result.Result. res!)) (let ((a$ (core!result.Result./Ok/0 (%Poly%core!result.Result. res!)))) (core!result.Result./Ok (%%apply%%0 (%Poly%fun%1. f!) a$))) (let ((a$ (core!result.Result./Err/0 (%Poly%core!result.Result. res!)))) (core!result.Result./Err (%%apply%%0 (%Poly%fun%1. f!) a$))))) :pattern ((lib!extra.result_map.? A&. A& B&. B& res! f!))))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (res! Poly) (f! Poly)) (! (=> (and (has_type res! (TYPE%core!result.Result. A&. A& A&. A&)) (has_type f! (TYPE%fun%1. A&. A& B&. B&))) (has_type (Poly%core!result.Result. (lib!extra.result_map.? A&. A& B&. B& res! f!)) (TYPE%core!result.Result. B&. B& B&. B&))) :pattern ((lib!extra.result_map.? A&. A& B&. B& res! f!)))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&) :pattern ((tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&)))))
(declare-fun ens%lib!definitions_u.lemma_new_seq. (Dcr Type Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (i! Int) (e! Poly)) (! (= (ens%lib!definitions_u.lemma_new_seq. T&. T& i! e!) (and (= (vstd!seq.Seq.len.? T&. T& (lib!definitions_t.new_seq.? T&. T& (I i!) e!)) i!) (forall ((j$ Poly)) (! (=> (has_type j$ NAT) (=> (< (%I j$) i!) (= (vstd!seq.Seq.index.? T&. T& (lib!definitions_t.new_seq.? T&. T& (I i!) e!) j$) e!))) :pattern ((vstd!seq.Seq.index.? T&. T& (lib!definitions_t.new_seq.? T&. T& (I i!) e!) j$)))))) :pattern ((ens%lib!definitions_u.lemma_new_seq. T&. T& i! e!)))))
(declare-fun req%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_of_entry_inv. (lib!impl_u.l1.Directory. Int) Bool)
(declare-const %%global_location_label%%64 Bool)
(declare-const %%global_location_label%%65 Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.) (i! Int)) (! (= (req%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_of_entry_inv. self! i!) (and (=> %%global_location_label%%64 (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. self!))) (=> %%global_location_label%%65 (< i! (lib!impl_u.l1.impl&%1.num_entries.? (Poly%lib!impl_u.l1.Directory. self!)))))) :pattern ((req%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_of_entry_inv. self! i!)))))
(declare-fun ens%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_of_entry_inv. (lib!impl_u.l1.Directory. Int) Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.) (i! Int)) (! (= (ens%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_of_entry_inv. self! i!) (and (lib!impl_u.l0.impl&%0.inv.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp_of_entry.? (Poly%lib!impl_u.l1.Directory. self!) (I i!)))) (= (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp_of_entry.? (Poly%lib!impl_u.l1.Directory. self!) (I i!))))) (lib!impl_u.l1.impl&%1.entry_base.? (Poly%lib!impl_u.l1.Directory. self!) (I i!))) (= (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp_of_entry.? (Poly%lib!impl_u.l1.Directory. self!) (I i!))))) (lib!impl_u.l1.impl&%1.entry_base.? (Poly%lib!impl_u.l1.Directory. self!) (I (nClip (Add i! 1))))))) :pattern ((ens%lib!impl_u.l1.impl&%1.lemma_inv_implies_interp_of_entry_inv. self! i!)))))
(declare-fun req%lib!impl_u.l1.impl&%1.lemma_ranges_disjoint_interp_aux_interp_of_entry. (lib!impl_u.l1.Directory.) Bool)
(declare-const %%global_location_label%%66 Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.)) (! (= (req%lib!impl_u.l1.impl&%1.lemma_ranges_disjoint_interp_aux_interp_of_entry. self!) (=> %%global_location_label%%66 (lib!impl_u.l1.impl&%1.inv.? (Poly%lib!impl_u.l1.Directory. self!)))) :pattern ((req%lib!impl_u.l1.impl&%1.lemma_ranges_disjoint_interp_aux_interp_of_entry. self!)))))
(declare-fun ens%lib!impl_u.l1.impl&%1.lemma_ranges_disjoint_interp_aux_interp_of_entry. (lib!impl_u.l1.Directory.) Bool)
(assert (forall ((self! lib!impl_u.l1.Directory.)) (! (= (ens%lib!impl_u.l1.impl&%1.lemma_ranges_disjoint_interp_aux_interp_of_entry. self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ NAT) (has_type j$ NAT)) (=> (and (< (%I j$) (%I i$)) (< (%I i$) (lib!impl_u.l1.impl&%1.num_entries.? (Poly%lib!impl_u.l1.Directory. self!)))) (lib!impl_u.l0.impl&%0.ranges_disjoint.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp_aux.? (Poly%lib!impl_u.l1.Directory. self!) i$)) (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp_of_entry.? (Poly%lib!impl_u.l1.Directory. self!) j$))))) :pattern ((lib!impl_u.l0.impl&%0.ranges_disjoint.? (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp_aux.? (Poly%lib!impl_u.l1.Directory. self!) i$)) (Poly%lib!impl_u.l0.PageTableContents. (lib!impl_u.l1.impl&%1.interp_of_entry.? (Poly%lib!impl_u.l1.Directory. self!) j$))))))) :pattern ((ens%lib!impl_u.l1.impl&%1.lemma_ranges_disjoint_interp_aux_interp_of_entry. self!)))))
(declare-const self! lib!impl_u.l1.Directory.)
(declare-const i@ Poly)
(declare-const j@ Poly)
(declare-const interp@ lib!impl_u.l0.PageTableContents.)
(declare-const entry_j@ lib!impl_u.l0.PageTableContents.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!impl_u.l1.Directory. self!) TYPE%lib!impl_u.l1.Directory.))
(assert (has_type i@ NAT))
(assert (has_type j@ NAT))
(assert (has_type (Poly%lib!impl_u.l0.PageTableContents. interp@) TYPE%lib!impl_u.l0.PageTableContents.))
(assert (has_type (Poly%lib!impl_u.l0.PageTableContents. entry_j@) TYPE%lib!impl_u.l0.PageTableContents.))
(declare-const %%location_label%%0 Bool)
(assert (not (=> (and (and (and (and (> (lib!impl_u.l1.impl&%1.entry_size.? (Poly%lib!impl_u.l1.Directory. self!)) 0) (< (%I j@) (%I i@))) (= (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. interp@))) (lib!impl_u.l1.impl&%1.entry_base.? (Poly%lib!impl_u.l1.Directory. self!) i@))) (= (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. entry_j@))) (lib!impl_u.l1.impl&%1.entry_base.? (Poly%lib!impl_u.l1.Directory. self!) j@))) (= (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. entry_j@))) (lib!impl_u.l1.impl&%1.entry_base.? (Poly%lib!impl_u.l1.Directory. self!) (I (nClip (Add (%I j@) 1)))))) (=> %%location_label%%0 (and (<= (lib!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. entry_j@))) (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. interp@)))) (> (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. interp@))) (lib!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%lib!impl_u.l0.PageTableContents. (Poly%lib!impl_u.l0.PageTableContents. entry_j@)))))))))
(check-sat)
(exit)
