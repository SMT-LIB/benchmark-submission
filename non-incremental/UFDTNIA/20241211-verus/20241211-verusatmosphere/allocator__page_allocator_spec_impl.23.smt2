(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Atmosphere (https://mars-research.github.io/projects/atmo/) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module allocator::page_allocator_spec_impl'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.is_init. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.skip. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.no_duplicates. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.remove. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.remove_value. FuelId)
(declare-const fuel%vstd!seq_lib.seq_to_set_is_finite. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%1.is_init. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%30.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len. FuelId)
(declare-const fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique. FuelId)
(declare-const fuel%lib!slinkedlist.spec_impl_u.impl&%0.view. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.container_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.wf. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_ptr2page_index. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_index2page_ptr. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_index_2m_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_index_1g_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_ptr_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_index_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_2m. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_1g. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid. FuelId)
(declare-const fuel%lib!define.NUM_PAGES. FuelId)
(declare-const fuel%lib!array.impl&%0.view. FuelId)
(declare-const fuel%lib!array.impl&%0.wf. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.impl&%7.is_init. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.skip. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.no_duplicates. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!seq_lib.impl&%0.remove. fuel%vstd!seq_lib.impl&%0.remove_value. fuel%vstd!seq_lib.seq_to_set_is_finite. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_union_finite. fuel%vstd!set.axiom_set_empty_len. fuel%vstd!set.axiom_set_insert_len. fuel%vstd!set.axiom_set_remove_len. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!simple_pptr.impl&%1.is_init. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%30.view. fuel%vstd!view.impl&%42.view. fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len. fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique. fuel%lib!slinkedlist.spec_impl_u.impl&%0.view. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.container_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.wf. fuel%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild. fuel%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild. fuel%lib!util.page_ptr_util_u.spec_page_ptr2page_index. fuel%lib!util.page_ptr_util_u.spec_page_index2page_ptr. fuel%lib!util.page_ptr_util_u.page_index_2m_valid. fuel%lib!util.page_ptr_util_u.page_index_1g_valid. fuel%lib!util.page_ptr_util_u.page_ptr_valid. fuel%lib!util.page_ptr_util_u.page_index_valid. fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_2m. fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_1g. fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid. fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid. fuel%lib!define.NUM_PAGES. fuel%lib!array.impl&%0.view. fuel%lib!array.impl&%0.wf. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (fuel_bool_default fuel%vstd!seq_lib.seq_to_set_is_finite.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_len.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_len.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<usize./vstd!set.Set<usize.>.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<i32.>. 0)
(declare-sort vstd!seq.Seq<usize.>. 0)
(declare-sort vstd!seq.Seq<lib!allocator.page.Page.>. 0)
(declare-sort vstd!set.Set<usize.>. 0)
(declare-sort vstd!set.Set<tuple%2<usize./usize.>.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (vstd!raw_ptr.MemContents. 0) (lib!slinkedlist.node.Node. 0) (lib!slinkedlist.spec_impl_u.StaticLinkedList. 0) (lib!allocator.page.Page. 0) (lib!allocator.page_allocator_spec_impl.PageAllocator. 0) (lib!define.PageState. 0) (lib!array.Array. 0) (lib!array_vec.ArrayVec. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((vstd!raw_ptr.MemContents./Uninit ) (vstd!raw_ptr.MemContents./Init (vstd!raw_ptr.MemContents./Init/?0 Poly))) ((lib!slinkedlist.node.Node./Node (lib!slinkedlist.node.Node./Node/?value core!option.Option.) (lib!slinkedlist.node.Node./Node/?next Int) (lib!slinkedlist.node.Node./Node/?prev Int))) ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?ar %%Function%%) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?spec_seq Poly) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list vstd!seq.Seq<i32.>.) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_head Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_tail Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_len Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list vstd!seq.Seq<i32.>.) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_head Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_tail Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_len Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?size Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?arr_seq Poly))) ((lib!allocator.page.Page./Page (lib!allocator.page.Page./Page/?addr Int) (lib!allocator.page.Page./Page/?state lib!define.PageState.) (lib!allocator.page.Page./Page/?is_io_page Bool) (lib!allocator.page.Page./Page/?rev_pointer Int) (lib!allocator.page.Page./Page/?ref_count Int) (lib!allocator.page.Page./Page/?owning_container core!option.Option.) (lib!allocator.page.Page./Page/?mappings vstd!set.Set<tuple%2<usize./usize.>.>.) (lib!allocator.page.Page./Page/?io_mappings vstd!set.Set<tuple%2<usize./usize.>.>.))) ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_array lib!array.Array.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?free_pages_4k lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?free_pages_2m lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?free_pages_1g lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?allocated_pages_4k vstd!set.Set<usize.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?allocated_pages_2m vstd!set.Set<usize.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?allocated_pages_1g vstd!set.Set<usize.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?mapped_pages_4k vstd!set.Set<usize.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?mapped_pages_2m vstd!set.Set<usize.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?mapped_pages_1g vstd!set.Set<usize.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_perms_4k Poly) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_perms_2m Poly) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_perms_1g Poly) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?container_map_4k vstd!map.Map<usize./vstd!set.Set<usize.>.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?container_map_2m vstd!map.Map<usize./vstd!set.Set<usize.>.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?container_map_1g vstd!map.Map<usize./vstd!set.Set<usize.>.>.))) ((lib!define.PageState./Unavailable4k ) (lib!define.PageState./Unavailable2m ) (lib!define.PageState./Unavailable1g ) (lib!define.PageState./Pagetable ) (lib!define.PageState./Allocated4k ) (lib!define.PageState./Allocated2m ) (lib!define.PageState./Allocated1g ) (lib!define.PageState./Free4k ) (lib!define.PageState./Free2m ) (lib!define.PageState./Free1g ) (lib!define.PageState./Mapped4k ) (lib!define.PageState./Mapped2m ) (lib!define.PageState./Mapped1g ) (lib!define.PageState./Merged2m ) (lib!define.PageState./Merged1g ) (lib!define.PageState./Io )) ((lib!array.Array./Array (lib!array.Array./Array/?seq Poly) (lib!array.Array./Array/?ar %%Function%%))) ((lib!array_vec.ArrayVec./ArrayVec (lib!array_vec.ArrayVec./ArrayVec/?data lib!array.Array.) (lib!array_vec.ArrayVec./ArrayVec/?len Int))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun vstd!raw_ptr.MemContents./Init/0 (vstd!raw_ptr.MemContents.) Poly)
(declare-fun lib!slinkedlist.node.Node./Node/value (lib!slinkedlist.node.Node.) core!option.Option.)
(declare-fun lib!slinkedlist.node.Node./Node/next (lib!slinkedlist.node.Node.) Int)
(declare-fun lib!slinkedlist.node.Node./Node/prev (lib!slinkedlist.node.Node.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar (lib!slinkedlist.spec_impl_u.StaticLinkedList.) %%Function%%)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Poly)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list (lib!slinkedlist.spec_impl_u.StaticLinkedList.) vstd!seq.Seq<i32.>.)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list (lib!slinkedlist.spec_impl_u.StaticLinkedList.) vstd!seq.Seq<i32.>.)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Poly)
(declare-fun lib!allocator.page.Page./Page/addr (lib!allocator.page.Page.) Int)
(declare-fun lib!allocator.page.Page./Page/state (lib!allocator.page.Page.) lib!define.PageState.)
(declare-fun lib!allocator.page.Page./Page/is_io_page (lib!allocator.page.Page.) Bool)
(declare-fun lib!allocator.page.Page./Page/rev_pointer (lib!allocator.page.Page.) Int)
(declare-fun lib!allocator.page.Page./Page/ref_count (lib!allocator.page.Page.) Int)
(declare-fun lib!allocator.page.Page./Page/owning_container (lib!allocator.page.Page.) core!option.Option.)
(declare-fun lib!allocator.page.Page./Page/mappings (lib!allocator.page.Page.) vstd!set.Set<tuple%2<usize./usize.>.>.)
(declare-fun lib!allocator.page.Page./Page/io_mappings (lib!allocator.page.Page.) vstd!set.Set<tuple%2<usize./usize.>.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (lib!allocator.page_allocator_spec_impl.PageAllocator.) lib!array.Array.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (lib!allocator.page_allocator_spec_impl.PageAllocator.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (lib!allocator.page_allocator_spec_impl.PageAllocator.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (lib!allocator.page_allocator_spec_impl.PageAllocator.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!set.Set<usize.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!set.Set<usize.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!set.Set<usize.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!set.Set<usize.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!set.Set<usize.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!set.Set<usize.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (lib!allocator.page_allocator_spec_impl.PageAllocator.) Poly)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (lib!allocator.page_allocator_spec_impl.PageAllocator.) Poly)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (lib!allocator.page_allocator_spec_impl.PageAllocator.) Poly)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!map.Map<usize./vstd!set.Set<usize.>.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!map.Map<usize./vstd!set.Set<usize.>.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!map.Map<usize./vstd!set.Set<usize.>.>.)
(declare-fun lib!array.Array./Array/seq (lib!array.Array.) Poly)
(declare-fun lib!array.Array./Array/ar (lib!array.Array.) %%Function%%)
(declare-fun lib!array_vec.ArrayVec./ArrayVec/data (lib!array_vec.ArrayVec.) lib!array.Array.)
(declare-fun lib!array_vec.ArrayVec./ArrayVec/len (lib!array_vec.ArrayVec.) Int)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!raw_ptr.MemContents. (Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%vstd!simple_pptr.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%lib!slinkedlist.node.Node. (Dcr Type) Type)
(declare-fun TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Dcr Type Dcr Type) Type)
(declare-const TYPE%lib!allocator.page.Page. Type)
(declare-const TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator. Type)
(declare-const TYPE%lib!define.PageState. Type)
(declare-fun TYPE%lib!array.Array. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%lib!array_vec.ArrayVec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (vstd!map.Map<usize./vstd!set.Set<usize.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (Poly) vstd!map.Map<usize./vstd!set.Set<usize.>.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<i32.>. (vstd!seq.Seq<i32.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<i32.>. (Poly) vstd!seq.Seq<i32.>.)
(declare-fun Poly%vstd!seq.Seq<usize.>. (vstd!seq.Seq<usize.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<usize.>. (Poly) vstd!seq.Seq<usize.>.)
(declare-fun Poly%vstd!seq.Seq<lib!allocator.page.Page.>. (vstd!seq.Seq<lib!allocator.page.Page.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!allocator.page.Page.>. (Poly) vstd!seq.Seq<lib!allocator.page.Page.>.)
(declare-fun Poly%vstd!set.Set<usize.>. (vstd!set.Set<usize.>.) Poly)
(declare-fun %Poly%vstd!set.Set<usize.>. (Poly) vstd!set.Set<usize.>.)
(declare-fun Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (vstd!set.Set<tuple%2<usize./usize.>.>.) Poly)
(declare-fun %Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (Poly) vstd!set.Set<tuple%2<usize./usize.>.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents.) Poly)
(declare-fun %Poly%vstd!raw_ptr.MemContents. (Poly) vstd!raw_ptr.MemContents.)
(declare-fun Poly%lib!slinkedlist.node.Node. (lib!slinkedlist.node.Node.) Poly)
(declare-fun %Poly%lib!slinkedlist.node.Node. (Poly) lib!slinkedlist.node.Node.)
(declare-fun Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Poly)
(declare-fun %Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun Poly%lib!allocator.page.Page. (lib!allocator.page.Page.) Poly)
(declare-fun %Poly%lib!allocator.page.Page. (Poly) lib!allocator.page.Page.)
(declare-fun Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!allocator.page_allocator_spec_impl.PageAllocator.) Poly)
(declare-fun %Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly) lib!allocator.page_allocator_spec_impl.PageAllocator.)
(declare-fun Poly%lib!define.PageState. (lib!define.PageState.) Poly)
(declare-fun %Poly%lib!define.PageState. (Poly) lib!define.PageState.)
(declare-fun Poly%lib!array.Array. (lib!array.Array.) Poly)
(declare-fun %Poly%lib!array.Array. (Poly) lib!array.Array.)
(declare-fun Poly%lib!array_vec.ArrayVec. (lib!array_vec.ArrayVec.) Poly)
(declare-fun %Poly%lib!array_vec.ArrayVec. (Poly) lib!array_vec.ArrayVec.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x vstd!map.Map<usize./vstd!set.Set<usize.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)))) (= x (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (%Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))))))))
(assert (forall ((x vstd!map.Map<usize./vstd!set.Set<usize.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)))) :pattern ((has_type (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<i32.>.)) (! (= x (%Poly%vstd!seq.Seq<i32.>. (Poly%vstd!seq.Seq<i32.>. x))) :pattern ((Poly%vstd!seq.Seq<i32.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (SINT 32))) (= x (Poly%vstd!seq.Seq<i32.>. (%Poly%vstd!seq.Seq<i32.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (SINT 32)))))))
(assert (forall ((x vstd!seq.Seq<i32.>.)) (! (has_type (Poly%vstd!seq.Seq<i32.>. x) (TYPE%vstd!seq.Seq. $ (SINT 32))) :pattern ((has_type (Poly%vstd!seq.Seq<i32.>. x) (TYPE%vstd!seq.Seq. $ (SINT 32)))))))
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (= x (%Poly%vstd!seq.Seq<usize.>. (Poly%vstd!seq.Seq<usize.>. x))) :pattern ((Poly%vstd!seq.Seq<usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ))) (= x (Poly%vstd!seq.Seq<usize.>. (%Poly%vstd!seq.Seq<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ)))))))
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ)))))))
(assert (forall ((x vstd!seq.Seq<lib!allocator.page.Page.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!allocator.page.Page.>. (Poly%vstd!seq.Seq<lib!allocator.page.Page.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!allocator.page.Page.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!allocator.page.Page.)) (= x (Poly%vstd!seq.Seq<lib!allocator.page.Page.>. (%Poly%vstd!seq.Seq<lib!allocator.page.Page.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!allocator.page.Page.))))))
(assert (forall ((x vstd!seq.Seq<lib!allocator.page.Page.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!allocator.page.Page.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!allocator.page.Page.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!allocator.page.Page.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!allocator.page.Page.))))))
(assert (forall ((x vstd!set.Set<usize.>.)) (! (= x (%Poly%vstd!set.Set<usize.>. (Poly%vstd!set.Set<usize.>. x))) :pattern ((Poly%vstd!set.Set<usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (UINT SZ))) (= x (Poly%vstd!set.Set<usize.>. (%Poly%vstd!set.Set<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (UINT SZ)))))))
(assert (forall ((x vstd!set.Set<usize.>.)) (! (has_type (Poly%vstd!set.Set<usize.>. x) (TYPE%vstd!set.Set. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!set.Set<usize.>. x) (TYPE%vstd!set.Set. $ (UINT SZ)))))))
(assert (forall ((x vstd!set.Set<tuple%2<usize./usize.>.>.)) (! (= x (%Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. x))) :pattern ((Poly%vstd!set.Set<tuple%2<usize./usize.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) (= x (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (%Poly%vstd!set.Set<tuple%2<usize./usize.>.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))))))
(assert (forall ((x vstd!set.Set<tuple%2<usize./usize.>.>.)) (! (has_type (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) :pattern ((has_type (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= x (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. x))) :pattern ((Poly%vstd!raw_ptr.MemContents. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (= x (Poly%vstd!raw_ptr.MemContents. (%Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&)) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= (vstd!raw_ptr.MemContents./Init/0 x) (vstd!raw_ptr.MemContents./Init/?0 x)) :pattern ((vstd!raw_ptr.MemContents./Init/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) T&)) :pattern ((vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(define-fun is-vstd!raw_ptr.MemContents./Init_ ((c vstd!raw_ptr.MemContents.)) Bool ((_ is vstd!raw_ptr.MemContents./Init) c))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (=> (is-vstd!raw_ptr.MemContents./Init_ x) (height_lt (height (vstd!raw_ptr.MemContents./Init/0 x)) (height (Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((height (vstd!raw_ptr.MemContents./Init/0 x))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= x (%Poly%lib!slinkedlist.node.Node. (Poly%lib!slinkedlist.node.Node. x))) :pattern ((Poly%lib!slinkedlist.node.Node. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (= x (Poly%lib!slinkedlist.node.Node. (%Poly%lib!slinkedlist.node.Node. x)))) :pattern ((has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! core!option.Option.) (_next! Int) (_prev! Int)) (! (=> (and (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. T&. T&)) (iInv 32 _next!) (iInv 32 _prev!)) (has_type (Poly%lib!slinkedlist.node.Node. (lib!slinkedlist.node.Node./Node _value! _next! _prev!)) (TYPE%lib!slinkedlist.node.Node. T&. T&))) :pattern ((has_type (Poly%lib!slinkedlist.node.Node. (lib!slinkedlist.node.Node./Node _value! _next! _prev!)) (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= (lib!slinkedlist.node.Node./Node/value x) (lib!slinkedlist.node.Node./Node/?value x)) :pattern ((lib!slinkedlist.node.Node./Node/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (has_type (Poly%core!option.Option. (lib!slinkedlist.node.Node./Node/value (%Poly%lib!slinkedlist.node.Node. x))) (TYPE%core!option.Option. T&. T&))) :pattern ((lib!slinkedlist.node.Node./Node/value (%Poly%lib!slinkedlist.node.Node. x)) (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= (lib!slinkedlist.node.Node./Node/next x) (lib!slinkedlist.node.Node./Node/?next x)) :pattern ((lib!slinkedlist.node.Node./Node/next x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (iInv 32 (lib!slinkedlist.node.Node./Node/next (%Poly%lib!slinkedlist.node.Node. x)))) :pattern ((lib!slinkedlist.node.Node./Node/next (%Poly%lib!slinkedlist.node.Node. x)) (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= (lib!slinkedlist.node.Node./Node/prev x) (lib!slinkedlist.node.Node./Node/?prev x)) :pattern ((lib!slinkedlist.node.Node./Node/prev x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (iInv 32 (lib!slinkedlist.node.Node./Node/prev (%Poly%lib!slinkedlist.node.Node. x)))) :pattern ((lib!slinkedlist.node.Node./Node/prev (%Poly%lib!slinkedlist.node.Node. x)) (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(define-fun is-lib!slinkedlist.node.Node./Node_ ((c lib!slinkedlist.node.Node.)) Bool ((_ is lib!slinkedlist.node.Node./Node) c))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (=> (is-lib!slinkedlist.node.Node./Node_ x) (height_lt (height (Poly%core!option.Option. (lib!slinkedlist.node.Node./Node/value x))) (height (Poly%lib!slinkedlist.node.Node. x)))) :pattern ((height (Poly%core!option.Option. (lib!slinkedlist.node.Node./Node/value x)))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= x (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x))) :pattern ((Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (= x (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (_ar! %%Function%%) (_spec_seq! Poly) (_value_list! vstd!seq.Seq<i32.>.) (_value_list_head! Int) (_value_list_tail! Int) (_value_list_len! Int) (_free_list! vstd!seq.Seq<i32.>.) (_free_list_head! Int) (_free_list_tail! Int) (_free_list_len! Int) (_size! Int) (_arr_seq! Poly)) (! (=> (and (has_type (Poly%array%. _ar!) (ARRAY $ (TYPE%lib!slinkedlist.node.Node. T&. T&) N&. N&)) (has_type _spec_seq! (TYPE%vstd!seq.Seq. T&. T&)) (iInv 32 _value_list_head!) (iInv 32 _value_list_tail!) (uInv SZ _value_list_len!) (iInv 32 _free_list_head!) (iInv 32 _free_list_tail!) (uInv SZ _free_list_len!) (uInv SZ _size!) (has_type _arr_seq! (TYPE%vstd!seq.Seq. $ (TYPE%lib!slinkedlist.node.Node. T&. T&)))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList _ar! _spec_seq! _value_list! _value_list_head! _value_list_tail! _value_list_len! _free_list! _free_list_head! _free_list_tail! _free_list_len! _size! _arr_seq!)) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) :pattern ((has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList _ar! _spec_seq! _value_list! _value_list_head! _value_list_tail! _value_list_len! _free_list! _free_list_head! _free_list_tail! _free_list_len! _size! _arr_seq!)) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?ar x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (Poly%array%. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x))) (ARRAY $ (TYPE%lib!slinkedlist.node.Node. T&. T&) N&. N&))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?spec_seq x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list x)))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_head x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_tail x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_len x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list x)))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_head x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_tail x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_len x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?size x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?arr_seq x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (TYPE%vstd!seq.Seq. $ (TYPE%lib!slinkedlist.node.Node. T&. T&)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(define-fun is-lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList_ ((c lib!slinkedlist.spec_impl_u.StaticLinkedList.)) Bool ((_ is lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList) c))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (=> (is-lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList_ x) (height_lt (height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x)) (height (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (=> (is-lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList_ x) (height_lt (height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x)) (height (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x))))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= x (%Poly%lib!allocator.page.Page. (Poly%lib!allocator.page.Page. x))) :pattern ((Poly%lib!allocator.page.Page. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page.Page.) (= x (Poly%lib!allocator.page.Page. (%Poly%lib!allocator.page.Page. x)))) :pattern ((has_type x TYPE%lib!allocator.page.Page.)))))
(assert (forall ((_addr! Int) (_state! lib!define.PageState.) (_is_io_page! Bool) (_rev_pointer! Int) (_ref_count! Int) (_owning_container! core!option.Option.) (_mappings! vstd!set.Set<tuple%2<usize./usize.>.>.) (_io_mappings! vstd!set.Set<tuple%2<usize./usize.>.>.)) (! (=> (and (uInv SZ _addr!) (iInv 32 _rev_pointer!) (uInv SZ _ref_count!) (has_type (Poly%core!option.Option. _owning_container!) (TYPE%core!option.Option. $ (UINT SZ)))) (has_type (Poly%lib!allocator.page.Page. (lib!allocator.page.Page./Page _addr! _state! _is_io_page! _rev_pointer! _ref_count! _owning_container! _mappings! _io_mappings!)) TYPE%lib!allocator.page.Page.)) :pattern ((has_type (Poly%lib!allocator.page.Page. (lib!allocator.page.Page./Page _addr! _state! _is_io_page! _rev_pointer! _ref_count! _owning_container! _mappings! _io_mappings!)) TYPE%lib!allocator.page.Page.)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/addr x) (lib!allocator.page.Page./Page/?addr x)) :pattern ((lib!allocator.page.Page./Page/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page.Page.) (uInv SZ (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. x)))) :pattern ((lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. x)) (has_type x TYPE%lib!allocator.page.Page.)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/state x) (lib!allocator.page.Page./Page/?state x)) :pattern ((lib!allocator.page.Page./Page/state x)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/is_io_page x) (lib!allocator.page.Page./Page/?is_io_page x)) :pattern ((lib!allocator.page.Page./Page/is_io_page x)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/rev_pointer x) (lib!allocator.page.Page./Page/?rev_pointer x)) :pattern ((lib!allocator.page.Page./Page/rev_pointer x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page.Page.) (iInv 32 (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. x)))) :pattern ((lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. x)) (has_type x TYPE%lib!allocator.page.Page.)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/ref_count x) (lib!allocator.page.Page./Page/?ref_count x)) :pattern ((lib!allocator.page.Page./Page/ref_count x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page.Page.) (uInv SZ (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. x)))) :pattern ((lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. x)) (has_type x TYPE%lib!allocator.page.Page.)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/owning_container x) (lib!allocator.page.Page./Page/?owning_container x)) :pattern ((lib!allocator.page.Page./Page/owning_container x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page.Page.) (has_type (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. x)) (has_type x TYPE%lib!allocator.page.Page.)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/mappings x) (lib!allocator.page.Page./Page/?mappings x)) :pattern ((lib!allocator.page.Page./Page/mappings x)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/io_mappings x) (lib!allocator.page.Page./Page/?io_mappings x)) :pattern ((lib!allocator.page.Page./Page/io_mappings x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= x (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x))) :pattern ((Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (= x (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)))) :pattern ((has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((_page_array! lib!array.Array.) (_free_pages_4k! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_free_pages_2m! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_free_pages_1g! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_allocated_pages_4k! vstd!set.Set<usize.>.) (_allocated_pages_2m! vstd!set.Set<usize.>.) (_allocated_pages_1g! vstd!set.Set<usize.>.) (_mapped_pages_4k! vstd!set.Set<usize.>.) (_mapped_pages_2m! vstd!set.Set<usize.>.) (_mapped_pages_1g! vstd!set.Set<usize.>.) (_page_perms_4k! Poly) (_page_perms_2m! Poly) (_page_perms_1g! Poly) (_container_map_4k! vstd!map.Map<usize./vstd!set.Set<usize.>.>.) (_container_map_2m! vstd!map.Map<usize./vstd!set.Set<usize.>.>.) (_container_map_1g! vstd!map.Map<usize./vstd!set.Set<usize.>.>.)) (! (=> (and (has_type (Poly%lib!array.Array. _page_array!) (TYPE%lib!array.Array. $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _free_pages_4k!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 131072))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _free_pages_2m!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 131072))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _free_pages_1g!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 131072))) (has_type _page_perms_4k! (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))))) (has_type _page_perms_2m! (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152))))) (has_type _page_perms_1g! (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824)))))) (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator _page_array! _free_pages_4k! _free_pages_2m! _free_pages_1g! _allocated_pages_4k! _allocated_pages_2m! _allocated_pages_1g! _mapped_pages_4k! _mapped_pages_2m! _mapped_pages_1g! _page_perms_4k! _page_perms_2m! _page_perms_1g! _container_map_4k! _container_map_2m! _container_map_1g!)) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)) :pattern ((has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator _page_array! _free_pages_4k! _free_pages_2m! _free_pages_1g! _allocated_pages_4k! _allocated_pages_2m! _allocated_pages_1g! _mapped_pages_4k! _mapped_pages_2m! _mapped_pages_1g! _page_perms_4k! _page_perms_2m! _page_perms_1g! _container_map_4k! _container_map_2m! _container_map_1g!)) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_array x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x))) (TYPE%lib!array.Array. $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072)))) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?free_pages_4k x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 131072)))) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?free_pages_2m x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 131072)))) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?free_pages_1g x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 131072)))) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?allocated_pages_4k x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?allocated_pages_2m x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?allocated_pages_1g x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?mapped_pages_4k x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?mapped_pages_2m x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?mapped_pages_1g x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_perms_4k x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)))))) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_perms_2m x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152)))))) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_perms_1g x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824)))))) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?container_map_4k x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?container_map_2m x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?container_map_1g x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g x)))))
(assert (forall ((x lib!define.PageState.)) (! (= x (%Poly%lib!define.PageState. (Poly%lib!define.PageState. x))) :pattern ((Poly%lib!define.PageState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.PageState.) (= x (Poly%lib!define.PageState. (%Poly%lib!define.PageState. x)))) :pattern ((has_type x TYPE%lib!define.PageState.)))))
(assert (forall ((x lib!define.PageState.)) (! (has_type (Poly%lib!define.PageState. x) TYPE%lib!define.PageState.) :pattern ((has_type (Poly%lib!define.PageState. x) TYPE%lib!define.PageState.)))))
(assert (forall ((x lib!array.Array.)) (! (= x (%Poly%lib!array.Array. (Poly%lib!array.Array. x))) :pattern ((Poly%lib!array.Array. x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (= x (Poly%lib!array.Array. (%Poly%lib!array.Array. x)))) :pattern ((has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (_seq! Poly) (_ar! %%Function%%)) (! (=> (and (has_type _seq! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (Poly%array%. _ar!) (ARRAY A&. A& N&. N&))) (has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))) :pattern ((has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/seq x) (lib!array.Array./Array/?seq x)) :pattern ((lib!array.Array./Array/seq x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/ar x) (lib!array.Array./Array/?ar x)) :pattern ((lib!array.Array./Array/ar x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (Poly%array%. (lib!array.Array./Array/ar (%Poly%lib!array.Array. x))) (ARRAY A&. A& N&. N&))) :pattern ((lib!array.Array./Array/ar (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(define-fun is-lib!array.Array./Array_ ((c lib!array.Array.)) Bool ((_ is lib!array.Array./Array) c))
(assert (forall ((x lib!array.Array.)) (! (=> (is-lib!array.Array./Array_ x) (height_lt (height (lib!array.Array./Array/seq x)) (height (Poly%lib!array.Array. x)))) :pattern ((height (lib!array.Array./Array/seq x))))))
(assert (forall ((x lib!array_vec.ArrayVec.)) (! (= x (%Poly%lib!array_vec.ArrayVec. (Poly%lib!array_vec.ArrayVec. x))) :pattern ((Poly%lib!array_vec.ArrayVec. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (= x (Poly%lib!array_vec.ArrayVec. (%Poly%lib!array_vec.ArrayVec. x)))) :pattern ((has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (_data! lib!array.Array.) (_len! Int)) (! (=> (and (has_type (Poly%lib!array.Array. _data!) (TYPE%lib!array.Array. T&. T& N&. N&)) (uInv SZ _len!)) (has_type (Poly%lib!array_vec.ArrayVec. (lib!array_vec.ArrayVec./ArrayVec _data! _len!)) (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&))) :pattern ((has_type (Poly%lib!array_vec.ArrayVec. (lib!array_vec.ArrayVec./ArrayVec _data! _len!)) (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&))))))
(assert (forall ((x lib!array_vec.ArrayVec.)) (! (= (lib!array_vec.ArrayVec./ArrayVec/data x) (lib!array_vec.ArrayVec./ArrayVec/?data x)) :pattern ((lib!array_vec.ArrayVec./ArrayVec/data x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (has_type (Poly%lib!array.Array. (lib!array_vec.ArrayVec./ArrayVec/data (%Poly%lib!array_vec.ArrayVec. x))) (TYPE%lib!array.Array. T&. T& N&. N&))) :pattern ((lib!array_vec.ArrayVec./ArrayVec/data (%Poly%lib!array_vec.ArrayVec. x)) (has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&))))))
(assert (forall ((x lib!array_vec.ArrayVec.)) (! (= (lib!array_vec.ArrayVec./ArrayVec/len x) (lib!array_vec.ArrayVec./ArrayVec/?len x)) :pattern ((lib!array_vec.ArrayVec./ArrayVec/len x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (uInv SZ (lib!array_vec.ArrayVec./ArrayVec/len (%Poly%lib!array_vec.ArrayVec. x)))) :pattern ((lib!array_vec.ArrayVec./ArrayVec/len (%Poly%lib!array_vec.ArrayVec. x)) (has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&))))))
(define-fun is-lib!array_vec.ArrayVec./ArrayVec_ ((c lib!array_vec.ArrayVec.)) Bool ((_ is lib!array_vec.ArrayVec./ArrayVec) c))
(assert (forall ((x lib!array_vec.ArrayVec.)) (! (=> (is-lib!array_vec.ArrayVec./ArrayVec_ x) (height_lt (height (Poly%lib!array.Array. (lib!array_vec.ArrayVec./ArrayVec/data x))) (height (Poly%lib!array_vec.ArrayVec. x)))) :pattern ((height (Poly%lib!array.Array. (lib!array_vec.ArrayVec./ArrayVec/data x)))))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ (SINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 32)) (SINT 32)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::index_of_first")
(declare-fun vstd!seq_lib.impl&%0.index_of_first.? (Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::no_duplicates")
(declare-fun vstd!seq_lib.impl&%0.no_duplicates.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_set")
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::subset_of")
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::addr")
(declare-fun vstd!simple_pptr.impl&%1.addr.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::mem_contents")
(declare-fun vstd!simple_pptr.impl&%1.mem_contents.? (Dcr Type Poly) vstd!raw_ptr.MemContents.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::is_init")
(declare-fun vstd!raw_ptr.impl&%7.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::is_init")
(declare-fun vstd!simple_pptr.impl&%1.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::view")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::spec_len")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::unique")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.unique.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::array::Array::wf")
(declare-fun lib!array.impl&%0.wf.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::array::Array::view")
(declare-fun lib!array.impl&%0.view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::define::NUM_PAGES")
(declare-fun lib!define.NUM_PAGES.? () Int)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::wf")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.wf.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_valid")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_resolve")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::skip")
(declare-fun vstd!seq.impl&%0.skip.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_ptr_valid")
(declare-fun lib!util.page_ptr_util_u.page_ptr_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_ptr_2m_valid")
(declare-fun lib!util.page_ptr_util_u.page_ptr_2m_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_ptr_1g_valid")
(declare-fun lib!util.page_ptr_util_u.page_ptr_1g_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_add")
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_index_valid")
(declare-fun lib!util.page_ptr_util_u.page_index_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_index2page_ptr")
(declare-fun lib!util.page_ptr_util_u.spec_page_index2page_ptr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::page_array_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_ptr2page_index")
(declare-fun lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_4k_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_2m_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_1g_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_4k_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_2m_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_1g_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_4k_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_2m_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_1g_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_index_2m_valid")
(declare-fun lib!util.page_ptr_util_u.page_index_2m_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_index_truncate_2m")
(declare-fun lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_index_1g_valid")
(declare-fun lib!util.page_ptr_util_u.page_index_1g_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_index_truncate_1g")
(declare-fun lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::merged_pages_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_index_merge_2m_vaild")
(declare-fun lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_index_merge_1g_vaild")
(declare-fun lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::hugepages_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::perm_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::container_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.container_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_have_reference_counter")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_4k")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_2m")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_1g")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_2m")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_1g")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_4k")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::page_is_mapped")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::page_mappings")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly Poly) vstd!set.Set<tuple%2<usize./usize.>.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::page_io_mappings")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly Poly) vstd!set.Set<tuple%2<usize./usize.>.>.)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::remove")
(declare-fun vstd!seq_lib.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::remove_value")
(declare-fun vstd!seq_lib.impl&%0.remove_value.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_4k")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_2m")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_1g")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::get_container_owned_pages")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%1 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(set-info :comment ";; Function-Specs core::option::impl&%0::unwrap")
(declare-fun req%core!option.impl&%0.unwrap. (Dcr Type core!option.Option.) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.)) (! (= (req%core!option.impl&%0.unwrap. T&. T& option!) (=> %%global_location_label%%2 (is-core!option.Option./Some_ option!))) :pattern ((req%core!option.impl&%0.unwrap. T&. T& option!)))))
(declare-fun ens%core!option.impl&%0.unwrap. (Dcr Type core!option.Option. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (t! Poly)) (! (= (ens%core!option.impl&%0.unwrap. T&. T& option! t!) (and (has_type t! T&) (= t! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!)))))) :pattern ((ens%core!option.impl&%0.unwrap. T&. T& option! t!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%4 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_insert")
(declare-fun ens%vstd!map.impl&%0.tracked_insert. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!) (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.insert.? K&. K& V&. V& pre%self! key! value!)))) :pattern ((ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%6 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_remove")
(declare-fun req%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!) (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& pre%self!) key!))) :pattern ((req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!) (and (has_type v! V&) (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.remove.? K&. K& V&. V& pre%self! key!)) (= v! (vstd!map.impl&%0.index.? K&. K& V&. V& pre%self! key!)))) :pattern ((ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%8 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!))))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_left")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!))))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_right")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!))))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::push_distributes_over_add")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (elt! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type elt! A&)) (= (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!) (vstd!seq.Seq.add.? A&. A& a! (vstd!seq.Seq.push.? A&. A& b! elt!)))) :pattern ((vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!))))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::index_of_first")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type needle! A&)) (has_type (Poly%core!option.Option. (vstd!seq_lib.impl&%0.index_of_first.? A&. A& self! needle!)) (TYPE%core!option.Option. $ INT))) :pattern ((vstd!seq_lib.impl&%0.index_of_first.? A&. A& self! needle!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::no_duplicates")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.no_duplicates.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.no_duplicates.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? A&. A& self!)))) (not (= i$ j$))) (not (= (vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$))))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$))))) :pattern ((vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$))))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!))))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_set")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%1 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%1 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::unique_seq_to_set")
(declare-fun req%vstd!seq_lib.impl&%0.unique_seq_to_set. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq_lib.impl&%0.unique_seq_to_set. A&. A& self!) (=> %%global_location_label%%9 (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!))) :pattern ((req%vstd!seq_lib.impl&%0.unique_seq_to_set. A&. A& self!)))))
(declare-fun ens%vstd!seq_lib.impl&%0.unique_seq_to_set. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (ens%vstd!seq_lib.impl&%0.unique_seq_to_set. A&. A& self!) (= (vstd!seq.Seq.len.? A&. A& self!) (vstd!set.impl&%0.len.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& self!)))) :pattern ((ens%vstd!seq_lib.impl&%0.unique_seq_to_set. A&. A& self!)))))
(set-info :comment ";; Broadcast vstd::seq_lib::seq_to_set_is_finite")
(assert (=> (fuel_bool fuel%vstd!seq_lib.seq_to_set_is_finite.) (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_len.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!))))))
(set-info :comment ";; Function-Specs vstd::set_lib::lemma_len_subset")
(declare-fun req%vstd!set_lib.lemma_len_subset. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set_lib.lemma_len_subset. A&. A& s1! s2!) (and (=> %%global_location_label%%10 (vstd!set.impl&%0.finite.? A&. A& s2!)) (=> %%global_location_label%%11 (vstd!set.impl&%0.subset_of.? A&. A& s1! s2!)))) :pattern ((req%vstd!set_lib.lemma_len_subset. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set_lib.lemma_len_subset. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set_lib.lemma_len_subset. A&. A& s1! s2!) (and (<= (vstd!set.impl&%0.len.? A&. A& s1!) (vstd!set.impl&%0.len.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((ens%vstd!set_lib.lemma_len_subset. A&. A& s1! s2!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::addr")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (uInv SZ (vstd!simple_pptr.impl&%1.addr.? V&. V& self!))) :pattern ((vstd!simple_pptr.impl&%1.addr.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::mem_contents")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)) (TYPE%vstd!raw_ptr.MemContents. V&. V&))) :pattern ((vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::is_init")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.is_init.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.is_init.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.is_init.? T&. T& self!) (is-vstd!raw_ptr.MemContents./Init_ (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.is_init.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::is_init")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%1.is_init.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%1.is_init.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!simple_pptr.impl&%1.is_init.? V&. V& self!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!))) :pattern ((vstd!simple_pptr.impl&%1.is_init.? V&. V& self!))))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::view")
(assert (fuel_bool_default fuel%lib!slinkedlist.spec_impl_u.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!slinkedlist.spec_impl_u.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::spec_len")
(assert (fuel_bool_default fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len.))
(assert (=> (fuel_bool fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!) (uClip SZ (vstd!seq.Seq.len.? T&. T& (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::unique")
(assert (fuel_bool_default fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique.))
(assert (=> (fuel_bool fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!slinkedlist.spec_impl_u.impl&%0.unique.? T&. T& N&. N& self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!))) (and (<= 0 (%I j$)) (< (%I j$) (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!)))) (not (= i$ j$))) (not (= (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) i$) (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) j$))))) :pattern ((vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) i$) (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) j$))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.unique.? T&. T& N&. N& self!))))))
(set-info :comment ";; Function-Axioms lib::array::Array::wf")
(assert (fuel_bool_default fuel%lib!array.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!array.impl&%0.wf.) (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array.impl&%0.wf.? A&. A& N&. N& self!) (= (vstd!seq.Seq.len.? A&. A& (lib!array.Array./Array/seq (%Poly%lib!array.Array. self!))) (const_int N&))) :pattern ((lib!array.impl&%0.wf.? A&. A& N&. N& self!))))))
(set-info :comment ";; Function-Axioms lib::array::Array::view")
(assert (fuel_bool_default fuel%lib!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!array.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array.impl&%0.view.? A&. A& N&. N& self!) (lib!array.Array./Array/seq (%Poly%lib!array.Array. self!))) :pattern ((lib!array.impl&%0.view.? A&. A& N&. N& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (lib!array.impl&%0.view.? A&. A& N&. N& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((lib!array.impl&%0.view.? A&. A& N&. N& self!)))))
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::new")
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%0.new. (Int lib!allocator.page_allocator_spec_impl.PageAllocator.) Bool)
(assert (forall ((no%param Int) (%return! lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%0.new. no%param %return!) (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. %return!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%0.new. no%param %return!)))))
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::init")
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%0.init. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. lib!array_vec.ArrayVec. lib!array_vec.ArrayVec. Int) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (pre%boot_pages! lib!array_vec.ArrayVec.) (boot_pages! lib!array_vec.ArrayVec.) (container_ptr! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%0.init. pre%self! self! pre%boot_pages! boot_pages! container_ptr!) (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (Poly%lib!array_vec.ArrayVec. boot_pages!) (TYPE%lib!array_vec.ArrayVec. $ (TYPE%tuple%2. $ TYPE%lib!define.PageState. $ (UINT SZ)) $ (CONST_INT 131072))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%0.init. pre%self! self! pre%boot_pages! boot_pages! container_ptr!)))))
(set-info :comment ";; Function-Axioms lib::define::NUM_PAGES")
(assert (fuel_bool_default fuel%lib!define.NUM_PAGES.))
(assert (=> (fuel_bool fuel%lib!define.NUM_PAGES.) (= lib!define.NUM_PAGES.? (uClip SZ (Mul 128 1024)))))
(assert (uInv SZ lib!define.NUM_PAGES.?))
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::set_state")
(declare-fun req%lib!allocator.page_allocator_util_t.impl&%0.set_state. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int lib!define.PageState.) Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (index! Int) (state! lib!define.PageState.)) (! (= (req%lib!allocator.page_allocator_util_t.impl&%0.set_state. pre%self! index! state!) (and (=> %%global_location_label%%12 (lib!array.impl&%0.wf.? $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (=> %%global_location_label%%13 (and (<= 0 index!) (< index! lib!define.NUM_PAGES.?))))) :pattern ((req%lib!allocator.page_allocator_util_t.impl&%0.set_state. pre%self! index! state!)))))
(declare-fun ens%lib!allocator.page_allocator_util_t.impl&%0.set_state. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int lib!define.PageState.) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (index! Int) (state! lib!define.PageState.)) (! (= (ens%lib!allocator.page_allocator_util_t.impl&%0.set_state. pre%self! self! index! state!) (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!array.impl&%0.wf.? $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (not (= (%I i$) index!))) (ext_eq false TYPE%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) i$) (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) i$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) i$)) :pattern ((lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) i$)))) :pattern ((lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) i$)))))) (ext_eq false (UINT SZ) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false BOOL (B (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (B (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (SINT 32) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (UINT SZ) (I (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false TYPE%lib!define.PageState. (Poly%lib!define.PageState. (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%lib!define.PageState. state!)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) :pattern ((ens%lib!allocator.page_allocator_util_t.impl&%0.set_state. pre%self! self! index! state!)))))
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::set_rev_pointer")
(declare-fun req%lib!allocator.page_allocator_util_t.impl&%0.set_rev_pointer. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int) Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (index! Int) (rev_pointer! Int)) (! (= (req%lib!allocator.page_allocator_util_t.impl&%0.set_rev_pointer. pre%self! index! rev_pointer!) (and (=> %%global_location_label%%14 (lib!array.impl&%0.wf.? $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (=> %%global_location_label%%15 (and (<= 0 index!) (< index! lib!define.NUM_PAGES.?))))) :pattern ((req%lib!allocator.page_allocator_util_t.impl&%0.set_rev_pointer. pre%self! index! rev_pointer!)))))
(declare-fun ens%lib!allocator.page_allocator_util_t.impl&%0.set_rev_pointer. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (index! Int) (rev_pointer! Int)) (! (= (ens%lib!allocator.page_allocator_util_t.impl&%0.set_rev_pointer. pre%self! self! index! rev_pointer!) (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!array.impl&%0.wf.? $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (not (= (%I i$) index!))) (ext_eq false TYPE%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) i$) (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) i$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) i$)))) (ext_eq false (UINT SZ) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false TYPE%lib!define.PageState. (Poly%lib!define.PageState. (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%lib!define.PageState. (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false BOOL (B (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (B (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (UINT SZ) (I (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (SINT 32) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I rev_pointer!)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) :pattern ((ens%lib!allocator.page_allocator_util_t.impl&%0.set_rev_pointer. pre%self! self! index! rev_pointer!)))))
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::set_ref_count")
(declare-fun req%lib!allocator.page_allocator_util_t.impl&%0.set_ref_count. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (index! Int) (ref_count! Int)) (! (= (req%lib!allocator.page_allocator_util_t.impl&%0.set_ref_count. pre%self! index! ref_count!) (and (=> %%global_location_label%%16 (lib!array.impl&%0.wf.? $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (=> %%global_location_label%%17 (and (<= 0 index!) (< index! lib!define.NUM_PAGES.?))))) :pattern ((req%lib!allocator.page_allocator_util_t.impl&%0.set_ref_count. pre%self! index! ref_count!)))))
(declare-fun ens%lib!allocator.page_allocator_util_t.impl&%0.set_ref_count. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (index! Int) (ref_count! Int)) (! (= (ens%lib!allocator.page_allocator_util_t.impl&%0.set_ref_count. pre%self! self! index! ref_count!) (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!array.impl&%0.wf.? $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (not (= (%I i$) index!))) (ext_eq false TYPE%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) i$) (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) i$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) i$)))) (ext_eq false (UINT SZ) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false TYPE%lib!define.PageState. (Poly%lib!define.PageState. (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%lib!define.PageState. (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false BOOL (B (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (B (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (SINT 32) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (UINT SZ) (I (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I ref_count!)) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) :pattern ((ens%lib!allocator.page_allocator_util_t.impl&%0.set_ref_count. pre%self! self! index! ref_count!)))))
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::set_mapping")
(declare-fun req%lib!allocator.page_allocator_util_t.impl&%0.set_mapping. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int vstd!set.Set<tuple%2<usize./usize.>.>.) Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (index! Int) (mapping! vstd!set.Set<tuple%2<usize./usize.>.>.)) (! (= (req%lib!allocator.page_allocator_util_t.impl&%0.set_mapping. pre%self! index! mapping!) (and (=> %%global_location_label%%18 (lib!array.impl&%0.wf.? $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (=> %%global_location_label%%19 (and (<= 0 index!) (< index! lib!define.NUM_PAGES.?))))) :pattern ((req%lib!allocator.page_allocator_util_t.impl&%0.set_mapping. pre%self! index! mapping!)))))
(declare-fun ens%lib!allocator.page_allocator_util_t.impl&%0.set_mapping. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int vstd!set.Set<tuple%2<usize./usize.>.>.) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (index! Int) (mapping! vstd!set.Set<tuple%2<usize./usize.>.>.)) (! (= (ens%lib!allocator.page_allocator_util_t.impl&%0.set_mapping. pre%self! self! index! mapping!) (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!array.impl&%0.wf.? $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (not (= (%I i$) index!))) (ext_eq false TYPE%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) i$) (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) i$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) i$)))) (ext_eq false (UINT SZ) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false TYPE%lib!define.PageState. (Poly%lib!define.PageState. (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%lib!define.PageState. (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false BOOL (B (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (B (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (SINT 32) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (UINT SZ) (I (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. mapping!)) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) :pattern ((ens%lib!allocator.page_allocator_util_t.impl&%0.set_mapping. pre%self! self! index! mapping!)))))
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::set_io_mapping")
(declare-fun req%lib!allocator.page_allocator_util_t.impl&%0.set_io_mapping. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int vstd!set.Set<tuple%2<usize./usize.>.>.) Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (index! Int) (io_mapping! vstd!set.Set<tuple%2<usize./usize.>.>.)) (! (= (req%lib!allocator.page_allocator_util_t.impl&%0.set_io_mapping. pre%self! index! io_mapping!) (and (=> %%global_location_label%%20 (lib!array.impl&%0.wf.? $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (=> %%global_location_label%%21 (and (<= 0 index!) (< index! lib!define.NUM_PAGES.?))))) :pattern ((req%lib!allocator.page_allocator_util_t.impl&%0.set_io_mapping. pre%self! index! io_mapping!)))))
(declare-fun ens%lib!allocator.page_allocator_util_t.impl&%0.set_io_mapping. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int vstd!set.Set<tuple%2<usize./usize.>.>.) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (index! Int) (io_mapping! vstd!set.Set<tuple%2<usize./usize.>.>.)) (! (= (ens%lib!allocator.page_allocator_util_t.impl&%0.set_io_mapping. pre%self! self! index! io_mapping!) (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!array.impl&%0.wf.? $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (not (= (%I i$) index!))) (ext_eq false TYPE%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) i$) (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) i$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) i$)))) (ext_eq false (UINT SZ) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false TYPE%lib!define.PageState. (Poly%lib!define.PageState. (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%lib!define.PageState. (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false BOOL (B (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (B (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (SINT 32) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (UINT SZ) (I (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. io_mapping!)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) :pattern ((ens%lib!allocator.page_allocator_util_t.impl&%0.set_io_mapping. pre%self! self! index! io_mapping!)))))
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::set_owning_container")
(declare-fun req%lib!allocator.page_allocator_util_t.impl&%0.set_owning_container. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int core!option.Option.) Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (index! Int) (owning_container_op! core!option.Option.)) (! (= (req%lib!allocator.page_allocator_util_t.impl&%0.set_owning_container. pre%self! index! owning_container_op!) (and (=> %%global_location_label%%22 (lib!array.impl&%0.wf.? $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (=> %%global_location_label%%23 (and (<= 0 index!) (< index! lib!define.NUM_PAGES.?))))) :pattern ((req%lib!allocator.page_allocator_util_t.impl&%0.set_owning_container. pre%self! index! owning_container_op!)))))
(declare-fun ens%lib!allocator.page_allocator_util_t.impl&%0.set_owning_container. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int core!option.Option.) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (index! Int) (owning_container_op! core!option.Option.)) (! (= (ens%lib!allocator.page_allocator_util_t.impl&%0.set_owning_container. pre%self! self! index! owning_container_op!) (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!array.impl&%0.wf.? $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (not (= (%I i$) index!))) (ext_eq false TYPE%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) i$) (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) i$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) i$)))) (ext_eq false (UINT SZ) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false TYPE%lib!define.PageState. (Poly%lib!define.PageState. (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%lib!define.PageState. (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false BOOL (B (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (B (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (SINT 32) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (UINT SZ) (I (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (I (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%core!option.Option. owning_container_op!)) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))) (I index!))))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I index!)))))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) :pattern ((ens%lib!allocator.page_allocator_util_t.impl&%0.set_owning_container. pre%self! self! index! owning_container_op!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_resolve")
(declare-fun req%lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (index! Poly)) (! (= (req%lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve. T&. T& N&. N& self! index!) (=> %%global_location_label%%24 (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& self! index!))) :pattern ((req%lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve. T&. T& N&. N& self! index!)))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_resolve")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (index! Poly)) (! (=> (and (has_type self! (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type index! (SINT 32))) (has_type (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& self! index!) T&)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& self! index!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::skip")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.skip.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.skip.) (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (= (vstd!seq.impl&%0.skip.? A&. A& self! n!) (vstd!seq.Seq.subrange.? A&. A& self! n! (I (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type n! INT)) (has_type (vstd!seq.impl&%0.skip.? A&. A& self! n!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_ptr_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_ptr_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_ptr_valid.) (forall ((ptr! Poly)) (! (= (lib!util.page_ptr_util_u.page_ptr_valid.? ptr!) (and (= (uClip SZ (EucMod (%I ptr!) 4096)) 0) (< (uClip SZ (EucDiv (%I ptr!) 4096)) lib!define.NUM_PAGES.?))) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? ptr!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_ptr_2m_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid.) (forall ((ptr! Poly)) (! (= (lib!util.page_ptr_util_u.page_ptr_2m_valid.? ptr!) (and (= (uClip SZ (EucMod (%I ptr!) 2097152)) 0) (< (uClip SZ (EucDiv (%I ptr!) 4096)) lib!define.NUM_PAGES.?))) :pattern ((lib!util.page_ptr_util_u.page_ptr_2m_valid.? ptr!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_ptr_1g_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid.) (forall ((ptr! Poly)) (! (= (lib!util.page_ptr_util_u.page_ptr_1g_valid.? ptr!) (and (= (uClip SZ (EucMod (%I ptr!) 1073741824)) 0) (< (uClip SZ (EucDiv (%I ptr!) 4096)) lib!define.NUM_PAGES.?))) :pattern ((lib!util.page_ptr_util_u.page_ptr_1g_valid.? ptr!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_index_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_index_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_index_valid.) (forall ((index! Poly)) (! (= (lib!util.page_ptr_util_u.page_index_valid.? index!) (and (<= 0 (%I index!)) (< (%I index!) lib!define.NUM_PAGES.?))) :pattern ((lib!util.page_ptr_util_u.page_index_valid.? index!))))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::spec_page_index2page_ptr")
(declare-fun req%lib!util.page_ptr_util_u.spec_page_index2page_ptr. (Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((i! Poly)) (! (= (req%lib!util.page_ptr_util_u.spec_page_index2page_ptr. i!) (=> %%global_location_label%%25 (lib!util.page_ptr_util_u.page_index_valid.? i!))) :pattern ((req%lib!util.page_ptr_util_u.spec_page_index2page_ptr. i!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_index2page_ptr")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_index2page_ptr.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_index2page_ptr.) (forall ((i! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i!) (uClip SZ (Mul (%I i!) 4096))) :pattern ((lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i!))))))
(assert (forall ((i! Poly)) (! (=> (has_type i! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i!))) :pattern ((lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i!)))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::page_array_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf.? self!) (and (and (and (lib!array.impl&%0.wf.? $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$)))) :pattern ((lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))) :pattern ((lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (vstd!set.impl&%0.finite.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) :pattern ((lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (vstd!set.impl&%0.finite.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) :pattern ((lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf.? self!))))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::spec_page_ptr2page_index")
(declare-fun req%lib!util.page_ptr_util_u.spec_page_ptr2page_index. (Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((ptr! Poly)) (! (= (req%lib!util.page_ptr_util_u.spec_page_ptr2page_index. ptr!) (=> %%global_location_label%%26 (lib!util.page_ptr_util_u.page_ptr_valid.? ptr!))) :pattern ((req%lib!util.page_ptr_util_u.spec_page_ptr2page_index. ptr!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_ptr2page_index")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_ptr2page_index.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_ptr2page_index.) (forall ((ptr! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? ptr!) (uClip SZ (uClip SZ (EucDiv (%I ptr!) 4096)))) :pattern ((lib!util.page_ptr_util_u.spec_page_ptr2page_index.? ptr!))))))
(assert (forall ((ptr! Poly)) (! (=> (has_type ptr! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? ptr!))) :pattern ((lib!util.page_ptr_util_u.spec_page_ptr2page_index.? ptr!)))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_4k_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf.? self!) (and (and (and (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Free4k)) (and (and (and (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) false)))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((page_ptr$ Poly)) (! (=> (has_type page_ptr$ (UINT SZ)) (=> (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) page_ptr$) (and (lib!util.page_ptr_util_u.page_ptr_valid.? page_ptr$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$))))) lib!define.PageState./Free4k)))) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? page_ptr$)) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$)))))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_2m_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf.? self!) (and (and (and (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Free2m)) (and (and (and (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) false)))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((page_ptr$ Poly)) (! (=> (has_type page_ptr$ (UINT SZ)) (=> (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) page_ptr$) (and (lib!util.page_ptr_util_u.page_ptr_2m_valid.? page_ptr$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$))))) lib!define.PageState./Free2m)))) :pattern ((lib!util.page_ptr_util_u.page_ptr_2m_valid.? page_ptr$)) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$)))))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_1g_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf.? self!) (and (and (and (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Free1g)) (and (and (and (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) false)))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((page_ptr$ Poly)) (! (=> (has_type page_ptr$ (UINT SZ)) (=> (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) page_ptr$) (and (lib!util.page_ptr_util_u.page_ptr_1g_valid.? page_ptr$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$))))) lib!define.PageState./Free1g)))) :pattern ((lib!util.page_ptr_util_u.page_ptr_1g_valid.? page_ptr$)) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$)))))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_4k_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf.? self!) (and (and (and (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Allocated4k)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) false)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$))))) lib!define.PageState./Allocated4k))) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_2m_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf.? self!) (and (and (and (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_2m_valid.? p$))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_2m_valid.? p$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Allocated2m)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) false)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$))))) lib!define.PageState./Allocated2m))) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_1g_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf.? self!) (and (and (and (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_1g_valid.? p$))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_1g_valid.? p$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Allocated1g)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) false)))) :pattern ((lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))) :pattern ((lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$))))) lib!define.PageState./Allocated1g))) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_4k_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf.? self!) (and (and (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (and (lib!util.page_ptr_util_u.page_ptr_valid.? p$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$))))) lib!define.PageState./Mapped4k)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$)) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped4k)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) :pattern ((lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_2m_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf.? self!) (and (and (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped2m)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) :pattern ((lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (and (lib!util.page_ptr_util_u.page_ptr_2m_valid.? p$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$))))) lib!define.PageState./Mapped2m)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$)) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_1g_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf.? self!) (and (and (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped1g)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) :pattern ((lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (and (lib!util.page_ptr_util_u.page_ptr_1g_valid.? p$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$))))) lib!define.PageState./Mapped1g)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$)) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_index_2m_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_index_2m_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_index_2m_valid.) (forall ((i! Poly)) (! (= (lib!util.page_ptr_util_u.page_index_2m_valid.? i!) (and (= (uClip SZ (EucMod (%I i!) 512)) 0) (and (<= 0 (%I i!)) (< (%I i!) lib!define.NUM_PAGES.?)))) :pattern ((lib!util.page_ptr_util_u.page_index_2m_valid.? i!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_index_truncate_2m")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_2m.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_2m.) (forall ((index! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? index!) (uClip SZ (Mul (uClip SZ (EucDiv (%I index!) 512)) 512))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? index!))))))
(assert (forall ((index! Poly)) (! (=> (has_type index! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? index!))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? index!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_index_1g_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_index_1g_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_index_1g_valid.) (forall ((i! Poly)) (! (= (lib!util.page_ptr_util_u.page_index_1g_valid.? i!) (and (= (uClip SZ (EucMod (%I i!) (uClip SZ (nClip (Mul 512 512))))) 0) (and (<= 0 (%I i!)) (< (%I i!) lib!define.NUM_PAGES.?)))) :pattern ((lib!util.page_ptr_util_u.page_index_1g_valid.? i!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_index_truncate_1g")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_1g.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_1g.) (forall ((index! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? index!) (uClip SZ (Mul (Mul (uClip SZ (EucDiv (uClip SZ (EucDiv (%I index!) 512)) 512)) 512) 512))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? index!))))))
(assert (forall ((index! Poly)) (! (=> (has_type index! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? index!))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? index!)))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::merged_pages_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf.? self!) (and (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Merged2m)) (and (and (= (lib!util.page_ptr_util_u.page_index_2m_valid.? i$) false) (or (or (or (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$))))) lib!define.PageState./Mapped2m) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$))))) lib!define.PageState./Free2m)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$))))) lib!define.PageState./Allocated2m)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$))))) lib!define.PageState./Unavailable2m))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$))))))))) :pattern ((lib!util.page_ptr_util_u.page_index_2m_valid.? i$)) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$)))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Merged1g)) (and (and (= (lib!util.page_ptr_util_u.page_index_1g_valid.? i$) false) (or (or (or (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$))))) lib!define.PageState./Mapped1g) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$))))) lib!define.PageState./Free1g)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$))))) lib!define.PageState./Allocated1g)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$))))) lib!define.PageState./Unavailable1g))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$))))))))) :pattern ((lib!util.page_ptr_util_u.page_index_1g_valid.? i$)) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf.? self!))))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::spec_page_index_merge_2m_vaild")
(declare-fun req%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild. (Poly Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((i! Poly) (j! Poly)) (! (= (req%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild. i! j!) (=> %%global_location_label%%27 (lib!util.page_ptr_util_u.page_index_2m_valid.? i!))) :pattern ((req%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild. i! j!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_index_merge_2m_vaild")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.) (forall ((i! Poly) (j! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? i! j!) (and (< (%I i!) (%I j!)) (< (%I j!) (Add (%I i!) 512)))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? i! j!))))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::spec_page_index_merge_1g_vaild")
(declare-fun req%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild. (Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((i! Poly) (j! Poly)) (! (= (req%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild. i! j!) (=> %%global_location_label%%28 (lib!util.page_ptr_util_u.page_index_1g_valid.? i!))) :pattern ((req%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild. i! j!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_index_merge_1g_vaild")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.) (forall ((i! Poly) (j! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? i! j!) (and (< (%I i!) (%I j!)) (< (%I j!) (Add (%I i!) 262144)))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? i! j!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::hugepages_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf.? self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ (UINT SZ)) (has_type j$ (UINT SZ))) (and (=> (and (and (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (lib!util.page_ptr_util_u.page_index_2m_valid.? i$)) (or (or (or (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped2m) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Free2m)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Allocated2m)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Unavailable2m))) (lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? i$ j$)) (and (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) j$))) lib!define.PageState./Merged2m) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) j$)))))) (=> (and (and (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (lib!util.page_ptr_util_u.page_index_1g_valid.? i$)) (or (or (or (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped1g) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Free1g)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Allocated1g)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Unavailable1g))) (lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? i$ j$)) (and (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) j$))) lib!define.PageState./Merged1g) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) j$)))))))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? i$ j$)) :pattern ((lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? i$ j$))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::perm_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf.? self!) (and (and (and (and (and (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.union.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!seq_lib.impl&%0.to_set.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$))) (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)) (%I p$))))) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.union.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!seq_lib.impl&%0.to_set.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$))) (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)) (%I p$))))) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.union.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!seq_lib.impl&%0.to_set.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$))) (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)) (%I p$))))) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::container_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.container_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.container_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.container_wf.? self!) (and (and (and (and (and (and (and (and (and (and (vstd!set.impl&%0.subset_of.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (vstd!set.impl&%0.subset_of.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (vstd!set.impl&%0.subset_of.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (or (or (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped4k) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped2m)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped1g))) (is-core!option.Option./Some_ (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$) (is-core!option.Option./Some_ (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (is-core!option.Option./Some_ (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (or (or (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped4k) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped2m)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped1g)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$) (is-core!option.Option./Some_ (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped4k)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (I (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$)))))) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped2m)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (I (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$)))))) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped1g)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (I (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$)))))) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((c_ptr$ Poly) (page_ptr$ Poly)) (! (=> (and (has_type c_ptr$ (UINT SZ)) (has_type page_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) c_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) c_ptr$) page_ptr$)) (and (and (lib!util.page_ptr_util_u.page_ptr_valid.? page_ptr$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$))))) lib!define.PageState./Mapped4k)) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$)))))))) c_ptr$)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) c_ptr$) page_ptr$))))) (forall ((c_ptr$ Poly) (page_ptr$ Poly)) (! (=> (and (has_type c_ptr$ (UINT SZ)) (has_type page_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) c_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) c_ptr$) page_ptr$)) (and (and (lib!util.page_ptr_util_u.page_ptr_2m_valid.? page_ptr$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$))))) lib!define.PageState./Mapped2m)) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$)))))))) c_ptr$)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) c_ptr$) page_ptr$))))) (forall ((c_ptr$ Poly) (page_ptr$ Poly)) (! (=> (and (has_type c_ptr$ (UINT SZ)) (has_type page_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) c_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) c_ptr$) page_ptr$)) (and (and (lib!util.page_ptr_util_u.page_ptr_1g_valid.? page_ptr$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$))))) lib!define.PageState./Mapped1g)) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$)))))))) c_ptr$)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) c_ptr$) page_ptr$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.container_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_have_reference_counter")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (and (= (not (= (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) 0)) (or (or (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped4k) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped2m)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped1g))) (= (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (nClip (Add (vstd!set.impl&%0.len.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (vstd!set.impl&%0.len.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))))))) :pattern ((lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))) :pattern ((lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))) :pattern ((lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? self!) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf.? self!) (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.container_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter.? self!))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_4k")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? self!) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_2m")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? self!) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_1g")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? self!) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_2m")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? self!) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_1g")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? self!) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_4k")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? self!) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::page_is_mapped")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.) (forall ((self! Poly) (p! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? self! p!) (or (or (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? self!)) p!) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? self!)) p!)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? self!)) p!))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? self! p!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::page_mappings")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.) (forall ((self! Poly) (p! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? self! p!) (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p!)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? self! p!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::page_io_mappings")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.) (forall ((self! Poly) (p! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? self! p!) (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p!)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? self! p!))))))
(set-info :comment ";; Function-Specs lib::lemma::lemma_u::seq_push_lemma")
(declare-fun ens%lib!lemma.lemma_u.seq_push_lemma. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%lib!lemma.lemma_u.seq_push_lemma. A&. A&) (and (forall ((s$ Poly) (v$ Poly) (x$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type v$ A&) (has_type x$ A&)) (=> (vstd!seq_lib.impl&%0.contains.? A&. A& s$ x$) (and (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) v$) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) x$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) x$)))) (forall ((s$ Poly) (v$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type v$ A&)) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) v$)) :pattern ((vstd!seq.Seq.push.? A&. A& s$ v$)))) (forall ((s$ Poly) (v$ Poly) (x$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type v$ A&) (has_type x$ A&)) (=> (and (not (vstd!seq_lib.impl&%0.contains.? A&. A& s$ x$)) (not (= v$ x$))) (not (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) x$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) x$)))))) :pattern ((ens%lib!lemma.lemma_u.seq_push_lemma. A&. A&)))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::remove")
(declare-fun req%vstd!seq_lib.impl&%0.remove. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!) (=> %%global_location_label%%29 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::remove")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.remove.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.remove.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) (vstd!seq.Seq.subrange.? A&. A& self! (I (Add (%I i!) 1)) (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::remove_value")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.remove_value.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.remove_value.) (forall ((A&. Dcr) (A& Type) (self! Poly) (val! Poly)) (! (= (vstd!seq_lib.impl&%0.remove_value.? A&. A& self! val!) (let ((index$ (vstd!seq_lib.impl&%0.index_of_first.? A&. A& self! val!))) (ite (is-core!option.Option./Some_ index$) (let ((i$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. index$)))))) (vstd!seq_lib.impl&%0.remove.? A&. A& self! (I i$))) self!))) :pattern ((vstd!seq_lib.impl&%0.remove_value.? A&. A& self! val!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (val! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type val! A&)) (has_type (vstd!seq_lib.impl&%0.remove_value.? A&. A& self! val!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.remove_value.? A&. A& self! val!)))))
(set-info :comment ";; Function-Specs lib::lemma::lemma_u::seq_skip_lemma")
(declare-fun ens%lib!lemma.lemma_u.seq_skip_lemma. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%lib!lemma.lemma_u.seq_skip_lemma. A&. A&) (and (forall ((s$ Poly) (v$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type v$ A&)) (=> (and (not (= (vstd!seq.Seq.index.? A&. A& s$ (I 0)) v$)) (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& s$)) (= (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s$ (I 1) (I (vstd!seq.Seq.len.? A&. A& s$))) v$) (vstd!seq_lib.impl&%0.contains.? A&. A& s$ v$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s$ (I 1) (I (vstd!seq.Seq.len.? A&. A& s$))) v$)))) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (=> (> (vstd!seq.Seq.len.? A&. A& s$) 0) (vstd!seq_lib.impl&%0.contains.? A&. A& s$ (vstd!seq.Seq.index.? A&. A& s$ (I 0))))) :pattern ((vstd!seq.Seq.index.? A&. A& s$ (I 0))))) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (=> (> (vstd!seq.Seq.len.? A&. A& s$) 0) (not (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s$ (I 1) (I (vstd!seq.Seq.len.? A&. A& s$))) (vstd!seq.Seq.index.? A&. A& s$ (I 0)))))) :pattern ((vstd!seq.Seq.index.? A&. A& s$ (I 0))))) (forall ((s$ Poly) (v$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type v$ A&)) (=> (and (= (vstd!seq.Seq.index.? A&. A& s$ (I 0)) v$) (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& s$)) (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) (vstd!seq.Seq.subrange.? A&. A& s$ (I 1) (I (vstd!seq.Seq.len.? A&. A& s$))) (vstd!seq_lib.impl&%0.remove_value.? A&. A& s$ v$)))) :pattern ((vstd!seq_lib.impl&%0.remove_value.? A&. A& s$ v$)))) (forall ((s$ Poly) (i$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type i$ INT)) (=> (and (<= 0 (%I i$)) (< (%I i$) (Sub (vstd!seq.Seq.len.? A&. A& s$) 1))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s$ (I 1) (I (vstd!seq.Seq.len.? A&. A& s$))) i$) (vstd!seq.Seq.index.? A&. A& s$ (I (Add (%I i$) 1)))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s$ (I 1) (I (vstd!seq.Seq.len.? A&. A& s$))) i$)))))) :pattern ((ens%lib!lemma.lemma_u.seq_skip_lemma. A&. A&)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::page_index_lemma")
(declare-fun ens%lib!util.page_ptr_util_u.page_index_lemma. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!util.page_ptr_util_u.page_index_lemma. no%param) (and (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ (UINT SZ)) (has_type j$ (UINT SZ))) (=> (and (lib!util.page_ptr_util_u.page_index_2m_valid.? i$) (lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? i$ j$)) (lib!util.page_ptr_util_u.page_index_valid.? j$))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? i$ j$)) :pattern ((lib!util.page_ptr_util_u.page_index_2m_valid.? i$) (lib!util.page_ptr_util_u.page_index_valid.? j$)))) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ (UINT SZ)) (has_type j$ (UINT SZ))) (=> (and (lib!util.page_ptr_util_u.page_index_1g_valid.? i$) (lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? i$ j$)) (lib!util.page_ptr_util_u.page_index_valid.? j$))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? i$ j$)) :pattern ((lib!util.page_ptr_util_u.page_index_2m_valid.? i$) (lib!util.page_ptr_util_u.page_index_valid.? j$)))))) :pattern ((ens%lib!util.page_ptr_util_u.page_index_lemma. no%param)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::page_ptr_page_index_truncate_lemma")
(declare-fun ens%lib!util.page_ptr_util_u.page_ptr_page_index_truncate_lemma. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!util.page_ptr_util_u.page_ptr_page_index_truncate_lemma. no%param) (and (forall ((pi$ Poly) (i$ Poly)) (! (=> (and (has_type pi$ (UINT SZ)) (has_type i$ (UINT SZ))) (= (=> (lib!util.page_ptr_util_u.page_index_1g_valid.? pi$) (and (<= (%I pi$) (%I i$)) (< (%I i$) (Add (%I pi$) 262144)))) (= (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$) (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? pi$)))) :pattern ((lib!util.page_ptr_util_u.page_index_1g_valid.? pi$) (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$)))) (forall ((pi$ Poly) (i$ Poly)) (! (=> (and (has_type pi$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (lib!util.page_ptr_util_u.page_index_1g_valid.? pi$) (and (<= (%I pi$) (%I i$)) (< (%I i$) (Add (%I pi$) 262144)))) (lib!util.page_ptr_util_u.page_index_1g_valid.? (I (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$))))) :pattern ((lib!util.page_ptr_util_u.page_index_1g_valid.? pi$) (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$)))) (forall ((pi$ Poly) (i$ Poly)) (! (=> (and (has_type pi$ (UINT SZ)) (has_type i$ (UINT SZ))) (= (=> (lib!util.page_ptr_util_u.page_index_2m_valid.? pi$) (and (<= (%I pi$) (%I i$)) (< (%I i$) (Add (%I pi$) 512)))) (= (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$) (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? pi$)))) :pattern ((lib!util.page_ptr_util_u.page_index_2m_valid.? pi$) (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$)))) (forall ((pi$ Poly) (i$ Poly)) (! (=> (and (has_type pi$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (lib!util.page_ptr_util_u.page_index_2m_valid.? pi$) (and (<= (%I pi$) (%I i$)) (< (%I i$) (Add (%I pi$) 512)))) (lib!util.page_ptr_util_u.page_index_2m_valid.? (I (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$))))) :pattern ((lib!util.page_ptr_util_u.page_index_2m_valid.? pi$) (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$)))) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ (UINT SZ)) (has_type j$ (UINT SZ))) (=> (not (= (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$) (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? j$))) (not (= i$ j$)))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$) (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? j$)))) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ (UINT SZ)) (has_type j$ (UINT SZ))) (=> (not (= (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$) (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? j$))) (not (= i$ j$)))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$) (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? j$)))))) :pattern ((ens%lib!util.page_ptr_util_u.page_ptr_page_index_truncate_lemma. no%param)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::page_ptr_lemma")
(declare-fun ens%lib!util.page_ptr_util_u.page_ptr_lemma. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!util.page_ptr_util_u.page_ptr_lemma. no%param) (and (forall ((pa$ Poly)) (! (=> (has_type pa$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_ptr_valid.? pa$) (lib!util.page_ptr_util_u.page_index_valid.? (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$))))) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? pa$)) :pattern ((lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$)))) (forall ((pa$ Poly)) (! (=> (has_type pa$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_ptr_valid.? pa$) (= (%I pa$) (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$)))))) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? pa$)) :pattern ((lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$)))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_index_valid.? i$) (= (%I i$) (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$)))))) :pattern ((lib!util.page_ptr_util_u.page_index_valid.? i$)) :pattern ((lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$)))) (forall ((pi$ Poly) (pj$ Poly)) (! (=> (and (has_type pi$ (UINT SZ)) (has_type pj$ (UINT SZ))) (=> (and (and (lib!util.page_ptr_util_u.page_ptr_valid.? pi$) (lib!util.page_ptr_util_u.page_ptr_valid.? pj$)) (not (= pi$ pj$))) (not (= (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pi$) (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pj$))))) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? pi$) (lib!util.page_ptr_util_u.page_ptr_valid.? pj$) (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pi$) (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pj$)))) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ (UINT SZ)) (has_type j$ (UINT SZ))) (=> (and (and (and (< 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (and (< 0 (%I j$)) (< (%I j$) lib!define.NUM_PAGES.?))) (not (= i$ j$))) (not (= (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$) (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? j$))))) :pattern ((lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$) (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? j$)))))) :pattern ((ens%lib!util.page_ptr_util_u.page_ptr_lemma. no%param)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::page_ptr_2m_lemma")
(declare-fun ens%lib!util.page_ptr_util_u.page_ptr_2m_lemma. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!util.page_ptr_util_u.page_ptr_2m_lemma. no%param) (and (forall ((pa$ Poly)) (! (=> (has_type pa$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_ptr_2m_valid.? pa$) (lib!util.page_ptr_util_u.page_ptr_valid.? pa$))) :pattern ((lib!util.page_ptr_util_u.page_ptr_2m_valid.? pa$)) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? pa$)))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_index_2m_valid.? i$) (lib!util.page_ptr_util_u.page_index_valid.? i$))) :pattern ((lib!util.page_ptr_util_u.page_index_2m_valid.? i$)) :pattern ((lib!util.page_ptr_util_u.page_index_valid.? i$)))) (forall ((pa$ Poly)) (! (=> (has_type pa$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_ptr_2m_valid.? pa$) (lib!util.page_ptr_util_u.page_index_2m_valid.? (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$))))) :pattern ((lib!util.page_ptr_util_u.page_ptr_2m_valid.? pa$)) :pattern ((lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$)))))) :pattern ((ens%lib!util.page_ptr_util_u.page_ptr_2m_lemma. no%param)))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::page_ptr_1g_lemma")
(declare-fun ens%lib!util.page_ptr_util_u.page_ptr_1g_lemma. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!util.page_ptr_util_u.page_ptr_1g_lemma. no%param) (and (forall ((pa$ Poly)) (! (=> (has_type pa$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_ptr_1g_valid.? pa$) (lib!util.page_ptr_util_u.page_ptr_valid.? pa$))) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? pa$)) :pattern ((lib!util.page_ptr_util_u.page_ptr_1g_valid.? pa$)))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_index_1g_valid.? i$) (lib!util.page_ptr_util_u.page_index_valid.? i$))) :pattern ((lib!util.page_ptr_util_u.page_index_1g_valid.? i$)) :pattern ((lib!util.page_ptr_util_u.page_index_valid.? i$)))) (forall ((pa$ Poly)) (! (=> (has_type pa$ (UINT SZ)) (=> (lib!util.page_ptr_util_u.page_ptr_1g_valid.? pa$) (lib!util.page_ptr_util_u.page_index_1g_valid.? (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$))))) :pattern ((lib!util.page_ptr_util_u.page_ptr_1g_valid.? pa$)) :pattern ((lib!util.page_ptr_util_u.spec_page_ptr2page_index.? pa$)))))) :pattern ((ens%lib!util.page_ptr_util_u.page_ptr_1g_lemma. no%param)))))
(set-info :comment ";; Function-Specs lib::array::Array::get")
(declare-fun req%lib!array.impl&%0.get. (Dcr Type Dcr Type lib!array.Array. Int) Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! lib!array.Array.) (i! Int)) (! (= (req%lib!array.impl&%0.get. A&. A& N&. N& self! i!) (and (=> %%global_location_label%%30 (and (<= 0 i!) (< i! (const_int N&)))) (=> %%global_location_label%%31 (lib!array.impl&%0.wf.? A&. A& N&. N& (Poly%lib!array.Array. self!))))) :pattern ((req%lib!array.impl&%0.get. A&. A& N&. N& self! i!)))))
(declare-fun ens%lib!array.impl&%0.get. (Dcr Type Dcr Type lib!array.Array. Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! lib!array.Array.) (i! Int) (out! Poly)) (! (= (ens%lib!array.impl&%0.get. A&. A& N&. N& self! i! out!) (and (has_type out! A&) (= out! (vstd!seq.Seq.index.? A&. A& (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. self!))) (I i!))))) :pattern ((ens%lib!array.impl&%0.get. A&. A& N&. N& self! i! out!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%30::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%30.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%30.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_4k")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!seq_lib.impl&%0.to_set.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_2m")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!seq_lib.impl&%0.to_set.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_1g")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!seq_lib.impl&%0.to_set.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? self!))))))
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::get_container_owned_pages")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages. (Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((self! Poly) (c_ptr! Poly)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages. self! c_ptr!) (=> %%global_location_label%%32 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) c_ptr!))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages. self! c_ptr!)))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::get_container_owned_pages")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.) (forall ((self! Poly) (c_ptr! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? self! c_ptr!) (%Poly%vstd!set.Set<usize.>. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) c_ptr!))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? self! c_ptr!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Function-Specs lib::slinkedlist::spec_impl_u::StaticLinkedList::wf_to_no_duplicates")
(declare-fun req%lib!slinkedlist.spec_impl_u.impl&%1.wf_to_no_duplicates. (Dcr Type Dcr Type lib!slinkedlist.spec_impl_u.StaticLinkedList.) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (req%lib!slinkedlist.spec_impl_u.impl&%1.wf_to_no_duplicates. T&. T& N&. N& self!) (=> %%global_location_label%%33 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)))) :pattern ((req%lib!slinkedlist.spec_impl_u.impl&%1.wf_to_no_duplicates. T&. T& N&. N& self!)))))
(declare-fun ens%lib!slinkedlist.spec_impl_u.impl&%1.wf_to_no_duplicates. (Dcr Type Dcr Type lib!slinkedlist.spec_impl_u.StaticLinkedList.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (ens%lib!slinkedlist.spec_impl_u.impl&%1.wf_to_no_duplicates. T&. T& N&. N& self!) (vstd!seq_lib.impl&%0.no_duplicates.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!))))) :pattern ((ens%lib!slinkedlist.spec_impl_u.impl&%1.wf_to_no_duplicates. T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Specs lib::slinkedlist::spec_impl_u::StaticLinkedList::push")
(declare-fun req%lib!slinkedlist.spec_impl_u.impl&%2.push. (Dcr Type Dcr Type lib!slinkedlist.spec_impl_u.StaticLinkedList. Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (new_value! Poly)) (! (= (req%lib!slinkedlist.spec_impl_u.impl&%2.push. T&. T& N&. N& pre%self! new_value!) (and (=> %%global_location_label%%34 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!))) (=> %%global_location_label%%35 (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!)) (const_int N&))) (=> %%global_location_label%%36 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!))) (=> %%global_location_label%%37 (= (vstd!seq_lib.impl&%0.contains.? T&. T& (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!)) new_value!) false)) (=> %%global_location_label%%38 (> (const_int N&) 2)))) :pattern ((req%lib!slinkedlist.spec_impl_u.impl&%2.push. T&. T& N&. N& pre%self! new_value!)))))
(declare-fun ens%lib!slinkedlist.spec_impl_u.impl&%2.push. (Dcr Type Dcr Type lib!slinkedlist.spec_impl_u.StaticLinkedList. lib!slinkedlist.spec_impl_u.StaticLinkedList. Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (self! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (new_value! Poly) (free_node_index! Int)) (! (= (ens%lib!slinkedlist.spec_impl_u.impl&%2.push. T&. T& N&. N& pre%self! self! new_value! free_node_index!) (and (iInv 32 free_node_index!) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) (vstd!seq.Seq.push.? T&. T& (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!)) new_value!)) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) (Add (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!)) 1)) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$) (not (= (%I index$) free_node_index!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) (I free_node_index!)) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) (I free_node_index!)) new_value!) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)))) :pattern ((ens%lib!slinkedlist.spec_impl_u.impl&%2.push. T&. T& N&. N& pre%self! self! new_value! free_node_index!)))))
(set-info :comment ";; Function-Specs lib::slinkedlist::spec_impl_u::StaticLinkedList::pop")
(declare-fun req%lib!slinkedlist.spec_impl_u.impl&%2.pop. (Dcr Type Dcr Type lib!slinkedlist.spec_impl_u.StaticLinkedList.) Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (req%lib!slinkedlist.spec_impl_u.impl&%2.pop. T&. T& N&. N& pre%self!) (and (=> %%global_location_label%%39 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!))) (=> %%global_location_label%%40 (> (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!)) 0)) (=> %%global_location_label%%41 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!))) (=> %%global_location_label%%42 (> (const_int N&) 2)))) :pattern ((req%lib!slinkedlist.spec_impl_u.impl&%2.pop. T&. T& N&. N& pre%self!)))))
(declare-fun ens%lib!slinkedlist.spec_impl_u.impl&%2.pop. (Dcr Type Dcr Type lib!slinkedlist.spec_impl_u.StaticLinkedList. lib!slinkedlist.spec_impl_u.StaticLinkedList. tuple%2.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (self! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (ret! tuple%2.)) (! (= (ens%lib!slinkedlist.spec_impl_u.impl&%2.pop. T&. T& N&. N& pre%self! self! ret!) (and (has_type (Poly%tuple%2. ret!) (TYPE%tuple%2. T&. T& $ (SINT 32))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) (Sub (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!)) 1)) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) (vstd!seq.Seq.subrange.? T&. T& (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!)) (I 1) (I (vstd!seq.Seq.len.? T&. T& (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!)))))) (= (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))) (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!)) (I 0))) (= (vstd!seq.Seq.index.? $ (SINT 32) (Poly%vstd!seq.Seq<i32.>. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!)))) (I 0)) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$) (not (= index$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$) (not (= index$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$) (not (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. pre%self!) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!) index$)))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)))) :pattern ((ens%lib!slinkedlist.spec_impl_u.impl&%2.pop. T&. T& N&. N& pre%self! self! ret!)))))
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::pages_with_mappings_are_mapped")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%1.pages_with_mappings_are_mapped. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int) Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (page_ptr! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%1.pages_with_mappings_are_mapped. self! page_ptr!) (and (=> %%global_location_label%%43 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (=> %%global_location_label%%44 (lib!util.page_ptr_util_u.page_ptr_valid.? (I page_ptr!))) (=> %%global_location_label%%45 (> (vstd!set.impl&%0.len.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I page_ptr!)))) 0)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%1.pages_with_mappings_are_mapped. self! page_ptr!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%1.pages_with_mappings_are_mapped. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int) Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (page_ptr! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%1.pages_with_mappings_are_mapped. self! page_ptr!) (= (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I page_ptr!)) true)) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%1.pages_with_mappings_are_mapped. self! page_ptr!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::pages_with_mappings_are_mapped")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:909:9: 909:77 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_page_are_not_allocated")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%1.mapped_page_are_not_allocated. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int) Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (page_ptr! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%1.mapped_page_are_not_allocated. self! page_ptr!) (and (=> %%global_location_label%%46 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (=> %%global_location_label%%47 (lib!util.page_ptr_util_u.page_ptr_valid.? (I page_ptr!))) (=> %%global_location_label%%48 (= (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I page_ptr!)) true)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%1.mapped_page_are_not_allocated. self! page_ptr!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%1.mapped_page_are_not_allocated. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int) Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (page_ptr! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%1.mapped_page_are_not_allocated. self! page_ptr!) (and (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I page_ptr!)) false) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I page_ptr!)) false) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I page_ptr!)) false))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%1.mapped_page_are_not_allocated. self! page_ptr!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_page_are_not_allocated")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:924:9: 924:76 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_page_imply_page_ptr_valid")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%1.mapped_page_imply_page_ptr_valid. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int) Bool)
(declare-const %%global_location_label%%49 Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (page_ptr! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%1.mapped_page_imply_page_ptr_valid. self! page_ptr!) (and (=> %%global_location_label%%49 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (=> %%global_location_label%%50 (= (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I page_ptr!)) true)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%1.mapped_page_imply_page_ptr_valid. self! page_ptr!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%1.mapped_page_imply_page_ptr_valid. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int) Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (page_ptr! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%1.mapped_page_imply_page_ptr_valid. self! page_ptr!) (lib!util.page_ptr_util_u.page_ptr_valid.? (I page_ptr!))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%1.mapped_page_imply_page_ptr_valid. self! page_ptr!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_page_imply_page_ptr_valid")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:935:9: 935:79 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_are_not_mapped")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%1.free_pages_are_not_mapped. (lib!allocator.page_allocator_spec_impl.PageAllocator.) Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%1.free_pages_are_not_mapped. self!) (=> %%global_location_label%%51 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%1.free_pages_are_not_mapped. self!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%1.free_pages_are_not_mapped. (lib!allocator.page_allocator_spec_impl.PageAllocator.) Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%1.free_pages_are_not_mapped. self!) (forall ((page_ptr$ Poly)) (! (=> (has_type page_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) page_ptr$) (= (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) page_ptr$) false))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) page_ptr$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) page_ptr$))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%1.free_pages_are_not_mapped. self!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_are_not_mapped")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:943:9: 943:54 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::len_lemma_mapped_4k")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_mapped_4k. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int) Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (ptr! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_mapped_4k. self! ptr!) (=> %%global_location_label%%52 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_mapped_4k. self! ptr!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_mapped_4k. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int) Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (ptr! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_mapped_4k. self! ptr!) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I ptr!)) (< (vstd!set.impl&%0.len.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) lib!define.NUM_PAGES.?))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_mapped_4k. self! ptr!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::len_lemma_mapped_4k")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1006:9: 1006:61 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::len_lemma_allocated_4k")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_allocated_4k. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int) Bool)
(declare-const %%global_location_label%%53 Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (ptr! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_allocated_4k. self! ptr!) (=> %%global_location_label%%53 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_allocated_4k. self! ptr!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_allocated_4k. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int) Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (ptr! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_allocated_4k. self! ptr!) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I ptr!)) (< (vstd!set.impl&%0.len.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) lib!define.NUM_PAGES.?))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_allocated_4k. self! ptr!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::len_lemma_allocated_4k")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1040:9: 1040:64 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::len_lemma_allocated_2m")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_allocated_2m. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int) Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (ptr! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_allocated_2m. self! ptr!) (=> %%global_location_label%%54 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_allocated_2m. self! ptr!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_allocated_2m. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int) Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (ptr! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_allocated_2m. self! ptr!) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I ptr!)) (< (vstd!set.impl&%0.len.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) lib!define.NUM_PAGES.?))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_allocated_2m. self! ptr!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::len_lemma_allocated_2m")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1074:13: 1074:68 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::len_lemma_mapped_2m")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_mapped_2m. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int) Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (ptr! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_mapped_2m. self! ptr!) (=> %%global_location_label%%55 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_mapped_2m. self! ptr!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_mapped_2m. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int) Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (ptr! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_mapped_2m. self! ptr!) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I ptr!)) (< (vstd!set.impl&%0.len.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) lib!define.NUM_PAGES.?))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_mapped_2m. self! ptr!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::len_lemma_mapped_2m")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1108:9: 1108:61 (#0)")
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::page_ptr2page_index")
(declare-fun req%lib!util.page_ptr_util_u.page_ptr2page_index. (Int) Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((ptr! Int)) (! (= (req%lib!util.page_ptr_util_u.page_ptr2page_index. ptr!) (=> %%global_location_label%%56 (= (uClip SZ (EucMod ptr! 4096)) 0))) :pattern ((req%lib!util.page_ptr_util_u.page_ptr2page_index. ptr!)))))
(declare-fun ens%lib!util.page_ptr_util_u.page_ptr2page_index. (Int Int) Bool)
(assert (forall ((ptr! Int) (ret! Int)) (! (= (ens%lib!util.page_ptr_util_u.page_ptr2page_index. ptr! ret!) (and (uInv SZ ret!) (= ret! (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I ptr!))))) :pattern ((ens%lib!util.page_ptr_util_u.page_ptr2page_index. ptr! ret!)))))
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::get_page_reference_counter")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%2.get_page_reference_counter. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int) Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (page_ptr! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%2.get_page_reference_counter. self! page_ptr!) (and (=> %%global_location_label%%57 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (=> %%global_location_label%%58 (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I page_ptr!))))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%2.get_page_reference_counter. self! page_ptr!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%2.get_page_reference_counter. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int) Bool)
(assert (forall ((self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (page_ptr! Int) (ret! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%2.get_page_reference_counter. self! page_ptr! ret!) (and (uInv SZ ret!) (= ret! (nClip (Add (vstd!set.impl&%0.len.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I page_ptr!)))) (vstd!set.impl&%0.len.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I page_ptr!))))))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%2.get_page_reference_counter. self! page_ptr! ret!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::get_page_reference_counter")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1144:9: 1144:81 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::alloc_page_2m")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_2m. (lib!allocator.page_allocator_spec_impl.PageAllocator.) Bool)
(declare-const %%global_location_label%%59 Bool)
(declare-const %%global_location_label%%60 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_2m. pre%self!) (and (=> %%global_location_label%%59 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (=> %%global_location_label%%60 (> (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) 0)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_2m. pre%self!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_2m. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. tuple%2.) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (ret! tuple%2.)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_2m. pre%self! self! ret!) (and (has_type (Poly%tuple%2. ret!) (TYPE%tuple%2. $ (UINT SZ) (TRACKED $) (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152))))) (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.remove.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (and (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))) (= (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152)) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152)) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_2m. pre%self! self! ret!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::alloc_page_2m")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1154:9: 1155:51 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::free_page_2m")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%2.free_page_2m. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int Poly) Bool)
(declare-const %%global_location_label%%61 Bool)
(declare-const %%global_location_label%%62 Bool)
(declare-const %%global_location_label%%63 Bool)
(declare-const %%global_location_label%%64 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (target_perm! Poly)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%2.free_page_2m. pre%self! target_ptr! target_perm!) (and (=> %%global_location_label%%61 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (=> %%global_location_label%%62 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I target_ptr!))) (=> %%global_location_label%%63 (= target_ptr! (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152)) target_perm!))) (=> %%global_location_label%%64 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152)) target_perm!))))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%2.free_page_2m. pre%self! target_ptr! target_perm!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%2.free_page_2m. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int Poly) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (target_perm! Poly)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%2.free_page_2m. pre%self! self! target_ptr! target_perm!) (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I target_ptr!))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.remove.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I target_ptr!))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (and (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%2.free_page_2m. pre%self! self! target_ptr! target_perm!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::free_page_2m")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1233:9: 1233:102 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::alloc_page_4k")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_4k. (lib!allocator.page_allocator_spec_impl.PageAllocator.) Bool)
(declare-const %%global_location_label%%65 Bool)
(declare-const %%global_location_label%%66 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_4k. pre%self!) (and (=> %%global_location_label%%65 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (=> %%global_location_label%%66 (> (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) 0)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_4k. pre%self!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_4k. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. tuple%2.) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (ret! tuple%2.)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_4k. pre%self! self! ret!) (and (has_type (Poly%tuple%2. ret!) (TYPE%tuple%2. $ (UINT SZ) (TRACKED $) (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))))) (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.remove.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (and (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) false) (forall ((c$ Poly)) (! (=> (has_type c$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) c$) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) c$)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) c$))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) c$)))) (lib!util.page_ptr_util_u.page_ptr_valid.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (= (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (Sub (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) 1)))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_4k. pre%self! self! ret!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::alloc_page_4k")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1296:9: 1297:51 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::alloc_page_4k_for_new_container")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_4k_for_new_container. (lib!allocator.page_allocator_spec_impl.PageAllocator.) Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_4k_for_new_container. pre%self!) (and (=> %%global_location_label%%67 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (=> %%global_location_label%%68 (> (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) 0)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_4k_for_new_container. pre%self!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_4k_for_new_container. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. tuple%2.) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (ret! tuple%2.)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_4k_for_new_container. pre%self! self! ret!) (and (has_type (Poly%tuple%2. ret!) (TYPE%tuple%2. $ (UINT SZ) (TRACKED $) (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))))) (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.remove.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (vstd!map.impl&%0.insert.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (and (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) false) (forall ((c$ Poly)) (! (=> (has_type c$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) c$) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) c$)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) c$))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) c$)))) (lib!util.page_ptr_util_u.page_ptr_valid.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (= (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (Sub (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) 1)) (= (lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.empty.? $ (UINT SZ)))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_page_4k_for_new_container. pre%self! self! ret!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::alloc_page_4k_for_new_container")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1370:9: 1371:51 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::free_page_4k")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%2.free_page_4k. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int Poly) Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (target_perm! Poly)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%2.free_page_4k. pre%self! target_ptr! target_perm!) (and (=> %%global_location_label%%69 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (=> %%global_location_label%%70 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I target_ptr!))) (=> %%global_location_label%%71 (= target_ptr! (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) target_perm!))) (=> %%global_location_label%%72 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) target_perm!))) (=> %%global_location_label%%73 (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (I target_ptr!)) false)) (=> %%global_location_label%%74 (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (I target_ptr!)) false)) (=> %%global_location_label%%75 (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (I target_ptr!)) false)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%2.free_page_4k. pre%self! target_ptr! target_perm!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%2.free_page_4k. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int Poly) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (target_perm! Poly)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%2.free_page_4k. pre%self! self! target_ptr! target_perm!) (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I target_ptr!))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.remove.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I target_ptr!))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (and (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%2.free_page_4k. pre%self! self! target_ptr! target_perm!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::free_page_4k")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1448:9: 1448:102 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::alloc_and_map_4k")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_and_map_4k. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int) Bool)
(declare-const %%global_location_label%%76 Bool)
(declare-const %%global_location_label%%77 Bool)
(declare-const %%global_location_label%%78 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (pcid! Int) (va! Int) (c_ptr! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_and_map_4k. pre%self! pcid! va! c_ptr!) (and (=> %%global_location_label%%76 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (=> %%global_location_label%%77 (> (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) 0)) (=> %%global_location_label%%78 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (I c_ptr!))))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_and_map_4k. pre%self! pcid! va! c_ptr!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_and_map_4k. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int Int) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (pcid! Int) (va! Int) (c_ptr! Int) (ret! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_and_map_4k. pre%self! self! pcid! va! c_ptr! ret!) (and (uInv SZ ret!) (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.remove.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I ret!))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I ret!))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (not (= (%I p$) ret!))) (and (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I ret!))) (vstd!set.impl&%0.insert.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (vstd!set.impl&%0.empty.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%tuple%2. (tuple%2./tuple%2 (I pcid!) (I va!))))) (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I ret!))) (Poly%tuple%2. (tuple%2./tuple%2 (I pcid!) (I va!)))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I ret!))) (vstd!set.impl&%0.empty.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I ret!)) false) (lib!util.page_ptr_util_u.page_ptr_valid.? (I ret!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$) (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)))) (not (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I ret!))) (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I ret!)) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (Sub (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) 1)) (forall ((c$ Poly)) (! (=> (has_type c$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) c$) (not (= c_ptr! (%I c$)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) c$)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) c$))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) c$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) c$)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I c_ptr!))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I c_ptr!))) (I ret!))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_and_map_4k. pre%self! self! pcid! va! c_ptr! ret!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::alloc_and_map_4k")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1513:9: 1513:103 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::alloc_and_map_2m")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_and_map_2m. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int) Bool)
(declare-const %%global_location_label%%79 Bool)
(declare-const %%global_location_label%%80 Bool)
(declare-const %%global_location_label%%81 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (pcid! Int) (va! Int) (c_ptr! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_and_map_2m. pre%self! pcid! va! c_ptr!) (and (=> %%global_location_label%%79 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (=> %%global_location_label%%80 (> (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) 0)) (=> %%global_location_label%%81 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (I c_ptr!))))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_and_map_2m. pre%self! pcid! va! c_ptr!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_and_map_2m. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int Int) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (pcid! Int) (va! Int) (c_ptr! Int) (ret! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_and_map_2m. pre%self! self! pcid! va! c_ptr! ret!) (and (uInv SZ ret!) (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.remove.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I ret!))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I ret!))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (not (= (%I p$) ret!))) (and (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I ret!))) (vstd!set.impl&%0.insert.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (vstd!set.impl&%0.empty.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%tuple%2. (tuple%2./tuple%2 (I pcid!) (I va!))))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I ret!))) (vstd!set.impl&%0.empty.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%2.alloc_and_map_2m. pre%self! self! pcid! va! c_ptr! ret!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::alloc_and_map_2m")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1599:9: 1599:104 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::add_mapping_4k")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%2.add_mapping_4k. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int) Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(declare-const %%global_location_label%%84 Bool)
(declare-const %%global_location_label%%85 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (pcid! Int) (va! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%2.add_mapping_4k. pre%self! target_ptr! pcid! va!) (and (=> %%global_location_label%%82 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (=> %%global_location_label%%83 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I target_ptr!))) (=> %%global_location_label%%84 (= (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I pcid!) (I va!)))) false)) (=> %%global_location_label%%85 (< (nClip (Add (vstd!set.impl&%0.len.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!)))) (vstd!set.impl&%0.len.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!)))))) (- (uHi SZ) 1))))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%2.add_mapping_4k. pre%self! target_ptr! pcid! va!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%2.add_mapping_4k. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (pcid! Int) (va! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%2.add_mapping_4k. pre%self! self! target_ptr! pcid! va!) (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (not (= (%I p$) target_ptr!))) (and (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))) (vstd!set.impl&%0.insert.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I pcid!) (I va!))))) (ext_eq false NAT (I (vstd!set.impl&%0.len.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))))) (I (nClip (Add (vstd!set.impl&%0.len.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!)))) 1)))) (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I pcid!) (I va!)))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (= (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))) (forall ((c$ Poly)) (! (=> (has_type c$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) c$) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) c$)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) c$))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) c$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.get_container_owned_pages.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) c$)))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%2.add_mapping_4k. pre%self! self! target_ptr! pcid! va!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::add_mapping_4k")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1666:9: 1666:85 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::remove_mapping_4k_helper1")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper1. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int) Bool)
(declare-const %%global_location_label%%86 Bool)
(declare-const %%global_location_label%%87 Bool)
(declare-const %%global_location_label%%88 Bool)
(declare-const %%global_location_label%%89 Bool)
(declare-const %%global_location_label%%90 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (pcid! Int) (va! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper1. pre%self! target_ptr! pcid! va!) (and (=> %%global_location_label%%86 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (=> %%global_location_label%%87 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I target_ptr!))) (=> %%global_location_label%%88 (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I pcid!) (I va!))))) (=> %%global_location_label%%89 (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))) true)) (=> %%global_location_label%%90 (= (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))) 1)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper1. pre%self! target_ptr! pcid! va!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper1. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (pcid! Int) (va! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper1. pre%self! self! target_ptr! pcid! va!) (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (not (= (%I p$) target_ptr!))) (and (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))) (vstd!set.impl&%0.remove.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I pcid!) (I va!))))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!)))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (vstd!map.impl&%0.insert.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!))))))))) (vstd!set.impl&%0.remove.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))))))) (I target_ptr!)))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper1. pre%self! self! target_ptr! pcid! va!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::remove_mapping_4k_helper1")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1741:9: 1741:92 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::remove_mapping_4k_helper2")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper2. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int) Bool)
(declare-const %%global_location_label%%91 Bool)
(declare-const %%global_location_label%%92 Bool)
(declare-const %%global_location_label%%93 Bool)
(declare-const %%global_location_label%%94 Bool)
(declare-const %%global_location_label%%95 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (pcid! Int) (va! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper2. pre%self! target_ptr! pcid! va!) (and (=> %%global_location_label%%91 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (=> %%global_location_label%%92 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I target_ptr!))) (=> %%global_location_label%%93 (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I pcid!) (I va!))))) (=> %%global_location_label%%94 (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))) false)) (=> %%global_location_label%%95 (= (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))) 1)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper2. pre%self! target_ptr! pcid! va!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper2. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (pcid! Int) (va! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper2. pre%self! self! target_ptr! pcid! va!) (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (not (= (%I p$) target_ptr!))) (and (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))) (vstd!set.impl&%0.remove.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I pcid!) (I va!))))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!)))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (vstd!map.impl&%0.insert.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!))))))))) (vstd!set.impl&%0.remove.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))))))) (I target_ptr!)))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper2. pre%self! self! target_ptr! pcid! va!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::remove_mapping_4k_helper2")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1805:9: 1805:92 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::remove_mapping_4k_helper3")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper3. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int) Bool)
(declare-const %%global_location_label%%96 Bool)
(declare-const %%global_location_label%%97 Bool)
(declare-const %%global_location_label%%98 Bool)
(declare-const %%global_location_label%%99 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (pcid! Int) (va! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper3. pre%self! target_ptr! pcid! va!) (and (=> %%global_location_label%%96 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (=> %%global_location_label%%97 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I target_ptr!))) (=> %%global_location_label%%98 (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I pcid!) (I va!))))) (=> %%global_location_label%%99 (not (= (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))) 1))))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper3. pre%self! target_ptr! pcid! va!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper3. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (pcid! Int) (va! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper3. pre%self! self! target_ptr! pcid! va!) (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (not (= (%I p$) target_ptr!))) (and (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))) (vstd!set.impl&%0.remove.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I pcid!) (I va!))))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!)))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k_helper3. pre%self! self! target_ptr! pcid! va!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::remove_mapping_4k_helper3")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1876:9: 1876:92 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::remove_mapping_4k")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int) Bool)
(declare-const %%global_location_label%%100 Bool)
(declare-const %%global_location_label%%101 Bool)
(declare-const %%global_location_label%%102 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (pcid! Int) (va! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k. pre%self! target_ptr! pcid! va!) (and (=> %%global_location_label%%100 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (=> %%global_location_label%%101 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I target_ptr!))) (=> %%global_location_label%%102 (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I pcid!) (I va!))))))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k. pre%self! target_ptr! pcid! va!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int core!option.Option.) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (pcid! Int) (va! Int) (ret! core!option.Option.)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k. pre%self! self! target_ptr! pcid! va! ret!) (and (has_type (Poly%core!option.Option. ret!) (TYPE%core!option.Option. $ (UINT SZ))) (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (not (= (%I p$) target_ptr!))) (and (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))) (vstd!set.impl&%0.remove.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I pcid!) (I va!))))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!)))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (=> (is-core!option.Option./None_ ret!) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (=> (is-core!option.Option./Some_ ret!) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (vstd!map.impl&%0.insert.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ret!))) (vstd!set.impl&%0.remove.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ret!)))) (I target_ptr!))))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_mapping_4k. pre%self! self! target_ptr! pcid! va! ret!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::remove_mapping_4k")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1933:9: 1933:118 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::remove_io_mapping_4k_helper1")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_io_mapping_4k_helper1. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int) Bool)
(declare-const %%global_location_label%%103 Bool)
(declare-const %%global_location_label%%104 Bool)
(declare-const %%global_location_label%%105 Bool)
(declare-const %%global_location_label%%106 Bool)
(declare-const %%global_location_label%%107 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (ioid! Int) (va! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_io_mapping_4k_helper1. pre%self! target_ptr! ioid! va!) (and (=> %%global_location_label%%103 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (=> %%global_location_label%%104 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I target_ptr!))) (=> %%global_location_label%%105 (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I ioid!) (I va!))))) (=> %%global_location_label%%106 (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))) true)) (=> %%global_location_label%%107 (= (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))) 1)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_io_mapping_4k_helper1. pre%self! target_ptr! ioid! va!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_io_mapping_4k_helper1. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (ioid! Int) (va! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_io_mapping_4k_helper1. pre%self! self! target_ptr! ioid! va!) (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (not (= (%I p$) target_ptr!))) (and (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!)))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))) (vstd!set.impl&%0.remove.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I ioid!) (I va!))))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (vstd!map.impl&%0.insert.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!))))))))) (vstd!set.impl&%0.remove.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))))))) (I target_ptr!)))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_io_mapping_4k_helper1. pre%self! self! target_ptr! ioid! va!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::remove_io_mapping_4k_helper1")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:1985:9: 1985:95 (#0)")
(set-info :comment ";; Function-Specs lib::allocator::page_allocator_spec_impl::PageAllocator::remove_io_mapping_4k_helper2")
(declare-fun req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_io_mapping_4k_helper2. (lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int) Bool)
(declare-const %%global_location_label%%108 Bool)
(declare-const %%global_location_label%%109 Bool)
(declare-const %%global_location_label%%110 Bool)
(declare-const %%global_location_label%%111 Bool)
(declare-const %%global_location_label%%112 Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (ioid! Int) (va! Int)) (! (= (req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_io_mapping_4k_helper2. pre%self! target_ptr! ioid! va!) (and (=> %%global_location_label%%108 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (=> %%global_location_label%%109 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))) (I target_ptr!))) (=> %%global_location_label%%110 (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I ioid!) (I va!))))) (=> %%global_location_label%%111 (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))) false)) (=> %%global_location_label%%112 (= (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))) 1)))) :pattern ((req%lib!allocator.page_allocator_spec_impl.impl&%2.remove_io_mapping_4k_helper2. pre%self! target_ptr! ioid! va!)))))
(declare-fun ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_io_mapping_4k_helper2. (lib!allocator.page_allocator_spec_impl.PageAllocator. lib!allocator.page_allocator_spec_impl.PageAllocator. Int Int Int) Bool)
(assert (forall ((pre%self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (self! lib!allocator.page_allocator_spec_impl.PageAllocator.) (target_ptr! Int) (ioid! Int) (va! Int)) (! (= (ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_io_mapping_4k_helper2. pre%self! self! target_ptr! ioid! va!) (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$) (not (= (%I p$) target_ptr!))) (and (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) p$)))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!)))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!) (I target_ptr!))) (vstd!set.impl&%0.remove.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I ioid!) (I va!))))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!))))) (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (vstd!map.impl&%0.insert.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!))))))))) (vstd!set.impl&%0.remove.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. pre%self!)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))))))) (I target_ptr!)))))) :pattern ((ens%lib!allocator.page_allocator_spec_impl.impl&%2.remove_io_mapping_4k_helper2. pre%self! self! target_ptr! ioid! va!)))))
(set-info :comment ";; Function-Def lib::allocator::page_allocator_spec_impl::PageAllocator::remove_io_mapping_4k_helper2")
(set-info :comment ";; allocator/page_allocator_spec_impl.rs:2052:9: 2052:95 (#0)")
(declare-const self!@0 lib!allocator.page_allocator_spec_impl.PageAllocator.)
(declare-const target_ptr! Int)
(declare-const ioid! Int)
(declare-const va! Int)
(declare-const tmp%1 lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-const tmp%2 lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-const tmp%3 lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-const tmp%4 Bool)
(declare-const tmp%5 vstd!seq.Seq<usize.>.)
(declare-const tmp%6 Int)
(declare-const tmp%7 Poly)
(declare-const tmp%8 lib!array.Array.)
(declare-const tmp%9 Poly)
(declare-const tmp%10 core!option.Option.)
(declare-const tmp%11 Int)
(declare-const tmp%12 Int)
(declare-const tmp%13 Int)
(declare-const tmp%14 vstd!set.Set<tuple%2<usize./usize.>.>.)
(declare-const tmp%15 Int)
(declare-const tmp%16 lib!define.PageState.)
(declare-const tmp%17 Int)
(declare-const tmp%18 core!option.Option.)
(declare-const tmp%19 Poly)
(declare-const tmp%20 Poly)
(declare-const tmp%21 Bool)
(declare-const tmp%22 Bool)
(declare-const tmp%23 Bool)
(declare-const tmp%24 Bool)
(declare-const c_ptr@ Int)
(declare-const rev_index@ Int)
(assert fuel_defaults)
(assert (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.))
(assert (uInv SZ target_ptr!))
(assert (uInv SZ ioid!))
(assert (uInv SZ va!))
(assert (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0)))
(assert (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0))) (I target_ptr!)))
(assert (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I ioid!) (I va!)))))
(assert (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))) false))
(assert (= (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))) 1))
(declare-const self!@1 lib!allocator.page_allocator_spec_impl.PageAllocator.)
(declare-const self!@2 lib!allocator.page_allocator_spec_impl.PageAllocator.)
(declare-const self!@3 lib!allocator.page_allocator_spec_impl.PageAllocator.)
(declare-const self!@4 lib!allocator.page_allocator_spec_impl.PageAllocator.)
(declare-const self!@5 lib!allocator.page_allocator_spec_impl.PageAllocator.)
(declare-const self!@6 lib!allocator.page_allocator_spec_impl.PageAllocator.)
(declare-const self!@7 lib!allocator.page_allocator_spec_impl.PageAllocator.)
(declare-const self!@8 lib!allocator.page_allocator_spec_impl.PageAllocator.)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%23 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%24 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%25 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%26 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%27 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%28 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%29 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%30 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%31 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%32 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%33 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%34 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%35 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%36 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%37 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%38 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%39 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%40 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%41 Bool)
(assert (not (=> (ens%lib!util.page_ptr_util_u.page_ptr_lemma. 0) (=> (ens%lib!lemma.lemma_u.seq_push_lemma. $ (UINT SZ)) (=> (= tmp%1 (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0)))) (and (=> %%location_label%%0 (req%lib!slinkedlist.spec_impl_u.impl&%1.wf_to_no_duplicates. $ (UINT SZ) $ (CONST_INT 131072) tmp%1)) (=> (ens%lib!slinkedlist.spec_impl_u.impl&%1.wf_to_no_duplicates. $ (UINT SZ) $ (CONST_INT 131072) tmp%1) (=> (= tmp%2 (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0)))) (and (=> %%location_label%%1 (req%lib!slinkedlist.spec_impl_u.impl&%1.wf_to_no_duplicates. $ (UINT SZ) $ (CONST_INT 131072) tmp%2)) (=> (ens%lib!slinkedlist.spec_impl_u.impl&%1.wf_to_no_duplicates. $ (UINT SZ) $ (CONST_INT 131072) tmp%2) (=> (= tmp%3 (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0)))) (and (=> %%location_label%%2 (req%lib!slinkedlist.spec_impl_u.impl&%1.wf_to_no_duplicates. $ (UINT SZ) $ (CONST_INT 131072) tmp%3)) (=> (ens%lib!slinkedlist.spec_impl_u.impl&%1.wf_to_no_duplicates. $ (UINT SZ) $ (CONST_INT 131072) tmp%3) (=> (= tmp%4 (lib!util.page_ptr_util_u.page_ptr_valid.? (I target_ptr!))) (and (=> %%location_label%%3 tmp%4) (=> tmp%4 (=> (= tmp%5 (%Poly%vstd!seq.Seq<usize.>. (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0))))))) (and (=> %%location_label%%4 (req%vstd!seq_lib.impl&%0.unique_seq_to_set. $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. tmp%5))) (=> (ens%vstd!seq_lib.impl&%0.unique_seq_to_set. $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. tmp%5)) (and (=> %%location_label%%5 (req%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_mapped_4k. self!@0 target_ptr!)) (=> (ens%lib!allocator.page_allocator_spec_impl.impl&%1.len_lemma_mapped_4k. self!@0 target_ptr!) (and (=> %%location_label%%6 (req%lib!util.page_ptr_util_u.page_ptr2page_index. target_ptr!)) (=> (ens%lib!util.page_ptr_util_u.page_ptr2page_index. target_ptr! tmp%6) (=> (= tmp%8 (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0)))) (and (=> %%location_label%%7 (req%lib!array.impl&%0.get. $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) tmp%8 tmp%6)) (=> (ens%lib!array.impl&%0.get. $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) tmp%8 tmp%6 tmp%7) (=> (= tmp%10 (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. tmp%7))) (and (=> %%location_label%%8 (req%core!option.impl&%0.unwrap. $ (UINT SZ) tmp%10)) (=> (ens%core!option.impl&%0.unwrap. $ (UINT SZ) tmp%10 tmp%9) (=> (= c_ptr@ (%I tmp%9)) (and (=> %%location_label%%9 (req%lib!slinkedlist.spec_impl_u.impl&%2.push. $ (UINT SZ) $ (CONST_INT 131072) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0))) (I target_ptr!))) (=> (and (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array self!@0) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array self!@1)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m self!@0) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m self!@1)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g self!@0) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g self!@1)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k self!@0) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k self!@1)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m self!@0) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m self!@1)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g self!@0) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g self!@1)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k self!@0) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k self!@1)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m self!@0) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m self!@1)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g self!@0) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g self!@1)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k self!@0) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k self!@1)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m self!@0) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m self!@1)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g self!@0) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g self!@1)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k self!@0) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k self!@1)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m self!@0) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m self!@1)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g self!@0) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g self!@1))) (=> (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@1) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (=> (ens%lib!slinkedlist.spec_impl_u.impl&%2.push. $ (UINT SZ) $ (CONST_INT 131072) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@1))) (I target_ptr!) rev_index@) (and (=> %%location_label%%10 (req%lib!util.page_ptr_util_u.page_ptr2page_index. target_ptr!)) (=> (ens%lib!util.page_ptr_util_u.page_ptr2page_index. target_ptr! tmp%11) (and (=> %%location_label%%11 (req%lib!allocator.page_allocator_util_t.impl&%0.set_rev_pointer. self!@1 tmp%11 rev_index@)) (=> (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@2) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (=> (ens%lib!allocator.page_allocator_util_t.impl&%0.set_rev_pointer. self!@1 self!@2 tmp%11 rev_index@) (and (=> %%location_label%%12 (req%lib!util.page_ptr_util_u.page_ptr2page_index. target_ptr!)) (=> (ens%lib!util.page_ptr_util_u.page_ptr2page_index. target_ptr! tmp%12) (and (=> %%location_label%%13 (req%lib!allocator.page_allocator_util_t.impl&%0.set_ref_count. self!@2 tmp%12 0)) (=> (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@3) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (=> (ens%lib!allocator.page_allocator_util_t.impl&%0.set_ref_count. self!@2 self!@3 tmp%12 0) (and (=> %%location_label%%14 (req%lib!util.page_ptr_util_u.page_ptr2page_index. target_ptr!)) (=> (ens%lib!util.page_ptr_util_u.page_ptr2page_index. target_ptr! tmp%13) (=> (= tmp%14 (%Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (vstd!set.impl&%0.empty.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))) (and (=> %%location_label%%15 (req%lib!allocator.page_allocator_util_t.impl&%0.set_io_mapping. self!@3 tmp%13 tmp%14)) (=> (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@4) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (=> (ens%lib!allocator.page_allocator_util_t.impl&%0.set_io_mapping. self!@3 self!@4 tmp%13 tmp%14) (and (=> %%location_label%%16 (req%lib!util.page_ptr_util_u.page_ptr2page_index. target_ptr!)) (=> (ens%lib!util.page_ptr_util_u.page_ptr2page_index. target_ptr! tmp%15) (=> (= tmp%16 lib!define.PageState./Free4k) (and (=> %%location_label%%17 (req%lib!allocator.page_allocator_util_t.impl&%0.set_state. self!@4 tmp%15 tmp%16)) (=> (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@5) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (=> (ens%lib!allocator.page_allocator_util_t.impl&%0.set_state. self!@4 self!@5 tmp%15 tmp%16) (and (=> %%location_label%%18 (req%lib!util.page_ptr_util_u.page_ptr2page_index. target_ptr!)) (=> (ens%lib!util.page_ptr_util_u.page_ptr2page_index. target_ptr! tmp%17) (=> (= tmp%18 core!option.Option./None) (and (=> %%location_label%%19 (req%lib!allocator.page_allocator_util_t.impl&%0.set_owning_container. self!@5 tmp%17 tmp%18)) (=> (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@6) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (=> (ens%lib!allocator.page_allocator_util_t.impl&%0.set_owning_container. self!@5 self!@6 tmp%17 tmp%18) (=> (= tmp%19 (vstd!set.impl&%0.remove.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@6)))) (I target_ptr!))) (=> (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@7))) (%Poly%vstd!set.Set<usize.>. tmp%19)) (=> (and (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array self!@6) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array self!@7)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k self!@6) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k self!@7)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m self!@6) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m self!@7)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g self!@6) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g self!@7)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k self!@6) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k self!@7)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m self!@6) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m self!@7)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g self!@6) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g self!@7)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m self!@6) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m self!@7)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g self!@6) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g self!@7)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k self!@6) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k self!@7)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m self!@6) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m self!@7)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g self!@6) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g self!@7)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k self!@6) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k self!@7)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m self!@6) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m self!@7)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g self!@6) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g self!@7))) (=> (= tmp%20 (vstd!map.impl&%0.insert.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@7)))) (I c_ptr@) (vstd!set.impl&%0.remove.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@7)))) (I c_ptr@)) (I target_ptr!)))) (=> (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8))) (%Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. tmp%20)) (=> (and (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array self!@7) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array self!@8)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k self!@7) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k self!@8)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m self!@7) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m self!@8)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g self!@7) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g self!@8)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k self!@7) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k self!@8)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m self!@7) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m self!@8)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g self!@7) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g self!@8)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k self!@7) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k self!@8)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m self!@7) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m self!@8)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g self!@7) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g self!@8)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k self!@7) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k self!@8)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m self!@7) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m self!@8)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g self!@7) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g self!@8)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m self!@7) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m self!@8)) (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g self!@7) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g self!@8))) (=> (= tmp%21 (lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8))) (and (=> %%location_label%%20 tmp%21) (=> tmp%21 (=> (= tmp%22 (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8))) (and (=> %%location_label%%21 tmp%22) (=> tmp%22 (and (=> (ens%lib!util.page_ptr_util_u.page_ptr_2m_lemma. 0) (=> %%location_label%%22 (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)))) (=> (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)) (and (=> (ens%lib!util.page_ptr_util_u.page_ptr_1g_lemma. 0) (=> %%location_label%%23 (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)))) (=> (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)) (=> (= tmp%23 (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8))) (and (=> %%location_label%%24 tmp%23) (=> tmp%23 (and (=> (ens%lib!util.page_ptr_util_u.page_ptr_2m_lemma. 0) (=> %%location_label%%25 (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)))) (=> (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)) (and (=> (ens%lib!util.page_ptr_util_u.page_ptr_1g_lemma. 0) (=> %%location_label%%26 (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)))) (=> (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)) (=> (= tmp%24 (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8))) (and (=> %%location_label%%27 tmp%24) (=> tmp%24 (and (=> (ens%lib!util.page_ptr_util_u.page_ptr_2m_lemma. 0) (=> %%location_label%%28 (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)))) (=> (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)) (and (=> (ens%lib!util.page_ptr_util_u.page_ptr_1g_lemma. 0) (=> %%location_label%%29 (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)))) (=> (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)) (and (=> (ens%lib!util.page_ptr_util_u.page_ptr_page_index_truncate_lemma. 0) (=> %%location_label%%30 (lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)))) (=> (lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)) (and (=> (ens%lib!util.page_ptr_util_u.page_index_lemma. 0) (=> (ens%lib!util.page_ptr_util_u.page_ptr_2m_lemma. 0) (=> (ens%lib!util.page_ptr_util_u.page_ptr_1g_lemma. 0) (=> %%location_label%%31 (lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)))))) (=> (lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)) (and (=> %%location_label%%32 (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8))) (and (=> %%location_label%%33 (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0))))) (and (=> %%location_label%%34 (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0))))) (and (=> %%location_label%%35 (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0))))) (and (=> %%location_label%%36 (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8) p$) (not (= (%I p$) target_ptr!))) (and (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0) p$))) (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8) p$)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0) p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8) p$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0) p$))))) (and (=> %%location_label%%37 (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8) (I target_ptr!))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0) (I target_ptr!))))) (and (=> %%location_label%%38 (ext_eq false (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8) (I target_ptr!))) (vstd!set.impl&%0.remove.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0) (I target_ptr!))) (Poly%tuple%2. (tuple%2./tuple%2 (I ioid!) (I va!)))))) (and (=> %%location_label%%39 (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0)))))) (and (=> %%location_label%%40 (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0)))))) (=> %%location_label%%41 (ext_eq false (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@8)))) (vstd!map.impl&%0.insert.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!))))))))) (vstd!set.impl&%0.remove.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!@0)))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (I target_ptr!)))))))))) (I target_ptr!))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
