(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Atmosphere (https://mars-research.github.io/projects/atmo/) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module kernel::util_syscalls'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.option.is_none. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%2.arrow_0. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.is_init. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.value. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.no_duplicates. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!seq_lib.seq_to_set_is_finite. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.impl&%0.disjoint. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%1.is_init. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%1.value. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%30.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%vstd!view.impl&%44.view. FuelId)
(declare-const fuel%vstd!view.impl&%46.view. FuelId)
(declare-const fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len. FuelId)
(declare-const fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique. FuelId)
(declare-const fuel%lib!slinkedlist.spec_impl_u.impl&%0.view. FuelId)
(declare-const fuel%lib!pagetable.pagemap.impl&%0.spec_index. FuelId)
(declare-const fuel%lib!pagetable.entry.impl&%4.is_empty. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2present. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2ps. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2write. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2execute_disable. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2user. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_usize2page_entry_perm. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_usize2page_entry. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_usize2pa. FuelId)
(declare-const fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_empty. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.container_wf. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter. FuelId)
(declare-const fuel%lib!allocator.page_allocator_spec_impl.impl&%0.wf. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.pcid_active. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.ioid_active. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.pagetables_wf. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.iommutables_wf. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.pagetable_iommu_table_disjoint. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.kernel_entries_wf. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.root_table_wf. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.root_table_cache_wf. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.page_closure. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.get_pagetable_by_pcid. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.get_free_pcids_as_set. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.get_free_ioids_as_set. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.get_iommu_table_by_ioid. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_wf. FuelId)
(declare-const fuel%lib!memory_manager.spec_impl.impl&%0.wf. FuelId)
(declare-const fuel%lib!memory_manager.pci_bitmap.impl&%0.wf. FuelId)
(declare-const fuel%lib!memory_manager.pci_bitmap.impl&%0.view. FuelId)
(declare-const fuel%lib!kernel.spec.impl&%0.memory_wf. FuelId)
(declare-const fuel%lib!kernel.spec.impl&%0.page_mapping_wf. FuelId)
(declare-const fuel%lib!kernel.spec.impl&%0.mapping_wf. FuelId)
(declare-const fuel%lib!kernel.spec.impl&%0.pcid_ioid_wf. FuelId)
(declare-const fuel%lib!kernel.spec.impl&%0.wf. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_ptr2page_index. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_index2page_ptr. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_index_2m_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_index_1g_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_ptr_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_index_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_2m. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_1g. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_va_4k_valid. FuelId)
(declare-const fuel%lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS. FuelId)
(declare-const fuel%lib!define.KERNEL_MEM_END_L4INDEX. FuelId)
(declare-const fuel%lib!define.NUM_PAGES. FuelId)
(declare-const fuel%lib!define.PCID_MAX. FuelId)
(declare-const fuel%lib!define.IOID_MAX. FuelId)
(declare-const fuel%lib!define.MEM_MASK. FuelId)
(declare-const fuel%lib!define.MEM_4k_MASK. FuelId)
(declare-const fuel%lib!define.NUM_CPUS. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_USER_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PS_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PRESENT_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_WRITE_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_USER_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PS_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK. FuelId)
(declare-const fuel%lib!array.impl&%0.spec_index. FuelId)
(declare-const fuel%lib!array.impl&%0.view. FuelId)
(declare-const fuel%lib!array.impl&%0.wf. FuelId)
(declare-const fuel%lib!array_vec.impl&%0.spec_len. FuelId)
(declare-const fuel%lib!array_vec.impl&%0.spec_capacity. FuelId)
(declare-const fuel%lib!array_vec.impl&%0.view. FuelId)
(declare-const fuel%lib!array_vec.impl&%0.view_until. FuelId)
(declare-const fuel%lib!array_vec.impl&%0.wf. FuelId)
(declare-const fuel%lib!va_range.impl&%2.wf. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.option.is_none. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!raw_ptr.impl&%2.arrow_0. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.impl&%7.is_init. fuel%vstd!raw_ptr.impl&%7.value. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.no_duplicates. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!seq_lib.seq_to_set_is_finite. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.impl&%0.disjoint. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_union_finite. fuel%vstd!set.axiom_set_empty_len. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!simple_pptr.impl&%1.is_init. fuel%vstd!simple_pptr.impl&%1.value. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%30.view. fuel%vstd!view.impl&%42.view. fuel%vstd!view.impl&%44.view. fuel%vstd!view.impl&%46.view. fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len. fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique. fuel%lib!slinkedlist.spec_impl_u.impl&%0.view. fuel%lib!pagetable.pagemap.impl&%0.spec_index. fuel%lib!pagetable.entry.impl&%4.is_empty. fuel%lib!pagetable.entry.usize2present. fuel%lib!pagetable.entry.usize2ps. fuel%lib!pagetable.entry.usize2write. fuel%lib!pagetable.entry.usize2execute_disable. fuel%lib!pagetable.entry.usize2user. fuel%lib!pagetable.entry.spec_usize2page_entry_perm. fuel%lib!pagetable.entry.spec_usize2page_entry. fuel%lib!pagetable.entry.spec_usize2pa. fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_empty. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.container_wf. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter. fuel%lib!allocator.page_allocator_spec_impl.impl&%0.wf. fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range. fuel%lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr. fuel%lib!memory_manager.spec_impl.impl&%0.pcid_active. fuel%lib!memory_manager.spec_impl.impl&%0.ioid_active. fuel%lib!memory_manager.spec_impl.impl&%0.pagetables_wf. fuel%lib!memory_manager.spec_impl.impl&%0.iommutables_wf. fuel%lib!memory_manager.spec_impl.impl&%0.pagetable_iommu_table_disjoint. fuel%lib!memory_manager.spec_impl.impl&%0.kernel_entries_wf. fuel%lib!memory_manager.spec_impl.impl&%0.root_table_wf. fuel%lib!memory_manager.spec_impl.impl&%0.root_table_cache_wf. fuel%lib!memory_manager.spec_impl.impl&%0.page_closure. fuel%lib!memory_manager.spec_impl.impl&%0.get_pagetable_by_pcid. fuel%lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid. fuel%lib!memory_manager.spec_impl.impl&%0.get_free_pcids_as_set. fuel%lib!memory_manager.spec_impl.impl&%0.get_free_ioids_as_set. fuel%lib!memory_manager.spec_impl.impl&%0.get_iommu_table_by_ioid. fuel%lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid. fuel%lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_wf. fuel%lib!memory_manager.spec_impl.impl&%0.wf. fuel%lib!memory_manager.pci_bitmap.impl&%0.wf. fuel%lib!memory_manager.pci_bitmap.impl&%0.view. fuel%lib!kernel.spec.impl&%0.memory_wf. fuel%lib!kernel.spec.impl&%0.page_mapping_wf. fuel%lib!kernel.spec.impl&%0.mapping_wf. fuel%lib!kernel.spec.impl&%0.pcid_ioid_wf. fuel%lib!kernel.spec.impl&%0.wf. fuel%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild. fuel%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild. fuel%lib!util.page_ptr_util_u.spec_page_ptr2page_index. fuel%lib!util.page_ptr_util_u.spec_page_index2page_ptr. fuel%lib!util.page_ptr_util_u.page_index_2m_valid. fuel%lib!util.page_ptr_util_u.page_index_1g_valid. fuel%lib!util.page_ptr_util_u.page_ptr_valid. fuel%lib!util.page_ptr_util_u.page_index_valid. fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_2m. fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_1g. fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid. fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid. fuel%lib!util.page_ptr_util_u.spec_va_4k_valid. fuel%lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS. fuel%lib!define.KERNEL_MEM_END_L4INDEX. fuel%lib!define.NUM_PAGES. fuel%lib!define.PCID_MAX. fuel%lib!define.IOID_MAX. fuel%lib!define.MEM_MASK. fuel%lib!define.MEM_4k_MASK. fuel%lib!define.NUM_CPUS. fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT. fuel%lib!define.PAGE_ENTRY_USER_SHIFT. fuel%lib!define.PAGE_ENTRY_PS_SHIFT. fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT. fuel%lib!define.PAGE_ENTRY_PRESENT_MASK. fuel%lib!define.PAGE_ENTRY_WRITE_MASK. fuel%lib!define.PAGE_ENTRY_USER_MASK. fuel%lib!define.PAGE_ENTRY_PS_MASK. fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK. fuel%lib!array.impl&%0.spec_index. fuel%lib!array.impl&%0.view. fuel%lib!array.impl&%0.wf. fuel%lib!array_vec.impl&%0.spec_len. fuel%lib!array_vec.impl&%0.spec_capacity. fuel%lib!array_vec.impl&%0.view. fuel%lib!array_vec.impl&%0.view_until. fuel%lib!array_vec.impl&%0.wf. fuel%lib!va_range.impl&%2.wf. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!seq_lib.seq_to_set_is_finite.)))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort lib!memory_manager.root_table.RootTable. 0)
(declare-sort vstd!map.Map<usize./usize.>. 0)
(declare-sort vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. 0)
(declare-sort vstd!map.Map<usize./vstd!set.Set<usize.>.>. 0)
(declare-sort vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. 0)
(declare-sort vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. 0)
(declare-sort vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. 0)
(declare-sort vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. 0)
(declare-sort vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. 0)
(declare-sort vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. 0)
(declare-sort vstd!map.Map<usize./tuple%2<usize./usize.>.>. 0)
(declare-sort vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. 0)
(declare-sort vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<i32.>. 0)
(declare-sort vstd!seq.Seq<usize.>. 0)
(declare-sort vstd!seq.Seq<core!option.Option<usize.>.>. 0)
(declare-sort vstd!seq.Seq<core!option.Option<lib!pagetable.pagetable_spec_impl.PageTable.>.>. 0)
(declare-sort vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>. 0)
(declare-sort vstd!seq.Seq<lib!allocator.page.Page.>. 0)
(declare-sort vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. 0)
(declare-sort vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. 0)
(declare-sort vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. 0)
(declare-sort vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>. 0)
(declare-sort vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. 0)
(declare-sort vstd!set.Set<usize.>. 0)
(declare-sort vstd!set.Set<tuple%2<usize./usize.>.>. 0)
(declare-sort vstd!set.Set<tuple%4<usize./u8./u8./u8.>.>. 0)
(declare-sort vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. 0)
(declare-sort vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. 0)
(declare-sort vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. 0)
(declare-sort vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. 0)
(declare-sort vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (vstd!raw_ptr.MemContents. 0) (lib!slinkedlist.node.Node. 0) (lib!slinkedlist.spec_impl_u.StaticLinkedList. 0) (lib!pagetable.pagemap.PageMap. 0) (lib!pagetable.entry.PageEntryPerm. 0) (lib!pagetable.entry.PageEntry. 0) (lib!pagetable.entry.MapEntry. 0) (lib!pagetable.pagetable_spec_impl.PageTable. 0) (lib!allocator.page.Page. 0) (lib!allocator.page_allocator_spec_impl.PageAllocator. 0) (lib!process_manager.container.Container. 0) (lib!process_manager.container_tree_spec_impl.ContainerTree. 0) (lib!process_manager.process.Process. 0) (lib!process_manager.thread.Thread. 0) (lib!process_manager.thread.IPCPayLoad. 0) (lib!process_manager.endpoint.Endpoint. 0) (lib!process_manager.spec_impl.ProcessManager. 0) (lib!process_manager.cpu.Cpu. 0) (lib!memory_manager.spec_impl.MemoryManager. 0) (lib!memory_manager.pci_bitmap.PCIBitMap. 0) (lib!kernel.spec.Kernel. 0) (lib!define.ThreadState. 0) (lib!define.EndpointState. 0) (lib!define.PageState. 0) (lib!define.RetValueType. 0) (lib!trap.TrapFrameOption. 0) (lib!trap.Registers. 0) (lib!array.Array. 0) (lib!array_set.ArraySet. 0) (lib!array_vec.ArrayVec. 0) (lib!va_range.VaRange4K. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0) (tuple%4. 0) (tuple%5. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((vstd!raw_ptr.MemContents./Uninit ) (vstd!raw_ptr.MemContents./Init (vstd!raw_ptr.MemContents./Init/?0 Poly))) ((lib!slinkedlist.node.Node./Node (lib!slinkedlist.node.Node./Node/?value core!option.Option.) (lib!slinkedlist.node.Node./Node/?next Int) (lib!slinkedlist.node.Node./Node/?prev Int))) ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?ar %%Function%%) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?spec_seq Poly) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list vstd!seq.Seq<i32.>.) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_head Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_tail Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_len Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list vstd!seq.Seq<i32.>.) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_head Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_tail Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_len Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?size Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?arr_seq Poly))) ((lib!pagetable.pagemap.PageMap./PageMap (lib!pagetable.pagemap.PageMap./PageMap/?ar lib!array.Array.) (lib!pagetable.pagemap.PageMap./PageMap/?spec_seq vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.))) ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?present Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?ps Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?write Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?execute_disable Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?user Bool))) ((lib!pagetable.entry.PageEntry./PageEntry (lib!pagetable.entry.PageEntry./PageEntry/?addr Int) (lib!pagetable.entry.PageEntry./PageEntry/?perm lib!pagetable.entry.PageEntryPerm.))) ((lib!pagetable.entry.MapEntry./MapEntry (lib!pagetable.entry.MapEntry./MapEntry/?addr Int) (lib!pagetable.entry.MapEntry./MapEntry/?write Bool) (lib!pagetable.entry.MapEntry./MapEntry/?execute_disable Bool))) ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?cr3 Int) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?pcid core!option.Option.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?ioid core!option.Option.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?kernel_l4_end Int) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l4_table vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l3_rev_map vstd!map.Map<usize./usize.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l3_tables vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l2_rev_map vstd!map.Map<usize./tuple%2<usize./usize.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l2_tables vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l1_rev_map vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l1_tables vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?mapping_4k vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?mapping_2m vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?mapping_1g vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?kernel_entries vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?tlb_mapping_4k vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?tlb_mapping_2m vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?tlb_mapping_1g vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.))) ((lib!allocator.page.Page./Page (lib!allocator.page.Page./Page/?addr Int) (lib!allocator.page.Page./Page/?state lib!define.PageState.) (lib!allocator.page.Page./Page/?is_io_page Bool) (lib!allocator.page.Page./Page/?rev_pointer Int) (lib!allocator.page.Page./Page/?ref_count Int) (lib!allocator.page.Page./Page/?owning_container core!option.Option.) (lib!allocator.page.Page./Page/?mappings vstd!set.Set<tuple%2<usize./usize.>.>.) (lib!allocator.page.Page./Page/?io_mappings vstd!set.Set<tuple%2<usize./usize.>.>.))) ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_array lib!array.Array.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?free_pages_4k lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?free_pages_2m lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?free_pages_1g lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?allocated_pages_4k vstd!set.Set<usize.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?allocated_pages_2m vstd!set.Set<usize.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?allocated_pages_1g vstd!set.Set<usize.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?mapped_pages_4k vstd!set.Set<usize.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?mapped_pages_2m vstd!set.Set<usize.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?mapped_pages_1g vstd!set.Set<usize.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_perms_4k Poly) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_perms_2m Poly) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_perms_1g Poly) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?container_map_4k vstd!map.Map<usize./vstd!set.Set<usize.>.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?container_map_2m vstd!map.Map<usize./vstd!set.Set<usize.>.>.) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?container_map_1g vstd!map.Map<usize./vstd!set.Set<usize.>.>.))) ((lib!process_manager.container.Container./Container (lib!process_manager.container.Container./Container/?owned_procs lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!process_manager.container.Container./Container/?parent core!option.Option.) (lib!process_manager.container.Container./Container/?parent_rev_ptr core!option.Option.) (lib!process_manager.container.Container./Container/?children lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!process_manager.container.Container./Container/?owned_endpoints lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!process_manager.container.Container./Container/?mem_quota Int) (lib!process_manager.container.Container./Container/?mem_used Int) (lib!process_manager.container.Container./Container/?owned_cpus lib!array_set.ArraySet.) (lib!process_manager.container.Container./Container/?scheduler lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!process_manager.container.Container./Container/?depth Int) (lib!process_manager.container.Container./Container/?owned_threads vstd!set.Set<usize.>.) (lib!process_manager.container.Container./Container/?uppertree_seq vstd!seq.Seq<usize.>.) (lib!process_manager.container.Container./Container/?subtree_set vstd!set.Set<usize.>.) (lib!process_manager.container.Container./Container/?can_have_children Bool))) ((lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/?root_container Int) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/?container_perms vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.))) ((lib!process_manager.process.Process./Process (lib!process_manager.process.Process./Process/?owning_container Int) (lib!process_manager.process.Process./Process/?rev_ptr Int) (lib!process_manager.process.Process./Process/?pcid Int) (lib!process_manager.process.Process./Process/?ioid core!option.Option.) (lib!process_manager.process.Process./Process/?owned_threads lib!slinkedlist.spec_impl_u.StaticLinkedList.))) ((lib!process_manager.thread.Thread./Thread (lib!process_manager.thread.Thread./Thread/?owning_container Int) (lib!process_manager.thread.Thread./Thread/?owning_proc Int) (lib!process_manager.thread.Thread./Thread/?state lib!define.ThreadState.) (lib!process_manager.thread.Thread./Thread/?proc_rev_ptr Int) (lib!process_manager.thread.Thread./Thread/?scheduler_rev_ptr core!option.Option.) (lib!process_manager.thread.Thread./Thread/?blocking_endpoint_ptr core!option.Option.) (lib!process_manager.thread.Thread./Thread/?endpoint_rev_ptr core!option.Option.) (lib!process_manager.thread.Thread./Thread/?running_cpu core!option.Option.) (lib!process_manager.thread.Thread./Thread/?endpoint_descriptors lib!array.Array.) (lib!process_manager.thread.Thread./Thread/?ipc_payload lib!process_manager.thread.IPCPayLoad.) (lib!process_manager.thread.Thread./Thread/?error_code core!option.Option.) (lib!process_manager.thread.Thread./Thread/?trap_frame lib!trap.TrapFrameOption.))) ((lib!process_manager.thread.IPCPayLoad./Message (lib!process_manager.thread.IPCPayLoad./Message/?va Int) (lib!process_manager.thread.IPCPayLoad./Message/?len Int)) (lib!process_manager.thread.IPCPayLoad./Pages (lib!process_manager.thread.IPCPayLoad./Pages/?va_range lib!va_range.VaRange4K.)) (lib!process_manager.thread.IPCPayLoad./Endpoint (lib!process_manager.thread.IPCPayLoad./Endpoint/?endpoint_index Int)) (lib!process_manager.thread.IPCPayLoad./Pci (lib!process_manager.thread.IPCPayLoad./Pci/?bus Int) (lib!process_manager.thread.IPCPayLoad./Pci/?dev Int) (lib!process_manager.thread.IPCPayLoad./Pci/?fun Int)) (lib!process_manager.thread.IPCPayLoad./Empty )) ((lib!process_manager.endpoint.Endpoint./Endpoint (lib!process_manager.endpoint.Endpoint./Endpoint/?queue lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!process_manager.endpoint.Endpoint./Endpoint/?queue_state lib!define.EndpointState.) (lib!process_manager.endpoint.Endpoint./Endpoint/?rf_counter Int) (lib!process_manager.endpoint.Endpoint./Endpoint/?owning_threads vstd!set.Set<usize.>.) (lib!process_manager.endpoint.Endpoint./Endpoint/?owning_container Int) (lib!process_manager.endpoint.Endpoint./Endpoint/?container_rev_ptr Int))) ((lib!process_manager.spec_impl.ProcessManager./ProcessManager (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?container_tree lib!process_manager.container_tree_spec_impl.ContainerTree.) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?process_perms vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>.) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?thread_perms vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>.) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?endpoint_perms vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>.) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?cpu_list lib!array.Array.))) ((lib!process_manager.cpu.Cpu./Cpu (lib!process_manager.cpu.Cpu./Cpu/?owning_container Int) (lib!process_manager.cpu.Cpu./Cpu/?active Bool) (lib!process_manager.cpu.Cpu./Cpu/?current_thread core!option.Option.))) ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?kernel_entries lib!array.Array.) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?kernel_entries_ghost vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?free_pcids lib!array_vec.ArrayVec.) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?pcid_to_proc_ptr lib!array.Array.) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?page_tables lib!array.Array.) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?page_table_pages vstd!set.Set<usize.>.) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?free_ioids lib!array_vec.ArrayVec.) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?iommu_tables lib!array.Array.) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?iommu_table_pages vstd!set.Set<usize.>.) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?root_table lib!memory_manager.root_table.RootTable.) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?root_table_cache vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>.) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?pci_bitmap lib!memory_manager.pci_bitmap.PCIBitMap.))) ((lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap (lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap/?bit_map %%Function%%) (lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap/?ghost_map vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>.))) ((lib!kernel.spec.Kernel./Kernel (lib!kernel.spec.Kernel./Kernel/?page_alloc lib!allocator.page_allocator_spec_impl.PageAllocator.) (lib!kernel.spec.Kernel./Kernel/?mem_man lib!memory_manager.spec_impl.MemoryManager.) (lib!kernel.spec.Kernel./Kernel/?proc_man lib!process_manager.spec_impl.ProcessManager.) (lib!kernel.spec.Kernel./Kernel/?page_mapping vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>.))) ((lib!define.ThreadState./SCHEDULED ) (lib!define.ThreadState./BLOCKED ) (lib!define.ThreadState./RUNNING ) (lib!define.ThreadState./TRANSIT )) ((lib!define.EndpointState./RECEIVE ) (lib!define.EndpointState./SEND )) ((lib!define.PageState./Unavailable4k ) (lib!define.PageState./Unavailable2m ) (lib!define.PageState./Unavailable1g ) (lib!define.PageState./Pagetable ) (lib!define.PageState./Allocated4k ) (lib!define.PageState./Allocated2m ) (lib!define.PageState./Allocated1g ) (lib!define.PageState./Free4k ) (lib!define.PageState./Free2m ) (lib!define.PageState./Free1g ) (lib!define.PageState./Mapped4k ) (lib!define.PageState./Mapped2m ) (lib!define.PageState./Mapped1g ) (lib!define.PageState./Merged2m ) (lib!define.PageState./Merged1g ) (lib!define.PageState./Io )) ((lib!define.RetValueType./SuccessUsize (lib!define.RetValueType./SuccessUsize/?value Int)) (lib!define.RetValueType./SuccessSeqUsize (lib!define.RetValueType./SuccessSeqUsize/?value vstd!seq.Seq<usize.>.)) (lib!define.RetValueType./SuccessPairUsize (lib!define.RetValueType./SuccessPairUsize/?value1 Int) (lib!define.RetValueType./SuccessPairUsize/?value2 Int)) (lib!define.RetValueType./SuccessThreeUsize (lib!define.RetValueType./SuccessThreeUsize/?value1 Int) (lib!define.RetValueType./SuccessThreeUsize/?value2 Int) (lib!define.RetValueType./SuccessThreeUsize/?value3 Int)) (lib!define.RetValueType./CpuIdle ) (lib!define.RetValueType./Error ) (lib!define.RetValueType./Else )) ((lib!trap.TrapFrameOption./TrapFrameOption (lib!trap.TrapFrameOption./TrapFrameOption/?reg lib!trap.Registers.) (lib!trap.TrapFrameOption./TrapFrameOption/?exists Bool))) ((lib!trap.Registers./Registers (lib!trap.Registers./Registers/?r15 Int) (lib!trap.Registers./Registers/?r14 Int) (lib!trap.Registers./Registers/?r13 Int) (lib!trap.Registers./Registers/?r12 Int) (lib!trap.Registers./Registers/?rbp Int) (lib!trap.Registers./Registers/?rbx Int) (lib!trap.Registers./Registers/?r11 Int) (lib!trap.Registers./Registers/?r10 Int) (lib!trap.Registers./Registers/?r9 Int) (lib!trap.Registers./Registers/?r8 Int) (lib!trap.Registers./Registers/?rcx Int) (lib!trap.Registers./Registers/?rdx Int) (lib!trap.Registers./Registers/?rsi Int) (lib!trap.Registers./Registers/?rdi Int) (lib!trap.Registers./Registers/?rax Int) (lib!trap.Registers./Registers/?error_code Int) (lib!trap.Registers./Registers/?rip Int) (lib!trap.Registers./Registers/?cs Int) (lib!trap.Registers./Registers/?flags Int) (lib!trap.Registers./Registers/?rsp Int) (lib!trap.Registers./Registers/?ss Int))) ((lib!array.Array./Array (lib!array.Array./Array/?seq Poly) (lib!array.Array./Array/?ar %%Function%%))) ((lib!array_set.ArraySet./ArraySet (lib!array_set.ArraySet./ArraySet/?data lib!array.Array.) (lib!array_set.ArraySet./ArraySet/?len Int) (lib!array_set.ArraySet./ArraySet/?set vstd!set.Set<usize.>.))) ((lib!array_vec.ArrayVec./ArrayVec (lib!array_vec.ArrayVec./ArrayVec/?data lib!array.Array.) (lib!array_vec.ArrayVec./ArrayVec/?len Int))) ((lib!va_range.VaRange4K./VaRange4K (lib!va_range.VaRange4K./VaRange4K/?start Int) (lib!va_range.VaRange4K./VaRange4K/?len Int) (lib!va_range.VaRange4K./VaRange4K/?view vstd!seq.Seq<usize.>.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly))) ((tuple%5./tuple%5 (tuple%5./tuple%5/?0 Poly) (tuple%5./tuple%5/?1 Poly) (tuple%5./tuple%5/?2 Poly) (tuple%5./tuple%5/?3 Poly) (tuple%5./tuple%5/?4 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun vstd!raw_ptr.MemContents./Init/0 (vstd!raw_ptr.MemContents.) Poly)
(declare-fun lib!slinkedlist.node.Node./Node/value (lib!slinkedlist.node.Node.) core!option.Option.)
(declare-fun lib!slinkedlist.node.Node./Node/next (lib!slinkedlist.node.Node.) Int)
(declare-fun lib!slinkedlist.node.Node./Node/prev (lib!slinkedlist.node.Node.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar (lib!slinkedlist.spec_impl_u.StaticLinkedList.) %%Function%%)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Poly)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list (lib!slinkedlist.spec_impl_u.StaticLinkedList.) vstd!seq.Seq<i32.>.)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list (lib!slinkedlist.spec_impl_u.StaticLinkedList.) vstd!seq.Seq<i32.>.)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Poly)
(declare-fun lib!pagetable.pagemap.PageMap./PageMap/ar (lib!pagetable.pagemap.PageMap.) lib!array.Array.)
(declare-fun lib!pagetable.pagemap.PageMap./PageMap/spec_seq (lib!pagetable.pagemap.PageMap.) vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntry./PageEntry/addr (lib!pagetable.entry.PageEntry.) Int)
(declare-fun lib!pagetable.entry.PageEntry./PageEntry/perm (lib!pagetable.entry.PageEntry.) lib!pagetable.entry.PageEntryPerm.)
(declare-fun lib!pagetable.entry.MapEntry./MapEntry/addr (lib!pagetable.entry.MapEntry.) Int)
(declare-fun lib!pagetable.entry.MapEntry./MapEntry/write (lib!pagetable.entry.MapEntry.) Bool)
(declare-fun lib!pagetable.entry.MapEntry./MapEntry/execute_disable (lib!pagetable.entry.MapEntry.) Bool)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (lib!pagetable.pagetable_spec_impl.PageTable.) Int)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid (lib!pagetable.pagetable_spec_impl.PageTable.) core!option.Option.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid (lib!pagetable.pagetable_spec_impl.PageTable.) core!option.Option.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (lib!pagetable.pagetable_spec_impl.PageTable.) Int)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./usize.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./tuple%2<usize./usize.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.)
(declare-fun lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g (lib!pagetable.pagetable_spec_impl.PageTable.) vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.)
(declare-fun lib!allocator.page.Page./Page/addr (lib!allocator.page.Page.) Int)
(declare-fun lib!allocator.page.Page./Page/state (lib!allocator.page.Page.) lib!define.PageState.)
(declare-fun lib!allocator.page.Page./Page/is_io_page (lib!allocator.page.Page.) Bool)
(declare-fun lib!allocator.page.Page./Page/rev_pointer (lib!allocator.page.Page.) Int)
(declare-fun lib!allocator.page.Page./Page/ref_count (lib!allocator.page.Page.) Int)
(declare-fun lib!allocator.page.Page./Page/owning_container (lib!allocator.page.Page.) core!option.Option.)
(declare-fun lib!allocator.page.Page./Page/mappings (lib!allocator.page.Page.) vstd!set.Set<tuple%2<usize./usize.>.>.)
(declare-fun lib!allocator.page.Page./Page/io_mappings (lib!allocator.page.Page.) vstd!set.Set<tuple%2<usize./usize.>.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (lib!allocator.page_allocator_spec_impl.PageAllocator.) lib!array.Array.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (lib!allocator.page_allocator_spec_impl.PageAllocator.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (lib!allocator.page_allocator_spec_impl.PageAllocator.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (lib!allocator.page_allocator_spec_impl.PageAllocator.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!set.Set<usize.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!set.Set<usize.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!set.Set<usize.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!set.Set<usize.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!set.Set<usize.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!set.Set<usize.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (lib!allocator.page_allocator_spec_impl.PageAllocator.) Poly)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (lib!allocator.page_allocator_spec_impl.PageAllocator.) Poly)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (lib!allocator.page_allocator_spec_impl.PageAllocator.) Poly)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!map.Map<usize./vstd!set.Set<usize.>.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!map.Map<usize./vstd!set.Set<usize.>.>.)
(declare-fun lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (lib!allocator.page_allocator_spec_impl.PageAllocator.) vstd!map.Map<usize./vstd!set.Set<usize.>.>.)
(declare-fun lib!process_manager.container.Container./Container/owned_procs (lib!process_manager.container.Container.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.container.Container./Container/parent (lib!process_manager.container.Container.) core!option.Option.)
(declare-fun lib!process_manager.container.Container./Container/parent_rev_ptr (lib!process_manager.container.Container.) core!option.Option.)
(declare-fun lib!process_manager.container.Container./Container/children (lib!process_manager.container.Container.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.container.Container./Container/owned_endpoints (lib!process_manager.container.Container.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.container.Container./Container/mem_quota (lib!process_manager.container.Container.) Int)
(declare-fun lib!process_manager.container.Container./Container/mem_used (lib!process_manager.container.Container.) Int)
(declare-fun lib!process_manager.container.Container./Container/owned_cpus (lib!process_manager.container.Container.) lib!array_set.ArraySet.)
(declare-fun lib!process_manager.container.Container./Container/scheduler (lib!process_manager.container.Container.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.container.Container./Container/depth (lib!process_manager.container.Container.) Int)
(declare-fun lib!process_manager.container.Container./Container/owned_threads (lib!process_manager.container.Container.) vstd!set.Set<usize.>.)
(declare-fun lib!process_manager.container.Container./Container/uppertree_seq (lib!process_manager.container.Container.) vstd!seq.Seq<usize.>.)
(declare-fun lib!process_manager.container.Container./Container/subtree_set (lib!process_manager.container.Container.) vstd!set.Set<usize.>.)
(declare-fun lib!process_manager.container.Container./Container/can_have_children (lib!process_manager.container.Container.) Bool)
(declare-fun lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (lib!process_manager.container_tree_spec_impl.ContainerTree.) Int)
(declare-fun lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (lib!process_manager.container_tree_spec_impl.ContainerTree.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)
(declare-fun lib!process_manager.process.Process./Process/owning_container (lib!process_manager.process.Process.) Int)
(declare-fun lib!process_manager.process.Process./Process/rev_ptr (lib!process_manager.process.Process.) Int)
(declare-fun lib!process_manager.process.Process./Process/pcid (lib!process_manager.process.Process.) Int)
(declare-fun lib!process_manager.process.Process./Process/ioid (lib!process_manager.process.Process.) core!option.Option.)
(declare-fun lib!process_manager.process.Process./Process/owned_threads (lib!process_manager.process.Process.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.thread.Thread./Thread/owning_container (lib!process_manager.thread.Thread.) Int)
(declare-fun lib!process_manager.thread.Thread./Thread/owning_proc (lib!process_manager.thread.Thread.) Int)
(declare-fun lib!process_manager.thread.Thread./Thread/state (lib!process_manager.thread.Thread.) lib!define.ThreadState.)
(declare-fun lib!process_manager.thread.Thread./Thread/proc_rev_ptr (lib!process_manager.thread.Thread.) Int)
(declare-fun lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (lib!process_manager.thread.Thread.) core!option.Option.)
(declare-fun lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (lib!process_manager.thread.Thread.) core!option.Option.)
(declare-fun lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (lib!process_manager.thread.Thread.) core!option.Option.)
(declare-fun lib!process_manager.thread.Thread./Thread/running_cpu (lib!process_manager.thread.Thread.) core!option.Option.)
(declare-fun lib!process_manager.thread.Thread./Thread/endpoint_descriptors (lib!process_manager.thread.Thread.) lib!array.Array.)
(declare-fun lib!process_manager.thread.Thread./Thread/ipc_payload (lib!process_manager.thread.Thread.) lib!process_manager.thread.IPCPayLoad.)
(declare-fun lib!process_manager.thread.Thread./Thread/error_code (lib!process_manager.thread.Thread.) core!option.Option.)
(declare-fun lib!process_manager.thread.Thread./Thread/trap_frame (lib!process_manager.thread.Thread.) lib!trap.TrapFrameOption.)
(declare-fun lib!process_manager.thread.IPCPayLoad./Message/va (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.thread.IPCPayLoad./Message/len (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.thread.IPCPayLoad./Pages/va_range (lib!process_manager.thread.IPCPayLoad.) lib!va_range.VaRange4K.)
(declare-fun lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.thread.IPCPayLoad./Pci/bus (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.thread.IPCPayLoad./Pci/dev (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.thread.IPCPayLoad./Pci/fun (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/queue (lib!process_manager.endpoint.Endpoint.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (lib!process_manager.endpoint.Endpoint.) lib!define.EndpointState.)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (lib!process_manager.endpoint.Endpoint.) Int)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (lib!process_manager.endpoint.Endpoint.) vstd!set.Set<usize.>.)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (lib!process_manager.endpoint.Endpoint.) Int)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (lib!process_manager.endpoint.Endpoint.) Int)
(declare-fun lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (lib!process_manager.spec_impl.ProcessManager.) lib!process_manager.container_tree_spec_impl.ContainerTree.)
(declare-fun lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (lib!process_manager.spec_impl.ProcessManager.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>.)
(declare-fun lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (lib!process_manager.spec_impl.ProcessManager.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>.)
(declare-fun lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (lib!process_manager.spec_impl.ProcessManager.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>.)
(declare-fun lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (lib!process_manager.spec_impl.ProcessManager.) lib!array.Array.)
(declare-fun lib!process_manager.cpu.Cpu./Cpu/owning_container (lib!process_manager.cpu.Cpu.) Int)
(declare-fun lib!process_manager.cpu.Cpu./Cpu/active (lib!process_manager.cpu.Cpu.) Bool)
(declare-fun lib!process_manager.cpu.Cpu./Cpu/current_thread (lib!process_manager.cpu.Cpu.) core!option.Option.)
(declare-fun lib!memory_manager.spec_impl.MemoryManager./MemoryManager/kernel_entries (lib!memory_manager.spec_impl.MemoryManager.) lib!array.Array.)
(declare-fun lib!memory_manager.spec_impl.MemoryManager./MemoryManager/kernel_entries_ghost (lib!memory_manager.spec_impl.MemoryManager.) vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.)
(declare-fun lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_pcids (lib!memory_manager.spec_impl.MemoryManager.) lib!array_vec.ArrayVec.)
(declare-fun lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pcid_to_proc_ptr (lib!memory_manager.spec_impl.MemoryManager.) lib!array.Array.)
(declare-fun lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (lib!memory_manager.spec_impl.MemoryManager.) lib!array.Array.)
(declare-fun lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_table_pages (lib!memory_manager.spec_impl.MemoryManager.) vstd!set.Set<usize.>.)
(declare-fun lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_ioids (lib!memory_manager.spec_impl.MemoryManager.) lib!array_vec.ArrayVec.)
(declare-fun lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (lib!memory_manager.spec_impl.MemoryManager.) lib!array.Array.)
(declare-fun lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_table_pages (lib!memory_manager.spec_impl.MemoryManager.) vstd!set.Set<usize.>.)
(declare-fun lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table (lib!memory_manager.spec_impl.MemoryManager.) lib!memory_manager.root_table.RootTable.)
(declare-fun lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table_cache (lib!memory_manager.spec_impl.MemoryManager.) vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>.)
(declare-fun lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pci_bitmap (lib!memory_manager.spec_impl.MemoryManager.) lib!memory_manager.pci_bitmap.PCIBitMap.)
(declare-fun lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap/bit_map (lib!memory_manager.pci_bitmap.PCIBitMap.) %%Function%%)
(declare-fun lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap/ghost_map (lib!memory_manager.pci_bitmap.PCIBitMap.) vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>.)
(declare-fun lib!kernel.spec.Kernel./Kernel/page_alloc (lib!kernel.spec.Kernel.) lib!allocator.page_allocator_spec_impl.PageAllocator.)
(declare-fun lib!kernel.spec.Kernel./Kernel/mem_man (lib!kernel.spec.Kernel.) lib!memory_manager.spec_impl.MemoryManager.)
(declare-fun lib!kernel.spec.Kernel./Kernel/proc_man (lib!kernel.spec.Kernel.) lib!process_manager.spec_impl.ProcessManager.)
(declare-fun lib!kernel.spec.Kernel./Kernel/page_mapping (lib!kernel.spec.Kernel.) vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>.)
(declare-fun lib!define.RetValueType./SuccessUsize/value (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessSeqUsize/value (lib!define.RetValueType.) vstd!seq.Seq<usize.>.)
(declare-fun lib!define.RetValueType./SuccessPairUsize/value1 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessPairUsize/value2 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessThreeUsize/value1 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessThreeUsize/value2 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessThreeUsize/value3 (lib!define.RetValueType.) Int)
(declare-fun lib!trap.TrapFrameOption./TrapFrameOption/reg (lib!trap.TrapFrameOption.) lib!trap.Registers.)
(declare-fun lib!trap.TrapFrameOption./TrapFrameOption/exists (lib!trap.TrapFrameOption.) Bool)
(declare-fun lib!trap.Registers./Registers/r15 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r14 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r13 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r12 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rbp (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rbx (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r11 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r10 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r9 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r8 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rcx (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rdx (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rsi (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rdi (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rax (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/error_code (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rip (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/cs (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/flags (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rsp (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/ss (lib!trap.Registers.) Int)
(declare-fun lib!array.Array./Array/seq (lib!array.Array.) Poly)
(declare-fun lib!array.Array./Array/ar (lib!array.Array.) %%Function%%)
(declare-fun lib!array_set.ArraySet./ArraySet/data (lib!array_set.ArraySet.) lib!array.Array.)
(declare-fun lib!array_set.ArraySet./ArraySet/len (lib!array_set.ArraySet.) Int)
(declare-fun lib!array_set.ArraySet./ArraySet/set (lib!array_set.ArraySet.) vstd!set.Set<usize.>.)
(declare-fun lib!array_vec.ArrayVec./ArrayVec/data (lib!array_vec.ArrayVec.) lib!array.Array.)
(declare-fun lib!array_vec.ArrayVec./ArrayVec/len (lib!array_vec.ArrayVec.) Int)
(declare-fun lib!va_range.VaRange4K./VaRange4K/start (lib!va_range.VaRange4K.) Int)
(declare-fun lib!va_range.VaRange4K./VaRange4K/len (lib!va_range.VaRange4K.) Int)
(declare-fun lib!va_range.VaRange4K./VaRange4K/view (lib!va_range.VaRange4K.) vstd!seq.Seq<usize.>.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun tuple%5./tuple%5/0 (tuple%5.) Poly)
(declare-fun tuple%5./tuple%5/1 (tuple%5.) Poly)
(declare-fun tuple%5./tuple%5/2 (tuple%5.) Poly)
(declare-fun tuple%5./tuple%5/3 (tuple%5.) Poly)
(declare-fun tuple%5./tuple%5/4 (tuple%5.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!raw_ptr.MemContents. (Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%vstd!simple_pptr.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%lib!slinkedlist.node.Node. (Dcr Type) Type)
(declare-fun TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Dcr Type Dcr Type) Type)
(declare-const TYPE%lib!pagetable.pagemap.PageMap. Type)
(declare-const TYPE%lib!pagetable.entry.PageEntryPerm. Type)
(declare-const TYPE%lib!pagetable.entry.PageEntry. Type)
(declare-const TYPE%lib!pagetable.entry.MapEntry. Type)
(declare-const TYPE%lib!pagetable.pagetable_spec_impl.PageTable. Type)
(declare-const TYPE%lib!allocator.page.Page. Type)
(declare-const TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator. Type)
(declare-const TYPE%lib!process_manager.container.Container. Type)
(declare-const TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree. Type)
(declare-const TYPE%lib!process_manager.process.Process. Type)
(declare-const TYPE%lib!process_manager.thread.Thread. Type)
(declare-const TYPE%lib!process_manager.thread.IPCPayLoad. Type)
(declare-const TYPE%lib!process_manager.endpoint.Endpoint. Type)
(declare-const TYPE%lib!process_manager.spec_impl.ProcessManager. Type)
(declare-const TYPE%lib!process_manager.cpu.Cpu. Type)
(declare-const TYPE%lib!memory_manager.spec_impl.MemoryManager. Type)
(declare-const TYPE%lib!memory_manager.pci_bitmap.PCIBitMap. Type)
(declare-const TYPE%lib!memory_manager.root_table.RootTable. Type)
(declare-const TYPE%lib!kernel.spec.Kernel. Type)
(declare-const TYPE%lib!define.ThreadState. Type)
(declare-const TYPE%lib!define.EndpointState. Type)
(declare-const TYPE%lib!define.PageState. Type)
(declare-const TYPE%lib!define.RetValueType. Type)
(declare-const TYPE%lib!trap.TrapFrameOption. Type)
(declare-const TYPE%lib!trap.Registers. Type)
(declare-fun TYPE%lib!array.Array. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%lib!array_set.ArraySet. (Dcr Type) Type)
(declare-fun TYPE%lib!array_vec.ArrayVec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%lib!va_range.VaRange4K. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%5. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%lib!memory_manager.root_table.RootTable. (lib!memory_manager.root_table.RootTable.) Poly)
(declare-fun %Poly%lib!memory_manager.root_table.RootTable. (Poly) lib!memory_manager.root_table.RootTable.)
(declare-fun Poly%vstd!map.Map<usize./usize.>. (vstd!map.Map<usize./usize.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./usize.>. (Poly) vstd!map.Map<usize./usize.>.)
(declare-fun Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (Poly) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(declare-fun Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (vstd!map.Map<usize./vstd!set.Set<usize.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (Poly) vstd!map.Map<usize./vstd!set.Set<usize.>.>.)
(declare-fun Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. (vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. (Poly) vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>.)
(declare-fun Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (Poly) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.)
(declare-fun Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (Poly) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)
(declare-fun Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (Poly) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>.)
(declare-fun Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (Poly) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>.)
(declare-fun Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (Poly) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>.)
(declare-fun Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (vstd!map.Map<usize./tuple%2<usize./usize.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (Poly) vstd!map.Map<usize./tuple%2<usize./usize.>.>.)
(declare-fun Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (Poly) vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>.)
(declare-fun Poly%vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>. (vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>.) Poly)
(declare-fun %Poly%vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>. (Poly) vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<i32.>. (vstd!seq.Seq<i32.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<i32.>. (Poly) vstd!seq.Seq<i32.>.)
(declare-fun Poly%vstd!seq.Seq<usize.>. (vstd!seq.Seq<usize.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<usize.>. (Poly) vstd!seq.Seq<usize.>.)
(declare-fun Poly%vstd!seq.Seq<core!option.Option<usize.>.>. (vstd!seq.Seq<core!option.Option<usize.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<core!option.Option<usize.>.>. (Poly) vstd!seq.Seq<core!option.Option<usize.>.>.)
(declare-fun Poly%vstd!seq.Seq<core!option.Option<lib!pagetable.pagetable_spec_impl.PageTable.>.>. (vstd!seq.Seq<core!option.Option<lib!pagetable.pagetable_spec_impl.PageTable.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<core!option.Option<lib!pagetable.pagetable_spec_impl.PageTable.>.>. (Poly) vstd!seq.Seq<core!option.Option<lib!pagetable.pagetable_spec_impl.PageTable.>.>.)
(declare-fun Poly%vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>. (vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>. (Poly) vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.)
(declare-fun Poly%vstd!seq.Seq<lib!allocator.page.Page.>. (vstd!seq.Seq<lib!allocator.page.Page.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!allocator.page.Page.>. (Poly) vstd!seq.Seq<lib!allocator.page.Page.>.)
(declare-fun Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (Poly) vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.)
(declare-fun Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. (vstd!seq.Seq<lib!process_manager.cpu.Cpu.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. (Poly) vstd!seq.Seq<lib!process_manager.cpu.Cpu.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (Poly) vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>. (vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>. (Poly) vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. (vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. (Poly) vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>.)
(declare-fun Poly%vstd!set.Set<usize.>. (vstd!set.Set<usize.>.) Poly)
(declare-fun %Poly%vstd!set.Set<usize.>. (Poly) vstd!set.Set<usize.>.)
(declare-fun Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (vstd!set.Set<tuple%2<usize./usize.>.>.) Poly)
(declare-fun %Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (Poly) vstd!set.Set<tuple%2<usize./usize.>.>.)
(declare-fun Poly%vstd!set.Set<tuple%4<usize./u8./u8./u8.>.>. (vstd!set.Set<tuple%4<usize./u8./u8./u8.>.>.) Poly)
(declare-fun %Poly%vstd!set.Set<tuple%4<usize./u8./u8./u8.>.>. (Poly) vstd!set.Set<tuple%4<usize./u8./u8./u8.>.>.)
(declare-fun Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. (vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.) Poly)
(declare-fun %Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. (Poly) vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)
(declare-fun Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. (vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) Poly)
(declare-fun %Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. (Poly) vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)
(declare-fun Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. (vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) Poly)
(declare-fun %Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. (Poly) vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.)
(declare-fun Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. (vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.) Poly)
(declare-fun %Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. (Poly) vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.)
(declare-fun Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. (vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) Poly)
(declare-fun %Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. (Poly) vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents.) Poly)
(declare-fun %Poly%vstd!raw_ptr.MemContents. (Poly) vstd!raw_ptr.MemContents.)
(declare-fun Poly%lib!slinkedlist.node.Node. (lib!slinkedlist.node.Node.) Poly)
(declare-fun %Poly%lib!slinkedlist.node.Node. (Poly) lib!slinkedlist.node.Node.)
(declare-fun Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Poly)
(declare-fun %Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun Poly%lib!pagetable.pagemap.PageMap. (lib!pagetable.pagemap.PageMap.) Poly)
(declare-fun %Poly%lib!pagetable.pagemap.PageMap. (Poly) lib!pagetable.pagemap.PageMap.)
(declare-fun Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntryPerm.) Poly)
(declare-fun %Poly%lib!pagetable.entry.PageEntryPerm. (Poly) lib!pagetable.entry.PageEntryPerm.)
(declare-fun Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.PageEntry.) Poly)
(declare-fun %Poly%lib!pagetable.entry.PageEntry. (Poly) lib!pagetable.entry.PageEntry.)
(declare-fun Poly%lib!pagetable.entry.MapEntry. (lib!pagetable.entry.MapEntry.) Poly)
(declare-fun %Poly%lib!pagetable.entry.MapEntry. (Poly) lib!pagetable.entry.MapEntry.)
(declare-fun Poly%lib!pagetable.pagetable_spec_impl.PageTable. (lib!pagetable.pagetable_spec_impl.PageTable.) Poly)
(declare-fun %Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly) lib!pagetable.pagetable_spec_impl.PageTable.)
(declare-fun Poly%lib!allocator.page.Page. (lib!allocator.page.Page.) Poly)
(declare-fun %Poly%lib!allocator.page.Page. (Poly) lib!allocator.page.Page.)
(declare-fun Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!allocator.page_allocator_spec_impl.PageAllocator.) Poly)
(declare-fun %Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly) lib!allocator.page_allocator_spec_impl.PageAllocator.)
(declare-fun Poly%lib!process_manager.container.Container. (lib!process_manager.container.Container.) Poly)
(declare-fun %Poly%lib!process_manager.container.Container. (Poly) lib!process_manager.container.Container.)
(declare-fun Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.container_tree_spec_impl.ContainerTree.) Poly)
(declare-fun %Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly) lib!process_manager.container_tree_spec_impl.ContainerTree.)
(declare-fun Poly%lib!process_manager.process.Process. (lib!process_manager.process.Process.) Poly)
(declare-fun %Poly%lib!process_manager.process.Process. (Poly) lib!process_manager.process.Process.)
(declare-fun Poly%lib!process_manager.thread.Thread. (lib!process_manager.thread.Thread.) Poly)
(declare-fun %Poly%lib!process_manager.thread.Thread. (Poly) lib!process_manager.thread.Thread.)
(declare-fun Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad.) Poly)
(declare-fun %Poly%lib!process_manager.thread.IPCPayLoad. (Poly) lib!process_manager.thread.IPCPayLoad.)
(declare-fun Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.endpoint.Endpoint.) Poly)
(declare-fun %Poly%lib!process_manager.endpoint.Endpoint. (Poly) lib!process_manager.endpoint.Endpoint.)
(declare-fun Poly%lib!process_manager.spec_impl.ProcessManager. (lib!process_manager.spec_impl.ProcessManager.) Poly)
(declare-fun %Poly%lib!process_manager.spec_impl.ProcessManager. (Poly) lib!process_manager.spec_impl.ProcessManager.)
(declare-fun Poly%lib!process_manager.cpu.Cpu. (lib!process_manager.cpu.Cpu.) Poly)
(declare-fun %Poly%lib!process_manager.cpu.Cpu. (Poly) lib!process_manager.cpu.Cpu.)
(declare-fun Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!memory_manager.spec_impl.MemoryManager.) Poly)
(declare-fun %Poly%lib!memory_manager.spec_impl.MemoryManager. (Poly) lib!memory_manager.spec_impl.MemoryManager.)
(declare-fun Poly%lib!memory_manager.pci_bitmap.PCIBitMap. (lib!memory_manager.pci_bitmap.PCIBitMap.) Poly)
(declare-fun %Poly%lib!memory_manager.pci_bitmap.PCIBitMap. (Poly) lib!memory_manager.pci_bitmap.PCIBitMap.)
(declare-fun Poly%lib!kernel.spec.Kernel. (lib!kernel.spec.Kernel.) Poly)
(declare-fun %Poly%lib!kernel.spec.Kernel. (Poly) lib!kernel.spec.Kernel.)
(declare-fun Poly%lib!define.ThreadState. (lib!define.ThreadState.) Poly)
(declare-fun %Poly%lib!define.ThreadState. (Poly) lib!define.ThreadState.)
(declare-fun Poly%lib!define.EndpointState. (lib!define.EndpointState.) Poly)
(declare-fun %Poly%lib!define.EndpointState. (Poly) lib!define.EndpointState.)
(declare-fun Poly%lib!define.PageState. (lib!define.PageState.) Poly)
(declare-fun %Poly%lib!define.PageState. (Poly) lib!define.PageState.)
(declare-fun Poly%lib!define.RetValueType. (lib!define.RetValueType.) Poly)
(declare-fun %Poly%lib!define.RetValueType. (Poly) lib!define.RetValueType.)
(declare-fun Poly%lib!trap.TrapFrameOption. (lib!trap.TrapFrameOption.) Poly)
(declare-fun %Poly%lib!trap.TrapFrameOption. (Poly) lib!trap.TrapFrameOption.)
(declare-fun Poly%lib!trap.Registers. (lib!trap.Registers.) Poly)
(declare-fun %Poly%lib!trap.Registers. (Poly) lib!trap.Registers.)
(declare-fun Poly%lib!array.Array. (lib!array.Array.) Poly)
(declare-fun %Poly%lib!array.Array. (Poly) lib!array.Array.)
(declare-fun Poly%lib!array_set.ArraySet. (lib!array_set.ArraySet.) Poly)
(declare-fun %Poly%lib!array_set.ArraySet. (Poly) lib!array_set.ArraySet.)
(declare-fun Poly%lib!array_vec.ArrayVec. (lib!array_vec.ArrayVec.) Poly)
(declare-fun %Poly%lib!array_vec.ArrayVec. (Poly) lib!array_vec.ArrayVec.)
(declare-fun Poly%lib!va_range.VaRange4K. (lib!va_range.VaRange4K.) Poly)
(declare-fun %Poly%lib!va_range.VaRange4K. (Poly) lib!va_range.VaRange4K.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(declare-fun Poly%tuple%5. (tuple%5.) Poly)
(declare-fun %Poly%tuple%5. (Poly) tuple%5.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x lib!memory_manager.root_table.RootTable.)) (! (= x (%Poly%lib!memory_manager.root_table.RootTable. (Poly%lib!memory_manager.root_table.RootTable. x))) :pattern ((Poly%lib!memory_manager.root_table.RootTable. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!memory_manager.root_table.RootTable.) (= x (Poly%lib!memory_manager.root_table.RootTable. (%Poly%lib!memory_manager.root_table.RootTable. x)))) :pattern ((has_type x TYPE%lib!memory_manager.root_table.RootTable.)))))
(assert (forall ((x lib!memory_manager.root_table.RootTable.)) (! (has_type (Poly%lib!memory_manager.root_table.RootTable. x) TYPE%lib!memory_manager.root_table.RootTable.) :pattern ((has_type (Poly%lib!memory_manager.root_table.RootTable. x) TYPE%lib!memory_manager.root_table.RootTable.)))))
(assert (forall ((x vstd!map.Map<usize./usize.>.)) (! (= x (%Poly%vstd!map.Map<usize./usize.>. (Poly%vstd!map.Map<usize./usize.>. x))) :pattern ((Poly%vstd!map.Map<usize./usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (UINT SZ))) (= x (Poly%vstd!map.Map<usize./usize.>. (%Poly%vstd!map.Map<usize./usize.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (UINT SZ)))))))
(assert (forall ((x vstd!map.Map<usize./usize.>.)) (! (has_type (Poly%vstd!map.Map<usize./usize.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (UINT SZ))) :pattern ((has_type (Poly%vstd!map.Map<usize./usize.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (UINT SZ)))))))
(assert (forall ((x vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)) (! (= x (%Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. x))) :pattern ((Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.)) (= x (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (%Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.))))))
(assert (forall ((x vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)) (! (has_type (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.)) :pattern ((has_type (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.))))))
(assert (forall ((x vstd!map.Map<usize./vstd!set.Set<usize.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)))) (= x (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (%Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))))))))
(assert (forall ((x vstd!map.Map<usize./vstd!set.Set<usize.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)))) :pattern ((has_type (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ))))))))
(assert (forall ((x vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. (Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))) (= x (Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. (%Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))))))))
(assert (forall ((x vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))) :pattern ((has_type (Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.))) (= x (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.))) :pattern ((has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.))) (= x (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.))) :pattern ((has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.))) (= x (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.))) :pattern ((has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.))) (= x (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.))) :pattern ((has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.))) (= x (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.))) :pattern ((has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.)))))))
(assert (forall ((x vstd!map.Map<usize./tuple%2<usize./usize.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) (= x (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. (%Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))))))
(assert (forall ((x vstd!map.Map<usize./tuple%2<usize./usize.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) :pattern ((has_type (Poly%vstd!map.Map<usize./tuple%2<usize./usize.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))))))
(assert (forall ((x vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) (= x (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. (%Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ))))))))
(assert (forall ((x vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) :pattern ((has_type (Poly%vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%tuple%3. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ))))))))
(assert (forall ((x vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>.)) (! (= x (%Poly%vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>. (Poly%vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>. x))) :pattern ((Poly%vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (TYPE%tuple%4. $ (UINT SZ) $ (UINT 8) $ (UINT 8) $ (UINT 8)) $ BOOL)) (= x (Poly%vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>. (%Poly%vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (TYPE%tuple%4. $ (UINT SZ) $ (UINT 8) $ (UINT 8) $ (UINT 8)) $ BOOL))))))
(assert (forall ((x vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>.)) (! (has_type (Poly%vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>. x) (TYPE%vstd!map.Map. $ (TYPE%tuple%4. $ (UINT SZ) $ (UINT 8) $ (UINT 8) $ (UINT 8)) $ BOOL)) :pattern ((has_type (Poly%vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>. x) (TYPE%vstd!map.Map. $ (TYPE%tuple%4. $ (UINT SZ) $ (UINT 8) $ (UINT 8) $ (UINT 8)) $ BOOL))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<i32.>.)) (! (= x (%Poly%vstd!seq.Seq<i32.>. (Poly%vstd!seq.Seq<i32.>. x))) :pattern ((Poly%vstd!seq.Seq<i32.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (SINT 32))) (= x (Poly%vstd!seq.Seq<i32.>. (%Poly%vstd!seq.Seq<i32.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (SINT 32)))))))
(assert (forall ((x vstd!seq.Seq<i32.>.)) (! (has_type (Poly%vstd!seq.Seq<i32.>. x) (TYPE%vstd!seq.Seq. $ (SINT 32))) :pattern ((has_type (Poly%vstd!seq.Seq<i32.>. x) (TYPE%vstd!seq.Seq. $ (SINT 32)))))))
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (= x (%Poly%vstd!seq.Seq<usize.>. (Poly%vstd!seq.Seq<usize.>. x))) :pattern ((Poly%vstd!seq.Seq<usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ))) (= x (Poly%vstd!seq.Seq<usize.>. (%Poly%vstd!seq.Seq<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ)))))))
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ)))))))
(assert (forall ((x vstd!seq.Seq<core!option.Option<usize.>.>.)) (! (= x (%Poly%vstd!seq.Seq<core!option.Option<usize.>.>. (Poly%vstd!seq.Seq<core!option.Option<usize.>.>. x))) :pattern ((Poly%vstd!seq.Seq<core!option.Option<usize.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (UINT SZ)))) (= x (Poly%vstd!seq.Seq<core!option.Option<usize.>.>. (%Poly%vstd!seq.Seq<core!option.Option<usize.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (UINT SZ))))))))
(assert (forall ((x vstd!seq.Seq<core!option.Option<usize.>.>.)) (! (has_type (Poly%vstd!seq.Seq<core!option.Option<usize.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((has_type (Poly%vstd!seq.Seq<core!option.Option<usize.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (UINT SZ))))))))
(assert (forall ((x vstd!seq.Seq<core!option.Option<lib!pagetable.pagetable_spec_impl.PageTable.>.>.)) (! (= x (%Poly%vstd!seq.Seq<core!option.Option<lib!pagetable.pagetable_spec_impl.PageTable.>.>. (Poly%vstd!seq.Seq<core!option.Option<lib!pagetable.pagetable_spec_impl.PageTable.>.>. x))) :pattern ((Poly%vstd!seq.Seq<core!option.Option<lib!pagetable.pagetable_spec_impl.PageTable.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.))) (= x (Poly%vstd!seq.Seq<core!option.Option<lib!pagetable.pagetable_spec_impl.PageTable.>.>. (%Poly%vstd!seq.Seq<core!option.Option<lib!pagetable.pagetable_spec_impl.PageTable.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)))))))
(assert (forall ((x vstd!seq.Seq<core!option.Option<lib!pagetable.pagetable_spec_impl.PageTable.>.>.)) (! (has_type (Poly%vstd!seq.Seq<core!option.Option<lib!pagetable.pagetable_spec_impl.PageTable.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.))) :pattern ((has_type (Poly%vstd!seq.Seq<core!option.Option<lib!pagetable.pagetable_spec_impl.PageTable.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)))))))
(assert (forall ((x vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.)) (! (= x (%Poly%vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>. (Poly%vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>. x))) :pattern ((Poly%vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))) (= x (Poly%vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>. (%Poly%vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))))))))
(assert (forall ((x vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.)) (! (has_type (Poly%vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))) :pattern ((has_type (Poly%vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))))))))
(assert (forall ((x vstd!seq.Seq<lib!allocator.page.Page.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!allocator.page.Page.>. (Poly%vstd!seq.Seq<lib!allocator.page.Page.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!allocator.page.Page.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!allocator.page.Page.)) (= x (Poly%vstd!seq.Seq<lib!allocator.page.Page.>. (%Poly%vstd!seq.Seq<lib!allocator.page.Page.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!allocator.page.Page.))))))
(assert (forall ((x vstd!seq.Seq<lib!allocator.page.Page.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!allocator.page.Page.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!allocator.page.Page.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!allocator.page.Page.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!allocator.page.Page.))))))
(assert (forall ((x vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pagetable.entry.PageEntry.)) (= x (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (%Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pagetable.entry.PageEntry.))))))
(assert (forall ((x vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pagetable.entry.PageEntry.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pagetable.entry.PageEntry.))))))
(assert (forall ((x vstd!seq.Seq<lib!process_manager.cpu.Cpu.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. (Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!process_manager.cpu.Cpu.)) (= x (Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. (%Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!process_manager.cpu.Cpu.))))))
(assert (forall ((x vstd!seq.Seq<lib!process_manager.cpu.Cpu.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!process_manager.cpu.Cpu.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!process_manager.cpu.Cpu.))))))
(assert (forall ((x vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.))) (= x (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. (%Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.)))))))
(assert (forall ((x vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.))) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!map.Map. $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.)))))))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>. (Poly%vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))))) (= x (Poly%vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>. (%Poly%vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))))))))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))))) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))))))))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. (Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))))) (= x (Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. (%Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))))))))))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))))) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))))))))))
(assert (forall ((x vstd!set.Set<usize.>.)) (! (= x (%Poly%vstd!set.Set<usize.>. (Poly%vstd!set.Set<usize.>. x))) :pattern ((Poly%vstd!set.Set<usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (UINT SZ))) (= x (Poly%vstd!set.Set<usize.>. (%Poly%vstd!set.Set<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (UINT SZ)))))))
(assert (forall ((x vstd!set.Set<usize.>.)) (! (has_type (Poly%vstd!set.Set<usize.>. x) (TYPE%vstd!set.Set. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!set.Set<usize.>. x) (TYPE%vstd!set.Set. $ (UINT SZ)))))))
(assert (forall ((x vstd!set.Set<tuple%2<usize./usize.>.>.)) (! (= x (%Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. x))) :pattern ((Poly%vstd!set.Set<tuple%2<usize./usize.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) (= x (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (%Poly%vstd!set.Set<tuple%2<usize./usize.>.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))))))
(assert (forall ((x vstd!set.Set<tuple%2<usize./usize.>.>.)) (! (has_type (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) :pattern ((has_type (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))))))
(assert (forall ((x vstd!set.Set<tuple%4<usize./u8./u8./u8.>.>.)) (! (= x (%Poly%vstd!set.Set<tuple%4<usize./u8./u8./u8.>.>. (Poly%vstd!set.Set<tuple%4<usize./u8./u8./u8.>.>. x))) :pattern ((Poly%vstd!set.Set<tuple%4<usize./u8./u8./u8.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (TYPE%tuple%4. $ (UINT SZ) $ (UINT 8) $ (UINT 8) $ (UINT 8)))) (= x (Poly%vstd!set.Set<tuple%4<usize./u8./u8./u8.>.>. (%Poly%vstd!set.Set<tuple%4<usize./u8./u8./u8.>.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (TYPE%tuple%4. $ (UINT SZ) $ (UINT 8) $ (UINT 8) $ (UINT 8))))))))
(assert (forall ((x vstd!set.Set<tuple%4<usize./u8./u8./u8.>.>.)) (! (has_type (Poly%vstd!set.Set<tuple%4<usize./u8./u8./u8.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%tuple%4. $ (UINT SZ) $ (UINT 8) $ (UINT 8) $ (UINT 8)))) :pattern ((has_type (Poly%vstd!set.Set<tuple%4<usize./u8./u8./u8.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%tuple%4. $ (UINT SZ) $ (UINT 8) $ (UINT 8) $ (UINT 8))))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)) (! (= x (%Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. x))) :pattern ((Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.)) (= x (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. (%Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. x)))) :pattern ((has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.)) (! (has_type (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.)) :pattern ((has_type (Poly%vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)) (! (= x (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. x))) :pattern ((Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.)) (= x (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. x)))) :pattern ((has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)) (! (has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.)) :pattern ((has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.)) (! (= x (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. x))) :pattern ((Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.)) (= x (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. x)))) :pattern ((has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.)) (! (has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.)) :pattern ((has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.)) (! (= x (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. x))) :pattern ((Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.)) (= x (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. x)))) :pattern ((has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.)) (! (has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.)) :pattern ((has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.)) (! (= x (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. x))) :pattern ((Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.)) (= x (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. x)))) :pattern ((has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.)) (! (has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.)) :pattern ((has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= x (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. x))) :pattern ((Poly%vstd!raw_ptr.MemContents. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (= x (Poly%vstd!raw_ptr.MemContents. (%Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&)) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= (vstd!raw_ptr.MemContents./Init/0 x) (vstd!raw_ptr.MemContents./Init/?0 x)) :pattern ((vstd!raw_ptr.MemContents./Init/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) T&)) :pattern ((vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(define-fun is-vstd!raw_ptr.MemContents./Init_ ((c vstd!raw_ptr.MemContents.)) Bool ((_ is vstd!raw_ptr.MemContents./Init) c))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (=> (is-vstd!raw_ptr.MemContents./Init_ x) (height_lt (height (vstd!raw_ptr.MemContents./Init/0 x)) (height (Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((height (vstd!raw_ptr.MemContents./Init/0 x))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= x (%Poly%lib!slinkedlist.node.Node. (Poly%lib!slinkedlist.node.Node. x))) :pattern ((Poly%lib!slinkedlist.node.Node. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (= x (Poly%lib!slinkedlist.node.Node. (%Poly%lib!slinkedlist.node.Node. x)))) :pattern ((has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! core!option.Option.) (_next! Int) (_prev! Int)) (! (=> (and (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. T&. T&)) (iInv 32 _next!) (iInv 32 _prev!)) (has_type (Poly%lib!slinkedlist.node.Node. (lib!slinkedlist.node.Node./Node _value! _next! _prev!)) (TYPE%lib!slinkedlist.node.Node. T&. T&))) :pattern ((has_type (Poly%lib!slinkedlist.node.Node. (lib!slinkedlist.node.Node./Node _value! _next! _prev!)) (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= (lib!slinkedlist.node.Node./Node/value x) (lib!slinkedlist.node.Node./Node/?value x)) :pattern ((lib!slinkedlist.node.Node./Node/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (has_type (Poly%core!option.Option. (lib!slinkedlist.node.Node./Node/value (%Poly%lib!slinkedlist.node.Node. x))) (TYPE%core!option.Option. T&. T&))) :pattern ((lib!slinkedlist.node.Node./Node/value (%Poly%lib!slinkedlist.node.Node. x)) (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= (lib!slinkedlist.node.Node./Node/next x) (lib!slinkedlist.node.Node./Node/?next x)) :pattern ((lib!slinkedlist.node.Node./Node/next x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (iInv 32 (lib!slinkedlist.node.Node./Node/next (%Poly%lib!slinkedlist.node.Node. x)))) :pattern ((lib!slinkedlist.node.Node./Node/next (%Poly%lib!slinkedlist.node.Node. x)) (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= (lib!slinkedlist.node.Node./Node/prev x) (lib!slinkedlist.node.Node./Node/?prev x)) :pattern ((lib!slinkedlist.node.Node./Node/prev x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (iInv 32 (lib!slinkedlist.node.Node./Node/prev (%Poly%lib!slinkedlist.node.Node. x)))) :pattern ((lib!slinkedlist.node.Node./Node/prev (%Poly%lib!slinkedlist.node.Node. x)) (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(define-fun is-lib!slinkedlist.node.Node./Node_ ((c lib!slinkedlist.node.Node.)) Bool ((_ is lib!slinkedlist.node.Node./Node) c))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (=> (is-lib!slinkedlist.node.Node./Node_ x) (height_lt (height (Poly%core!option.Option. (lib!slinkedlist.node.Node./Node/value x))) (height (Poly%lib!slinkedlist.node.Node. x)))) :pattern ((height (Poly%core!option.Option. (lib!slinkedlist.node.Node./Node/value x)))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= x (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x))) :pattern ((Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (= x (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (_ar! %%Function%%) (_spec_seq! Poly) (_value_list! vstd!seq.Seq<i32.>.) (_value_list_head! Int) (_value_list_tail! Int) (_value_list_len! Int) (_free_list! vstd!seq.Seq<i32.>.) (_free_list_head! Int) (_free_list_tail! Int) (_free_list_len! Int) (_size! Int) (_arr_seq! Poly)) (! (=> (and (has_type (Poly%array%. _ar!) (ARRAY $ (TYPE%lib!slinkedlist.node.Node. T&. T&) N&. N&)) (has_type _spec_seq! (TYPE%vstd!seq.Seq. T&. T&)) (iInv 32 _value_list_head!) (iInv 32 _value_list_tail!) (uInv SZ _value_list_len!) (iInv 32 _free_list_head!) (iInv 32 _free_list_tail!) (uInv SZ _free_list_len!) (uInv SZ _size!) (has_type _arr_seq! (TYPE%vstd!seq.Seq. $ (TYPE%lib!slinkedlist.node.Node. T&. T&)))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList _ar! _spec_seq! _value_list! _value_list_head! _value_list_tail! _value_list_len! _free_list! _free_list_head! _free_list_tail! _free_list_len! _size! _arr_seq!)) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) :pattern ((has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList _ar! _spec_seq! _value_list! _value_list_head! _value_list_tail! _value_list_len! _free_list! _free_list_head! _free_list_tail! _free_list_len! _size! _arr_seq!)) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?ar x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (Poly%array%. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x))) (ARRAY $ (TYPE%lib!slinkedlist.node.Node. T&. T&) N&. N&))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?spec_seq x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list x)))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_head x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_tail x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_len x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list x)))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_head x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_tail x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_len x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?size x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?arr_seq x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (TYPE%vstd!seq.Seq. $ (TYPE%lib!slinkedlist.node.Node. T&. T&)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(define-fun is-lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList_ ((c lib!slinkedlist.spec_impl_u.StaticLinkedList.)) Bool ((_ is lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList) c))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (=> (is-lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList_ x) (height_lt (height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x)) (height (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (=> (is-lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList_ x) (height_lt (height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x)) (height (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x))))))
(assert (forall ((x lib!pagetable.pagemap.PageMap.)) (! (= x (%Poly%lib!pagetable.pagemap.PageMap. (Poly%lib!pagetable.pagemap.PageMap. x))) :pattern ((Poly%lib!pagetable.pagemap.PageMap. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.pagemap.PageMap.) (= x (Poly%lib!pagetable.pagemap.PageMap. (%Poly%lib!pagetable.pagemap.PageMap. x)))) :pattern ((has_type x TYPE%lib!pagetable.pagemap.PageMap.)))))
(assert (forall ((_ar! lib!array.Array.) (_spec_seq! vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.)) (! (=> (has_type (Poly%lib!array.Array. _ar!) (TYPE%lib!array.Array. $ (UINT SZ) $ (CONST_INT 512))) (has_type (Poly%lib!pagetable.pagemap.PageMap. (lib!pagetable.pagemap.PageMap./PageMap _ar! _spec_seq!)) TYPE%lib!pagetable.pagemap.PageMap.)) :pattern ((has_type (Poly%lib!pagetable.pagemap.PageMap. (lib!pagetable.pagemap.PageMap./PageMap _ar! _spec_seq!)) TYPE%lib!pagetable.pagemap.PageMap.)))))
(assert (forall ((x lib!pagetable.pagemap.PageMap.)) (! (= (lib!pagetable.pagemap.PageMap./PageMap/ar x) (lib!pagetable.pagemap.PageMap./PageMap/?ar x)) :pattern ((lib!pagetable.pagemap.PageMap./PageMap/ar x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.pagemap.PageMap.) (has_type (Poly%lib!array.Array. (lib!pagetable.pagemap.PageMap./PageMap/ar (%Poly%lib!pagetable.pagemap.PageMap. x))) (TYPE%lib!array.Array. $ (UINT SZ) $ (CONST_INT 512)))) :pattern ((lib!pagetable.pagemap.PageMap./PageMap/ar (%Poly%lib!pagetable.pagemap.PageMap. x)) (has_type x TYPE%lib!pagetable.pagemap.PageMap.)))))
(assert (forall ((x lib!pagetable.pagemap.PageMap.)) (! (= (lib!pagetable.pagemap.PageMap./PageMap/spec_seq x) (lib!pagetable.pagemap.PageMap./PageMap/?spec_seq x)) :pattern ((lib!pagetable.pagemap.PageMap./PageMap/spec_seq x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= x (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. x))) :pattern ((Poly%lib!pagetable.entry.PageEntryPerm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.PageEntryPerm.) (= x (Poly%lib!pagetable.entry.PageEntryPerm. (%Poly%lib!pagetable.entry.PageEntryPerm. x)))) :pattern ((has_type x TYPE%lib!pagetable.entry.PageEntryPerm.)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?present x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?ps x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?write x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?execute_disable x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?user x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (has_type (Poly%lib!pagetable.entry.PageEntryPerm. x) TYPE%lib!pagetable.entry.PageEntryPerm.) :pattern ((has_type (Poly%lib!pagetable.entry.PageEntryPerm. x) TYPE%lib!pagetable.entry.PageEntryPerm.)))))
(assert (forall ((x lib!pagetable.entry.PageEntry.)) (! (= x (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. x))) :pattern ((Poly%lib!pagetable.entry.PageEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.PageEntry.) (= x (Poly%lib!pagetable.entry.PageEntry. (%Poly%lib!pagetable.entry.PageEntry. x)))) :pattern ((has_type x TYPE%lib!pagetable.entry.PageEntry.)))))
(assert (forall ((_addr! Int) (_perm! lib!pagetable.entry.PageEntryPerm.)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.PageEntry./PageEntry _addr! _perm!)) TYPE%lib!pagetable.entry.PageEntry.)) :pattern ((has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.PageEntry./PageEntry _addr! _perm!)) TYPE%lib!pagetable.entry.PageEntry.)))))
(assert (forall ((x lib!pagetable.entry.PageEntry.)) (! (= (lib!pagetable.entry.PageEntry./PageEntry/addr x) (lib!pagetable.entry.PageEntry./PageEntry/?addr x)) :pattern ((lib!pagetable.entry.PageEntry./PageEntry/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.PageEntry.) (uInv SZ (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. x)))) :pattern ((lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. x)) (has_type x TYPE%lib!pagetable.entry.PageEntry.)))))
(assert (forall ((x lib!pagetable.entry.PageEntry.)) (! (= (lib!pagetable.entry.PageEntry./PageEntry/perm x) (lib!pagetable.entry.PageEntry./PageEntry/?perm x)) :pattern ((lib!pagetable.entry.PageEntry./PageEntry/perm x)))))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= x (%Poly%lib!pagetable.entry.MapEntry. (Poly%lib!pagetable.entry.MapEntry. x))) :pattern ((Poly%lib!pagetable.entry.MapEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.MapEntry.) (= x (Poly%lib!pagetable.entry.MapEntry. (%Poly%lib!pagetable.entry.MapEntry. x)))) :pattern ((has_type x TYPE%lib!pagetable.entry.MapEntry.)))))
(assert (forall ((_addr! Int) (_write! Bool) (_execute_disable! Bool)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!pagetable.entry.MapEntry. (lib!pagetable.entry.MapEntry./MapEntry _addr! _write! _execute_disable!)) TYPE%lib!pagetable.entry.MapEntry.)) :pattern ((has_type (Poly%lib!pagetable.entry.MapEntry. (lib!pagetable.entry.MapEntry./MapEntry _addr! _write! _execute_disable!)) TYPE%lib!pagetable.entry.MapEntry.)))))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= (lib!pagetable.entry.MapEntry./MapEntry/addr x) (lib!pagetable.entry.MapEntry./MapEntry/?addr x)) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.MapEntry.) (uInv SZ (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. x)))) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. x)) (has_type x TYPE%lib!pagetable.entry.MapEntry.)))))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= (lib!pagetable.entry.MapEntry./MapEntry/write x) (lib!pagetable.entry.MapEntry./MapEntry/?write x)) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/write x)))))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= (lib!pagetable.entry.MapEntry./MapEntry/execute_disable x) (lib!pagetable.entry.MapEntry./MapEntry/?execute_disable x)) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/execute_disable x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= x (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (Poly%lib!pagetable.pagetable_spec_impl.PageTable. x))) :pattern ((Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (= x (Poly%lib!pagetable.pagetable_spec_impl.PageTable. (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)))) :pattern ((has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)))))
(assert (forall ((_cr3! Int) (_pcid! core!option.Option.) (_ioid! core!option.Option.) (_kernel_l4_end! Int) (_l4_table! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (_l3_rev_map! vstd!map.Map<usize./usize.>.) (_l3_tables! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (_l2_rev_map! vstd!map.Map<usize./tuple%2<usize./usize.>.>.) (_l2_tables! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (_l1_rev_map! vstd!map.Map<usize./tuple%3<usize./usize./usize.>.>.) (_l1_tables! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>.) (_mapping_4k! vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.) (_mapping_2m! vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.) (_mapping_1g! vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.) (_kernel_entries! vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.) (_tlb_mapping_4k! vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.) (_tlb_mapping_2m! vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.) (_tlb_mapping_1g! vstd!seq.Seq<vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.>.)) (! (=> (and (uInv SZ _cr3!) (has_type (Poly%core!option.Option. _pcid!) (TYPE%core!option.Option. $ (UINT SZ))) (has_type (Poly%core!option.Option. _ioid!) (TYPE%core!option.Option. $ (UINT SZ))) (uInv SZ _kernel_l4_end!)) (has_type (Poly%lib!pagetable.pagetable_spec_impl.PageTable. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable _cr3! _pcid! _ioid! _kernel_l4_end! _l4_table! _l3_rev_map! _l3_tables! _l2_rev_map! _l2_tables! _l1_rev_map! _l1_tables! _mapping_4k! _mapping_2m! _mapping_1g! _kernel_entries! _tlb_mapping_4k! _tlb_mapping_2m! _tlb_mapping_1g!)) TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)) :pattern ((has_type (Poly%lib!pagetable.pagetable_spec_impl.PageTable. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable _cr3! _pcid! _ioid! _kernel_l4_end! _l4_table! _l3_rev_map! _l3_tables! _l2_rev_map! _l2_tables! _l1_rev_map! _l1_tables! _mapping_4k! _mapping_2m! _mapping_1g! _kernel_entries! _tlb_mapping_4k! _tlb_mapping_2m! _tlb_mapping_1g!)) TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?cr3 x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (uInv SZ (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)))) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)) (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?pcid x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (has_type (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)) (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?ioid x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (has_type (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)) (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?kernel_l4_end x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (uInv SZ (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)))) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. x)) (has_type x TYPE%lib!pagetable.pagetable_spec_impl.PageTable.)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l4_table x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l3_rev_map x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_rev_map x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l3_tables x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l2_rev_map x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_rev_map x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l2_tables x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l1_rev_map x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_rev_map x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?l1_tables x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?mapping_4k x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_4k x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?mapping_2m x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_2m x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?mapping_1g x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/mapping_1g x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?kernel_entries x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?tlb_mapping_4k x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_4k x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?tlb_mapping_2m x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_2m x)))))
(assert (forall ((x lib!pagetable.pagetable_spec_impl.PageTable.)) (! (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g x) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/?tlb_mapping_1g x)) :pattern ((lib!pagetable.pagetable_spec_impl.PageTable./PageTable/tlb_mapping_1g x)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= x (%Poly%lib!allocator.page.Page. (Poly%lib!allocator.page.Page. x))) :pattern ((Poly%lib!allocator.page.Page. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page.Page.) (= x (Poly%lib!allocator.page.Page. (%Poly%lib!allocator.page.Page. x)))) :pattern ((has_type x TYPE%lib!allocator.page.Page.)))))
(assert (forall ((_addr! Int) (_state! lib!define.PageState.) (_is_io_page! Bool) (_rev_pointer! Int) (_ref_count! Int) (_owning_container! core!option.Option.) (_mappings! vstd!set.Set<tuple%2<usize./usize.>.>.) (_io_mappings! vstd!set.Set<tuple%2<usize./usize.>.>.)) (! (=> (and (uInv SZ _addr!) (iInv 32 _rev_pointer!) (uInv SZ _ref_count!) (has_type (Poly%core!option.Option. _owning_container!) (TYPE%core!option.Option. $ (UINT SZ)))) (has_type (Poly%lib!allocator.page.Page. (lib!allocator.page.Page./Page _addr! _state! _is_io_page! _rev_pointer! _ref_count! _owning_container! _mappings! _io_mappings!)) TYPE%lib!allocator.page.Page.)) :pattern ((has_type (Poly%lib!allocator.page.Page. (lib!allocator.page.Page./Page _addr! _state! _is_io_page! _rev_pointer! _ref_count! _owning_container! _mappings! _io_mappings!)) TYPE%lib!allocator.page.Page.)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/addr x) (lib!allocator.page.Page./Page/?addr x)) :pattern ((lib!allocator.page.Page./Page/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page.Page.) (uInv SZ (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. x)))) :pattern ((lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. x)) (has_type x TYPE%lib!allocator.page.Page.)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/state x) (lib!allocator.page.Page./Page/?state x)) :pattern ((lib!allocator.page.Page./Page/state x)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/is_io_page x) (lib!allocator.page.Page./Page/?is_io_page x)) :pattern ((lib!allocator.page.Page./Page/is_io_page x)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/rev_pointer x) (lib!allocator.page.Page./Page/?rev_pointer x)) :pattern ((lib!allocator.page.Page./Page/rev_pointer x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page.Page.) (iInv 32 (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. x)))) :pattern ((lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. x)) (has_type x TYPE%lib!allocator.page.Page.)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/ref_count x) (lib!allocator.page.Page./Page/?ref_count x)) :pattern ((lib!allocator.page.Page./Page/ref_count x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page.Page.) (uInv SZ (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. x)))) :pattern ((lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. x)) (has_type x TYPE%lib!allocator.page.Page.)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/owning_container x) (lib!allocator.page.Page./Page/?owning_container x)) :pattern ((lib!allocator.page.Page./Page/owning_container x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page.Page.) (has_type (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. x)) (has_type x TYPE%lib!allocator.page.Page.)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/mappings x) (lib!allocator.page.Page./Page/?mappings x)) :pattern ((lib!allocator.page.Page./Page/mappings x)))))
(assert (forall ((x lib!allocator.page.Page.)) (! (= (lib!allocator.page.Page./Page/io_mappings x) (lib!allocator.page.Page./Page/?io_mappings x)) :pattern ((lib!allocator.page.Page./Page/io_mappings x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= x (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x))) :pattern ((Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (= x (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)))) :pattern ((has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((_page_array! lib!array.Array.) (_free_pages_4k! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_free_pages_2m! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_free_pages_1g! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_allocated_pages_4k! vstd!set.Set<usize.>.) (_allocated_pages_2m! vstd!set.Set<usize.>.) (_allocated_pages_1g! vstd!set.Set<usize.>.) (_mapped_pages_4k! vstd!set.Set<usize.>.) (_mapped_pages_2m! vstd!set.Set<usize.>.) (_mapped_pages_1g! vstd!set.Set<usize.>.) (_page_perms_4k! Poly) (_page_perms_2m! Poly) (_page_perms_1g! Poly) (_container_map_4k! vstd!map.Map<usize./vstd!set.Set<usize.>.>.) (_container_map_2m! vstd!map.Map<usize./vstd!set.Set<usize.>.>.) (_container_map_1g! vstd!map.Map<usize./vstd!set.Set<usize.>.>.)) (! (=> (and (has_type (Poly%lib!array.Array. _page_array!) (TYPE%lib!array.Array. $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _free_pages_4k!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 131072))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _free_pages_2m!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 131072))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _free_pages_1g!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 131072))) (has_type _page_perms_4k! (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))))) (has_type _page_perms_2m! (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152))))) (has_type _page_perms_1g! (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824)))))) (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator _page_array! _free_pages_4k! _free_pages_2m! _free_pages_1g! _allocated_pages_4k! _allocated_pages_2m! _allocated_pages_1g! _mapped_pages_4k! _mapped_pages_2m! _mapped_pages_1g! _page_perms_4k! _page_perms_2m! _page_perms_1g! _container_map_4k! _container_map_2m! _container_map_1g!)) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)) :pattern ((has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator _page_array! _free_pages_4k! _free_pages_2m! _free_pages_1g! _allocated_pages_4k! _allocated_pages_2m! _allocated_pages_1g! _mapped_pages_4k! _mapped_pages_2m! _mapped_pages_1g! _page_perms_4k! _page_perms_2m! _page_perms_1g! _container_map_4k! _container_map_2m! _container_map_1g!)) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_array x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x))) (TYPE%lib!array.Array. $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072)))) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?free_pages_4k x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 131072)))) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?free_pages_2m x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 131072)))) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?free_pages_1g x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 131072)))) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?allocated_pages_4k x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?allocated_pages_2m x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?allocated_pages_1g x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?mapped_pages_4k x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?mapped_pages_2m x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?mapped_pages_1g x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_perms_4k x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)))))) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_perms_2m x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152)))))) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?page_perms_1g x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824)))))) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. x)) (has_type x TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?container_map_4k x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?container_map_2m x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m x)))))
(assert (forall ((x lib!allocator.page_allocator_spec_impl.PageAllocator.)) (! (= (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g x) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/?container_map_1g x)) :pattern ((lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g x)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= x (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. x))) :pattern ((Poly%lib!process_manager.container.Container. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (= x (Poly%lib!process_manager.container.Container. (%Poly%lib!process_manager.container.Container. x)))) :pattern ((has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((_owned_procs! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_parent! core!option.Option.) (_parent_rev_ptr! core!option.Option.) (_children! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_owned_endpoints! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_mem_quota! Int) (_mem_used! Int) (_owned_cpus! lib!array_set.ArraySet.) (_scheduler! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_depth! Int) (_owned_threads! vstd!set.Set<usize.>.) (_uppertree_seq! vstd!seq.Seq<usize.>.) (_subtree_set! vstd!set.Set<usize.>.) (_can_have_children! Bool)) (! (=> (and (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _owned_procs!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10))) (has_type (Poly%core!option.Option. _parent!) (TYPE%core!option.Option. $ (UINT SZ))) (has_type (Poly%core!option.Option. _parent_rev_ptr!) (TYPE%core!option.Option. $ (SINT 32))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _children!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _owned_endpoints!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10))) (uInv SZ _mem_quota!) (uInv SZ _mem_used!) (has_type (Poly%lib!array_set.ArraySet. _owned_cpus!) (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _scheduler!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10))) (uInv SZ _depth!)) (has_type (Poly%lib!process_manager.container.Container. (lib!process_manager.container.Container./Container _owned_procs! _parent! _parent_rev_ptr! _children! _owned_endpoints! _mem_quota! _mem_used! _owned_cpus! _scheduler! _depth! _owned_threads! _uppertree_seq! _subtree_set! _can_have_children!)) TYPE%lib!process_manager.container.Container.)) :pattern ((has_type (Poly%lib!process_manager.container.Container. (lib!process_manager.container.Container./Container _owned_procs! _parent! _parent_rev_ptr! _children! _owned_endpoints! _mem_quota! _mem_used! _owned_cpus! _scheduler! _depth! _owned_threads! _uppertree_seq! _subtree_set! _can_have_children!)) TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/owned_procs x) (lib!process_manager.container.Container./Container/?owned_procs x)) :pattern ((lib!process_manager.container.Container./Container/owned_procs x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)))) :pattern ((lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/parent x) (lib!process_manager.container.Container./Container/?parent x)) :pattern ((lib!process_manager.container.Container./Container/parent x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/parent_rev_ptr x) (lib!process_manager.container.Container./Container/?parent_rev_ptr x)) :pattern ((lib!process_manager.container.Container./Container/parent_rev_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. x))) (TYPE%core!option.Option. $ (SINT 32)))) :pattern ((lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/children x) (lib!process_manager.container.Container./Container/?children x)) :pattern ((lib!process_manager.container.Container./Container/children x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)))) :pattern ((lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/owned_endpoints x) (lib!process_manager.container.Container./Container/?owned_endpoints x)) :pattern ((lib!process_manager.container.Container./Container/owned_endpoints x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)))) :pattern ((lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/mem_quota x) (lib!process_manager.container.Container./Container/?mem_quota x)) :pattern ((lib!process_manager.container.Container./Container/mem_quota x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (uInv SZ (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. x)))) :pattern ((lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/mem_used x) (lib!process_manager.container.Container./Container/?mem_used x)) :pattern ((lib!process_manager.container.Container./Container/mem_used x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (uInv SZ (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. x)))) :pattern ((lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/owned_cpus x) (lib!process_manager.container.Container./Container/?owned_cpus x)) :pattern ((lib!process_manager.container.Container./Container/owned_cpus x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. x))) (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)))) :pattern ((lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/scheduler x) (lib!process_manager.container.Container./Container/?scheduler x)) :pattern ((lib!process_manager.container.Container./Container/scheduler x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)))) :pattern ((lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/depth x) (lib!process_manager.container.Container./Container/?depth x)) :pattern ((lib!process_manager.container.Container./Container/depth x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (uInv SZ (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. x)))) :pattern ((lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/owned_threads x) (lib!process_manager.container.Container./Container/?owned_threads x)) :pattern ((lib!process_manager.container.Container./Container/owned_threads x)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/uppertree_seq x) (lib!process_manager.container.Container./Container/?uppertree_seq x)) :pattern ((lib!process_manager.container.Container./Container/uppertree_seq x)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/subtree_set x) (lib!process_manager.container.Container./Container/?subtree_set x)) :pattern ((lib!process_manager.container.Container./Container/subtree_set x)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/can_have_children x) (lib!process_manager.container.Container./Container/?can_have_children x)) :pattern ((lib!process_manager.container.Container./Container/can_have_children x)))))
(assert (forall ((x lib!process_manager.container_tree_spec_impl.ContainerTree.)) (! (= x (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. x))) :pattern ((Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (= x (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. x)))) :pattern ((has_type x TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)))))
(assert (forall ((_root_container! Int) (_container_perms! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)) (! (=> (uInv SZ _root_container!) (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree _root_container! _container_perms!)) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)) :pattern ((has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree _root_container! _container_perms!)) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)))))
(assert (forall ((x lib!process_manager.container_tree_spec_impl.ContainerTree.)) (! (= (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container x) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/?root_container x)) :pattern ((lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (uInv SZ (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. x)))) :pattern ((lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. x)) (has_type x TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)))))
(assert (forall ((x lib!process_manager.container_tree_spec_impl.ContainerTree.)) (! (= (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms x) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/?container_perms x)) :pattern ((lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms x)))))
(assert (forall ((x lib!process_manager.process.Process.)) (! (= x (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. x))) :pattern ((Poly%lib!process_manager.process.Process. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.process.Process.) (= x (Poly%lib!process_manager.process.Process. (%Poly%lib!process_manager.process.Process. x)))) :pattern ((has_type x TYPE%lib!process_manager.process.Process.)))))
(assert (forall ((_owning_container! Int) (_rev_ptr! Int) (_pcid! Int) (_ioid! core!option.Option.) (_owned_threads! lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (=> (and (uInv SZ _owning_container!) (iInv 32 _rev_ptr!) (uInv SZ _pcid!) (has_type (Poly%core!option.Option. _ioid!) (TYPE%core!option.Option. $ (UINT SZ))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _owned_threads!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 128)))) (has_type (Poly%lib!process_manager.process.Process. (lib!process_manager.process.Process./Process _owning_container! _rev_ptr! _pcid! _ioid! _owned_threads!)) TYPE%lib!process_manager.process.Process.)) :pattern ((has_type (Poly%lib!process_manager.process.Process. (lib!process_manager.process.Process./Process _owning_container! _rev_ptr! _pcid! _ioid! _owned_threads!)) TYPE%lib!process_manager.process.Process.)))))
(assert (forall ((x lib!process_manager.process.Process.)) (! (= (lib!process_manager.process.Process./Process/owning_container x) (lib!process_manager.process.Process./Process/?owning_container x)) :pattern ((lib!process_manager.process.Process./Process/owning_container x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.process.Process.) (uInv SZ (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. x)))) :pattern ((lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. x)) (has_type x TYPE%lib!process_manager.process.Process.)))))
(assert (forall ((x lib!process_manager.process.Process.)) (! (= (lib!process_manager.process.Process./Process/rev_ptr x) (lib!process_manager.process.Process./Process/?rev_ptr x)) :pattern ((lib!process_manager.process.Process./Process/rev_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.process.Process.) (iInv 32 (lib!process_manager.process.Process./Process/rev_ptr (%Poly%lib!process_manager.process.Process. x)))) :pattern ((lib!process_manager.process.Process./Process/rev_ptr (%Poly%lib!process_manager.process.Process. x)) (has_type x TYPE%lib!process_manager.process.Process.)))))
(assert (forall ((x lib!process_manager.process.Process.)) (! (= (lib!process_manager.process.Process./Process/pcid x) (lib!process_manager.process.Process./Process/?pcid x)) :pattern ((lib!process_manager.process.Process./Process/pcid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.process.Process.) (uInv SZ (lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. x)))) :pattern ((lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. x)) (has_type x TYPE%lib!process_manager.process.Process.)))))
(assert (forall ((x lib!process_manager.process.Process.)) (! (= (lib!process_manager.process.Process./Process/ioid x) (lib!process_manager.process.Process./Process/?ioid x)) :pattern ((lib!process_manager.process.Process./Process/ioid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.process.Process.) (has_type (Poly%core!option.Option. (lib!process_manager.process.Process./Process/ioid (%Poly%lib!process_manager.process.Process. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.process.Process./Process/ioid (%Poly%lib!process_manager.process.Process. x)) (has_type x TYPE%lib!process_manager.process.Process.)))))
(assert (forall ((x lib!process_manager.process.Process.)) (! (= (lib!process_manager.process.Process./Process/owned_threads x) (lib!process_manager.process.Process./Process/?owned_threads x)) :pattern ((lib!process_manager.process.Process./Process/owned_threads x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.process.Process.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 128)))) :pattern ((lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. x)) (has_type x TYPE%lib!process_manager.process.Process.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= x (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. x))) :pattern ((Poly%lib!process_manager.thread.Thread. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (= x (Poly%lib!process_manager.thread.Thread. (%Poly%lib!process_manager.thread.Thread. x)))) :pattern ((has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((_owning_container! Int) (_owning_proc! Int) (_state! lib!define.ThreadState.) (_proc_rev_ptr! Int) (_scheduler_rev_ptr! core!option.Option.) (_blocking_endpoint_ptr! core!option.Option.) (_endpoint_rev_ptr! core!option.Option.) (_running_cpu! core!option.Option.) (_endpoint_descriptors! lib!array.Array.) (_ipc_payload! lib!process_manager.thread.IPCPayLoad.) (_error_code! core!option.Option.) (_trap_frame! lib!trap.TrapFrameOption.)) (! (=> (and (uInv SZ _owning_container!) (uInv SZ _owning_proc!) (iInv 32 _proc_rev_ptr!) (has_type (Poly%core!option.Option. _scheduler_rev_ptr!) (TYPE%core!option.Option. $ (SINT 32))) (has_type (Poly%core!option.Option. _blocking_endpoint_ptr!) (TYPE%core!option.Option. $ (UINT SZ))) (has_type (Poly%core!option.Option. _endpoint_rev_ptr!) (TYPE%core!option.Option. $ (SINT 32))) (has_type (Poly%core!option.Option. _running_cpu!) (TYPE%core!option.Option. $ (UINT SZ))) (has_type (Poly%lib!array.Array. _endpoint_descriptors!) (TYPE%lib!array.Array. $ (TYPE%core!option.Option. $ (UINT SZ)) $ (CONST_INT 128))) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. _ipc_payload!) TYPE%lib!process_manager.thread.IPCPayLoad.) (has_type (Poly%core!option.Option. _error_code!) (TYPE%core!option.Option. $ TYPE%lib!define.RetValueType.)) (has_type (Poly%lib!trap.TrapFrameOption. _trap_frame!) TYPE%lib!trap.TrapFrameOption.)) (has_type (Poly%lib!process_manager.thread.Thread. (lib!process_manager.thread.Thread./Thread _owning_container! _owning_proc! _state! _proc_rev_ptr! _scheduler_rev_ptr! _blocking_endpoint_ptr! _endpoint_rev_ptr! _running_cpu! _endpoint_descriptors! _ipc_payload! _error_code! _trap_frame!)) TYPE%lib!process_manager.thread.Thread.)) :pattern ((has_type (Poly%lib!process_manager.thread.Thread. (lib!process_manager.thread.Thread./Thread _owning_container! _owning_proc! _state! _proc_rev_ptr! _scheduler_rev_ptr! _blocking_endpoint_ptr! _endpoint_rev_ptr! _running_cpu! _endpoint_descriptors! _ipc_payload! _error_code! _trap_frame!)) TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/owning_container x) (lib!process_manager.thread.Thread./Thread/?owning_container x)) :pattern ((lib!process_manager.thread.Thread./Thread/owning_container x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (uInv SZ (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. x)))) :pattern ((lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/owning_proc x) (lib!process_manager.thread.Thread./Thread/?owning_proc x)) :pattern ((lib!process_manager.thread.Thread./Thread/owning_proc x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (uInv SZ (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. x)))) :pattern ((lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/state x) (lib!process_manager.thread.Thread./Thread/?state x)) :pattern ((lib!process_manager.thread.Thread./Thread/state x)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/proc_rev_ptr x) (lib!process_manager.thread.Thread./Thread/?proc_rev_ptr x)) :pattern ((lib!process_manager.thread.Thread./Thread/proc_rev_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (iInv 32 (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. x)))) :pattern ((lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr x) (lib!process_manager.thread.Thread./Thread/?scheduler_rev_ptr x)) :pattern ((lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%core!option.Option. $ (SINT 32)))) :pattern ((lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr x) (lib!process_manager.thread.Thread./Thread/?blocking_endpoint_ptr x)) :pattern ((lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr x) (lib!process_manager.thread.Thread./Thread/?endpoint_rev_ptr x)) :pattern ((lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%core!option.Option. $ (SINT 32)))) :pattern ((lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/running_cpu x) (lib!process_manager.thread.Thread./Thread/?running_cpu x)) :pattern ((lib!process_manager.thread.Thread./Thread/running_cpu x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/endpoint_descriptors x) (lib!process_manager.thread.Thread./Thread/?endpoint_descriptors x)) :pattern ((lib!process_manager.thread.Thread./Thread/endpoint_descriptors x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%lib!array.Array. $ (TYPE%core!option.Option. $ (UINT SZ)) $ (CONST_INT 128)))) :pattern ((lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/ipc_payload x) (lib!process_manager.thread.Thread./Thread/?ipc_payload x)) :pattern ((lib!process_manager.thread.Thread./Thread/ipc_payload x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. x))) TYPE%lib!process_manager.thread.IPCPayLoad.)) :pattern ((lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/error_code x) (lib!process_manager.thread.Thread./Thread/?error_code x)) :pattern ((lib!process_manager.thread.Thread./Thread/error_code x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%core!option.Option. $ TYPE%lib!define.RetValueType.))) :pattern ((lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/trap_frame x) (lib!process_manager.thread.Thread./Thread/?trap_frame x)) :pattern ((lib!process_manager.thread.Thread./Thread/trap_frame x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%lib!trap.TrapFrameOption. (lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. x))) TYPE%lib!trap.TrapFrameOption.)) :pattern ((lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= x (%Poly%lib!process_manager.thread.IPCPayLoad. (Poly%lib!process_manager.thread.IPCPayLoad. x))) :pattern ((Poly%lib!process_manager.thread.IPCPayLoad. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (= x (Poly%lib!process_manager.thread.IPCPayLoad. (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((_va! Int) (_len! Int)) (! (=> (and (uInv SZ _va!) (uInv SZ _len!)) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Message _va! _len!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) :pattern ((has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Message _va! _len!)) TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Message/va x) (lib!process_manager.thread.IPCPayLoad./Message/?va x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Message/va x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv SZ (lib!process_manager.thread.IPCPayLoad./Message/va (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Message/va (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Message/len x) (lib!process_manager.thread.IPCPayLoad./Message/?len x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Message/len x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv SZ (lib!process_manager.thread.IPCPayLoad./Message/len (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Message/len (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((_va_range! lib!va_range.VaRange4K.)) (! (=> (has_type (Poly%lib!va_range.VaRange4K. _va_range!) TYPE%lib!va_range.VaRange4K.) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Pages _va_range!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) :pattern ((has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Pages _va_range!)) TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Pages/va_range x) (lib!process_manager.thread.IPCPayLoad./Pages/?va_range x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Pages/va_range x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (has_type (Poly%lib!va_range.VaRange4K. (lib!process_manager.thread.IPCPayLoad./Pages/va_range (%Poly%lib!process_manager.thread.IPCPayLoad. x))) TYPE%lib!va_range.VaRange4K.)) :pattern ((lib!process_manager.thread.IPCPayLoad./Pages/va_range (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((_endpoint_index! Int)) (! (=> (uInv SZ _endpoint_index!) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Endpoint _endpoint_index!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) :pattern ((has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Endpoint _endpoint_index!)) TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index x) (lib!process_manager.thread.IPCPayLoad./Endpoint/?endpoint_index x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv SZ (lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((_bus! Int) (_dev! Int) (_fun! Int)) (! (=> (and (uInv 8 _bus!) (uInv 8 _dev!) (uInv 8 _fun!)) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Pci _bus! _dev! _fun!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) :pattern ((has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Pci _bus! _dev! _fun!)) TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Pci/bus x) (lib!process_manager.thread.IPCPayLoad./Pci/?bus x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/bus x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv 8 (lib!process_manager.thread.IPCPayLoad./Pci/bus (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/bus (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Pci/dev x) (lib!process_manager.thread.IPCPayLoad./Pci/?dev x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/dev x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv 8 (lib!process_manager.thread.IPCPayLoad./Pci/dev (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/dev (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Pci/fun x) (lib!process_manager.thread.IPCPayLoad./Pci/?fun x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/fun x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv 8 (lib!process_manager.thread.IPCPayLoad./Pci/fun (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/fun (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (has_type (Poly%lib!process_manager.thread.IPCPayLoad. lib!process_manager.thread.IPCPayLoad./Empty) TYPE%lib!process_manager.thread.IPCPayLoad.))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= x (%Poly%lib!process_manager.endpoint.Endpoint. (Poly%lib!process_manager.endpoint.Endpoint. x))) :pattern ((Poly%lib!process_manager.endpoint.Endpoint. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.endpoint.Endpoint.) (= x (Poly%lib!process_manager.endpoint.Endpoint. (%Poly%lib!process_manager.endpoint.Endpoint. x)))) :pattern ((has_type x TYPE%lib!process_manager.endpoint.Endpoint.)))))
(assert (forall ((_queue! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_queue_state! lib!define.EndpointState.) (_rf_counter! Int) (_owning_threads! vstd!set.Set<usize.>.) (_owning_container! Int) (_container_rev_ptr! Int)) (! (=> (and (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _queue!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 128))) (uInv SZ _rf_counter!) (uInv SZ _owning_container!) (iInv 32 _container_rev_ptr!)) (has_type (Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.endpoint.Endpoint./Endpoint _queue! _queue_state! _rf_counter! _owning_threads! _owning_container! _container_rev_ptr!)) TYPE%lib!process_manager.endpoint.Endpoint.)) :pattern ((has_type (Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.endpoint.Endpoint./Endpoint _queue! _queue_state! _rf_counter! _owning_threads! _owning_container! _container_rev_ptr!)) TYPE%lib!process_manager.endpoint.Endpoint.)))))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue x) (lib!process_manager.endpoint.Endpoint./Endpoint/?queue x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/queue x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.endpoint.Endpoint.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 128)))) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. x)) (has_type x TYPE%lib!process_manager.endpoint.Endpoint.)))))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state x) (lib!process_manager.endpoint.Endpoint./Endpoint/?queue_state x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/queue_state x)))))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter x) (lib!process_manager.endpoint.Endpoint./Endpoint/?rf_counter x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.endpoint.Endpoint.) (uInv SZ (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. x)))) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. x)) (has_type x TYPE%lib!process_manager.endpoint.Endpoint.)))))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads x) (lib!process_manager.endpoint.Endpoint./Endpoint/?owning_threads x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads x)))))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container x) (lib!process_manager.endpoint.Endpoint./Endpoint/?owning_container x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/owning_container x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.endpoint.Endpoint.) (uInv SZ (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. x)))) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. x)) (has_type x TYPE%lib!process_manager.endpoint.Endpoint.)))))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr x) (lib!process_manager.endpoint.Endpoint./Endpoint/?container_rev_ptr x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.endpoint.Endpoint.) (iInv 32 (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. x)))) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. x)) (has_type x TYPE%lib!process_manager.endpoint.Endpoint.)))))
(assert (forall ((x lib!process_manager.spec_impl.ProcessManager.)) (! (= x (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. x))) :pattern ((Poly%lib!process_manager.spec_impl.ProcessManager. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.spec_impl.ProcessManager.) (= x (Poly%lib!process_manager.spec_impl.ProcessManager. (%Poly%lib!process_manager.spec_impl.ProcessManager. x)))) :pattern ((has_type x TYPE%lib!process_manager.spec_impl.ProcessManager.)))))
(assert (forall ((_container_tree! lib!process_manager.container_tree_spec_impl.ContainerTree.) (_process_perms! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>.) (_thread_perms! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>.) (_endpoint_perms! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>.) (_cpu_list! lib!array.Array.)) (! (=> (and (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. _container_tree!) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (has_type (Poly%lib!array.Array. _cpu_list!) (TYPE%lib!array.Array. $ TYPE%lib!process_manager.cpu.Cpu. $ (CONST_INT 32)))) (has_type (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!process_manager.spec_impl.ProcessManager./ProcessManager _container_tree! _process_perms! _thread_perms! _endpoint_perms! _cpu_list!)) TYPE%lib!process_manager.spec_impl.ProcessManager.)) :pattern ((has_type (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!process_manager.spec_impl.ProcessManager./ProcessManager _container_tree! _process_perms! _thread_perms! _endpoint_perms! _cpu_list!)) TYPE%lib!process_manager.spec_impl.ProcessManager.)))))
(assert (forall ((x lib!process_manager.spec_impl.ProcessManager.)) (! (= (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree x) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?container_tree x)) :pattern ((lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. x))) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)) :pattern ((lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. x)) (has_type x TYPE%lib!process_manager.spec_impl.ProcessManager.)))))
(assert (forall ((x lib!process_manager.spec_impl.ProcessManager.)) (! (= (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms x) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?process_perms x)) :pattern ((lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms x)))))
(assert (forall ((x lib!process_manager.spec_impl.ProcessManager.)) (! (= (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms x) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?thread_perms x)) :pattern ((lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms x)))))
(assert (forall ((x lib!process_manager.spec_impl.ProcessManager.)) (! (= (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms x) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?endpoint_perms x)) :pattern ((lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms x)))))
(assert (forall ((x lib!process_manager.spec_impl.ProcessManager.)) (! (= (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list x) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?cpu_list x)) :pattern ((lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. x))) (TYPE%lib!array.Array. $ TYPE%lib!process_manager.cpu.Cpu. $ (CONST_INT 32)))) :pattern ((lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. x)) (has_type x TYPE%lib!process_manager.spec_impl.ProcessManager.)))))
(assert (forall ((x lib!process_manager.cpu.Cpu.)) (! (= x (%Poly%lib!process_manager.cpu.Cpu. (Poly%lib!process_manager.cpu.Cpu. x))) :pattern ((Poly%lib!process_manager.cpu.Cpu. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.cpu.Cpu.) (= x (Poly%lib!process_manager.cpu.Cpu. (%Poly%lib!process_manager.cpu.Cpu. x)))) :pattern ((has_type x TYPE%lib!process_manager.cpu.Cpu.)))))
(assert (forall ((_owning_container! Int) (_active! Bool) (_current_thread! core!option.Option.)) (! (=> (and (uInv SZ _owning_container!) (has_type (Poly%core!option.Option. _current_thread!) (TYPE%core!option.Option. $ (UINT SZ)))) (has_type (Poly%lib!process_manager.cpu.Cpu. (lib!process_manager.cpu.Cpu./Cpu _owning_container! _active! _current_thread!)) TYPE%lib!process_manager.cpu.Cpu.)) :pattern ((has_type (Poly%lib!process_manager.cpu.Cpu. (lib!process_manager.cpu.Cpu./Cpu _owning_container! _active! _current_thread!)) TYPE%lib!process_manager.cpu.Cpu.)))))
(assert (forall ((x lib!process_manager.cpu.Cpu.)) (! (= (lib!process_manager.cpu.Cpu./Cpu/owning_container x) (lib!process_manager.cpu.Cpu./Cpu/?owning_container x)) :pattern ((lib!process_manager.cpu.Cpu./Cpu/owning_container x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.cpu.Cpu.) (uInv SZ (lib!process_manager.cpu.Cpu./Cpu/owning_container (%Poly%lib!process_manager.cpu.Cpu. x)))) :pattern ((lib!process_manager.cpu.Cpu./Cpu/owning_container (%Poly%lib!process_manager.cpu.Cpu. x)) (has_type x TYPE%lib!process_manager.cpu.Cpu.)))))
(assert (forall ((x lib!process_manager.cpu.Cpu.)) (! (= (lib!process_manager.cpu.Cpu./Cpu/active x) (lib!process_manager.cpu.Cpu./Cpu/?active x)) :pattern ((lib!process_manager.cpu.Cpu./Cpu/active x)))))
(assert (forall ((x lib!process_manager.cpu.Cpu.)) (! (= (lib!process_manager.cpu.Cpu./Cpu/current_thread x) (lib!process_manager.cpu.Cpu./Cpu/?current_thread x)) :pattern ((lib!process_manager.cpu.Cpu./Cpu/current_thread x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.cpu.Cpu.) (has_type (Poly%core!option.Option. (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. x)) (has_type x TYPE%lib!process_manager.cpu.Cpu.)))))
(assert (forall ((x lib!memory_manager.spec_impl.MemoryManager.)) (! (= x (%Poly%lib!memory_manager.spec_impl.MemoryManager. (Poly%lib!memory_manager.spec_impl.MemoryManager. x))) :pattern ((Poly%lib!memory_manager.spec_impl.MemoryManager. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.) (= x (Poly%lib!memory_manager.spec_impl.MemoryManager. (%Poly%lib!memory_manager.spec_impl.MemoryManager. x)))) :pattern ((has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.)))))
(assert (forall ((_kernel_entries! lib!array.Array.) (_kernel_entries_ghost! vstd!seq.Seq<lib!pagetable.entry.PageEntry.>.) (_free_pcids! lib!array_vec.ArrayVec.) (_pcid_to_proc_ptr! lib!array.Array.) (_page_tables! lib!array.Array.) (_page_table_pages! vstd!set.Set<usize.>.) (_free_ioids! lib!array_vec.ArrayVec.) (_iommu_tables! lib!array.Array.) (_iommu_table_pages! vstd!set.Set<usize.>.) (_root_table! lib!memory_manager.root_table.RootTable.) (_root_table_cache! vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>.) (_pci_bitmap! lib!memory_manager.pci_bitmap.PCIBitMap.)) (! (=> (and (has_type (Poly%lib!array.Array. _kernel_entries!) (TYPE%lib!array.Array. $ (UINT SZ) $ (CONST_INT 1))) (has_type (Poly%lib!array_vec.ArrayVec. _free_pcids!) (TYPE%lib!array_vec.ArrayVec. $ (UINT SZ) $ (CONST_INT 4096))) (has_type (Poly%lib!array.Array. _pcid_to_proc_ptr!) (TYPE%lib!array.Array. $ (TYPE%core!option.Option. $ (UINT SZ)) $ (CONST_INT 4096))) (has_type (Poly%lib!array.Array. _page_tables!) (TYPE%lib!array.Array. $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) $ (CONST_INT 4096))) (has_type (Poly%lib!array_vec.ArrayVec. _free_ioids!) (TYPE%lib!array_vec.ArrayVec. $ (UINT SZ) $ (CONST_INT 4096))) (has_type (Poly%lib!array.Array. _iommu_tables!) (TYPE%lib!array.Array. $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) $ (CONST_INT 4096))) (has_type (Poly%lib!memory_manager.pci_bitmap.PCIBitMap. _pci_bitmap!) TYPE%lib!memory_manager.pci_bitmap.PCIBitMap.)) (has_type (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager _kernel_entries! _kernel_entries_ghost! _free_pcids! _pcid_to_proc_ptr! _page_tables! _page_table_pages! _free_ioids! _iommu_tables! _iommu_table_pages! _root_table! _root_table_cache! _pci_bitmap!)) TYPE%lib!memory_manager.spec_impl.MemoryManager.)) :pattern ((has_type (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager _kernel_entries! _kernel_entries_ghost! _free_pcids! _pcid_to_proc_ptr! _page_tables! _page_table_pages! _free_ioids! _iommu_tables! _iommu_table_pages! _root_table! _root_table_cache! _pci_bitmap!)) TYPE%lib!memory_manager.spec_impl.MemoryManager.)))))
(assert (forall ((x lib!memory_manager.spec_impl.MemoryManager.)) (! (= (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/kernel_entries x) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?kernel_entries x)) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/kernel_entries x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.) (has_type (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/kernel_entries (%Poly%lib!memory_manager.spec_impl.MemoryManager. x))) (TYPE%lib!array.Array. $ (UINT SZ) $ (CONST_INT 1)))) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/kernel_entries (%Poly%lib!memory_manager.spec_impl.MemoryManager. x)) (has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.)))))
(assert (forall ((x lib!memory_manager.spec_impl.MemoryManager.)) (! (= (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/kernel_entries_ghost x) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?kernel_entries_ghost x)) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/kernel_entries_ghost x)))))
(assert (forall ((x lib!memory_manager.spec_impl.MemoryManager.)) (! (= (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_pcids x) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?free_pcids x)) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_pcids x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.) (has_type (Poly%lib!array_vec.ArrayVec. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_pcids (%Poly%lib!memory_manager.spec_impl.MemoryManager. x))) (TYPE%lib!array_vec.ArrayVec. $ (UINT SZ) $ (CONST_INT 4096)))) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_pcids (%Poly%lib!memory_manager.spec_impl.MemoryManager. x)) (has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.)))))
(assert (forall ((x lib!memory_manager.spec_impl.MemoryManager.)) (! (= (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pcid_to_proc_ptr x) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?pcid_to_proc_ptr x)) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pcid_to_proc_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.) (has_type (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pcid_to_proc_ptr (%Poly%lib!memory_manager.spec_impl.MemoryManager. x))) (TYPE%lib!array.Array. $ (TYPE%core!option.Option. $ (UINT SZ)) $ (CONST_INT 4096)))) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pcid_to_proc_ptr (%Poly%lib!memory_manager.spec_impl.MemoryManager. x)) (has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.)))))
(assert (forall ((x lib!memory_manager.spec_impl.MemoryManager.)) (! (= (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables x) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?page_tables x)) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.) (has_type (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. x))) (TYPE%lib!array.Array. $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) $ (CONST_INT 4096)))) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. x)) (has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.)))))
(assert (forall ((x lib!memory_manager.spec_impl.MemoryManager.)) (! (= (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_table_pages x) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?page_table_pages x)) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_table_pages x)))))
(assert (forall ((x lib!memory_manager.spec_impl.MemoryManager.)) (! (= (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_ioids x) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?free_ioids x)) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_ioids x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.) (has_type (Poly%lib!array_vec.ArrayVec. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_ioids (%Poly%lib!memory_manager.spec_impl.MemoryManager. x))) (TYPE%lib!array_vec.ArrayVec. $ (UINT SZ) $ (CONST_INT 4096)))) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_ioids (%Poly%lib!memory_manager.spec_impl.MemoryManager. x)) (has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.)))))
(assert (forall ((x lib!memory_manager.spec_impl.MemoryManager.)) (! (= (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables x) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?iommu_tables x)) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.) (has_type (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. x))) (TYPE%lib!array.Array. $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) $ (CONST_INT 4096)))) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. x)) (has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.)))))
(assert (forall ((x lib!memory_manager.spec_impl.MemoryManager.)) (! (= (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_table_pages x) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?iommu_table_pages x)) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_table_pages x)))))
(assert (forall ((x lib!memory_manager.spec_impl.MemoryManager.)) (! (= (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table x) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?root_table x)) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table x)))))
(assert (forall ((x lib!memory_manager.spec_impl.MemoryManager.)) (! (= (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table_cache x) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?root_table_cache x)) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table_cache x)))))
(assert (forall ((x lib!memory_manager.spec_impl.MemoryManager.)) (! (= (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pci_bitmap x) (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/?pci_bitmap x)) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pci_bitmap x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.) (has_type (Poly%lib!memory_manager.pci_bitmap.PCIBitMap. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pci_bitmap (%Poly%lib!memory_manager.spec_impl.MemoryManager. x))) TYPE%lib!memory_manager.pci_bitmap.PCIBitMap.)) :pattern ((lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pci_bitmap (%Poly%lib!memory_manager.spec_impl.MemoryManager. x)) (has_type x TYPE%lib!memory_manager.spec_impl.MemoryManager.)))))
(assert (forall ((x lib!memory_manager.pci_bitmap.PCIBitMap.)) (! (= x (%Poly%lib!memory_manager.pci_bitmap.PCIBitMap. (Poly%lib!memory_manager.pci_bitmap.PCIBitMap. x))) :pattern ((Poly%lib!memory_manager.pci_bitmap.PCIBitMap. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!memory_manager.pci_bitmap.PCIBitMap.) (= x (Poly%lib!memory_manager.pci_bitmap.PCIBitMap. (%Poly%lib!memory_manager.pci_bitmap.PCIBitMap. x)))) :pattern ((has_type x TYPE%lib!memory_manager.pci_bitmap.PCIBitMap.)))))
(assert (forall ((_bit_map! %%Function%%) (_ghost_map! vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>.)) (! (=> (has_type (Poly%array%. _bit_map!) (ARRAY $ (ARRAY $ (ARRAY $ (UINT 8) $ (CONST_INT 32)) $ (CONST_INT 256)) $ (CONST_INT 4096))) (has_type (Poly%lib!memory_manager.pci_bitmap.PCIBitMap. (lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap _bit_map! _ghost_map!)) TYPE%lib!memory_manager.pci_bitmap.PCIBitMap.)) :pattern ((has_type (Poly%lib!memory_manager.pci_bitmap.PCIBitMap. (lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap _bit_map! _ghost_map!)) TYPE%lib!memory_manager.pci_bitmap.PCIBitMap.)))))
(assert (forall ((x lib!memory_manager.pci_bitmap.PCIBitMap.)) (! (= (lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap/bit_map x) (lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap/?bit_map x)) :pattern ((lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap/bit_map x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!memory_manager.pci_bitmap.PCIBitMap.) (has_type (Poly%array%. (lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap/bit_map (%Poly%lib!memory_manager.pci_bitmap.PCIBitMap. x))) (ARRAY $ (ARRAY $ (ARRAY $ (UINT 8) $ (CONST_INT 32)) $ (CONST_INT 256)) $ (CONST_INT 4096)))) :pattern ((lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap/bit_map (%Poly%lib!memory_manager.pci_bitmap.PCIBitMap. x)) (has_type x TYPE%lib!memory_manager.pci_bitmap.PCIBitMap.)))))
(assert (forall ((x lib!memory_manager.pci_bitmap.PCIBitMap.)) (! (= (lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap/ghost_map x) (lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap/?ghost_map x)) :pattern ((lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap/ghost_map x)))))
(assert (forall ((x lib!kernel.spec.Kernel.)) (! (= x (%Poly%lib!kernel.spec.Kernel. (Poly%lib!kernel.spec.Kernel. x))) :pattern ((Poly%lib!kernel.spec.Kernel. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!kernel.spec.Kernel.) (= x (Poly%lib!kernel.spec.Kernel. (%Poly%lib!kernel.spec.Kernel. x)))) :pattern ((has_type x TYPE%lib!kernel.spec.Kernel.)))))
(assert (forall ((_page_alloc! lib!allocator.page_allocator_spec_impl.PageAllocator.) (_mem_man! lib!memory_manager.spec_impl.MemoryManager.) (_proc_man! lib!process_manager.spec_impl.ProcessManager.) (_page_mapping! vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>.)) (! (=> (and (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. _page_alloc!) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.) (has_type (Poly%lib!memory_manager.spec_impl.MemoryManager. _mem_man!) TYPE%lib!memory_manager.spec_impl.MemoryManager.) (has_type (Poly%lib!process_manager.spec_impl.ProcessManager. _proc_man!) TYPE%lib!process_manager.spec_impl.ProcessManager.)) (has_type (Poly%lib!kernel.spec.Kernel. (lib!kernel.spec.Kernel./Kernel _page_alloc! _mem_man! _proc_man! _page_mapping!)) TYPE%lib!kernel.spec.Kernel.)) :pattern ((has_type (Poly%lib!kernel.spec.Kernel. (lib!kernel.spec.Kernel./Kernel _page_alloc! _mem_man! _proc_man! _page_mapping!)) TYPE%lib!kernel.spec.Kernel.)))))
(assert (forall ((x lib!kernel.spec.Kernel.)) (! (= (lib!kernel.spec.Kernel./Kernel/page_alloc x) (lib!kernel.spec.Kernel./Kernel/?page_alloc x)) :pattern ((lib!kernel.spec.Kernel./Kernel/page_alloc x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!kernel.spec.Kernel.) (has_type (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. x))) TYPE%lib!allocator.page_allocator_spec_impl.PageAllocator.)) :pattern ((lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. x)) (has_type x TYPE%lib!kernel.spec.Kernel.)))))
(assert (forall ((x lib!kernel.spec.Kernel.)) (! (= (lib!kernel.spec.Kernel./Kernel/mem_man x) (lib!kernel.spec.Kernel./Kernel/?mem_man x)) :pattern ((lib!kernel.spec.Kernel./Kernel/mem_man x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!kernel.spec.Kernel.) (has_type (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. x))) TYPE%lib!memory_manager.spec_impl.MemoryManager.)) :pattern ((lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. x)) (has_type x TYPE%lib!kernel.spec.Kernel.)))))
(assert (forall ((x lib!kernel.spec.Kernel.)) (! (= (lib!kernel.spec.Kernel./Kernel/proc_man x) (lib!kernel.spec.Kernel./Kernel/?proc_man x)) :pattern ((lib!kernel.spec.Kernel./Kernel/proc_man x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!kernel.spec.Kernel.) (has_type (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. x))) TYPE%lib!process_manager.spec_impl.ProcessManager.)) :pattern ((lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. x)) (has_type x TYPE%lib!kernel.spec.Kernel.)))))
(assert (forall ((x lib!kernel.spec.Kernel.)) (! (= (lib!kernel.spec.Kernel./Kernel/page_mapping x) (lib!kernel.spec.Kernel./Kernel/?page_mapping x)) :pattern ((lib!kernel.spec.Kernel./Kernel/page_mapping x)))))
(assert (forall ((x lib!define.ThreadState.)) (! (= x (%Poly%lib!define.ThreadState. (Poly%lib!define.ThreadState. x))) :pattern ((Poly%lib!define.ThreadState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.ThreadState.) (= x (Poly%lib!define.ThreadState. (%Poly%lib!define.ThreadState. x)))) :pattern ((has_type x TYPE%lib!define.ThreadState.)))))
(assert (forall ((x lib!define.ThreadState.)) (! (has_type (Poly%lib!define.ThreadState. x) TYPE%lib!define.ThreadState.) :pattern ((has_type (Poly%lib!define.ThreadState. x) TYPE%lib!define.ThreadState.)))))
(assert (forall ((x lib!define.EndpointState.)) (! (= x (%Poly%lib!define.EndpointState. (Poly%lib!define.EndpointState. x))) :pattern ((Poly%lib!define.EndpointState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.EndpointState.) (= x (Poly%lib!define.EndpointState. (%Poly%lib!define.EndpointState. x)))) :pattern ((has_type x TYPE%lib!define.EndpointState.)))))
(assert (forall ((x lib!define.EndpointState.)) (! (has_type (Poly%lib!define.EndpointState. x) TYPE%lib!define.EndpointState.) :pattern ((has_type (Poly%lib!define.EndpointState. x) TYPE%lib!define.EndpointState.)))))
(assert (forall ((x lib!define.PageState.)) (! (= x (%Poly%lib!define.PageState. (Poly%lib!define.PageState. x))) :pattern ((Poly%lib!define.PageState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.PageState.) (= x (Poly%lib!define.PageState. (%Poly%lib!define.PageState. x)))) :pattern ((has_type x TYPE%lib!define.PageState.)))))
(assert (forall ((x lib!define.PageState.)) (! (has_type (Poly%lib!define.PageState. x) TYPE%lib!define.PageState.) :pattern ((has_type (Poly%lib!define.PageState. x) TYPE%lib!define.PageState.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= x (%Poly%lib!define.RetValueType. (Poly%lib!define.RetValueType. x))) :pattern ((Poly%lib!define.RetValueType. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (= x (Poly%lib!define.RetValueType. (%Poly%lib!define.RetValueType. x)))) :pattern ((has_type x TYPE%lib!define.RetValueType.)))))
(assert (forall ((_value! Int)) (! (=> (uInv SZ _value!) (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessUsize _value!)) TYPE%lib!define.RetValueType.)) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessUsize _value!)) TYPE%lib!define.RetValueType.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessUsize/value x) (lib!define.RetValueType./SuccessUsize/?value x)) :pattern ((lib!define.RetValueType./SuccessUsize/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessUsize/value (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessUsize/value (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)))))
(assert (forall ((_value! vstd!seq.Seq<usize.>.)) (! (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessSeqUsize _value!)) TYPE%lib!define.RetValueType.) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessSeqUsize _value!)) TYPE%lib!define.RetValueType.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessSeqUsize/value x) (lib!define.RetValueType./SuccessSeqUsize/?value x)) :pattern ((lib!define.RetValueType./SuccessSeqUsize/value x)))))
(assert (forall ((_value1! Int) (_value2! Int)) (! (=> (and (uInv SZ _value1!) (uInv SZ _value2!)) (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessPairUsize _value1! _value2!)) TYPE%lib!define.RetValueType.)) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessPairUsize _value1! _value2!)) TYPE%lib!define.RetValueType.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessPairUsize/value1 x) (lib!define.RetValueType./SuccessPairUsize/?value1 x)) :pattern ((lib!define.RetValueType./SuccessPairUsize/value1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessPairUsize/value1 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessPairUsize/value1 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessPairUsize/value2 x) (lib!define.RetValueType./SuccessPairUsize/?value2 x)) :pattern ((lib!define.RetValueType./SuccessPairUsize/value2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessPairUsize/value2 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessPairUsize/value2 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)))))
(assert (forall ((_value1! Int) (_value2! Int) (_value3! Int)) (! (=> (and (uInv SZ _value1!) (uInv SZ _value2!) (uInv SZ _value3!)) (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessThreeUsize _value1! _value2! _value3!)) TYPE%lib!define.RetValueType.)) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessThreeUsize _value1! _value2! _value3!)) TYPE%lib!define.RetValueType.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessThreeUsize/value1 x) (lib!define.RetValueType./SuccessThreeUsize/?value1 x)) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessThreeUsize/value1 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value1 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessThreeUsize/value2 x) (lib!define.RetValueType./SuccessThreeUsize/?value2 x)) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessThreeUsize/value2 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value2 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessThreeUsize/value3 x) (lib!define.RetValueType./SuccessThreeUsize/?value3 x)) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value3 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessThreeUsize/value3 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value3 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)))))
(assert (has_type (Poly%lib!define.RetValueType. lib!define.RetValueType./CpuIdle) TYPE%lib!define.RetValueType.))
(assert (has_type (Poly%lib!define.RetValueType. lib!define.RetValueType./Error) TYPE%lib!define.RetValueType.))
(assert (has_type (Poly%lib!define.RetValueType. lib!define.RetValueType./Else) TYPE%lib!define.RetValueType.))
(assert (forall ((x lib!trap.TrapFrameOption.)) (! (= x (%Poly%lib!trap.TrapFrameOption. (Poly%lib!trap.TrapFrameOption. x))) :pattern ((Poly%lib!trap.TrapFrameOption. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.TrapFrameOption.) (= x (Poly%lib!trap.TrapFrameOption. (%Poly%lib!trap.TrapFrameOption. x)))) :pattern ((has_type x TYPE%lib!trap.TrapFrameOption.)))))
(assert (forall ((_reg! lib!trap.Registers.) (_exists! Bool)) (! (=> (has_type (Poly%lib!trap.Registers. _reg!) TYPE%lib!trap.Registers.) (has_type (Poly%lib!trap.TrapFrameOption. (lib!trap.TrapFrameOption./TrapFrameOption _reg! _exists!)) TYPE%lib!trap.TrapFrameOption.)) :pattern ((has_type (Poly%lib!trap.TrapFrameOption. (lib!trap.TrapFrameOption./TrapFrameOption _reg! _exists!)) TYPE%lib!trap.TrapFrameOption.)))))
(assert (forall ((x lib!trap.TrapFrameOption.)) (! (= (lib!trap.TrapFrameOption./TrapFrameOption/reg x) (lib!trap.TrapFrameOption./TrapFrameOption/?reg x)) :pattern ((lib!trap.TrapFrameOption./TrapFrameOption/reg x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.TrapFrameOption.) (has_type (Poly%lib!trap.Registers. (lib!trap.TrapFrameOption./TrapFrameOption/reg (%Poly%lib!trap.TrapFrameOption. x))) TYPE%lib!trap.Registers.)) :pattern ((lib!trap.TrapFrameOption./TrapFrameOption/reg (%Poly%lib!trap.TrapFrameOption. x)) (has_type x TYPE%lib!trap.TrapFrameOption.)))))
(assert (forall ((x lib!trap.TrapFrameOption.)) (! (= (lib!trap.TrapFrameOption./TrapFrameOption/exists x) (lib!trap.TrapFrameOption./TrapFrameOption/?exists x)) :pattern ((lib!trap.TrapFrameOption./TrapFrameOption/exists x)))))
(assert (forall ((x lib!trap.Registers.)) (! (= x (%Poly%lib!trap.Registers. (Poly%lib!trap.Registers. x))) :pattern ((Poly%lib!trap.Registers. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (= x (Poly%lib!trap.Registers. (%Poly%lib!trap.Registers. x)))) :pattern ((has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((_r15! Int) (_r14! Int) (_r13! Int) (_r12! Int) (_rbp! Int) (_rbx! Int) (_r11! Int) (_r10! Int) (_r9! Int) (_r8! Int) (_rcx! Int) (_rdx! Int) (_rsi! Int) (_rdi! Int) (_rax! Int) (_error_code! Int) (_rip! Int) (_cs! Int) (_flags! Int) (_rsp! Int) (_ss! Int)) (! (=> (and (uInv 64 _r15!) (uInv 64 _r14!) (uInv 64 _r13!) (uInv 64 _r12!) (uInv 64 _rbp!) (uInv 64 _rbx!) (uInv 64 _r11!) (uInv 64 _r10!) (uInv 64 _r9!) (uInv 64 _r8!) (uInv 64 _rcx!) (uInv 64 _rdx!) (uInv 64 _rsi!) (uInv 64 _rdi!) (uInv 64 _rax!) (uInv 64 _error_code!) (uInv 64 _rip!) (uInv 64 _cs!) (uInv 64 _flags!) (uInv 64 _rsp!) (uInv 64 _ss!)) (has_type (Poly%lib!trap.Registers. (lib!trap.Registers./Registers _r15! _r14! _r13! _r12! _rbp! _rbx! _r11! _r10! _r9! _r8! _rcx! _rdx! _rsi! _rdi! _rax! _error_code! _rip! _cs! _flags! _rsp! _ss!)) TYPE%lib!trap.Registers.)) :pattern ((has_type (Poly%lib!trap.Registers. (lib!trap.Registers./Registers _r15! _r14! _r13! _r12! _rbp! _rbx! _r11! _r10! _r9! _r8! _rcx! _rdx! _rsi! _rdi! _rax! _error_code! _rip! _cs! _flags! _rsp! _ss!)) TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r15 x) (lib!trap.Registers./Registers/?r15 x)) :pattern ((lib!trap.Registers./Registers/r15 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r15 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r15 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r14 x) (lib!trap.Registers./Registers/?r14 x)) :pattern ((lib!trap.Registers./Registers/r14 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r14 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r14 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r13 x) (lib!trap.Registers./Registers/?r13 x)) :pattern ((lib!trap.Registers./Registers/r13 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r13 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r13 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r12 x) (lib!trap.Registers./Registers/?r12 x)) :pattern ((lib!trap.Registers./Registers/r12 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r12 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r12 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rbp x) (lib!trap.Registers./Registers/?rbp x)) :pattern ((lib!trap.Registers./Registers/rbp x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rbp (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rbp (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rbx x) (lib!trap.Registers./Registers/?rbx x)) :pattern ((lib!trap.Registers./Registers/rbx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rbx (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rbx (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r11 x) (lib!trap.Registers./Registers/?r11 x)) :pattern ((lib!trap.Registers./Registers/r11 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r11 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r11 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r10 x) (lib!trap.Registers./Registers/?r10 x)) :pattern ((lib!trap.Registers./Registers/r10 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r10 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r10 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r9 x) (lib!trap.Registers./Registers/?r9 x)) :pattern ((lib!trap.Registers./Registers/r9 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r9 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r9 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r8 x) (lib!trap.Registers./Registers/?r8 x)) :pattern ((lib!trap.Registers./Registers/r8 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r8 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r8 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rcx x) (lib!trap.Registers./Registers/?rcx x)) :pattern ((lib!trap.Registers./Registers/rcx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rcx (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rcx (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rdx x) (lib!trap.Registers./Registers/?rdx x)) :pattern ((lib!trap.Registers./Registers/rdx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rdx (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rdx (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rsi x) (lib!trap.Registers./Registers/?rsi x)) :pattern ((lib!trap.Registers./Registers/rsi x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rsi (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rsi (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rdi x) (lib!trap.Registers./Registers/?rdi x)) :pattern ((lib!trap.Registers./Registers/rdi x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rdi (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rdi (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rax x) (lib!trap.Registers./Registers/?rax x)) :pattern ((lib!trap.Registers./Registers/rax x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rax (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rax (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/error_code x) (lib!trap.Registers./Registers/?error_code x)) :pattern ((lib!trap.Registers./Registers/error_code x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/error_code (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/error_code (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rip x) (lib!trap.Registers./Registers/?rip x)) :pattern ((lib!trap.Registers./Registers/rip x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rip (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rip (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/cs x) (lib!trap.Registers./Registers/?cs x)) :pattern ((lib!trap.Registers./Registers/cs x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/cs (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/cs (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/flags x) (lib!trap.Registers./Registers/?flags x)) :pattern ((lib!trap.Registers./Registers/flags x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/flags (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/flags (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rsp x) (lib!trap.Registers./Registers/?rsp x)) :pattern ((lib!trap.Registers./Registers/rsp x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rsp (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rsp (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/ss x) (lib!trap.Registers./Registers/?ss x)) :pattern ((lib!trap.Registers./Registers/ss x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/ss (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/ss (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!array.Array.)) (! (= x (%Poly%lib!array.Array. (Poly%lib!array.Array. x))) :pattern ((Poly%lib!array.Array. x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (= x (Poly%lib!array.Array. (%Poly%lib!array.Array. x)))) :pattern ((has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (_seq! Poly) (_ar! %%Function%%)) (! (=> (and (has_type _seq! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (Poly%array%. _ar!) (ARRAY A&. A& N&. N&))) (has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))) :pattern ((has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/seq x) (lib!array.Array./Array/?seq x)) :pattern ((lib!array.Array./Array/seq x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/ar x) (lib!array.Array./Array/?ar x)) :pattern ((lib!array.Array./Array/ar x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (Poly%array%. (lib!array.Array./Array/ar (%Poly%lib!array.Array. x))) (ARRAY A&. A& N&. N&))) :pattern ((lib!array.Array./Array/ar (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(define-fun is-lib!array.Array./Array_ ((c lib!array.Array.)) Bool ((_ is lib!array.Array./Array) c))
(assert (forall ((x lib!array.Array.)) (! (=> (is-lib!array.Array./Array_ x) (height_lt (height (lib!array.Array./Array/seq x)) (height (Poly%lib!array.Array. x)))) :pattern ((height (lib!array.Array./Array/seq x))))))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= x (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. x))) :pattern ((Poly%lib!array_set.ArraySet. x)))))
(assert (forall ((N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_set.ArraySet. N&. N&)) (= x (Poly%lib!array_set.ArraySet. (%Poly%lib!array_set.ArraySet. x)))) :pattern ((has_type x (TYPE%lib!array_set.ArraySet. N&. N&))))))
(assert (forall ((N&. Dcr) (N& Type) (_data! lib!array.Array.) (_len! Int) (_set! vstd!set.Set<usize.>.)) (! (=> (and (has_type (Poly%lib!array.Array. _data!) (TYPE%lib!array.Array. $ BOOL N&. N&)) (uInv SZ _len!)) (has_type (Poly%lib!array_set.ArraySet. (lib!array_set.ArraySet./ArraySet _data! _len! _set!)) (TYPE%lib!array_set.ArraySet. N&. N&))) :pattern ((has_type (Poly%lib!array_set.ArraySet. (lib!array_set.ArraySet./ArraySet _data! _len! _set!)) (TYPE%lib!array_set.ArraySet. N&. N&))))))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= (lib!array_set.ArraySet./ArraySet/data x) (lib!array_set.ArraySet./ArraySet/?data x)) :pattern ((lib!array_set.ArraySet./ArraySet/data x)))))
(assert (forall ((N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_set.ArraySet. N&. N&)) (has_type (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. x))) (TYPE%lib!array.Array. $ BOOL N&. N&))) :pattern ((lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. x)) (has_type x (TYPE%lib!array_set.ArraySet. N&. N&))))))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= (lib!array_set.ArraySet./ArraySet/len x) (lib!array_set.ArraySet./ArraySet/?len x)) :pattern ((lib!array_set.ArraySet./ArraySet/len x)))))
(assert (forall ((N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_set.ArraySet. N&. N&)) (uInv SZ (lib!array_set.ArraySet./ArraySet/len (%Poly%lib!array_set.ArraySet. x)))) :pattern ((lib!array_set.ArraySet./ArraySet/len (%Poly%lib!array_set.ArraySet. x)) (has_type x (TYPE%lib!array_set.ArraySet. N&. N&))))))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= (lib!array_set.ArraySet./ArraySet/set x) (lib!array_set.ArraySet./ArraySet/?set x)) :pattern ((lib!array_set.ArraySet./ArraySet/set x)))))
(define-fun is-lib!array_set.ArraySet./ArraySet_ ((c lib!array_set.ArraySet.)) Bool ((_ is lib!array_set.ArraySet./ArraySet) c))
(assert (forall ((x lib!array_set.ArraySet.)) (! (=> (is-lib!array_set.ArraySet./ArraySet_ x) (height_lt (height (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data x))) (height (Poly%lib!array_set.ArraySet. x)))) :pattern ((height (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data x)))))))
(assert (forall ((x lib!array_vec.ArrayVec.)) (! (= x (%Poly%lib!array_vec.ArrayVec. (Poly%lib!array_vec.ArrayVec. x))) :pattern ((Poly%lib!array_vec.ArrayVec. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (= x (Poly%lib!array_vec.ArrayVec. (%Poly%lib!array_vec.ArrayVec. x)))) :pattern ((has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (_data! lib!array.Array.) (_len! Int)) (! (=> (and (has_type (Poly%lib!array.Array. _data!) (TYPE%lib!array.Array. T&. T& N&. N&)) (uInv SZ _len!)) (has_type (Poly%lib!array_vec.ArrayVec. (lib!array_vec.ArrayVec./ArrayVec _data! _len!)) (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&))) :pattern ((has_type (Poly%lib!array_vec.ArrayVec. (lib!array_vec.ArrayVec./ArrayVec _data! _len!)) (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&))))))
(assert (forall ((x lib!array_vec.ArrayVec.)) (! (= (lib!array_vec.ArrayVec./ArrayVec/data x) (lib!array_vec.ArrayVec./ArrayVec/?data x)) :pattern ((lib!array_vec.ArrayVec./ArrayVec/data x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (has_type (Poly%lib!array.Array. (lib!array_vec.ArrayVec./ArrayVec/data (%Poly%lib!array_vec.ArrayVec. x))) (TYPE%lib!array.Array. T&. T& N&. N&))) :pattern ((lib!array_vec.ArrayVec./ArrayVec/data (%Poly%lib!array_vec.ArrayVec. x)) (has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&))))))
(assert (forall ((x lib!array_vec.ArrayVec.)) (! (= (lib!array_vec.ArrayVec./ArrayVec/len x) (lib!array_vec.ArrayVec./ArrayVec/?len x)) :pattern ((lib!array_vec.ArrayVec./ArrayVec/len x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (uInv SZ (lib!array_vec.ArrayVec./ArrayVec/len (%Poly%lib!array_vec.ArrayVec. x)))) :pattern ((lib!array_vec.ArrayVec./ArrayVec/len (%Poly%lib!array_vec.ArrayVec. x)) (has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&))))))
(define-fun is-lib!array_vec.ArrayVec./ArrayVec_ ((c lib!array_vec.ArrayVec.)) Bool ((_ is lib!array_vec.ArrayVec./ArrayVec) c))
(assert (forall ((x lib!array_vec.ArrayVec.)) (! (=> (is-lib!array_vec.ArrayVec./ArrayVec_ x) (height_lt (height (Poly%lib!array.Array. (lib!array_vec.ArrayVec./ArrayVec/data x))) (height (Poly%lib!array_vec.ArrayVec. x)))) :pattern ((height (Poly%lib!array.Array. (lib!array_vec.ArrayVec./ArrayVec/data x)))))))
(assert (forall ((x lib!va_range.VaRange4K.)) (! (= x (%Poly%lib!va_range.VaRange4K. (Poly%lib!va_range.VaRange4K. x))) :pattern ((Poly%lib!va_range.VaRange4K. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!va_range.VaRange4K.) (= x (Poly%lib!va_range.VaRange4K. (%Poly%lib!va_range.VaRange4K. x)))) :pattern ((has_type x TYPE%lib!va_range.VaRange4K.)))))
(assert (forall ((_start! Int) (_len! Int) (_view! vstd!seq.Seq<usize.>.)) (! (=> (and (uInv SZ _start!) (uInv SZ _len!)) (has_type (Poly%lib!va_range.VaRange4K. (lib!va_range.VaRange4K./VaRange4K _start! _len! _view!)) TYPE%lib!va_range.VaRange4K.)) :pattern ((has_type (Poly%lib!va_range.VaRange4K. (lib!va_range.VaRange4K./VaRange4K _start! _len! _view!)) TYPE%lib!va_range.VaRange4K.)))))
(assert (forall ((x lib!va_range.VaRange4K.)) (! (= (lib!va_range.VaRange4K./VaRange4K/start x) (lib!va_range.VaRange4K./VaRange4K/?start x)) :pattern ((lib!va_range.VaRange4K./VaRange4K/start x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!va_range.VaRange4K.) (uInv SZ (lib!va_range.VaRange4K./VaRange4K/start (%Poly%lib!va_range.VaRange4K. x)))) :pattern ((lib!va_range.VaRange4K./VaRange4K/start (%Poly%lib!va_range.VaRange4K. x)) (has_type x TYPE%lib!va_range.VaRange4K.)))))
(assert (forall ((x lib!va_range.VaRange4K.)) (! (= (lib!va_range.VaRange4K./VaRange4K/len x) (lib!va_range.VaRange4K./VaRange4K/?len x)) :pattern ((lib!va_range.VaRange4K./VaRange4K/len x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!va_range.VaRange4K.) (uInv SZ (lib!va_range.VaRange4K./VaRange4K/len (%Poly%lib!va_range.VaRange4K. x)))) :pattern ((lib!va_range.VaRange4K./VaRange4K/len (%Poly%lib!va_range.VaRange4K. x)) (has_type x TYPE%lib!va_range.VaRange4K.)))))
(assert (forall ((x lib!va_range.VaRange4K.)) (! (= (lib!va_range.VaRange4K./VaRange4K/view x) (lib!va_range.VaRange4K./VaRange4K/?view x)) :pattern ((lib!va_range.VaRange4K./VaRange4K/view x)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)))))
(assert (forall ((x tuple%5.)) (! (= x (%Poly%tuple%5. (Poly%tuple%5. x))) :pattern ((Poly%tuple%5. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&)) (= x (Poly%tuple%5. (%Poly%tuple%5. x)))) :pattern ((has_type x (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly) (_4! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&) (has_type _4! T%4&)) (has_type (Poly%tuple%5. (tuple%5./tuple%5 _0! _1! _2! _3! _4!)) (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&))) :pattern ((has_type (Poly%tuple%5. (tuple%5./tuple%5 _0! _1! _2! _3! _4!)) (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&))))))
(assert (forall ((x tuple%5.)) (! (= (tuple%5./tuple%5/0 x) (tuple%5./tuple%5/?0 x)) :pattern ((tuple%5./tuple%5/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&)) (has_type (tuple%5./tuple%5/0 (%Poly%tuple%5. x)) T%0&)) :pattern ((tuple%5./tuple%5/0 (%Poly%tuple%5. x)) (has_type x (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&))))))
(assert (forall ((x tuple%5.)) (! (= (tuple%5./tuple%5/1 x) (tuple%5./tuple%5/?1 x)) :pattern ((tuple%5./tuple%5/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&)) (has_type (tuple%5./tuple%5/1 (%Poly%tuple%5. x)) T%1&)) :pattern ((tuple%5./tuple%5/1 (%Poly%tuple%5. x)) (has_type x (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&))))))
(assert (forall ((x tuple%5.)) (! (= (tuple%5./tuple%5/2 x) (tuple%5./tuple%5/?2 x)) :pattern ((tuple%5./tuple%5/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&)) (has_type (tuple%5./tuple%5/2 (%Poly%tuple%5. x)) T%2&)) :pattern ((tuple%5./tuple%5/2 (%Poly%tuple%5. x)) (has_type x (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&))))))
(assert (forall ((x tuple%5.)) (! (= (tuple%5./tuple%5/3 x) (tuple%5./tuple%5/?3 x)) :pattern ((tuple%5./tuple%5/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&)) (has_type (tuple%5./tuple%5/3 (%Poly%tuple%5. x)) T%3&)) :pattern ((tuple%5./tuple%5/3 (%Poly%tuple%5. x)) (has_type x (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&))))))
(assert (forall ((x tuple%5.)) (! (= (tuple%5./tuple%5/4 x) (tuple%5./tuple%5/?4 x)) :pattern ((tuple%5./tuple%5/4 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&)) (has_type (tuple%5./tuple%5/4 (%Poly%tuple%5. x)) T%4&)) :pattern ((tuple%5./tuple%5/4 (%Poly%tuple%5. x)) (has_type x (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&))))))
(define-fun is-tuple%5./tuple%5_ ((c tuple%5.)) Bool ((_ is tuple%5./tuple%5) c))
(assert (forall ((x tuple%5.)) (! (=> (is-tuple%5./tuple%5_ x) (height_lt (height (tuple%5./tuple%5/0 x)) (height (Poly%tuple%5. x)))) :pattern ((height (tuple%5./tuple%5/0 x))))))
(assert (forall ((x tuple%5.)) (! (=> (is-tuple%5./tuple%5_ x) (height_lt (height (tuple%5./tuple%5/1 x)) (height (Poly%tuple%5. x)))) :pattern ((height (tuple%5./tuple%5/1 x))))))
(assert (forall ((x tuple%5.)) (! (=> (is-tuple%5./tuple%5_ x) (height_lt (height (tuple%5./tuple%5/2 x)) (height (Poly%tuple%5. x)))) :pattern ((height (tuple%5./tuple%5/2 x))))))
(assert (forall ((x tuple%5.)) (! (=> (is-tuple%5./tuple%5_ x) (height_lt (height (tuple%5./tuple%5/3 x)) (height (Poly%tuple%5. x)))) :pattern ((height (tuple%5./tuple%5/3 x))))))
(assert (forall ((x tuple%5.)) (! (=> (is-tuple%5./tuple%5_ x) (height_lt (height (tuple%5./tuple%5/4 x)) (height (Poly%tuple%5. x)))) :pattern ((height (tuple%5./tuple%5/4 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&)) (has_type y (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&)) (ext_eq deep T%0& (tuple%5./tuple%5/0 (%Poly%tuple%5. x)) (tuple%5./tuple%5/0 (%Poly%tuple%5. y))) (ext_eq deep T%1& (tuple%5./tuple%5/1 (%Poly%tuple%5. x)) (tuple%5./tuple%5/1 (%Poly%tuple%5. y))) (ext_eq deep T%2& (tuple%5./tuple%5/2 (%Poly%tuple%5. x)) (tuple%5./tuple%5/2 (%Poly%tuple%5. y))) (ext_eq deep T%3& (tuple%5./tuple%5/3 (%Poly%tuple%5. x)) (tuple%5./tuple%5/3 (%Poly%tuple%5. y))) (ext_eq deep T%4& (tuple%5./tuple%5/4 (%Poly%tuple%5. x)) (tuple%5./tuple%5/4 (%Poly%tuple%5. y)))) (ext_eq deep (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&) x y)) :pattern ((ext_eq deep (TYPE%tuple%5. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ (SINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 32)) (SINT 32)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) (TYPE%tuple%4. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&) (proj%%vstd!view.View./V A3&. A3&) (proj%vstd!view.View./V A3&. A3&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_none")
(declare-fun vstd!std_specs.option.is_none.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::no_duplicates")
(declare-fun vstd!seq_lib.impl&%0.no_duplicates.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_set")
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::subset_of")
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::addr")
(declare-fun vstd!simple_pptr.impl&%1.addr.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::mem_contents")
(declare-fun vstd!simple_pptr.impl&%1.mem_contents.? (Dcr Type Poly) vstd!raw_ptr.MemContents.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::is_init")
(declare-fun vstd!raw_ptr.impl&%7.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::is_init")
(declare-fun vstd!simple_pptr.impl&%1.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%2::arrow_0")
(declare-fun vstd!raw_ptr.impl&%2.arrow_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::value")
(declare-fun vstd!raw_ptr.impl&%7.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::value")
(declare-fun vstd!simple_pptr.impl&%1.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::view")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::spec_len")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::unique")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.unique.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::array::Array::wf")
(declare-fun lib!array.impl&%0.wf.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::MEM_MASK")
(declare-fun lib!define.MEM_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_usize2pa")
(declare-fun lib!pagetable.entry.spec_usize2pa.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PRESENT_MASK")
(declare-fun lib!define.PAGE_ENTRY_PRESENT_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2present")
(declare-fun lib!pagetable.entry.usize2present.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PS_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_PS_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PS_MASK")
(declare-fun lib!define.PAGE_ENTRY_PS_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2ps")
(declare-fun lib!pagetable.entry.usize2ps.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_WRITE_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_WRITE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_WRITE_MASK")
(declare-fun lib!define.PAGE_ENTRY_WRITE_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2write")
(declare-fun lib!pagetable.entry.usize2write.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_EXECUTE_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_EXECUTE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_EXECUTE_MASK")
(declare-fun lib!define.PAGE_ENTRY_EXECUTE_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2execute_disable")
(declare-fun lib!pagetable.entry.usize2execute_disable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_USER_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_USER_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_USER_MASK")
(declare-fun lib!define.PAGE_ENTRY_USER_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2user")
(declare-fun lib!pagetable.entry.usize2user.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_usize2page_entry_perm")
(declare-fun lib!pagetable.entry.spec_usize2page_entry_perm.? (Poly) lib!pagetable.entry.PageEntryPerm.)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_usize2page_entry")
(declare-fun lib!pagetable.entry.spec_usize2page_entry.? (Poly) lib!pagetable.entry.PageEntry.)
(set-info :comment ";; Function-Decl lib::array::Array::view")
(declare-fun lib!array.impl&%0.view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pagetable::pagemap::PageMap::spec_index")
(declare-fun lib!pagetable.pagemap.impl&%0.spec_index.? (Poly Poly) lib!pagetable.entry.PageEntry.)
(set-info :comment ";; Function-Decl lib::pagetable::entry::PageEntry::is_empty")
(declare-fun lib!pagetable.entry.impl&%4.is_empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::NUM_CPUS")
(declare-fun lib!define.NUM_CPUS.? () Int)
(set-info :comment ";; Function-Decl lib::define::NUM_PAGES")
(declare-fun lib!define.NUM_PAGES.? () Int)
(set-info :comment ";; Function-Decl lib::define::MAX_NUM_ENDPOINT_DESCRIPTORS")
(declare-fun lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.? () Int)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::wf")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.wf.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_valid")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_resolve")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::define::IOID_MAX")
(declare-fun lib!define.IOID_MAX.? () Int)
(set-info :comment ";; Function-Decl lib::memory_manager::pci_bitmap::PCIBitMap::wf")
(declare-fun lib!memory_manager.pci_bitmap.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::memory_manager::pci_bitmap::PCIBitMap::view")
(declare-fun lib!memory_manager.pci_bitmap.impl&%0.view.? (Poly) vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>.)
(set-info :comment ";; Function-Decl lib::memory_manager::root_table::RootTable::wf")
(declare-fun lib!memory_manager.root_table.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::memory_manager::root_table::RootTable::resolve")
(declare-fun lib!memory_manager.root_table.impl&%0.resolve.? (Poly Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::define::MEM_4k_MASK")
(declare-fun lib!define.MEM_4k_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::define::KERNEL_MEM_END_L4INDEX")
(declare-fun lib!define.KERNEL_MEM_END_L4INDEX.? () Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_va_4k_valid")
(declare-fun lib!util.page_ptr_util_u.spec_va_4k_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_ptr_valid")
(declare-fun lib!util.page_ptr_util_u.page_ptr_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_ptr_2m_valid")
(declare-fun lib!util.page_ptr_util_u.page_ptr_2m_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_ptr_1g_valid")
(declare-fun lib!util.page_ptr_util_u.page_ptr_1g_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::wf")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_add")
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::page_closure")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::mapping_4k")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (Poly) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::mapping_2m")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (Poly) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::mapping_1g")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (Poly) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(set-info :comment ";; Function-Decl lib::define::PCID_MAX")
(declare-fun lib!define.PCID_MAX.? () Int)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::container_dom")
(declare-fun lib!process_manager.spec_impl.impl&%0.container_dom.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::array_vec::ArrayVec::spec_len")
(declare-fun lib!array_vec.impl&%0.spec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::array_vec::ArrayVec::spec_capacity")
(declare-fun lib!array_vec.impl&%0.spec_capacity.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::array_vec::ArrayVec::wf")
(declare-fun lib!array_vec.impl&%0.wf.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::array_vec::ArrayVec::view_until")
(declare-fun lib!array_vec.impl&%0.view_until.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::array_vec::ArrayVec::view")
(declare-fun lib!array_vec.impl&%0.view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::get_free_pcids_as_set")
(declare-fun lib!memory_manager.spec_impl.impl&%0.get_free_pcids_as_set.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::pagetable::pagetable_spec_impl::PageTable::is_empty")
(declare-fun lib!pagetable.pagetable_spec_impl.impl&%0.is_empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::disjoint")
(declare-fun vstd!set.impl&%0.disjoint.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::pagetables_wf")
(declare-fun lib!memory_manager.spec_impl.impl&%0.pagetables_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::array::Array::spec_index")
(declare-fun lib!array.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::get_free_ioids_as_set")
(declare-fun lib!memory_manager.spec_impl.impl&%0.get_free_ioids_as_set.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::iommutables_wf")
(declare-fun lib!memory_manager.spec_impl.impl&%0.iommutables_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::pagetable_iommu_table_disjoint")
(declare-fun lib!memory_manager.spec_impl.impl&%0.pagetable_iommu_table_disjoint.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::get_iommu_table_by_ioid")
(declare-fun lib!memory_manager.spec_impl.impl&%0.get_iommu_table_by_ioid.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::root_table_wf")
(declare-fun lib!memory_manager.spec_impl.impl&%0.root_table_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::root_table_cache_wf")
(declare-fun lib!memory_manager.spec_impl.impl&%0.root_table_cache_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::kernel_entries_wf")
(declare-fun lib!memory_manager.spec_impl.impl&%0.kernel_entries_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::pcid_active")
(declare-fun lib!memory_manager.spec_impl.impl&%0.pcid_active.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::pcid_to_proc_wf")
(declare-fun lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::wf")
(declare-fun lib!memory_manager.spec_impl.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_index_valid")
(declare-fun lib!util.page_ptr_util_u.page_index_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_index2page_ptr")
(declare-fun lib!util.page_ptr_util_u.spec_page_index2page_ptr.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::page_array_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_ptr2page_index")
(declare-fun lib!util.page_ptr_util_u.spec_page_ptr2page_index.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_4k_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_2m_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_1g_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_4k_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_2m_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_1g_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_4k_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_2m_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_1g_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_index_2m_valid")
(declare-fun lib!util.page_ptr_util_u.page_index_2m_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_index_truncate_2m")
(declare-fun lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::page_index_1g_valid")
(declare-fun lib!util.page_ptr_util_u.page_index_1g_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_index_truncate_1g")
(declare-fun lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::merged_pages_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_index_merge_2m_vaild")
(declare-fun lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_page_index_merge_1g_vaild")
(declare-fun lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::hugepages_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::perm_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::container_wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.container_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_have_reference_counter")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::wf")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::array_set::ArraySet::wf")
(declare-fun lib!array_set.impl&%0.wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::spec_get_payload_as_va_range")
(declare-fun lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::va_range::VaRange4K::view")
(declare-fun lib!va_range.impl&%2.view.? (Poly) vstd!seq.Seq<usize.>.)
(set-info :comment ";; Function-Decl lib::va_range::VaRange4K::view_match_spec")
(declare-fun lib!va_range.impl&%2.view_match_spec.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::va_range::VaRange4K::wf")
(declare-fun lib!va_range.impl&%2.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::page_closure")
(declare-fun lib!memory_manager.spec_impl.impl&%0.page_closure.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::page_closure")
(declare-fun lib!process_manager.spec_impl.impl&%0.page_closure.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_4k")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_2m")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_1g")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_2m")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_1g")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::kernel::spec::Kernel::memory_wf")
(declare-fun lib!kernel.spec.impl&%0.memory_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::get_pagetable_by_pcid")
(declare-fun lib!memory_manager.spec_impl.impl&%0.get_pagetable_by_pcid.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::get_pagetable_mapping_by_pcid")
(declare-fun lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid.? (Poly Poly) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_4k")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::page_is_mapped")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::page_mappings")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly Poly) vstd!set.Set<tuple%2<usize./usize.>.>.)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::get_iommu_table_mapping_by_ioid")
(declare-fun lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid.? (Poly Poly) vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>.)
(set-info :comment ";; Function-Decl lib::allocator::page_allocator_spec_impl::PageAllocator::page_io_mappings")
(declare-fun lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly Poly) vstd!set.Set<tuple%2<usize./usize.>.>.)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::ioid_active")
(declare-fun lib!memory_manager.spec_impl.impl&%0.ioid_active.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::kernel::spec::Kernel::mapping_wf")
(declare-fun lib!kernel.spec.impl&%0.mapping_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::proc_dom")
(declare-fun lib!process_manager.spec_impl.impl&%0.proc_dom.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_proc")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly Poly) lib!process_manager.process.Process.)
(set-info :comment ";; Function-Decl lib::memory_manager::spec_impl::MemoryManager::pcid_to_proc_ptr")
(declare-fun lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::kernel::spec::Kernel::pcid_ioid_wf")
(declare-fun lib!kernel.spec.impl&%0.pcid_ioid_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::kernel::spec::Kernel::page_mapping_wf")
(declare-fun lib!kernel.spec.impl&%0.page_mapping_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::kernel::spec::Kernel::wf")
(declare-fun lib!kernel.spec.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_container")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly Poly) lib!process_manager.container.Container.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::thread_dom")
(declare-fun lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::endpoint_dom")
(declare-fun lib!process_manager.spec_impl.impl&%0.endpoint_dom.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_thread")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly Poly) lib!process_manager.thread.Thread.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_endpoint")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? (Poly Poly) lib!process_manager.endpoint.Endpoint.)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_none")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_none.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_none.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_none.? T&. T& option!) (is-core!option.Option./None_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_none.? T&. T& option!))))))
(set-info :comment ";; Function-Specs core::option::impl&%0::is_none")
(declare-fun ens%core!option.impl&%0.is_none. (Dcr Type core!option.Option. Bool) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (b! Bool)) (! (= (ens%core!option.impl&%0.is_none. T&. T& option! b!) (= b! (is-core!option.Option./None_ option!))) :pattern ((ens%core!option.impl&%0.is_none. T&. T& option! b!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%1 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(set-info :comment ";; Function-Specs core::option::impl&%0::unwrap")
(declare-fun req%core!option.impl&%0.unwrap. (Dcr Type core!option.Option.) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.)) (! (= (req%core!option.impl&%0.unwrap. T&. T& option!) (=> %%global_location_label%%2 (is-core!option.Option./Some_ option!))) :pattern ((req%core!option.impl&%0.unwrap. T&. T& option!)))))
(declare-fun ens%core!option.impl&%0.unwrap. (Dcr Type core!option.Option. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (t! Poly)) (! (= (ens%core!option.impl&%0.unwrap. T&. T& option! t!) (and (has_type t! T&) (= t! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!)))))) :pattern ((ens%core!option.impl&%0.unwrap. T&. T& option! t!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%4 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%6 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%7 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!))))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::no_duplicates")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.no_duplicates.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.no_duplicates.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? A&. A& self!)))) (not (= i$ j$))) (not (= (vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$))))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$))))) :pattern ((vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$))))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!))))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_set")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%1 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%1 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)))))
(set-info :comment ";; Broadcast vstd::seq_lib::seq_to_set_is_finite")
(assert (=> (fuel_bool fuel%vstd!seq_lib.seq_to_set_is_finite.) (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_len.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!))))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::addr")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (uInv SZ (vstd!simple_pptr.impl&%1.addr.? V&. V& self!))) :pattern ((vstd!simple_pptr.impl&%1.addr.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::mem_contents")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)) (TYPE%vstd!raw_ptr.MemContents. V&. V&))) :pattern ((vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::is_init")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.is_init.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.is_init.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.is_init.? T&. T& self!) (is-vstd!raw_ptr.MemContents./Init_ (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.is_init.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::is_init")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%1.is_init.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%1.is_init.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!simple_pptr.impl&%1.is_init.? V&. V& self!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!))) :pattern ((vstd!simple_pptr.impl&%1.is_init.? V&. V& self!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%2::arrow_0")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%2.arrow_0.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%2.arrow_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::value")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.value.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.value.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%7.value.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!)))))
(set-info :comment ";; Function-Specs vstd::simple_pptr::impl&%1::value")
(declare-fun req%vstd!simple_pptr.impl&%1.value. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (req%vstd!simple_pptr.impl&%1.value. V&. V& self!) (=> %%global_location_label%%8 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)))) :pattern ((req%vstd!simple_pptr.impl&%1.value. V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::value")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%1.value.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%1.value.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!simple_pptr.impl&%1.value.? V&. V& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!))))) :pattern ((vstd!simple_pptr.impl&%1.value.? V&. V& self!))))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (has_type (vstd!simple_pptr.impl&%1.value.? V&. V& self!) V&)) :pattern ((vstd!simple_pptr.impl&%1.value.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::view")
(assert (fuel_bool_default fuel%lib!slinkedlist.spec_impl_u.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!slinkedlist.spec_impl_u.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::spec_len")
(assert (fuel_bool_default fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len.))
(assert (=> (fuel_bool fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!) (uClip SZ (vstd!seq.Seq.len.? T&. T& (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::unique")
(assert (fuel_bool_default fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique.))
(assert (=> (fuel_bool fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!slinkedlist.spec_impl_u.impl&%0.unique.? T&. T& N&. N& self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!))) (and (<= 0 (%I j$)) (< (%I j$) (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!)))) (not (= i$ j$))) (not (= (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) i$) (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) j$))))) :pattern ((vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) i$) (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) j$))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.unique.? T&. T& N&. N& self!))))))
(set-info :comment ";; Function-Axioms lib::array::Array::wf")
(assert (fuel_bool_default fuel%lib!array.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!array.impl&%0.wf.) (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array.impl&%0.wf.? A&. A& N&. N& self!) (= (vstd!seq.Seq.len.? A&. A& (lib!array.Array./Array/seq (%Poly%lib!array.Array. self!))) (const_int N&))) :pattern ((lib!array.impl&%0.wf.? A&. A& N&. N& self!))))))
(set-info :comment ";; Function-Axioms lib::define::MEM_MASK")
(assert (fuel_bool_default fuel%lib!define.MEM_MASK.))
(assert (=> (fuel_bool fuel%lib!define.MEM_MASK.) (= lib!define.MEM_MASK.? 281474976706560)))
(assert (uInv 64 lib!define.MEM_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_usize2pa")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_usize2pa.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_usize2pa.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.spec_usize2pa.? v!) (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.MEM_MASK.?))))) :pattern ((lib!pagetable.entry.spec_usize2pa.? v!))))))
(assert (forall ((v! Poly)) (! (=> (has_type v! (UINT SZ)) (uInv SZ (lib!pagetable.entry.spec_usize2pa.? v!))) :pattern ((lib!pagetable.entry.spec_usize2pa.? v!)))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_PRESENT_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_PRESENT_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_PRESENT_MASK.) (= lib!define.PAGE_ENTRY_PRESENT_MASK.? 1)))
(assert (uInv 64 lib!define.PAGE_ENTRY_PRESENT_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2present")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2present.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2present.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2present.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_PRESENT_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2present.? v!))))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_PS_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_PS_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_PS_SHIFT.) (= lib!define.PAGE_ENTRY_PS_SHIFT.? 7)))
(assert (uInv 64 lib!define.PAGE_ENTRY_PS_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_PS_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_PS_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_PS_MASK.) (= lib!define.PAGE_ENTRY_PS_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_PS_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_PS_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2ps")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2ps.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2ps.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2ps.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_PS_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2ps.? v!))))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_WRITE_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT.) (= lib!define.PAGE_ENTRY_WRITE_SHIFT.? 1)))
(assert (uInv 64 lib!define.PAGE_ENTRY_WRITE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_WRITE_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_WRITE_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_WRITE_MASK.) (= lib!define.PAGE_ENTRY_WRITE_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_WRITE_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_WRITE_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2write")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2write.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2write.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2write.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_WRITE_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2write.? v!))))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_EXECUTE_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT.) (= lib!define.PAGE_ENTRY_EXECUTE_SHIFT.? 63)))
(assert (uInv 64 lib!define.PAGE_ENTRY_EXECUTE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_EXECUTE_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK.) (= lib!define.PAGE_ENTRY_EXECUTE_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_EXECUTE_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_EXECUTE_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2execute_disable")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2execute_disable.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2execute_disable.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2execute_disable.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_EXECUTE_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2execute_disable.? v!))))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_USER_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_USER_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_USER_SHIFT.) (= lib!define.PAGE_ENTRY_USER_SHIFT.? 2)))
(assert (uInv 64 lib!define.PAGE_ENTRY_USER_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_USER_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_USER_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_USER_MASK.) (= lib!define.PAGE_ENTRY_USER_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_USER_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_USER_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2user")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2user.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2user.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2user.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_USER_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2user.? v!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_usize2page_entry_perm")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_usize2page_entry_perm.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_usize2page_entry_perm.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.spec_usize2page_entry_perm.? v!) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm (%B (B (lib!pagetable.entry.usize2present.? v!))) (%B (B (lib!pagetable.entry.usize2ps.? v!))) (%B (B (lib!pagetable.entry.usize2write.? v!))) (%B (B (lib!pagetable.entry.usize2execute_disable.? v!))) (%B (B (lib!pagetable.entry.usize2user.? v!))))) :pattern ((lib!pagetable.entry.spec_usize2page_entry_perm.? v!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_usize2page_entry")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_usize2page_entry.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_usize2page_entry.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.spec_usize2page_entry.? v!) (lib!pagetable.entry.PageEntry./PageEntry (%I (I (lib!pagetable.entry.spec_usize2pa.? v!))) (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.spec_usize2page_entry_perm.? v!))))) :pattern ((lib!pagetable.entry.spec_usize2page_entry.? v!))))))
(assert (forall ((v! Poly)) (! (=> (has_type v! (UINT SZ)) (has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.spec_usize2page_entry.? v!)) TYPE%lib!pagetable.entry.PageEntry.)) :pattern ((lib!pagetable.entry.spec_usize2page_entry.? v!)))))
(set-info :comment ";; Function-Axioms lib::array::Array::view")
(assert (fuel_bool_default fuel%lib!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!array.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array.impl&%0.view.? A&. A& N&. N& self!) (lib!array.Array./Array/seq (%Poly%lib!array.Array. self!))) :pattern ((lib!array.impl&%0.view.? A&. A& N&. N& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (lib!array.impl&%0.view.? A&. A& N&. N& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((lib!array.impl&%0.view.? A&. A& N&. N& self!)))))
(set-info :comment ";; Function-Specs lib::pagetable::pagemap::PageMap::spec_index")
(declare-fun req%lib!pagetable.pagemap.impl&%0.spec_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((self! Poly) (index! Poly)) (! (= (req%lib!pagetable.pagemap.impl&%0.spec_index. self! index!) (=> %%global_location_label%%9 (and (<= 0 (%I index!)) (< (%I index!) 512)))) :pattern ((req%lib!pagetable.pagemap.impl&%0.spec_index. self! index!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagemap::PageMap::spec_index")
(assert (fuel_bool_default fuel%lib!pagetable.pagemap.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagemap.impl&%0.spec_index.) (forall ((self! Poly) (index! Poly)) (! (= (lib!pagetable.pagemap.impl&%0.spec_index.? self! index!) (%Poly%lib!pagetable.entry.PageEntry. (vstd!seq.Seq.index.? $ TYPE%lib!pagetable.entry.PageEntry. (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagemap.PageMap./PageMap/spec_seq (%Poly%lib!pagetable.pagemap.PageMap. self!))) index!))) :pattern ((lib!pagetable.pagemap.impl&%0.spec_index.? self! index!))))))
(assert (forall ((self! Poly) (index! Poly)) (! (=> (and (has_type self! TYPE%lib!pagetable.pagemap.PageMap.) (has_type index! (UINT SZ))) (has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? self! index!)) TYPE%lib!pagetable.entry.PageEntry.)) :pattern ((lib!pagetable.pagemap.impl&%0.spec_index.? self! index!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::PageEntry::is_empty")
(assert (fuel_bool_default fuel%lib!pagetable.entry.impl&%4.is_empty.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.impl&%4.is_empty.) (forall ((self! Poly)) (! (= (lib!pagetable.entry.impl&%4.is_empty.? self!) (and (and (and (and (and (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. self!)) 0) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false))) :pattern ((lib!pagetable.entry.impl&%4.is_empty.? self!))))))
(set-info :comment ";; Function-Axioms lib::define::NUM_CPUS")
(assert (fuel_bool_default fuel%lib!define.NUM_CPUS.))
(assert (=> (fuel_bool fuel%lib!define.NUM_CPUS.) (= lib!define.NUM_CPUS.? 32)))
(assert (uInv SZ lib!define.NUM_CPUS.?))
(set-info :comment ";; Function-Axioms lib::define::NUM_PAGES")
(assert (fuel_bool_default fuel%lib!define.NUM_PAGES.))
(assert (=> (fuel_bool fuel%lib!define.NUM_PAGES.) (= lib!define.NUM_PAGES.? (uClip SZ (Mul 128 1024)))))
(assert (uInv SZ lib!define.NUM_PAGES.?))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms lib::define::MAX_NUM_ENDPOINT_DESCRIPTORS")
(assert (fuel_bool_default fuel%lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.))
(assert (=> (fuel_bool fuel%lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.) (= lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.? 128)))
(assert (uInv SZ lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.?))
(set-info :comment ";; Function-Specs lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_resolve")
(declare-fun req%lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (index! Poly)) (! (= (req%lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve. T&. T& N&. N& self! index!) (=> %%global_location_label%%10 (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& self! index!))) :pattern ((req%lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve. T&. T& N&. N& self! index!)))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_resolve")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (index! Poly)) (! (=> (and (has_type self! (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type index! (SINT 32))) (has_type (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& self! index!) T&)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& self! index!)))))
(set-info :comment ";; Function-Axioms lib::define::IOID_MAX")
(assert (fuel_bool_default fuel%lib!define.IOID_MAX.))
(assert (=> (fuel_bool fuel%lib!define.IOID_MAX.) (= lib!define.IOID_MAX.? 4096)))
(assert (uInv SZ lib!define.IOID_MAX.?))
(set-info :comment ";; Function-Axioms lib::memory_manager::pci_bitmap::PCIBitMap::wf")
(assert (fuel_bool_default fuel%lib!memory_manager.pci_bitmap.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!memory_manager.pci_bitmap.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!memory_manager.pci_bitmap.impl&%0.wf.? self!) (forall ((ioid$ Poly) (bus$ Poly) (dev$ Poly) (fun$ Poly)) (! (=> (and (has_type ioid$ (UINT SZ)) (has_type bus$ (UINT 8)) (has_type dev$ (UINT 8)) (has_type fun$ (UINT 8))) (= (and (and (and (and (<= 0 (%I ioid$)) (< (%I ioid$) lib!define.IOID_MAX.?)) (and (<= 0 (%I bus$)) (< (%I bus$) 256))) (and (<= 0 (%I dev$)) (< (%I dev$) 32))) (and (<= 0 (%I fun$)) (< (%I fun$) 8))) (vstd!set.impl&%0.contains.? $ (TYPE%tuple%4. $ (UINT SZ) $ (UINT 8) $ (UINT 8) $ (UINT 8)) (vstd!map.impl&%0.dom.? $ (TYPE%tuple%4. $ (UINT SZ) $ (UINT 8) $ (UINT 8) $ (UINT 8)) $ BOOL (Poly%vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>. (lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap/ghost_map (%Poly%lib!memory_manager.pci_bitmap.PCIBitMap. self!)))) (Poly%tuple%4. (tuple%4./tuple%4 ioid$ bus$ dev$ fun$))))) :pattern ((vstd!set.impl&%0.contains.? $ (TYPE%tuple%4. $ (UINT SZ) $ (UINT 8) $ (UINT 8) $ (UINT 8)) (vstd!map.impl&%0.dom.? $ (TYPE%tuple%4. $ (UINT SZ) $ (UINT 8) $ (UINT 8) $ (UINT 8)) $ BOOL (Poly%vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>. (lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap/ghost_map (%Poly%lib!memory_manager.pci_bitmap.PCIBitMap. self!)))) (Poly%tuple%4. (tuple%4./tuple%4 ioid$ bus$ dev$ fun$))))))) :pattern ((lib!memory_manager.pci_bitmap.impl&%0.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::memory_manager::pci_bitmap::PCIBitMap::view")
(assert (fuel_bool_default fuel%lib!memory_manager.pci_bitmap.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!memory_manager.pci_bitmap.impl&%0.view.) (forall ((self! Poly)) (! (= (lib!memory_manager.pci_bitmap.impl&%0.view.? self!) (lib!memory_manager.pci_bitmap.PCIBitMap./PCIBitMap/ghost_map (%Poly%lib!memory_manager.pci_bitmap.PCIBitMap. self!))) :pattern ((lib!memory_manager.pci_bitmap.impl&%0.view.? self!))))))
(set-info :comment ";; Function-Specs lib::memory_manager::root_table::RootTable::resolve")
(declare-fun req%lib!memory_manager.root_table.impl&%0.resolve. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((self! Poly) (bus! Poly) (dev! Poly) (fun! Poly)) (! (= (req%lib!memory_manager.root_table.impl&%0.resolve. self! bus! dev! fun!) (and (=> %%global_location_label%%11 (lib!memory_manager.root_table.impl&%0.wf.? self!)) (=> %%global_location_label%%12 (and (and (and (<= 0 (%I bus!)) (< (%I bus!) 256)) (and (<= 0 (%I dev!)) (< (%I dev!) 32))) (and (<= 0 (%I fun!)) (< (%I fun!) 8)))))) :pattern ((req%lib!memory_manager.root_table.impl&%0.resolve. self! bus! dev! fun!)))))
(set-info :comment ";; Function-Axioms lib::memory_manager::root_table::RootTable::resolve")
(assert (forall ((self! Poly) (bus! Poly) (dev! Poly) (fun! Poly)) (! (=> (and (has_type self! TYPE%lib!memory_manager.root_table.RootTable.) (has_type bus! (UINT 8)) (has_type dev! (UINT 8)) (has_type fun! (UINT 8))) (has_type (Poly%core!option.Option. (lib!memory_manager.root_table.impl&%0.resolve.? self! bus! dev! fun!)) (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))) :pattern ((lib!memory_manager.root_table.impl&%0.resolve.? self! bus! dev! fun!)))))
(set-info :comment ";; Function-Axioms lib::define::MEM_4k_MASK")
(assert (fuel_bool_default fuel%lib!define.MEM_4k_MASK.))
(assert (=> (fuel_bool fuel%lib!define.MEM_4k_MASK.) (= lib!define.MEM_4k_MASK.? 281474976706560)))
(assert (uInv 64 lib!define.MEM_4k_MASK.?))
(set-info :comment ";; Function-Axioms lib::define::KERNEL_MEM_END_L4INDEX")
(assert (fuel_bool_default fuel%lib!define.KERNEL_MEM_END_L4INDEX.))
(assert (=> (fuel_bool fuel%lib!define.KERNEL_MEM_END_L4INDEX.) (= lib!define.KERNEL_MEM_END_L4INDEX.? 1)))
(assert (uInv SZ lib!define.KERNEL_MEM_END_L4INDEX.?))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_va_4k_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_va_4k_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_va_4k_valid.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_va_4k_valid.? va!) (and (= (uClip SZ (bitand (I (%I va!)) (I (uClip SZ (uClip 64 (bitnot (I lib!define.MEM_4k_MASK.?))))))) 0) (>= (uClip 64 (bitand (I (uClip 64 (bitshr (I (uClip 64 (%I va!))) (I 39)))) (I 511))) (uClip 64 lib!define.KERNEL_MEM_END_L4INDEX.?)))) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_valid.? va!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_ptr_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_ptr_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_ptr_valid.) (forall ((ptr! Poly)) (! (= (lib!util.page_ptr_util_u.page_ptr_valid.? ptr!) (and (= (uClip SZ (EucMod (%I ptr!) 4096)) 0) (< (uClip SZ (EucDiv (%I ptr!) 4096)) lib!define.NUM_PAGES.?))) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? ptr!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_ptr_2m_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_ptr_2m_valid.) (forall ((ptr! Poly)) (! (= (lib!util.page_ptr_util_u.page_ptr_2m_valid.? ptr!) (and (= (uClip SZ (EucMod (%I ptr!) 2097152)) 0) (< (uClip SZ (EucDiv (%I ptr!) 4096)) lib!define.NUM_PAGES.?))) :pattern ((lib!util.page_ptr_util_u.page_ptr_2m_valid.? ptr!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_ptr_1g_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_ptr_1g_valid.) (forall ((ptr! Poly)) (! (= (lib!util.page_ptr_util_u.page_ptr_1g_valid.? ptr!) (and (= (uClip SZ (EucMod (%I ptr!) 1073741824)) 0) (< (uClip SZ (EucDiv (%I ptr!) 4096)) lib!define.NUM_PAGES.?))) :pattern ((lib!util.page_ptr_util_u.page_ptr_1g_valid.? ptr!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms lib::define::PCID_MAX")
(assert (fuel_bool_default fuel%lib!define.PCID_MAX.))
(assert (=> (fuel_bool fuel%lib!define.PCID_MAX.) (= lib!define.PCID_MAX.? 4096)))
(assert (uInv SZ lib!define.PCID_MAX.?))
(set-info :comment ";; Function-Axioms lib::array_vec::ArrayVec::spec_len")
(assert (fuel_bool_default fuel%lib!array_vec.impl&%0.spec_len.))
(assert (=> (fuel_bool fuel%lib!array_vec.impl&%0.spec_len.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& self!) (lib!array_vec.ArrayVec./ArrayVec/len (%Poly%lib!array_vec.ArrayVec. self!))) :pattern ((lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (uInv SZ (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& self!))) :pattern ((lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::array_vec::ArrayVec::spec_capacity")
(assert (fuel_bool_default fuel%lib!array_vec.impl&%0.spec_capacity.))
(assert (=> (fuel_bool fuel%lib!array_vec.impl&%0.spec_capacity.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array_vec.impl&%0.spec_capacity.? T&. T& N&. N& self!) (const_int N&)) :pattern ((lib!array_vec.impl&%0.spec_capacity.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (uInv SZ (lib!array_vec.impl&%0.spec_capacity.? T&. T& N&. N& self!))) :pattern ((lib!array_vec.impl&%0.spec_capacity.? T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::array_vec::ArrayVec::wf")
(assert (fuel_bool_default fuel%lib!array_vec.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!array_vec.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array_vec.impl&%0.wf.? T&. T& N&. N& self!) (and (and (let ((tmp%%$ (const_int N&))) (and (<= 0 tmp%%$) (<= tmp%%$ (- (uHi SZ) 1)))) (<= (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& self!) (lib!array_vec.impl&%0.spec_capacity.? T&. T& N&. N& self!))) (lib!array.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array.Array. (lib!array_vec.ArrayVec./ArrayVec/data (%Poly%lib!array_vec.ArrayVec. self!)))))) :pattern ((lib!array_vec.impl&%0.wf.? T&. T& N&. N& self!))))))
(set-info :comment ";; Function-Specs lib::array_vec::ArrayVec::view_until")
(declare-fun req%lib!array_vec.impl&%0.view_until. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (len! Poly)) (! (= (req%lib!array_vec.impl&%0.view_until. T&. T& N&. N& self! len!) (=> %%global_location_label%%13 (and (<= 0 (%I len!)) (<= (%I len!) (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& self!))))) :pattern ((req%lib!array_vec.impl&%0.view_until. T&. T& N&. N& self! len!)))))
(set-info :comment ";; Function-Axioms lib::array_vec::ArrayVec::view_until")
(assert (fuel_bool_default fuel%lib!array_vec.impl&%0.view_until.))
(assert (=> (fuel_bool fuel%lib!array_vec.impl&%0.view_until.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (len! Poly)) (! (= (lib!array_vec.impl&%0.view_until.? T&. T& N&. N& self! len!) (vstd!seq.Seq.subrange.? T&. T& (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!array_vec.ArrayVec./ArrayVec/data (%Poly%lib!array_vec.ArrayVec. self!))))) (I 0) len!)) :pattern ((lib!array_vec.impl&%0.view_until.? T&. T& N&. N& self! len!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (len! Poly)) (! (=> (and (has_type self! (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (has_type len! NAT)) (has_type (lib!array_vec.impl&%0.view_until.? T&. T& N&. N& self! len!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!array_vec.impl&%0.view_until.? T&. T& N&. N& self! len!)))))
(set-info :comment ";; Function-Specs lib::array_vec::ArrayVec::view")
(declare-fun req%lib!array_vec.impl&%0.view. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (req%lib!array_vec.impl&%0.view. T&. T& N&. N& self!) (=> %%global_location_label%%14 (lib!array_vec.impl&%0.wf.? T&. T& N&. N& self!))) :pattern ((req%lib!array_vec.impl&%0.view. T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::array_vec::ArrayVec::view")
(assert (fuel_bool_default fuel%lib!array_vec.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!array_vec.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array_vec.impl&%0.view.? T&. T& N&. N& self!) (lib!array_vec.impl&%0.view_until.? T&. T& N&. N& self! (I (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& self!)))) :pattern ((lib!array_vec.impl&%0.view.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (has_type (lib!array_vec.impl&%0.view.? T&. T& N&. N& self!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!array_vec.impl&%0.view.? T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::get_free_pcids_as_set")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.get_free_pcids_as_set.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.get_free_pcids_as_set.) (forall ((self! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.get_free_pcids_as_set.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!seq_lib.impl&%0.to_set.? $ (UINT SZ) (lib!array_vec.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 4096) (Poly%lib!array_vec.ArrayVec. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_pcids (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))))) :pattern ((lib!memory_manager.spec_impl.impl&%0.get_free_pcids_as_set.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::pagetable_spec_impl::PageTable::is_empty")
(assert (fuel_bool_default fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%lib!pagetable.pagetable_spec_impl.impl&%0.is_empty.) (forall ((self! Poly)) (! (= (lib!pagetable.pagetable_spec_impl.impl&%0.is_empty.? self!) (and (and (and (and (and (and (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (<= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)) (%I i$)) (< (%I i$) 512)) (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$))))) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.pagemap.impl&%0.spec_index.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!pagetable.pagemap.PageMap. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l4_table (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!))) (I (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))))))) i$)))))))))) (= (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l3_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (= (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l2_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (= (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!pagetable.pagemap.PageMap.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!pagetable.pagemap.PageMap.>.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/l1_tables (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. self!)))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (= (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? self!) (%Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (vstd!map.impl&%0.empty.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.)))) (= (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? self!) (%Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (vstd!map.impl&%0.empty.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.)))) (= (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? self!) (%Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (vstd!map.impl&%0.empty.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry.))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.is_empty.? self!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::disjoint")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.disjoint.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.disjoint.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.disjoint.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (not (vstd!set.impl&%0.contains.? A&. A& s2! a$)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.disjoint.? A&. A& self! s2!))))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::pagetables_wf")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.pagetables_wf.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.pagetables_wf.) (forall ((self! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.pagetables_wf.? self!) (and (and (and (and (and (lib!array_vec.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 4096) (Poly%lib!array_vec.ArrayVec. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_pcids (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))) (vstd!seq_lib.impl&%0.no_duplicates.? $ (UINT SZ) (lib!array_vec.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 4096) (Poly%lib!array_vec.ArrayVec. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_pcids (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!array_vec.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 4096) (Poly%lib!array_vec.ArrayVec. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_pcids (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))))) (< (%I (vstd!seq.Seq.index.? $ (UINT SZ) (lib!array_vec.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 4096) (Poly%lib!array_vec.ArrayVec. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_pcids (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))) i$)) lib!define.PCID_MAX.?))) :pattern ((vstd!seq.Seq.index.? $ (UINT SZ) (lib!array_vec.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 4096) (Poly%lib!array_vec.ArrayVec. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_pcids (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))) i$))))) (lib!array.impl&%0.wf.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) $ (CONST_INT 4096) (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) (forall ((pcid$ Poly)) (! (=> (has_type pcid$ (UINT SZ)) (=> (and (<= 0 (%I pcid$)) (< (%I pcid$) lib!define.PCID_MAX.?)) (and (and (and (and (and (and (and (and (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid$))) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.impl&%0.get_free_pcids_as_set.? self!)) pcid$) (lib!pagetable.pagetable_spec_impl.impl&%0.is_empty.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid$)))))) (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid$))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/pcid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid$)))))) (Poly%core!option.Option. (core!option.Option./Some pcid$)))) (vstd!set.impl&%0.subset_of.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid$))))) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_table_pages (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%lib!pagetable.entry.PageEntry.) (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_entries (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid$)))))) (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/kernel_entries_ghost (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid$))))) lib!define.KERNEL_MEM_END_L4INDEX.?)) (= (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid$)))))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (= (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid$)))))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))))) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid$))))))) (forall ((pcid_i$ Poly) (pcid_j$ Poly)) (! (=> (and (has_type pcid_i$ (UINT SZ)) (has_type pcid_j$ (UINT SZ))) (=> (and (and (and (<= 0 (%I pcid_i$)) (< (%I pcid_i$) lib!define.PCID_MAX.?)) (and (<= 0 (%I pcid_j$)) (< (%I pcid_j$) lib!define.PCID_MAX.?))) (not (= pcid_i$ pcid_j$))) (vstd!set.impl&%0.disjoint.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid_i$))))) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid_j$)))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid_i$)))) (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid_j$))))))))) :pattern ((lib!memory_manager.spec_impl.impl&%0.pagetables_wf.? self!))))))
(set-info :comment ";; Function-Specs lib::array::Array::spec_index")
(declare-fun req%lib!array.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (= (req%lib!array.impl&%0.spec_index. A&. A& N&. N& self! i!) (and (=> %%global_location_label%%15 (= (vstd!seq.Seq.len.? A&. A& (lib!array.Array./Array/seq (%Poly%lib!array.Array. self!))) (const_int N&))) (=> %%global_location_label%%16 (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))))) :pattern ((req%lib!array.impl&%0.spec_index. A&. A& N&. N& self! i!)))))
(set-info :comment ";; Function-Axioms lib::array::Array::spec_index")
(assert (fuel_bool_default fuel%lib!array.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%lib!array.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (= (lib!array.impl&%0.spec_index.? A&. A& N&. N& self! i!) (vstd!seq.Seq.index.? A&. A& (lib!array.Array./Array/seq (%Poly%lib!array.Array. self!)) i!)) :pattern ((lib!array.impl&%0.spec_index.? A&. A& N&. N& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type i! INT)) (has_type (lib!array.impl&%0.spec_index.? A&. A& N&. N& self! i!) A&)) :pattern ((lib!array.impl&%0.spec_index.? A&. A& N&. N& self! i!)))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::get_free_ioids_as_set")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.get_free_ioids_as_set.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.get_free_ioids_as_set.) (forall ((self! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.get_free_ioids_as_set.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!seq_lib.impl&%0.to_set.? $ (UINT SZ) (lib!array_vec.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 4096) (Poly%lib!array_vec.ArrayVec. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_ioids (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))))) :pattern ((lib!memory_manager.spec_impl.impl&%0.get_free_ioids_as_set.? self!))))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::iommutables_wf")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.iommutables_wf.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.iommutables_wf.) (forall ((self! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.iommutables_wf.? self!) (and (and (and (and (and (and (lib!array_vec.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 4096) (Poly%lib!array_vec.ArrayVec. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_ioids (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))) (vstd!seq_lib.impl&%0.no_duplicates.? $ (UINT SZ) (lib!array_vec.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 4096) (Poly%lib!array_vec.ArrayVec. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_ioids (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!array_vec.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 4096) (Poly%lib!array_vec.ArrayVec. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_ioids (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))))) (< (%I (vstd!seq.Seq.index.? $ (UINT SZ) (lib!array_vec.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 4096) (Poly%lib!array_vec.ArrayVec. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_ioids (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))) i$)) lib!define.IOID_MAX.?))) :pattern ((vstd!seq.Seq.index.? $ (UINT SZ) (lib!array_vec.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 4096) (Poly%lib!array_vec.ArrayVec. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/free_ioids (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))) i$))))) (lib!array.impl&%0.wf.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) $ (CONST_INT 4096) (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) (forall ((ioid$ Poly)) (! (=> (has_type ioid$ (UINT SZ)) (= (=> (and (<= 0 (%I ioid$)) (< (%I ioid$) lib!define.IOID_MAX.?)) (is-core!option.Option./None_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid$)))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.impl&%0.get_free_ioids_as_set.? self!)) ioid$))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid$)) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.impl&%0.get_free_ioids_as_set.? self!)) ioid$))))) (forall ((ioid$ Poly)) (! (=> (has_type ioid$ (UINT SZ)) (=> (and (and (<= 0 (%I ioid$)) (< (%I ioid$) lib!define.IOID_MAX.?)) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid$)))) (and (and (and (and (and (lib!pagetable.pagetable_spec_impl.impl&%0.wf.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid$)))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/ioid (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid$)))))) (Poly%core!option.Option. (core!option.Option./Some ioid$)))) (vstd!set.impl&%0.subset_of.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid$))))) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_table_pages (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) (= (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/kernel_l4_end (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid$))))) 0)) (= (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_2m.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid$)))))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (= (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_1g.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid$)))))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))))) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid$))))))) (forall ((ioid_i$ Poly) (ioid_j$ Poly)) (! (=> (and (has_type ioid_i$ (UINT SZ)) (has_type ioid_j$ (UINT SZ))) (=> (and (and (and (and (and (<= 0 (%I ioid_i$)) (< (%I ioid_i$) lib!define.IOID_MAX.?)) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid_i$)))) (and (<= 0 (%I ioid_j$)) (< (%I ioid_j$) lib!define.IOID_MAX.?))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid_j$)))) (not (= ioid_i$ ioid_j$))) (vstd!set.impl&%0.disjoint.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid_i$))))) (Poly%vstd!set.Set<usize.>. (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid_j$)))))))) :pattern ((lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid_i$)))) (lib!pagetable.pagetable_spec_impl.impl&%0.page_closure.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid_j$))))))))) :pattern ((lib!memory_manager.spec_impl.impl&%0.iommutables_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::pagetable_iommu_table_disjoint")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.pagetable_iommu_table_disjoint.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.pagetable_iommu_table_disjoint.) (forall ((self! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.pagetable_iommu_table_disjoint.? self!) (vstd!set.impl&%0.disjoint.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_table_pages (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_table_pages (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) :pattern ((lib!memory_manager.spec_impl.impl&%0.pagetable_iommu_table_disjoint.? self!))))))
(set-info :comment ";; Function-Specs lib::memory_manager::spec_impl::MemoryManager::get_iommu_table_by_ioid")
(declare-fun req%lib!memory_manager.spec_impl.impl&%0.get_iommu_table_by_ioid. (Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((self! Poly) (ioid! Poly)) (! (= (req%lib!memory_manager.spec_impl.impl&%0.get_iommu_table_by_ioid. self! ioid!) (=> %%global_location_label%%17 (and (<= 0 (%I ioid!)) (< (%I ioid!) lib!define.IOID_MAX.?)))) :pattern ((req%lib!memory_manager.spec_impl.impl&%0.get_iommu_table_by_ioid. self! ioid!)))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::get_iommu_table_by_ioid")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.get_iommu_table_by_ioid.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.get_iommu_table_by_ioid.) (forall ((self! Poly) (ioid! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.get_iommu_table_by_ioid.? self! ioid!) (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid!))) :pattern ((lib!memory_manager.spec_impl.impl&%0.get_iommu_table_by_ioid.? self! ioid!))))))
(assert (forall ((self! Poly) (ioid! Poly)) (! (=> (and (has_type self! TYPE%lib!memory_manager.spec_impl.MemoryManager.) (has_type ioid! (UINT SZ))) (has_type (Poly%core!option.Option. (lib!memory_manager.spec_impl.impl&%0.get_iommu_table_by_ioid.? self! ioid!)) (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.))) :pattern ((lib!memory_manager.spec_impl.impl&%0.get_iommu_table_by_ioid.? self! ioid!)))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::root_table_wf")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.root_table_wf.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.root_table_wf.) (forall ((self! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.root_table_wf.? self!) (and (and (and (and (lib!memory_manager.root_table.impl&%0.wf.? (Poly%lib!memory_manager.root_table.RootTable. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))) (lib!memory_manager.pci_bitmap.impl&%0.wf.? (Poly%lib!memory_manager.pci_bitmap.PCIBitMap. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pci_bitmap (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) (forall ((bus$ Poly) (dev$ Poly) (fun$ Poly)) (! (=> (and (has_type bus$ (UINT 8)) (has_type dev$ (UINT 8)) (has_type fun$ (UINT 8))) (=> (and (and (and (and (<= 0 (%I bus$)) (< (%I bus$) 256)) (and (<= 0 (%I dev$)) (< (%I dev$) 32))) (and (<= 0 (%I fun$)) (< (%I fun$) 8))) (is-core!option.Option./Some_ (lib!memory_manager.root_table.impl&%0.resolve.? (Poly%lib!memory_manager.root_table.RootTable. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$ dev$ fun$))) (and (and (let ((tmp%%$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!memory_manager.root_table.impl&%0.resolve.? (Poly%lib!memory_manager.root_table.RootTable. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$ dev$ fun$))))))))) (and (<= 0 tmp%%$) (< tmp%%$ lib!define.IOID_MAX.?))) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.impl&%0.get_free_ioids_as_set.? self!)) (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!memory_manager.root_table.impl&%0.resolve.? (Poly%lib!memory_manager.root_table.RootTable. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$ dev$ fun$))))))) false)) (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!memory_manager.root_table.impl&%0.resolve.? (Poly%lib!memory_manager.root_table.RootTable. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$ dev$ fun$))))))) (lib!pagetable.pagetable_spec_impl.PageTable./PageTable/cr3 (%Poly%lib!pagetable.pagetable_spec_impl.PageTable. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!memory_manager.spec_impl.impl&%0.get_iommu_table_by_ioid.? self! (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!memory_manager.root_table.impl&%0.resolve.? (Poly%lib!memory_manager.root_table.RootTable. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$ dev$ fun$)))))))))))))))) :pattern ((lib!memory_manager.root_table.impl&%0.resolve.? (Poly%lib!memory_manager.root_table.RootTable. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$ dev$ fun$))))) (forall ((bus$ Poly) (dev$ Poly) (fun$ Poly)) (! (=> (and (has_type bus$ (UINT 8)) (has_type dev$ (UINT 8)) (has_type fun$ (UINT 8))) (=> (and (and (and (and (<= 0 (%I bus$)) (< (%I bus$) 256)) (and (<= 0 (%I dev$)) (< (%I dev$) 32))) (and (<= 0 (%I fun$)) (< (%I fun$) 8))) (is-core!option.Option./Some_ (lib!memory_manager.root_table.impl&%0.resolve.? (Poly%lib!memory_manager.root_table.RootTable. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$ dev$ fun$))) (= (%B (vstd!map.impl&%0.index.? $ (TYPE%tuple%4. $ (UINT SZ) $ (UINT 8) $ (UINT 8) $ (UINT 8)) $ BOOL (Poly%vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>. (lib!memory_manager.pci_bitmap.impl&%0.view.? (Poly%lib!memory_manager.pci_bitmap.PCIBitMap. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pci_bitmap (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) (Poly%tuple%4. (tuple%4./tuple%4 (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!memory_manager.root_table.impl&%0.resolve.? (Poly%lib!memory_manager.root_table.RootTable. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$ dev$ fun$)))))) bus$ dev$ fun$)))) true))) :pattern ((lib!memory_manager.root_table.impl&%0.resolve.? (Poly%lib!memory_manager.root_table.RootTable. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$ dev$ fun$))))) (forall ((ioid$ Poly) (bus$ Poly) (dev$ Poly) (fun$ Poly)) (! (=> (and (has_type ioid$ (UINT SZ)) (has_type bus$ (UINT 8)) (has_type dev$ (UINT 8)) (has_type fun$ (UINT 8))) (=> (and (and (and (and (and (<= 0 (%I ioid$)) (< (%I ioid$) lib!define.IOID_MAX.?)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.impl&%0.get_free_ioids_as_set.? self!)) ioid$)) (and (<= 0 (%I bus$)) (< (%I bus$) 256))) (and (<= 0 (%I dev$)) (< (%I dev$) 32))) (and (<= 0 (%I fun$)) (< (%I fun$) 8))) (= (%B (vstd!map.impl&%0.index.? $ (TYPE%tuple%4. $ (UINT SZ) $ (UINT 8) $ (UINT 8) $ (UINT 8)) $ BOOL (Poly%vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>. (lib!memory_manager.pci_bitmap.impl&%0.view.? (Poly%lib!memory_manager.pci_bitmap.PCIBitMap. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pci_bitmap (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) (Poly%tuple%4. (tuple%4./tuple%4 ioid$ bus$ dev$ fun$)))) false))) :pattern ((vstd!map.impl&%0.index.? $ (TYPE%tuple%4. $ (UINT SZ) $ (UINT 8) $ (UINT 8) $ (UINT 8)) $ BOOL (Poly%vstd!map.Map<tuple%4<usize./u8./u8./u8.>./bool.>. (lib!memory_manager.pci_bitmap.impl&%0.view.? (Poly%lib!memory_manager.pci_bitmap.PCIBitMap. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pci_bitmap (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) (Poly%tuple%4. (tuple%4./tuple%4 ioid$ bus$ dev$ fun$)))))))) :pattern ((lib!memory_manager.spec_impl.impl&%0.root_table_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::root_table_cache_wf")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.root_table_cache_wf.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.root_table_cache_wf.) (forall ((self! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.root_table_cache_wf.? self!) (and (and (and (= (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))) (Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table_cache (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))) 256) (forall ((bus$ Poly)) (! (=> (has_type bus$ (UINT 8)) (=> (and (<= 0 (%I bus$)) (< (%I bus$) 256)) (= (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))) (Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table_cache (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$)) 32))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))) (Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table_cache (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$))))) (forall ((bus$ Poly) (dev$ Poly)) (! (=> (and (has_type bus$ (UINT 8)) (has_type dev$ (UINT 8))) (=> (and (and (<= 0 (%I bus$)) (< (%I bus$) 256)) (and (<= 0 (%I dev$)) (< (%I dev$) 32))) (= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))) (Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table_cache (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$) dev$)) 8))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))) (Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table_cache (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$) dev$))))) (forall ((bus$ Poly) (dev$ Poly) (fun$ Poly)) (! (=> (and (has_type bus$ (UINT 8)) (has_type dev$ (UINT 8)) (has_type fun$ (UINT 8))) (=> (and (and (and (and (<= 0 (%I bus$)) (< (%I bus$) 256)) (and (<= 0 (%I dev$)) (< (%I dev$) 32))) (and (<= 0 (%I fun$)) (< (%I fun$) 8))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))) (Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table_cache (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$) dev$) fun$)))) (ext_eq false (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))) (Poly%vstd!seq.Seq<vstd!seq.Seq<vstd!seq.Seq<core!option.Option<tuple%2<usize./usize.>.>.>.>.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table_cache (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$) dev$) fun$) (Poly%core!option.Option. (lib!memory_manager.root_table.impl&%0.resolve.? (Poly%lib!memory_manager.root_table.RootTable. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$ dev$ fun$))))) :pattern ((lib!memory_manager.root_table.impl&%0.resolve.? (Poly%lib!memory_manager.root_table.RootTable. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/root_table (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) bus$ dev$ fun$)))))) :pattern ((lib!memory_manager.spec_impl.impl&%0.root_table_cache_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::kernel_entries_wf")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.kernel_entries_wf.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.kernel_entries_wf.) (forall ((self! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.kernel_entries_wf.? self!) (and (and (lib!array.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 1) (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/kernel_entries (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))) (= (vstd!seq.Seq.len.? $ TYPE%lib!pagetable.entry.PageEntry. (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/kernel_entries_ghost (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))) lib!define.KERNEL_MEM_END_L4INDEX.?)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) lib!define.KERNEL_MEM_END_L4INDEX.?)) (ext_eq false TYPE%lib!pagetable.entry.PageEntry. (vstd!seq.Seq.index.? $ TYPE%lib!pagetable.entry.PageEntry. (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/kernel_entries_ghost (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) i$) (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.spec_usize2page_entry.? (vstd!seq.Seq.index.? $ (UINT SZ) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/kernel_entries (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) i$)))))) :pattern ((vstd!seq.Seq.index.? $ (UINT SZ) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/kernel_entries (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) i$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!pagetable.entry.PageEntry. (Poly%vstd!seq.Seq<lib!pagetable.entry.PageEntry.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/kernel_entries_ghost (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) i$)))))) :pattern ((lib!memory_manager.spec_impl.impl&%0.kernel_entries_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::pcid_active")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.pcid_active.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.pcid_active.) (forall ((self! Poly) (pcid! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.pcid_active.? self! pcid!) (and (and (<= 0 (%I pcid!)) (< (%I pcid!) lib!define.PCID_MAX.?)) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.impl&%0.get_free_pcids_as_set.? self!)) pcid!) false))) :pattern ((lib!memory_manager.spec_impl.impl&%0.pcid_active.? self! pcid!))))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::pcid_to_proc_wf")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_wf.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_wf.) (forall ((self! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_wf.? self!) (and (lib!array.impl&%0.wf.? $ (TYPE%core!option.Option. $ (UINT SZ)) $ (CONST_INT 4096) (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pcid_to_proc_ptr (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))) (forall ((pcid$ Poly)) (! (=> (has_type pcid$ (UINT SZ)) (=> (and (<= 0 (%I pcid$)) (< (%I pcid$) lib!define.PCID_MAX.?)) (= (lib!memory_manager.spec_impl.impl&%0.pcid_active.? self! pcid$) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pcid_to_proc_ptr (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid$)))))) :pattern ((lib!memory_manager.spec_impl.impl&%0.pcid_active.? self! pcid$)) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pcid_to_proc_ptr (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid$)))))) :pattern ((lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::wf")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.wf.? self!) (and (and (and (and (and (and (lib!memory_manager.spec_impl.impl&%0.pagetables_wf.? self!) (lib!memory_manager.spec_impl.impl&%0.iommutables_wf.? self!)) (lib!memory_manager.spec_impl.impl&%0.pagetable_iommu_table_disjoint.? self!)) (lib!memory_manager.spec_impl.impl&%0.root_table_wf.? self!)) (lib!memory_manager.spec_impl.impl&%0.root_table_cache_wf.? self!)) (lib!memory_manager.spec_impl.impl&%0.kernel_entries_wf.? self!)) (lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_wf.? self!))) :pattern ((lib!memory_manager.spec_impl.impl&%0.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_index_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_index_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_index_valid.) (forall ((index! Poly)) (! (= (lib!util.page_ptr_util_u.page_index_valid.? index!) (and (<= 0 (%I index!)) (< (%I index!) lib!define.NUM_PAGES.?))) :pattern ((lib!util.page_ptr_util_u.page_index_valid.? index!))))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::spec_page_index2page_ptr")
(declare-fun req%lib!util.page_ptr_util_u.spec_page_index2page_ptr. (Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((i! Poly)) (! (= (req%lib!util.page_ptr_util_u.spec_page_index2page_ptr. i!) (=> %%global_location_label%%18 (lib!util.page_ptr_util_u.page_index_valid.? i!))) :pattern ((req%lib!util.page_ptr_util_u.spec_page_index2page_ptr. i!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_index2page_ptr")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_index2page_ptr.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_index2page_ptr.) (forall ((i! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i!) (uClip SZ (Mul (%I i!) 4096))) :pattern ((lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i!))))))
(assert (forall ((i! Poly)) (! (=> (has_type i! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i!))) :pattern ((lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i!)))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::page_array_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf.? self!) (and (and (and (lib!array.impl&%0.wf.? $ TYPE%lib!allocator.page.Page. $ (CONST_INT 131072) (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$)))) :pattern ((lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))) :pattern ((lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (vstd!set.impl&%0.finite.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) :pattern ((lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (vstd!set.impl&%0.finite.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) :pattern ((lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf.? self!))))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::spec_page_ptr2page_index")
(declare-fun req%lib!util.page_ptr_util_u.spec_page_ptr2page_index. (Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((ptr! Poly)) (! (= (req%lib!util.page_ptr_util_u.spec_page_ptr2page_index. ptr!) (=> %%global_location_label%%19 (lib!util.page_ptr_util_u.page_ptr_valid.? ptr!))) :pattern ((req%lib!util.page_ptr_util_u.spec_page_ptr2page_index. ptr!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_ptr2page_index")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_ptr2page_index.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_ptr2page_index.) (forall ((ptr! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? ptr!) (uClip SZ (uClip SZ (EucDiv (%I ptr!) 4096)))) :pattern ((lib!util.page_ptr_util_u.spec_page_ptr2page_index.? ptr!))))))
(assert (forall ((ptr! Poly)) (! (=> (has_type ptr! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? ptr!))) :pattern ((lib!util.page_ptr_util_u.spec_page_ptr2page_index.? ptr!)))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_4k_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf.? self!) (and (and (and (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Free4k)) (and (and (and (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) false)))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((page_ptr$ Poly)) (! (=> (has_type page_ptr$ (UINT SZ)) (=> (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) page_ptr$) (and (lib!util.page_ptr_util_u.page_ptr_valid.? page_ptr$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$))))) lib!define.PageState./Free4k)))) :pattern ((lib!util.page_ptr_util_u.page_ptr_valid.? page_ptr$)) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$)))))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_2m_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf.? self!) (and (and (and (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Free2m)) (and (and (and (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) false)))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((page_ptr$ Poly)) (! (=> (has_type page_ptr$ (UINT SZ)) (=> (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) page_ptr$) (and (lib!util.page_ptr_util_u.page_ptr_2m_valid.? page_ptr$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$))))) lib!define.PageState./Free2m)))) :pattern ((lib!util.page_ptr_util_u.page_ptr_2m_valid.? page_ptr$)) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$)))))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::free_pages_1g_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf.? self!) (and (and (and (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Free1g)) (and (and (and (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) false)))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/rev_pointer (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((page_ptr$ Poly)) (! (=> (has_type page_ptr$ (UINT SZ)) (=> (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) page_ptr$) (and (lib!util.page_ptr_util_u.page_ptr_1g_valid.? page_ptr$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$))))) lib!define.PageState./Free1g)))) :pattern ((lib!util.page_ptr_util_u.page_ptr_1g_valid.? page_ptr$)) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$)))))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_4k_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf.? self!) (and (and (and (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Allocated4k)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) false)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$))))) lib!define.PageState./Allocated4k))) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_2m_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf.? self!) (and (and (and (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_2m_valid.? p$))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_2m_valid.? p$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Allocated2m)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) false)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$))))) lib!define.PageState./Allocated2m))) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::allocated_pages_1g_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf.? self!) (and (and (and (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_1g_valid.? p$))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_1g_valid.? p$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Allocated1g)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) false)))) :pattern ((lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))) :pattern ((lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$))))) lib!define.PageState./Allocated1g))) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_4k_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf.? self!) (and (and (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (and (lib!util.page_ptr_util_u.page_ptr_valid.? p$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$))))) lib!define.PageState./Mapped4k)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$)) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped4k)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) :pattern ((lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_2m_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf.? self!) (and (and (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped2m)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) :pattern ((lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (and (lib!util.page_ptr_util_u.page_ptr_2m_valid.? p$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$))))) lib!define.PageState./Mapped2m)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$)) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_1g_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf.? self!) (and (and (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped1g)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (I (lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) :pattern ((lib!allocator.page.Page./Page/addr (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (and (lib!util.page_ptr_util_u.page_ptr_1g_valid.? p$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$))))) lib!define.PageState./Mapped1g)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.page_ptr_valid.? p$)) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? p$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_index_2m_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_index_2m_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_index_2m_valid.) (forall ((i! Poly)) (! (= (lib!util.page_ptr_util_u.page_index_2m_valid.? i!) (and (= (uClip SZ (EucMod (%I i!) 512)) 0) (and (<= 0 (%I i!)) (< (%I i!) lib!define.NUM_PAGES.?)))) :pattern ((lib!util.page_ptr_util_u.page_index_2m_valid.? i!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_index_truncate_2m")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_2m.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_2m.) (forall ((index! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? index!) (uClip SZ (Mul (uClip SZ (EucDiv (%I index!) 512)) 512))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? index!))))))
(assert (forall ((index! Poly)) (! (=> (has_type index! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? index!))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? index!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::page_index_1g_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.page_index_1g_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.page_index_1g_valid.) (forall ((i! Poly)) (! (= (lib!util.page_ptr_util_u.page_index_1g_valid.? i!) (and (= (uClip SZ (EucMod (%I i!) (uClip SZ (nClip (Mul 512 512))))) 0) (and (<= 0 (%I i!)) (< (%I i!) lib!define.NUM_PAGES.?)))) :pattern ((lib!util.page_ptr_util_u.page_index_1g_valid.? i!))))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_index_truncate_1g")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_1g.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_index_truncate_1g.) (forall ((index! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? index!) (uClip SZ (Mul (Mul (uClip SZ (EucDiv (uClip SZ (EucDiv (%I index!) 512)) 512)) 512) 512))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? index!))))))
(assert (forall ((index! Poly)) (! (=> (has_type index! (UINT SZ)) (uInv SZ (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? index!))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? index!)))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::merged_pages_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf.? self!) (and (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Merged2m)) (and (and (= (lib!util.page_ptr_util_u.page_index_2m_valid.? i$) false) (or (or (or (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$))))) lib!define.PageState./Mapped2m) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$))))) lib!define.PageState./Free2m)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$))))) lib!define.PageState./Allocated2m)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$))))) lib!define.PageState./Unavailable2m))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$))))))))) :pattern ((lib!util.page_ptr_util_u.page_index_2m_valid.? i$)) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_2m.? i$)))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Merged1g)) (and (and (= (lib!util.page_ptr_util_u.page_index_1g_valid.? i$) false) (or (or (or (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$))))) lib!define.PageState./Mapped1g) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$))))) lib!define.PageState./Free1g)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$))))) lib!define.PageState./Allocated1g)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$))))) lib!define.PageState./Unavailable1g))) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$))))))))) :pattern ((lib!util.page_ptr_util_u.page_index_1g_valid.? i$)) :pattern ((lib!util.page_ptr_util_u.spec_page_index_truncate_1g.? i$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf.? self!))))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::spec_page_index_merge_2m_vaild")
(declare-fun req%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild. (Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((i! Poly) (j! Poly)) (! (= (req%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild. i! j!) (=> %%global_location_label%%20 (lib!util.page_ptr_util_u.page_index_2m_valid.? i!))) :pattern ((req%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild. i! j!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_index_merge_2m_vaild")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.) (forall ((i! Poly) (j! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? i! j!) (and (< (%I i!) (%I j!)) (< (%I j!) (Add (%I i!) 512)))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? i! j!))))))
(set-info :comment ";; Function-Specs lib::util::page_ptr_util_u::spec_page_index_merge_1g_vaild")
(declare-fun req%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild. (Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((i! Poly) (j! Poly)) (! (= (req%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild. i! j!) (=> %%global_location_label%%21 (lib!util.page_ptr_util_u.page_index_1g_valid.? i!))) :pattern ((req%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild. i! j!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_page_index_merge_1g_vaild")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.) (forall ((i! Poly) (j! Poly)) (! (= (lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? i! j!) (and (< (%I i!) (%I j!)) (< (%I j!) (Add (%I i!) 262144)))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? i! j!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::hugepages_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf.? self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ (UINT SZ)) (has_type j$ (UINT SZ))) (and (=> (and (and (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (lib!util.page_ptr_util_u.page_index_2m_valid.? i$)) (or (or (or (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped2m) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Free2m)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Allocated2m)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Unavailable2m))) (lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? i$ j$)) (and (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) j$))) lib!define.PageState./Merged2m) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) j$)))))) (=> (and (and (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (lib!util.page_ptr_util_u.page_index_1g_valid.? i$)) (or (or (or (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped1g) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Free1g)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Allocated1g)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Unavailable1g))) (lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? i$ j$)) (and (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) j$))) lib!define.PageState./Merged1g) (= (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!allocator.page.Page./Page/is_io_page (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) j$)))))))) :pattern ((lib!util.page_ptr_util_u.spec_page_index_merge_2m_vaild.? i$ j$)) :pattern ((lib!util.page_ptr_util_u.spec_page_index_merge_1g_vaild.? i$ j$))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::perm_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf.? self!) (and (and (and (and (and (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.union.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!seq_lib.impl&%0.to_set.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$))) (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)) (%I p$))))) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.union.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!seq_lib.impl&%0.to_set.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$))) (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)) (%I p$))))) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 2097152))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!set.impl&%0.union.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/mapped_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (vstd!seq_lib.impl&%0.to_set.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 131072) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/free_pages_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))))))) (forall ((p$ Poly)) (! (=> (has_type p$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) p$) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$))) (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)) (%I p$))))) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$)))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 1073741824))) (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_perms_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)) p$))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::container_wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.container_wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.container_wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.container_wf.? self!) (and (and (and (and (and (and (and (and (and (and (vstd!set.impl&%0.subset_of.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (vstd!set.impl&%0.subset_of.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (vstd!set.impl&%0.subset_of.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/allocated_pages_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (or (or (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped4k) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped2m)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped1g))) (is-core!option.Option./Some_ (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$) (is-core!option.Option./Some_ (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (is-core!option.Option./Some_ (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (or (or (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped4k) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped2m)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped1g)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$) (is-core!option.Option./Some_ (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))))))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped4k)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (I (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$)))))) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped2m)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (I (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$)))))) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped1g)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (I (lib!util.page_ptr_util_u.spec_page_index2page_ptr.? i$)))))) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) (forall ((c_ptr$ Poly) (page_ptr$ Poly)) (! (=> (and (has_type c_ptr$ (UINT SZ)) (has_type page_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) c_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) c_ptr$) page_ptr$)) (and (and (lib!util.page_ptr_util_u.page_ptr_valid.? page_ptr$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$))))) lib!define.PageState./Mapped4k)) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$)))))))) c_ptr$)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) c_ptr$) page_ptr$))))) (forall ((c_ptr$ Poly) (page_ptr$ Poly)) (! (=> (and (has_type c_ptr$ (UINT SZ)) (has_type page_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) c_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) c_ptr$) page_ptr$)) (and (and (lib!util.page_ptr_util_u.page_ptr_2m_valid.? page_ptr$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$))))) lib!define.PageState./Mapped2m)) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$)))))))) c_ptr$)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_2m (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) c_ptr$) page_ptr$))))) (forall ((c_ptr$ Poly) (page_ptr$ Poly)) (! (=> (and (has_type c_ptr$ (UINT SZ)) (has_type page_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!)))) c_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) c_ptr$) page_ptr$)) (and (and (lib!util.page_ptr_util_u.page_ptr_1g_valid.? page_ptr$) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$))))) lib!define.PageState./Mapped1g)) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocator.page.Page./Page/owning_container (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) (I (lib!util.page_ptr_util_u.spec_page_ptr2page_index.? page_ptr$)))))))) c_ptr$)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_1g (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))) c_ptr$) page_ptr$)))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.container_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::mapped_pages_have_reference_counter")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) lib!define.NUM_PAGES.?)) (and (= (not (= (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) 0)) (or (or (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped4k) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped2m)) (= (lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) lib!define.PageState./Mapped1g))) (= (lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))) (nClip (Add (vstd!set.impl&%0.len.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))) (vstd!set.impl&%0.len.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))))))) :pattern ((lib!allocator.page.Page./Page/ref_count (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))) :pattern ((lib!allocator.page.Page./Page/state (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))) :pattern ((lib!allocator.page.Page./Page/mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$)))) :pattern ((lib!allocator.page.Page./Page/io_mappings (%Poly%lib!allocator.page.Page. (vstd!seq.Seq.index.? $ TYPE%lib!allocator.page.Page. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/page_array (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. self!))))) i$))))))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter.? self!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::wf")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? self!) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_array_wf.? self!) (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_4k_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_2m_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.free_pages_1g_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.merged_pages_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.hugepages_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.perm_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.container_wf.? self!)) (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_have_reference_counter.? self!))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::spec_get_payload_as_va_range")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.))
(define-fun is-lib!process_manager.thread.IPCPayLoad./Pages_ ((c lib!process_manager.thread.IPCPayLoad.)) Bool ((_ is lib!process_manager.thread.IPCPayLoad./Pages) c))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? self!) (ite (is-lib!process_manager.thread.IPCPayLoad./Pages_ (%Poly%lib!process_manager.thread.IPCPayLoad. self!)) (let ((va_range$ (lib!process_manager.thread.IPCPayLoad./Pages/va_range (%Poly%lib!process_manager.thread.IPCPayLoad. self!)))) (core!option.Option./Some (Poly%lib!va_range.VaRange4K. va_range$))) core!option.Option./None)) :pattern ((lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? self!)) (TYPE%core!option.Option. $ TYPE%lib!va_range.VaRange4K.))) :pattern ((lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? self!)))))
(set-info :comment ";; Function-Axioms lib::va_range::VaRange4K::wf")
(assert (fuel_bool_default fuel%lib!va_range.impl&%2.wf.))
(assert (=> (fuel_bool fuel%lib!va_range.impl&%2.wf.) (forall ((self! Poly)) (! (= (lib!va_range.impl&%2.wf.? self!) (and (and (and (and (and (< (Add (lib!va_range.VaRange4K./VaRange4K/start (%Poly%lib!va_range.VaRange4K. self!)) (Mul (lib!va_range.VaRange4K./VaRange4K/len (%Poly%lib!va_range.VaRange4K. self!)) 4096)) (- (uHi SZ) 1)) (lib!util.page_ptr_util_u.spec_va_4k_valid.? (I (lib!va_range.VaRange4K./VaRange4K/start (%Poly%lib!va_range.VaRange4K. self!))))) (= (vstd!seq.Seq.len.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!va_range.impl&%2.view.? self!))) (lib!va_range.VaRange4K./VaRange4K/len (%Poly%lib!va_range.VaRange4K. self!)))) (vstd!seq_lib.impl&%0.no_duplicates.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!va_range.impl&%2.view.? self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!va_range.VaRange4K./VaRange4K/len (%Poly%lib!va_range.VaRange4K. self!)))) (lib!util.page_ptr_util_u.spec_va_4k_valid.? (vstd!seq.Seq.index.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!va_range.impl&%2.view.? self!)) i$)))) :pattern ((vstd!seq.Seq.index.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!va_range.impl&%2.view.? self!)) i$))))) (lib!va_range.impl&%2.view_match_spec.? self!))) :pattern ((lib!va_range.impl&%2.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::page_closure")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.page_closure.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.page_closure.) (forall ((self! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.page_closure.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.union.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_table_pages (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_table_pages (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!)))))) :pattern ((lib!memory_manager.spec_impl.impl&%0.page_closure.? self!))))))
(set-info :comment ";; Function-Axioms lib::kernel::spec::Kernel::memory_wf")
(assert (fuel_bool_default fuel%lib!kernel.spec.impl&%0.memory_wf.))
(assert (=> (fuel_bool fuel%lib!kernel.spec.impl&%0.memory_wf.) (forall ((self! Poly)) (! (= (lib!kernel.spec.impl&%0.memory_wf.? self!) (and (and (and (and (and (and (vstd!set.impl&%0.disjoint.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.impl&%0.page_closure.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.page_closure.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!)))))) (= (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.union.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.impl&%0.page_closure.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.page_closure.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!))))))) (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!)))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_2m.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.allocated_pages_1g.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!map.Map<usize./vstd!set.Set<usize.>.>. (lib!allocator.page_allocator_spec_impl.PageAllocator./PageAllocator/container_map_4k (%Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!)))))))) :pattern ((lib!kernel.spec.impl&%0.memory_wf.? self!))))))
(set-info :comment ";; Function-Specs lib::memory_manager::spec_impl::MemoryManager::get_pagetable_by_pcid")
(declare-fun req%lib!memory_manager.spec_impl.impl&%0.get_pagetable_by_pcid. (Poly Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((self! Poly) (pcid! Poly)) (! (= (req%lib!memory_manager.spec_impl.impl&%0.get_pagetable_by_pcid. self! pcid!) (=> %%global_location_label%%22 (and (<= 0 (%I pcid!)) (< (%I pcid!) lib!define.PCID_MAX.?)))) :pattern ((req%lib!memory_manager.spec_impl.impl&%0.get_pagetable_by_pcid. self! pcid!)))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::get_pagetable_by_pcid")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.get_pagetable_by_pcid.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.get_pagetable_by_pcid.) (forall ((self! Poly) (pcid! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.get_pagetable_by_pcid.? self! pcid!) (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid!))) :pattern ((lib!memory_manager.spec_impl.impl&%0.get_pagetable_by_pcid.? self! pcid!))))))
(assert (forall ((self! Poly) (pcid! Poly)) (! (=> (and (has_type self! TYPE%lib!memory_manager.spec_impl.MemoryManager.) (has_type pcid! (UINT SZ))) (has_type (Poly%core!option.Option. (lib!memory_manager.spec_impl.impl&%0.get_pagetable_by_pcid.? self! pcid!)) (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.))) :pattern ((lib!memory_manager.spec_impl.impl&%0.get_pagetable_by_pcid.? self! pcid!)))))
(set-info :comment ";; Function-Specs lib::memory_manager::spec_impl::MemoryManager::get_pagetable_mapping_by_pcid")
(declare-fun req%lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid. (Poly Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((self! Poly) (pcid! Poly)) (! (= (req%lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid. self! pcid!) (and (=> %%global_location_label%%23 (and (<= 0 (%I pcid!)) (< (%I pcid!) lib!define.PCID_MAX.?))) (=> %%global_location_label%%24 (is-core!option.Option./Some_ (lib!memory_manager.spec_impl.impl&%0.get_pagetable_by_pcid.? self! pcid!))))) :pattern ((req%lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid. self! pcid!)))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::get_pagetable_mapping_by_pcid")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid.) (forall ((self! Poly) (pcid! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid.? self! pcid!) (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/page_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid!))))) :pattern ((lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid.? self! pcid!))))))
(set-info :comment ";; Function-Axioms lib::allocator::page_allocator_spec_impl::PageAllocator::page_is_mapped")
(assert (fuel_bool_default fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.))
(assert (=> (fuel_bool fuel%lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.) (forall ((self! Poly) (p! Poly)) (! (= (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? self! p!) (or (or (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? self!)) p!) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_2m.? self!)) p!)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_1g.? self!)) p!))) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? self! p!))))))
(set-info :comment ";; Function-Specs lib::memory_manager::spec_impl::MemoryManager::get_iommu_table_mapping_by_ioid")
(declare-fun req%lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid. (Poly Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((self! Poly) (ioid! Poly)) (! (= (req%lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid. self! ioid!) (and (=> %%global_location_label%%25 (and (<= 0 (%I ioid!)) (< (%I ioid!) lib!define.IOID_MAX.?))) (=> %%global_location_label%%26 (is-core!option.Option./Some_ (lib!memory_manager.spec_impl.impl&%0.get_iommu_table_by_ioid.? self! ioid!))))) :pattern ((req%lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid. self! ioid!)))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::get_iommu_table_mapping_by_ioid")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid.) (forall ((self! Poly) (ioid! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid.? self! ioid!) (lib!pagetable.pagetable_spec_impl.impl&%0.mapping_4k.? (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!pagetable.pagetable_spec_impl.PageTable.) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/iommu_tables (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) ioid!))))) :pattern ((lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid.? self! ioid!))))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::ioid_active")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.ioid_active.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.ioid_active.) (forall ((self! Poly) (ioid! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.ioid_active.? self! ioid!) (and (and (<= 0 (%I ioid!)) (< (%I ioid!) lib!define.IOID_MAX.?)) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.impl&%0.get_free_ioids_as_set.? self!)) ioid!) false))) :pattern ((lib!memory_manager.spec_impl.impl&%0.ioid_active.? self! ioid!))))))
(set-info :comment ";; Function-Axioms lib::kernel::spec::Kernel::mapping_wf")
(assert (fuel_bool_default fuel%lib!kernel.spec.impl&%0.mapping_wf.))
(assert (=> (fuel_bool fuel%lib!kernel.spec.impl&%0.mapping_wf.) (forall ((self! Poly)) (! (= (lib!kernel.spec.impl&%0.mapping_wf.? self!) (and (and (and (forall ((pcid$ Poly) (va$ Poly)) (! (=> (and (has_type pcid$ (UINT SZ)) (has_type va$ (UINT SZ))) (=> (and (lib!memory_manager.spec_impl.impl&%0.pcid_active.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) pcid$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) pcid$))) va$)) (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) pcid$)) va$))))) (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) pcid$)) va$)))))) (Poly%tuple%2. (tuple%2./tuple%2 pcid$ va$)))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) pcid$))) va$)))) (forall ((page_ptr$ Poly) (pcid$ Poly) (va$ Poly)) (! (=> (and (has_type page_ptr$ (UINT SZ)) (has_type pcid$ (UINT SZ)) (has_type va$ (UINT SZ))) (=> (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$) (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$)) (Poly%tuple%2. (tuple%2./tuple%2 pcid$ va$)))) (and (and (and (lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (lib!memory_manager.spec_impl.impl&%0.pcid_active.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) pcid$)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) pcid$))) va$)) (= (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!memory_manager.spec_impl.impl&%0.get_pagetable_mapping_by_pcid.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) pcid$)) va$))) (%I page_ptr$))))) :pattern ((vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$)) (Poly%tuple%2. (tuple%2./tuple%2 pcid$ va$))))))) (forall ((ioid$ Poly) (va$ Poly)) (! (=> (and (has_type ioid$ (UINT SZ)) (has_type va$ (UINT SZ))) (=> (and (lib!memory_manager.spec_impl.impl&%0.ioid_active.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) ioid$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) ioid$))) va$)) (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) ioid$)) va$))))) (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) ioid$)) va$)))))) (Poly%tuple%2. (tuple%2./tuple%2 ioid$ va$)))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) ioid$))) va$)) :pattern ((lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) ioid$)) va$)))))) :pattern ((vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. (vstd!map.impl&%0.index.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) ioid$)) va$)))))) (Poly%tuple%2. (tuple%2./tuple%2 ioid$ va$))))))) (forall ((page_ptr$ Poly) (ioid$ Poly) (va$ Poly)) (! (=> (and (has_type page_ptr$ (UINT SZ)) (has_type ioid$ (UINT SZ)) (has_type va$ (UINT SZ))) (=> (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$) (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$)) (Poly%tuple%2. (tuple%2./tuple%2 ioid$ va$)))) (and (and (lib!util.page_ptr_util_u.spec_va_4k_valid.? va$) (lib!memory_manager.spec_impl.impl&%0.ioid_active.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) ioid$)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ TYPE%lib!pagetable.entry.MapEntry. (Poly%vstd!map.Map<usize./lib!pagetable.entry.MapEntry.>. (lib!memory_manager.spec_impl.impl&%0.get_iommu_table_mapping_by_ioid.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) ioid$))) va$)))) :pattern ((vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_io_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$)) (Poly%tuple%2. (tuple%2./tuple%2 ioid$ va$)))))))) :pattern ((lib!kernel.spec.impl&%0.mapping_wf.? self!))))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_proc")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_proc. (Poly Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((self! Poly) (proc_ptr! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_proc. self! proc_ptr!) (and (=> %%global_location_label%%27 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%28 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? self!)) proc_ptr!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_proc. self! proc_ptr!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_proc")
(assert (forall ((self! Poly) (proc_ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type proc_ptr! (UINT SZ))) (has_type (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? self! proc_ptr!)) TYPE%lib!process_manager.process.Process.)) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_proc.? self! proc_ptr!)))))
(set-info :comment ";; Function-Specs lib::memory_manager::spec_impl::MemoryManager::pcid_to_proc_ptr")
(declare-fun req%lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr. (Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((self! Poly) (pcid! Poly)) (! (= (req%lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr. self! pcid!) (=> %%global_location_label%%29 (lib!memory_manager.spec_impl.impl&%0.pcid_active.? self! pcid!))) :pattern ((req%lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr. self! pcid!)))))
(set-info :comment ";; Function-Axioms lib::memory_manager::spec_impl::MemoryManager::pcid_to_proc_ptr")
(assert (fuel_bool_default fuel%lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr.))
(assert (=> (fuel_bool fuel%lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr.) (forall ((self! Poly) (pcid! Poly)) (! (= (lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr.? self! pcid!) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!memory_manager.spec_impl.MemoryManager./MemoryManager/pcid_to_proc_ptr (%Poly%lib!memory_manager.spec_impl.MemoryManager. self!))))) pcid!))))) :pattern ((lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr.? self! pcid!))))))
(assert (forall ((self! Poly) (pcid! Poly)) (! (=> (and (has_type self! TYPE%lib!memory_manager.spec_impl.MemoryManager.) (has_type pcid! (UINT SZ))) (uInv SZ (lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr.? self! pcid!))) :pattern ((lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr.? self! pcid!)))))
(set-info :comment ";; Function-Axioms lib::kernel::spec::Kernel::pcid_ioid_wf")
(assert (fuel_bool_default fuel%lib!kernel.spec.impl&%0.pcid_ioid_wf.))
(assert (=> (fuel_bool fuel%lib!kernel.spec.impl&%0.pcid_ioid_wf.) (forall ((self! Poly)) (! (= (lib!kernel.spec.impl&%0.pcid_ioid_wf.? self!) (and (and (forall ((proc_ptr$ Poly)) (! (=> (has_type proc_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!))))) proc_ptr$) (and (lib!memory_manager.spec_impl.impl&%0.pcid_active.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) (I (lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!))) proc_ptr$)))))) (= (lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) (I (lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!))) proc_ptr$)))))) (%I proc_ptr$))))) :pattern ((lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!))) proc_ptr$))))))) (forall ((pcid$ Poly)) (! (=> (has_type pcid$ (UINT SZ)) (=> (lib!memory_manager.spec_impl.impl&%0.pcid_active.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) pcid$) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!))))) (I (lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) pcid$))) (= (lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!))) (I (lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) pcid$)))))) (%I pcid$))))) :pattern ((lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) pcid$))))) (forall ((proc_ptr$ Poly)) (! (=> (has_type proc_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!))))) proc_ptr$) (is-core!option.Option./Some_ (lib!process_manager.process.Process./Process/ioid (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!))) proc_ptr$)))))) (lib!memory_manager.spec_impl.impl&%0.ioid_active.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.process.Process./Process/ioid (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!))) proc_ptr$)))))))))) :pattern ((lib!process_manager.process.Process./Process/ioid (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!))) proc_ptr$))))))))) :pattern ((lib!kernel.spec.impl&%0.pcid_ioid_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::kernel::spec::Kernel::page_mapping_wf")
(assert (fuel_bool_default fuel%lib!kernel.spec.impl&%0.page_mapping_wf.))
(assert (=> (fuel_bool fuel%lib!kernel.spec.impl&%0.page_mapping_wf.) (forall ((self! Poly)) (! (= (lib!kernel.spec.impl&%0.page_mapping_wf.? self!) (and (and (= (%Poly%vstd!set.Set<usize.>. (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. (lib!kernel.spec.Kernel./Kernel/page_mapping (%Poly%lib!kernel.spec.Kernel. self!))))) (lib!allocator.page_allocator_spec_impl.impl&%0.mapped_pages_4k.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))))) (forall ((page_ptr$ Poly) (p_ptr$ Poly) (va$ Poly)) (! (=> (and (has_type page_ptr$ (UINT SZ)) (has_type p_ptr$ (UINT SZ)) (has_type va$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. (lib!kernel.spec.Kernel./Kernel/page_mapping (%Poly%lib!kernel.spec.Kernel. self!)))) page_ptr$) (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. (lib!kernel.spec.Kernel./Kernel/page_mapping (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$) (Poly%tuple%2. (tuple%2./tuple%2 p_ptr$ va$)))) (and (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!))))) p_ptr$)) (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$)) (Poly%tuple%2. (tuple%2./tuple%2 (I (lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!))) p_ptr$))))) va$)))))) :pattern ((vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. (lib!kernel.spec.Kernel./Kernel/page_mapping (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$) (Poly%tuple%2. (tuple%2./tuple%2 p_ptr$ va$)))) :pattern ((vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$)) (Poly%tuple%2. (tuple%2./tuple%2 (I (lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!))) p_ptr$))))) va$))))))) (forall ((page_ptr$ Poly) (pcid$ Poly) (va$ Poly)) (! (=> (and (has_type page_ptr$ (UINT SZ)) (has_type pcid$ (UINT SZ)) (has_type va$ (UINT SZ))) (=> (and (lib!allocator.page_allocator_spec_impl.impl&%0.page_is_mapped.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$) (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$)) (Poly%tuple%2. (tuple%2./tuple%2 pcid$ va$)))) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. (lib!kernel.spec.Kernel./Kernel/page_mapping (%Poly%lib!kernel.spec.Kernel. self!)))) page_ptr$) (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. (lib!kernel.spec.Kernel./Kernel/page_mapping (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$) (Poly%tuple%2. (tuple%2./tuple%2 (I (lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) pcid$)) va$)))))) :pattern ((vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (Poly%vstd!set.Set<tuple%2<usize./usize.>.>. (lib!allocator.page_allocator_spec_impl.impl&%0.page_mappings.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$)) (Poly%tuple%2. (tuple%2./tuple%2 pcid$ va$)))) :pattern ((vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))) (Poly%vstd!map.Map<usize./vstd!set.Set<tuple%2<usize./usize.>.>.>. (lib!kernel.spec.Kernel./Kernel/page_mapping (%Poly%lib!kernel.spec.Kernel. self!))) page_ptr$) (Poly%tuple%2. (tuple%2./tuple%2 (I (lib!memory_manager.spec_impl.impl&%0.pcid_to_proc_ptr.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!))) pcid$)) va$)))))))) :pattern ((lib!kernel.spec.impl&%0.page_mapping_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::kernel::spec::Kernel::wf")
(assert (fuel_bool_default fuel%lib!kernel.spec.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!kernel.spec.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!kernel.spec.impl&%0.wf.? self!) (and (and (and (and (and (and (lib!memory_manager.spec_impl.impl&%0.wf.? (Poly%lib!memory_manager.spec_impl.MemoryManager. (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. self!)))) (lib!allocator.page_allocator_spec_impl.impl&%0.wf.? (Poly%lib!allocator.page_allocator_spec_impl.PageAllocator. (lib!kernel.spec.Kernel./Kernel/page_alloc (%Poly%lib!kernel.spec.Kernel. self!))))) (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. self!))))) (lib!kernel.spec.impl&%0.memory_wf.? self!)) (lib!kernel.spec.impl&%0.mapping_wf.? self!)) (lib!kernel.spec.impl&%0.pcid_ioid_wf.? self!)) (lib!kernel.spec.impl&%0.page_mapping_wf.? self!))) :pattern ((lib!kernel.spec.impl&%0.wf.? self!))))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_container")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_container. (Poly Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((self! Poly) (container_ptr! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_container. self! container_ptr!) (and (=> %%global_location_label%%30 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%31 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.container_dom.? self!)) container_ptr!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_container. self! container_ptr!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_container")
(assert (forall ((self! Poly) (container_ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type container_ptr! (UINT SZ))) (has_type (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container.? self! container_ptr!)) TYPE%lib!process_manager.container.Container.)) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_container.? self! container_ptr!)))))
(set-info :comment ";; Function-Specs lib::array::Array::get")
(declare-fun req%lib!array.impl&%0.get. (Dcr Type Dcr Type lib!array.Array. Int) Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! lib!array.Array.) (i! Int)) (! (= (req%lib!array.impl&%0.get. A&. A& N&. N& self! i!) (and (=> %%global_location_label%%32 (and (<= 0 i!) (< i! (const_int N&)))) (=> %%global_location_label%%33 (lib!array.impl&%0.wf.? A&. A& N&. N& (Poly%lib!array.Array. self!))))) :pattern ((req%lib!array.impl&%0.get. A&. A& N&. N& self! i!)))))
(declare-fun ens%lib!array.impl&%0.get. (Dcr Type Dcr Type lib!array.Array. Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! lib!array.Array.) (i! Int) (out! Poly)) (! (= (ens%lib!array.impl&%0.get. A&. A& N&. N& self! i! out!) (and (has_type out! A&) (= out! (vstd!seq.Seq.index.? A&. A& (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. self!))) (I i!))))) :pattern ((ens%lib!array.impl&%0.get. A&. A& N&. N& self! i! out!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%30::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%30.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%30.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%44::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%44.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%44.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%46::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%46.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%46.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (= (vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!) (Poly%tuple%4. (tuple%4./tuple%4 (vstd!view.View.view.? A0&. A0& (tuple%4./tuple%4/0 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A1&. A1& (tuple%4./tuple%4/1 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A2&. A2& (tuple%4./tuple%4/2 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A3&. A3& (tuple%4./tuple%4/3 (%Poly%tuple%4. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!))))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_thread")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_thread. (Poly Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((self! Poly) (thread_ptr! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_thread. self! thread_ptr!) (and (=> %%global_location_label%%34 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%35 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? self!)) thread_ptr!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_thread. self! thread_ptr!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_thread")
(assert (forall ((self! Poly) (thread_ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type thread_ptr! (UINT SZ))) (has_type (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? self! thread_ptr!)) TYPE%lib!process_manager.thread.Thread.)) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_thread.? self! thread_ptr!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_endpoint")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint. (Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((self! Poly) (endpoint_ptr! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint. self! endpoint_ptr!) (and (=> %%global_location_label%%36 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%37 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) endpoint_ptr!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint. self! endpoint_ptr!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_endpoint")
(assert (forall ((self! Poly) (endpoint_ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type endpoint_ptr! (UINT SZ))) (has_type (Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? self! endpoint_ptr!)) TYPE%lib!process_manager.endpoint.Endpoint.)) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? self! endpoint_ptr!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_proc")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_proc. (lib!process_manager.spec_impl.ProcessManager. Int) Bool)
(declare-const %%global_location_label%%38 Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (proc_ptr! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_proc. self! proc_ptr!) (and (=> %%global_location_label%%38 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%39 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I proc_ptr!))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_proc. self! proc_ptr!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_proc. (lib!process_manager.spec_impl.ProcessManager. Int lib!process_manager.process.Process.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (proc_ptr! Int) (ret! lib!process_manager.process.Process.)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_proc. self! proc_ptr! ret!) (and (has_type (Poly%lib!process_manager.process.Process. ret!) TYPE%lib!process_manager.process.Process.) (ext_eq false TYPE%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. ret!) (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I proc_ptr!)))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. ret!))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. ret!))))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_proc. self! proc_ptr! ret!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_thread")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_thread. (lib!process_manager.spec_impl.ProcessManager. Int) Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (thread_ptr! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_thread. self! thread_ptr!) (and (=> %%global_location_label%%40 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%41 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I thread_ptr!))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_thread. self! thread_ptr!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_thread. (lib!process_manager.spec_impl.ProcessManager. Int lib!process_manager.thread.Thread.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (thread_ptr! Int) (ret! lib!process_manager.thread.Thread.)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_thread. self! thread_ptr! ret!) (and (has_type (Poly%lib!process_manager.thread.Thread. ret!) TYPE%lib!process_manager.thread.Thread.) (= ret! (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. ret!))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. ret!))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. ret!)))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. ret!)))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. ret!)))))))))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_thread. self! thread_ptr! ret!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::thread_inv")
(declare-fun req%lib!process_manager.spec_impl.impl&%2.thread_inv. (lib!process_manager.spec_impl.ProcessManager.) Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.)) (! (= (req%lib!process_manager.spec_impl.impl&%2.thread_inv. self!) (=> %%global_location_label%%42 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%2.thread_inv. self!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%2.thread_inv. (lib!process_manager.spec_impl.ProcessManager.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.)) (! (= (ens%lib!process_manager.spec_impl.impl&%2.thread_inv. self!) (forall ((t_ptr$ Poly)) (! (=> (has_type t_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$) (and (and (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) t_ptr$)))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) t_ptr$))))))) (lib!array.impl&%0.wf.? $ (TYPE%core!option.Option. $ (UINT SZ)) $ (CONST_INT 128) (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) t_ptr$))))))) (=> (is-core!option.Option./Some_ (lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) t_ptr$))))))) (lib!va_range.impl&%2.wf.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) t_ptr$)))))))))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.?)) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) t_ptr$))))))) i$)))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.endpoint_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) t_ptr$))))))) i$)))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) t_ptr$))))))) i$))))) (= (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) t_ptr$))))))))) (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) t_ptr$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)) :pattern ((lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) t_ptr$))))) :pattern ((lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) t_ptr$)))))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%2.thread_inv. self!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::container_inv")
(declare-fun req%lib!process_manager.spec_impl.impl&%2.container_inv. (lib!process_manager.spec_impl.ProcessManager.) Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.)) (! (= (req%lib!process_manager.spec_impl.impl&%2.container_inv. self!) (=> %%global_location_label%%43 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%2.container_inv. self!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%2.container_inv. (lib!process_manager.spec_impl.ProcessManager.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.)) (! (= (ens%lib!process_manager.spec_impl.impl&%2.container_inv. self!) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$) (and (and (lib!array_set.impl&%0.wf.? $ (CONST_INT 32) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) c_ptr$)))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) c_ptr$))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) c_ptr$))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$)) :pattern ((lib!array_set.impl&%0.wf.? $ (CONST_INT 32) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) c_ptr$))))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) c_ptr$))))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) c_ptr$)))))))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%2.container_inv. self!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::endpoint_inv")
(declare-fun req%lib!process_manager.spec_impl.impl&%2.endpoint_inv. (lib!process_manager.spec_impl.ProcessManager.) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.)) (! (= (req%lib!process_manager.spec_impl.impl&%2.endpoint_inv. self!) (=> %%global_location_label%%44 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%2.endpoint_inv. self!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%2.endpoint_inv. (lib!process_manager.spec_impl.ProcessManager.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.)) (! (= (ens%lib!process_manager.spec_impl.impl&%2.endpoint_inv. self!) (and (forall ((e_ptr$ Poly)) (! (=> (has_type e_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.endpoint_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) e_ptr$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.endpoint_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) e_ptr$))))))))) (forall ((e_ptr$ Poly) (i$ Poly)) (! (=> (and (has_type e_ptr$ (UINT SZ)) (has_type i$ INT)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.endpoint_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$) (and (<= 0 (%I i$)) (< (%I i$) (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) e_ptr$))))))))) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (vstd!seq.Seq.index.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) e_ptr$)))))) i$)) (= (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (vstd!seq.Seq.index.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) e_ptr$)))))) i$))))) lib!define.ThreadState./BLOCKED)))) :pattern ((vstd!seq.Seq.index.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) e_ptr$)))))) i$)))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%2.endpoint_inv. self!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::cpu_inv")
(declare-fun req%lib!process_manager.spec_impl.impl&%2.cpu_inv. (lib!process_manager.spec_impl.ProcessManager.) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.)) (! (= (req%lib!process_manager.spec_impl.impl&%2.cpu_inv. self!) (=> %%global_location_label%%45 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%2.cpu_inv. self!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%2.cpu_inv. (lib!process_manager.spec_impl.ProcessManager.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.)) (! (= (ens%lib!process_manager.spec_impl.impl&%2.cpu_inv. self!) (and (lib!array.impl&%0.wf.? $ TYPE%lib!process_manager.cpu.Cpu. $ (CONST_INT 32) (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (forall ((cpu_i$ Poly)) (! (=> (has_type cpu_i$ (UINT SZ)) (=> (and (<= 0 (%I cpu_i$)) (< (%I cpu_i$) lib!define.NUM_CPUS.?)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.cpu.Cpu./Cpu/owning_container (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))))) cpu_i$))))) (=> (is-core!option.Option./Some_ (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))))) cpu_i$)))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))))) cpu_i$))))))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))))) cpu_i$)))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%2.cpu_inv. self!)))))
(set-info :comment ";; Function-Specs lib::memory_manager::spec_impl::MemoryManager::get_cr3_by_pcid")
(declare-fun req%lib!memory_manager.spec_impl.impl&%0.get_cr3_by_pcid. (lib!memory_manager.spec_impl.MemoryManager. Int) Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((self! lib!memory_manager.spec_impl.MemoryManager.) (pcid! Int)) (! (= (req%lib!memory_manager.spec_impl.impl&%0.get_cr3_by_pcid. self! pcid!) (and (=> %%global_location_label%%46 (lib!memory_manager.spec_impl.impl&%0.wf.? (Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) (=> %%global_location_label%%47 (and (<= 0 pcid!) (< pcid! lib!define.PCID_MAX.?))) (=> %%global_location_label%%48 (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!memory_manager.spec_impl.impl&%0.get_free_pcids_as_set.? (Poly%lib!memory_manager.spec_impl.MemoryManager. self!))) (I pcid!)) false)))) :pattern ((req%lib!memory_manager.spec_impl.impl&%0.get_cr3_by_pcid. self! pcid!)))))
(declare-fun ens%lib!memory_manager.spec_impl.impl&%0.get_cr3_by_pcid. (lib!memory_manager.spec_impl.MemoryManager. Int Int) Bool)
(assert (forall ((self! lib!memory_manager.spec_impl.MemoryManager.) (pcid! Int) (%return! Int)) (! (= (ens%lib!memory_manager.spec_impl.impl&%0.get_cr3_by_pcid. self! pcid! %return!) (uInv SZ %return!)) :pattern ((ens%lib!memory_manager.spec_impl.impl&%0.get_cr3_by_pcid. self! pcid! %return!)))))
(set-info :comment ";; Function-Specs lib::kernel::spec::Kernel::get_current_cpu_info")
(declare-fun req%lib!kernel.util_syscalls.impl&%0.get_current_cpu_info. (lib!kernel.spec.Kernel. Int) Bool)
(declare-const %%global_location_label%%49 Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((self! lib!kernel.spec.Kernel.) (cpu_id! Int)) (! (= (req%lib!kernel.util_syscalls.impl&%0.get_current_cpu_info. self! cpu_id!) (and (=> %%global_location_label%%49 (lib!kernel.spec.impl&%0.wf.? (Poly%lib!kernel.spec.Kernel. self!))) (=> %%global_location_label%%50 (and (<= 0 cpu_id!) (< cpu_id! lib!define.NUM_CPUS.?))))) :pattern ((req%lib!kernel.util_syscalls.impl&%0.get_current_cpu_info. self! cpu_id!)))))
(declare-fun ens%lib!kernel.util_syscalls.impl&%0.get_current_cpu_info. (lib!kernel.spec.Kernel. Int tuple%5.) Bool)
(assert (forall ((self! lib!kernel.spec.Kernel.) (cpu_id! Int) (%return! tuple%5.)) (! (= (ens%lib!kernel.util_syscalls.impl&%0.get_current_cpu_info. self! cpu_id! %return!) (has_type (Poly%tuple%5. %return!) (TYPE%tuple%5. $ (TYPE%core!option.Option. $ (UINT SZ)) $ (TYPE%core!option.Option. $ (UINT SZ)) $ (UINT SZ) $ (TYPE%core!option.Option. $ (UINT SZ)) $ (TYPE%core!option.Option. $ (UINT SZ))))) :pattern ((ens%lib!kernel.util_syscalls.impl&%0.get_current_cpu_info. self! cpu_id! %return!)))))
(set-info :comment ";; Function-Def lib::kernel::spec::Kernel::get_current_cpu_info")
(set-info :comment ";; kernel/util_syscalls.rs:13:5: 13:138 (#0)")
(declare-const %return! tuple%5.)
(declare-const self! lib!kernel.spec.Kernel.)
(declare-const cpu_id! Int)
(declare-const tmp%1 lib!process_manager.spec_impl.ProcessManager.)
(declare-const tmp%2 lib!process_manager.spec_impl.ProcessManager.)
(declare-const tmp%3 lib!process_manager.spec_impl.ProcessManager.)
(declare-const tmp%4 lib!process_manager.spec_impl.ProcessManager.)
(declare-const tmp%5 Poly)
(declare-const tmp%6 lib!array.Array.)
(declare-const tmp%7 Poly)
(declare-const tmp%8 lib!array.Array.)
(declare-const tmp%9 Bool)
(declare-const tmp%10 Bool)
(declare-const tmp%11 Bool)
(declare-const tmp%12 Poly)
(declare-const tmp%13 lib!process_manager.thread.Thread.)
(declare-const tmp%14 lib!process_manager.spec_impl.ProcessManager.)
(declare-const tmp%15 lib!process_manager.process.Process.)
(declare-const tmp%16 lib!process_manager.spec_impl.ProcessManager.)
(declare-const tmp%17 lib!memory_manager.spec_impl.MemoryManager.)
(declare-const container_ptr@ Int)
(declare-const thread_ptr_op@ core!option.Option.)
(declare-const thread_ptr@ Int)
(declare-const proc_ptr@ Int)
(declare-const pcid@ Int)
(declare-const cr3@ Int)
(assert fuel_defaults)
(assert (has_type (Poly%lib!kernel.spec.Kernel. self!) TYPE%lib!kernel.spec.Kernel.))
(assert (uInv SZ cpu_id!))
(assert (lib!kernel.spec.impl&%0.wf.? (Poly%lib!kernel.spec.Kernel. self!)))
(assert (and (<= 0 cpu_id!) (< cpu_id! lib!define.NUM_CPUS.?)))
(declare-const %%switch_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%11 Bool)
(assert (not (=> (= tmp%1 (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. (Poly%lib!kernel.spec.Kernel. self!)))) (and (=> %%location_label%%0 (req%lib!process_manager.spec_impl.impl&%2.thread_inv. tmp%1)) (=> (ens%lib!process_manager.spec_impl.impl&%2.thread_inv. tmp%1) (=> (= tmp%2 (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. (Poly%lib!kernel.spec.Kernel. self!)))) (and (=> %%location_label%%1 (req%lib!process_manager.spec_impl.impl&%2.endpoint_inv. tmp%2)) (=> (ens%lib!process_manager.spec_impl.impl&%2.endpoint_inv. tmp%2) (=> (= tmp%3 (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. (Poly%lib!kernel.spec.Kernel. self!)))) (and (=> %%location_label%%2 (req%lib!process_manager.spec_impl.impl&%2.container_inv. tmp%3)) (=> (ens%lib!process_manager.spec_impl.impl&%2.container_inv. tmp%3) (=> (= tmp%4 (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. (Poly%lib!kernel.spec.Kernel. self!)))) (and (=> %%location_label%%3 (req%lib!process_manager.spec_impl.impl&%2.cpu_inv. tmp%4)) (=> (ens%lib!process_manager.spec_impl.impl&%2.cpu_inv. tmp%4) (=> (= tmp%6 (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. (Poly%lib!kernel.spec.Kernel. self!))))))) (and (=> %%location_label%%4 (req%lib!array.impl&%0.get. $ TYPE%lib!process_manager.cpu.Cpu. $ (CONST_INT 32) tmp%6 cpu_id!)) (=> (ens%lib!array.impl&%0.get. $ TYPE%lib!process_manager.cpu.Cpu. $ (CONST_INT 32) tmp%6 cpu_id! tmp%5) (=> (= container_ptr@ (lib!process_manager.cpu.Cpu./Cpu/owning_container (%Poly%lib!process_manager.cpu.Cpu. tmp%5))) (=> (= tmp%8 (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. (Poly%lib!kernel.spec.Kernel. self!))))))) (and (=> %%location_label%%5 (req%lib!array.impl&%0.get. $ TYPE%lib!process_manager.cpu.Cpu. $ (CONST_INT 32) tmp%8 cpu_id!)) (=> (ens%lib!array.impl&%0.get. $ TYPE%lib!process_manager.cpu.Cpu. $ (CONST_INT 32) tmp%8 cpu_id! tmp%7) (=> (= thread_ptr_op@ (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. tmp%7))) (=> (ens%core!option.impl&%0.is_none. $ (UINT SZ) thread_ptr_op@ tmp%9) (or (=> (not tmp%9) %%switch_label%%0) (and (not %%switch_label%%0) (=> (= tmp%10 (is-core!option.Option./Some_ (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. (Poly%lib!kernel.spec.Kernel. self!))))))))) (I cpu_id!)))))) (and (=> %%location_label%%6 tmp%10) (=> tmp%10 (=> (= tmp%11 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. (Poly%lib!kernel.spec.Kernel. self!)))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. (Poly%lib!kernel.spec.Kernel. self!))))))))) (I cpu_id!))))))))) (and (=> %%location_label%%7 tmp%11) (=> tmp%11 (and (=> %%location_label%%8 (req%core!option.impl&%0.unwrap. $ (UINT SZ) thread_ptr_op@)) (=> (ens%core!option.impl&%0.unwrap. $ (UINT SZ) thread_ptr_op@ tmp%12) (=> (= thread_ptr@ (%I tmp%12)) (=> (= tmp%14 (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. (Poly%lib!kernel.spec.Kernel. self!)))) (and (=> %%location_label%%9 (req%lib!process_manager.spec_impl.impl&%0.get_thread. tmp%14 thread_ptr@)) (=> (ens%lib!process_manager.spec_impl.impl&%0.get_thread. tmp%14 thread_ptr@ tmp%13) (=> (= proc_ptr@ (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. tmp%13)))) (=> (= tmp%16 (lib!kernel.spec.Kernel./Kernel/proc_man (%Poly%lib!kernel.spec.Kernel. (Poly%lib!kernel.spec.Kernel. self!)))) (and (=> %%location_label%%10 (req%lib!process_manager.spec_impl.impl&%0.get_proc. tmp%16 proc_ptr@)) (=> (ens%lib!process_manager.spec_impl.impl&%0.get_proc. tmp%16 proc_ptr@ tmp%15) (=> (= pcid@ (lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. tmp%15)))) (=> (= tmp%17 (lib!kernel.spec.Kernel./Kernel/mem_man (%Poly%lib!kernel.spec.Kernel. (Poly%lib!kernel.spec.Kernel. self!)))) (=> %%location_label%%11 (req%lib!memory_manager.spec_impl.impl&%0.get_cr3_by_pcid. tmp%17 pcid@)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
