(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Atmosphere (https://mars-research.github.io/projects/atmo/) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module process_manager::spec_impl'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.core.iter_into_iter_spec. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.option.is_some. FuelId)
(declare-const fuel%vstd!std_specs.option.is_none. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap_or. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%0.ghost_iter. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.exec_invariant. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_invariant. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_ensures. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_peek_next. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_advance. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%2.view. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%3.spec_is_lt. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%3.spec_steps_between_int. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%3.spec_forward_checked. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%3.spec_forward_checked_int. FuelId)
(declare-const fuel%vstd!std_specs.range.axiom_spec_range_next_u8. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%6.spec_is_lt. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%6.spec_steps_between_int. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%6.spec_forward_checked. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%6.spec_forward_checked_int. FuelId)
(declare-const fuel%vstd!std_specs.range.axiom_spec_range_next_u64. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%8.spec_is_lt. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%8.spec_steps_between_int. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%8.spec_forward_checked. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int. FuelId)
(declare-const fuel%vstd!std_specs.range.axiom_spec_range_next_usize. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%11.spec_is_lt. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%11.spec_steps_between_int. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%11.spec_forward_checked. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%11.spec_forward_checked_int. FuelId)
(declare-const fuel%vstd!std_specs.range.axiom_spec_range_next_i32. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%2.arrow_0. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.is_init. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.value. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.skip. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.no_duplicates. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.remove. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.remove_value. FuelId)
(declare-const fuel%vstd!seq_lib.seq_to_set_is_finite. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.impl&%0.disjoint. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%0.spec_addr. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%1.pptr. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%1.is_init. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%1.value. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%30.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%vstd!view.impl&%44.view. FuelId)
(declare-const fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len. FuelId)
(declare-const fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique. FuelId)
(declare-const fuel%lib!slinkedlist.spec_impl_u.impl&%0.view. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_dom. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.wf. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%3.is_None. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range. FuelId)
(declare-const fuel%lib!process_manager.endpoint.impl&%0.rf_counter_is_full. FuelId)
(declare-const fuel%lib!process_manager.endpoint.impl&%0.get_owning_threads. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.page_closure. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.proc_dom. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.container_dom. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.thread_dom. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.endpoint_dom. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.spec_get_proc. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.spec_get_proc_by_thread_ptr. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.spec_get_thread. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.spec_get_cpu. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.spec_get_is_cpu_running. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.spec_get_container. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.spec_get_container_by_proc_ptr. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.spec_get_container_by_thread_ptr. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.spec_get_thread_ptr_by_cpu_id. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.spec_get_owning_proc_by_thread_ptr. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_ptr_by_endpoint_idx. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_by_endpoint_idx. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%0.spec_get_thread_owns_endpoint. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.cpus_wf. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.container_cpu_wf. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.threads_cpu_wf. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.memory_disjoint. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.container_perms_wf. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.processes_container_wf. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.processes_wf. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.threads_process_wf. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.threads_perms_wf. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.threads_container_wf. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.endpoint_perms_wf. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.threads_endpoint_descriptors_wf. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.endpoints_queue_wf. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.endpoints_container_wf. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.schedulers_wf. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.pcid_ioid_wf. FuelId)
(declare-const fuel%lib!process_manager.spec_impl.impl&%1.wf. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.spec_va_4k_valid. FuelId)
(declare-const fuel%lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS. FuelId)
(declare-const fuel%lib!define.MAX_NUM_THREADS_PER_PROC. FuelId)
(declare-const fuel%lib!define.MAX_NUM_THREADS_PER_ENDPOINT. FuelId)
(declare-const fuel%lib!define.KERNEL_MEM_END_L4INDEX. FuelId)
(declare-const fuel%lib!define.MEM_4k_MASK. FuelId)
(declare-const fuel%lib!define.NUM_CPUS. FuelId)
(declare-const fuel%lib!define.CONTAINER_PROC_LIST_LEN. FuelId)
(declare-const fuel%lib!define.CONTAINER_CHILD_LIST_LEN. FuelId)
(declare-const fuel%lib!define.CONTAINER_ENDPOINT_LIST_LEN. FuelId)
(declare-const fuel%lib!define.MAX_CONTAINER_SCHEDULER_LEN. FuelId)
(declare-const fuel%lib!trap.impl&%0.is_Some. FuelId)
(declare-const fuel%lib!trap.impl&%0.spec_unwrap. FuelId)
(declare-const fuel%lib!trap.impl&%0.get_Some_0. FuelId)
(declare-const fuel%lib!array.impl&%0.view. FuelId)
(declare-const fuel%lib!array.impl&%0.wf. FuelId)
(declare-const fuel%lib!va_range.impl&%2.wf. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.core.iter_into_iter_spec. fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.option.is_some. fuel%vstd!std_specs.option.is_none. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.option.spec_unwrap_or. fuel%vstd!std_specs.range.impl&%0.ghost_iter. fuel%vstd!std_specs.range.impl&%1.exec_invariant. fuel%vstd!std_specs.range.impl&%1.ghost_invariant. fuel%vstd!std_specs.range.impl&%1.ghost_ensures. fuel%vstd!std_specs.range.impl&%1.ghost_peek_next. fuel%vstd!std_specs.range.impl&%1.ghost_advance. fuel%vstd!std_specs.range.impl&%2.view. fuel%vstd!std_specs.range.impl&%3.spec_is_lt. fuel%vstd!std_specs.range.impl&%3.spec_steps_between_int. fuel%vstd!std_specs.range.impl&%3.spec_forward_checked. fuel%vstd!std_specs.range.impl&%3.spec_forward_checked_int. fuel%vstd!std_specs.range.axiom_spec_range_next_u8. fuel%vstd!std_specs.range.impl&%6.spec_is_lt. fuel%vstd!std_specs.range.impl&%6.spec_steps_between_int. fuel%vstd!std_specs.range.impl&%6.spec_forward_checked. fuel%vstd!std_specs.range.impl&%6.spec_forward_checked_int. fuel%vstd!std_specs.range.axiom_spec_range_next_u64. fuel%vstd!std_specs.range.impl&%8.spec_is_lt. fuel%vstd!std_specs.range.impl&%8.spec_steps_between_int. fuel%vstd!std_specs.range.impl&%8.spec_forward_checked. fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int. fuel%vstd!std_specs.range.axiom_spec_range_next_usize. fuel%vstd!std_specs.range.impl&%11.spec_is_lt. fuel%vstd!std_specs.range.impl&%11.spec_steps_between_int. fuel%vstd!std_specs.range.impl&%11.spec_forward_checked. fuel%vstd!std_specs.range.impl&%11.spec_forward_checked_int. fuel%vstd!std_specs.range.axiom_spec_range_next_i32. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!raw_ptr.impl&%2.arrow_0. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.impl&%7.is_init. fuel%vstd!raw_ptr.impl&%7.value. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.skip. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.no_duplicates. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!seq_lib.impl&%0.remove. fuel%vstd!seq_lib.impl&%0.remove_value. fuel%vstd!seq_lib.seq_to_set_is_finite. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.impl&%0.disjoint. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_union_finite. fuel%vstd!set.axiom_set_empty_len. fuel%vstd!set.axiom_set_insert_len. fuel%vstd!set.axiom_set_remove_len. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!simple_pptr.impl&%0.spec_addr. fuel%vstd!simple_pptr.impl&%1.pptr. fuel%vstd!simple_pptr.impl&%1.is_init. fuel%vstd!simple_pptr.impl&%1.value. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%30.view. fuel%vstd!view.impl&%42.view. fuel%vstd!view.impl&%44.view. fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len. fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique. fuel%lib!slinkedlist.spec_impl_u.impl&%0.view. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_dom. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.wf. fuel%lib!process_manager.thread.impl&%3.is_None. fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range. fuel%lib!process_manager.endpoint.impl&%0.rf_counter_is_full. fuel%lib!process_manager.endpoint.impl&%0.get_owning_threads. fuel%lib!process_manager.spec_impl.impl&%0.page_closure. fuel%lib!process_manager.spec_impl.impl&%0.proc_dom. fuel%lib!process_manager.spec_impl.impl&%0.container_dom. fuel%lib!process_manager.spec_impl.impl&%0.thread_dom. fuel%lib!process_manager.spec_impl.impl&%0.endpoint_dom. fuel%lib!process_manager.spec_impl.impl&%0.spec_get_proc. fuel%lib!process_manager.spec_impl.impl&%0.spec_get_proc_by_thread_ptr. fuel%lib!process_manager.spec_impl.impl&%0.spec_get_thread. fuel%lib!process_manager.spec_impl.impl&%0.spec_get_cpu. fuel%lib!process_manager.spec_impl.impl&%0.spec_get_is_cpu_running. fuel%lib!process_manager.spec_impl.impl&%0.spec_get_container. fuel%lib!process_manager.spec_impl.impl&%0.spec_get_container_by_proc_ptr. fuel%lib!process_manager.spec_impl.impl&%0.spec_get_container_by_thread_ptr. fuel%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint. fuel%lib!process_manager.spec_impl.impl&%0.spec_get_thread_ptr_by_cpu_id. fuel%lib!process_manager.spec_impl.impl&%0.spec_get_owning_proc_by_thread_ptr. fuel%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_ptr_by_endpoint_idx. fuel%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_by_endpoint_idx. fuel%lib!process_manager.spec_impl.impl&%0.spec_get_thread_owns_endpoint. fuel%lib!process_manager.spec_impl.impl&%1.cpus_wf. fuel%lib!process_manager.spec_impl.impl&%1.container_cpu_wf. fuel%lib!process_manager.spec_impl.impl&%1.threads_cpu_wf. fuel%lib!process_manager.spec_impl.impl&%1.memory_disjoint. fuel%lib!process_manager.spec_impl.impl&%1.container_perms_wf. fuel%lib!process_manager.spec_impl.impl&%1.processes_container_wf. fuel%lib!process_manager.spec_impl.impl&%1.processes_wf. fuel%lib!process_manager.spec_impl.impl&%1.threads_process_wf. fuel%lib!process_manager.spec_impl.impl&%1.threads_perms_wf. fuel%lib!process_manager.spec_impl.impl&%1.threads_container_wf. fuel%lib!process_manager.spec_impl.impl&%1.endpoint_perms_wf. fuel%lib!process_manager.spec_impl.impl&%1.threads_endpoint_descriptors_wf. fuel%lib!process_manager.spec_impl.impl&%1.endpoints_queue_wf. fuel%lib!process_manager.spec_impl.impl&%1.endpoints_container_wf. fuel%lib!process_manager.spec_impl.impl&%1.schedulers_wf. fuel%lib!process_manager.spec_impl.impl&%1.pcid_ioid_wf. fuel%lib!process_manager.spec_impl.impl&%1.wf. fuel%lib!util.page_ptr_util_u.spec_va_4k_valid. fuel%lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS. fuel%lib!define.MAX_NUM_THREADS_PER_PROC. fuel%lib!define.MAX_NUM_THREADS_PER_ENDPOINT. fuel%lib!define.KERNEL_MEM_END_L4INDEX. fuel%lib!define.MEM_4k_MASK. fuel%lib!define.NUM_CPUS. fuel%lib!define.CONTAINER_PROC_LIST_LEN. fuel%lib!define.CONTAINER_CHILD_LIST_LEN. fuel%lib!define.CONTAINER_ENDPOINT_LIST_LEN. fuel%lib!define.MAX_CONTAINER_SCHEDULER_LEN. fuel%lib!trap.impl&%0.is_Some. fuel%lib!trap.impl&%0.spec_unwrap. fuel%lib!trap.impl&%0.get_Some_0. fuel%lib!array.impl&%0.view. fuel%lib!array.impl&%0.wf. fuel%lib!va_range.impl&%2.wf. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (fuel_bool_default fuel%vstd!seq_lib.seq_to_set_is_finite.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_len.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_len.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (and (fuel_bool_default fuel%vstd!std_specs.range.axiom_spec_range_next_u8.) (fuel_bool_default fuel%vstd!std_specs.range.axiom_spec_range_next_u64.) (fuel_bool_default fuel%vstd!std_specs.range.axiom_spec_range_next_usize.) (fuel_bool_default fuel%vstd!std_specs.range.axiom_spec_range_next_i32.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!pervasive.ForLoopGhostIterator./ExecIter (Dcr Type) Dcr)
(declare-fun proj%vstd!pervasive.ForLoopGhostIterator./ExecIter (Dcr Type) Type)
(declare-fun proj%%vstd!pervasive.ForLoopGhostIterator./Item (Dcr Type) Dcr)
(declare-fun proj%vstd!pervasive.ForLoopGhostIterator./Item (Dcr Type) Type)
(declare-fun proj%%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter (Dcr Type) Dcr)
(declare-fun proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter (Dcr Type) Type)
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. 0)
(declare-sort vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. 0)
(declare-sort vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. 0)
(declare-sort vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<i32.>. 0)
(declare-sort vstd!seq.Seq<usize.>. 0)
(declare-sort vstd!seq.Seq<core!option.Option<usize.>.>. 0)
(declare-sort vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. 0)
(declare-sort vstd!set.Set<usize.>. 0)
(declare-sort vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. 0)
(declare-sort vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. 0)
(declare-sort vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. 0)
(declare-sort vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (core!marker.PhantomData. 0) (core!ops.range.Range. 0) (vstd!std_specs.range.RangeGhostIterator. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (vstd!raw_ptr.MemContents. 0) (vstd!simple_pptr.PPtr. 0) (lib!slinkedlist.node.Node. 0) (lib!slinkedlist.spec_impl_u.StaticLinkedList. 0) (lib!process_manager.container.Container. 0) (lib!process_manager.container_tree_spec_impl.ContainerTree. 0) (lib!process_manager.process.Process. 0) (lib!process_manager.thread.Thread. 0) (lib!process_manager.thread.IPCPayLoad. 0) (lib!process_manager.endpoint.Endpoint. 0) (lib!process_manager.spec_impl.ProcessManager. 0) (lib!process_manager.cpu.Cpu. 0) (lib!define.ThreadState. 0) (lib!define.EndpointState. 0) (lib!define.RetValueType. 0) (lib!trap.TrapFrameOption. 0) (lib!trap.Registers. 0) (lib!array.Array. 0) (lib!array_set.ArraySet. 0) (lib!va_range.VaRange4K. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!marker.PhantomData./PhantomData )) ((core!ops.range.Range./Range (core!ops.range.Range./Range/?start Poly) (core!ops.range.Range./Range/?end Poly))) ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?start Poly) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?cur Poly) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?end Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((vstd!raw_ptr.MemContents./Uninit ) (vstd!raw_ptr.MemContents./Init (vstd!raw_ptr.MemContents./Init/?0 Poly))) ((vstd!simple_pptr.PPtr./PPtr (vstd!simple_pptr.PPtr./PPtr/?0 Int) (vstd!simple_pptr.PPtr./PPtr/?1 core!marker.PhantomData.))) ((lib!slinkedlist.node.Node./Node (lib!slinkedlist.node.Node./Node/?value core!option.Option.) (lib!slinkedlist.node.Node./Node/?next Int) (lib!slinkedlist.node.Node./Node/?prev Int))) ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?ar %%Function%%) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?spec_seq Poly) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list vstd!seq.Seq<i32.>.) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_head Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_tail Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_len Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list vstd!seq.Seq<i32.>.) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_head Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_tail Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_len Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?size Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?arr_seq Poly))) ((lib!process_manager.container.Container./Container (lib!process_manager.container.Container./Container/?owned_procs lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!process_manager.container.Container./Container/?parent core!option.Option.) (lib!process_manager.container.Container./Container/?parent_rev_ptr core!option.Option.) (lib!process_manager.container.Container./Container/?children lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!process_manager.container.Container./Container/?owned_endpoints lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!process_manager.container.Container./Container/?mem_quota Int) (lib!process_manager.container.Container./Container/?mem_used Int) (lib!process_manager.container.Container./Container/?owned_cpus lib!array_set.ArraySet.) (lib!process_manager.container.Container./Container/?scheduler lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!process_manager.container.Container./Container/?depth Int) (lib!process_manager.container.Container./Container/?owned_threads vstd!set.Set<usize.>.) (lib!process_manager.container.Container./Container/?uppertree_seq vstd!seq.Seq<usize.>.) (lib!process_manager.container.Container./Container/?subtree_set vstd!set.Set<usize.>.) (lib!process_manager.container.Container./Container/?can_have_children Bool))) ((lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/?root_container Int) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/?container_perms vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.))) ((lib!process_manager.process.Process./Process (lib!process_manager.process.Process./Process/?owning_container Int) (lib!process_manager.process.Process./Process/?rev_ptr Int) (lib!process_manager.process.Process./Process/?pcid Int) (lib!process_manager.process.Process./Process/?ioid core!option.Option.) (lib!process_manager.process.Process./Process/?owned_threads lib!slinkedlist.spec_impl_u.StaticLinkedList.))) ((lib!process_manager.thread.Thread./Thread (lib!process_manager.thread.Thread./Thread/?owning_container Int) (lib!process_manager.thread.Thread./Thread/?owning_proc Int) (lib!process_manager.thread.Thread./Thread/?state lib!define.ThreadState.) (lib!process_manager.thread.Thread./Thread/?proc_rev_ptr Int) (lib!process_manager.thread.Thread./Thread/?scheduler_rev_ptr core!option.Option.) (lib!process_manager.thread.Thread./Thread/?blocking_endpoint_ptr core!option.Option.) (lib!process_manager.thread.Thread./Thread/?endpoint_rev_ptr core!option.Option.) (lib!process_manager.thread.Thread./Thread/?running_cpu core!option.Option.) (lib!process_manager.thread.Thread./Thread/?endpoint_descriptors lib!array.Array.) (lib!process_manager.thread.Thread./Thread/?ipc_payload lib!process_manager.thread.IPCPayLoad.) (lib!process_manager.thread.Thread./Thread/?error_code core!option.Option.) (lib!process_manager.thread.Thread./Thread/?trap_frame lib!trap.TrapFrameOption.))) ((lib!process_manager.thread.IPCPayLoad./Message (lib!process_manager.thread.IPCPayLoad./Message/?va Int) (lib!process_manager.thread.IPCPayLoad./Message/?len Int)) (lib!process_manager.thread.IPCPayLoad./Pages (lib!process_manager.thread.IPCPayLoad./Pages/?va_range lib!va_range.VaRange4K.)) (lib!process_manager.thread.IPCPayLoad./Endpoint (lib!process_manager.thread.IPCPayLoad./Endpoint/?endpoint_index Int)) (lib!process_manager.thread.IPCPayLoad./Pci (lib!process_manager.thread.IPCPayLoad./Pci/?bus Int) (lib!process_manager.thread.IPCPayLoad./Pci/?dev Int) (lib!process_manager.thread.IPCPayLoad./Pci/?fun Int)) (lib!process_manager.thread.IPCPayLoad./Empty )) ((lib!process_manager.endpoint.Endpoint./Endpoint (lib!process_manager.endpoint.Endpoint./Endpoint/?queue lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!process_manager.endpoint.Endpoint./Endpoint/?queue_state lib!define.EndpointState.) (lib!process_manager.endpoint.Endpoint./Endpoint/?rf_counter Int) (lib!process_manager.endpoint.Endpoint./Endpoint/?owning_threads vstd!set.Set<usize.>.) (lib!process_manager.endpoint.Endpoint./Endpoint/?owning_container Int) (lib!process_manager.endpoint.Endpoint./Endpoint/?container_rev_ptr Int))) ((lib!process_manager.spec_impl.ProcessManager./ProcessManager (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?container_tree lib!process_manager.container_tree_spec_impl.ContainerTree.) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?process_perms vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>.) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?thread_perms vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>.) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?endpoint_perms vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>.) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?cpu_list lib!array.Array.))) ((lib!process_manager.cpu.Cpu./Cpu (lib!process_manager.cpu.Cpu./Cpu/?owning_container Int) (lib!process_manager.cpu.Cpu./Cpu/?active Bool) (lib!process_manager.cpu.Cpu./Cpu/?current_thread core!option.Option.))) ((lib!define.ThreadState./SCHEDULED ) (lib!define.ThreadState./BLOCKED ) (lib!define.ThreadState./RUNNING ) (lib!define.ThreadState./TRANSIT )) ((lib!define.EndpointState./RECEIVE ) (lib!define.EndpointState./SEND )) ((lib!define.RetValueType./SuccessUsize (lib!define.RetValueType./SuccessUsize/?value Int)) (lib!define.RetValueType./SuccessSeqUsize (lib!define.RetValueType./SuccessSeqUsize/?value vstd!seq.Seq<usize.>.)) (lib!define.RetValueType./SuccessPairUsize (lib!define.RetValueType./SuccessPairUsize/?value1 Int) (lib!define.RetValueType./SuccessPairUsize/?value2 Int)) (lib!define.RetValueType./SuccessThreeUsize (lib!define.RetValueType./SuccessThreeUsize/?value1 Int) (lib!define.RetValueType./SuccessThreeUsize/?value2 Int) (lib!define.RetValueType./SuccessThreeUsize/?value3 Int)) (lib!define.RetValueType./CpuIdle ) (lib!define.RetValueType./Error ) (lib!define.RetValueType./Else )) ((lib!trap.TrapFrameOption./TrapFrameOption (lib!trap.TrapFrameOption./TrapFrameOption/?reg lib!trap.Registers.) (lib!trap.TrapFrameOption./TrapFrameOption/?exists Bool))) ((lib!trap.Registers./Registers (lib!trap.Registers./Registers/?r15 Int) (lib!trap.Registers./Registers/?r14 Int) (lib!trap.Registers./Registers/?r13 Int) (lib!trap.Registers./Registers/?r12 Int) (lib!trap.Registers./Registers/?rbp Int) (lib!trap.Registers./Registers/?rbx Int) (lib!trap.Registers./Registers/?r11 Int) (lib!trap.Registers./Registers/?r10 Int) (lib!trap.Registers./Registers/?r9 Int) (lib!trap.Registers./Registers/?r8 Int) (lib!trap.Registers./Registers/?rcx Int) (lib!trap.Registers./Registers/?rdx Int) (lib!trap.Registers./Registers/?rsi Int) (lib!trap.Registers./Registers/?rdi Int) (lib!trap.Registers./Registers/?rax Int) (lib!trap.Registers./Registers/?error_code Int) (lib!trap.Registers./Registers/?rip Int) (lib!trap.Registers./Registers/?cs Int) (lib!trap.Registers./Registers/?flags Int) (lib!trap.Registers./Registers/?rsp Int) (lib!trap.Registers./Registers/?ss Int))) ((lib!array.Array./Array (lib!array.Array./Array/?seq Poly) (lib!array.Array./Array/?ar %%Function%%))) ((lib!array_set.ArraySet./ArraySet (lib!array_set.ArraySet./ArraySet/?data lib!array.Array.) (lib!array_set.ArraySet./ArraySet/?len Int) (lib!array_set.ArraySet./ArraySet/?set vstd!set.Set<usize.>.))) ((lib!va_range.VaRange4K./VaRange4K (lib!va_range.VaRange4K./VaRange4K/?start Int) (lib!va_range.VaRange4K./VaRange4K/?len Int) (lib!va_range.VaRange4K./VaRange4K/?view vstd!seq.Seq<usize.>.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!ops.range.Range./Range/start (core!ops.range.Range.) Poly)
(declare-fun core!ops.range.Range./Range/end (core!ops.range.Range.) Poly)
(declare-fun vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun vstd!raw_ptr.MemContents./Init/0 (vstd!raw_ptr.MemContents.) Poly)
(declare-fun vstd!simple_pptr.PPtr./PPtr/0 (vstd!simple_pptr.PPtr.) Int)
(declare-fun vstd!simple_pptr.PPtr./PPtr/1 (vstd!simple_pptr.PPtr.) core!marker.PhantomData.)
(declare-fun lib!slinkedlist.node.Node./Node/value (lib!slinkedlist.node.Node.) core!option.Option.)
(declare-fun lib!slinkedlist.node.Node./Node/next (lib!slinkedlist.node.Node.) Int)
(declare-fun lib!slinkedlist.node.Node./Node/prev (lib!slinkedlist.node.Node.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar (lib!slinkedlist.spec_impl_u.StaticLinkedList.) %%Function%%)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Poly)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list (lib!slinkedlist.spec_impl_u.StaticLinkedList.) vstd!seq.Seq<i32.>.)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list (lib!slinkedlist.spec_impl_u.StaticLinkedList.) vstd!seq.Seq<i32.>.)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Poly)
(declare-fun lib!process_manager.container.Container./Container/owned_procs (lib!process_manager.container.Container.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.container.Container./Container/parent (lib!process_manager.container.Container.) core!option.Option.)
(declare-fun lib!process_manager.container.Container./Container/parent_rev_ptr (lib!process_manager.container.Container.) core!option.Option.)
(declare-fun lib!process_manager.container.Container./Container/children (lib!process_manager.container.Container.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.container.Container./Container/owned_endpoints (lib!process_manager.container.Container.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.container.Container./Container/mem_quota (lib!process_manager.container.Container.) Int)
(declare-fun lib!process_manager.container.Container./Container/mem_used (lib!process_manager.container.Container.) Int)
(declare-fun lib!process_manager.container.Container./Container/owned_cpus (lib!process_manager.container.Container.) lib!array_set.ArraySet.)
(declare-fun lib!process_manager.container.Container./Container/scheduler (lib!process_manager.container.Container.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.container.Container./Container/depth (lib!process_manager.container.Container.) Int)
(declare-fun lib!process_manager.container.Container./Container/owned_threads (lib!process_manager.container.Container.) vstd!set.Set<usize.>.)
(declare-fun lib!process_manager.container.Container./Container/uppertree_seq (lib!process_manager.container.Container.) vstd!seq.Seq<usize.>.)
(declare-fun lib!process_manager.container.Container./Container/subtree_set (lib!process_manager.container.Container.) vstd!set.Set<usize.>.)
(declare-fun lib!process_manager.container.Container./Container/can_have_children (lib!process_manager.container.Container.) Bool)
(declare-fun lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (lib!process_manager.container_tree_spec_impl.ContainerTree.) Int)
(declare-fun lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (lib!process_manager.container_tree_spec_impl.ContainerTree.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)
(declare-fun lib!process_manager.process.Process./Process/owning_container (lib!process_manager.process.Process.) Int)
(declare-fun lib!process_manager.process.Process./Process/rev_ptr (lib!process_manager.process.Process.) Int)
(declare-fun lib!process_manager.process.Process./Process/pcid (lib!process_manager.process.Process.) Int)
(declare-fun lib!process_manager.process.Process./Process/ioid (lib!process_manager.process.Process.) core!option.Option.)
(declare-fun lib!process_manager.process.Process./Process/owned_threads (lib!process_manager.process.Process.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.thread.Thread./Thread/owning_container (lib!process_manager.thread.Thread.) Int)
(declare-fun lib!process_manager.thread.Thread./Thread/owning_proc (lib!process_manager.thread.Thread.) Int)
(declare-fun lib!process_manager.thread.Thread./Thread/state (lib!process_manager.thread.Thread.) lib!define.ThreadState.)
(declare-fun lib!process_manager.thread.Thread./Thread/proc_rev_ptr (lib!process_manager.thread.Thread.) Int)
(declare-fun lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (lib!process_manager.thread.Thread.) core!option.Option.)
(declare-fun lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (lib!process_manager.thread.Thread.) core!option.Option.)
(declare-fun lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (lib!process_manager.thread.Thread.) core!option.Option.)
(declare-fun lib!process_manager.thread.Thread./Thread/running_cpu (lib!process_manager.thread.Thread.) core!option.Option.)
(declare-fun lib!process_manager.thread.Thread./Thread/endpoint_descriptors (lib!process_manager.thread.Thread.) lib!array.Array.)
(declare-fun lib!process_manager.thread.Thread./Thread/ipc_payload (lib!process_manager.thread.Thread.) lib!process_manager.thread.IPCPayLoad.)
(declare-fun lib!process_manager.thread.Thread./Thread/error_code (lib!process_manager.thread.Thread.) core!option.Option.)
(declare-fun lib!process_manager.thread.Thread./Thread/trap_frame (lib!process_manager.thread.Thread.) lib!trap.TrapFrameOption.)
(declare-fun lib!process_manager.thread.IPCPayLoad./Message/va (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.thread.IPCPayLoad./Message/len (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.thread.IPCPayLoad./Pages/va_range (lib!process_manager.thread.IPCPayLoad.) lib!va_range.VaRange4K.)
(declare-fun lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.thread.IPCPayLoad./Pci/bus (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.thread.IPCPayLoad./Pci/dev (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.thread.IPCPayLoad./Pci/fun (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/queue (lib!process_manager.endpoint.Endpoint.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (lib!process_manager.endpoint.Endpoint.) lib!define.EndpointState.)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (lib!process_manager.endpoint.Endpoint.) Int)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (lib!process_manager.endpoint.Endpoint.) vstd!set.Set<usize.>.)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (lib!process_manager.endpoint.Endpoint.) Int)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (lib!process_manager.endpoint.Endpoint.) Int)
(declare-fun lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (lib!process_manager.spec_impl.ProcessManager.) lib!process_manager.container_tree_spec_impl.ContainerTree.)
(declare-fun lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (lib!process_manager.spec_impl.ProcessManager.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>.)
(declare-fun lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (lib!process_manager.spec_impl.ProcessManager.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>.)
(declare-fun lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (lib!process_manager.spec_impl.ProcessManager.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>.)
(declare-fun lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (lib!process_manager.spec_impl.ProcessManager.) lib!array.Array.)
(declare-fun lib!process_manager.cpu.Cpu./Cpu/owning_container (lib!process_manager.cpu.Cpu.) Int)
(declare-fun lib!process_manager.cpu.Cpu./Cpu/active (lib!process_manager.cpu.Cpu.) Bool)
(declare-fun lib!process_manager.cpu.Cpu./Cpu/current_thread (lib!process_manager.cpu.Cpu.) core!option.Option.)
(declare-fun lib!define.RetValueType./SuccessUsize/value (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessSeqUsize/value (lib!define.RetValueType.) vstd!seq.Seq<usize.>.)
(declare-fun lib!define.RetValueType./SuccessPairUsize/value1 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessPairUsize/value2 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessThreeUsize/value1 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessThreeUsize/value2 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessThreeUsize/value3 (lib!define.RetValueType.) Int)
(declare-fun lib!trap.TrapFrameOption./TrapFrameOption/reg (lib!trap.TrapFrameOption.) lib!trap.Registers.)
(declare-fun lib!trap.TrapFrameOption./TrapFrameOption/exists (lib!trap.TrapFrameOption.) Bool)
(declare-fun lib!trap.Registers./Registers/r15 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r14 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r13 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r12 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rbp (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rbx (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r11 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r10 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r9 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r8 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rcx (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rdx (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rsi (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rdi (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rax (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/error_code (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rip (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/cs (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/flags (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rsp (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/ss (lib!trap.Registers.) Int)
(declare-fun lib!array.Array./Array/seq (lib!array.Array.) Poly)
(declare-fun lib!array.Array./Array/ar (lib!array.Array.) %%Function%%)
(declare-fun lib!array_set.ArraySet./ArraySet/data (lib!array_set.ArraySet.) lib!array.Array.)
(declare-fun lib!array_set.ArraySet./ArraySet/len (lib!array_set.ArraySet.) Int)
(declare-fun lib!array_set.ArraySet./ArraySet/set (lib!array_set.ArraySet.) vstd!set.Set<usize.>.)
(declare-fun lib!va_range.VaRange4K./VaRange4K/start (lib!va_range.VaRange4K.) Int)
(declare-fun lib!va_range.VaRange4K./VaRange4K/len (lib!va_range.VaRange4K.) Int)
(declare-fun lib!va_range.VaRange4K./VaRange4K/view (lib!va_range.VaRange4K.) vstd!seq.Seq<usize.>.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!marker.PhantomData. (Dcr Type) Type)
(declare-fun TYPE%core!ops.range.Range. (Dcr Type) Type)
(declare-fun TYPE%vstd!std_specs.range.RangeGhostIterator. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!raw_ptr.MemContents. (Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%vstd!simple_pptr.PPtr. (Dcr Type) Type)
(declare-fun TYPE%vstd!simple_pptr.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%lib!slinkedlist.node.Node. (Dcr Type) Type)
(declare-fun TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Dcr Type Dcr Type) Type)
(declare-const TYPE%lib!process_manager.container.Container. Type)
(declare-const TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree. Type)
(declare-const TYPE%lib!process_manager.process.Process. Type)
(declare-const TYPE%lib!process_manager.thread.Thread. Type)
(declare-const TYPE%lib!process_manager.thread.IPCPayLoad. Type)
(declare-const TYPE%lib!process_manager.endpoint.Endpoint. Type)
(declare-const TYPE%lib!process_manager.spec_impl.ProcessManager. Type)
(declare-const TYPE%lib!process_manager.cpu.Cpu. Type)
(declare-const TYPE%lib!define.ThreadState. Type)
(declare-const TYPE%lib!define.EndpointState. Type)
(declare-const TYPE%lib!define.RetValueType. Type)
(declare-const TYPE%lib!trap.TrapFrameOption. Type)
(declare-const TYPE%lib!trap.Registers. Type)
(declare-fun TYPE%lib!array.Array. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%lib!array_set.ArraySet. (Dcr Type) Type)
(declare-const TYPE%lib!va_range.VaRange4K. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (Poly) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)
(declare-fun Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (Poly) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>.)
(declare-fun Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (Poly) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>.)
(declare-fun Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (Poly) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<i32.>. (vstd!seq.Seq<i32.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<i32.>. (Poly) vstd!seq.Seq<i32.>.)
(declare-fun Poly%vstd!seq.Seq<usize.>. (vstd!seq.Seq<usize.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<usize.>. (Poly) vstd!seq.Seq<usize.>.)
(declare-fun Poly%vstd!seq.Seq<core!option.Option<usize.>.>. (vstd!seq.Seq<core!option.Option<usize.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<core!option.Option<usize.>.>. (Poly) vstd!seq.Seq<core!option.Option<usize.>.>.)
(declare-fun Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. (vstd!seq.Seq<lib!process_manager.cpu.Cpu.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. (Poly) vstd!seq.Seq<lib!process_manager.cpu.Cpu.>.)
(declare-fun Poly%vstd!set.Set<usize.>. (vstd!set.Set<usize.>.) Poly)
(declare-fun %Poly%vstd!set.Set<usize.>. (Poly) vstd!set.Set<usize.>.)
(declare-fun Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. (vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) Poly)
(declare-fun %Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. (Poly) vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)
(declare-fun Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. (vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) Poly)
(declare-fun %Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. (Poly) vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.)
(declare-fun Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. (vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.) Poly)
(declare-fun %Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. (Poly) vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.)
(declare-fun Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. (vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) Poly)
(declare-fun %Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. (Poly) vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!marker.PhantomData. (core!marker.PhantomData.) Poly)
(declare-fun %Poly%core!marker.PhantomData. (Poly) core!marker.PhantomData.)
(declare-fun Poly%core!ops.range.Range. (core!ops.range.Range.) Poly)
(declare-fun %Poly%core!ops.range.Range. (Poly) core!ops.range.Range.)
(declare-fun Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun %Poly%vstd!std_specs.range.RangeGhostIterator. (Poly) vstd!std_specs.range.RangeGhostIterator.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents.) Poly)
(declare-fun %Poly%vstd!raw_ptr.MemContents. (Poly) vstd!raw_ptr.MemContents.)
(declare-fun Poly%vstd!simple_pptr.PPtr. (vstd!simple_pptr.PPtr.) Poly)
(declare-fun %Poly%vstd!simple_pptr.PPtr. (Poly) vstd!simple_pptr.PPtr.)
(declare-fun Poly%lib!slinkedlist.node.Node. (lib!slinkedlist.node.Node.) Poly)
(declare-fun %Poly%lib!slinkedlist.node.Node. (Poly) lib!slinkedlist.node.Node.)
(declare-fun Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Poly)
(declare-fun %Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun Poly%lib!process_manager.container.Container. (lib!process_manager.container.Container.) Poly)
(declare-fun %Poly%lib!process_manager.container.Container. (Poly) lib!process_manager.container.Container.)
(declare-fun Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.container_tree_spec_impl.ContainerTree.) Poly)
(declare-fun %Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly) lib!process_manager.container_tree_spec_impl.ContainerTree.)
(declare-fun Poly%lib!process_manager.process.Process. (lib!process_manager.process.Process.) Poly)
(declare-fun %Poly%lib!process_manager.process.Process. (Poly) lib!process_manager.process.Process.)
(declare-fun Poly%lib!process_manager.thread.Thread. (lib!process_manager.thread.Thread.) Poly)
(declare-fun %Poly%lib!process_manager.thread.Thread. (Poly) lib!process_manager.thread.Thread.)
(declare-fun Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad.) Poly)
(declare-fun %Poly%lib!process_manager.thread.IPCPayLoad. (Poly) lib!process_manager.thread.IPCPayLoad.)
(declare-fun Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.endpoint.Endpoint.) Poly)
(declare-fun %Poly%lib!process_manager.endpoint.Endpoint. (Poly) lib!process_manager.endpoint.Endpoint.)
(declare-fun Poly%lib!process_manager.spec_impl.ProcessManager. (lib!process_manager.spec_impl.ProcessManager.) Poly)
(declare-fun %Poly%lib!process_manager.spec_impl.ProcessManager. (Poly) lib!process_manager.spec_impl.ProcessManager.)
(declare-fun Poly%lib!process_manager.cpu.Cpu. (lib!process_manager.cpu.Cpu.) Poly)
(declare-fun %Poly%lib!process_manager.cpu.Cpu. (Poly) lib!process_manager.cpu.Cpu.)
(declare-fun Poly%lib!define.ThreadState. (lib!define.ThreadState.) Poly)
(declare-fun %Poly%lib!define.ThreadState. (Poly) lib!define.ThreadState.)
(declare-fun Poly%lib!define.EndpointState. (lib!define.EndpointState.) Poly)
(declare-fun %Poly%lib!define.EndpointState. (Poly) lib!define.EndpointState.)
(declare-fun Poly%lib!define.RetValueType. (lib!define.RetValueType.) Poly)
(declare-fun %Poly%lib!define.RetValueType. (Poly) lib!define.RetValueType.)
(declare-fun Poly%lib!trap.TrapFrameOption. (lib!trap.TrapFrameOption.) Poly)
(declare-fun %Poly%lib!trap.TrapFrameOption. (Poly) lib!trap.TrapFrameOption.)
(declare-fun Poly%lib!trap.Registers. (lib!trap.Registers.) Poly)
(declare-fun %Poly%lib!trap.Registers. (Poly) lib!trap.Registers.)
(declare-fun Poly%lib!array.Array. (lib!array.Array.) Poly)
(declare-fun %Poly%lib!array.Array. (Poly) lib!array.Array.)
(declare-fun Poly%lib!array_set.ArraySet. (lib!array_set.ArraySet.) Poly)
(declare-fun %Poly%lib!array_set.ArraySet. (Poly) lib!array_set.ArraySet.)
(declare-fun Poly%lib!va_range.VaRange4K. (lib!va_range.VaRange4K.) Poly)
(declare-fun %Poly%lib!va_range.VaRange4K. (Poly) lib!va_range.VaRange4K.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.))) (= x (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.))) :pattern ((has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.))) (= x (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.))) :pattern ((has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.))) (= x (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.))) :pattern ((has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.))) (= x (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.))) :pattern ((has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.)))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<i32.>.)) (! (= x (%Poly%vstd!seq.Seq<i32.>. (Poly%vstd!seq.Seq<i32.>. x))) :pattern ((Poly%vstd!seq.Seq<i32.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (SINT 32))) (= x (Poly%vstd!seq.Seq<i32.>. (%Poly%vstd!seq.Seq<i32.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (SINT 32)))))))
(assert (forall ((x vstd!seq.Seq<i32.>.)) (! (has_type (Poly%vstd!seq.Seq<i32.>. x) (TYPE%vstd!seq.Seq. $ (SINT 32))) :pattern ((has_type (Poly%vstd!seq.Seq<i32.>. x) (TYPE%vstd!seq.Seq. $ (SINT 32)))))))
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (= x (%Poly%vstd!seq.Seq<usize.>. (Poly%vstd!seq.Seq<usize.>. x))) :pattern ((Poly%vstd!seq.Seq<usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ))) (= x (Poly%vstd!seq.Seq<usize.>. (%Poly%vstd!seq.Seq<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ)))))))
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ)))))))
(assert (forall ((x vstd!seq.Seq<core!option.Option<usize.>.>.)) (! (= x (%Poly%vstd!seq.Seq<core!option.Option<usize.>.>. (Poly%vstd!seq.Seq<core!option.Option<usize.>.>. x))) :pattern ((Poly%vstd!seq.Seq<core!option.Option<usize.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (UINT SZ)))) (= x (Poly%vstd!seq.Seq<core!option.Option<usize.>.>. (%Poly%vstd!seq.Seq<core!option.Option<usize.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (UINT SZ))))))))
(assert (forall ((x vstd!seq.Seq<core!option.Option<usize.>.>.)) (! (has_type (Poly%vstd!seq.Seq<core!option.Option<usize.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((has_type (Poly%vstd!seq.Seq<core!option.Option<usize.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (UINT SZ))))))))
(assert (forall ((x vstd!seq.Seq<lib!process_manager.cpu.Cpu.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. (Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!process_manager.cpu.Cpu.)) (= x (Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. (%Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!process_manager.cpu.Cpu.))))))
(assert (forall ((x vstd!seq.Seq<lib!process_manager.cpu.Cpu.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!process_manager.cpu.Cpu.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!process_manager.cpu.Cpu.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!process_manager.cpu.Cpu.))))))
(assert (forall ((x vstd!set.Set<usize.>.)) (! (= x (%Poly%vstd!set.Set<usize.>. (Poly%vstd!set.Set<usize.>. x))) :pattern ((Poly%vstd!set.Set<usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (UINT SZ))) (= x (Poly%vstd!set.Set<usize.>. (%Poly%vstd!set.Set<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (UINT SZ)))))))
(assert (forall ((x vstd!set.Set<usize.>.)) (! (has_type (Poly%vstd!set.Set<usize.>. x) (TYPE%vstd!set.Set. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!set.Set<usize.>. x) (TYPE%vstd!set.Set. $ (UINT SZ)))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)) (! (= x (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. x))) :pattern ((Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.)) (= x (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. x)))) :pattern ((has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)) (! (has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.)) :pattern ((has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.)) (! (= x (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. x))) :pattern ((Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.)) (= x (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. x)))) :pattern ((has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.)) (! (has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.)) :pattern ((has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.)) (! (= x (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. x))) :pattern ((Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.)) (= x (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. x)))) :pattern ((has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.)) (! (has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.)) :pattern ((has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.)) (! (= x (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. x))) :pattern ((Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.)) (= x (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. x)))) :pattern ((has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.)) (! (has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.)) :pattern ((has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!marker.PhantomData.)) (! (= x (%Poly%core!marker.PhantomData. (Poly%core!marker.PhantomData. x))) :pattern ((Poly%core!marker.PhantomData. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!marker.PhantomData. V&. V&)) (= x (Poly%core!marker.PhantomData. (%Poly%core!marker.PhantomData. x)))) :pattern ((has_type x (TYPE%core!marker.PhantomData. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (x core!marker.PhantomData.)) (! (has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&)) :pattern ((has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&))))))
(assert (forall ((x core!ops.range.Range.)) (! (= x (%Poly%core!ops.range.Range. (Poly%core!ops.range.Range. x))) :pattern ((Poly%core!ops.range.Range. x)))))
(assert (forall ((Idx&. Dcr) (Idx& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&)) (= x (Poly%core!ops.range.Range. (%Poly%core!ops.range.Range. x)))) :pattern ((has_type x (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(assert (forall ((Idx&. Dcr) (Idx& Type) (_start! Poly) (_end! Poly)) (! (=> (and (has_type _start! Idx&) (has_type _end! Idx&)) (has_type (Poly%core!ops.range.Range. (core!ops.range.Range./Range _start! _end!)) (TYPE%core!ops.range.Range. Idx&. Idx&))) :pattern ((has_type (Poly%core!ops.range.Range. (core!ops.range.Range./Range _start! _end!)) (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(assert (forall ((x core!ops.range.Range.)) (! (= (core!ops.range.Range./Range/start x) (core!ops.range.Range./Range/?start x)) :pattern ((core!ops.range.Range./Range/start x)))))
(assert (forall ((Idx&. Dcr) (Idx& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&)) (has_type (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. x)) Idx&)) :pattern ((core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. x)) (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(assert (forall ((x core!ops.range.Range.)) (! (= (core!ops.range.Range./Range/end x) (core!ops.range.Range./Range/?end x)) :pattern ((core!ops.range.Range./Range/end x)))))
(assert (forall ((Idx&. Dcr) (Idx& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&)) (has_type (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. x)) Idx&)) :pattern ((core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. x)) (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(define-fun is-core!ops.range.Range./Range_ ((c core!ops.range.Range.)) Bool ((_ is core!ops.range.Range./Range) c))
(assert (forall ((x core!ops.range.Range.)) (! (=> (is-core!ops.range.Range./Range_ x) (height_lt (height (core!ops.range.Range./Range/start x)) (height (Poly%core!ops.range.Range. x)))) :pattern ((height (core!ops.range.Range./Range/start x))))))
(assert (forall ((x core!ops.range.Range.)) (! (=> (is-core!ops.range.Range./Range_ x) (height_lt (height (core!ops.range.Range./Range/end x)) (height (Poly%core!ops.range.Range. x)))) :pattern ((height (core!ops.range.Range./Range/end x))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= x (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. x))) :pattern ((Poly%vstd!std_specs.range.RangeGhostIterator. x)))))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (= x (Poly%vstd!std_specs.range.RangeGhostIterator. (%Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type) (_start! Poly) (_cur! Poly) (_end! Poly)) (! (=> (and (has_type _start! A&) (has_type _cur! A&) (has_type _end! A&)) (has_type (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator _start! _cur! _end!)) (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) :pattern ((has_type (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator _start! _cur! _end!)) (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?start x)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x)))))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (has_type (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) A&)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?cur x)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x)))))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (has_type (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) A&)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?end x)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x)))))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (has_type (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) A&)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(define-fun is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ ((c vstd!std_specs.range.RangeGhostIterator.)) Bool ((_ is vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator) c))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (=> (is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ x) (height_lt (height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x)) (height (Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (=> (is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ x) (height_lt (height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x)) (height (Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x))))))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (=> (is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ x) (height_lt (height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x)) (height (Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= x (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. x))) :pattern ((Poly%vstd!raw_ptr.MemContents. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (= x (Poly%vstd!raw_ptr.MemContents. (%Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&)) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= (vstd!raw_ptr.MemContents./Init/0 x) (vstd!raw_ptr.MemContents./Init/?0 x)) :pattern ((vstd!raw_ptr.MemContents./Init/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) T&)) :pattern ((vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(define-fun is-vstd!raw_ptr.MemContents./Init_ ((c vstd!raw_ptr.MemContents.)) Bool ((_ is vstd!raw_ptr.MemContents./Init) c))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (=> (is-vstd!raw_ptr.MemContents./Init_ x) (height_lt (height (vstd!raw_ptr.MemContents./Init/0 x)) (height (Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((height (vstd!raw_ptr.MemContents./Init/0 x))))))
(assert (forall ((x vstd!simple_pptr.PPtr.)) (! (= x (%Poly%vstd!simple_pptr.PPtr. (Poly%vstd!simple_pptr.PPtr. x))) :pattern ((Poly%vstd!simple_pptr.PPtr. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PPtr. V&. V&)) (= x (Poly%vstd!simple_pptr.PPtr. (%Poly%vstd!simple_pptr.PPtr. x)))) :pattern ((has_type x (TYPE%vstd!simple_pptr.PPtr. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Int) (_1! core!marker.PhantomData.)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!simple_pptr.PPtr. (vstd!simple_pptr.PPtr./PPtr _0! _1!)) (TYPE%vstd!simple_pptr.PPtr. V&. V&))) :pattern ((has_type (Poly%vstd!simple_pptr.PPtr. (vstd!simple_pptr.PPtr./PPtr _0! _1!)) (TYPE%vstd!simple_pptr.PPtr. V&. V&))))))
(assert (forall ((x vstd!simple_pptr.PPtr.)) (! (= (vstd!simple_pptr.PPtr./PPtr/0 x) (vstd!simple_pptr.PPtr./PPtr/?0 x)) :pattern ((vstd!simple_pptr.PPtr./PPtr/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PPtr. V&. V&)) (uInv SZ (vstd!simple_pptr.PPtr./PPtr/0 (%Poly%vstd!simple_pptr.PPtr. x)))) :pattern ((vstd!simple_pptr.PPtr./PPtr/0 (%Poly%vstd!simple_pptr.PPtr. x)) (has_type x (TYPE%vstd!simple_pptr.PPtr. V&. V&))))))
(assert (forall ((x vstd!simple_pptr.PPtr.)) (! (= (vstd!simple_pptr.PPtr./PPtr/1 x) (vstd!simple_pptr.PPtr./PPtr/?1 x)) :pattern ((vstd!simple_pptr.PPtr./PPtr/1 x)))))
(define-fun is-vstd!simple_pptr.PPtr./PPtr_ ((c vstd!simple_pptr.PPtr.)) Bool ((_ is vstd!simple_pptr.PPtr./PPtr) c))
(assert (forall ((x vstd!simple_pptr.PPtr.)) (! (=> (is-vstd!simple_pptr.PPtr./PPtr_ x) (height_lt (height (Poly%core!marker.PhantomData. (vstd!simple_pptr.PPtr./PPtr/1 x))) (height (Poly%vstd!simple_pptr.PPtr. x)))) :pattern ((height (Poly%core!marker.PhantomData. (vstd!simple_pptr.PPtr./PPtr/1 x)))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= x (%Poly%lib!slinkedlist.node.Node. (Poly%lib!slinkedlist.node.Node. x))) :pattern ((Poly%lib!slinkedlist.node.Node. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (= x (Poly%lib!slinkedlist.node.Node. (%Poly%lib!slinkedlist.node.Node. x)))) :pattern ((has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! core!option.Option.) (_next! Int) (_prev! Int)) (! (=> (and (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. T&. T&)) (iInv 32 _next!) (iInv 32 _prev!)) (has_type (Poly%lib!slinkedlist.node.Node. (lib!slinkedlist.node.Node./Node _value! _next! _prev!)) (TYPE%lib!slinkedlist.node.Node. T&. T&))) :pattern ((has_type (Poly%lib!slinkedlist.node.Node. (lib!slinkedlist.node.Node./Node _value! _next! _prev!)) (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= (lib!slinkedlist.node.Node./Node/value x) (lib!slinkedlist.node.Node./Node/?value x)) :pattern ((lib!slinkedlist.node.Node./Node/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (has_type (Poly%core!option.Option. (lib!slinkedlist.node.Node./Node/value (%Poly%lib!slinkedlist.node.Node. x))) (TYPE%core!option.Option. T&. T&))) :pattern ((lib!slinkedlist.node.Node./Node/value (%Poly%lib!slinkedlist.node.Node. x)) (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= (lib!slinkedlist.node.Node./Node/next x) (lib!slinkedlist.node.Node./Node/?next x)) :pattern ((lib!slinkedlist.node.Node./Node/next x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (iInv 32 (lib!slinkedlist.node.Node./Node/next (%Poly%lib!slinkedlist.node.Node. x)))) :pattern ((lib!slinkedlist.node.Node./Node/next (%Poly%lib!slinkedlist.node.Node. x)) (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= (lib!slinkedlist.node.Node./Node/prev x) (lib!slinkedlist.node.Node./Node/?prev x)) :pattern ((lib!slinkedlist.node.Node./Node/prev x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (iInv 32 (lib!slinkedlist.node.Node./Node/prev (%Poly%lib!slinkedlist.node.Node. x)))) :pattern ((lib!slinkedlist.node.Node./Node/prev (%Poly%lib!slinkedlist.node.Node. x)) (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(define-fun is-lib!slinkedlist.node.Node./Node_ ((c lib!slinkedlist.node.Node.)) Bool ((_ is lib!slinkedlist.node.Node./Node) c))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (=> (is-lib!slinkedlist.node.Node./Node_ x) (height_lt (height (Poly%core!option.Option. (lib!slinkedlist.node.Node./Node/value x))) (height (Poly%lib!slinkedlist.node.Node. x)))) :pattern ((height (Poly%core!option.Option. (lib!slinkedlist.node.Node./Node/value x)))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= x (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x))) :pattern ((Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (= x (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (_ar! %%Function%%) (_spec_seq! Poly) (_value_list! vstd!seq.Seq<i32.>.) (_value_list_head! Int) (_value_list_tail! Int) (_value_list_len! Int) (_free_list! vstd!seq.Seq<i32.>.) (_free_list_head! Int) (_free_list_tail! Int) (_free_list_len! Int) (_size! Int) (_arr_seq! Poly)) (! (=> (and (has_type (Poly%array%. _ar!) (ARRAY $ (TYPE%lib!slinkedlist.node.Node. T&. T&) N&. N&)) (has_type _spec_seq! (TYPE%vstd!seq.Seq. T&. T&)) (iInv 32 _value_list_head!) (iInv 32 _value_list_tail!) (uInv SZ _value_list_len!) (iInv 32 _free_list_head!) (iInv 32 _free_list_tail!) (uInv SZ _free_list_len!) (uInv SZ _size!) (has_type _arr_seq! (TYPE%vstd!seq.Seq. $ (TYPE%lib!slinkedlist.node.Node. T&. T&)))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList _ar! _spec_seq! _value_list! _value_list_head! _value_list_tail! _value_list_len! _free_list! _free_list_head! _free_list_tail! _free_list_len! _size! _arr_seq!)) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) :pattern ((has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList _ar! _spec_seq! _value_list! _value_list_head! _value_list_tail! _value_list_len! _free_list! _free_list_head! _free_list_tail! _free_list_len! _size! _arr_seq!)) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?ar x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (Poly%array%. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x))) (ARRAY $ (TYPE%lib!slinkedlist.node.Node. T&. T&) N&. N&))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?spec_seq x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list x)))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_head x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_tail x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_len x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list x)))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_head x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_tail x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_len x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?size x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?arr_seq x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (TYPE%vstd!seq.Seq. $ (TYPE%lib!slinkedlist.node.Node. T&. T&)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(define-fun is-lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList_ ((c lib!slinkedlist.spec_impl_u.StaticLinkedList.)) Bool ((_ is lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList) c))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (=> (is-lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList_ x) (height_lt (height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x)) (height (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (=> (is-lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList_ x) (height_lt (height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x)) (height (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x))))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= x (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. x))) :pattern ((Poly%lib!process_manager.container.Container. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (= x (Poly%lib!process_manager.container.Container. (%Poly%lib!process_manager.container.Container. x)))) :pattern ((has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((_owned_procs! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_parent! core!option.Option.) (_parent_rev_ptr! core!option.Option.) (_children! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_owned_endpoints! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_mem_quota! Int) (_mem_used! Int) (_owned_cpus! lib!array_set.ArraySet.) (_scheduler! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_depth! Int) (_owned_threads! vstd!set.Set<usize.>.) (_uppertree_seq! vstd!seq.Seq<usize.>.) (_subtree_set! vstd!set.Set<usize.>.) (_can_have_children! Bool)) (! (=> (and (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _owned_procs!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10))) (has_type (Poly%core!option.Option. _parent!) (TYPE%core!option.Option. $ (UINT SZ))) (has_type (Poly%core!option.Option. _parent_rev_ptr!) (TYPE%core!option.Option. $ (SINT 32))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _children!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _owned_endpoints!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10))) (uInv SZ _mem_quota!) (uInv SZ _mem_used!) (has_type (Poly%lib!array_set.ArraySet. _owned_cpus!) (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _scheduler!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10))) (uInv SZ _depth!)) (has_type (Poly%lib!process_manager.container.Container. (lib!process_manager.container.Container./Container _owned_procs! _parent! _parent_rev_ptr! _children! _owned_endpoints! _mem_quota! _mem_used! _owned_cpus! _scheduler! _depth! _owned_threads! _uppertree_seq! _subtree_set! _can_have_children!)) TYPE%lib!process_manager.container.Container.)) :pattern ((has_type (Poly%lib!process_manager.container.Container. (lib!process_manager.container.Container./Container _owned_procs! _parent! _parent_rev_ptr! _children! _owned_endpoints! _mem_quota! _mem_used! _owned_cpus! _scheduler! _depth! _owned_threads! _uppertree_seq! _subtree_set! _can_have_children!)) TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/owned_procs x) (lib!process_manager.container.Container./Container/?owned_procs x)) :pattern ((lib!process_manager.container.Container./Container/owned_procs x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)))) :pattern ((lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/parent x) (lib!process_manager.container.Container./Container/?parent x)) :pattern ((lib!process_manager.container.Container./Container/parent x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/parent_rev_ptr x) (lib!process_manager.container.Container./Container/?parent_rev_ptr x)) :pattern ((lib!process_manager.container.Container./Container/parent_rev_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. x))) (TYPE%core!option.Option. $ (SINT 32)))) :pattern ((lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/children x) (lib!process_manager.container.Container./Container/?children x)) :pattern ((lib!process_manager.container.Container./Container/children x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)))) :pattern ((lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/owned_endpoints x) (lib!process_manager.container.Container./Container/?owned_endpoints x)) :pattern ((lib!process_manager.container.Container./Container/owned_endpoints x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)))) :pattern ((lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/mem_quota x) (lib!process_manager.container.Container./Container/?mem_quota x)) :pattern ((lib!process_manager.container.Container./Container/mem_quota x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (uInv SZ (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. x)))) :pattern ((lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/mem_used x) (lib!process_manager.container.Container./Container/?mem_used x)) :pattern ((lib!process_manager.container.Container./Container/mem_used x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (uInv SZ (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. x)))) :pattern ((lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/owned_cpus x) (lib!process_manager.container.Container./Container/?owned_cpus x)) :pattern ((lib!process_manager.container.Container./Container/owned_cpus x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. x))) (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)))) :pattern ((lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/scheduler x) (lib!process_manager.container.Container./Container/?scheduler x)) :pattern ((lib!process_manager.container.Container./Container/scheduler x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)))) :pattern ((lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/depth x) (lib!process_manager.container.Container./Container/?depth x)) :pattern ((lib!process_manager.container.Container./Container/depth x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (uInv SZ (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. x)))) :pattern ((lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/owned_threads x) (lib!process_manager.container.Container./Container/?owned_threads x)) :pattern ((lib!process_manager.container.Container./Container/owned_threads x)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/uppertree_seq x) (lib!process_manager.container.Container./Container/?uppertree_seq x)) :pattern ((lib!process_manager.container.Container./Container/uppertree_seq x)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/subtree_set x) (lib!process_manager.container.Container./Container/?subtree_set x)) :pattern ((lib!process_manager.container.Container./Container/subtree_set x)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/can_have_children x) (lib!process_manager.container.Container./Container/?can_have_children x)) :pattern ((lib!process_manager.container.Container./Container/can_have_children x)))))
(assert (forall ((x lib!process_manager.container_tree_spec_impl.ContainerTree.)) (! (= x (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. x))) :pattern ((Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (= x (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. x)))) :pattern ((has_type x TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)))))
(assert (forall ((_root_container! Int) (_container_perms! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)) (! (=> (uInv SZ _root_container!) (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree _root_container! _container_perms!)) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)) :pattern ((has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree _root_container! _container_perms!)) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)))))
(assert (forall ((x lib!process_manager.container_tree_spec_impl.ContainerTree.)) (! (= (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container x) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/?root_container x)) :pattern ((lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (uInv SZ (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. x)))) :pattern ((lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. x)) (has_type x TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)))))
(assert (forall ((x lib!process_manager.container_tree_spec_impl.ContainerTree.)) (! (= (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms x) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/?container_perms x)) :pattern ((lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms x)))))
(assert (forall ((x lib!process_manager.process.Process.)) (! (= x (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. x))) :pattern ((Poly%lib!process_manager.process.Process. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.process.Process.) (= x (Poly%lib!process_manager.process.Process. (%Poly%lib!process_manager.process.Process. x)))) :pattern ((has_type x TYPE%lib!process_manager.process.Process.)))))
(assert (forall ((_owning_container! Int) (_rev_ptr! Int) (_pcid! Int) (_ioid! core!option.Option.) (_owned_threads! lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (=> (and (uInv SZ _owning_container!) (iInv 32 _rev_ptr!) (uInv SZ _pcid!) (has_type (Poly%core!option.Option. _ioid!) (TYPE%core!option.Option. $ (UINT SZ))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _owned_threads!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 128)))) (has_type (Poly%lib!process_manager.process.Process. (lib!process_manager.process.Process./Process _owning_container! _rev_ptr! _pcid! _ioid! _owned_threads!)) TYPE%lib!process_manager.process.Process.)) :pattern ((has_type (Poly%lib!process_manager.process.Process. (lib!process_manager.process.Process./Process _owning_container! _rev_ptr! _pcid! _ioid! _owned_threads!)) TYPE%lib!process_manager.process.Process.)))))
(assert (forall ((x lib!process_manager.process.Process.)) (! (= (lib!process_manager.process.Process./Process/owning_container x) (lib!process_manager.process.Process./Process/?owning_container x)) :pattern ((lib!process_manager.process.Process./Process/owning_container x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.process.Process.) (uInv SZ (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. x)))) :pattern ((lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. x)) (has_type x TYPE%lib!process_manager.process.Process.)))))
(assert (forall ((x lib!process_manager.process.Process.)) (! (= (lib!process_manager.process.Process./Process/rev_ptr x) (lib!process_manager.process.Process./Process/?rev_ptr x)) :pattern ((lib!process_manager.process.Process./Process/rev_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.process.Process.) (iInv 32 (lib!process_manager.process.Process./Process/rev_ptr (%Poly%lib!process_manager.process.Process. x)))) :pattern ((lib!process_manager.process.Process./Process/rev_ptr (%Poly%lib!process_manager.process.Process. x)) (has_type x TYPE%lib!process_manager.process.Process.)))))
(assert (forall ((x lib!process_manager.process.Process.)) (! (= (lib!process_manager.process.Process./Process/pcid x) (lib!process_manager.process.Process./Process/?pcid x)) :pattern ((lib!process_manager.process.Process./Process/pcid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.process.Process.) (uInv SZ (lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. x)))) :pattern ((lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. x)) (has_type x TYPE%lib!process_manager.process.Process.)))))
(assert (forall ((x lib!process_manager.process.Process.)) (! (= (lib!process_manager.process.Process./Process/ioid x) (lib!process_manager.process.Process./Process/?ioid x)) :pattern ((lib!process_manager.process.Process./Process/ioid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.process.Process.) (has_type (Poly%core!option.Option. (lib!process_manager.process.Process./Process/ioid (%Poly%lib!process_manager.process.Process. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.process.Process./Process/ioid (%Poly%lib!process_manager.process.Process. x)) (has_type x TYPE%lib!process_manager.process.Process.)))))
(assert (forall ((x lib!process_manager.process.Process.)) (! (= (lib!process_manager.process.Process./Process/owned_threads x) (lib!process_manager.process.Process./Process/?owned_threads x)) :pattern ((lib!process_manager.process.Process./Process/owned_threads x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.process.Process.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 128)))) :pattern ((lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. x)) (has_type x TYPE%lib!process_manager.process.Process.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= x (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. x))) :pattern ((Poly%lib!process_manager.thread.Thread. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (= x (Poly%lib!process_manager.thread.Thread. (%Poly%lib!process_manager.thread.Thread. x)))) :pattern ((has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((_owning_container! Int) (_owning_proc! Int) (_state! lib!define.ThreadState.) (_proc_rev_ptr! Int) (_scheduler_rev_ptr! core!option.Option.) (_blocking_endpoint_ptr! core!option.Option.) (_endpoint_rev_ptr! core!option.Option.) (_running_cpu! core!option.Option.) (_endpoint_descriptors! lib!array.Array.) (_ipc_payload! lib!process_manager.thread.IPCPayLoad.) (_error_code! core!option.Option.) (_trap_frame! lib!trap.TrapFrameOption.)) (! (=> (and (uInv SZ _owning_container!) (uInv SZ _owning_proc!) (iInv 32 _proc_rev_ptr!) (has_type (Poly%core!option.Option. _scheduler_rev_ptr!) (TYPE%core!option.Option. $ (SINT 32))) (has_type (Poly%core!option.Option. _blocking_endpoint_ptr!) (TYPE%core!option.Option. $ (UINT SZ))) (has_type (Poly%core!option.Option. _endpoint_rev_ptr!) (TYPE%core!option.Option. $ (SINT 32))) (has_type (Poly%core!option.Option. _running_cpu!) (TYPE%core!option.Option. $ (UINT SZ))) (has_type (Poly%lib!array.Array. _endpoint_descriptors!) (TYPE%lib!array.Array. $ (TYPE%core!option.Option. $ (UINT SZ)) $ (CONST_INT 128))) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. _ipc_payload!) TYPE%lib!process_manager.thread.IPCPayLoad.) (has_type (Poly%core!option.Option. _error_code!) (TYPE%core!option.Option. $ TYPE%lib!define.RetValueType.)) (has_type (Poly%lib!trap.TrapFrameOption. _trap_frame!) TYPE%lib!trap.TrapFrameOption.)) (has_type (Poly%lib!process_manager.thread.Thread. (lib!process_manager.thread.Thread./Thread _owning_container! _owning_proc! _state! _proc_rev_ptr! _scheduler_rev_ptr! _blocking_endpoint_ptr! _endpoint_rev_ptr! _running_cpu! _endpoint_descriptors! _ipc_payload! _error_code! _trap_frame!)) TYPE%lib!process_manager.thread.Thread.)) :pattern ((has_type (Poly%lib!process_manager.thread.Thread. (lib!process_manager.thread.Thread./Thread _owning_container! _owning_proc! _state! _proc_rev_ptr! _scheduler_rev_ptr! _blocking_endpoint_ptr! _endpoint_rev_ptr! _running_cpu! _endpoint_descriptors! _ipc_payload! _error_code! _trap_frame!)) TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/owning_container x) (lib!process_manager.thread.Thread./Thread/?owning_container x)) :pattern ((lib!process_manager.thread.Thread./Thread/owning_container x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (uInv SZ (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. x)))) :pattern ((lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/owning_proc x) (lib!process_manager.thread.Thread./Thread/?owning_proc x)) :pattern ((lib!process_manager.thread.Thread./Thread/owning_proc x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (uInv SZ (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. x)))) :pattern ((lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/state x) (lib!process_manager.thread.Thread./Thread/?state x)) :pattern ((lib!process_manager.thread.Thread./Thread/state x)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/proc_rev_ptr x) (lib!process_manager.thread.Thread./Thread/?proc_rev_ptr x)) :pattern ((lib!process_manager.thread.Thread./Thread/proc_rev_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (iInv 32 (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. x)))) :pattern ((lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr x) (lib!process_manager.thread.Thread./Thread/?scheduler_rev_ptr x)) :pattern ((lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%core!option.Option. $ (SINT 32)))) :pattern ((lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr x) (lib!process_manager.thread.Thread./Thread/?blocking_endpoint_ptr x)) :pattern ((lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr x) (lib!process_manager.thread.Thread./Thread/?endpoint_rev_ptr x)) :pattern ((lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%core!option.Option. $ (SINT 32)))) :pattern ((lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/running_cpu x) (lib!process_manager.thread.Thread./Thread/?running_cpu x)) :pattern ((lib!process_manager.thread.Thread./Thread/running_cpu x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/endpoint_descriptors x) (lib!process_manager.thread.Thread./Thread/?endpoint_descriptors x)) :pattern ((lib!process_manager.thread.Thread./Thread/endpoint_descriptors x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%lib!array.Array. $ (TYPE%core!option.Option. $ (UINT SZ)) $ (CONST_INT 128)))) :pattern ((lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/ipc_payload x) (lib!process_manager.thread.Thread./Thread/?ipc_payload x)) :pattern ((lib!process_manager.thread.Thread./Thread/ipc_payload x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. x))) TYPE%lib!process_manager.thread.IPCPayLoad.)) :pattern ((lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/error_code x) (lib!process_manager.thread.Thread./Thread/?error_code x)) :pattern ((lib!process_manager.thread.Thread./Thread/error_code x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%core!option.Option. $ TYPE%lib!define.RetValueType.))) :pattern ((lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/trap_frame x) (lib!process_manager.thread.Thread./Thread/?trap_frame x)) :pattern ((lib!process_manager.thread.Thread./Thread/trap_frame x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%lib!trap.TrapFrameOption. (lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. x))) TYPE%lib!trap.TrapFrameOption.)) :pattern ((lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= x (%Poly%lib!process_manager.thread.IPCPayLoad. (Poly%lib!process_manager.thread.IPCPayLoad. x))) :pattern ((Poly%lib!process_manager.thread.IPCPayLoad. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (= x (Poly%lib!process_manager.thread.IPCPayLoad. (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((_va! Int) (_len! Int)) (! (=> (and (uInv SZ _va!) (uInv SZ _len!)) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Message _va! _len!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) :pattern ((has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Message _va! _len!)) TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Message/va x) (lib!process_manager.thread.IPCPayLoad./Message/?va x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Message/va x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv SZ (lib!process_manager.thread.IPCPayLoad./Message/va (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Message/va (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Message/len x) (lib!process_manager.thread.IPCPayLoad./Message/?len x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Message/len x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv SZ (lib!process_manager.thread.IPCPayLoad./Message/len (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Message/len (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((_va_range! lib!va_range.VaRange4K.)) (! (=> (has_type (Poly%lib!va_range.VaRange4K. _va_range!) TYPE%lib!va_range.VaRange4K.) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Pages _va_range!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) :pattern ((has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Pages _va_range!)) TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Pages/va_range x) (lib!process_manager.thread.IPCPayLoad./Pages/?va_range x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Pages/va_range x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (has_type (Poly%lib!va_range.VaRange4K. (lib!process_manager.thread.IPCPayLoad./Pages/va_range (%Poly%lib!process_manager.thread.IPCPayLoad. x))) TYPE%lib!va_range.VaRange4K.)) :pattern ((lib!process_manager.thread.IPCPayLoad./Pages/va_range (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((_endpoint_index! Int)) (! (=> (uInv SZ _endpoint_index!) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Endpoint _endpoint_index!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) :pattern ((has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Endpoint _endpoint_index!)) TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index x) (lib!process_manager.thread.IPCPayLoad./Endpoint/?endpoint_index x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv SZ (lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((_bus! Int) (_dev! Int) (_fun! Int)) (! (=> (and (uInv 8 _bus!) (uInv 8 _dev!) (uInv 8 _fun!)) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Pci _bus! _dev! _fun!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) :pattern ((has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Pci _bus! _dev! _fun!)) TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Pci/bus x) (lib!process_manager.thread.IPCPayLoad./Pci/?bus x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/bus x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv 8 (lib!process_manager.thread.IPCPayLoad./Pci/bus (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/bus (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Pci/dev x) (lib!process_manager.thread.IPCPayLoad./Pci/?dev x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/dev x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv 8 (lib!process_manager.thread.IPCPayLoad./Pci/dev (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/dev (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Pci/fun x) (lib!process_manager.thread.IPCPayLoad./Pci/?fun x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/fun x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv 8 (lib!process_manager.thread.IPCPayLoad./Pci/fun (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/fun (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)))))
(assert (has_type (Poly%lib!process_manager.thread.IPCPayLoad. lib!process_manager.thread.IPCPayLoad./Empty) TYPE%lib!process_manager.thread.IPCPayLoad.))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= x (%Poly%lib!process_manager.endpoint.Endpoint. (Poly%lib!process_manager.endpoint.Endpoint. x))) :pattern ((Poly%lib!process_manager.endpoint.Endpoint. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.endpoint.Endpoint.) (= x (Poly%lib!process_manager.endpoint.Endpoint. (%Poly%lib!process_manager.endpoint.Endpoint. x)))) :pattern ((has_type x TYPE%lib!process_manager.endpoint.Endpoint.)))))
(assert (forall ((_queue! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_queue_state! lib!define.EndpointState.) (_rf_counter! Int) (_owning_threads! vstd!set.Set<usize.>.) (_owning_container! Int) (_container_rev_ptr! Int)) (! (=> (and (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _queue!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 128))) (uInv SZ _rf_counter!) (uInv SZ _owning_container!) (iInv 32 _container_rev_ptr!)) (has_type (Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.endpoint.Endpoint./Endpoint _queue! _queue_state! _rf_counter! _owning_threads! _owning_container! _container_rev_ptr!)) TYPE%lib!process_manager.endpoint.Endpoint.)) :pattern ((has_type (Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.endpoint.Endpoint./Endpoint _queue! _queue_state! _rf_counter! _owning_threads! _owning_container! _container_rev_ptr!)) TYPE%lib!process_manager.endpoint.Endpoint.)))))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue x) (lib!process_manager.endpoint.Endpoint./Endpoint/?queue x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/queue x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.endpoint.Endpoint.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 128)))) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. x)) (has_type x TYPE%lib!process_manager.endpoint.Endpoint.)))))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state x) (lib!process_manager.endpoint.Endpoint./Endpoint/?queue_state x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/queue_state x)))))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter x) (lib!process_manager.endpoint.Endpoint./Endpoint/?rf_counter x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.endpoint.Endpoint.) (uInv SZ (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. x)))) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. x)) (has_type x TYPE%lib!process_manager.endpoint.Endpoint.)))))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads x) (lib!process_manager.endpoint.Endpoint./Endpoint/?owning_threads x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads x)))))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container x) (lib!process_manager.endpoint.Endpoint./Endpoint/?owning_container x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/owning_container x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.endpoint.Endpoint.) (uInv SZ (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. x)))) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. x)) (has_type x TYPE%lib!process_manager.endpoint.Endpoint.)))))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr x) (lib!process_manager.endpoint.Endpoint./Endpoint/?container_rev_ptr x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.endpoint.Endpoint.) (iInv 32 (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. x)))) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. x)) (has_type x TYPE%lib!process_manager.endpoint.Endpoint.)))))
(assert (forall ((x lib!process_manager.spec_impl.ProcessManager.)) (! (= x (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. x))) :pattern ((Poly%lib!process_manager.spec_impl.ProcessManager. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.spec_impl.ProcessManager.) (= x (Poly%lib!process_manager.spec_impl.ProcessManager. (%Poly%lib!process_manager.spec_impl.ProcessManager. x)))) :pattern ((has_type x TYPE%lib!process_manager.spec_impl.ProcessManager.)))))
(assert (forall ((_container_tree! lib!process_manager.container_tree_spec_impl.ContainerTree.) (_process_perms! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>.) (_thread_perms! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>.) (_endpoint_perms! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>.) (_cpu_list! lib!array.Array.)) (! (=> (and (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. _container_tree!) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (has_type (Poly%lib!array.Array. _cpu_list!) (TYPE%lib!array.Array. $ TYPE%lib!process_manager.cpu.Cpu. $ (CONST_INT 32)))) (has_type (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!process_manager.spec_impl.ProcessManager./ProcessManager _container_tree! _process_perms! _thread_perms! _endpoint_perms! _cpu_list!)) TYPE%lib!process_manager.spec_impl.ProcessManager.)) :pattern ((has_type (Poly%lib!process_manager.spec_impl.ProcessManager. (lib!process_manager.spec_impl.ProcessManager./ProcessManager _container_tree! _process_perms! _thread_perms! _endpoint_perms! _cpu_list!)) TYPE%lib!process_manager.spec_impl.ProcessManager.)))))
(assert (forall ((x lib!process_manager.spec_impl.ProcessManager.)) (! (= (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree x) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?container_tree x)) :pattern ((lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. x))) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)) :pattern ((lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. x)) (has_type x TYPE%lib!process_manager.spec_impl.ProcessManager.)))))
(assert (forall ((x lib!process_manager.spec_impl.ProcessManager.)) (! (= (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms x) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?process_perms x)) :pattern ((lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms x)))))
(assert (forall ((x lib!process_manager.spec_impl.ProcessManager.)) (! (= (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms x) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?thread_perms x)) :pattern ((lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms x)))))
(assert (forall ((x lib!process_manager.spec_impl.ProcessManager.)) (! (= (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms x) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?endpoint_perms x)) :pattern ((lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms x)))))
(assert (forall ((x lib!process_manager.spec_impl.ProcessManager.)) (! (= (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list x) (lib!process_manager.spec_impl.ProcessManager./ProcessManager/?cpu_list x)) :pattern ((lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. x))) (TYPE%lib!array.Array. $ TYPE%lib!process_manager.cpu.Cpu. $ (CONST_INT 32)))) :pattern ((lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. x)) (has_type x TYPE%lib!process_manager.spec_impl.ProcessManager.)))))
(assert (forall ((x lib!process_manager.cpu.Cpu.)) (! (= x (%Poly%lib!process_manager.cpu.Cpu. (Poly%lib!process_manager.cpu.Cpu. x))) :pattern ((Poly%lib!process_manager.cpu.Cpu. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.cpu.Cpu.) (= x (Poly%lib!process_manager.cpu.Cpu. (%Poly%lib!process_manager.cpu.Cpu. x)))) :pattern ((has_type x TYPE%lib!process_manager.cpu.Cpu.)))))
(assert (forall ((_owning_container! Int) (_active! Bool) (_current_thread! core!option.Option.)) (! (=> (and (uInv SZ _owning_container!) (has_type (Poly%core!option.Option. _current_thread!) (TYPE%core!option.Option. $ (UINT SZ)))) (has_type (Poly%lib!process_manager.cpu.Cpu. (lib!process_manager.cpu.Cpu./Cpu _owning_container! _active! _current_thread!)) TYPE%lib!process_manager.cpu.Cpu.)) :pattern ((has_type (Poly%lib!process_manager.cpu.Cpu. (lib!process_manager.cpu.Cpu./Cpu _owning_container! _active! _current_thread!)) TYPE%lib!process_manager.cpu.Cpu.)))))
(assert (forall ((x lib!process_manager.cpu.Cpu.)) (! (= (lib!process_manager.cpu.Cpu./Cpu/owning_container x) (lib!process_manager.cpu.Cpu./Cpu/?owning_container x)) :pattern ((lib!process_manager.cpu.Cpu./Cpu/owning_container x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.cpu.Cpu.) (uInv SZ (lib!process_manager.cpu.Cpu./Cpu/owning_container (%Poly%lib!process_manager.cpu.Cpu. x)))) :pattern ((lib!process_manager.cpu.Cpu./Cpu/owning_container (%Poly%lib!process_manager.cpu.Cpu. x)) (has_type x TYPE%lib!process_manager.cpu.Cpu.)))))
(assert (forall ((x lib!process_manager.cpu.Cpu.)) (! (= (lib!process_manager.cpu.Cpu./Cpu/active x) (lib!process_manager.cpu.Cpu./Cpu/?active x)) :pattern ((lib!process_manager.cpu.Cpu./Cpu/active x)))))
(assert (forall ((x lib!process_manager.cpu.Cpu.)) (! (= (lib!process_manager.cpu.Cpu./Cpu/current_thread x) (lib!process_manager.cpu.Cpu./Cpu/?current_thread x)) :pattern ((lib!process_manager.cpu.Cpu./Cpu/current_thread x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.cpu.Cpu.) (has_type (Poly%core!option.Option. (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. x)) (has_type x TYPE%lib!process_manager.cpu.Cpu.)))))
(assert (forall ((x lib!define.ThreadState.)) (! (= x (%Poly%lib!define.ThreadState. (Poly%lib!define.ThreadState. x))) :pattern ((Poly%lib!define.ThreadState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.ThreadState.) (= x (Poly%lib!define.ThreadState. (%Poly%lib!define.ThreadState. x)))) :pattern ((has_type x TYPE%lib!define.ThreadState.)))))
(assert (forall ((x lib!define.ThreadState.)) (! (has_type (Poly%lib!define.ThreadState. x) TYPE%lib!define.ThreadState.) :pattern ((has_type (Poly%lib!define.ThreadState. x) TYPE%lib!define.ThreadState.)))))
(assert (forall ((x lib!define.EndpointState.)) (! (= x (%Poly%lib!define.EndpointState. (Poly%lib!define.EndpointState. x))) :pattern ((Poly%lib!define.EndpointState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.EndpointState.) (= x (Poly%lib!define.EndpointState. (%Poly%lib!define.EndpointState. x)))) :pattern ((has_type x TYPE%lib!define.EndpointState.)))))
(assert (forall ((x lib!define.EndpointState.)) (! (has_type (Poly%lib!define.EndpointState. x) TYPE%lib!define.EndpointState.) :pattern ((has_type (Poly%lib!define.EndpointState. x) TYPE%lib!define.EndpointState.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= x (%Poly%lib!define.RetValueType. (Poly%lib!define.RetValueType. x))) :pattern ((Poly%lib!define.RetValueType. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (= x (Poly%lib!define.RetValueType. (%Poly%lib!define.RetValueType. x)))) :pattern ((has_type x TYPE%lib!define.RetValueType.)))))
(assert (forall ((_value! Int)) (! (=> (uInv SZ _value!) (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessUsize _value!)) TYPE%lib!define.RetValueType.)) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessUsize _value!)) TYPE%lib!define.RetValueType.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessUsize/value x) (lib!define.RetValueType./SuccessUsize/?value x)) :pattern ((lib!define.RetValueType./SuccessUsize/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessUsize/value (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessUsize/value (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)))))
(assert (forall ((_value! vstd!seq.Seq<usize.>.)) (! (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessSeqUsize _value!)) TYPE%lib!define.RetValueType.) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessSeqUsize _value!)) TYPE%lib!define.RetValueType.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessSeqUsize/value x) (lib!define.RetValueType./SuccessSeqUsize/?value x)) :pattern ((lib!define.RetValueType./SuccessSeqUsize/value x)))))
(assert (forall ((_value1! Int) (_value2! Int)) (! (=> (and (uInv SZ _value1!) (uInv SZ _value2!)) (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessPairUsize _value1! _value2!)) TYPE%lib!define.RetValueType.)) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessPairUsize _value1! _value2!)) TYPE%lib!define.RetValueType.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessPairUsize/value1 x) (lib!define.RetValueType./SuccessPairUsize/?value1 x)) :pattern ((lib!define.RetValueType./SuccessPairUsize/value1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessPairUsize/value1 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessPairUsize/value1 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessPairUsize/value2 x) (lib!define.RetValueType./SuccessPairUsize/?value2 x)) :pattern ((lib!define.RetValueType./SuccessPairUsize/value2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessPairUsize/value2 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessPairUsize/value2 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)))))
(assert (forall ((_value1! Int) (_value2! Int) (_value3! Int)) (! (=> (and (uInv SZ _value1!) (uInv SZ _value2!) (uInv SZ _value3!)) (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessThreeUsize _value1! _value2! _value3!)) TYPE%lib!define.RetValueType.)) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessThreeUsize _value1! _value2! _value3!)) TYPE%lib!define.RetValueType.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessThreeUsize/value1 x) (lib!define.RetValueType./SuccessThreeUsize/?value1 x)) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessThreeUsize/value1 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value1 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessThreeUsize/value2 x) (lib!define.RetValueType./SuccessThreeUsize/?value2 x)) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessThreeUsize/value2 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value2 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)))))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessThreeUsize/value3 x) (lib!define.RetValueType./SuccessThreeUsize/?value3 x)) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value3 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessThreeUsize/value3 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value3 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)))))
(assert (has_type (Poly%lib!define.RetValueType. lib!define.RetValueType./CpuIdle) TYPE%lib!define.RetValueType.))
(assert (has_type (Poly%lib!define.RetValueType. lib!define.RetValueType./Error) TYPE%lib!define.RetValueType.))
(assert (has_type (Poly%lib!define.RetValueType. lib!define.RetValueType./Else) TYPE%lib!define.RetValueType.))
(assert (forall ((x lib!trap.TrapFrameOption.)) (! (= x (%Poly%lib!trap.TrapFrameOption. (Poly%lib!trap.TrapFrameOption. x))) :pattern ((Poly%lib!trap.TrapFrameOption. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.TrapFrameOption.) (= x (Poly%lib!trap.TrapFrameOption. (%Poly%lib!trap.TrapFrameOption. x)))) :pattern ((has_type x TYPE%lib!trap.TrapFrameOption.)))))
(assert (forall ((_reg! lib!trap.Registers.) (_exists! Bool)) (! (=> (has_type (Poly%lib!trap.Registers. _reg!) TYPE%lib!trap.Registers.) (has_type (Poly%lib!trap.TrapFrameOption. (lib!trap.TrapFrameOption./TrapFrameOption _reg! _exists!)) TYPE%lib!trap.TrapFrameOption.)) :pattern ((has_type (Poly%lib!trap.TrapFrameOption. (lib!trap.TrapFrameOption./TrapFrameOption _reg! _exists!)) TYPE%lib!trap.TrapFrameOption.)))))
(assert (forall ((x lib!trap.TrapFrameOption.)) (! (= (lib!trap.TrapFrameOption./TrapFrameOption/reg x) (lib!trap.TrapFrameOption./TrapFrameOption/?reg x)) :pattern ((lib!trap.TrapFrameOption./TrapFrameOption/reg x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.TrapFrameOption.) (has_type (Poly%lib!trap.Registers. (lib!trap.TrapFrameOption./TrapFrameOption/reg (%Poly%lib!trap.TrapFrameOption. x))) TYPE%lib!trap.Registers.)) :pattern ((lib!trap.TrapFrameOption./TrapFrameOption/reg (%Poly%lib!trap.TrapFrameOption. x)) (has_type x TYPE%lib!trap.TrapFrameOption.)))))
(assert (forall ((x lib!trap.TrapFrameOption.)) (! (= (lib!trap.TrapFrameOption./TrapFrameOption/exists x) (lib!trap.TrapFrameOption./TrapFrameOption/?exists x)) :pattern ((lib!trap.TrapFrameOption./TrapFrameOption/exists x)))))
(assert (forall ((x lib!trap.Registers.)) (! (= x (%Poly%lib!trap.Registers. (Poly%lib!trap.Registers. x))) :pattern ((Poly%lib!trap.Registers. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (= x (Poly%lib!trap.Registers. (%Poly%lib!trap.Registers. x)))) :pattern ((has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((_r15! Int) (_r14! Int) (_r13! Int) (_r12! Int) (_rbp! Int) (_rbx! Int) (_r11! Int) (_r10! Int) (_r9! Int) (_r8! Int) (_rcx! Int) (_rdx! Int) (_rsi! Int) (_rdi! Int) (_rax! Int) (_error_code! Int) (_rip! Int) (_cs! Int) (_flags! Int) (_rsp! Int) (_ss! Int)) (! (=> (and (uInv 64 _r15!) (uInv 64 _r14!) (uInv 64 _r13!) (uInv 64 _r12!) (uInv 64 _rbp!) (uInv 64 _rbx!) (uInv 64 _r11!) (uInv 64 _r10!) (uInv 64 _r9!) (uInv 64 _r8!) (uInv 64 _rcx!) (uInv 64 _rdx!) (uInv 64 _rsi!) (uInv 64 _rdi!) (uInv 64 _rax!) (uInv 64 _error_code!) (uInv 64 _rip!) (uInv 64 _cs!) (uInv 64 _flags!) (uInv 64 _rsp!) (uInv 64 _ss!)) (has_type (Poly%lib!trap.Registers. (lib!trap.Registers./Registers _r15! _r14! _r13! _r12! _rbp! _rbx! _r11! _r10! _r9! _r8! _rcx! _rdx! _rsi! _rdi! _rax! _error_code! _rip! _cs! _flags! _rsp! _ss!)) TYPE%lib!trap.Registers.)) :pattern ((has_type (Poly%lib!trap.Registers. (lib!trap.Registers./Registers _r15! _r14! _r13! _r12! _rbp! _rbx! _r11! _r10! _r9! _r8! _rcx! _rdx! _rsi! _rdi! _rax! _error_code! _rip! _cs! _flags! _rsp! _ss!)) TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r15 x) (lib!trap.Registers./Registers/?r15 x)) :pattern ((lib!trap.Registers./Registers/r15 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r15 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r15 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r14 x) (lib!trap.Registers./Registers/?r14 x)) :pattern ((lib!trap.Registers./Registers/r14 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r14 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r14 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r13 x) (lib!trap.Registers./Registers/?r13 x)) :pattern ((lib!trap.Registers./Registers/r13 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r13 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r13 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r12 x) (lib!trap.Registers./Registers/?r12 x)) :pattern ((lib!trap.Registers./Registers/r12 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r12 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r12 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rbp x) (lib!trap.Registers./Registers/?rbp x)) :pattern ((lib!trap.Registers./Registers/rbp x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rbp (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rbp (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rbx x) (lib!trap.Registers./Registers/?rbx x)) :pattern ((lib!trap.Registers./Registers/rbx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rbx (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rbx (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r11 x) (lib!trap.Registers./Registers/?r11 x)) :pattern ((lib!trap.Registers./Registers/r11 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r11 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r11 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r10 x) (lib!trap.Registers./Registers/?r10 x)) :pattern ((lib!trap.Registers./Registers/r10 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r10 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r10 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r9 x) (lib!trap.Registers./Registers/?r9 x)) :pattern ((lib!trap.Registers./Registers/r9 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r9 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r9 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r8 x) (lib!trap.Registers./Registers/?r8 x)) :pattern ((lib!trap.Registers./Registers/r8 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r8 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r8 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rcx x) (lib!trap.Registers./Registers/?rcx x)) :pattern ((lib!trap.Registers./Registers/rcx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rcx (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rcx (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rdx x) (lib!trap.Registers./Registers/?rdx x)) :pattern ((lib!trap.Registers./Registers/rdx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rdx (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rdx (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rsi x) (lib!trap.Registers./Registers/?rsi x)) :pattern ((lib!trap.Registers./Registers/rsi x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rsi (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rsi (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rdi x) (lib!trap.Registers./Registers/?rdi x)) :pattern ((lib!trap.Registers./Registers/rdi x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rdi (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rdi (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rax x) (lib!trap.Registers./Registers/?rax x)) :pattern ((lib!trap.Registers./Registers/rax x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rax (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rax (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/error_code x) (lib!trap.Registers./Registers/?error_code x)) :pattern ((lib!trap.Registers./Registers/error_code x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/error_code (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/error_code (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rip x) (lib!trap.Registers./Registers/?rip x)) :pattern ((lib!trap.Registers./Registers/rip x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rip (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rip (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/cs x) (lib!trap.Registers./Registers/?cs x)) :pattern ((lib!trap.Registers./Registers/cs x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/cs (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/cs (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/flags x) (lib!trap.Registers./Registers/?flags x)) :pattern ((lib!trap.Registers./Registers/flags x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/flags (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/flags (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rsp x) (lib!trap.Registers./Registers/?rsp x)) :pattern ((lib!trap.Registers./Registers/rsp x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rsp (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rsp (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/ss x) (lib!trap.Registers./Registers/?ss x)) :pattern ((lib!trap.Registers./Registers/ss x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/ss (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/ss (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)))))
(assert (forall ((x lib!array.Array.)) (! (= x (%Poly%lib!array.Array. (Poly%lib!array.Array. x))) :pattern ((Poly%lib!array.Array. x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (= x (Poly%lib!array.Array. (%Poly%lib!array.Array. x)))) :pattern ((has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (_seq! Poly) (_ar! %%Function%%)) (! (=> (and (has_type _seq! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (Poly%array%. _ar!) (ARRAY A&. A& N&. N&))) (has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))) :pattern ((has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/seq x) (lib!array.Array./Array/?seq x)) :pattern ((lib!array.Array./Array/seq x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/ar x) (lib!array.Array./Array/?ar x)) :pattern ((lib!array.Array./Array/ar x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (Poly%array%. (lib!array.Array./Array/ar (%Poly%lib!array.Array. x))) (ARRAY A&. A& N&. N&))) :pattern ((lib!array.Array./Array/ar (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(define-fun is-lib!array.Array./Array_ ((c lib!array.Array.)) Bool ((_ is lib!array.Array./Array) c))
(assert (forall ((x lib!array.Array.)) (! (=> (is-lib!array.Array./Array_ x) (height_lt (height (lib!array.Array./Array/seq x)) (height (Poly%lib!array.Array. x)))) :pattern ((height (lib!array.Array./Array/seq x))))))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= x (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. x))) :pattern ((Poly%lib!array_set.ArraySet. x)))))
(assert (forall ((N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_set.ArraySet. N&. N&)) (= x (Poly%lib!array_set.ArraySet. (%Poly%lib!array_set.ArraySet. x)))) :pattern ((has_type x (TYPE%lib!array_set.ArraySet. N&. N&))))))
(assert (forall ((N&. Dcr) (N& Type) (_data! lib!array.Array.) (_len! Int) (_set! vstd!set.Set<usize.>.)) (! (=> (and (has_type (Poly%lib!array.Array. _data!) (TYPE%lib!array.Array. $ BOOL N&. N&)) (uInv SZ _len!)) (has_type (Poly%lib!array_set.ArraySet. (lib!array_set.ArraySet./ArraySet _data! _len! _set!)) (TYPE%lib!array_set.ArraySet. N&. N&))) :pattern ((has_type (Poly%lib!array_set.ArraySet. (lib!array_set.ArraySet./ArraySet _data! _len! _set!)) (TYPE%lib!array_set.ArraySet. N&. N&))))))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= (lib!array_set.ArraySet./ArraySet/data x) (lib!array_set.ArraySet./ArraySet/?data x)) :pattern ((lib!array_set.ArraySet./ArraySet/data x)))))
(assert (forall ((N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_set.ArraySet. N&. N&)) (has_type (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. x))) (TYPE%lib!array.Array. $ BOOL N&. N&))) :pattern ((lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. x)) (has_type x (TYPE%lib!array_set.ArraySet. N&. N&))))))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= (lib!array_set.ArraySet./ArraySet/len x) (lib!array_set.ArraySet./ArraySet/?len x)) :pattern ((lib!array_set.ArraySet./ArraySet/len x)))))
(assert (forall ((N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_set.ArraySet. N&. N&)) (uInv SZ (lib!array_set.ArraySet./ArraySet/len (%Poly%lib!array_set.ArraySet. x)))) :pattern ((lib!array_set.ArraySet./ArraySet/len (%Poly%lib!array_set.ArraySet. x)) (has_type x (TYPE%lib!array_set.ArraySet. N&. N&))))))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= (lib!array_set.ArraySet./ArraySet/set x) (lib!array_set.ArraySet./ArraySet/?set x)) :pattern ((lib!array_set.ArraySet./ArraySet/set x)))))
(define-fun is-lib!array_set.ArraySet./ArraySet_ ((c lib!array_set.ArraySet.)) Bool ((_ is lib!array_set.ArraySet./ArraySet) c))
(assert (forall ((x lib!array_set.ArraySet.)) (! (=> (is-lib!array_set.ArraySet./ArraySet_ x) (height_lt (height (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data x))) (height (Poly%lib!array_set.ArraySet. x)))) :pattern ((height (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data x)))))))
(assert (forall ((x lib!va_range.VaRange4K.)) (! (= x (%Poly%lib!va_range.VaRange4K. (Poly%lib!va_range.VaRange4K. x))) :pattern ((Poly%lib!va_range.VaRange4K. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!va_range.VaRange4K.) (= x (Poly%lib!va_range.VaRange4K. (%Poly%lib!va_range.VaRange4K. x)))) :pattern ((has_type x TYPE%lib!va_range.VaRange4K.)))))
(assert (forall ((_start! Int) (_len! Int) (_view! vstd!seq.Seq<usize.>.)) (! (=> (and (uInv SZ _start!) (uInv SZ _len!)) (has_type (Poly%lib!va_range.VaRange4K. (lib!va_range.VaRange4K./VaRange4K _start! _len! _view!)) TYPE%lib!va_range.VaRange4K.)) :pattern ((has_type (Poly%lib!va_range.VaRange4K. (lib!va_range.VaRange4K./VaRange4K _start! _len! _view!)) TYPE%lib!va_range.VaRange4K.)))))
(assert (forall ((x lib!va_range.VaRange4K.)) (! (= (lib!va_range.VaRange4K./VaRange4K/start x) (lib!va_range.VaRange4K./VaRange4K/?start x)) :pattern ((lib!va_range.VaRange4K./VaRange4K/start x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!va_range.VaRange4K.) (uInv SZ (lib!va_range.VaRange4K./VaRange4K/start (%Poly%lib!va_range.VaRange4K. x)))) :pattern ((lib!va_range.VaRange4K./VaRange4K/start (%Poly%lib!va_range.VaRange4K. x)) (has_type x TYPE%lib!va_range.VaRange4K.)))))
(assert (forall ((x lib!va_range.VaRange4K.)) (! (= (lib!va_range.VaRange4K./VaRange4K/len x) (lib!va_range.VaRange4K./VaRange4K/?len x)) :pattern ((lib!va_range.VaRange4K./VaRange4K/len x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!va_range.VaRange4K.) (uInv SZ (lib!va_range.VaRange4K./VaRange4K/len (%Poly%lib!va_range.VaRange4K. x)))) :pattern ((lib!va_range.VaRange4K./VaRange4K/len (%Poly%lib!va_range.VaRange4K. x)) (has_type x TYPE%lib!va_range.VaRange4K.)))))
(assert (forall ((x lib!va_range.VaRange4K.)) (! (= (lib!va_range.VaRange4K./VaRange4K/view x) (lib!va_range.VaRange4K./VaRange4K/?view x)) :pattern ((lib!va_range.VaRange4K./VaRange4K/view x)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!pervasive.ForLoopGhostIterator. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!clone.Clone. (Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.PartialEq. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.PartialOrd. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!iter.traits.iterator.Iterator. (Dcr Type) Bool)
(declare-fun tr_bound%core!iter.range.Step. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.range.StepSpec. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIterator. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!clone.Clone. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! true :pattern ((tr_bound%core!cmp.PartialEq. Self%&. Self%& Rhs&. Rhs&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. Self%&. Self%& Rhs&. Rhs&) (tr_bound%core!cmp.PartialEq. Self%&. Self%& Rhs&. Rhs&)) :pattern ((tr_bound%core!cmp.PartialOrd. Self%&. Self%& Rhs&. Rhs&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!iter.traits.iterator.Iterator. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%core!iter.range.Step. Self%&. Self%&) (and (tr_bound%core!clone.Clone. Self%&. Self%&) (tr_bound%core!cmp.PartialOrd. Self%&. Self%& Self%&. Self%&))) :pattern ((tr_bound%core!iter.range.Step. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!std_specs.range.StepSpec. Self%&. Self%&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ (SINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 32)) (SINT 32)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&)) $) :pattern ((proj%%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&)) (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) :pattern ((proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) $) :pattern ((proj%%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (TYPE%core!ops.range.Range. A&. A&)) :pattern ((proj%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) A&.) :pattern ((proj%%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) A&) :pattern ((proj%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((proj%vstd!view.View./V $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_some")
(declare-fun vstd!std_specs.option.is_some.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_none")
(declare-fun vstd!std_specs.option.is_none.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap_or")
(declare-fun vstd!std_specs.option.spec_unwrap_or.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::range::StepSpec::spec_is_lt")
(declare-fun vstd!std_specs.range.StepSpec.spec_is_lt.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_is_lt%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::range::StepSpec::spec_steps_between_int")
(declare-fun vstd!std_specs.range.StepSpec.spec_steps_between_int.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_steps_between_int%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::range::StepSpec::spec_forward_checked")
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::range::StepSpec::spec_forward_checked_int")
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked_int.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked_int%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::range::spec_range_next")
(declare-fun vstd!std_specs.range.spec_range_next.? (Dcr Type Poly) tuple%2.)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIterator::exec_invariant")
(declare-fun vstd!pervasive.ForLoopGhostIterator.exec_invariant.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.exec_invariant%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIterator::ghost_invariant")
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_invariant%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIterator::ghost_ensures")
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_ensures%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIterator::ghost_peek_next")
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_peek_next%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIterator::ghost_advance")
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_advance.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_advance%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::ForLoopGhostIteratorNew::ghost_iter")
(declare-fun vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::index_of_first")
(declare-fun vstd!seq_lib.impl&%0.index_of_first.? (Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::no_duplicates")
(declare-fun vstd!seq_lib.impl&%0.no_duplicates.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_set")
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::subset_of")
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%0::spec_addr")
(declare-fun vstd!simple_pptr.impl&%0.spec_addr.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::addr")
(declare-fun vstd!simple_pptr.impl&%1.addr.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::mem_contents")
(declare-fun vstd!simple_pptr.impl&%1.mem_contents.? (Dcr Type Poly) vstd!raw_ptr.MemContents.)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::pptr")
(declare-fun vstd!simple_pptr.impl&%1.pptr.? (Dcr Type Poly) vstd!simple_pptr.PPtr.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::is_init")
(declare-fun vstd!raw_ptr.impl&%7.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::is_init")
(declare-fun vstd!simple_pptr.impl&%1.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%2::arrow_0")
(declare-fun vstd!raw_ptr.impl&%2.arrow_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::value")
(declare-fun vstd!raw_ptr.impl&%7.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::value")
(declare-fun vstd!simple_pptr.impl&%1.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::view")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::spec_len")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::unique")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.unique.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::array::Array::wf")
(declare-fun lib!array.impl&%0.wf.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::array::Array::view")
(declare-fun lib!array.impl&%0.view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::define::NUM_CPUS")
(declare-fun lib!define.NUM_CPUS.? () Int)
(set-info :comment ";; Function-Decl lib::define::MAX_NUM_ENDPOINT_DESCRIPTORS")
(declare-fun lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.? () Int)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::is_None")
(declare-fun lib!process_manager.thread.impl&%3.is_None.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::trap::TrapFrameOption::is_Some")
(declare-fun lib!trap.impl&%0.is_Some.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::trap::TrapFrameOption::spec_unwrap")
(declare-fun lib!trap.impl&%0.spec_unwrap.? (Poly) lib!trap.Registers.)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::wf")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.wf.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::MAX_NUM_THREADS_PER_PROC")
(declare-fun lib!define.MAX_NUM_THREADS_PER_PROC.? () Int)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_valid")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_resolve")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::define::MAX_CONTAINER_SCHEDULER_LEN")
(declare-fun lib!define.MAX_CONTAINER_SCHEDULER_LEN.? () Int)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::skip")
(declare-fun vstd!seq.impl&%0.skip.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::define::CONTAINER_PROC_LIST_LEN")
(declare-fun lib!define.CONTAINER_PROC_LIST_LEN.? () Int)
(set-info :comment ";; Function-Decl lib::define::CONTAINER_CHILD_LIST_LEN")
(declare-fun lib!define.CONTAINER_CHILD_LIST_LEN.? () Int)
(set-info :comment ";; Function-Decl lib::define::CONTAINER_ENDPOINT_LIST_LEN")
(declare-fun lib!define.CONTAINER_ENDPOINT_LIST_LEN.? () Int)
(set-info :comment ";; Function-Decl lib::process_manager::endpoint::Endpoint::get_owning_threads")
(declare-fun lib!process_manager.endpoint.impl&%0.get_owning_threads.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::define::MAX_NUM_THREADS_PER_ENDPOINT")
(declare-fun lib!define.MAX_NUM_THREADS_PER_ENDPOINT.? () Int)
(set-info :comment ";; Function-Decl lib::define::MEM_4k_MASK")
(declare-fun lib!define.MEM_4k_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::define::KERNEL_MEM_END_L4INDEX")
(declare-fun lib!define.KERNEL_MEM_END_L4INDEX.? () Int)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::spec_va_4k_valid")
(declare-fun lib!util.page_ptr_util_u.spec_va_4k_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_add")
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_dom")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::container_dom")
(declare-fun lib!process_manager.spec_impl.impl&%0.container_dom.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::disjoint")
(declare-fun vstd!set.impl&%0.disjoint.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_perms_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_perms_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_root_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_root_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_childern_list_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_list_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::containers_linkedlist_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.containers_linkedlist_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_childern_depth_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_depth_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_subtree_set_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_uppertree_seq_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_uppertree_seq_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_subtree_set_exclusive")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_exclusive.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::cpus_wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.cpus_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::array_set::ArraySet::view")
(declare-fun lib!array_set.impl&%0.view.? (Dcr Type Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::spec_get_container")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly Poly) lib!process_manager.container.Container.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::container_cpu_wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.container_cpu_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::memory_disjoint")
(declare-fun lib!process_manager.spec_impl.impl&%1.memory_disjoint.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::array_set::ArraySet::wf")
(declare-fun lib!array_set.impl&%0.wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::container_perms_wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.container_perms_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::processes_container_wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.processes_container_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::processes_wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.processes_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::threads_process_wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.threads_process_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::spec_get_payload_as_va_range")
(declare-fun lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::va_range::VaRange4K::view")
(declare-fun lib!va_range.impl&%2.view.? (Poly) vstd!seq.Seq<usize.>.)
(set-info :comment ";; Function-Decl lib::va_range::VaRange4K::view_match_spec")
(declare-fun lib!va_range.impl&%2.view_match_spec.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::va_range::VaRange4K::wf")
(declare-fun lib!va_range.impl&%2.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::threads_perms_wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.threads_perms_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::endpoint_perms_wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.endpoint_perms_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_thread_owns_endpoint")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_thread_owns_endpoint.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::threads_endpoint_descriptors_wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.threads_endpoint_descriptors_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::endpoints_queue_wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.endpoints_queue_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::endpoints_container_wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.endpoints_container_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::schedulers_wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.schedulers_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::pcid_ioid_wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.pcid_ioid_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::threads_cpu_wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.threads_cpu_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::threads_container_wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.threads_container_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::wf")
(declare-fun lib!process_manager.spec_impl.impl&%1.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::page_closure")
(declare-fun lib!process_manager.spec_impl.impl&%0.page_closure.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::proc_dom")
(declare-fun lib!process_manager.spec_impl.impl&%0.proc_dom.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_proc")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly Poly) lib!process_manager.process.Process.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_container")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly Poly) lib!process_manager.container.Container.)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::remove")
(declare-fun vstd!seq_lib.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::remove_value")
(declare-fun vstd!seq_lib.impl&%0.remove_value.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::trap::TrapFrameOption::get_Some_0")
(declare-fun lib!trap.impl&%0.get_Some_0.? (Poly) lib!trap.Registers.)
(set-info :comment ";; Function-Decl vstd::std_specs::core::iter_into_iter_spec")
(declare-fun vstd!std_specs.core.iter_into_iter_spec.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::process_manager::endpoint::Endpoint::rf_counter_is_full")
(declare-fun lib!process_manager.endpoint.impl&%0.rf_counter_is_full.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::thread_dom")
(declare-fun lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::endpoint_dom")
(declare-fun lib!process_manager.spec_impl.impl&%0.endpoint_dom.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_thread")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly Poly) lib!process_manager.thread.Thread.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_proc_by_thread_ptr")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_proc_by_thread_ptr.? (Poly Poly) lib!process_manager.process.Process.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_cpu")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_cpu.? (Poly Poly) lib!process_manager.cpu.Cpu.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_is_cpu_running")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_is_cpu_running.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_container_by_proc_ptr")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_container_by_proc_ptr.? (Poly Poly) lib!process_manager.container.Container.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_container_by_thread_ptr")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_container_by_thread_ptr.? (Poly Poly) lib!process_manager.container.Container.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_endpoint")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? (Poly Poly) lib!process_manager.endpoint.Endpoint.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_thread_ptr_by_cpu_id")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_thread_ptr_by_cpu_id.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_owning_proc_by_thread_ptr")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_owning_proc_by_thread_ptr.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_endpoint_ptr_by_endpoint_idx")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_ptr_by_endpoint_idx.? (Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::process_manager::spec_impl::ProcessManager::spec_get_endpoint_by_endpoint_idx")
(declare-fun lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_by_endpoint_idx.? (Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Specs core::iter::traits::collect::impl&%0::into_iter")
(declare-fun ens%core!iter.traits.collect.impl&%0.into_iter. (Dcr Type Poly Poly) Bool)
(assert (forall ((I&. Dcr) (I& Type) (i! Poly) (r! Poly)) (! (= (ens%core!iter.traits.collect.impl&%0.into_iter. I&. I& i! r!) (and (has_type r! I&) (= r! i!))) :pattern ((ens%core!iter.traits.collect.impl&%0.into_iter. I&. I& i! r!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_some.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_some.? T&. T& option!) (is-core!option.Option./Some_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_some.? T&. T& option!))))))
(set-info :comment ";; Function-Specs core::option::impl&%0::is_some")
(declare-fun ens%core!option.impl&%0.is_some. (Dcr Type core!option.Option. Bool) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (b! Bool)) (! (= (ens%core!option.impl&%0.is_some. T&. T& option! b!) (= b! (is-core!option.Option./Some_ option!))) :pattern ((ens%core!option.impl&%0.is_some. T&. T& option! b!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_none")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_none.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_none.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_none.? T&. T& option!) (is-core!option.Option./None_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_none.? T&. T& option!))))))
(set-info :comment ";; Function-Specs core::option::impl&%0::is_none")
(declare-fun ens%core!option.impl&%0.is_none. (Dcr Type core!option.Option. Bool) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (b! Bool)) (! (= (ens%core!option.impl&%0.is_none. T&. T& option! b!) (= b! (is-core!option.Option./None_ option!))) :pattern ((ens%core!option.impl&%0.is_none. T&. T& option! b!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%1 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(set-info :comment ";; Function-Specs core::option::impl&%0::unwrap")
(declare-fun req%core!option.impl&%0.unwrap. (Dcr Type core!option.Option.) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.)) (! (= (req%core!option.impl&%0.unwrap. T&. T& option!) (=> %%global_location_label%%2 (is-core!option.Option./Some_ option!))) :pattern ((req%core!option.impl&%0.unwrap. T&. T& option!)))))
(declare-fun ens%core!option.impl&%0.unwrap. (Dcr Type core!option.Option. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (t! Poly)) (! (= (ens%core!option.impl&%0.unwrap. T&. T& option! t!) (and (has_type t! T&) (= t! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!)))))) :pattern ((ens%core!option.impl&%0.unwrap. T&. T& option! t!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap_or")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap_or.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap_or.) (forall ((T&. Dcr) (T& Type) (option! Poly) (default! Poly)) (! (= (vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!) (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)) (let ((t$ (core!option.Option./Some/0 (%Poly%core!option.Option. option!)))) t$) default!)) :pattern ((vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly) (default! Poly)) (! (=> (and (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type default! T&)) (has_type (vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::StepSpec::spec_is_lt")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! Self%&) (has_type other! Self%&)) (has_type (vstd!std_specs.range.StepSpec.spec_is_lt.? Self%&. Self%& self! other!) BOOL)) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? Self%&. Self%& self! other!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::StepSpec::spec_steps_between_int")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (end! Poly)) (! (=> (and (has_type self! Self%&) (has_type end! Self%&)) (has_type (vstd!std_specs.range.StepSpec.spec_steps_between_int.? Self%&. Self%& self! end!) INT)) :pattern ((vstd!std_specs.range.StepSpec.spec_steps_between_int.? Self%&. Self%& self! end!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::StepSpec::spec_forward_checked")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (count! Poly)) (! (=> (and (has_type self! Self%&) (has_type count! (UINT SZ))) (has_type (vstd!std_specs.range.StepSpec.spec_forward_checked.? Self%&. Self%& self! count!) (TYPE%core!option.Option. Self%&. Self%&))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? Self%&. Self%& self! count!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::StepSpec::spec_forward_checked_int")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (count! Poly)) (! (=> (and (has_type self! Self%&) (has_type count! INT)) (has_type (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? Self%&. Self%& self! count!) (TYPE%core!option.Option. Self%&. Self%&))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? Self%&. Self%& self! count!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::spec_range_next")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! (TYPE%core!ops.range.Range. A&. A&)) (has_type (Poly%tuple%2. (vstd!std_specs.range.spec_range_next.? A&. A& a!)) (TYPE%tuple%2. $ (TYPE%core!ops.range.Range. A&. A&) $ (TYPE%core!option.Option. A&. A&)))) :pattern ((vstd!std_specs.range.spec_range_next.? A&. A& a!)))))
(set-info :comment ";; Function-Specs core::iter::range::impl&%6::next")
(declare-fun ens%core!iter.range.impl&%6.next. (Dcr Type core!ops.range.Range. core!ops.range.Range. core!option.Option.) Bool)
(assert (forall ((A&. Dcr) (A& Type) (pre%range! core!ops.range.Range.) (range! core!ops.range.Range.) (r! core!option.Option.)) (! (= (ens%core!iter.range.impl&%6.next. A&. A& pre%range! range! r!) (and (has_type (Poly%core!option.Option. r!) (TYPE%core!option.Option. A&. A&)) (has_type (Poly%core!ops.range.Range. range!) (TYPE%core!ops.range.Range. A&. A&)) (= (tuple%2./tuple%2 (Poly%core!ops.range.Range. range!) (Poly%core!option.Option. r!)) (vstd!std_specs.range.spec_range_next.? A&. A& (Poly%core!ops.range.Range. pre%range!))))) :pattern ((ens%core!iter.range.impl&%6.next. A&. A& pre%range! range! r!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%3::spec_is_lt")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%3.spec_is_lt.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%3.spec_is_lt.) (forall ((self! Poly) (other! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 8) self! other!) (B (< (%I self!) (%I other!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 8) self! other!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%3::spec_forward_checked_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%3.spec_forward_checked_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%3.spec_forward_checked_int.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 8) self! count!) (Poly%core!option.Option. (ite (<= (Add (%I self!) (%I count!)) 255) (core!option.Option./Some (I (uClip 8 (Add (%I self!) (%I count!))))) core!option.Option./None))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 8) self! count!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%3::spec_forward_checked")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%3.spec_forward_checked.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%3.spec_forward_checked.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 8) self! count!) (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 8) self! count!)) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 8) self! count!))))))
(set-info :comment ";; Broadcast vstd::std_specs::range::axiom_spec_range_next_u8")
(assert (=> (fuel_bool fuel%vstd!std_specs.range.axiom_spec_range_next_u8.) (forall ((range! Poly)) (! (=> (has_type range! (TYPE%core!ops.range.Range. $ (UINT 8))) (and (=> (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 8) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (let ((tmp%%$ (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 8) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (I 1))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((n$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT 8) range!) (tuple%2./tuple%2 (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I n$) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (Poly%core!option.Option. (core!option.Option./Some (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)))))))))) (=> (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 8) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT 8) range!) (tuple%2./tuple%2 range! (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((vstd!std_specs.range.spec_range_next.? $ (UINT 8) range!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%6::spec_is_lt")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%6.spec_is_lt.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%6.spec_is_lt.) (forall ((self! Poly) (other! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 64) self! other!) (B (< (%I self!) (%I other!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 64) self! other!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%6::spec_forward_checked_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%6.spec_forward_checked_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%6.spec_forward_checked_int.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 64) self! count!) (Poly%core!option.Option. (ite (<= (Add (%I self!) (%I count!)) 18446744073709551615) (core!option.Option./Some (I (uClip 64 (Add (%I self!) (%I count!))))) core!option.Option./None))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 64) self! count!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%6::spec_forward_checked")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%6.spec_forward_checked.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%6.spec_forward_checked.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 64) self! count!) (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT 64) self! count!)) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 64) self! count!))))))
(set-info :comment ";; Broadcast vstd::std_specs::range::axiom_spec_range_next_u64")
(assert (=> (fuel_bool fuel%vstd!std_specs.range.axiom_spec_range_next_u64.) (forall ((range! Poly)) (! (=> (has_type range! (TYPE%core!ops.range.Range. $ (UINT 64))) (and (=> (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 64) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (let ((tmp%%$ (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT 64) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (I 1))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((n$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT 64) range!) (tuple%2./tuple%2 (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I n$) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (Poly%core!option.Option. (core!option.Option./Some (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)))))))))) (=> (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT 64) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT 64) range!) (tuple%2./tuple%2 range! (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((vstd!std_specs.range.spec_range_next.? $ (UINT 64) range!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%8::spec_is_lt")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%8.spec_is_lt.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%8.spec_is_lt.) (forall ((self! Poly) (other! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) self! other!) (B (< (%I self!) (%I other!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) self! other!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%8::spec_forward_checked_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT SZ) self! count!) (Poly%core!option.Option. (ite (<= (Add (%I self!) (%I count!)) (- (uHi SZ) 1)) (core!option.Option./Some (I (uClip SZ (Add (%I self!) (%I count!))))) core!option.Option./None))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT SZ) self! count!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%8::spec_forward_checked")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%8.spec_forward_checked.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%8.spec_forward_checked.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT SZ) self! count!) (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT SZ) self! count!)) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT SZ) self! count!))))))
(set-info :comment ";; Broadcast vstd::std_specs::range::axiom_spec_range_next_usize")
(assert (=> (fuel_bool fuel%vstd!std_specs.range.axiom_spec_range_next_usize.) (forall ((range! Poly)) (! (=> (has_type range! (TYPE%core!ops.range.Range. $ (UINT SZ))) (and (=> (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (let ((tmp%%$ (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT SZ) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (I 1))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((n$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT SZ) range!) (tuple%2./tuple%2 (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I n$) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (Poly%core!option.Option. (core!option.Option./Some (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)))))))))) (=> (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT SZ) range!) (tuple%2./tuple%2 range! (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((vstd!std_specs.range.spec_range_next.? $ (UINT SZ) range!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%11::spec_is_lt")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%11.spec_is_lt.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%11.spec_is_lt.) (forall ((self! Poly) (other! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (SINT 32) self! other!) (B (< (%I self!) (%I other!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? $ (SINT 32) self! other!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%11::spec_forward_checked_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%11.spec_forward_checked_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%11.spec_forward_checked_int.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (SINT 32) self! count!) (Poly%core!option.Option. (ite (<= (Add (%I self!) (%I count!)) 2147483647) (core!option.Option./Some (I (iClip 32 (Add (%I self!) (%I count!))))) core!option.Option./None))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (SINT 32) self! count!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%11::spec_forward_checked")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%11.spec_forward_checked.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%11.spec_forward_checked.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (SINT 32) self! count!) (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (SINT 32) self! count!)) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (SINT 32) self! count!))))))
(set-info :comment ";; Broadcast vstd::std_specs::range::axiom_spec_range_next_i32")
(assert (=> (fuel_bool fuel%vstd!std_specs.range.axiom_spec_range_next_i32.) (forall ((range! Poly)) (! (=> (has_type range! (TYPE%core!ops.range.Range. $ (SINT 32))) (and (=> (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (SINT 32) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (let ((tmp%%$ (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (SINT 32) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (I 1))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((n$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= (vstd!std_specs.range.spec_range_next.? $ (SINT 32) range!) (tuple%2./tuple%2 (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I n$) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (Poly%core!option.Option. (core!option.Option./Some (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)))))))))) (=> (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (SINT 32) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!))))) (= (vstd!std_specs.range.spec_range_next.? $ (SINT 32) range!) (tuple%2./tuple%2 range! (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((vstd!std_specs.range.spec_range_next.? $ (SINT 32) range!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%4 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_empty")
(declare-fun ens%vstd!map.impl&%0.tracked_empty. (Dcr Type Dcr Type Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (out_v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_empty. K&. K& V&. V& out_v!) (and (has_type out_v! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= out_v! (vstd!map.impl&%0.empty.? K&. K& V&. V&)))) :pattern ((ens%vstd!map.impl&%0.tracked_empty. K&. K& V&. V& out_v!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_insert")
(declare-fun ens%vstd!map.impl&%0.tracked_insert. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!) (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.insert.? K&. K& V&. V& pre%self! key! value!)))) :pattern ((ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%6 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_remove")
(declare-fun req%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!) (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& pre%self!) key!))) :pattern ((req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!) (and (has_type v! V&) (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.remove.? K&. K& V&. V& pre%self! key!)) (= v! (vstd!map.impl&%0.index.? K&. K& V&. V& pre%self! key!)))) :pattern ((ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_borrow")
(declare-fun req%vstd!map.impl&%0.tracked_borrow. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key!) (=> %%global_location_label%%8 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_borrow. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key! v!) (and (has_type v! V&) (= v! (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))) :pattern ((ens%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key! v!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIterator::exec_invariant")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (exec_iter! Poly)) (! (=> (and (has_type self! Self%&) (has_type exec_iter! (proj%vstd!pervasive.ForLoopGhostIterator./ExecIter Self%&. Self%&))) (has_type (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? Self%&. Self%& self! exec_iter!) BOOL)) :pattern ((vstd!pervasive.ForLoopGhostIterator.exec_invariant.? Self%&. Self%& self! exec_iter!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIterator::ghost_invariant")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (init! Poly)) (! (=> (and (has_type self! Self%&) (has_type init! (TYPE%core!option.Option. (REF Self%&.) Self%&))) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? Self%&. Self%& self! init!) BOOL)) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? Self%&. Self%& self! init!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIterator::ghost_ensures")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? Self%&. Self%& self!) BOOL)) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIterator::ghost_peek_next")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? Self%&. Self%& self!) (TYPE%core!option.Option. (proj%%vstd!pervasive.ForLoopGhostIterator./Item Self%&. Self%&) (proj%vstd!pervasive.ForLoopGhostIterator./Item Self%&. Self%&)))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIterator::ghost_advance")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (exec_iter! Poly)) (! (=> (and (has_type self! Self%&) (has_type exec_iter! (proj%vstd!pervasive.ForLoopGhostIterator./ExecIter Self%&. Self%&))) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_advance.? Self%&. Self%& self! exec_iter!) Self%&)) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_advance.? Self%&. Self%& self! exec_iter!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::ForLoopGhostIteratorNew::ghost_iter")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? Self%&. Self%& self!) (proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter Self%&. Self%&))) :pattern ((vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%9 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%10 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!))))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_left")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!))))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_right")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!))))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::push_distributes_over_add")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (elt! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type elt! A&)) (= (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!) (vstd!seq.Seq.add.? A&. A& a! (vstd!seq.Seq.push.? A&. A& b! elt!)))) :pattern ((vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!))))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::index_of_first")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type needle! A&)) (has_type (Poly%core!option.Option. (vstd!seq_lib.impl&%0.index_of_first.? A&. A& self! needle!)) (TYPE%core!option.Option. $ INT))) :pattern ((vstd!seq_lib.impl&%0.index_of_first.? A&. A& self! needle!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::no_duplicates")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.no_duplicates.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.no_duplicates.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? A&. A& self!)))) (not (= i$ j$))) (not (= (vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$))))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$))))) :pattern ((vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$))))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!))))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_set")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%1 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%1 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)))))
(set-info :comment ";; Broadcast vstd::seq_lib::seq_to_set_is_finite")
(assert (=> (fuel_bool fuel%vstd!seq_lib.seq_to_set_is_finite.) (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_len.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!))))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%0::spec_addr")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%0.spec_addr.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%0.spec_addr.) (forall ((V&. Dcr) (V& Type) (p! Poly)) (! (= (vstd!simple_pptr.impl&%0.spec_addr.? V&. V& p!) (vstd!simple_pptr.PPtr./PPtr/0 (%Poly%vstd!simple_pptr.PPtr. p!))) :pattern ((vstd!simple_pptr.impl&%0.spec_addr.? V&. V& p!))))))
(assert (forall ((V&. Dcr) (V& Type) (p! Poly)) (! (=> (has_type p! (TYPE%vstd!simple_pptr.PPtr. V&. V&)) (uInv SZ (vstd!simple_pptr.impl&%0.spec_addr.? V&. V& p!))) :pattern ((vstd!simple_pptr.impl&%0.spec_addr.? V&. V& p!)))))
(set-info :comment ";; Function-Specs vstd::simple_pptr::impl&%0::from_usize")
(declare-fun ens%vstd!simple_pptr.impl&%0.from_usize. (Dcr Type Int vstd!simple_pptr.PPtr.) Bool)
(assert (forall ((V&. Dcr) (V& Type) (u! Int) (s! vstd!simple_pptr.PPtr.)) (! (= (ens%vstd!simple_pptr.impl&%0.from_usize. V&. V& u! s!) (and (has_type (Poly%vstd!simple_pptr.PPtr. s!) (TYPE%vstd!simple_pptr.PPtr. V&. V&)) (= u! (vstd!simple_pptr.PPtr./PPtr/0 (%Poly%vstd!simple_pptr.PPtr. (Poly%vstd!simple_pptr.PPtr. s!)))))) :pattern ((ens%vstd!simple_pptr.impl&%0.from_usize. V&. V& u! s!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::addr")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (uInv SZ (vstd!simple_pptr.impl&%1.addr.? V&. V& self!))) :pattern ((vstd!simple_pptr.impl&%1.addr.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::mem_contents")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)) (TYPE%vstd!raw_ptr.MemContents. V&. V&))) :pattern ((vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::pptr")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%1.pptr.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%1.pptr.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!simple_pptr.impl&%1.pptr.? V&. V& self!) (vstd!simple_pptr.PPtr./PPtr (%I (I (vstd!simple_pptr.impl&%1.addr.? V&. V& self!))) (%Poly%core!marker.PhantomData. (Poly%core!marker.PhantomData. core!marker.PhantomData./PhantomData)))) :pattern ((vstd!simple_pptr.impl&%1.pptr.? V&. V& self!))))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (has_type (Poly%vstd!simple_pptr.PPtr. (vstd!simple_pptr.impl&%1.pptr.? V&. V& self!)) (TYPE%vstd!simple_pptr.PPtr. V&. V&))) :pattern ((vstd!simple_pptr.impl&%1.pptr.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::is_init")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.is_init.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.is_init.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.is_init.? T&. T& self!) (is-vstd!raw_ptr.MemContents./Init_ (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.is_init.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::is_init")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%1.is_init.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%1.is_init.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!simple_pptr.impl&%1.is_init.? V&. V& self!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!))) :pattern ((vstd!simple_pptr.impl&%1.is_init.? V&. V& self!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%2::arrow_0")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%2.arrow_0.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%2.arrow_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::value")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.value.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.value.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%7.value.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!)))))
(set-info :comment ";; Function-Specs vstd::simple_pptr::impl&%1::value")
(declare-fun req%vstd!simple_pptr.impl&%1.value. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (req%vstd!simple_pptr.impl&%1.value. V&. V& self!) (=> %%global_location_label%%11 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)))) :pattern ((req%vstd!simple_pptr.impl&%1.value. V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::value")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%1.value.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%1.value.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!simple_pptr.impl&%1.value.? V&. V& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!))))) :pattern ((vstd!simple_pptr.impl&%1.value.? V&. V& self!))))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (has_type (vstd!simple_pptr.impl&%1.value.? V&. V& self!) V&)) :pattern ((vstd!simple_pptr.impl&%1.value.? V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::simple_pptr::impl&%4::borrow")
(declare-fun req%vstd!simple_pptr.impl&%4.borrow. (Dcr Type vstd!simple_pptr.PPtr. Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! vstd!simple_pptr.PPtr.) (perm! Poly)) (! (= (req%vstd!simple_pptr.impl&%4.borrow. V&. V& self! perm!) (and (=> %%global_location_label%%12 (= (vstd!simple_pptr.PPtr./PPtr (%I (I (vstd!simple_pptr.impl&%1.addr.? V&. V& perm!))) (%Poly%core!marker.PhantomData. (Poly%core!marker.PhantomData. core!marker.PhantomData./PhantomData))) self!)) (=> %%global_location_label%%13 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& perm!))))) :pattern ((req%vstd!simple_pptr.impl&%4.borrow. V&. V& self! perm!)))))
(declare-fun ens%vstd!simple_pptr.impl&%4.borrow. (Dcr Type vstd!simple_pptr.PPtr. Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! vstd!simple_pptr.PPtr.) (perm! Poly) (v! Poly)) (! (= (ens%vstd!simple_pptr.impl&%4.borrow. V&. V& self! perm! v!) (and (has_type v! V&) (= v! (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& perm!))))))) :pattern ((ens%vstd!simple_pptr.impl&%4.borrow. V&. V& self! perm! v!)))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::view")
(assert (fuel_bool_default fuel%lib!slinkedlist.spec_impl_u.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!slinkedlist.spec_impl_u.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::spec_len")
(assert (fuel_bool_default fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len.))
(assert (=> (fuel_bool fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!) (uClip SZ (vstd!seq.Seq.len.? T&. T& (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::unique")
(assert (fuel_bool_default fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique.))
(assert (=> (fuel_bool fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!slinkedlist.spec_impl_u.impl&%0.unique.? T&. T& N&. N& self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!))) (and (<= 0 (%I j$)) (< (%I j$) (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!)))) (not (= i$ j$))) (not (= (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) i$) (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) j$))))) :pattern ((vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) i$) (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) j$))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.unique.? T&. T& N&. N& self!))))))
(set-info :comment ";; Function-Axioms lib::array::Array::wf")
(assert (fuel_bool_default fuel%lib!array.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!array.impl&%0.wf.) (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array.impl&%0.wf.? A&. A& N&. N& self!) (= (vstd!seq.Seq.len.? A&. A& (lib!array.Array./Array/seq (%Poly%lib!array.Array. self!))) (const_int N&))) :pattern ((lib!array.impl&%0.wf.? A&. A& N&. N& self!))))))
(set-info :comment ";; Function-Axioms lib::array::Array::view")
(assert (fuel_bool_default fuel%lib!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!array.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array.impl&%0.view.? A&. A& N&. N& self!) (lib!array.Array./Array/seq (%Poly%lib!array.Array. self!))) :pattern ((lib!array.impl&%0.view.? A&. A& N&. N& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (lib!array.impl&%0.view.? A&. A& N&. N& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((lib!array.impl&%0.view.? A&. A& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::define::NUM_CPUS")
(assert (fuel_bool_default fuel%lib!define.NUM_CPUS.))
(assert (=> (fuel_bool fuel%lib!define.NUM_CPUS.) (= lib!define.NUM_CPUS.? 32)))
(assert (uInv SZ lib!define.NUM_CPUS.?))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::init")
(declare-fun ens%lib!process_manager.spec_impl.impl&%3.init. (lib!process_manager.spec_impl.ProcessManager. lib!process_manager.spec_impl.ProcessManager. Int Int Int Int Poly Poly Poly) Bool)
(assert (forall ((pre%self! lib!process_manager.spec_impl.ProcessManager.) (self! lib!process_manager.spec_impl.ProcessManager.) (dom_0_container_ptr! Int) (dom_0_proc_ptr! Int) (dom_0_thread_ptr! Int) (init_quota! Int) (page_perm_0! Poly) (page_perm_1! Poly) (page_perm_2! Poly)) (! (= (ens%lib!process_manager.spec_impl.impl&%3.init. pre%self! self! dom_0_container_ptr! dom_0_proc_ptr! dom_0_thread_ptr! init_quota! page_perm_0! page_perm_1! page_perm_2!) (has_type (Poly%lib!process_manager.spec_impl.ProcessManager. self!) TYPE%lib!process_manager.spec_impl.ProcessManager.)) :pattern ((ens%lib!process_manager.spec_impl.impl&%3.init. pre%self! self! dom_0_container_ptr! dom_0_proc_ptr! dom_0_thread_ptr! init_quota! page_perm_0! page_perm_1! page_perm_2!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms lib::define::MAX_NUM_ENDPOINT_DESCRIPTORS")
(assert (fuel_bool_default fuel%lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.))
(assert (=> (fuel_bool fuel%lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.) (= lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.? 128)))
(assert (uInv SZ lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.?))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::is_None")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%3.is_None.))
(define-fun is-lib!process_manager.thread.IPCPayLoad./Empty_ ((c lib!process_manager.thread.IPCPayLoad.)) Bool ((_ is lib!process_manager.thread.IPCPayLoad./Empty) c))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%3.is_None.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%3.is_None.? self!) (is-lib!process_manager.thread.IPCPayLoad./Empty_ (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%3.is_None.? self!))))))
(set-info :comment ";; Function-Axioms lib::trap::TrapFrameOption::is_Some")
(assert (fuel_bool_default fuel%lib!trap.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%lib!trap.impl&%0.is_Some.) (forall ((self! Poly)) (! (= (lib!trap.impl&%0.is_Some.? self!) (lib!trap.TrapFrameOption./TrapFrameOption/exists (%Poly%lib!trap.TrapFrameOption. self!))) :pattern ((lib!trap.impl&%0.is_Some.? self!))))))
(set-info :comment ";; Function-Specs lib::trap::TrapFrameOption::spec_unwrap")
(declare-fun req%lib!trap.impl&%0.spec_unwrap. (Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!trap.impl&%0.spec_unwrap. self!) (=> %%global_location_label%%14 (lib!trap.impl&%0.is_Some.? self!))) :pattern ((req%lib!trap.impl&%0.spec_unwrap. self!)))))
(set-info :comment ";; Function-Axioms lib::trap::TrapFrameOption::spec_unwrap")
(assert (fuel_bool_default fuel%lib!trap.impl&%0.spec_unwrap.))
(assert (=> (fuel_bool fuel%lib!trap.impl&%0.spec_unwrap.) (forall ((self! Poly)) (! (= (lib!trap.impl&%0.spec_unwrap.? self!) (lib!trap.TrapFrameOption./TrapFrameOption/reg (%Poly%lib!trap.TrapFrameOption. self!))) :pattern ((lib!trap.impl&%0.spec_unwrap.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!trap.TrapFrameOption.) (has_type (Poly%lib!trap.Registers. (lib!trap.impl&%0.spec_unwrap.? self!)) TYPE%lib!trap.Registers.)) :pattern ((lib!trap.impl&%0.spec_unwrap.? self!)))))
(set-info :comment ";; Function-Specs lib::process_manager::thread_util_t::page_to_thread")
(declare-fun req%lib!process_manager.thread_util_t.page_to_thread. (Int Poly lib!trap.Registers. Int Int Int Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((page_ptr! Int) (page_perm! Poly) (pt_regs! lib!trap.Registers.) (owning_container! Int) (owning_proc! Int) (proc_rev_ptr! Int) (scheduler_rev_ptr! Int)) (! (= (req%lib!process_manager.thread_util_t.page_to_thread. page_ptr! page_perm! pt_regs! owning_container! owning_proc! proc_rev_ptr! scheduler_rev_ptr!) (and (=> %%global_location_label%%15 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm!))) (=> %%global_location_label%%16 (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm!) page_ptr!)))) :pattern ((req%lib!process_manager.thread_util_t.page_to_thread. page_ptr! page_perm! pt_regs! owning_container! owning_proc! proc_rev_ptr! scheduler_rev_ptr!)))))
(declare-fun ens%lib!process_manager.thread_util_t.page_to_thread. (Int Poly lib!trap.Registers. Int Int Int Int tuple%2.) Bool)
(declare-fun %%lambda%%2 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0) i$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0) i$)))))
(assert (forall ((page_ptr! Int) (page_perm! Poly) (pt_regs! lib!trap.Registers.) (owning_container! Int) (owning_proc! Int) (proc_rev_ptr! Int) (scheduler_rev_ptr! Int) (ret! tuple%2.)) (! (= (ens%lib!process_manager.thread_util_t.page_to_thread. page_ptr! page_perm! pt_regs! owning_container! owning_proc! proc_rev_ptr! scheduler_rev_ptr! ret!) (and (has_type (Poly%tuple%2. ret!) (TYPE%tuple%2. $ (UINT SZ) (TRACKED $) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.))) (= (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) page_ptr!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (= (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) owning_container!) (= (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) owning_proc!) (= (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) lib!define.ThreadState./SCHEDULED) (= (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) proc_rev_ptr!) (= (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) (core!option.Option./Some (I scheduler_rev_ptr!))) (is-core!option.Option./None_ (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (is-core!option.Option./None_ (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (is-core!option.Option./None_ (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (UINT SZ))) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))))) (vstd!seq.Seq.new.? $ (TYPE%core!option.Option. $ (UINT SZ)) $ (TYPE%fun%1. $ INT $ (TYPE%core!option.Option. $ (UINT SZ))) (I lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.?) (Poly%fun%1. (mk_fun (%%lambda%%2 (Poly%core!option.Option. core!option.Option./None)))))) (lib!process_manager.thread.impl&%3.is_None.? (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (is-core!option.Option./None_ (lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (ext_eq false TYPE%lib!trap.Registers. (Poly%lib!trap.Registers. (lib!trap.impl&%0.spec_unwrap.? (Poly%lib!trap.TrapFrameOption. (lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))))) (Poly%lib!trap.Registers. pt_regs!)))) :pattern ((ens%lib!process_manager.thread_util_t.page_to_thread. page_ptr! page_perm! pt_regs! owning_container! owning_proc! proc_rev_ptr! scheduler_rev_ptr! ret!)))))
(set-info :comment ";; Function-Specs lib::process_manager::thread_util_t::page_to_thread_with_endpoint")
(declare-fun req%lib!process_manager.thread_util_t.page_to_thread_with_endpoint. (Int Poly lib!trap.Registers. Int Int Int Int Int) Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((page_ptr! Int) (page_perm! Poly) (pt_regs! lib!trap.Registers.) (owning_container! Int) (owning_proc! Int) (proc_rev_ptr! Int) (scheduler_rev_ptr! Int) (endpoint_ptr! Int)) (! (= (req%lib!process_manager.thread_util_t.page_to_thread_with_endpoint. page_ptr! page_perm! pt_regs! owning_container! owning_proc! proc_rev_ptr! scheduler_rev_ptr! endpoint_ptr!) (and (=> %%global_location_label%%17 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm!))) (=> %%global_location_label%%18 (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm!) page_ptr!)))) :pattern ((req%lib!process_manager.thread_util_t.page_to_thread_with_endpoint. page_ptr! page_perm! pt_regs! owning_container! owning_proc! proc_rev_ptr! scheduler_rev_ptr! endpoint_ptr!)))))
(declare-fun ens%lib!process_manager.thread_util_t.page_to_thread_with_endpoint. (Int Poly lib!trap.Registers. Int Int Int Int Int tuple%2.) Bool)
(assert (forall ((page_ptr! Int) (page_perm! Poly) (pt_regs! lib!trap.Registers.) (owning_container! Int) (owning_proc! Int) (proc_rev_ptr! Int) (scheduler_rev_ptr! Int) (endpoint_ptr! Int) (ret! tuple%2.)) (! (= (ens%lib!process_manager.thread_util_t.page_to_thread_with_endpoint. page_ptr! page_perm! pt_regs! owning_container! owning_proc! proc_rev_ptr! scheduler_rev_ptr! endpoint_ptr! ret!) (and (has_type (Poly%tuple%2. ret!) (TYPE%tuple%2. $ (UINT SZ) (TRACKED $) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.))) (= (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) page_ptr!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (= (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) owning_container!) (= (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) owning_proc!) (= (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) lib!define.ThreadState./SCHEDULED) (= (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) proc_rev_ptr!) (= (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) (core!option.Option./Some (I scheduler_rev_ptr!))) (is-core!option.Option./None_ (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (is-core!option.Option./None_ (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (is-core!option.Option./None_ (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ (UINT SZ))) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))))) (vstd!seq.Seq.update.? $ (TYPE%core!option.Option. $ (UINT SZ)) (vstd!seq.Seq.new.? $ (TYPE%core!option.Option. $ (UINT SZ)) $ (TYPE%fun%1. $ INT $ (TYPE%core!option.Option. $ (UINT SZ))) (I lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.?) (Poly%fun%1. (mk_fun (%%lambda%%2 (Poly%core!option.Option. core!option.Option./None))))) (I 0) (Poly%core!option.Option. (core!option.Option./Some (I endpoint_ptr!))))) (lib!process_manager.thread.impl&%3.is_None.? (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (is-core!option.Option./None_ (lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (ext_eq false TYPE%lib!trap.Registers. (Poly%lib!trap.Registers. (lib!trap.impl&%0.spec_unwrap.? (Poly%lib!trap.TrapFrameOption. (lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))))) (Poly%lib!trap.Registers. pt_regs!)))) :pattern ((ens%lib!process_manager.thread_util_t.page_to_thread_with_endpoint. page_ptr! page_perm! pt_regs! owning_container! owning_proc! proc_rev_ptr! scheduler_rev_ptr! endpoint_ptr! ret!)))))
(set-info :comment ";; Function-Specs lib::process_manager::thread_util_t::thread_set_blocking_endpoint_endpoint_ref_scheduler_ref_state_and_ipc_payload")
(declare-fun req%lib!process_manager.thread_util_t.thread_set_blocking_endpoint_endpoint_ref_scheduler_ref_state_and_ipc_payload. (Int vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. core!option.Option. core!option.Option. core!option.Option. lib!define.ThreadState. lib!process_manager.thread.IPCPayLoad.) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((thread_ptr! Int) (pre%thread_perm! vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) (blocking_endpoint_ptr! core!option.Option.) (endpoint_rev_ptr! core!option.Option.) (scheduler_rev_ptr! core!option.Option.) (state! lib!define.ThreadState.) (ipc_payload! lib!process_manager.thread.IPCPayLoad.)) (! (= (req%lib!process_manager.thread_util_t.thread_set_blocking_endpoint_endpoint_ref_scheduler_ref_state_and_ipc_payload. thread_ptr! pre%thread_perm! blocking_endpoint_ptr! endpoint_rev_ptr! scheduler_rev_ptr! state! ipc_payload!) (and (=> %%global_location_label%%19 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))) (=> %%global_location_label%%20 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)) thread_ptr!)))) :pattern ((req%lib!process_manager.thread_util_t.thread_set_blocking_endpoint_endpoint_ref_scheduler_ref_state_and_ipc_payload. thread_ptr! pre%thread_perm! blocking_endpoint_ptr! endpoint_rev_ptr! scheduler_rev_ptr! state! ipc_payload!)))))
(declare-fun ens%lib!process_manager.thread_util_t.thread_set_blocking_endpoint_endpoint_ref_scheduler_ref_state_and_ipc_payload. (Int vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. core!option.Option. core!option.Option. core!option.Option. lib!define.ThreadState. lib!process_manager.thread.IPCPayLoad.) Bool)
(assert (forall ((thread_ptr! Int) (pre%thread_perm! vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) (thread_perm! vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) (blocking_endpoint_ptr! core!option.Option.) (endpoint_rev_ptr! core!option.Option.) (scheduler_rev_ptr! core!option.Option.) (state! lib!define.ThreadState.) (ipc_payload! lib!process_manager.thread.IPCPayLoad.)) (! (= (ens%lib!process_manager.thread_util_t.thread_set_blocking_endpoint_endpoint_ref_scheduler_ref_state_and_ipc_payload. thread_ptr! pre%thread_perm! thread_perm! blocking_endpoint_ptr! endpoint_rev_ptr! scheduler_rev_ptr! state! ipc_payload!) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!)) thread_ptr!) (= (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) state!) (= (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) scheduler_rev_ptr!) (= (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) blocking_endpoint_ptr!) (= (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) endpoint_rev_ptr!) (is-core!option.Option./None_ (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) ipc_payload!) (= (lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))))) :pattern ((ens%lib!process_manager.thread_util_t.thread_set_blocking_endpoint_endpoint_ref_scheduler_ref_state_and_ipc_payload. thread_ptr! pre%thread_perm! thread_perm! blocking_endpoint_ptr! endpoint_rev_ptr! scheduler_rev_ptr! state! ipc_payload!)))))
(set-info :comment ";; Function-Specs lib::process_manager::thread_util_t::thread_set_endpoint_descriptor")
(declare-fun req%lib!process_manager.thread_util_t.thread_set_endpoint_descriptor. (Int vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. Int core!option.Option.) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((thread_ptr! Int) (pre%thread_perm! vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) (endpoint_index! Int) (endpoint_op! core!option.Option.)) (! (= (req%lib!process_manager.thread_util_t.thread_set_endpoint_descriptor. thread_ptr! pre%thread_perm! endpoint_index! endpoint_op!) (and (=> %%global_location_label%%21 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))) (=> %%global_location_label%%22 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)) thread_ptr!)) (=> %%global_location_label%%23 (and (<= 0 endpoint_index!) (< endpoint_index! lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.?))))) :pattern ((req%lib!process_manager.thread_util_t.thread_set_endpoint_descriptor. thread_ptr! pre%thread_perm! endpoint_index! endpoint_op!)))))
(declare-fun ens%lib!process_manager.thread_util_t.thread_set_endpoint_descriptor. (Int vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. Int core!option.Option.) Bool)
(assert (forall ((thread_ptr! Int) (pre%thread_perm! vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) (thread_perm! vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) (endpoint_index! Int) (endpoint_op! core!option.Option.)) (! (= (ens%lib!process_manager.thread_util_t.thread_set_endpoint_descriptor. thread_ptr! pre%thread_perm! thread_perm! endpoint_index! endpoint_op!) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!)) thread_ptr!) (= (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!)))))))))) (vstd!seq.Seq.update.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))))) (I endpoint_index!) (Poly%core!option.Option. endpoint_op!))) (= (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))))) :pattern ((ens%lib!process_manager.thread_util_t.thread_set_endpoint_descriptor. thread_ptr! pre%thread_perm! thread_perm! endpoint_index! endpoint_op!)))))
(set-info :comment ";; Function-Specs lib::process_manager::thread_util_t::thread_set_state")
(declare-fun req%lib!process_manager.thread_util_t.thread_set_state. (Int vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. lib!define.ThreadState.) Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((thread_ptr! Int) (pre%thread_perm! vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) (state! lib!define.ThreadState.)) (! (= (req%lib!process_manager.thread_util_t.thread_set_state. thread_ptr! pre%thread_perm! state!) (and (=> %%global_location_label%%24 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))) (=> %%global_location_label%%25 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)) thread_ptr!)))) :pattern ((req%lib!process_manager.thread_util_t.thread_set_state. thread_ptr! pre%thread_perm! state!)))))
(declare-fun ens%lib!process_manager.thread_util_t.thread_set_state. (Int vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. lib!define.ThreadState.) Bool)
(assert (forall ((thread_ptr! Int) (pre%thread_perm! vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) (thread_perm! vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) (state! lib!define.ThreadState.)) (! (= (ens%lib!process_manager.thread_util_t.thread_set_state. thread_ptr! pre%thread_perm! thread_perm! state!) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!)) thread_ptr!) (= (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) state!) (= (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))))) :pattern ((ens%lib!process_manager.thread_util_t.thread_set_state. thread_ptr! pre%thread_perm! thread_perm! state!)))))
(set-info :comment ";; Function-Specs lib::process_manager::thread_util_t::thread_set_current_cpu")
(declare-fun req%lib!process_manager.thread_util_t.thread_set_current_cpu. (Int vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. core!option.Option.) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((thread_ptr! Int) (pre%thread_perm! vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) (cpu_id! core!option.Option.)) (! (= (req%lib!process_manager.thread_util_t.thread_set_current_cpu. thread_ptr! pre%thread_perm! cpu_id!) (and (=> %%global_location_label%%26 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))) (=> %%global_location_label%%27 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)) thread_ptr!)))) :pattern ((req%lib!process_manager.thread_util_t.thread_set_current_cpu. thread_ptr! pre%thread_perm! cpu_id!)))))
(declare-fun ens%lib!process_manager.thread_util_t.thread_set_current_cpu. (Int vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. core!option.Option.) Bool)
(assert (forall ((thread_ptr! Int) (pre%thread_perm! vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) (thread_perm! vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) (cpu_id! core!option.Option.)) (! (= (ens%lib!process_manager.thread_util_t.thread_set_current_cpu. thread_ptr! pre%thread_perm! thread_perm! cpu_id!) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!)) thread_ptr!) (= (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) cpu_id!) (= (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))))) :pattern ((ens%lib!process_manager.thread_util_t.thread_set_current_cpu. thread_ptr! pre%thread_perm! thread_perm! cpu_id!)))))
(set-info :comment ";; Function-Specs lib::process_manager::thread_util_t::thread_set_trap_frame_fast")
(declare-fun req%lib!process_manager.thread_util_t.thread_set_trap_frame_fast. (Int vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. lib!trap.Registers.) Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((thread_ptr! Int) (pre%thread_perm! vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) (pt_regs! lib!trap.Registers.)) (! (= (req%lib!process_manager.thread_util_t.thread_set_trap_frame_fast. thread_ptr! pre%thread_perm! pt_regs!) (and (=> %%global_location_label%%28 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))) (=> %%global_location_label%%29 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)) thread_ptr!)))) :pattern ((req%lib!process_manager.thread_util_t.thread_set_trap_frame_fast. thread_ptr! pre%thread_perm! pt_regs!)))))
(declare-fun ens%lib!process_manager.thread_util_t.thread_set_trap_frame_fast. (Int vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. lib!trap.Registers.) Bool)
(assert (forall ((thread_ptr! Int) (pre%thread_perm! vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) (thread_perm! vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.) (pt_regs! lib!trap.Registers.)) (! (= (ens%lib!process_manager.thread_util_t.thread_set_trap_frame_fast. thread_ptr! pre%thread_perm! thread_perm! pt_regs!) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!)) thread_ptr!) (= (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))) (lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. pre%thread_perm!)))))))) (= (lib!trap.impl&%0.spec_unwrap.? (Poly%lib!trap.TrapFrameOption. (lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>. thread_perm!))))))))) pt_regs!))) :pattern ((ens%lib!process_manager.thread_util_t.thread_set_trap_frame_fast. thread_ptr! pre%thread_perm! thread_perm! pt_regs!)))))
(set-info :comment ";; Function-Axioms lib::define::MAX_NUM_THREADS_PER_PROC")
(assert (fuel_bool_default fuel%lib!define.MAX_NUM_THREADS_PER_PROC.))
(assert (=> (fuel_bool fuel%lib!define.MAX_NUM_THREADS_PER_PROC.) (= lib!define.MAX_NUM_THREADS_PER_PROC.? 128)))
(assert (uInv SZ lib!define.MAX_NUM_THREADS_PER_PROC.?))
(set-info :comment ";; Function-Specs lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_resolve")
(declare-fun req%lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (index! Poly)) (! (= (req%lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve. T&. T& N&. N& self! index!) (=> %%global_location_label%%30 (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& self! index!))) :pattern ((req%lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve. T&. T& N&. N& self! index!)))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_resolve")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (index! Poly)) (! (=> (and (has_type self! (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type index! (SINT 32))) (has_type (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& self! index!) T&)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& self! index!)))))
(set-info :comment ";; Function-Specs lib::process_manager::proc_util_t::proc_push_thread")
(declare-fun req%lib!process_manager.proc_util_t.proc_push_thread. (Int vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. Int) Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((proc_ptr! Int) (pre%proc_perm! vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.) (thread_ptr! Int)) (! (= (req%lib!process_manager.proc_util_t.proc_push_thread. proc_ptr! pre%proc_perm! thread_ptr!) (and (=> %%global_location_label%%31 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!)))) (=> %%global_location_label%%32 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!)) proc_ptr!)) (=> %%global_location_label%%33 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!)))))))))) (=> %%global_location_label%%34 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!)))))))))) (=> %%global_location_label%%35 (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!))))))))) lib!define.MAX_NUM_THREADS_PER_PROC.?)) (=> %%global_location_label%%36 (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!))))))))) (I thread_ptr!)) false)))) :pattern ((req%lib!process_manager.proc_util_t.proc_push_thread. proc_ptr! pre%proc_perm! thread_ptr!)))))
(declare-fun ens%lib!process_manager.proc_util_t.proc_push_thread. (Int vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. Int Int) Bool)
(assert (forall ((proc_ptr! Int) (pre%proc_perm! vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.) (proc_perm! vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.) (thread_ptr! Int) (ret! Int)) (! (= (ens%lib!process_manager.proc_util_t.proc_push_thread. proc_ptr! pre%proc_perm! proc_perm! thread_ptr! ret!) (and (iInv 32 ret!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!)) proc_ptr!) (ext_eq false (UINT SZ) (I (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!)))))))) (I (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!))))))))) (ext_eq false (SINT 32) (I (lib!process_manager.process.Process./Process/rev_ptr (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!)))))))) (I (lib!process_manager.process.Process./Process/rev_ptr (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!)))))))) (I (lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!))))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.process.Process./Process/ioid (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!)))))))) (Poly%core!option.Option. (lib!process_manager.process.Process./Process/ioid (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!))))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!))))))))) (I thread_ptr!))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!))))))))) (Add (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!))))))))) 1)) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!)))))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!)))))))) index$) (not (= (%I index$) ret!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!)))))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!)))))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. pre%proc_perm!)))))))) index$)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!)))))))) (I ret!)) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!)))))))) (I ret!))) thread_ptr!) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>. proc_perm!))))))))))) :pattern ((ens%lib!process_manager.proc_util_t.proc_push_thread. proc_ptr! pre%proc_perm! proc_perm! thread_ptr! ret!)))))
(set-info :comment ";; Function-Axioms lib::define::MAX_CONTAINER_SCHEDULER_LEN")
(assert (fuel_bool_default fuel%lib!define.MAX_CONTAINER_SCHEDULER_LEN.))
(assert (=> (fuel_bool fuel%lib!define.MAX_CONTAINER_SCHEDULER_LEN.) (= lib!define.MAX_CONTAINER_SCHEDULER_LEN.? 10)))
(assert (uInv SZ lib!define.MAX_CONTAINER_SCHEDULER_LEN.?))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::skip")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.skip.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.skip.) (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (= (vstd!seq.impl&%0.skip.? A&. A& self! n!) (vstd!seq.Seq.subrange.? A&. A& self! n! (I (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type n! INT)) (has_type (vstd!seq.impl&%0.skip.? A&. A& self! n!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)))))
(set-info :comment ";; Function-Axioms lib::define::CONTAINER_PROC_LIST_LEN")
(assert (fuel_bool_default fuel%lib!define.CONTAINER_PROC_LIST_LEN.))
(assert (=> (fuel_bool fuel%lib!define.CONTAINER_PROC_LIST_LEN.) (= lib!define.CONTAINER_PROC_LIST_LEN.? 10)))
(assert (uInv SZ lib!define.CONTAINER_PROC_LIST_LEN.?))
(set-info :comment ";; Function-Axioms lib::define::CONTAINER_CHILD_LIST_LEN")
(assert (fuel_bool_default fuel%lib!define.CONTAINER_CHILD_LIST_LEN.))
(assert (=> (fuel_bool fuel%lib!define.CONTAINER_CHILD_LIST_LEN.) (= lib!define.CONTAINER_CHILD_LIST_LEN.? 10)))
(assert (uInv SZ lib!define.CONTAINER_CHILD_LIST_LEN.?))
(set-info :comment ";; Function-Axioms lib::define::CONTAINER_ENDPOINT_LIST_LEN")
(assert (fuel_bool_default fuel%lib!define.CONTAINER_ENDPOINT_LIST_LEN.))
(assert (=> (fuel_bool fuel%lib!define.CONTAINER_ENDPOINT_LIST_LEN.) (= lib!define.CONTAINER_ENDPOINT_LIST_LEN.? 10)))
(assert (uInv SZ lib!define.CONTAINER_ENDPOINT_LIST_LEN.?))
(set-info :comment ";; Function-Axioms lib::process_manager::endpoint::Endpoint::get_owning_threads")
(assert (fuel_bool_default fuel%lib!process_manager.endpoint.impl&%0.get_owning_threads.))
(assert (=> (fuel_bool fuel%lib!process_manager.endpoint.impl&%0.get_owning_threads.) (forall ((self! Poly)) (! (= (lib!process_manager.endpoint.impl&%0.get_owning_threads.? self!) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. self!))) :pattern ((lib!process_manager.endpoint.impl&%0.get_owning_threads.? self!))))))
(set-info :comment ";; Function-Specs lib::process_manager::endpoint_util_t::endpoint_add_ref")
(declare-fun req%lib!process_manager.endpoint_util_t.endpoint_add_ref. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int) Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (thread_ptr! Int)) (! (= (req%lib!process_manager.endpoint_util_t.endpoint_add_ref. endpoint_ptr! pre%endpoint_perm! thread_ptr!) (and (=> %%global_location_label%%37 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))) (=> %%global_location_label%%38 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)) endpoint_ptr!)) (=> %%global_location_label%%39 (not (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))) (- (uHi SZ) 1)))) (=> %%global_location_label%%40 (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.endpoint.impl&%0.get_owning_threads.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))) (I thread_ptr!)) false)))) :pattern ((req%lib!process_manager.endpoint_util_t.endpoint_add_ref. endpoint_ptr! pre%endpoint_perm! thread_ptr!)))))
(declare-fun ens%lib!process_manager.endpoint_util_t.endpoint_add_ref. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int) Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (thread_ptr! Int)) (! (= (ens%lib!process_manager.endpoint_util_t.endpoint_add_ref. endpoint_ptr! pre%endpoint_perm! endpoint_perm! thread_ptr!) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)) endpoint_ptr!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (Add (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))) 1)) (= (lib!process_manager.endpoint.impl&%0.get_owning_threads.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.endpoint.impl&%0.get_owning_threads.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))) (I thread_ptr!)))))) :pattern ((ens%lib!process_manager.endpoint_util_t.endpoint_add_ref. endpoint_ptr! pre%endpoint_perm! endpoint_perm! thread_ptr!)))))
(set-info :comment ";; Function-Specs lib::process_manager::endpoint_util_t::endpoint_pop_head")
(declare-fun req%lib!process_manager.endpoint_util_t.endpoint_pop_head. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.)) (! (= (req%lib!process_manager.endpoint_util_t.endpoint_pop_head. endpoint_ptr! pre%endpoint_perm!) (and (=> %%global_location_label%%41 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))) (=> %%global_location_label%%42 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)) endpoint_ptr!)) (=> %%global_location_label%%43 (> (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) 0)))) :pattern ((req%lib!process_manager.endpoint_util_t.endpoint_pop_head. endpoint_ptr! pre%endpoint_perm!)))))
(declare-fun ens%lib!process_manager.endpoint_util_t.endpoint_pop_head. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. tuple%2.) Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (ret! tuple%2.)) (! (= (ens%lib!process_manager.endpoint_util_t.endpoint_pop_head. endpoint_ptr! pre%endpoint_perm! endpoint_perm! ret!) (and (has_type (Poly%tuple%2. ret!) (TYPE%tuple%2. $ (UINT SZ) $ (SINT 32))) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)) endpoint_ptr!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (Sub (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) 1)) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (vstd!seq.Seq.subrange.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) (I 1) (I (vstd!seq.Seq.len.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))))))) (= (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))) (vstd!seq.Seq.index.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) (I 0))) (= (vstd!seq.Seq.index.? $ (SINT 32) (Poly%vstd!seq.Seq<i32.>. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))))) (I 0)) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (not (= index$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (not (= index$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (not (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (vstd!seq_lib.impl&%0.no_duplicates.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))))))) :pattern ((ens%lib!process_manager.endpoint_util_t.endpoint_pop_head. endpoint_ptr! pre%endpoint_perm! endpoint_perm! ret!)))))
(set-info :comment ";; Function-Axioms lib::define::MAX_NUM_THREADS_PER_ENDPOINT")
(assert (fuel_bool_default fuel%lib!define.MAX_NUM_THREADS_PER_ENDPOINT.))
(assert (=> (fuel_bool fuel%lib!define.MAX_NUM_THREADS_PER_ENDPOINT.) (= lib!define.MAX_NUM_THREADS_PER_ENDPOINT.? 128)))
(assert (uInv SZ lib!define.MAX_NUM_THREADS_PER_ENDPOINT.?))
(set-info :comment ";; Function-Specs lib::process_manager::endpoint_util_t::endpoint_push")
(declare-fun req%lib!process_manager.endpoint_util_t.endpoint_push. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int) Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (t_ptr! Int)) (! (= (req%lib!process_manager.endpoint_util_t.endpoint_push. endpoint_ptr! pre%endpoint_perm! t_ptr!) (and (=> %%global_location_label%%44 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))) (=> %%global_location_label%%45 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)) endpoint_ptr!)) (=> %%global_location_label%%46 (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) lib!define.MAX_NUM_THREADS_PER_ENDPOINT.?)))) :pattern ((req%lib!process_manager.endpoint_util_t.endpoint_push. endpoint_ptr! pre%endpoint_perm! t_ptr!)))))
(declare-fun ens%lib!process_manager.endpoint_util_t.endpoint_push. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int Int) Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (t_ptr! Int) (ret! Int)) (! (= (ens%lib!process_manager.endpoint_util_t.endpoint_push. endpoint_ptr! pre%endpoint_perm! endpoint_perm! t_ptr! ret!) (and (iInv 32 ret!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)) endpoint_ptr!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) (I t_ptr!))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (Add (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) 1)) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (not (= (%I index$) ret!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) (I ret!)) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) (I ret!))) t_ptr!) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))))) :pattern ((ens%lib!process_manager.endpoint_util_t.endpoint_push. endpoint_ptr! pre%endpoint_perm! endpoint_perm! t_ptr! ret!)))))
(set-info :comment ";; Function-Specs lib::process_manager::endpoint_util_t::endpoint_push_and_set_state")
(declare-fun req%lib!process_manager.endpoint_util_t.endpoint_push_and_set_state. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int lib!define.EndpointState.) Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (t_ptr! Int) (queue_state! lib!define.EndpointState.)) (! (= (req%lib!process_manager.endpoint_util_t.endpoint_push_and_set_state. endpoint_ptr! pre%endpoint_perm! t_ptr! queue_state!) (and (=> %%global_location_label%%47 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))) (=> %%global_location_label%%48 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)) endpoint_ptr!)) (=> %%global_location_label%%49 (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) lib!define.MAX_NUM_THREADS_PER_ENDPOINT.?)))) :pattern ((req%lib!process_manager.endpoint_util_t.endpoint_push_and_set_state. endpoint_ptr! pre%endpoint_perm! t_ptr! queue_state!)))))
(declare-fun ens%lib!process_manager.endpoint_util_t.endpoint_push_and_set_state. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int lib!define.EndpointState. Int) Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (t_ptr! Int) (queue_state! lib!define.EndpointState.) (ret! Int)) (! (= (ens%lib!process_manager.endpoint_util_t.endpoint_push_and_set_state. endpoint_ptr! pre%endpoint_perm! endpoint_perm! t_ptr! queue_state! ret!) (and (iInv 32 ret!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)) endpoint_ptr!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) queue_state!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) (I t_ptr!))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (Add (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) 1)) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (not (= (%I index$) ret!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) (I ret!)) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) (I ret!))) t_ptr!) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))))) :pattern ((ens%lib!process_manager.endpoint_util_t.endpoint_push_and_set_state. endpoint_ptr! pre%endpoint_perm! endpoint_perm! t_ptr! queue_state! ret!)))))
(set-info :comment ";; Function-Axioms lib::define::MEM_4k_MASK")
(assert (fuel_bool_default fuel%lib!define.MEM_4k_MASK.))
(assert (=> (fuel_bool fuel%lib!define.MEM_4k_MASK.) (= lib!define.MEM_4k_MASK.? 281474976706560)))
(assert (uInv 64 lib!define.MEM_4k_MASK.?))
(set-info :comment ";; Function-Axioms lib::define::KERNEL_MEM_END_L4INDEX")
(assert (fuel_bool_default fuel%lib!define.KERNEL_MEM_END_L4INDEX.))
(assert (=> (fuel_bool fuel%lib!define.KERNEL_MEM_END_L4INDEX.) (= lib!define.KERNEL_MEM_END_L4INDEX.? 1)))
(assert (uInv SZ lib!define.KERNEL_MEM_END_L4INDEX.?))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::spec_va_4k_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.spec_va_4k_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.spec_va_4k_valid.) (forall ((va! Poly)) (! (= (lib!util.page_ptr_util_u.spec_va_4k_valid.? va!) (and (= (uClip SZ (bitand (I (%I va!)) (I (uClip SZ (uClip 64 (bitnot (I lib!define.MEM_4k_MASK.?))))))) 0) (>= (uClip 64 (bitand (I (uClip 64 (bitshr (I (uClip 64 (%I va!))) (I 39)))) (I 511))) (uClip 64 lib!define.KERNEL_MEM_END_L4INDEX.?)))) :pattern ((lib!util.page_ptr_util_u.spec_va_4k_valid.? va!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::container_dom")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.) (forall ((self! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::container_dom")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.container_dom.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.container_dom.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.container_dom.? self!) (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) :pattern ((lib!process_manager.spec_impl.impl&%0.container_dom.? self!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::disjoint")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.disjoint.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.disjoint.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.disjoint.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (not (vstd!set.impl&%0.contains.? A&. A& s2! a$)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.disjoint.? A&. A& self! s2!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::wf")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? self!) (and (and (and (and (and (and (and (lib!process_manager.container_tree_spec_impl.impl&%0.container_perms_wf.? self!) (lib!process_manager.container_tree_spec_impl.impl&%0.container_root_wf.? self!)) (lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_list_wf.? self!)) (lib!process_manager.container_tree_spec_impl.impl&%0.containers_linkedlist_wf.? self!)) (lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_depth_wf.? self!)) (lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_wf.? self!)) (lib!process_manager.container_tree_spec_impl.impl&%0.container_uppertree_seq_wf.? self!)) (lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_exclusive.? self!))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::cpus_wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.cpus_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.cpus_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.cpus_wf.? self!) (lib!array.impl&%0.wf.? $ TYPE%lib!process_manager.cpu.Cpu. $ (CONST_INT 32) (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) :pattern ((lib!process_manager.spec_impl.impl&%1.cpus_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::spec_get_container")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.) (forall ((self! Poly) (c_ptr! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? self! c_ptr!) (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr!))))))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? self! c_ptr!))))))
(assert (forall ((self! Poly) (c_ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (has_type c_ptr! (UINT SZ))) (has_type (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? self! c_ptr!)) TYPE%lib!process_manager.container.Container.)) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? self! c_ptr!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::container_cpu_wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.container_cpu_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.container_cpu_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.container_cpu_wf.? self!) (and (and (forall ((cpu_i$ Poly)) (! (=> (has_type cpu_i$ (UINT SZ)) (=> (and (<= 0 (%I cpu_i$)) (< (%I cpu_i$) lib!define.NUM_CPUS.?)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (I (lib!process_manager.cpu.Cpu./Cpu/owning_container (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_i$))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_i$)))) (forall ((cpu_i$ Poly)) (! (=> (has_type cpu_i$ (UINT SZ)) (=> (and (<= 0 (%I cpu_i$)) (< (%I cpu_i$) lib!define.NUM_CPUS.?)) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!array_set.impl&%0.view.? $ (CONST_INT 32) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.cpu.Cpu./Cpu/owning_container (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_i$))))))))))) cpu_i$))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_i$))))) (forall ((cpu_i$ Poly)) (! (=> (has_type cpu_i$ (UINT SZ)) (=> (and (<= 0 (%I cpu_i$)) (< (%I cpu_i$) lib!define.NUM_CPUS.?)) (=> (= (lib!process_manager.cpu.Cpu./Cpu/active (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_i$))) false) (is-core!option.Option./None_ (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_i$))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_i$)))))) :pattern ((lib!process_manager.spec_impl.impl&%1.container_cpu_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::memory_disjoint")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.memory_disjoint.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.memory_disjoint.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.memory_disjoint.? self!) (and (and (and (and (and (vstd!set.impl&%0.disjoint.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (vstd!set.impl&%0.disjoint.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))))) (vstd!set.impl&%0.disjoint.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))))) (vstd!set.impl&%0.disjoint.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))))) (vstd!set.impl&%0.disjoint.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))))) (vstd!set.impl&%0.disjoint.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))))) :pattern ((lib!process_manager.spec_impl.impl&%1.memory_disjoint.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::container_perms_wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.container_perms_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.container_perms_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.container_perms_wf.? self!) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) c_ptr$) (and (and (and (and (and (and (lib!array_set.impl&%0.wf.? $ (CONST_INT 32) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$)))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$))))))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$))))))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$))))))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) c_ptr$))))) :pattern ((lib!process_manager.spec_impl.impl&%1.container_perms_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::processes_container_wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.processes_container_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.processes_container_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.processes_container_wf.? self!) (and (forall ((c_ptr$ Poly) (child_p_ptr$ Poly)) (! (=> (and (has_type c_ptr$ (UINT SZ)) (has_type child_p_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$)))))) child_p_ptr$)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) child_p_ptr$) (= (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) child_p_ptr$))))))) (%I c_ptr$))))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$)))))) child_p_ptr$)))) (forall ((p_ptr$ Poly)) (! (=> (has_type p_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) p_ptr$) (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (I (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr$))))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!seq_lib.impl&%0.to_set.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr$))))))))))))))) p_ptr$)) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr$))))))))))))) (I (lib!process_manager.process.Process./Process/rev_ptr (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr$)))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr$))))))))))))) (I (lib!process_manager.process.Process./Process/rev_ptr (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr$))))))))) p_ptr$)))) :pattern ((lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr$)))))))))))) :pattern ((lib!process_manager.spec_impl.impl&%1.processes_container_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::processes_wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.processes_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.processes_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.processes_wf.? self!) (forall ((p_ptr$ Poly)) (! (=> (has_type p_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) p_ptr$) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr$))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr$)) (%I p_ptr$))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) p_ptr$))))) :pattern ((lib!process_manager.spec_impl.impl&%1.processes_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::threads_process_wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.threads_process_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.threads_process_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.threads_process_wf.? self!) (and (and (forall ((p_ptr$ Poly)) (! (=> (has_type p_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) p_ptr$) (and (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr$))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr$)))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) p_ptr$)))) (forall ((p_ptr$ Poly) (child_t_ptr$ Poly)) (! (=> (and (has_type p_ptr$ (UINT SZ)) (has_type child_t_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) p_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr$))))))))) child_t_ptr$)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) child_t_ptr$) (= (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) child_t_ptr$))))))) (%I p_ptr$))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) p_ptr$) (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) child_t_ptr$)))))))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr$))))))))) child_t_ptr$))))) (forall ((t_ptr$ Poly)) (! (=> (has_type t_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) t_ptr$) (and (and (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) (I (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))))))))))) t_ptr$)) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))))))))) (I (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))))))))) (I (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))) t_ptr$)) (= (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))))))))) (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))))) :pattern ((lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))) :pattern ((lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))))) :pattern ((lib!process_manager.spec_impl.impl&%1.threads_process_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::spec_get_payload_as_va_range")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.))
(define-fun is-lib!process_manager.thread.IPCPayLoad./Pages_ ((c lib!process_manager.thread.IPCPayLoad.)) Bool ((_ is lib!process_manager.thread.IPCPayLoad./Pages) c))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? self!) (ite (is-lib!process_manager.thread.IPCPayLoad./Pages_ (%Poly%lib!process_manager.thread.IPCPayLoad. self!)) (let ((va_range$ (lib!process_manager.thread.IPCPayLoad./Pages/va_range (%Poly%lib!process_manager.thread.IPCPayLoad. self!)))) (core!option.Option./Some (Poly%lib!va_range.VaRange4K. va_range$))) core!option.Option./None)) :pattern ((lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? self!)) (TYPE%core!option.Option. $ TYPE%lib!va_range.VaRange4K.))) :pattern ((lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? self!)))))
(set-info :comment ";; Function-Axioms lib::va_range::VaRange4K::wf")
(assert (fuel_bool_default fuel%lib!va_range.impl&%2.wf.))
(assert (=> (fuel_bool fuel%lib!va_range.impl&%2.wf.) (forall ((self! Poly)) (! (= (lib!va_range.impl&%2.wf.? self!) (and (and (and (and (and (< (Add (lib!va_range.VaRange4K./VaRange4K/start (%Poly%lib!va_range.VaRange4K. self!)) (Mul (lib!va_range.VaRange4K./VaRange4K/len (%Poly%lib!va_range.VaRange4K. self!)) 4096)) (- (uHi SZ) 1)) (lib!util.page_ptr_util_u.spec_va_4k_valid.? (I (lib!va_range.VaRange4K./VaRange4K/start (%Poly%lib!va_range.VaRange4K. self!))))) (= (vstd!seq.Seq.len.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!va_range.impl&%2.view.? self!))) (lib!va_range.VaRange4K./VaRange4K/len (%Poly%lib!va_range.VaRange4K. self!)))) (vstd!seq_lib.impl&%0.no_duplicates.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!va_range.impl&%2.view.? self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!va_range.VaRange4K./VaRange4K/len (%Poly%lib!va_range.VaRange4K. self!)))) (lib!util.page_ptr_util_u.spec_va_4k_valid.? (vstd!seq.Seq.index.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!va_range.impl&%2.view.? self!)) i$)))) :pattern ((vstd!seq.Seq.index.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!va_range.impl&%2.view.? self!)) i$))))) (lib!va_range.impl&%2.view_match_spec.? self!))) :pattern ((lib!va_range.impl&%2.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::threads_perms_wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.threads_perms_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.threads_perms_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.threads_perms_wf.? self!) (forall ((t_ptr$ Poly)) (! (=> (has_type t_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) t_ptr$) (and (and (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)) (%I t_ptr$))) (lib!array.impl&%0.wf.? $ (TYPE%core!option.Option. $ (UINT SZ)) $ (CONST_INT 128) (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))) (=> (is-core!option.Option./Some_ (lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))) (lib!va_range.impl&%2.wf.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) t_ptr$))))) :pattern ((lib!process_manager.spec_impl.impl&%1.threads_perms_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::endpoint_perms_wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.endpoint_perms_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.endpoint_perms_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.endpoint_perms_wf.? self!) (forall ((e_ptr$ Poly)) (! (=> (has_type e_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) e_ptr$) (and (and (and (and (and (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$)) (%I e_ptr$))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$)))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$)))))))))) (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$)))))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$))))))) (vstd!set.impl&%0.len.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$))))))))))) (vstd!set.impl&%0.subset_of.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$)))))))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) e_ptr$))))) :pattern ((lib!process_manager.spec_impl.impl&%1.endpoint_perms_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_thread_owns_endpoint")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.spec_get_thread_owns_endpoint.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.spec_get_thread_owns_endpoint.) (forall ((self! Poly) (thread_ptr! Poly) (endpoint_ptr! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.spec_get_thread_owns_endpoint.? self! thread_ptr! endpoint_ptr!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (and (<= 0 (%I i$)) (< (%I i$) lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.?)) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) thread_ptr!)))))))))) i$)))) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) thread_ptr!)))))))))) i$))) endpoint_ptr!))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) thread_ptr!)))))))))) i$))))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_thread_owns_endpoint.? self! thread_ptr! endpoint_ptr!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::threads_endpoint_descriptors_wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.threads_endpoint_descriptors_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.threads_endpoint_descriptors_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.threads_endpoint_descriptors_wf.? self!) (and (forall ((t_ptr$ Poly) (i$ Poly)) (! (=> (and (has_type t_ptr$ (UINT SZ)) (has_type i$ (UINT SZ))) (=> (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) t_ptr$) (and (<= 0 (%I i$)) (< (%I i$) lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.?))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))) i$)))) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))) i$)))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))) i$))))))))))) t_ptr$)))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))) i$)))) (forall ((e_ptr$ Poly) (t_ptr$ Poly)) (! (=> (and (has_type e_ptr$ (UINT SZ)) (has_type t_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) e_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$)))))))) t_ptr$)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) t_ptr$) (lib!process_manager.spec_impl.impl&%0.spec_get_thread_owns_endpoint.? self! t_ptr$ e_ptr$)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$)))))))) t_ptr$)) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_thread_owns_endpoint.? self! t_ptr$ e_ptr$)))))) :pattern ((lib!process_manager.spec_impl.impl&%1.threads_endpoint_descriptors_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::endpoints_queue_wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.endpoints_queue_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.endpoints_queue_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.endpoints_queue_wf.? self!) (and (forall ((t_ptr$ Poly)) (! (=> (has_type t_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) t_ptr$) (= (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))) lib!define.ThreadState./BLOCKED)) (and (and (and (and (and (is-core!option.Option./Some_ (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))) (is-core!option.Option./Some_ (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))))) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))))))))))))) t_ptr$)) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))))))))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))))))))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))))) t_ptr$)))) :pattern ((lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))) :pattern ((lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))) :pattern ((lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))) (forall ((e_ptr$ Poly) (i$ Poly)) (! (=> (and (has_type e_ptr$ (UINT SZ)) (has_type i$ INT)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) e_ptr$) (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$))))))))))))) (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) (vstd!seq.Seq.index.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$))))))))) i$)) (= (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (vstd!seq.Seq.index.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$))))))))) i$)))))))) (core!option.Option./Some e_ptr$))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$)))))))) (vstd!seq.Seq.index.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$))))))))) i$))) (= (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (vstd!seq.Seq.index.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$))))))))) i$)))))))) lib!define.ThreadState./BLOCKED)))) :pattern ((vstd!seq.Seq.index.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$))))))))) i$)))))) :pattern ((lib!process_manager.spec_impl.impl&%1.endpoints_queue_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::endpoints_container_wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.endpoints_container_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.endpoints_container_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.endpoints_container_wf.? self!) (and (forall ((c_ptr$ Poly) (child_e_ptr$ Poly)) (! (=> (and (has_type c_ptr$ (UINT SZ)) (has_type child_e_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$)))))) child_e_ptr$)) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) child_e_ptr$) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) child_e_ptr$))))))) (%I c_ptr$))))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$)))))) child_e_ptr$)))) (forall ((e_ptr$ Poly)) (! (=> (has_type e_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) e_ptr$) (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (I (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$))))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!seq_lib.impl&%0.to_set.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$))))))))))))))) e_ptr$)) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$))))))))))))) (I (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$)))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$))))))))))))) (I (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$))))))))) e_ptr$)))) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) e_ptr$)))))))))))) :pattern ((lib!process_manager.spec_impl.impl&%1.endpoints_container_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::schedulers_wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.schedulers_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.schedulers_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.schedulers_wf.? self!) (and (forall ((t_ptr$ Poly)) (! (=> (has_type t_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) t_ptr$) (= (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))) lib!define.ThreadState./SCHEDULED)) (and (and (and (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))))))) t_ptr$) (is-core!option.Option./Some_ (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))))) t_ptr$)))) :pattern ((lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))) :pattern ((lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))) (forall ((c_ptr$ Poly) (t_ptr$ Poly)) (! (=> (and (has_type c_ptr$ (UINT SZ)) (has_type t_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$)))))) t_ptr$)) (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) t_ptr$) (= (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))) (%I c_ptr$))) (= (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))) lib!define.ThreadState./SCHEDULED)))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$)))))) t_ptr$)) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) c_ptr$) (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) c_ptr$) (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))))) :pattern ((lib!process_manager.spec_impl.impl&%1.schedulers_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::pcid_ioid_wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.pcid_ioid_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.pcid_ioid_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.pcid_ioid_wf.? self!) (and (forall ((p_ptr_i$ Poly) (p_ptr_j$ Poly)) (! (=> (and (has_type p_ptr_i$ (UINT SZ)) (has_type p_ptr_j$ (UINT SZ))) (=> (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) p_ptr_i$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) p_ptr_j$)) (not (= p_ptr_i$ p_ptr_j$))) (not (= (lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr_i$))))))) (lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr_j$))))))))))) :pattern ((lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr_i$))))))) (lib!process_manager.process.Process./Process/pcid (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr_j$)))))))))) (forall ((p_ptr_i$ Poly) (p_ptr_j$ Poly)) (! (=> (and (has_type p_ptr_i$ (UINT SZ)) (has_type p_ptr_j$ (UINT SZ))) (=> (and (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) p_ptr_i$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) p_ptr_j$)) (not (= p_ptr_i$ p_ptr_j$))) (is-core!option.Option./Some_ (lib!process_manager.process.Process./Process/ioid (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr_i$))))))))) (is-core!option.Option./Some_ (lib!process_manager.process.Process./Process/ioid (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr_j$))))))))) (not (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.process.Process./Process/ioid (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr_i$)))))))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.process.Process./Process/ioid (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr_j$)))))))))))))) :pattern ((lib!process_manager.process.Process./Process/ioid (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr_i$))))))) (lib!process_manager.process.Process./Process/ioid (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) p_ptr_j$)))))))))))) :pattern ((lib!process_manager.spec_impl.impl&%1.pcid_ioid_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::threads_cpu_wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.threads_cpu_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.threads_cpu_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.threads_cpu_wf.? self!) (and (and (forall ((t_ptr$ Poly)) (! (=> (has_type t_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) t_ptr$) (= (is-core!option.Option./Some_ (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))) (= (lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))) lib!define.ThreadState./RUNNING)))) :pattern ((lib!process_manager.thread.Thread./Thread/state (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))) :pattern ((lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))) (forall ((t_ptr$ Poly)) (! (=> (has_type t_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) t_ptr$) (is-core!option.Option./Some_ (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))) (and (and (and (let ((tmp%%$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))))))) (and (<= 0 tmp%%$) (< tmp%%$ lib!define.NUM_CPUS.?))) (is-core!option.Option./Some_ (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))))))))) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))))))))) t_ptr$)) (= (lib!process_manager.cpu.Cpu./Cpu/owning_container (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))))))) (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))))) :pattern ((lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))))) (forall ((cpu_i$ Poly)) (! (=> (has_type cpu_i$ (UINT SZ)) (=> (and (and (<= 0 (%I cpu_i$)) (< (%I cpu_i$) lib!define.NUM_CPUS.?)) (is-core!option.Option./Some_ (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_i$))))) (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_i$))))))) (is-core!option.Option./Some_ (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_i$))))))))))))))) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_i$)))))))))))))))) cpu_i$)) (= (lib!process_manager.cpu.Cpu./Cpu/owning_container (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_i$))) (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_i$))))))))))))))))) :pattern ((lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_i$)))))))) :pattern ((lib!process_manager.spec_impl.impl&%1.threads_cpu_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::threads_container_wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.threads_container_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.threads_container_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.threads_container_wf.? self!) (and (and (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) c_ptr$) (vstd!set.impl&%0.subset_of.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$))))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))))) :pattern ((lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$))))))) (forall ((c_ptr$ Poly) (t_ptr$ Poly)) (! (=> (and (has_type c_ptr$ (UINT SZ)) (has_type t_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) c_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$))))) t_ptr$)) (= (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))) (%I c_ptr$)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) c_ptr$))))) t_ptr$))))) (forall ((t_ptr$ Poly)) (! (=> (has_type t_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) t_ptr$) (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$))))))))))))) t_ptr$)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) t_ptr$)))))))))))))) :pattern ((lib!process_manager.spec_impl.impl&%1.threads_container_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::wf")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%1.wf.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%1.wf.? self!) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) (lib!process_manager.spec_impl.impl&%1.cpus_wf.? self!)) (lib!process_manager.spec_impl.impl&%1.container_cpu_wf.? self!)) (lib!process_manager.spec_impl.impl&%1.memory_disjoint.? self!)) (lib!process_manager.spec_impl.impl&%1.container_perms_wf.? self!)) (lib!process_manager.spec_impl.impl&%1.processes_container_wf.? self!)) (lib!process_manager.spec_impl.impl&%1.processes_wf.? self!)) (lib!process_manager.spec_impl.impl&%1.threads_process_wf.? self!)) (lib!process_manager.spec_impl.impl&%1.threads_perms_wf.? self!)) (lib!process_manager.spec_impl.impl&%1.endpoint_perms_wf.? self!)) (lib!process_manager.spec_impl.impl&%1.threads_endpoint_descriptors_wf.? self!)) (lib!process_manager.spec_impl.impl&%1.endpoints_queue_wf.? self!)) (lib!process_manager.spec_impl.impl&%1.endpoints_container_wf.? self!)) (lib!process_manager.spec_impl.impl&%1.schedulers_wf.? self!)) (lib!process_manager.spec_impl.impl&%1.pcid_ioid_wf.? self!)) (lib!process_manager.spec_impl.impl&%1.threads_cpu_wf.? self!)) (lib!process_manager.spec_impl.impl&%1.threads_container_wf.? self!))) :pattern ((lib!process_manager.spec_impl.impl&%1.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::page_closure")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.page_closure.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.page_closure.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.page_closure.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.union.? $ (UINT SZ) (vstd!set.impl&%0.union.? $ (UINT SZ) (vstd!set.impl&%0.union.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))))) :pattern ((lib!process_manager.spec_impl.impl&%0.page_closure.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::proc_dom")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.proc_dom.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.proc_dom.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.proc_dom.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))))) :pattern ((lib!process_manager.spec_impl.impl&%0.proc_dom.? self!))))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_proc")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_proc. (Poly Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((self! Poly) (proc_ptr! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_proc. self! proc_ptr!) (and (=> %%global_location_label%%50 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%51 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? self!)) proc_ptr!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_proc. self! proc_ptr!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_proc")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.spec_get_proc.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.spec_get_proc.) (forall ((self! Poly) (proc_ptr! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? self! proc_ptr!) (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) proc_ptr!))))))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_proc.? self! proc_ptr!))))))
(assert (forall ((self! Poly) (proc_ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type proc_ptr! (UINT SZ))) (has_type (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? self! proc_ptr!)) TYPE%lib!process_manager.process.Process.)) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_proc.? self! proc_ptr!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_container")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_container. (Poly Poly) Bool)
(declare-const %%global_location_label%%52 Bool)
(declare-const %%global_location_label%%53 Bool)
(assert (forall ((self! Poly) (container_ptr! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_container. self! container_ptr!) (and (=> %%global_location_label%%52 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%53 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.container_dom.? self!)) container_ptr!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_container. self! container_ptr!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_container")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.spec_get_container.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.spec_get_container.) (forall ((self! Poly) (container_ptr! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.spec_get_container.? self! container_ptr!) (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) container_ptr!)) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_container.? self! container_ptr!))))))
(assert (forall ((self! Poly) (container_ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type container_ptr! (UINT SZ))) (has_type (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container.? self! container_ptr!)) TYPE%lib!process_manager.container.Container.)) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_container.? self! container_ptr!)))))
(set-info :comment ";; Function-Specs lib::lemma::lemma_u::seq_push_lemma")
(declare-fun ens%lib!lemma.lemma_u.seq_push_lemma. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%lib!lemma.lemma_u.seq_push_lemma. A&. A&) (and (forall ((s$ Poly) (v$ Poly) (x$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type v$ A&) (has_type x$ A&)) (=> (vstd!seq_lib.impl&%0.contains.? A&. A& s$ x$) (and (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) v$) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) x$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) x$)))) (forall ((s$ Poly) (v$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type v$ A&)) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) v$)) :pattern ((vstd!seq.Seq.push.? A&. A& s$ v$)))) (forall ((s$ Poly) (v$ Poly) (x$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type v$ A&) (has_type x$ A&)) (=> (and (not (vstd!seq_lib.impl&%0.contains.? A&. A& s$ x$)) (not (= v$ x$))) (not (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) x$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) x$)))))) :pattern ((ens%lib!lemma.lemma_u.seq_push_lemma. A&. A&)))))
(set-info :comment ";; Function-Specs lib::lemma::lemma_u::seq_update_lemma")
(declare-fun ens%lib!lemma.lemma_u.seq_update_lemma. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%lib!lemma.lemma_u.seq_update_lemma. A&. A&) (and (forall ((s$ Poly) (i$ Poly) (j$ Poly) (v$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type i$ INT) (has_type j$ INT) (has_type v$ A&)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s$))) (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? A&. A& s$)))) (not (= i$ j$))) (and (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s$ j$ v$) i$) (vstd!seq.Seq.index.? A&. A& s$ i$)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s$ j$ v$) j$) v$)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s$ j$ v$) i$)))) (forall ((s$ Poly) (i$ Poly) (v$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type i$ INT) (has_type v$ A&)) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s$))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s$ i$ v$) i$) v$))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s$ i$ v$) i$)))))) :pattern ((ens%lib!lemma.lemma_u.seq_update_lemma. A&. A&)))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::remove")
(declare-fun req%vstd!seq_lib.impl&%0.remove. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!) (=> %%global_location_label%%54 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::remove")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.remove.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.remove.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) (vstd!seq.Seq.subrange.? A&. A& self! (I (Add (%I i!) 1)) (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::remove_value")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.remove_value.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.remove_value.) (forall ((A&. Dcr) (A& Type) (self! Poly) (val! Poly)) (! (= (vstd!seq_lib.impl&%0.remove_value.? A&. A& self! val!) (let ((index$ (vstd!seq_lib.impl&%0.index_of_first.? A&. A& self! val!))) (ite (is-core!option.Option./Some_ index$) (let ((i$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. index$)))))) (vstd!seq_lib.impl&%0.remove.? A&. A& self! (I i$))) self!))) :pattern ((vstd!seq_lib.impl&%0.remove_value.? A&. A& self! val!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (val! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type val! A&)) (has_type (vstd!seq_lib.impl&%0.remove_value.? A&. A& self! val!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.remove_value.? A&. A& self! val!)))))
(set-info :comment ";; Function-Specs lib::lemma::lemma_u::seq_skip_lemma")
(declare-fun ens%lib!lemma.lemma_u.seq_skip_lemma. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%lib!lemma.lemma_u.seq_skip_lemma. A&. A&) (and (forall ((s$ Poly) (v$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type v$ A&)) (=> (and (not (= (vstd!seq.Seq.index.? A&. A& s$ (I 0)) v$)) (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& s$)) (= (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s$ (I 1) (I (vstd!seq.Seq.len.? A&. A& s$))) v$) (vstd!seq_lib.impl&%0.contains.? A&. A& s$ v$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s$ (I 1) (I (vstd!seq.Seq.len.? A&. A& s$))) v$)))) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (=> (> (vstd!seq.Seq.len.? A&. A& s$) 0) (vstd!seq_lib.impl&%0.contains.? A&. A& s$ (vstd!seq.Seq.index.? A&. A& s$ (I 0))))) :pattern ((vstd!seq.Seq.index.? A&. A& s$ (I 0))))) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (=> (> (vstd!seq.Seq.len.? A&. A& s$) 0) (not (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s$ (I 1) (I (vstd!seq.Seq.len.? A&. A& s$))) (vstd!seq.Seq.index.? A&. A& s$ (I 0)))))) :pattern ((vstd!seq.Seq.index.? A&. A& s$ (I 0))))) (forall ((s$ Poly) (v$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type v$ A&)) (=> (and (= (vstd!seq.Seq.index.? A&. A& s$ (I 0)) v$) (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& s$)) (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) (vstd!seq.Seq.subrange.? A&. A& s$ (I 1) (I (vstd!seq.Seq.len.? A&. A& s$))) (vstd!seq_lib.impl&%0.remove_value.? A&. A& s$ v$)))) :pattern ((vstd!seq_lib.impl&%0.remove_value.? A&. A& s$ v$)))) (forall ((s$ Poly) (i$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type i$ INT)) (=> (and (<= 0 (%I i$)) (< (%I i$) (Sub (vstd!seq.Seq.len.? A&. A& s$) 1))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s$ (I 1) (I (vstd!seq.Seq.len.? A&. A& s$))) i$) (vstd!seq.Seq.index.? A&. A& s$ (I (Add (%I i$) 1)))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s$ (I 1) (I (vstd!seq.Seq.len.? A&. A& s$))) i$)))))) :pattern ((ens%lib!lemma.lemma_u.seq_skip_lemma. A&. A&)))))
(set-info :comment ";; Function-Specs lib::lemma::lemma_t::set_insert_lemma")
(declare-fun ens%lib!lemma.lemma_t.set_insert_lemma. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%lib!lemma.lemma_t.set_insert_lemma. A&. A&) (and (forall ((s1$ Poly) (x$ Poly) (y$ Poly)) (! (=> (and (has_type s1$ (TYPE%vstd!set.Set. A&. A&)) (has_type x$ A&) (has_type y$ A&)) (=> (not (= x$ y$)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s1$ x$) y$) (vstd!set.impl&%0.contains.? A&. A& s1$ y$)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s1$ x$) y$)))) (forall ((s1$ Poly) (x$ Poly)) (! (=> (and (has_type s1$ (TYPE%vstd!set.Set. A&. A&)) (has_type x$ A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s1$ x$) (= (vstd!set.impl&%0.insert.? A&. A& s1$ x$) s1$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1$ x$)) :pattern ((vstd!set.impl&%0.insert.? A&. A& s1$ x$)))))) :pattern ((ens%lib!lemma.lemma_t.set_insert_lemma. A&. A&)))))
(set-info :comment ";; Function-Specs lib::trap::TrapFrameOption::get_Some_0")
(declare-fun req%lib!trap.impl&%0.get_Some_0. (Poly) Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!trap.impl&%0.get_Some_0. self!) (=> %%global_location_label%%55 (lib!trap.impl&%0.is_Some.? self!))) :pattern ((req%lib!trap.impl&%0.get_Some_0. self!)))))
(set-info :comment ";; Function-Axioms lib::trap::TrapFrameOption::get_Some_0")
(assert (fuel_bool_default fuel%lib!trap.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%lib!trap.impl&%0.get_Some_0.) (forall ((self! Poly)) (! (= (lib!trap.impl&%0.get_Some_0.? self!) (lib!trap.TrapFrameOption./TrapFrameOption/reg (%Poly%lib!trap.TrapFrameOption. self!))) :pattern ((lib!trap.impl&%0.get_Some_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!trap.TrapFrameOption.) (has_type (Poly%lib!trap.Registers. (lib!trap.impl&%0.get_Some_0.? self!)) TYPE%lib!trap.Registers.)) :pattern ((lib!trap.impl&%0.get_Some_0.? self!)))))
(set-info :comment ";; Function-Specs lib::trap::Registers::set_self_fast")
(declare-fun ens%lib!trap.impl&%4.set_self_fast. (lib!trap.Registers. lib!trap.Registers. lib!trap.Registers.) Bool)
(assert (forall ((pre%self! lib!trap.Registers.) (self! lib!trap.Registers.) (src! lib!trap.Registers.)) (! (= (ens%lib!trap.impl&%4.set_self_fast. pre%self! self! src!) (and (has_type (Poly%lib!trap.Registers. self!) TYPE%lib!trap.Registers.) (= self! src!))) :pattern ((ens%lib!trap.impl&%4.set_self_fast. pre%self! self! src!)))))
(set-info :comment ";; Function-Specs lib::array::Array::new")
(declare-fun ens%lib!array.impl&%0.new. (Dcr Type Dcr Type lib!array.Array.) Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (ret! lib!array.Array.)) (! (= (ens%lib!array.impl&%0.new. A&. A& N&. N& ret!) (and (has_type (Poly%lib!array.Array. ret!) (TYPE%lib!array.Array. A&. A& N&. N&)) (lib!array.impl&%0.wf.? A&. A& N&. N& (Poly%lib!array.Array. ret!)))) :pattern ((ens%lib!array.impl&%0.new. A&. A& N&. N& ret!)))))
(set-info :comment ";; Function-Specs lib::array::Array::get")
(declare-fun req%lib!array.impl&%0.get. (Dcr Type Dcr Type lib!array.Array. Int) Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! lib!array.Array.) (i! Int)) (! (= (req%lib!array.impl&%0.get. A&. A& N&. N& self! i!) (and (=> %%global_location_label%%56 (and (<= 0 i!) (< i! (const_int N&)))) (=> %%global_location_label%%57 (lib!array.impl&%0.wf.? A&. A& N&. N& (Poly%lib!array.Array. self!))))) :pattern ((req%lib!array.impl&%0.get. A&. A& N&. N& self! i!)))))
(declare-fun ens%lib!array.impl&%0.get. (Dcr Type Dcr Type lib!array.Array. Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! lib!array.Array.) (i! Int) (out! Poly)) (! (= (ens%lib!array.impl&%0.get. A&. A& N&. N& self! i! out!) (and (has_type out! A&) (= out! (vstd!seq.Seq.index.? A&. A& (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. self!))) (I i!))))) :pattern ((ens%lib!array.impl&%0.get. A&. A& N&. N& self! i! out!)))))
(set-info :comment ";; Function-Specs lib::array::Array::set")
(declare-fun req%lib!array.impl&%1.set. (Dcr Type Dcr Type lib!array.Array. Int Poly) Bool)
(declare-const %%global_location_label%%58 Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (pre%self! lib!array.Array.) (i! Int) (out! Poly)) (! (= (req%lib!array.impl&%1.set. A&. A& N&. N& pre%self! i! out!) (and (=> %%global_location_label%%58 (and (<= 0 i!) (< i! (const_int N&)))) (=> %%global_location_label%%59 (lib!array.impl&%0.wf.? A&. A& N&. N& (Poly%lib!array.Array. pre%self!))))) :pattern ((req%lib!array.impl&%1.set. A&. A& N&. N& pre%self! i! out!)))))
(declare-fun ens%lib!array.impl&%1.set. (Dcr Type Dcr Type lib!array.Array. lib!array.Array. Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (pre%self! lib!array.Array.) (self! lib!array.Array.) (i! Int) (out! Poly)) (! (= (ens%lib!array.impl&%1.set. A&. A& N&. N& pre%self! self! i! out!) (and (has_type (Poly%lib!array.Array. self!) (TYPE%lib!array.Array. A&. A& N&. N&)) (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. self!))) (vstd!seq.Seq.update.? A&. A& (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. pre%self!))) (I i!) out!)) (lib!array.impl&%0.wf.? A&. A& N&. N& (Poly%lib!array.Array. self!)))) :pattern ((ens%lib!array.impl&%1.set. A&. A& N&. N& pre%self! self! i! out!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::core::iter_into_iter_spec")
(assert (fuel_bool_default fuel%vstd!std_specs.core.iter_into_iter_spec.))
(assert (=> (fuel_bool fuel%vstd!std_specs.core.iter_into_iter_spec.) (forall ((I&. Dcr) (I& Type) (i! Poly)) (! (= (vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!) i!) :pattern ((vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!))))))
(assert (forall ((I&. Dcr) (I& Type) (i! Poly)) (! (=> (has_type i! I&) (has_type (vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!) I&)) :pattern ((vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%0::ghost_iter")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%0.ghost_iter.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%0.ghost_iter.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (= (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. A&. A&) self!) (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. self!)) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. self!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. self!)))))) :pattern ((vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. A&. A&) self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%1::exec_invariant")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.exec_invariant.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.exec_invariant.) (forall ((A&. Dcr) (A& Type) (self! Poly) (exec_iter! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! exec_iter!) (B (and (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. exec_iter!))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. exec_iter!))))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! exec_iter!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%1::ghost_invariant")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_invariant.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_invariant.) (forall ((A&. Dcr) (A& Type) (self! Poly) (init! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! init!) (B (and (and (or (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (or (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!))))) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. init!)) (let ((init$ (%Poly%vstd!std_specs.range.RangeGhostIterator. (core!option.Option./Some/0 (%Poly%core!option.Option. init!))))) (and (and (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! init!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%1::ghost_ensures")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_ensures.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_ensures.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!) (B (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%1::ghost_peek_next")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_peek_next.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_peek_next.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!) (Poly%core!option.Option. (core!option.Option./Some (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%1::ghost_advance")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_advance.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_advance.) (forall ((A&. Dcr) (A& Type) (self! Poly) (_exec_iter! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_advance.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! _exec_iter!) (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (I 1)))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_advance.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! _exec_iter!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%2.view.))
(declare-fun %%lambda%%3 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2) i$) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? %%hole%%0 %%hole%%1 %%hole%%2 i$)))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2) i$)))))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!view.View.view.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!) (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I (nClip (%I (vstd!std_specs.range.StepSpec.spec_steps_between_int.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))) (Poly%fun%1. (mk_fun (%%lambda%%3 A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))))) :pattern ((vstd!view.View.view.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%3::spec_steps_between_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%3.spec_steps_between_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%3.spec_steps_between_int.) (forall ((self! Poly) (end! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT 8) self! end!) (I (Sub (%I end!) (%I self!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT 8) self! end!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%6::spec_steps_between_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%6.spec_steps_between_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%6.spec_steps_between_int.) (forall ((self! Poly) (end! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT 64) self! end!) (I (Sub (%I end!) (%I self!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT 64) self! end!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%8::spec_steps_between_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%8.spec_steps_between_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%8.spec_steps_between_int.) (forall ((self! Poly) (end! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT SZ) self! end!) (I (Sub (%I end!) (%I self!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT SZ) self! end!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::range::impl&%11::spec_steps_between_int")
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%11.spec_steps_between_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%11.spec_steps_between_int.) (forall ((self! Poly) (end! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (SINT 32) self! end!) (I (Sub (%I end!) (%I self!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (SINT 32) self! end!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%30::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%30.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%30.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%44::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%44.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%44.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::endpoint::Endpoint::rf_counter_is_full")
(assert (fuel_bool_default fuel%lib!process_manager.endpoint.impl&%0.rf_counter_is_full.))
(assert (=> (fuel_bool fuel%lib!process_manager.endpoint.impl&%0.rf_counter_is_full.) (forall ((self! Poly)) (! (= (lib!process_manager.endpoint.impl&%0.rf_counter_is_full.? self!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. self!)) (- (uHi SZ) 1))) :pattern ((lib!process_manager.endpoint.impl&%0.rf_counter_is_full.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::thread_dom")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.thread_dom.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.thread_dom.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.thread_dom.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))))) :pattern ((lib!process_manager.spec_impl.impl&%0.thread_dom.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::endpoint_dom")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.endpoint_dom.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.endpoint_dom.) (forall ((self! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.endpoint_dom.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))))) :pattern ((lib!process_manager.spec_impl.impl&%0.endpoint_dom.? self!))))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_thread")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_thread. (Poly Poly) Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((self! Poly) (thread_ptr! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_thread. self! thread_ptr!) (and (=> %%global_location_label%%60 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%61 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? self!)) thread_ptr!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_thread. self! thread_ptr!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_thread")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.spec_get_thread.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.spec_get_thread.) (forall ((self! Poly) (thread_ptr! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? self! thread_ptr!) (%Poly%lib!process_manager.thread.Thread. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.thread.Thread. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) thread_ptr!))))))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_thread.? self! thread_ptr!))))))
(assert (forall ((self! Poly) (thread_ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type thread_ptr! (UINT SZ))) (has_type (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? self! thread_ptr!)) TYPE%lib!process_manager.thread.Thread.)) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_thread.? self! thread_ptr!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_proc_by_thread_ptr")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_proc_by_thread_ptr. (Poly Poly) Bool)
(declare-const %%global_location_label%%62 Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((self! Poly) (thread_ptr! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_proc_by_thread_ptr. self! thread_ptr!) (and (=> %%global_location_label%%62 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%63 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) thread_ptr!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_proc_by_thread_ptr. self! thread_ptr!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_proc_by_thread_ptr")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.spec_get_proc_by_thread_ptr.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.spec_get_proc_by_thread_ptr.) (forall ((self! Poly) (thread_ptr! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.spec_get_proc_by_thread_ptr.? self! thread_ptr!) (%Poly%lib!process_manager.process.Process. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.process.Process. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.process.Process.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.process.Process.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/process_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? self! thread_ptr!)))))))))))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_proc_by_thread_ptr.? self! thread_ptr!))))))
(assert (forall ((self! Poly) (thread_ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type thread_ptr! (UINT SZ))) (has_type (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc_by_thread_ptr.? self! thread_ptr!)) TYPE%lib!process_manager.process.Process.)) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_proc_by_thread_ptr.? self! thread_ptr!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_cpu")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_cpu. (Poly Poly) Bool)
(declare-const %%global_location_label%%64 Bool)
(declare-const %%global_location_label%%65 Bool)
(assert (forall ((self! Poly) (cpu_id! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_cpu. self! cpu_id!) (and (=> %%global_location_label%%64 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%65 (and (<= 0 (%I cpu_id!)) (< (%I cpu_id!) lib!define.NUM_CPUS.?))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_cpu. self! cpu_id!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_cpu")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.spec_get_cpu.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.spec_get_cpu.) (forall ((self! Poly) (cpu_id! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.spec_get_cpu.? self! cpu_id!) (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_id!))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_cpu.? self! cpu_id!))))))
(assert (forall ((self! Poly) (cpu_id! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type cpu_id! (UINT SZ))) (has_type (Poly%lib!process_manager.cpu.Cpu. (lib!process_manager.spec_impl.impl&%0.spec_get_cpu.? self! cpu_id!)) TYPE%lib!process_manager.cpu.Cpu.)) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_cpu.? self! cpu_id!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_is_cpu_running")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_is_cpu_running. (Poly Poly) Bool)
(declare-const %%global_location_label%%66 Bool)
(declare-const %%global_location_label%%67 Bool)
(assert (forall ((self! Poly) (cpu_i! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_is_cpu_running. self! cpu_i!) (and (=> %%global_location_label%%66 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%67 (and (<= 0 (%I cpu_i!)) (< (%I cpu_i!) lib!define.NUM_CPUS.?))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_is_cpu_running. self! cpu_i!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_is_cpu_running")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.spec_get_is_cpu_running.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.spec_get_is_cpu_running.) (forall ((self! Poly) (cpu_i! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.spec_get_is_cpu_running.? self! cpu_i!) (is-core!option.Option./Some_ (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_i!))))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_is_cpu_running.? self! cpu_i!))))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_container_by_proc_ptr")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_container_by_proc_ptr. (Poly Poly) Bool)
(declare-const %%global_location_label%%68 Bool)
(declare-const %%global_location_label%%69 Bool)
(assert (forall ((self! Poly) (proc_ptr! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_container_by_proc_ptr. self! proc_ptr!) (and (=> %%global_location_label%%68 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%69 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? self!)) proc_ptr!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_container_by_proc_ptr. self! proc_ptr!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_container_by_proc_ptr")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.spec_get_container_by_proc_ptr.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.spec_get_container_by_proc_ptr.) (forall ((self! Poly) (proc_ptr! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.spec_get_container_by_proc_ptr.? self! proc_ptr!) (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? self! proc_ptr!))))))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_container_by_proc_ptr.? self! proc_ptr!))))))
(assert (forall ((self! Poly) (proc_ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type proc_ptr! (UINT SZ))) (has_type (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container_by_proc_ptr.? self! proc_ptr!)) TYPE%lib!process_manager.container.Container.)) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_container_by_proc_ptr.? self! proc_ptr!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_container_by_thread_ptr")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_container_by_thread_ptr. (Poly Poly) Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(assert (forall ((self! Poly) (thread_ptr! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_container_by_thread_ptr. self! thread_ptr!) (and (=> %%global_location_label%%70 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%71 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) thread_ptr!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_container_by_thread_ptr. self! thread_ptr!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_container_by_thread_ptr")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.spec_get_container_by_thread_ptr.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.spec_get_container_by_thread_ptr.) (forall ((self! Poly) (thread_ptr! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.spec_get_container_by_thread_ptr.? self! thread_ptr!) (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/container_tree (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc_by_thread_ptr.? self! thread_ptr!))))))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_container_by_thread_ptr.? self! thread_ptr!))))))
(assert (forall ((self! Poly) (thread_ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type thread_ptr! (UINT SZ))) (has_type (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container_by_thread_ptr.? self! thread_ptr!)) TYPE%lib!process_manager.container.Container.)) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_container_by_thread_ptr.? self! thread_ptr!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_endpoint")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint. (Poly Poly) Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(assert (forall ((self! Poly) (endpoint_ptr! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint. self! endpoint_ptr!) (and (=> %%global_location_label%%72 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%73 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) endpoint_ptr!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint. self! endpoint_ptr!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_endpoint")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.) (forall ((self! Poly) (endpoint_ptr! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? self! endpoint_ptr!) (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/endpoint_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))) endpoint_ptr!))))))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? self! endpoint_ptr!))))))
(assert (forall ((self! Poly) (endpoint_ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type endpoint_ptr! (UINT SZ))) (has_type (Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? self! endpoint_ptr!)) TYPE%lib!process_manager.endpoint.Endpoint.)) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? self! endpoint_ptr!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_thread_ptr_by_cpu_id")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_thread_ptr_by_cpu_id. (Poly Poly) Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(assert (forall ((self! Poly) (cpu_id! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_thread_ptr_by_cpu_id. self! cpu_id!) (and (=> %%global_location_label%%74 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%75 (and (<= 0 (%I cpu_id!)) (< (%I cpu_id!) lib!define.NUM_CPUS.?))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_thread_ptr_by_cpu_id. self! cpu_id!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_thread_ptr_by_cpu_id")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.spec_get_thread_ptr_by_cpu_id.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.spec_get_thread_ptr_by_cpu_id.) (forall ((self! Poly) (cpu_id! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.spec_get_thread_ptr_by_cpu_id.? self! cpu_id!) (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) cpu_id!)))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_thread_ptr_by_cpu_id.? self! cpu_id!))))))
(assert (forall ((self! Poly) (cpu_id! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type cpu_id! (UINT SZ))) (has_type (Poly%core!option.Option. (lib!process_manager.spec_impl.impl&%0.spec_get_thread_ptr_by_cpu_id.? self! cpu_id!)) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_thread_ptr_by_cpu_id.? self! cpu_id!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_owning_proc_by_thread_ptr")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_owning_proc_by_thread_ptr. (Poly Poly) Bool)
(declare-const %%global_location_label%%76 Bool)
(declare-const %%global_location_label%%77 Bool)
(assert (forall ((self! Poly) (t_ptr! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_owning_proc_by_thread_ptr. self! t_ptr!) (and (=> %%global_location_label%%76 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%77 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? self!)) t_ptr!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_owning_proc_by_thread_ptr. self! t_ptr!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_owning_proc_by_thread_ptr")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.spec_get_owning_proc_by_thread_ptr.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.spec_get_owning_proc_by_thread_ptr.) (forall ((self! Poly) (t_ptr! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.spec_get_owning_proc_by_thread_ptr.? self! t_ptr!) (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? self! t_ptr!))))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_owning_proc_by_thread_ptr.? self! t_ptr!))))))
(assert (forall ((self! Poly) (t_ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type t_ptr! (UINT SZ))) (uInv SZ (lib!process_manager.spec_impl.impl&%0.spec_get_owning_proc_by_thread_ptr.? self! t_ptr!))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_owning_proc_by_thread_ptr.? self! t_ptr!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_endpoint_ptr_by_endpoint_idx")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_ptr_by_endpoint_idx. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(declare-const %%global_location_label%%80 Bool)
(assert (forall ((self! Poly) (thread_ptr! Poly) (endpoint_index! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_ptr_by_endpoint_idx. self! thread_ptr! endpoint_index!) (and (=> %%global_location_label%%78 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%79 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? self!)) thread_ptr!)) (=> %%global_location_label%%80 (and (<= 0 (%I endpoint_index!)) (< (%I endpoint_index!) lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.?))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_ptr_by_endpoint_idx. self! thread_ptr! endpoint_index!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_endpoint_ptr_by_endpoint_idx")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_ptr_by_endpoint_idx.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_ptr_by_endpoint_idx.) (forall ((self! Poly) (thread_ptr! Poly) (endpoint_index! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_ptr_by_endpoint_idx.? self! thread_ptr! endpoint_index!) (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? self! thread_ptr!))))))) endpoint_index!))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_ptr_by_endpoint_idx.? self! thread_ptr! endpoint_index!))))))
(assert (forall ((self! Poly) (thread_ptr! Poly) (endpoint_index! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type thread_ptr! (UINT SZ)) (has_type endpoint_index! (UINT SZ))) (has_type (Poly%core!option.Option. (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_ptr_by_endpoint_idx.? self! thread_ptr! endpoint_index!)) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_ptr_by_endpoint_idx.? self! thread_ptr! endpoint_index!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::spec_get_endpoint_by_endpoint_idx")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_by_endpoint_idx. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(assert (forall ((self! Poly) (thread_ptr! Poly) (endpoint_index! Poly)) (! (= (req%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_by_endpoint_idx. self! thread_ptr! endpoint_index!) (and (=> %%global_location_label%%81 (lib!process_manager.spec_impl.impl&%1.wf.? self!)) (=> %%global_location_label%%82 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? self!)) thread_ptr!)) (=> %%global_location_label%%83 (and (<= 0 (%I endpoint_index!)) (< (%I endpoint_index!) lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.?))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_by_endpoint_idx. self! thread_ptr! endpoint_index!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::spec_impl::ProcessManager::spec_get_endpoint_by_endpoint_idx")
(assert (fuel_bool_default fuel%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_by_endpoint_idx.))
(assert (=> (fuel_bool fuel%lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_by_endpoint_idx.) (forall ((self! Poly) (thread_ptr! Poly) (endpoint_index! Poly)) (! (= (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_by_endpoint_idx.? self! thread_ptr! endpoint_index!) (ite (is-core!option.Option./None_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? self! thread_ptr!))))))) endpoint_index!))) core!option.Option./None (core!option.Option./Some (Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? self! (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? self! thread_ptr!))))))) endpoint_index!)))))))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_by_endpoint_idx.? self! thread_ptr! endpoint_index!))))))
(assert (forall ((self! Poly) (thread_ptr! Poly) (endpoint_index! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.spec_impl.ProcessManager.) (has_type thread_ptr! (UINT SZ)) (has_type endpoint_index! (UINT SZ))) (has_type (Poly%core!option.Option. (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_by_endpoint_idx.? self! thread_ptr! endpoint_index!)) (TYPE%core!option.Option. (REF $) TYPE%lib!process_manager.endpoint.Endpoint.))) :pattern ((lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_by_endpoint_idx.? self! thread_ptr! endpoint_index!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((V&. Dcr) (V& Type)) (! (tr_bound%core!clone.Clone. $ (TYPE%vstd!simple_pptr.PPtr. V&. V&)) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%vstd!simple_pptr.PPtr. V&. V&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. $ (TYPE%core!ops.range.Range. A&. A&))) :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. $ (TYPE%core!ops.range.Range. A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (tr_bound%vstd!pervasive.ForLoopGhostIterator. $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIterator. $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (tr_bound%vstd!view.View. $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!std_specs.range.StepSpec. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!std_specs.range.StepSpec. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!std_specs.range.StepSpec. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!std_specs.range.StepSpec. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialEq. A&. A& B&. B&) (tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)) :pattern ((tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. A&. A& B&. B&) (tr_bound%core!cmp.PartialOrd. (REF A&.) A& (REF B&.) B&)) :pattern ((tr_bound%core!cmp.PartialOrd. (REF A&.) A& (REF B&.) B&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialEq. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialEq. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialOrd. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialOrd. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ BOOL $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ BOOL $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialEq. A&. A& B&. B&) (tr_bound%core!cmp.PartialEq. $ (SLICE A&. A&) $ (SLICE B&. B&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (SLICE A&. A&) $ (SLICE B&. B&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&) (tr_bound%core!cmp.PartialOrd. $ (SLICE T&. T&) $ (SLICE T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (SLICE T&. T&) $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. U&. U& U&. U&) (tr_bound%core!cmp.PartialEq. T&. T& T&. T&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialOrd. U&. U& U&. U&) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. A&. A& B&. B&)) (tr_bound%core!cmp.PartialEq. $ (ARRAY A&. A& N&. N&) $ (ARRAY B&. B& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (ARRAY A&. A& N&. N&) $ (ARRAY B&. B& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (ARRAY T&. T& N&. N&) $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (ARRAY T&. T& N&. N&) $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialEq. $ (TYPE%core!marker.PhantomData. T&. T&) $ (TYPE%core!marker.PhantomData. T&. T&)) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!marker.PhantomData. T&. T&) $ (TYPE%core!marker.PhantomData. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialOrd. $ (TYPE%core!marker.PhantomData. T&. T&) $ (TYPE%core!marker.PhantomData. T&. T&)) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%core!marker.PhantomData. T&. T&) $ (TYPE%core!marker.PhantomData. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialEq. T&. T& T&. T&) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&) (tr_bound%core!cmp.PartialOrd. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 64) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT 64) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. V&. V& V&. V&) (tr_bound%core!cmp.PartialEq. U&. U& U&. U&) (tr_bound%core!cmp.PartialEq. T&. T& T&. T&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&) $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&) $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialOrd. V&. V& V&. V&) (tr_bound%core!cmp.PartialOrd. U&. U& U&. U&) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&) $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%3. V&. V& U&. U& T&. T&) $ (TYPE%tuple%3. V&. V& U&. U& T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (SINT 32) $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (SINT 32) $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 8) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT 8) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialEq. $ (PTR T&. T&) $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialEq. $ (PTR T&. T&) $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialOrd. $ (PTR T&. T&) $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialOrd. $ (PTR T&. T&) $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT SZ) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT SZ) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!iter.range.Step. A&. A&) (tr_bound%core!iter.traits.iterator.Iterator. $ (TYPE%core!ops.range.Range. A&. A&))) :pattern ((tr_bound%core!iter.traits.iterator.Iterator. $ (TYPE%core!ops.range.Range. A&. A&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. $ (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. $ (TYPE%core!marker.PhantomData. T&. T&)) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!marker.PhantomData. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((Idx&. Dcr) (Idx& Type)) (! (=> (tr_bound%core!clone.Clone. Idx&. Idx&) (tr_bound%core!clone.Clone. $ (TYPE%core!ops.range.Range. Idx&. Idx&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!clone.Clone. T&. T&)) (tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (REF T&.) T&) :pattern ((tr_bound%core!clone.Clone. (REF T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!iter.range.Step. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!iter.range.Step. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!iter.range.Step. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!iter.range.Step. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. B&. B& A&. A&)) (tr_bound%core!cmp.PartialEq. (REF $) (SLICE B&. B&) $ (ARRAY A&. A& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. (REF $) (SLICE B&. B&) $ (ARRAY A&. A& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((Idx&. Dcr) (Idx& Type)) (! (=> (tr_bound%core!cmp.PartialEq. Idx&. Idx& Idx&. Idx&) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!ops.range.Range. Idx&. Idx&) $ (TYPE%core!ops.range.Range. Idx&. Idx&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!ops.range.Range. Idx&. Idx&) $ (TYPE%core!ops.range.Range. Idx&. Idx&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. B&. B& A&. A&)) (tr_bound%core!cmp.PartialEq. $ (SLICE B&. B&) $ (ARRAY A&. A& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (SLICE B&. B&) $ (ARRAY A&. A& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. A&. A& B&. B&)) (tr_bound%core!cmp.PartialEq. $ (ARRAY A&. A& N&. N&) $ (SLICE B&. B&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (ARRAY A&. A& N&. N&) $ (SLICE B&. B&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. A&. A& B&. B&)) (tr_bound%core!cmp.PartialEq. $ (ARRAY A&. A& N&. N&) (REF $) (SLICE B&. B&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (ARRAY A&. A& N&. N&) (REF $) (SLICE B&. B&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (TRACKED A&.) A&) :pattern ((tr_bound%core!clone.Clone. (TRACKED A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (GHOST A&.) A&) :pattern ((tr_bound%core!clone.Clone. (GHOST A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!define.ThreadState.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!define.EndpointState.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!define.RetValueType.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!trap.Registers.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!process_manager.thread.IPCPayLoad.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!process_manager.cpu.Cpu.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!va_range.VaRange4K.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ TYPE%lib!define.EndpointState. $ TYPE%lib!define.EndpointState.))
(set-info :comment ";; Function-Specs lib::slinkedlist::spec_impl_u::StaticLinkedList::unique_implys_no_duplicates")
(declare-fun req%lib!slinkedlist.spec_impl_u.impl&%0.unique_implys_no_duplicates. (Dcr Type Dcr Type lib!slinkedlist.spec_impl_u.StaticLinkedList.) Bool)
(declare-const %%global_location_label%%84 Bool)
(declare-const %%global_location_label%%85 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (req%lib!slinkedlist.spec_impl_u.impl&%0.unique_implys_no_duplicates. T&. T& N&. N& self!) (and (=> %%global_location_label%%84 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!))) (=> %%global_location_label%%85 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!))))) :pattern ((req%lib!slinkedlist.spec_impl_u.impl&%0.unique_implys_no_duplicates. T&. T& N&. N& self!)))))
(declare-fun ens%lib!slinkedlist.spec_impl_u.impl&%0.unique_implys_no_duplicates. (Dcr Type Dcr Type lib!slinkedlist.spec_impl_u.StaticLinkedList.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (ens%lib!slinkedlist.spec_impl_u.impl&%0.unique_implys_no_duplicates. T&. T& N&. N& self!) (vstd!seq_lib.impl&%0.no_duplicates.? T&. T& (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)))) :pattern ((ens%lib!slinkedlist.spec_impl_u.impl&%0.unique_implys_no_duplicates. T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Specs lib::slinkedlist::spec_impl_u::StaticLinkedList::get_head")
(declare-fun req%lib!slinkedlist.spec_impl_u.impl&%2.get_head. (Dcr Type Dcr Type lib!slinkedlist.spec_impl_u.StaticLinkedList.) Bool)
(declare-const %%global_location_label%%86 Bool)
(declare-const %%global_location_label%%87 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (req%lib!slinkedlist.spec_impl_u.impl&%2.get_head. T&. T& N&. N& self!) (and (=> %%global_location_label%%86 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!))) (=> %%global_location_label%%87 (> (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) 0)))) :pattern ((req%lib!slinkedlist.spec_impl_u.impl&%2.get_head. T&. T& N&. N& self!)))))
(declare-fun ens%lib!slinkedlist.spec_impl_u.impl&%2.get_head. (Dcr Type Dcr Type lib!slinkedlist.spec_impl_u.StaticLinkedList. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (ret! Poly)) (! (= (ens%lib!slinkedlist.spec_impl_u.impl&%2.get_head. T&. T& N&. N& self! ret!) (and (has_type ret! T&) (= ret! (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) (I 0))))) :pattern ((ens%lib!slinkedlist.spec_impl_u.impl&%2.get_head. T&. T& N&. N& self! ret!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::get_container")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%0.get_container. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int) Bool)
(declare-const %%global_location_label%%88 Bool)
(declare-const %%global_location_label%%89 Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%0.get_container. self! container_ptr!) (and (=> %%global_location_label%%88 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (=> %%global_location_label%%89 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (I container_ptr!))))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%0.get_container. self! container_ptr!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%0.get_container. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int lib!process_manager.container.Container.) Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (ret! lib!process_manager.container.Container.)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%0.get_container. self! container_ptr! ret!) (and (has_type (Poly%lib!process_manager.container.Container. ret!) TYPE%lib!process_manager.container.Container.) (= (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)) ret!))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%0.get_container. self! container_ptr! ret!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::container_tree_inv")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%1.container_tree_inv. (lib!process_manager.container_tree_spec_impl.ContainerTree.) Bool)
(declare-const %%global_location_label%%90 Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%1.container_tree_inv. self!) (=> %%global_location_label%%90 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%1.container_tree_inv. self!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%1.container_tree_inv. (lib!process_manager.container_tree_spec_impl.ContainerTree.) Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%1.container_tree_inv. self!) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) c_ptr$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$))))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%1.container_tree_inv. self!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::new")
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%2.new. (Int lib!process_manager.container_tree_spec_impl.ContainerTree.) Bool)
(assert (forall ((no%param Int) (%return! lib!process_manager.container_tree_spec_impl.ContainerTree.)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%2.new. no%param %return!) (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. %return!) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%2.new. no%param %return!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::new_container")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%2.new_container. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int Int Poly) Bool)
(declare-const %%global_location_label%%91 Bool)
(declare-const %%global_location_label%%92 Bool)
(declare-const %%global_location_label%%93 Bool)
(declare-const %%global_location_label%%94 Bool)
(declare-const %%global_location_label%%95 Bool)
(declare-const %%global_location_label%%96 Bool)
(declare-const %%global_location_label%%97 Bool)
(declare-const %%global_location_label%%98 Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (init_quota! Int) (page_ptr_1! Int) (page_perm_1! Poly)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%2.new_container. pre%self! container_ptr! init_quota! page_ptr_1! page_perm_1!) (and (=> %%global_location_label%%91 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (=> %%global_location_label%%92 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))))) (I container_ptr!))) (=> %%global_location_label%%93 (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))))) (I page_ptr_1!)) false)) (=> %%global_location_label%%94 (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) lib!define.CONTAINER_CHILD_LIST_LEN.?)) (=> %%global_location_label%%95 (< (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))) (- (uHi SZ) 1))) (=> %%global_location_label%%96 (>= (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))) (Add init_quota! 3))) (=> %%global_location_label%%97 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm_1!))) (=> %%global_location_label%%98 (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm_1!) page_ptr_1!)))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%2.new_container. pre%self! container_ptr! init_quota! page_ptr_1! page_perm_1!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%2.new_container. (lib!process_manager.container_tree_spec_impl.ContainerTree. lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int Int Poly) Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (init_quota! Int) (page_ptr_1! Int) (page_perm_1! Poly)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%2.new_container. pre%self! self! container_ptr! init_quota! page_ptr_1! page_perm_1!) (and (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (I page_ptr_1!))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I page_ptr_1!)))))) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) (I container_ptr!))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))))) c_ptr$) (not (= (%I c_ptr$) container_ptr!))) (and (and (and (and (and (and (and (and (and (and (and (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$)) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$))) :pattern ((lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I page_ptr_1!)))))) c_ptr$)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))) (I page_ptr_1!))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$)) :pattern ((lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))))) c_ptr$) (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I page_ptr_1!)))))) c_ptr$) false)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$)) :pattern ((lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!)))))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (I page_ptr_1!))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false INT (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (I (Sub (Sub (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))) init_quota!) 3))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!))))))))) (I page_ptr_1!))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))) (Poly%core!option.Option. (core!option.Option./Some (I container_ptr!)))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))) (I init_quota!)) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))) (I 0)) (lib!array_set.impl&%0.wf.? $ (CONST_INT 32) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!array_set.impl&%0.view.? $ (CONST_INT 32) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))))) (vstd!set.impl&%0.empty.? $ (UINT SZ))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ))) (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))) (vstd!set.impl&%0.empty.? $ (UINT SZ))) (ext_eq false INT (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))) (I (Add (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))) 1))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!))))))))) (I container_ptr!))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))) (vstd!set.impl&%0.empty.? $ (UINT SZ))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%2.new_container. pre%self! self! container_ptr! init_quota! page_ptr_1! page_perm_1!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::container_tree_scheduler_pop_head")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_scheduler_pop_head. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int) Bool)
(declare-const %%global_location_label%%99 Bool)
(declare-const %%global_location_label%%100 Bool)
(declare-const %%global_location_label%%101 Bool)
(declare-const %%global_location_label%%102 Bool)
(declare-const %%global_location_label%%103 Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_scheduler_pop_head. pre%self! container_ptr!) (and (=> %%global_location_label%%99 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (=> %%global_location_label%%100 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (I container_ptr!))) (=> %%global_location_label%%101 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))))) (=> %%global_location_label%%102 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))))) (=> %%global_location_label%%103 (not (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) 0))))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_scheduler_pop_head. pre%self! container_ptr!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_scheduler_pop_head. (lib!process_manager.container_tree_spec_impl.ContainerTree. lib!process_manager.container_tree_spec_impl.ContainerTree. Int tuple%2.) Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (ret! tuple%2.)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_scheduler_pop_head. pre%self! self! container_ptr! ret!) (and (has_type (Poly%tuple%2. ret!) (TYPE%tuple%2. $ (UINT SZ) $ (SINT 32))) (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)) (= (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)) (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$) (not (= (%I c_ptr$) container_ptr!))) (= (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) c_ptr$) (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) c_ptr$)))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) c_ptr$)))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))) (Sub (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) 1)) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))) (vstd!seq.Seq.subrange.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (I 1) (I (vstd!seq.Seq.len.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))))))) (= (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))) (vstd!seq.Seq.index.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (I 0))) (= (vstd!seq.Seq.index.? $ (SINT 32) (Poly%vstd!seq.Seq<i32.>. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))))) (I 0)) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$) (not (= index$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$) (not (= index$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$) (not (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$)))))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_scheduler_pop_head. pre%self! self! container_ptr! ret!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::container_tree_set_quota")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_set_quota. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int) Bool)
(declare-const %%global_location_label%%104 Bool)
(declare-const %%global_location_label%%105 Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (new_quota! Int)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_set_quota. pre%self! container_ptr! new_quota!) (and (=> %%global_location_label%%104 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (=> %%global_location_label%%105 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (I container_ptr!))))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_set_quota. pre%self! container_ptr! new_quota!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_set_quota. (lib!process_manager.container_tree_spec_impl.ContainerTree. lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int) Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (new_quota! Int)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_set_quota. pre%self! self! container_ptr! new_quota!) (and (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$) (not (= (%I c_ptr$) container_ptr!))) (= (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) c_ptr$) (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) c_ptr$)))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) c_ptr$)))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I new_quota!)))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_set_quota. pre%self! self! container_ptr! new_quota!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::container_tree_scheduler_push_thread")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_scheduler_push_thread. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int) Bool)
(declare-const %%global_location_label%%106 Bool)
(declare-const %%global_location_label%%107 Bool)
(declare-const %%global_location_label%%108 Bool)
(declare-const %%global_location_label%%109 Bool)
(declare-const %%global_location_label%%110 Bool)
(declare-const %%global_location_label%%111 Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (thread_ptr! Int)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_scheduler_push_thread. pre%self! container_ptr! thread_ptr!) (and (=> %%global_location_label%%106 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (=> %%global_location_label%%107 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (I container_ptr!))) (=> %%global_location_label%%108 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))))) (=> %%global_location_label%%109 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))))) (=> %%global_location_label%%110 (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) lib!define.MAX_CONTAINER_SCHEDULER_LEN.?)) (=> %%global_location_label%%111 (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (I thread_ptr!)) false)))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_scheduler_push_thread. pre%self! container_ptr! thread_ptr!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_scheduler_push_thread. (lib!process_manager.container_tree_spec_impl.ContainerTree. lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int Int) Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (thread_ptr! Int) (ret! Int)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_scheduler_push_thread. pre%self! self! container_ptr! thread_ptr! ret!) (and (iInv 32 ret!) (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$) (not (= (%I c_ptr$) container_ptr!))) (= (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) c_ptr$) (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) c_ptr$)))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) c_ptr$)))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (I thread_ptr!))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))) (Add (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) 1)) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$) (not (= (%I index$) ret!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I ret!)) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I ret!))) thread_ptr!) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_scheduler_push_thread. pre%self! self! container_ptr! thread_ptr! ret!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::container_tree_set_owned_threads")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_set_owned_threads. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int vstd!set.Set<usize.>.) Bool)
(declare-const %%global_location_label%%112 Bool)
(declare-const %%global_location_label%%113 Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (new_owned_threads! vstd!set.Set<usize.>.)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_set_owned_threads. pre%self! container_ptr! new_owned_threads!) (and (=> %%global_location_label%%112 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (=> %%global_location_label%%113 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (I container_ptr!))))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_set_owned_threads. pre%self! container_ptr! new_owned_threads!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_set_owned_threads. (lib!process_manager.container_tree_spec_impl.ContainerTree. lib!process_manager.container_tree_spec_impl.ContainerTree. Int vstd!set.Set<usize.>.) Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (new_owned_threads! vstd!set.Set<usize.>.)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_set_owned_threads. pre%self! self! container_ptr! new_owned_threads!) (and (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$) (not (= (%I c_ptr$) container_ptr!))) (= (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) c_ptr$) (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) c_ptr$)))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) c_ptr$)))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!set.Set<usize.>. new_owned_threads!)))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_set_owned_threads. pre%self! self! container_ptr! new_owned_threads!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::container_tree_push_proc")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_push_proc. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int) Bool)
(declare-const %%global_location_label%%114 Bool)
(declare-const %%global_location_label%%115 Bool)
(declare-const %%global_location_label%%116 Bool)
(declare-const %%global_location_label%%117 Bool)
(declare-const %%global_location_label%%118 Bool)
(declare-const %%global_location_label%%119 Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (proc_ptr! Int)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_push_proc. pre%self! container_ptr! proc_ptr!) (and (=> %%global_location_label%%114 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (=> %%global_location_label%%115 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (I container_ptr!))) (=> %%global_location_label%%116 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))))) (=> %%global_location_label%%117 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))))) (=> %%global_location_label%%118 (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) lib!define.CONTAINER_PROC_LIST_LEN.?)) (=> %%global_location_label%%119 (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (I proc_ptr!)) false)))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_push_proc. pre%self! container_ptr! proc_ptr!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_push_proc. (lib!process_manager.container_tree_spec_impl.ContainerTree. lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int Int) Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (proc_ptr! Int) (ret! Int)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_push_proc. pre%self! self! container_ptr! proc_ptr! ret!) (and (iInv 32 ret!) (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$) (not (= (%I c_ptr$) container_ptr!))) (= (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) c_ptr$) (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) c_ptr$)))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) c_ptr$)))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (I proc_ptr!))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))) (Add (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) 1)) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$) (not (= (%I index$) ret!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I ret!)) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I ret!))) proc_ptr!) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_push_proc. pre%self! self! container_ptr! proc_ptr! ret!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::container_tree_push_endpoint")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_push_endpoint. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int) Bool)
(declare-const %%global_location_label%%120 Bool)
(declare-const %%global_location_label%%121 Bool)
(declare-const %%global_location_label%%122 Bool)
(declare-const %%global_location_label%%123 Bool)
(declare-const %%global_location_label%%124 Bool)
(declare-const %%global_location_label%%125 Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (endpoint_ptr! Int)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_push_endpoint. pre%self! container_ptr! endpoint_ptr!) (and (=> %%global_location_label%%120 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (=> %%global_location_label%%121 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (I container_ptr!))) (=> %%global_location_label%%122 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))))) (=> %%global_location_label%%123 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))))) (=> %%global_location_label%%124 (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) lib!define.CONTAINER_ENDPOINT_LIST_LEN.?)) (=> %%global_location_label%%125 (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (I endpoint_ptr!)) false)))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_push_endpoint. pre%self! container_ptr! endpoint_ptr!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_push_endpoint. (lib!process_manager.container_tree_spec_impl.ContainerTree. lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int Int) Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (endpoint_ptr! Int) (ret! Int)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_push_endpoint. pre%self! self! container_ptr! endpoint_ptr! ret!) (and (iInv 32 ret!) (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$) (not (= (%I c_ptr$) container_ptr!))) (= (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) c_ptr$) (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) c_ptr$)))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) c_ptr$)))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) (I endpoint_ptr!))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))) (Add (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!))))))) 1)) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$) (not (= (%I index$) ret!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) index$)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I ret!)) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)))))) (I ret!))) endpoint_ptr!) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!))))))))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%2.container_tree_push_endpoint. pre%self! self! container_ptr! endpoint_ptr! ret!)))))
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::page_closure_inv")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.page_closure_inv. (lib!process_manager.spec_impl.ProcessManager.) Bool)
(declare-const %%global_location_label%%126 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.)) (! (= (req%lib!process_manager.spec_impl.impl&%0.page_closure_inv. self!) (=> %%global_location_label%%126 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.page_closure_inv. self!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.page_closure_inv. (lib!process_manager.spec_impl.ProcessManager.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.page_closure_inv. self!) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (vstd!set.impl&%0.union.? $ (UINT SZ) (vstd!set.impl&%0.union.? $ (UINT SZ) (vstd!set.impl&%0.union.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.endpoint_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.page_closure.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.page_closure_inv. self!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::page_closure_inv")
(set-info :comment ";; process_manager/spec_impl.rs:36:5: 36:41 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_proc")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_proc. (lib!process_manager.spec_impl.ProcessManager. Int) Bool)
(declare-const %%global_location_label%%127 Bool)
(declare-const %%global_location_label%%128 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (proc_ptr! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_proc. self! proc_ptr!) (and (=> %%global_location_label%%127 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%128 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I proc_ptr!))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_proc. self! proc_ptr!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_proc. (lib!process_manager.spec_impl.ProcessManager. Int lib!process_manager.process.Process.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (proc_ptr! Int) (ret! lib!process_manager.process.Process.)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_proc. self! proc_ptr! ret!) (and (has_type (Poly%lib!process_manager.process.Process. ret!) TYPE%lib!process_manager.process.Process.) (ext_eq false TYPE%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. ret!) (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I proc_ptr!)))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.process.Process./Process/owned_threads (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. ret!))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. ret!))))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_proc. self! proc_ptr! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::get_proc")
(set-info :comment ";; process_manager/spec_impl.rs:77:5: 77:61 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_thread")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_thread. (lib!process_manager.spec_impl.ProcessManager. Int) Bool)
(declare-const %%global_location_label%%129 Bool)
(declare-const %%global_location_label%%130 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (thread_ptr! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_thread. self! thread_ptr!) (and (=> %%global_location_label%%129 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%130 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I thread_ptr!))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_thread. self! thread_ptr!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_thread. (lib!process_manager.spec_impl.ProcessManager. Int lib!process_manager.thread.Thread.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (thread_ptr! Int) (ret! lib!process_manager.thread.Thread.)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_thread. self! thread_ptr! ret!) (and (has_type (Poly%lib!process_manager.thread.Thread. ret!) TYPE%lib!process_manager.thread.Thread.) (= ret! (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. ret!))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. ret!))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. ret!)))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. ret!)))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. ret!)))))))))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_thread. self! thread_ptr! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::get_thread")
(set-info :comment ";; process_manager/spec_impl.rs:122:5: 122:67 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_proc_by_thread_ptr")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_proc_by_thread_ptr. (lib!process_manager.spec_impl.ProcessManager. Int) Bool)
(declare-const %%global_location_label%%131 Bool)
(declare-const %%global_location_label%%132 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (thread_ptr! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_proc_by_thread_ptr. self! thread_ptr!) (and (=> %%global_location_label%%131 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%132 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (I thread_ptr!))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_proc_by_thread_ptr. self! thread_ptr!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_proc_by_thread_ptr. (lib!process_manager.spec_impl.ProcessManager. Int lib!process_manager.process.Process.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (thread_ptr! Int) (ret! lib!process_manager.process.Process.)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_proc_by_thread_ptr. self! thread_ptr! ret!) (and (has_type (Poly%lib!process_manager.process.Process. ret!) TYPE%lib!process_manager.process.Process.) (ext_eq false TYPE%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. ret!) (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc_by_thread_ptr.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!)))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_proc_by_thread_ptr. self! thread_ptr! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::get_proc_by_thread_ptr")
(set-info :comment ";; process_manager/spec_impl.rs:100:5: 100:79 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_cpu")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_cpu. (lib!process_manager.spec_impl.ProcessManager. Int) Bool)
(declare-const %%global_location_label%%133 Bool)
(declare-const %%global_location_label%%134 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (cpu_id! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_cpu. self! cpu_id!) (and (=> %%global_location_label%%133 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%134 (and (<= 0 cpu_id!) (< cpu_id! lib!define.NUM_CPUS.?))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_cpu. self! cpu_id!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_cpu. (lib!process_manager.spec_impl.ProcessManager. Int lib!process_manager.cpu.Cpu.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (cpu_id! Int) (ret! lib!process_manager.cpu.Cpu.)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_cpu. self! cpu_id! ret!) (and (has_type (Poly%lib!process_manager.cpu.Cpu. ret!) TYPE%lib!process_manager.cpu.Cpu.) (= ret! (lib!process_manager.spec_impl.impl&%0.spec_get_cpu.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I cpu_id!))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_cpu. self! cpu_id! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::get_cpu")
(set-info :comment ";; process_manager/spec_impl.rs:151:5: 151:54 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_is_cpu_running")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_is_cpu_running. (lib!process_manager.spec_impl.ProcessManager. Int) Bool)
(declare-const %%global_location_label%%135 Bool)
(declare-const %%global_location_label%%136 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (cpu_i! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_is_cpu_running. self! cpu_i!) (and (=> %%global_location_label%%135 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%136 (and (<= 0 cpu_i!) (< cpu_i! lib!define.NUM_CPUS.?))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_is_cpu_running. self! cpu_i!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_is_cpu_running. (lib!process_manager.spec_impl.ProcessManager. Int Bool) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (cpu_i! Int) (ret! Bool)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_is_cpu_running. self! cpu_i! ret!) (= ret! (lib!process_manager.spec_impl.impl&%0.spec_get_is_cpu_running.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I cpu_i!)))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_is_cpu_running. self! cpu_i! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::get_is_cpu_running")
(set-info :comment ";; process_manager/spec_impl.rs:170:5: 170:64 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_container")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_container. (lib!process_manager.spec_impl.ProcessManager. Int) Bool)
(declare-const %%global_location_label%%137 Bool)
(declare-const %%global_location_label%%138 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (container_ptr! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_container. self! container_ptr!) (and (=> %%global_location_label%%137 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%138 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I container_ptr!))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_container. self! container_ptr!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_container. (lib!process_manager.spec_impl.ProcessManager. Int lib!process_manager.container.Container.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (container_ptr! Int) (ret! lib!process_manager.container.Container.)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_container. self! container_ptr! ret!) (and (has_type (Poly%lib!process_manager.container.Container. ret!) TYPE%lib!process_manager.container.Container.) (= (lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I container_ptr!)) ret!))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_container. self! container_ptr! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::get_container")
(set-info :comment ";; process_manager/spec_impl.rs:190:5: 190:79 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_container_by_proc_ptr")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_container_by_proc_ptr. (lib!process_manager.spec_impl.ProcessManager. Int) Bool)
(declare-const %%global_location_label%%139 Bool)
(declare-const %%global_location_label%%140 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (proc_ptr! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_container_by_proc_ptr. self! proc_ptr!) (and (=> %%global_location_label%%139 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%140 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I proc_ptr!))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_container_by_proc_ptr. self! proc_ptr!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_container_by_proc_ptr. (lib!process_manager.spec_impl.ProcessManager. Int lib!process_manager.container.Container.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (proc_ptr! Int) (ret! lib!process_manager.container.Container.)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_container_by_proc_ptr. self! proc_ptr! ret!) (and (has_type (Poly%lib!process_manager.container.Container. ret!) TYPE%lib!process_manager.container.Container.) (= (lib!process_manager.spec_impl.impl&%0.spec_get_container_by_proc_ptr.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I proc_ptr!)) ret!) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I proc_ptr!))))))) (= (lib!process_manager.spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I (lib!process_manager.process.Process./Process/owning_container (%Poly%lib!process_manager.process.Process. (Poly%lib!process_manager.process.Process. (lib!process_manager.spec_impl.impl&%0.spec_get_proc.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I proc_ptr!))))))) ret!) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. ret!))))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_container_by_proc_ptr. self! proc_ptr! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::get_container_by_proc_ptr")
(set-info :comment ";; process_manager/spec_impl.rs:209:5: 209:81 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_container_by_thread_ptr")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_container_by_thread_ptr. (lib!process_manager.spec_impl.ProcessManager. Int) Bool)
(declare-const %%global_location_label%%141 Bool)
(declare-const %%global_location_label%%142 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (thread_ptr! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_container_by_thread_ptr. self! thread_ptr!) (and (=> %%global_location_label%%141 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%142 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.thread.Thread.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.thread.Thread.>.>. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/thread_perms (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. self!))))) (I thread_ptr!))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_container_by_thread_ptr. self! thread_ptr!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_container_by_thread_ptr. (lib!process_manager.spec_impl.ProcessManager. Int lib!process_manager.container.Container.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (thread_ptr! Int) (ret! lib!process_manager.container.Container.)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_container_by_thread_ptr. self! thread_ptr! ret!) (and (has_type (Poly%lib!process_manager.container.Container. ret!) TYPE%lib!process_manager.container.Container.) (= (lib!process_manager.spec_impl.impl&%0.spec_get_container_by_thread_ptr.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!)) ret!))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_container_by_thread_ptr. self! thread_ptr! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::get_container_by_thread_ptr")
(set-info :comment ";; process_manager/spec_impl.rs:233:5: 233:87 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_endpoint")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_endpoint. (lib!process_manager.spec_impl.ProcessManager. Int) Bool)
(declare-const %%global_location_label%%143 Bool)
(declare-const %%global_location_label%%144 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (endpoint_ptr! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_endpoint. self! endpoint_ptr!) (and (=> %%global_location_label%%143 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%144 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.endpoint_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I endpoint_ptr!))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_endpoint. self! endpoint_ptr!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_endpoint. (lib!process_manager.spec_impl.ProcessManager. Int lib!process_manager.endpoint.Endpoint.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (endpoint_ptr! Int) (ret! lib!process_manager.endpoint.Endpoint.)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_endpoint. self! endpoint_ptr! ret!) (and (has_type (Poly%lib!process_manager.endpoint.Endpoint. ret!) TYPE%lib!process_manager.endpoint.Endpoint.) (= ret! (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I endpoint_ptr!))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (Poly%lib!process_manager.endpoint.Endpoint. ret!))))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_endpoint. self! endpoint_ptr! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::get_endpoint")
(set-info :comment ";; process_manager/spec_impl.rs:254:5: 254:75 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_thread_ptr_by_cpu_id")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_thread_ptr_by_cpu_id. (lib!process_manager.spec_impl.ProcessManager. Int) Bool)
(declare-const %%global_location_label%%145 Bool)
(declare-const %%global_location_label%%146 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (cpu_id! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_thread_ptr_by_cpu_id. self! cpu_id!) (and (=> %%global_location_label%%145 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%146 (and (<= 0 cpu_id!) (< cpu_id! lib!define.NUM_CPUS.?))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_thread_ptr_by_cpu_id. self! cpu_id!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_thread_ptr_by_cpu_id. (lib!process_manager.spec_impl.ProcessManager. Int core!option.Option.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (cpu_id! Int) (ret! core!option.Option.)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_thread_ptr_by_cpu_id. self! cpu_id! ret!) (and (has_type (Poly%core!option.Option. ret!) (TYPE%core!option.Option. $ (UINT SZ))) (= ret! (lib!process_manager.spec_impl.impl&%0.spec_get_thread_ptr_by_cpu_id.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I cpu_id!))) (= (lib!process_manager.spec_impl.impl&%0.spec_get_is_cpu_running.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I cpu_id!)) (is-core!option.Option./Some_ ret!)) (=> (is-core!option.Option./Some_ ret!) (and (is-core!option.Option./Some_ (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (Poly%lib!process_manager.cpu.Cpu. (lib!process_manager.spec_impl.impl&%0.spec_get_cpu.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I cpu_id!)))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ret!)))))) (= (lib!process_manager.spec_impl.impl&%0.spec_get_thread_ptr_by_cpu_id.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I cpu_id!)) ret!) (= (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (Poly%lib!process_manager.cpu.Cpu. (lib!process_manager.spec_impl.impl&%0.spec_get_cpu.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I cpu_id!))))) ret!))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_thread_ptr_by_cpu_id. self! cpu_id! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::get_thread_ptr_by_cpu_id")
(set-info :comment ";; process_manager/spec_impl.rs:276:5: 276:84 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_owning_proc_by_thread_ptr")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_owning_proc_by_thread_ptr. (lib!process_manager.spec_impl.ProcessManager. Int) Bool)
(declare-const %%global_location_label%%147 Bool)
(declare-const %%global_location_label%%148 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (t_ptr! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_owning_proc_by_thread_ptr. self! t_ptr!) (and (=> %%global_location_label%%147 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%148 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I t_ptr!))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_owning_proc_by_thread_ptr. self! t_ptr!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_owning_proc_by_thread_ptr. (lib!process_manager.spec_impl.ProcessManager. Int Int) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (t_ptr! Int) (ret! Int)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_owning_proc_by_thread_ptr. self! t_ptr! ret!) (and (uInv SZ ret!) (= ret! (lib!process_manager.spec_impl.impl&%0.spec_get_owning_proc_by_thread_ptr.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I t_ptr!))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I ret!)) (= (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I t_ptr!))))) ret!))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_owning_proc_by_thread_ptr. self! t_ptr! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::get_owning_proc_by_thread_ptr")
(set-info :comment ";; process_manager/spec_impl.rs:302:5: 302:82 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_proc_ptr_by_cpu_id")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_proc_ptr_by_cpu_id. (lib!process_manager.spec_impl.ProcessManager. Int) Bool)
(declare-const %%global_location_label%%149 Bool)
(declare-const %%global_location_label%%150 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (cpu_id! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_proc_ptr_by_cpu_id. self! cpu_id!) (and (=> %%global_location_label%%149 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%150 (and (<= 0 cpu_id!) (< cpu_id! lib!define.NUM_CPUS.?))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_proc_ptr_by_cpu_id. self! cpu_id!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_proc_ptr_by_cpu_id. (lib!process_manager.spec_impl.ProcessManager. Int core!option.Option.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (cpu_id! Int) (ret! core!option.Option.)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_proc_ptr_by_cpu_id. self! cpu_id! ret!) (and (has_type (Poly%core!option.Option. ret!) (TYPE%core!option.Option. $ (UINT SZ))) (= (lib!process_manager.spec_impl.impl&%0.spec_get_is_cpu_running.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I cpu_id!)) (is-core!option.Option./Some_ ret!)) (=> (is-core!option.Option./Some_ ret!) (and (and (and (lib!process_manager.spec_impl.impl&%0.spec_get_is_cpu_running.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I cpu_id!)) (is-core!option.Option./Some_ (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))))) (I cpu_id!)))))) (= (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))))) (I cpu_id!))))))))))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ret!)))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.proc_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ret!)))))) (=> (is-core!option.Option./None_ ret!) (and (= (lib!process_manager.spec_impl.impl&%0.spec_get_is_cpu_running.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I cpu_id!)) false) (is-core!option.Option./None_ (lib!process_manager.cpu.Cpu./Cpu/current_thread (%Poly%lib!process_manager.cpu.Cpu. (vstd!seq.Seq.index.? $ TYPE%lib!process_manager.cpu.Cpu. (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.spec_impl.ProcessManager./ProcessManager/cpu_list (%Poly%lib!process_manager.spec_impl.ProcessManager. (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))))) (I cpu_id!))))))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_proc_ptr_by_cpu_id. self! cpu_id! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::get_proc_ptr_by_cpu_id")
(set-info :comment ";; process_manager/spec_impl.rs:314:5: 314:80 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_endpoint_ptr_by_endpoint_idx")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_endpoint_ptr_by_endpoint_idx. (lib!process_manager.spec_impl.ProcessManager. Int Int) Bool)
(declare-const %%global_location_label%%151 Bool)
(declare-const %%global_location_label%%152 Bool)
(declare-const %%global_location_label%%153 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (thread_ptr! Int) (endpoint_index! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_endpoint_ptr_by_endpoint_idx. self! thread_ptr! endpoint_index!) (and (=> %%global_location_label%%151 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%152 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I thread_ptr!))) (=> %%global_location_label%%153 (and (<= 0 endpoint_index!) (< endpoint_index! lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.?))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_endpoint_ptr_by_endpoint_idx. self! thread_ptr! endpoint_index!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_endpoint_ptr_by_endpoint_idx. (lib!process_manager.spec_impl.ProcessManager. Int Int core!option.Option.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (thread_ptr! Int) (endpoint_index! Int) (ret! core!option.Option.)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_endpoint_ptr_by_endpoint_idx. self! thread_ptr! endpoint_index! ret!) (and (has_type (Poly%core!option.Option. ret!) (TYPE%core!option.Option. $ (UINT SZ))) (= ret! (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_ptr_by_endpoint_idx.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!) (I endpoint_index!))) (=> (is-core!option.Option./Some_ ret!) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.endpoint_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ret!))))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_endpoint_ptr_by_endpoint_idx. self! thread_ptr! endpoint_index! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::get_endpoint_ptr_by_endpoint_idx")
(set-info :comment ";; process_manager/spec_impl.rs:354:5: 354:130 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_endpoint_by_endpoint_idx")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_endpoint_by_endpoint_idx. (lib!process_manager.spec_impl.ProcessManager. Int Int) Bool)
(declare-const %%global_location_label%%154 Bool)
(declare-const %%global_location_label%%155 Bool)
(declare-const %%global_location_label%%156 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (thread_ptr! Int) (endpoint_index! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_endpoint_by_endpoint_idx. self! thread_ptr! endpoint_index!) (and (=> %%global_location_label%%154 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%155 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I thread_ptr!))) (=> %%global_location_label%%156 (and (<= 0 endpoint_index!) (< endpoint_index! lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.?))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_endpoint_by_endpoint_idx. self! thread_ptr! endpoint_index!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_endpoint_by_endpoint_idx. (lib!process_manager.spec_impl.ProcessManager. Int Int core!option.Option.) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (thread_ptr! Int) (endpoint_index! Int) (ret! core!option.Option.)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_endpoint_by_endpoint_idx. self! thread_ptr! endpoint_index! ret!) (and (has_type (Poly%core!option.Option. ret!) (TYPE%core!option.Option. (REF $) TYPE%lib!process_manager.endpoint.Endpoint.)) (= ret! (lib!process_manager.spec_impl.impl&%0.spec_get_endpoint_by_endpoint_idx.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!) (I endpoint_index!))))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_endpoint_by_endpoint_idx. self! thread_ptr! endpoint_index! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::get_endpoint_by_endpoint_idx")
(set-info :comment ";; process_manager/spec_impl.rs:380:5: 380:124 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::spec_impl::ProcessManager::get_thread_owns_endpoint")
(declare-fun req%lib!process_manager.spec_impl.impl&%0.get_thread_owns_endpoint. (lib!process_manager.spec_impl.ProcessManager. Int Int) Bool)
(declare-const %%global_location_label%%157 Bool)
(declare-const %%global_location_label%%158 Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (thread_ptr! Int) (endpoint_ptr! Int)) (! (= (req%lib!process_manager.spec_impl.impl&%0.get_thread_owns_endpoint. self! thread_ptr! endpoint_ptr!) (and (=> %%global_location_label%%157 (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> %%global_location_label%%158 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I thread_ptr!))))) :pattern ((req%lib!process_manager.spec_impl.impl&%0.get_thread_owns_endpoint. self! thread_ptr! endpoint_ptr!)))))
(declare-fun ens%lib!process_manager.spec_impl.impl&%0.get_thread_owns_endpoint. (lib!process_manager.spec_impl.ProcessManager. Int Int Bool) Bool)
(assert (forall ((self! lib!process_manager.spec_impl.ProcessManager.) (thread_ptr! Int) (endpoint_ptr! Int) (ret! Bool)) (! (= (ens%lib!process_manager.spec_impl.impl&%0.get_thread_owns_endpoint. self! thread_ptr! endpoint_ptr! ret!) (= ret! (lib!process_manager.spec_impl.impl&%0.spec_get_thread_owns_endpoint.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!) (I endpoint_ptr!)))) :pattern ((ens%lib!process_manager.spec_impl.impl&%0.get_thread_owns_endpoint. self! thread_ptr! endpoint_ptr! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::spec_impl::ProcessManager::get_thread_owns_endpoint")
(set-info :comment ";; process_manager/spec_impl.rs:410:9: 421:10 (#0)")
(declare-const ret! Bool)
(declare-const self! lib!process_manager.spec_impl.ProcessManager.)
(declare-const thread_ptr! Int)
(declare-const endpoint_ptr! Int)
(declare-const tmp%1 Poly)
(declare-const tmp%2 core!ops.range.Range.)
(declare-const VERUS_loop_val@ Int)
(declare-const tmp%%$1@ core!option.Option.)
(declare-const tmp%3 lib!process_manager.thread.Thread.)
(declare-const tmp%4 Poly)
(declare-const tmp%5 lib!array.Array.)
(declare-const tmp%6 Bool)
(declare-const tmp%7 lib!process_manager.thread.Thread.)
(declare-const tmp%8 Poly)
(declare-const tmp%9 lib!array.Array.)
(declare-const tmp%10 Poly)
(declare-const VERUS_loop_next@0 Int)
(declare-const index@ Int)
(declare-const tmp%%$2@ tuple%0.)
(declare-const VERUS_ghost_iter@0 vstd!std_specs.range.RangeGhostIterator.)
(declare-const VERUS_exec_iter@0 core!ops.range.Range.)
(declare-const tmp%%@ core!ops.range.Range.)
(declare-const VERUS_loop_result@ tuple%0.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!process_manager.spec_impl.ProcessManager. self!) TYPE%lib!process_manager.spec_impl.ProcessManager.))
(assert (uInv SZ thread_ptr!))
(assert (uInv SZ endpoint_ptr!))
(assert (has_type tmp%1 (TYPE%core!ops.range.Range. $ (UINT SZ))))
(assert (has_type (Poly%core!ops.range.Range. tmp%2) (TYPE%core!ops.range.Range. $ (UINT SZ))))
(assert (has_type (Poly%core!ops.range.Range. tmp%%@) (TYPE%core!ops.range.Range. $ (UINT SZ))))
(assert (has_type (Poly%core!ops.range.Range. VERUS_exec_iter@0) (TYPE%core!ops.range.Range. $ (UINT SZ))))
(assert (has_type (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0) (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ))))
(declare-const VERUS_exec_iter@1 core!ops.range.Range.)
(declare-const VERUS_loop_next@1 Int)
(declare-const VERUS_ghost_iter@1 vstd!std_specs.range.RangeGhostIterator.)
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(declare-const %%switch_label%%2 Bool)
(set-info :comment ";; loop invariant not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; loop invariant not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; loop invariant not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; loop invariant not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; loop invariant not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; loop invariant not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%16 Bool)
(assert (not (=> (%B (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0) (Poly%core!ops.range.Range. VERUS_exec_iter@0))) (=> (%B (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0) (Poly%core!option.Option. (core!option.Option./Some (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (vstd!std_specs.core.iter_into_iter_spec.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I 0) (I lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.?))))))))) (=> (let ((index$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (=> (let ((index$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I thread_ptr!))) (=> (let ((index$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) index$)) (or (is-core!option.Option./None_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!)))))))) i$))) (not (= (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!)))))))) i$)))) endpoint_ptr!))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!)))))))) i$))))) (=> (has_type (Poly%core!ops.range.Range. VERUS_exec_iter@1) (TYPE%core!ops.range.Range. $ (UINT SZ))) (=> (ens%core!iter.range.impl&%6.next. $ (UINT SZ) VERUS_exec_iter@0 VERUS_exec_iter@1 tmp%%$1@) (or (and (=> (is-core!option.Option./Some_ tmp%%$1@) (=> (= VERUS_loop_val@ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1@))))) (=> (= VERUS_loop_next@1 VERUS_loop_val@) %%switch_label%%2))) (=> (not (is-core!option.Option./Some_ tmp%%$1@)) (and (=> %%location_label%%0 (%B (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0) (Poly%core!ops.range.Range. VERUS_exec_iter@1)))) (and (=> %%location_label%%1 (%B (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0) (Poly%core!option.Option. (core!option.Option./Some (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (vstd!std_specs.core.iter_into_iter_spec.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I 0) (I lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.?)))))))))) (and (=> %%location_label%%2 (let ((index$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) (and (=> %%location_label%%3 (let ((index$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I thread_ptr!)))) (and (=> %%location_label%%4 (let ((index$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) index$)) (or (is-core!option.Option./None_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!)))))))) i$))) (not (= (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!)))))))) i$)))) endpoint_ptr!))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!)))))))) i$)))))) (=> %%location_label%%5 (%B (vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))))))) (and (not %%switch_label%%2) (=> (= index@ VERUS_loop_next@1) (and (=> %%location_label%%6 (req%lib!process_manager.spec_impl.impl&%0.get_thread. self! thread_ptr!)) (=> (ens%lib!process_manager.spec_impl.impl&%0.get_thread. self! thread_ptr! tmp%3) (=> (= tmp%5 (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. tmp%3)))) (and (=> %%location_label%%7 (req%lib!array.impl&%0.get. $ (TYPE%core!option.Option. $ (UINT SZ)) $ (CONST_INT 128) tmp%5 index@)) (=> (ens%lib!array.impl&%0.get. $ (TYPE%core!option.Option. $ (UINT SZ)) $ (CONST_INT 128) tmp%5 index@ tmp%4) (=> (ens%core!option.impl&%0.is_some. $ (UINT SZ) (%Poly%core!option.Option. tmp%4) tmp%6) (or (and (=> tmp%6 (and (=> %%location_label%%8 (req%lib!process_manager.spec_impl.impl&%0.get_thread. self! thread_ptr!)) (=> (ens%lib!process_manager.spec_impl.impl&%0.get_thread. self! thread_ptr! tmp%7) (=> (= tmp%9 (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. tmp%7)))) (and (=> %%location_label%%9 (req%lib!array.impl&%0.get. $ (TYPE%core!option.Option. $ (UINT SZ)) $ (CONST_INT 128) tmp%9 index@)) (=> (ens%lib!array.impl&%0.get. $ (TYPE%core!option.Option. $ (UINT SZ)) $ (CONST_INT 128) tmp%9 index@ tmp%8) (and (=> %%location_label%%10 (req%core!option.impl&%0.unwrap. $ (UINT SZ) (%Poly%core!option.Option. tmp%8))) (=> (ens%core!option.impl&%0.unwrap. $ (UINT SZ) (%Poly%core!option.Option. tmp%8) tmp%10) (or (and (=> (= (%I tmp%10) endpoint_ptr!) (=> (= ret! true) (=> %%location_label%%11 (= ret! (lib!process_manager.spec_impl.impl&%0.spec_get_thread_owns_endpoint.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!) (I endpoint_ptr!)))))) (=> (not (= (%I tmp%10) endpoint_ptr!)) %%switch_label%%1)) (and (not %%switch_label%%1) %%switch_label%%0)))))))))) (=> (not tmp%6) %%switch_label%%0)) (and (not %%switch_label%%0) (=> (= tmp%%$2@ tuple%0./tuple%0) (=> (= VERUS_ghost_iter@1 (%Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!pervasive.ForLoopGhostIterator.ghost_advance.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0) (Poly%core!ops.range.Range. VERUS_exec_iter@1)))) (and (=> %%location_label%%12 (%B (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1) (Poly%core!ops.range.Range. VERUS_exec_iter@1)))) (and (=> %%location_label%%13 (%B (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1) (Poly%core!option.Option. (core!option.Option./Some (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (vstd!std_specs.core.iter_into_iter_spec.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I 0) (I lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.?)))))))))) (and (=> %%location_label%%14 (let ((index$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (lib!process_manager.spec_impl.impl&%1.wf.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!)))) (and (=> %%location_label%%15 (let ((index$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.spec_impl.impl&%0.thread_dom.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!))) (I thread_ptr!)))) (=> %%location_label%%16 (let ((index$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) index$)) (or (is-core!option.Option./None_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!)))))))) i$))) (not (= (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!)))))))) i$)))) endpoint_ptr!))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ (UINT SZ)) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. (lib!process_manager.spec_impl.impl&%0.spec_get_thread.? (Poly%lib!process_manager.spec_impl.ProcessManager. self!) (I thread_ptr!)))))))) i$))))))))))))))))))))))))))))))))
(check-sat)
(exit)
