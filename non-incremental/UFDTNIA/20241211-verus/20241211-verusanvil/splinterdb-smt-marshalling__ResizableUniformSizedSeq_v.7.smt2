(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module marshalling::ResizableUniformSizedSeq_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.is_some. FuelId)
(declare-const fuel%vstd!std_specs.option.is_none. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!std_specs.vec.axiom_spec_len. FuelId)
(declare-const fuel%vstd!std_specs.vec.axiom_vec_index_decreases. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%40.view. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%0.deepv. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%1.uniform_size. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.max. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.valid. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parsable. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.marshallable. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.spec_size. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parse. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%14.uniform_size. FuelId)
(declare-const fuel%lib!marshalling.Marshalling_v.impl&%0.deepv. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.spec_max_length. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.first_unused_byte. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.untampered_bytes. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.seq_valid. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.lengthable. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.length. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.gettable. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.get. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.elt_parsable. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.get_elt. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.elt_marshallable. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.settable. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.resizable. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.well_formed. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.appendable. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%2.seq_parsable. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%2.seq_parse. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%2.marshallable_at. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%3.valid. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%3.parsable. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%3.parse. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%3.marshallable. FuelId)
(declare-const fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%3.spec_size. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.sets. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.appends. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.valid. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.i. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.len. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.all. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.agree_beyond_slice. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.subslice. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%2.view. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.is_some. fuel%vstd!std_specs.option.is_none. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.vec.impl&%0.spec_index. fuel%vstd!std_specs.vec.axiom_spec_len. fuel%vstd!std_specs.vec.axiom_vec_index_decreases. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%40.view. fuel%lib!marshalling.IntegerMarshalling_v.impl&%0.deepv. fuel%lib!marshalling.IntegerMarshalling_v.impl&%1.uniform_size. fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.max. fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.valid. fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parsable. fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.marshallable. fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.spec_size. fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parse. fuel%lib!marshalling.IntegerMarshalling_v.impl&%14.uniform_size. fuel%lib!marshalling.Marshalling_v.impl&%0.deepv. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.spec_max_length. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.first_unused_byte. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.untampered_bytes. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.seq_valid. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.lengthable. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.length. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.gettable. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.get. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.elt_parsable. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.get_elt. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.elt_marshallable. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.settable. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.resizable. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.well_formed. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.appendable. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%2.seq_parsable. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%2.seq_parse. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%2.marshallable_at. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%3.valid. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%3.parsable. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%3.parse. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%3.marshallable. fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%3.spec_size. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.sets. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.appends. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len. fuel%lib!marshalling.Slice_v.impl&%0.wf. fuel%lib!marshalling.Slice_v.impl&%0.valid. fuel%lib!marshalling.Slice_v.impl&%0.i. fuel%lib!marshalling.Slice_v.impl&%0.len. fuel%lib!marshalling.Slice_v.impl&%0.all. fuel%lib!marshalling.Slice_v.impl&%0.agree_beyond_slice. fuel%lib!marshalling.Slice_v.impl&%0.subslice. fuel%lib!marshalling.Slice_v.impl&%2.view. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (and (fuel_bool_default fuel%vstd!std_specs.vec.axiom_spec_len.) (fuel_bool_default fuel%vstd!std_specs.vec.axiom_vec_index_decreases.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-fun proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt (Dcr Type) Dcr)
(declare-fun proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt (Dcr Type) Type)
(declare-fun proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt (Dcr Type) Dcr)
(declare-fun proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt (Dcr Type) Type)
(declare-fun proj%%lib!marshalling.Marshalling_v.Marshal./DV (Dcr Type) Dcr)
(declare-fun proj%lib!marshalling.Marshalling_v.Marshal./DV (Dcr Type) Type)
(declare-fun proj%%lib!marshalling.Marshalling_v.Marshal./U (Dcr Type) Dcr)
(declare-fun proj%lib!marshalling.Marshalling_v.Marshal./U (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!vec.Vec<u8./allocator_global%.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (core!marker.PhantomData. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!marshalling.IntegerMarshalling_v.IntFormat. 0) (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. 0) (lib!marshalling.Slice_v.SpecSlice. 0) (lib!marshalling.Slice_v.Slice. 0) (tuple%0. 0) (tuple%1. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!marker.PhantomData./PhantomData )) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat (lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat/?_p core!marker.PhantomData.))) ((lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/?eltf Poly) (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/?lenf lib!marshalling.IntegerMarshalling_v.IntFormat.) (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/?total_size Int) (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/?max_length Int))) ((lib!marshalling.Slice_v.SpecSlice./SpecSlice (lib!marshalling.Slice_v.SpecSlice./SpecSlice/?start Int) (lib!marshalling.Slice_v.SpecSlice./SpecSlice/?end Int))) ((lib!marshalling.Slice_v.Slice./Slice (lib!marshalling.Slice_v.Slice./Slice/?start Int) (lib!marshalling.Slice_v.Slice./Slice/?end Int))) ((tuple%0./tuple%0 )) ((tuple%1./tuple%1 (tuple%1./tuple%1/?0 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat/_p (lib!marshalling.IntegerMarshalling_v.IntFormat.) core!marker.PhantomData.)
(declare-fun lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.) Poly)
(declare-fun lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/lenf (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.) lib!marshalling.IntegerMarshalling_v.IntFormat.)
(declare-fun lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/total_size (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.) Int)
(declare-fun lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/max_length (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.) Int)
(declare-fun lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (lib!marshalling.Slice_v.SpecSlice.) Int)
(declare-fun lib!marshalling.Slice_v.SpecSlice./SpecSlice/end (lib!marshalling.Slice_v.SpecSlice.) Int)
(declare-fun lib!marshalling.Slice_v.Slice./Slice/start (lib!marshalling.Slice_v.Slice.) Int)
(declare-fun lib!marshalling.Slice_v.Slice./Slice/end (lib!marshalling.Slice_v.Slice.) Int)
(declare-fun tuple%1./tuple%1/0 (tuple%1.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!marker.PhantomData. (Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. (Dcr Type) Type)
(declare-fun TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. (Dcr Type Dcr Type) Type)
(declare-const TYPE%lib!marshalling.Slice_v.SpecSlice. Type)
(declare-const TYPE%lib!marshalling.Slice_v.Slice. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%1. (Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%alloc!vec.Vec<u8./allocator_global%.>. (alloc!vec.Vec<u8./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!marker.PhantomData. (core!marker.PhantomData.) Poly)
(declare-fun %Poly%core!marker.PhantomData. (Poly) core!marker.PhantomData.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. (lib!marshalling.IntegerMarshalling_v.IntFormat.) Poly)
(declare-fun %Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. (Poly) lib!marshalling.IntegerMarshalling_v.IntFormat.)
(declare-fun Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.) Poly)
(declare-fun %Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. (Poly) lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.)
(declare-fun Poly%lib!marshalling.Slice_v.SpecSlice. (lib!marshalling.Slice_v.SpecSlice.) Poly)
(declare-fun %Poly%lib!marshalling.Slice_v.SpecSlice. (Poly) lib!marshalling.Slice_v.SpecSlice.)
(declare-fun Poly%lib!marshalling.Slice_v.Slice. (lib!marshalling.Slice_v.Slice.) Poly)
(declare-fun %Poly%lib!marshalling.Slice_v.Slice. (Poly) lib!marshalling.Slice_v.Slice.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%1. (tuple%1.) Poly)
(declare-fun %Poly%tuple%1. (Poly) tuple%1.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly%alloc!vec.Vec<u8./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<u8./allocator_global%.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<u8./allocator_global%.>. (%Poly%alloc!vec.Vec<u8./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))))))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!marker.PhantomData.)) (! (= x (%Poly%core!marker.PhantomData. (Poly%core!marker.PhantomData. x))) :pattern ((Poly%core!marker.PhantomData. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!marker.PhantomData. V&. V&)) (= x (Poly%core!marker.PhantomData. (%Poly%core!marker.PhantomData. x)))) :pattern ((has_type x (TYPE%core!marker.PhantomData. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (x core!marker.PhantomData.)) (! (has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&)) :pattern ((has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x lib!marshalling.IntegerMarshalling_v.IntFormat.)) (! (= x (%Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. x))) :pattern ((Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&)) (= x (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. (%Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. x)))) :pattern ((has_type x (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))))))
(assert (forall ((x lib!marshalling.IntegerMarshalling_v.IntFormat.)) (! (= (lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat/_p x) (lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat/?_p x)) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat/_p x)))))
(assert (forall ((T&. Dcr) (T& Type) (x lib!marshalling.IntegerMarshalling_v.IntFormat.)) (! (has_type (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. x) (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&)) :pattern ((has_type (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. x) (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))))))
(define-fun is-lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat_ ((c lib!marshalling.IntegerMarshalling_v.IntFormat.)) Bool ((_ is lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat) c))
(assert (forall ((x lib!marshalling.IntegerMarshalling_v.IntFormat.)) (! (=> (is-lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat_ x) (height_lt (height (Poly%core!marker.PhantomData. (lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat/_p x))) (height (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. x)))) :pattern ((height (Poly%core!marker.PhantomData. (lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat/_p x)))))))
(assert (forall ((x lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.)) (! (= x (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. x))) :pattern ((Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. x)))))
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) (= x (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. x)))) :pattern ((has_type x (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&))))))
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (_eltf! Poly) (_lenf! lib!marshalling.IntegerMarshalling_v.IntFormat.) (_total_size! Int) (_max_length! Int)) (! (=> (and (has_type _eltf! EltFormat&) (uInv SZ _total_size!) (uInv SZ _max_length!)) (has_type (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat _eltf! _lenf! _total_size! _max_length!)) (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&))) :pattern ((has_type (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat _eltf! _lenf! _total_size! _max_length!)) (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&))))))
(assert (forall ((x lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.)) (! (= (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf x) (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/?eltf x)) :pattern ((lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf x)))))
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) (has_type (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. x)) EltFormat&)) :pattern ((lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. x)) (has_type x (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&))))))
(assert (forall ((x lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.)) (! (= (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/lenf x) (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/?lenf x)) :pattern ((lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/lenf x)))))
(assert (forall ((x lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.)) (! (= (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/total_size x) (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/?total_size x)) :pattern ((lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/total_size x)))))
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) (uInv SZ (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/total_size (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. x)))) :pattern ((lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/total_size (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. x)) (has_type x (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&))))))
(assert (forall ((x lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.)) (! (= (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/max_length x) (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/?max_length x)) :pattern ((lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/max_length x)))))
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) (uInv SZ (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/max_length (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. x)))) :pattern ((lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/max_length (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. x)) (has_type x (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&))))))
(define-fun is-lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat_ ((c lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.)) Bool ((_ is lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat) c))
(assert (forall ((x lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.)) (! (=> (is-lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat_ x) (height_lt (height (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf x)) (height (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. x)))) :pattern ((height (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf x))))))
(assert (forall ((x lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.)) (! (=> (is-lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat_ x) (height_lt (height (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/lenf x))) (height (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. x)))) :pattern ((height (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/lenf x)))))))
(assert (forall ((x lib!marshalling.Slice_v.SpecSlice.)) (! (= x (%Poly%lib!marshalling.Slice_v.SpecSlice. (Poly%lib!marshalling.Slice_v.SpecSlice. x))) :pattern ((Poly%lib!marshalling.Slice_v.SpecSlice. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!marshalling.Slice_v.SpecSlice.) (= x (Poly%lib!marshalling.Slice_v.SpecSlice. (%Poly%lib!marshalling.Slice_v.SpecSlice. x)))) :pattern ((has_type x TYPE%lib!marshalling.Slice_v.SpecSlice.)))))
(assert (forall ((x lib!marshalling.Slice_v.SpecSlice.)) (! (= (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start x) (lib!marshalling.Slice_v.SpecSlice./SpecSlice/?start x)) :pattern ((lib!marshalling.Slice_v.SpecSlice./SpecSlice/start x)))))
(assert (forall ((x lib!marshalling.Slice_v.SpecSlice.)) (! (= (lib!marshalling.Slice_v.SpecSlice./SpecSlice/end x) (lib!marshalling.Slice_v.SpecSlice./SpecSlice/?end x)) :pattern ((lib!marshalling.Slice_v.SpecSlice./SpecSlice/end x)))))
(assert (forall ((x lib!marshalling.Slice_v.SpecSlice.)) (! (has_type (Poly%lib!marshalling.Slice_v.SpecSlice. x) TYPE%lib!marshalling.Slice_v.SpecSlice.) :pattern ((has_type (Poly%lib!marshalling.Slice_v.SpecSlice. x) TYPE%lib!marshalling.Slice_v.SpecSlice.)))))
(assert (forall ((x lib!marshalling.Slice_v.Slice.)) (! (= x (%Poly%lib!marshalling.Slice_v.Slice. (Poly%lib!marshalling.Slice_v.Slice. x))) :pattern ((Poly%lib!marshalling.Slice_v.Slice. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!marshalling.Slice_v.Slice.) (= x (Poly%lib!marshalling.Slice_v.Slice. (%Poly%lib!marshalling.Slice_v.Slice. x)))) :pattern ((has_type x TYPE%lib!marshalling.Slice_v.Slice.)))))
(assert (forall ((_start! Int) (_end! Int)) (! (=> (and (uInv SZ _start!) (uInv SZ _end!)) (has_type (Poly%lib!marshalling.Slice_v.Slice. (lib!marshalling.Slice_v.Slice./Slice _start! _end!)) TYPE%lib!marshalling.Slice_v.Slice.)) :pattern ((has_type (Poly%lib!marshalling.Slice_v.Slice. (lib!marshalling.Slice_v.Slice./Slice _start! _end!)) TYPE%lib!marshalling.Slice_v.Slice.)))))
(assert (forall ((x lib!marshalling.Slice_v.Slice.)) (! (= (lib!marshalling.Slice_v.Slice./Slice/start x) (lib!marshalling.Slice_v.Slice./Slice/?start x)) :pattern ((lib!marshalling.Slice_v.Slice./Slice/start x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!marshalling.Slice_v.Slice.) (uInv SZ (lib!marshalling.Slice_v.Slice./Slice/start (%Poly%lib!marshalling.Slice_v.Slice. x)))) :pattern ((lib!marshalling.Slice_v.Slice./Slice/start (%Poly%lib!marshalling.Slice_v.Slice. x)) (has_type x TYPE%lib!marshalling.Slice_v.Slice.)))))
(assert (forall ((x lib!marshalling.Slice_v.Slice.)) (! (= (lib!marshalling.Slice_v.Slice./Slice/end x) (lib!marshalling.Slice_v.Slice./Slice/?end x)) :pattern ((lib!marshalling.Slice_v.Slice./Slice/end x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!marshalling.Slice_v.Slice.) (uInv SZ (lib!marshalling.Slice_v.Slice./Slice/end (%Poly%lib!marshalling.Slice_v.Slice. x)))) :pattern ((lib!marshalling.Slice_v.Slice./Slice/end (%Poly%lib!marshalling.Slice_v.Slice. x)) (has_type x TYPE%lib!marshalling.Slice_v.Slice.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%1.)) (! (= x (%Poly%tuple%1. (Poly%tuple%1. x))) :pattern ((Poly%tuple%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (= x (Poly%tuple%1. (%Poly%tuple%1. x)))) :pattern ((has_type x (TYPE%tuple%1. T%0&. T%0&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (_0! Poly)) (! (=> (has_type _0! T%0&) (has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))) :pattern ((has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))))))
(assert (forall ((x tuple%1.)) (! (= (tuple%1./tuple%1/0 x) (tuple%1./tuple%1/?0 x)) :pattern ((tuple%1./tuple%1/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) T%0&)) :pattern ((tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (has_type x (TYPE%tuple%1. T%0&. T%0&))))))
(define-fun is-tuple%1./tuple%1_ ((c tuple%1.)) Bool ((_ is tuple%1./tuple%1) c))
(assert (forall ((x tuple%1.)) (! (=> (is-tuple%1./tuple%1_ x) (height_lt (height (tuple%1./tuple%1/0 x)) (height (Poly%tuple%1. x)))) :pattern ((height (tuple%1./tuple%1/0 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type y (TYPE%tuple%1. T%0&. T%0&)) (ext_eq deep T%0& (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (tuple%1./tuple%1/0 (%Poly%tuple%1. y)))) (ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)) :pattern ((ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%builtin!Integer. (Dcr Type) Bool)
(declare-fun tr_bound%builtin!SpecOrd. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!marshalling.SeqMarshalling_v.SeqMarshal. (Dcr Type) Bool)
(declare-fun tr_bound%lib!marshalling.StaticallySized_v.StaticallySized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!marshalling.UniformSized_v.UniformSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!marshalling.Marshalling_v.Deepview. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!marshalling.Marshalling_v.Marshal. (Dcr Type) Bool)
(declare-fun tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%builtin!Integer. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! true :pattern ((tr_bound%builtin!SpecOrd. Self%&. Self%& Rhs&. Rhs&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!marshalling.SeqMarshalling_v.SeqMarshal. Self%&. Self%&) (tr_bound%lib!marshalling.Marshalling_v.Deepview. (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&))) :pattern ((tr_bound%lib!marshalling.SeqMarshalling_v.SeqMarshal. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!marshalling.StaticallySized_v.StaticallySized. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!marshalling.UniformSized_v.UniformSized. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (DV&. Dcr) (DV& Type)) (! true :pattern ((tr_bound%lib!marshalling.Marshalling_v.Deepview. Self%&. Self%& DV&. DV&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!marshalling.Marshalling_v.Marshal. Self%&. Self%&) (tr_bound%lib!marshalling.Marshalling_v.Deepview. (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&))) :pattern ((tr_bound%lib!marshalling.Marshalling_v.Marshal. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. Self%&. Self%&) (and (tr_bound%lib!marshalling.Marshalling_v.Deepview. Self%&. Self%& $ INT) (tr_bound%builtin!Integer. Self%&. Self%&) (tr_bound%builtin!SpecOrd. Self%&. Self%& Self%&. Self%&) (tr_bound%lib!marshalling.StaticallySized_v.StaticallySized. Self%&. Self%&))) :pattern ((tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. Self%&. Self%&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&))))))
(assert (forall ((A0&. Dcr) (A0& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&)) (TYPE%tuple%1. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&))))))
(assert (= (proj%%vstd!view.View./V $ TYPE%lib!marshalling.Slice_v.Slice.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%lib!marshalling.Slice_v.Slice.) TYPE%lib!marshalling.Slice_v.SpecSlice.))
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type)) (! (= (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) (proj%%lib!marshalling.Marshalling_v.Marshal./DV EltFormat&. EltFormat&)) :pattern ((proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&))))))
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type)) (! (= (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) (proj%lib!marshalling.Marshalling_v.Marshal./DV EltFormat&. EltFormat&)) :pattern ((proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&))))))
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type)) (! (= (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) (proj%%lib!marshalling.Marshalling_v.Marshal./U EltFormat&. EltFormat&)) :pattern ((proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&))))))
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type)) (! (= (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) (proj%lib!marshalling.Marshalling_v.Marshal./U EltFormat&. EltFormat&)) :pattern ((proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&))))))
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type)) (! (= (proj%%lib!marshalling.Marshalling_v.Marshal./DV $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) $) :pattern ((proj%%lib!marshalling.Marshalling_v.Marshal./DV $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&))))))
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type)) (! (= (proj%lib!marshalling.Marshalling_v.Marshal./DV $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) (TYPE%vstd!seq.Seq. (proj%%lib!marshalling.Marshalling_v.Marshal./DV EltFormat&. EltFormat&) (proj%lib!marshalling.Marshalling_v.Marshal./DV EltFormat&. EltFormat&))) :pattern ((proj%lib!marshalling.Marshalling_v.Marshal./DV $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&))))))
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type)) (! (= (proj%%lib!marshalling.Marshalling_v.Marshal./U $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) $) :pattern ((proj%%lib!marshalling.Marshalling_v.Marshal./U $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&))))))
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type)) (! (= (proj%lib!marshalling.Marshalling_v.Marshal./U $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) (TYPE%alloc!vec.Vec. (proj%%lib!marshalling.Marshalling_v.Marshal./U EltFormat&. EltFormat&) (proj%lib!marshalling.Marshalling_v.Marshal./U EltFormat&. EltFormat&) $ ALLOCATOR_GLOBAL)) :pattern ((proj%lib!marshalling.Marshalling_v.Marshal./U $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%lib!marshalling.Marshalling_v.Marshal./DV $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&)) $) :pattern ((proj%%lib!marshalling.Marshalling_v.Marshal./DV $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%lib!marshalling.Marshalling_v.Marshal./DV $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&)) INT) :pattern ((proj%lib!marshalling.Marshalling_v.Marshal./DV $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%lib!marshalling.Marshalling_v.Marshal./U $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&)) T&.) :pattern ((proj%%lib!marshalling.Marshalling_v.Marshal./U $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%lib!marshalling.Marshalling_v.Marshal./U $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&)) T&) :pattern ((proj%lib!marshalling.Marshalling_v.Marshal./U $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Marshalling_v::Deepview::deepv")
(declare-fun lib!marshalling.Marshalling_v.Deepview.deepv.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!marshalling.Marshalling_v.Deepview.deepv%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::seq_valid")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? (Dcr Type Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::lengthable")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::length")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.length%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::valid")
(declare-fun lib!marshalling.Slice_v.impl&%0.valid.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::i")
(declare-fun lib!marshalling.Slice_v.impl&%0.i.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_some")
(declare-fun vstd!std_specs.option.is_some.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::gettable")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::get")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.get.? (Dcr Type Poly Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.get%default%.? (Dcr Type Poly Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::all")
(declare-fun lib!marshalling.Slice_v.impl&%0.all.? (Dcr Type Poly) lib!marshalling.Slice_v.SpecSlice.)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::get_data")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::elt_parsable")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::get_elt")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::wf")
(declare-fun lib!marshalling.Slice_v.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::elt_marshallable")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_marshallable.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_marshallable%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::settable")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.settable.? (Dcr Type Poly Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.settable%default%.? (Dcr Type Poly Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::preserves_entry")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry.? (Dcr Type Poly Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry%default%.? (Dcr Type Poly Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::sets")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.sets.? (Dcr Type Poly Poly Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.sets%default%.? (Dcr Type Poly Poly Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::agree_beyond_slice")
(declare-fun lib!marshalling.Slice_v.impl&%0.agree_beyond_slice.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::resizable")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.resizable.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.resizable%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::resizes")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes.? (Dcr Type Poly Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes%default%.? (Dcr Type Poly Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::well_formed")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::appendable")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.appendable.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.appendable%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::appends")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.appends.? (Dcr Type Poly Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.appends%default%.? (Dcr Type Poly Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::gettable_to_len")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::elt_parsable_to_len")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::parsable_to_len")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::parse_to_len")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Marshalling_v::Marshal::valid")
(declare-fun lib!marshalling.Marshalling_v.Marshal.valid.? (Dcr Type Poly) Poly)
(declare-fun lib!marshalling.Marshalling_v.Marshal.valid%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Marshalling_v::Marshal::parsable")
(declare-fun lib!marshalling.Marshalling_v.Marshal.parsable.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.Marshalling_v.Marshal.parsable%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Marshalling_v::Marshal::parse")
(declare-fun lib!marshalling.Marshalling_v.Marshal.parse.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.Marshalling_v.Marshal.parse%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Marshalling_v::Marshal::marshallable")
(declare-fun lib!marshalling.Marshalling_v.Marshal.marshallable.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.Marshalling_v.Marshal.marshallable%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Marshalling_v::Marshal::spec_size")
(declare-fun lib!marshalling.Marshalling_v.Marshal.spec_size.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.Marshalling_v.Marshal.spec_size%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::marshalling::StaticallySized_v::StaticallySized::uniform_size")
(declare-fun lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? (Dcr Type) Poly)
(declare-fun lib!marshalling.StaticallySized_v.StaticallySized.uniform_size%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::IntegerMarshalling_v::IntFormattable::spec_from_le_bytes")
(declare-fun lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? (Dcr Type Poly) Poly)
(declare-fun lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::IntegerMarshalling_v::IntFormattable::max")
(declare-fun lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? (Dcr Type) Poly)
(declare-fun lib!marshalling.IntegerMarshalling_v.IntFormattable.max%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_none")
(declare-fun vstd!std_specs.option.is_none.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::UniformSized_v::UniformSized::uniform_size")
(declare-fun lib!marshalling.UniformSized_v.UniformSized.uniform_size.? (Dcr Type Poly) Poly)
(declare-fun lib!marshalling.UniformSized_v.UniformSized.uniform_size%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::len")
(declare-fun lib!marshalling.Slice_v.impl&%0.len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::subslice")
(declare-fun lib!marshalling.Slice_v.impl&%0.subslice.? (Poly Poly Poly) lib!marshalling.Slice_v.SpecSlice.)
(set-info :comment ";; Function-Decl lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::size_of_length_field")
(declare-fun lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::spec_max_length")
(declare-fun lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.spec_max_length.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::seq_parsable")
(declare-fun lib!marshalling.ResizableUniformSizedSeq_v.impl&%2.seq_parsable.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::seq_parse")
(declare-fun lib!marshalling.ResizableUniformSizedSeq_v.impl&%2.seq_parse.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::first_unused_byte")
(declare-fun lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.first_unused_byte.? (Dcr Type Dcr Type Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::untampered_bytes")
(declare-fun lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.untampered_bytes.? (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::marshallable_at")
(declare-fun lib!marshalling.ResizableUniformSizedSeq_v.impl&%2.marshallable_at.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::Marshalling_v::Deepview::deepv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (DV&. Dcr) (DV& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!marshalling.Marshalling_v.Deepview.deepv.? Self%&. Self%& DV&. DV& self!) DV&)) :pattern ((lib!marshalling.Marshalling_v.Deepview.deepv.? Self%&. Self%& DV&. DV& self!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::seq_valid")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::lengthable")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable. Self%&. Self%& self! data!) (=> %%global_location_label%%1 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!)))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable. Self%&. Self%& self! data!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::lengthable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! data!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! data!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::length")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.length. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.length. Self%&. Self%& self! data!) (and (=> %%global_location_label%%2 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%3 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! data!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.length. Self%&. Self%& self! data!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::length")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? Self%&. Self%& self! data!) INT)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? Self%&. Self%& self! data!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::SpecSlice::valid")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%0.valid.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%0.valid.) (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (= (lib!marshalling.Slice_v.impl&%0.valid.? T&. T& self! data!) (let ((tmp%%$ (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)))) (let ((tmp%%$1 (lib!marshalling.Slice_v.SpecSlice./SpecSlice/end (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)))) (and (and (<= 0 tmp%%$) (<= tmp%%$ tmp%%$1)) (<= tmp%%$1 (vstd!seq.Seq.len.? T&. T& data!)))))) :pattern ((lib!marshalling.Slice_v.impl&%0.valid.? T&. T& self! data!))))))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::Slice::view")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%2.view.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%2.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. self!) (Poly%lib!marshalling.Slice_v.SpecSlice. (lib!marshalling.Slice_v.SpecSlice./SpecSlice (%I (I (lib!marshalling.Slice_v.Slice./Slice/start (%Poly%lib!marshalling.Slice_v.Slice. self!)))) (%I (I (lib!marshalling.Slice_v.Slice./Slice/end (%Poly%lib!marshalling.Slice_v.Slice. self!))))))) :pattern ((vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%4 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Specs lib::marshalling::Slice_v::SpecSlice::i")
(declare-fun req%lib!marshalling.Slice_v.impl&%0.i. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (= (req%lib!marshalling.Slice_v.impl&%0.i. T&. T& self! data!) (=> %%global_location_label%%5 (lib!marshalling.Slice_v.impl&%0.valid.? T&. T& self! data!))) :pattern ((req%lib!marshalling.Slice_v.impl&%0.i. T&. T& self! data!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::SpecSlice::i")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%0.i.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%0.i.) (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (= (lib!marshalling.Slice_v.impl&%0.i.? T&. T& self! data!) (vstd!seq.Seq.subrange.? T&. T& data! (I (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (%Poly%lib!marshalling.Slice_v.SpecSlice. self!))) (I (lib!marshalling.Slice_v.SpecSlice./SpecSlice/end (%Poly%lib!marshalling.Slice_v.SpecSlice. self!))))) :pattern ((lib!marshalling.Slice_v.impl&%0.i.? T&. T& self! data!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (=> (and (has_type self! TYPE%lib!marshalling.Slice_v.SpecSlice.) (has_type data! (TYPE%vstd!seq.Seq. T&. T&))) (has_type (lib!marshalling.Slice_v.impl&%0.i.? T&. T& self! data!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!marshalling.Slice_v.impl&%0.i.? T&. T& self! data!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%6 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::try_length")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_length. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_length. Self%&. Self%& self! dslice! data!) (and (=> %%global_location_label%%7 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%8 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_length. Self%&. Self%& self! dslice! data!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_length. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (out! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_length. Self%&. Self%& self! dslice! data! out!) (and (has_type out! (TYPE%core!option.Option. $ (UINT SZ))) (= (is-core!option.Option./Some_ (%Poly%core!option.Option. out!)) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. out!)) (= (core!option.Option./Some/0 (%Poly%core!option.Option. out!)) (lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_length. Self%&. Self%& self! dslice! data! out!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_some.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_some.? T&. T& option!) (is-core!option.Option./Some_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_some.? T&. T& option!))))))
(set-info :comment ";; Function-Specs core::option::impl&%0::is_some")
(declare-fun ens%core!option.impl&%0.is_some. (Dcr Type core!option.Option. Bool) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (b! Bool)) (! (= (ens%core!option.impl&%0.is_some. T&. T& option! b!) (= b! (is-core!option.Option./Some_ option!))) :pattern ((ens%core!option.impl&%0.is_some. T&. T& option! b!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::exec_lengthable")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_lengthable. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_lengthable. Self%&. Self%& self! dslice! data!) (and (=> %%global_location_label%%9 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%10 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_lengthable. Self%&. Self%& self! dslice! data!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_lengthable. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (l! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_lengthable. Self%&. Self%& self! dslice! data! l!) (and (has_type l! BOOL) (= l! (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_lengthable. Self%&. Self%& self! dslice! data! l!)))))
(set-info :comment ";; Function-Specs core::option::impl&%0::unwrap")
(declare-fun req%core!option.impl&%0.unwrap. (Dcr Type core!option.Option.) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.)) (! (= (req%core!option.impl&%0.unwrap. T&. T& option!) (=> %%global_location_label%%11 (is-core!option.Option./Some_ option!))) :pattern ((req%core!option.impl&%0.unwrap. T&. T& option!)))))
(declare-fun ens%core!option.impl&%0.unwrap. (Dcr Type core!option.Option. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (t! Poly)) (! (= (ens%core!option.impl&%0.unwrap. T&. T& option! t!) (and (has_type t! T&) (= t! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!)))))) :pattern ((ens%core!option.impl&%0.unwrap. T&. T& option! t!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::exec_length")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_length. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_length. Self%&. Self%& self! dslice! data!) (and (=> %%global_location_label%%12 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%13 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))) (=> %%global_location_label%%14 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_length. Self%&. Self%& self! dslice! data!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_length. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (len! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_length. Self%&. Self%& self! dslice! data! len!) (and (has_type len! (UINT SZ)) (= len! (lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_length. Self%&. Self%& self! dslice! data! len!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::gettable")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable. Self%&. Self%& self! data! idx!) (=> %%global_location_label%%15 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!)))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable. Self%&. Self%& self! data! idx!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::gettable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type idx! INT)) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! data! idx!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! data! idx!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::get")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.get. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.get. Self%&. Self%& self! dslice! data! idx!) (and (=> %%global_location_label%%16 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%17 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) dslice! data!)) (=> %%global_location_label%%18 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) dslice! data!) idx!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.get. Self%&. Self%& self! dslice! data! idx!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::get")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly)) (! (=> (and (has_type self! Self%&) (has_type dslice! TYPE%lib!marshalling.Slice_v.SpecSlice.) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type idx! INT)) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.get.? Self%&. Self%& self! dslice! data! idx!) TYPE%lib!marshalling.Slice_v.SpecSlice.)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.get.? Self%&. Self%& self! dslice! data! idx!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::get_ensures")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_ensures. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_ensures. Self%&. Self%& self! dslice! data! idx!) (and (=> %%global_location_label%%19 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%20 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) dslice! data!)) (=> %%global_location_label%%21 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) dslice! data!) idx!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_ensures. Self%&. Self%& self! dslice! data! idx!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_ensures. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_ensures. Self%&. Self%& self! dslice! data! idx!) (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (lib!marshalling.SeqMarshalling_v.SeqMarshal.get.? Self%&. Self%& self! dslice! data! idx!) data!)) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_ensures. Self%&. Self%& self! dslice! data! idx!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::SpecSlice::all")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%0.all.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%0.all.) (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (= (lib!marshalling.Slice_v.impl&%0.all.? T&. T& data!) (lib!marshalling.Slice_v.SpecSlice./SpecSlice (%I (I 0)) (%I (I (vstd!seq.Seq.len.? T&. T& data!))))) :pattern ((lib!marshalling.Slice_v.impl&%0.all.? T&. T& data!))))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::get_data")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data. Self%&. Self%& self! data! idx!) (and (=> %%global_location_label%%22 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%23 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! data! idx!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data. Self%&. Self%& self! data! idx!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::get_data")
(assert (fuel_bool_default fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data.))
(assert (=> (fuel_bool fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data.) (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly)) (! (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data%default%.? Self%&. Self%& self! data! idx!) (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (lib!marshalling.SeqMarshalling_v.SeqMarshal.get.? Self%&. Self%& self! (Poly%lib!marshalling.Slice_v.SpecSlice. (lib!marshalling.Slice_v.impl&%0.all.? $ (UINT 8) data!)) data! idx!) data!)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data%default%.? Self%&. Self%& self! data! idx!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type idx! INT)) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data.? Self%&. Self%& self! data! idx!) (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data.? Self%&. Self%& self! data! idx!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::elt_parsable")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable. Self%&. Self%& self! data! idx!) (and (=> %%global_location_label%%24 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%25 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! data! idx!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable. Self%&. Self%& self! data! idx!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::elt_parsable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type idx! INT)) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? Self%&. Self%& self! data! idx!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? Self%&. Self%& self! data! idx!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::get_elt")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt. Self%&. Self%& self! data! idx!) (and (=> %%global_location_label%%26 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%27 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! data! idx!))) (=> %%global_location_label%%28 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? Self%&. Self%& self! data! idx!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt. Self%&. Self%& self! data! idx!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::get_elt")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type idx! INT)) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt.? Self%&. Self%& self! data! idx!) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt.? Self%&. Self%& self! data! idx!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::try_get")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_get. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_get. Self%&. Self%& self! dslice! data! idx!) (and (=> %%global_location_label%%29 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%30 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_get. Self%&. Self%& self! dslice! data! idx!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_get. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly) (oeslice! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_get. Self%&. Self%& self! dslice! data! idx! oeslice!) (and (has_type oeslice! (TYPE%core!option.Option. $ TYPE%lib!marshalling.Slice_v.Slice.)) (= (is-core!option.Option./Some_ (%Poly%core!option.Option. oeslice!)) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) idx!))) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. oeslice!)) (= (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. (core!option.Option./Some/0 (%Poly%core!option.Option. oeslice!))) (lib!marshalling.SeqMarshalling_v.SeqMarshal.get.? Self%&. Self%& self! (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) idx!))))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_get. Self%&. Self%& self! dslice! data! idx! oeslice!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::exec_gettable")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_gettable. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_gettable. Self%&. Self%& self! dslice! data! idx!) (and (=> %%global_location_label%%31 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%32 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_gettable. Self%&. Self%& self! dslice! data! idx!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_gettable. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly) (g! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_gettable. Self%&. Self%& self! dslice! data! idx! g!) (and (has_type g! BOOL) (= g! (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) idx!)))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_gettable. Self%&. Self%& self! dslice! data! idx! g!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::SpecSlice::wf")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!marshalling.Slice_v.impl&%0.wf.? self!) (<= (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)) (lib!marshalling.Slice_v.SpecSlice./SpecSlice/end (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)))) :pattern ((lib!marshalling.Slice_v.impl&%0.wf.? self!))))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::exec_get")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_get. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_get. Self%&. Self%& self! dslice! data! idx!) (and (=> %%global_location_label%%33 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%34 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))) (=> %%global_location_label%%35 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) idx!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_get. Self%&. Self%& self! dslice! data! idx!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_get. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly) (eslice! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_get. Self%&. Self%& self! dslice! data! idx! eslice!) (and (has_type eslice! TYPE%lib!marshalling.Slice_v.Slice.) (lib!marshalling.Slice_v.impl&%0.wf.? (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. eslice!)) (= (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. eslice!) (lib!marshalling.SeqMarshalling_v.SeqMarshal.get.? Self%&. Self%& self! (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) idx!)))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_get. Self%&. Self%& self! dslice! data! idx! eslice!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::try_get_elt")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_get_elt. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_get_elt. Self%&. Self%& self! dslice! data! idx!) (and (=> %%global_location_label%%36 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%37 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_get_elt. Self%&. Self%& self! dslice! data! idx!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_get_elt. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly) (oelt! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_get_elt. Self%&. Self%& self! dslice! data! idx! oelt!) (and (has_type oelt! (TYPE%core!option.Option. (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&))) (= (is-core!option.Option./Some_ (%Poly%core!option.Option. oelt!)) (and (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) idx!)) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) idx!)))) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. oelt!)) (= (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (core!option.Option./Some/0 (%Poly%core!option.Option. oelt!))) (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) idx!))))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_get_elt. Self%&. Self%& self! dslice! data! idx! oelt!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::exec_get_elt")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_get_elt. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_get_elt. Self%&. Self%& self! dslice! data! idx!) (and (=> %%global_location_label%%38 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%39 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) idx!))) (=> %%global_location_label%%40 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) idx!))) (=> %%global_location_label%%41 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_get_elt. Self%&. Self%& self! dslice! data! idx!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_get_elt. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly) (elt! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_get_elt. Self%&. Self%& self! dslice! data! idx! elt!) (and (has_type elt! (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&)) (= (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) elt!) (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) idx!)))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_get_elt. Self%&. Self%& self! dslice! data! idx! elt!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::elt_marshallable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (elt! Poly)) (! (=> (and (has_type self! Self%&) (has_type elt! (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&))) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_marshallable.? Self%&. Self%& self! elt!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_marshallable.? Self%&. Self%& self! elt!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::settable")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.settable. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly) (value! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.settable. Self%&. Self%& self! data! idx! value!) (and (=> %%global_location_label%%42 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%43 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_marshallable.? Self%&. Self%& self! value!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.settable. Self%&. Self%& self! data! idx! value!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::settable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly) (value! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type idx! INT) (has_type value! (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&))) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.settable.? Self%&. Self%& self! data! idx! value!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.settable.? Self%&. Self%& self! data! idx! value!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::preserves_entry")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly) (new_data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry. Self%&. Self%& self! data! idx! new_data!) (=> %%global_location_label%%44 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!)))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry. Self%&. Self%& self! data! idx! new_data!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::preserves_entry")
(assert (fuel_bool_default fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry.))
(assert (=> (fuel_bool fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry.) (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly) (new_data! Poly)) (! (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry%default%.? Self%&. Self%& self! data! idx! new_data!) (B (and (=> (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! data! idx!)) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! new_data! idx!))) (=> (and (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! data! idx!)) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? Self%&. Self%& self! data! idx!))) (and (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? Self%&. Self%& self! new_data! idx!)) (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt.? Self%&. Self%& self! new_data! idx!) (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt.? Self%&. Self%& self! data! idx!))))))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry%default%.? Self%&. Self%& self! data! idx! new_data!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly) (new_data! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type idx! INT) (has_type new_data! (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry.? Self%&. Self%& self! data! idx! new_data!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry.? Self%&. Self%& self! data! idx! new_data!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::sets")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.sets. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly) (value! Poly) (new_data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.sets. Self%&. Self%& self! data! idx! value! new_data!) (and (=> %%global_location_label%%45 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%46 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_marshallable.? Self%&. Self%& self! value!))) (=> %%global_location_label%%47 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.settable.? Self%&. Self%& self! data! idx! value!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.sets. Self%&. Self%& self! data! idx! value! new_data!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::sets")
(assert (fuel_bool_default fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.sets.))
(assert (=> (fuel_bool fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.sets.) (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly) (value! Poly) (new_data! Poly)) (! (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.sets%default%.? Self%&. Self%& self! data! idx! value! new_data!) (B (and (and (and (and (and (= (vstd!seq.Seq.len.? $ (UINT 8) new_data!) (vstd!seq.Seq.len.? $ (UINT 8) data!)) (=> (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! data!)) (and (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! new_data!)) (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? Self%&. Self%& self! new_data!) (lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? Self%&. Self%& self! data!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (not (= i$ idx!)) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry.? Self%&. Self%& self! data! i$ new_data!)))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry.? Self%&. Self%& self! data! i$ new_data!))))) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! new_data! idx!))) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? Self%&. Self%& self! new_data! idx!))) (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt.? Self%&. Self%& self! new_data! idx!) value!)))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.sets%default%.? Self%&. Self%& self! data! idx! value! new_data!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (idx! Poly) (value! Poly) (new_data! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type idx! INT) (has_type value! (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&)) (has_type new_data! (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.sets.? Self%&. Self%& self! data! idx! value! new_data!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.sets.? Self%&. Self%& self! data! idx! value! new_data!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::exec_settable")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_settable. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly) (value! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_settable. Self%&. Self%& self! dslice! data! idx! value!) (and (=> %%global_location_label%%48 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%49 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))) (=> %%global_location_label%%50 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_marshallable.? Self%&. Self%& self! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) value!)))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_settable. Self%&. Self%& self! dslice! data! idx! value!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_settable. (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly) (value! Poly) (s! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_settable. Self%&. Self%& self! dslice! data! idx! value! s!) (and (has_type s! BOOL) (= s! (lib!marshalling.SeqMarshalling_v.SeqMarshal.settable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) idx! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) value!))))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_settable. Self%&. Self%& self! dslice! data! idx! value! s!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%51 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%52 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::SpecSlice::agree_beyond_slice")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%0.agree_beyond_slice.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%0.agree_beyond_slice.) (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly) (new_data! Poly)) (! (= (lib!marshalling.Slice_v.impl&%0.agree_beyond_slice.? T&. T& self! data! new_data!) (and (and (= (vstd!seq.Seq.len.? T&. T& data!) (vstd!seq.Seq.len.? T&. T& new_data!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)))) (= (vstd!seq.Seq.index.? T&. T& data! i$) (vstd!seq.Seq.index.? T&. T& new_data! i$)))) :pattern ((vstd!seq.Seq.index.? T&. T& data! i$)) :pattern ((vstd!seq.Seq.index.? T&. T& new_data! i$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (lib!marshalling.Slice_v.SpecSlice./SpecSlice/end (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)) (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& data!))) (= (vstd!seq.Seq.index.? T&. T& data! i$) (vstd!seq.Seq.index.? T&. T& new_data! i$)))) :pattern ((vstd!seq.Seq.index.? T&. T& data! i$)) :pattern ((vstd!seq.Seq.index.? T&. T& new_data! i$)))))) :pattern ((lib!marshalling.Slice_v.impl&%0.agree_beyond_slice.? T&. T& self! data! new_data!))))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::exec_set")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_set. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(declare-const %%global_location_label%%55 Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (pre%data! Poly) (idx! Poly) (value! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_set. Self%&. Self%& self! dslice! pre%data! idx! value!) (and (=> %%global_location_label%%53 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%54 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!))) (=> %%global_location_label%%55 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_marshallable.? Self%&. Self%& self! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) value!)))) (=> %%global_location_label%%56 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.settable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!)) idx! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) value!)))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_set. Self%&. Self%& self! dslice! pre%data! idx! value!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_set. (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (pre%data! Poly) (data! Poly) (idx! Poly) (value! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_set. Self%&. Self%& self! dslice! pre%data! data! idx! value!) (and (has_type data! (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (lib!marshalling.Slice_v.impl&%0.agree_beyond_slice.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.sets.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!)) idx! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) value!) (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_set. Self%&. Self%& self! dslice! pre%data! data! idx! value!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::resizable")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.resizable. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%57 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (newlen! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.resizable. Self%&. Self%& self! data! newlen!) (=> %%global_location_label%%57 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!)))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.resizable. Self%&. Self%& self! data! newlen!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::resizable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (newlen! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type newlen! INT)) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.resizable.? Self%&. Self%& self! data! newlen!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.resizable.? Self%&. Self%& self! data! newlen!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::resizes")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%58 Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (newlen! Poly) (new_data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes. Self%&. Self%& self! data! newlen! new_data!) (and (=> %%global_location_label%%58 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%59 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.resizable.? Self%&. Self%& self! data! newlen!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes. Self%&. Self%& self! data! newlen! new_data!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::resizes")
(assert (fuel_bool_default fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes.))
(assert (=> (fuel_bool fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes.) (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (newlen! Poly) (new_data! Poly)) (! (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes%default%.? Self%&. Self%& self! data! newlen! new_data!) (B (and (and (and (= (vstd!seq.Seq.len.? $ (UINT 8) new_data!) (vstd!seq.Seq.len.? $ (UINT 8) data!)) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! new_data!))) (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? Self%&. Self%& self! new_data!) newlen!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry.? Self%&. Self%& self! data! i$ new_data!))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry.? Self%&. Self%& self! data! i$ new_data!))))))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes%default%.? Self%&. Self%& self! data! newlen! new_data!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (newlen! Poly) (new_data! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type newlen! INT) (has_type new_data! (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes.? Self%&. Self%& self! data! newlen! new_data!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes.? Self%&. Self%& self! data! newlen! new_data!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::exec_resizable")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_resizable. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (newlen! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_resizable. Self%&. Self%& self! dslice! data! newlen!) (and (=> %%global_location_label%%60 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%61 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_resizable. Self%&. Self%& self! dslice! data! newlen!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_resizable. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (newlen! Poly) (r! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_resizable. Self%&. Self%& self! dslice! data! newlen! r!) (and (has_type r! BOOL) (= r! (lib!marshalling.SeqMarshalling_v.SeqMarshal.resizable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) newlen!)))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_resizable. Self%&. Self%& self! dslice! data! newlen! r!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::resize")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.resize. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%62 Bool)
(declare-const %%global_location_label%%63 Bool)
(declare-const %%global_location_label%%64 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (pre%data! Poly) (newlen! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.resize. Self%&. Self%& self! dslice! pre%data! newlen!) (and (=> %%global_location_label%%62 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%63 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!))) (=> %%global_location_label%%64 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.resizable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!)) newlen!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.resize. Self%&. Self%& self! dslice! pre%data! newlen!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.resize. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (pre%data! Poly) (data! Poly) (newlen! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.resize. Self%&. Self%& self! dslice! pre%data! data! newlen!) (and (has_type data! (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!))) (lib!marshalling.Slice_v.impl&%0.agree_beyond_slice.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!)) newlen! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.resize. Self%&. Self%& self! dslice! pre%data! data! newlen!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::well_formed")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%65 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed. Self%&. Self%& self! data!) (=> %%global_location_label%%65 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!)))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed. Self%&. Self%& self! data!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::well_formed")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed.? Self%&. Self%& self! data!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed.? Self%&. Self%& self! data!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::well_formed_ensures")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed_ensures. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%66 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed_ensures. Self%&. Self%& self! data!) (=> %%global_location_label%%66 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!)))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed_ensures. Self%&. Self%& self! data!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed_ensures. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed_ensures. Self%&. Self%& self! data!) (=> (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed.? Self%&. Self%& self! data!)) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! data!)))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed_ensures. Self%&. Self%& self! data!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::appendable")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.appendable. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(declare-const %%global_location_label%%69 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (value! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.appendable. Self%&. Self%& self! data! value!) (and (=> %%global_location_label%%67 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%68 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed.? Self%&. Self%& self! data!))) (=> %%global_location_label%%69 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_marshallable.? Self%&. Self%& self! value!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.appendable. Self%&. Self%& self! data! value!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::appendable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (value! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type value! (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&))) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.appendable.? Self%&. Self%& self! data! value!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.appendable.? Self%&. Self%& self! data! value!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::appends")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.appends. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (value! Poly) (newdata! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.appends. Self%&. Self%& self! data! value! newdata!) (and (=> %%global_location_label%%70 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%71 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed.? Self%&. Self%& self! data!))) (=> %%global_location_label%%72 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_marshallable.? Self%&. Self%& self! value!))) (=> %%global_location_label%%73 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.appendable.? Self%&. Self%& self! data! value!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.appends. Self%&. Self%& self! data! value! newdata!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::appends")
(assert (fuel_bool_default fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.appends.))
(assert (=> (fuel_bool fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.appends.) (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (value! Poly) (newdata! Poly)) (! (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.appends%default%.? Self%&. Self%& self! data! value! newdata!) (B (let ((newslot$ (%I (lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? Self%&. Self%& self! data!)))) (and (and (and (and (and (and (= (vstd!seq.Seq.len.? $ (UINT 8) newdata!) (vstd!seq.Seq.len.? $ (UINT 8) data!)) (= (%I (lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? Self%&. Self%& self! newdata!)) (Add newslot$ 1))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (not (= (%I i$) newslot$)) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry.? Self%&. Self%& self! data! i$ newdata!)))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry.? Self%&. Self%& self! data! i$ newdata!))))) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! newdata! (I newslot$)))) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? Self%&. Self%& self! newdata! (I newslot$)))) (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt.? Self%&. Self%& self! newdata! (I newslot$)) value!)) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed.? Self%&. Self%& self! newdata!)))))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.appends%default%.? Self%&. Self%& self! data! value! newdata!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (value! Poly) (newdata! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type value! (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&)) (has_type newdata! (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.appends.? Self%&. Self%& self! data! value! newdata!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.appends.? Self%&. Self%& self! data! value! newdata!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::exec_well_formed")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_well_formed. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_well_formed. Self%&. Self%& self! dslice! data!) (and (=> %%global_location_label%%74 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%75 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_well_formed. Self%&. Self%& self! dslice! data!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_well_formed. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (w! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_well_formed. Self%&. Self%& self! dslice! data! w!) (and (has_type w! BOOL) (= w! (lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_well_formed. Self%&. Self%& self! dslice! data! w!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::exec_appendable")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_appendable. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%76 Bool)
(declare-const %%global_location_label%%77 Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (value! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_appendable. Self%&. Self%& self! dslice! data! value!) (and (=> %%global_location_label%%76 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%77 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))) (=> %%global_location_label%%78 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) (=> %%global_location_label%%79 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_marshallable.? Self%&. Self%& self! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) value!)))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_appendable. Self%&. Self%& self! dslice! data! value!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_appendable. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (value! Poly) (r! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_appendable. Self%&. Self%& self! dslice! data! value! r!) (and (has_type r! BOOL) (= r! (lib!marshalling.SeqMarshalling_v.SeqMarshal.appendable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) value!))))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_appendable. Self%&. Self%& self! dslice! data! value! r!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::exec_append")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_append. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%80 Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(declare-const %%global_location_label%%84 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (pre%data! Poly) (value! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_append. Self%&. Self%& self! dslice! pre%data! value!) (and (=> %%global_location_label%%80 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%81 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!))) (=> %%global_location_label%%82 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!))))) (=> %%global_location_label%%83 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_marshallable.? Self%&. Self%& self! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) value!)))) (=> %%global_location_label%%84 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.appendable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!)) (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) value!)))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_append. Self%&. Self%& self! dslice! pre%data! value!)))))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_append. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (pre%data! Poly) (data! Poly) (value! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_append. Self%&. Self%& self! dslice! pre%data! data! value!) (and (has_type data! (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!))) (lib!marshalling.Slice_v.impl&%0.agree_beyond_slice.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.appends.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!)) (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) value!) (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_append. Self%&. Self%& self! dslice! pre%data! data! value!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::gettable_to_len")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%85 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (len! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len. Self%&. Self%& self! data! len!) (=> %%global_location_label%%85 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!)))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len. Self%&. Self%& self! data! len!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::gettable_to_len")
(assert (fuel_bool_default fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len.))
(assert (=> (fuel_bool fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len.) (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (len! Poly)) (! (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len%default%.? Self%&. Self%& self! data! len!) (B (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (%I len!))) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! data! i$)))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? Self%&. Self%& self! data! i$)))))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len%default%.? Self%&. Self%& self! data! len!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (len! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type len! INT)) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len.? Self%&. Self%& self! data! len!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len.? Self%&. Self%& self! data! len!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::elt_parsable_to_len")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%86 Bool)
(declare-const %%global_location_label%%87 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (len! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len. Self%&. Self%& self! data! len!) (and (=> %%global_location_label%%86 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%87 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len.? Self%&. Self%& self! data! len!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len. Self%&. Self%& self! data! len!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::elt_parsable_to_len")
(assert (fuel_bool_default fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len.))
(assert (=> (fuel_bool fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len.) (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (len! Poly)) (! (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len%default%.? Self%&. Self%& self! data! len!) (B (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (%I len!))) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? Self%&. Self%& self! data! i$)))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? Self%&. Self%& self! data! i$)))))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len%default%.? Self%&. Self%& self! data! len!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (len! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type len! INT)) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len.? Self%&. Self%& self! data! len!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len.? Self%&. Self%& self! data! len!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::parsable_to_len")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%88 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (len! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len. Self%&. Self%& self! data! len!) (=> %%global_location_label%%88 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!)))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len. Self%&. Self%& self! data! len!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::parsable_to_len")
(assert (fuel_bool_default fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len.))
(assert (=> (fuel_bool fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len.) (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (len! Poly)) (! (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len%default%.? Self%&. Self%& self! data! len!) (B (and (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len.? Self%&. Self%& self! data! len!)) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len.? Self%&. Self%& self! data! len!))))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len%default%.? Self%&. Self%& self! data! len!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (len! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type len! (UINT SZ))) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len.? Self%&. Self%& self! data! len!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len.? Self%&. Self%& self! data! len!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::parse_to_len")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%89 Bool)
(declare-const %%global_location_label%%90 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (len! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len. Self%&. Self%& self! data! len!) (and (=> %%global_location_label%%89 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%90 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len.? Self%&. Self%& self! data! len!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len. Self%&. Self%& self! data! len!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::parse_to_len")
(assert (fuel_bool_default fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len.))
(declare-fun %%lambda%%0 (Dcr Type Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len.) (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (len! Poly)) (! (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len%default%.? Self%&. Self%& self! data! len!) (vstd!seq.Seq.new.? (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) $ (TYPE%fun%1. $ INT (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&)) len! (Poly%fun%1. (mk_fun (%%lambda%%0 Self%&. Self%& self! data!))))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len%default%.? Self%&. Self%& self! data! len!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly) (len! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type len! (UINT SZ))) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len.? Self%&. Self%& self! data! len!) (TYPE%vstd!seq.Seq. (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&)))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len.? Self%&. Self%& self! data! len!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::Marshalling_v::Marshal::valid")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!) BOOL)) :pattern ((lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::parsable")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.parsable. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%91 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.parsable. Self%&. Self%& self! data!) (=> %%global_location_label%%91 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!)))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.parsable. Self%&. Self%& self! data!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::Marshalling_v::Marshal::parsable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type (lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! data!) BOOL)) :pattern ((lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! data!)))))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::parse")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.parse. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%92 Bool)
(declare-const %%global_location_label%%93 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.parse. Self%&. Self%& self! data!) (and (=> %%global_location_label%%92 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!))) (=> %%global_location_label%%93 (%B (lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! data!))))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.parse. Self%&. Self%& self! data!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::Marshalling_v::Marshal::parse")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type (lib!marshalling.Marshalling_v.Marshal.parse.? Self%&. Self%& self! data!) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&))) :pattern ((lib!marshalling.Marshalling_v.Marshal.parse.? Self%&. Self%& self! data!)))))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::try_parse")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.try_parse. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%94 Bool)
(declare-const %%global_location_label%%95 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (slice! Poly) (data! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.try_parse. Self%&. Self%& self! slice! data!) (and (=> %%global_location_label%%94 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!))) (=> %%global_location_label%%95 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.try_parse. Self%&. Self%& self! slice! data!)))))
(declare-fun ens%lib!marshalling.Marshalling_v.Marshal.try_parse. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (slice! Poly) (data! Poly) (ov! Poly)) (! (= (ens%lib!marshalling.Marshalling_v.Marshal.try_parse. Self%&. Self%& self! slice! data! ov!) (and (has_type ov! (TYPE%core!option.Option. (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&))) (= (%B (lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))) (is-core!option.Option./Some_ (%Poly%core!option.Option. ov!))) (=> (%B (lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))) (= (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (core!option.Option./Some/0 (%Poly%core!option.Option. ov!))) (lib!marshalling.Marshalling_v.Marshal.parse.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))))) :pattern ((ens%lib!marshalling.Marshalling_v.Marshal.try_parse. Self%&. Self%& self! slice! data! ov!)))))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::exec_parsable")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.exec_parsable. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%96 Bool)
(declare-const %%global_location_label%%97 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (slice! Poly) (data! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.exec_parsable. Self%&. Self%& self! slice! data!) (and (=> %%global_location_label%%96 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!))) (=> %%global_location_label%%97 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.exec_parsable. Self%&. Self%& self! slice! data!)))))
(declare-fun ens%lib!marshalling.Marshalling_v.Marshal.exec_parsable. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (slice! Poly) (data! Poly) (p! Poly)) (! (= (ens%lib!marshalling.Marshalling_v.Marshal.exec_parsable. Self%&. Self%& self! slice! data! p!) (and (has_type p! BOOL) (= p! (lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))))) :pattern ((ens%lib!marshalling.Marshalling_v.Marshal.exec_parsable. Self%&. Self%& self! slice! data! p!)))))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::exec_parse")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.exec_parse. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%98 Bool)
(declare-const %%global_location_label%%99 Bool)
(declare-const %%global_location_label%%100 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (slice! Poly) (data! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.exec_parse. Self%&. Self%& self! slice! data!) (and (=> %%global_location_label%%98 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!))) (=> %%global_location_label%%99 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))) (=> %%global_location_label%%100 (%B (lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.exec_parse. Self%&. Self%& self! slice! data!)))))
(declare-fun ens%lib!marshalling.Marshalling_v.Marshal.exec_parse. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (slice! Poly) (data! Poly) (value! Poly)) (! (= (ens%lib!marshalling.Marshalling_v.Marshal.exec_parse. Self%&. Self%& self! slice! data! value!) (and (has_type value! (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&)) (= (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) value!) (lib!marshalling.Marshalling_v.Marshal.parse.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))))) :pattern ((ens%lib!marshalling.Marshalling_v.Marshal.exec_parse. Self%&. Self%& self! slice! data! value!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::Marshalling_v::Marshal::marshallable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (value! Poly)) (! (=> (and (has_type self! Self%&) (has_type value! (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&))) (has_type (lib!marshalling.Marshalling_v.Marshal.marshallable.? Self%&. Self%& self! value!) BOOL)) :pattern ((lib!marshalling.Marshalling_v.Marshal.marshallable.? Self%&. Self%& self! value!)))))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::spec_size")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.spec_size. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%101 Bool)
(declare-const %%global_location_label%%102 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (value! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.spec_size. Self%&. Self%& self! value!) (and (=> %%global_location_label%%101 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!))) (=> %%global_location_label%%102 (%B (lib!marshalling.Marshalling_v.Marshal.marshallable.? Self%&. Self%& self! value!))))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.spec_size. Self%&. Self%& self! value!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::Marshalling_v::Marshal::spec_size")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (value! Poly)) (! (=> (and (has_type self! Self%&) (has_type value! (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&))) (has_type (lib!marshalling.Marshalling_v.Marshal.spec_size.? Self%&. Self%& self! value!) (UINT SZ))) :pattern ((lib!marshalling.Marshalling_v.Marshal.spec_size.? Self%&. Self%& self! value!)))))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::exec_size")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.exec_size. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%103 Bool)
(declare-const %%global_location_label%%104 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (value! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.exec_size. Self%&. Self%& self! value!) (and (=> %%global_location_label%%103 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!))) (=> %%global_location_label%%104 (%B (lib!marshalling.Marshalling_v.Marshal.marshallable.? Self%&. Self%& self! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) value!)))))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.exec_size. Self%&. Self%& self! value!)))))
(declare-fun ens%lib!marshalling.Marshalling_v.Marshal.exec_size. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (value! Poly) (sz! Poly)) (! (= (ens%lib!marshalling.Marshalling_v.Marshal.exec_size. Self%&. Self%& self! value! sz!) (and (has_type sz! (UINT SZ)) (= sz! (lib!marshalling.Marshalling_v.Marshal.spec_size.? Self%&. Self%& self! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) value!))))) :pattern ((ens%lib!marshalling.Marshalling_v.Marshal.exec_size. Self%&. Self%& self! value! sz!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::spec_vec_len")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%0.spec_index.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!) i!))) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::exec_marshall")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.exec_marshall. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%105 Bool)
(declare-const %%global_location_label%%106 Bool)
(declare-const %%global_location_label%%107 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (value! Poly) (pre%data! Poly) (start! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.exec_marshall. Self%&. Self%& self! value! pre%data! start!) (and (=> %%global_location_label%%105 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!))) (=> %%global_location_label%%106 (%B (lib!marshalling.Marshalling_v.Marshal.marshallable.? Self%&. Self%& self! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) value!)))) (=> %%global_location_label%%107 (<= (Add (%I start!) (%I (lib!marshalling.Marshalling_v.Marshal.spec_size.? Self%&. Self%& self! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) value!)))) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL pre%data!))))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.exec_marshall. Self%&. Self%& self! value! pre%data! start!)))))
(declare-fun ens%lib!marshalling.Marshalling_v.Marshal.exec_marshall. (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (value! Poly) (pre%data! Poly) (data! Poly) (start! Poly) (end! Poly)) (! (= (ens%lib!marshalling.Marshalling_v.Marshal.exec_marshall. Self%&. Self%& self! value! pre%data! data! start! end!) (and (has_type end! (UINT SZ)) (has_type data! (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (= (%I end!) (Add (%I start!) (%I (lib!marshalling.Marshalling_v.Marshal.spec_size.? Self%&. Self%& self! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) value!))))) (= (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL data!) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL pre%data!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (%I start!))) (= (vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) i$) (vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!) i$)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) i$)) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!) i$)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I end!) (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL data!))) (= (vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) i$) (vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!) i$)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) i$)) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!) i$)))) (%B (lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! (vstd!seq.Seq.subrange.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) start! end!))) (= (lib!marshalling.Marshalling_v.Marshal.parse.? Self%&. Self%& self! (vstd!seq.Seq.subrange.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) start! end!)) (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) value!)))) :pattern ((ens%lib!marshalling.Marshalling_v.Marshal.exec_marshall. Self%&. Self%& self! value! pre%data! data! start! end!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::StaticallySized_v::StaticallySized::uniform_size")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? Self%&. Self%&) (UINT SZ)) :pattern ((lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? Self%&. Self%&)))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormattable::spec_from_le_bytes")
(assert (forall ((Self%&. Dcr) (Self%& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? Self%&. Self%& s!) Self%&)) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? Self%&. Self%& s!)))))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormattable::deepv_is_as_int")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.deepv_is_as_int. (Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (v! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.deepv_is_as_int. Self%&. Self%& v!) (= (%I (lib!marshalling.Marshalling_v.Deepview.deepv.? Self%&. Self%& $ INT v!)) (%I v!))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.deepv_is_as_int. Self%&. Self%& v!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormattable::max")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? Self%&. Self%&) (UINT SZ)) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? Self%&. Self%&)))))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormattable::exec_max")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.exec_max. (Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (m! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.exec_max. Self%&. Self%& m!) (and (has_type m! (UINT SZ)) (= m! (lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? Self%&. Self%&)))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.exec_max. Self%&. Self%& m!)))))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormattable::to_usize")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.to_usize. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (v! Poly) (w! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.to_usize. Self%&. Self%& v! w!) (and (has_type w! (UINT SZ)) (= (%I v!) (%I w!)))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.to_usize. Self%&. Self%& v! w!)))))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormattable::from_usize")
(declare-fun req%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_usize. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%108 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (v! Poly)) (! (= (req%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_usize. Self%&. Self%& v!) (=> %%global_location_label%%108 (<= (%I v!) (%I (lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? Self%&. Self%&))))) :pattern ((req%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_usize. Self%&. Self%& v!)))))
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_usize. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (v! Poly) (w! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_usize. Self%&. Self%& v! w!) (and (has_type w! Self%&) (= (%I w!) (%I v!)))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_usize. Self%&. Self%& v! w!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_none")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_none.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_none.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_none.? T&. T& option!) (is-core!option.Option./None_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_none.? T&. T& option!))))))
(set-info :comment ";; Function-Specs core::option::impl&%0::is_none")
(declare-fun ens%core!option.impl&%0.is_none. (Dcr Type core!option.Option. Bool) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (b! Bool)) (! (= (ens%core!option.impl&%0.is_none. T&. T& option! b!) (= b! (is-core!option.Option./None_ option!))) :pattern ((ens%core!option.impl&%0.is_none. T&. T& option! b!)))))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::vec_index")
(declare-fun req%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%109 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int)) (! (= (req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!) (=> %%global_location_label%%109 (< i! (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!))))) :pattern ((req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!)))))
(declare-fun ens%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!) (and (has_type element! T&) (= element! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (I i!))))) :pattern ((ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!)))))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_spec_len")
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.axiom_spec_len.) (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!))))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::len")
(declare-fun ens%alloc!vec.impl&%1.len. (Dcr Type Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (len! Int)) (! (= (ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!) (and (uInv SZ len!) (= len! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec!)))) :pattern ((ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%0::with_capacity")
(declare-fun ens%alloc!vec.impl&%0.with_capacity. (Dcr Type Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (capacity! Int) (v! Poly)) (! (= (ens%alloc!vec.impl&%0.with_capacity. T&. T& capacity! v!) (and (has_type v! (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) v!) (vstd!seq.Seq.empty.? T&. T&)))) :pattern ((ens%alloc!vec.impl&%0.with_capacity. T&. T& capacity! v!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::push")
(declare-fun ens%alloc!vec.impl&%1.push. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (value! Poly)) (! (= (ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!) (and (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq.Seq.push.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) value!)))) :pattern ((ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!)))))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_vec_index_decreases")
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.axiom_vec_index_decreases.) (forall ((A&. Dcr) (A& Type) (v! Poly) (i! Poly)) (! (=> (and (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!) i!)) (height v!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!) i!)))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!))))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormat::valid")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.valid.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.valid.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (= (lib!marshalling.Marshalling_v.Marshal.valid.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self!) (B true))) :pattern ((lib!marshalling.Marshalling_v.Marshal.valid.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms lib::marshalling::UniformSized_v::UniformSized::uniform_size")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? Self%&. Self%& self!) (UINT SZ))) :pattern ((lib!marshalling.UniformSized_v.UniformSized.uniform_size.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Specs lib::marshalling::UniformSized_v::UniformSized::uniform_size_ensures")
(declare-fun ens%lib!marshalling.UniformSized_v.UniformSized.uniform_size_ensures. (Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (= (ens%lib!marshalling.UniformSized_v.UniformSized.uniform_size_ensures. Self%&. Self%& self!) (< 0 (%I (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? Self%&. Self%& self!)))) :pattern ((ens%lib!marshalling.UniformSized_v.UniformSized.uniform_size_ensures. Self%&. Self%& self!)))))
(set-info :comment ";; Function-Specs lib::marshalling::UniformSized_v::UniformSized::exec_uniform_size")
(declare-fun ens%lib!marshalling.UniformSized_v.UniformSized.exec_uniform_size. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (sz! Poly)) (! (= (ens%lib!marshalling.UniformSized_v.UniformSized.exec_uniform_size. Self%&. Self%& self! sz!) (and (has_type sz! (UINT SZ)) (= sz! (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? Self%&. Self%& self!)))) :pattern ((ens%lib!marshalling.UniformSized_v.UniformSized.exec_uniform_size. Self%&. Self%& self! sz!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormat::uniform_size")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%14.uniform_size.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%14.uniform_size.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (= (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self!) (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? T&. T&))) :pattern ((lib!marshalling.UniformSized_v.UniformSized.uniform_size.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormat::parsable")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parsable.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parsable.) (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (= (lib!marshalling.Marshalling_v.Marshal.parsable.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! data!) (B (<= (%I (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? T&. T&)) (vstd!seq.Seq.len.? $ (UINT 8) data!))))) :pattern ((lib!marshalling.Marshalling_v.Marshal.parsable.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! data!))))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormat::parse")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parse.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parse.) (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (= (lib!marshalling.Marshalling_v.Marshal.parse.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! data!) (I (%I (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? T&. T& (vstd!seq.Seq.subrange.? $ (UINT 8) data! (I 0) (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? T&. T&))))))) :pattern ((lib!marshalling.Marshalling_v.Marshal.parse.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! data!))))))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::SpecSlice::len")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%0.len.) (forall ((self! Poly)) (! (= (lib!marshalling.Slice_v.impl&%0.len.? self!) (Sub (lib!marshalling.Slice_v.SpecSlice./SpecSlice/end (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)) (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)))) :pattern ((lib!marshalling.Slice_v.impl&%0.len.? self!))))))
(set-info :comment ";; Function-Specs lib::marshalling::Slice_v::Slice::len")
(declare-fun req%lib!marshalling.Slice_v.impl&%1.len. (lib!marshalling.Slice_v.Slice.) Bool)
(declare-const %%global_location_label%%110 Bool)
(assert (forall ((self! lib!marshalling.Slice_v.Slice.)) (! (= (req%lib!marshalling.Slice_v.impl&%1.len. self!) (=> %%global_location_label%%110 (lib!marshalling.Slice_v.impl&%0.wf.? (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. (Poly%lib!marshalling.Slice_v.Slice. self!))))) :pattern ((req%lib!marshalling.Slice_v.impl&%1.len. self!)))))
(declare-fun ens%lib!marshalling.Slice_v.impl&%1.len. (lib!marshalling.Slice_v.Slice. Int) Bool)
(assert (forall ((self! lib!marshalling.Slice_v.Slice.) (out! Int)) (! (= (ens%lib!marshalling.Slice_v.impl&%1.len. self! out!) (and (uInv SZ out!) (= out! (lib!marshalling.Slice_v.impl&%0.len.? (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. (Poly%lib!marshalling.Slice_v.Slice. self!)))))) :pattern ((ens%lib!marshalling.Slice_v.impl&%1.len. self! out!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormat::marshallable")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.marshallable.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.marshallable.) (forall ((T&. Dcr) (T& Type) (self! Poly) (value! Poly)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (= (lib!marshalling.Marshalling_v.Marshal.marshallable.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! value!) (B true))) :pattern ((lib!marshalling.Marshalling_v.Marshal.marshallable.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! value!))))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormat::spec_size")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.spec_size.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.spec_size.) (forall ((T&. Dcr) (T& Type) (self! Poly) (value! Poly)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (= (lib!marshalling.Marshalling_v.Marshal.spec_size.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! value!) (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? T&. T&))) :pattern ((lib!marshalling.Marshalling_v.Marshal.spec_size.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! value!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (tr_bound%lib!marshalling.Marshalling_v.Marshal. $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))) :pattern ((tr_bound%lib!marshalling.Marshalling_v.Marshal. $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))))))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormat::uniform_size_ensures")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.impl&%14.uniform_size_ensures. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.impl&%14.uniform_size_ensures. T&. T& self!) (and (ens%lib!marshalling.UniformSized_v.UniformSized.uniform_size_ensures. $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self!) (< 0 (%I (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? T&. T&))))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.impl&%14.uniform_size_ensures. T&. T& self!)))))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormat::exec_uniform_size")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.impl&%14.exec_uniform_size. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (sz! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.impl&%14.exec_uniform_size. T&. T& self! sz!) (and (ens%lib!marshalling.UniformSized_v.UniformSized.exec_uniform_size. $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! sz!) (= sz! (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? T&. T&)))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.impl&%14.exec_uniform_size. T&. T& self! sz!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (tr_bound%lib!marshalling.UniformSized_v.UniformSized. $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))) :pattern ((tr_bound%lib!marshalling.UniformSized_v.UniformSized. $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%0::deepv")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%0.deepv.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%0.deepv.) (forall ((self! Poly)) (! (= (lib!marshalling.Marshalling_v.Deepview.deepv.? $ (UINT 8) $ INT self!) self!) :pattern ((lib!marshalling.Marshalling_v.Deepview.deepv.? $ (UINT 8) $ INT self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshalling.Marshalling_v.Deepview. $ (UINT 8) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%builtin!Integer. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((Rhs&. Dcr) (Rhs& Type)) (! (=> (tr_bound%builtin!Integer. Rhs&. Rhs&) (tr_bound%builtin!SpecOrd. $ (UINT 8) Rhs&. Rhs&)) :pattern ((tr_bound%builtin!SpecOrd. $ (UINT 8) Rhs&. Rhs&)))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%1::uniform_size")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%1.uniform_size.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%1.uniform_size.) (= (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? $ (UINT 8)) (I 1))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshalling.StaticallySized_v.StaticallySized. $ (UINT 8)))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%2::max")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.max.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.max.) (= (lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? $ (UINT 8)) (I (uClip SZ 255)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. $ (UINT 8)))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::SpecSlice::subslice")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%0.subslice.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%0.subslice.) (forall ((self! Poly) (a! Poly) (b! Poly)) (! (= (lib!marshalling.Slice_v.impl&%0.subslice.? self! a! b!) (lib!marshalling.Slice_v.SpecSlice./SpecSlice (%I (I (Add (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)) (%I a!)))) (%I (I (Add (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)) (%I b!)))))) :pattern ((lib!marshalling.Slice_v.impl&%0.subslice.? self! a! b!))))))
(set-info :comment ";; Function-Specs lib::marshalling::Slice_v::Slice::subslice")
(declare-fun req%lib!marshalling.Slice_v.impl&%1.subslice. (lib!marshalling.Slice_v.Slice. Int Int) Bool)
(declare-const %%global_location_label%%111 Bool)
(assert (forall ((self! lib!marshalling.Slice_v.Slice.) (a! Int) (b! Int)) (! (= (req%lib!marshalling.Slice_v.impl&%1.subslice. self! a! b!) (=> %%global_location_label%%111 (and (<= a! b!) (<= b! (lib!marshalling.Slice_v.impl&%0.len.? (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. (Poly%lib!marshalling.Slice_v.Slice. self!))))))) :pattern ((req%lib!marshalling.Slice_v.impl&%1.subslice. self! a! b!)))))
(declare-fun ens%lib!marshalling.Slice_v.impl&%1.subslice. (lib!marshalling.Slice_v.Slice. Int Int lib!marshalling.Slice_v.Slice.) Bool)
(assert (forall ((self! lib!marshalling.Slice_v.Slice.) (a! Int) (b! Int) (out! lib!marshalling.Slice_v.Slice.)) (! (= (ens%lib!marshalling.Slice_v.impl&%1.subslice. self! a! b! out!) (and (has_type (Poly%lib!marshalling.Slice_v.Slice. out!) TYPE%lib!marshalling.Slice_v.Slice.) (= (%Poly%lib!marshalling.Slice_v.SpecSlice. (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. (Poly%lib!marshalling.Slice_v.Slice. out!))) (lib!marshalling.Slice_v.impl&%0.subslice.? (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. (Poly%lib!marshalling.Slice_v.Slice. self!)) (I a!) (I b!))))) :pattern ((ens%lib!marshalling.Slice_v.impl&%1.subslice. self! a! b! out!)))))
(set-info :comment ";; Function-Specs lib::marshalling::math_v::nat_mul_nat_is_nat")
(declare-fun req%lib!marshalling.math_v.nat_mul_nat_is_nat. (Int Int) Bool)
(declare-const %%global_location_label%%112 Bool)
(declare-const %%global_location_label%%113 Bool)
(assert (forall ((x! Int) (y! Int)) (! (= (req%lib!marshalling.math_v.nat_mul_nat_is_nat. x! y!) (and (=> %%global_location_label%%112 (<= 0 x!)) (=> %%global_location_label%%113 (<= 0 y!)))) :pattern ((req%lib!marshalling.math_v.nat_mul_nat_is_nat. x! y!)))))
(declare-fun ens%lib!marshalling.math_v.nat_mul_nat_is_nat. (Int Int) Bool)
(assert (forall ((x! Int) (y! Int)) (! (= (ens%lib!marshalling.math_v.nat_mul_nat_is_nat. x! y!) (<= 0 (Mul x! y!))) :pattern ((ens%lib!marshalling.math_v.nat_mul_nat_is_nat. x! y!)))))
(set-info :comment ";; Function-Specs lib::marshalling::math_v::pos_mul_preserves_order")
(declare-fun req%lib!marshalling.math_v.pos_mul_preserves_order. (Int Int Int) Bool)
(declare-const %%global_location_label%%114 Bool)
(declare-const %%global_location_label%%115 Bool)
(assert (forall ((x! Int) (y! Int) (m! Int)) (! (= (req%lib!marshalling.math_v.pos_mul_preserves_order. x! y! m!) (and (=> %%global_location_label%%114 (and (<= 0 x!) (< x! y!))) (=> %%global_location_label%%115 (< 0 m!)))) :pattern ((req%lib!marshalling.math_v.pos_mul_preserves_order. x! y! m!)))))
(declare-fun ens%lib!marshalling.math_v.pos_mul_preserves_order. (Int Int Int) Bool)
(assert (forall ((x! Int) (y! Int) (m! Int)) (! (= (ens%lib!marshalling.math_v.pos_mul_preserves_order. x! y! m!) (< (Mul x! m!) (Mul y! m!))) :pattern ((ens%lib!marshalling.math_v.pos_mul_preserves_order. x! y! m!)))))
(set-info :comment ";; Function-Specs lib::marshalling::math_v::distribute_left")
(declare-fun ens%lib!marshalling.math_v.distribute_left. (Int Int Int) Bool)
(assert (forall ((a! Int) (b! Int) (c! Int)) (! (= (ens%lib!marshalling.math_v.distribute_left. a! b! c!) (= (Mul (Add a! b!) c!) (Add (Mul a! c!) (Mul b! c!)))) :pattern ((ens%lib!marshalling.math_v.distribute_left. a! b! c!)))))
(set-info :comment ";; Function-Specs lib::marshalling::math_v::div_mul_order")
(declare-fun req%lib!marshalling.math_v.div_mul_order. (Int Int) Bool)
(declare-const %%global_location_label%%116 Bool)
(assert (forall ((a! Int) (b! Int)) (! (= (req%lib!marshalling.math_v.div_mul_order. a! b!) (=> %%global_location_label%%116 (< 0 b!))) :pattern ((req%lib!marshalling.math_v.div_mul_order. a! b!)))))
(declare-fun ens%lib!marshalling.math_v.div_mul_order. (Int Int) Bool)
(assert (forall ((a! Int) (b! Int)) (! (= (ens%lib!marshalling.math_v.div_mul_order. a! b!) (<= (Mul (EucDiv a! b!) b!) a!)) :pattern ((ens%lib!marshalling.math_v.div_mul_order. a! b!)))))
(set-info :comment ";; Function-Axioms alloc::vec::Vec::deepv")
(assert (fuel_bool_default fuel%lib!marshalling.Marshalling_v.impl&%0.deepv.))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) i$) (lib!marshalling.Marshalling_v.Deepview.deepv.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) i$)))))
(assert (=> (fuel_bool fuel%lib!marshalling.Marshalling_v.impl&%0.deepv.) (forall ((DVE&. Dcr) (DVE& Type) (Elt&. Dcr) (Elt& Type) (self! Poly)) (! (=> (tr_bound%lib!marshalling.Marshalling_v.Deepview. Elt&. Elt& DVE&. DVE&) (= (lib!marshalling.Marshalling_v.Deepview.deepv.? $ (TYPE%alloc!vec.Vec. Elt&. Elt& $ ALLOCATOR_GLOBAL) $ (TYPE%vstd!seq.Seq. DVE&. DVE&) self!) (vstd!seq.Seq.new.? DVE&. DVE& $ (TYPE%fun%1. $ INT DVE&. DVE&) (I (vstd!std_specs.vec.spec_vec_len.? Elt&. Elt& $ ALLOCATOR_GLOBAL self!)) (Poly%fun%1. (mk_fun (%%lambda%%1 Elt&. Elt& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. Elt&. Elt& $ ALLOCATOR_GLOBAL) self!) Elt&. Elt& DVE&. DVE&)))))) :pattern ((lib!marshalling.Marshalling_v.Deepview.deepv.? $ (TYPE%alloc!vec.Vec. Elt&. Elt& $ ALLOCATOR_GLOBAL) $ (TYPE%vstd!seq.Seq. DVE&. DVE&) self!))))))
(set-info :comment ";; Function-Axioms lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::size_of_length_field")
(assert (fuel_bool_default fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.))
(assert (=> (fuel_bool fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.) (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! Poly)) (! (= (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? EltFormat&. EltFormat& LenType&. LenType& self!) (%I (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. LenType&. LenType&) (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/lenf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)))))) :pattern ((lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? EltFormat&. EltFormat& LenType&. LenType& self!))))))
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) (uInv SZ (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? EltFormat&. EltFormat& LenType&. LenType& self!))) :pattern ((lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? EltFormat&. EltFormat& LenType&. LenType& self!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::spec_max_length")
(assert (fuel_bool_default fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.spec_max_length.))
(assert (=> (fuel_bool fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.spec_max_length.) (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! Poly)) (! (= (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.spec_max_length.? EltFormat&. EltFormat& LenType&. LenType& self!) (uClip SZ (EucDiv (uClip SZ (Sub (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/total_size (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)) (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? EltFormat&. EltFormat& LenType&. LenType& self!))) (%I (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? EltFormat&. EltFormat& (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!))))))) :pattern ((lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.spec_max_length.? EltFormat&. EltFormat& LenType&. LenType& self!))))))
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) (uInv SZ (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.spec_max_length.? EltFormat&. EltFormat& LenType&. LenType& self!))) :pattern ((lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.spec_max_length.? EltFormat&. EltFormat& LenType&. LenType& self!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::seq_valid")
(assert (fuel_bool_default fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.seq_valid.))
(assert (=> (fuel_bool fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.seq_valid.) (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! Poly)) (! (=> (and (tr_bound%lib!marshalling.Marshalling_v.Marshal. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.UniformSized_v.UniformSized. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. LenType&. LenType&)) (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self!) (B (and (and (and (%B (lib!marshalling.Marshalling_v.Marshal.valid.? EltFormat&. EltFormat& (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)))) (%B (lib!marshalling.Marshalling_v.Marshal.valid.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. LenType&. LenType&) (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/lenf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)))))) (<= (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? EltFormat&. EltFormat& LenType&. LenType& self!) (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/total_size (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)))) (= (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/max_length (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)) (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.spec_max_length.? EltFormat&. EltFormat& LenType&. LenType& self!)))))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self!))))))
(set-info :comment ";; Function-Axioms lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::lengthable")
(assert (fuel_bool_default fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.lengthable.))
(assert (=> (fuel_bool fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.lengthable.) (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! Poly) (data! Poly)) (! (=> (and (tr_bound%lib!marshalling.Marshalling_v.Marshal. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.UniformSized_v.UniformSized. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. LenType&. LenType&)) (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data!) (B (<= (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/total_size (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)) (vstd!seq.Seq.len.? $ (UINT 8) data!))))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data!))))))
(set-info :comment ";; Function-Axioms lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::length")
(assert (fuel_bool_default fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.length.))
(assert (=> (fuel_bool fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.length.) (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! Poly) (data! Poly)) (! (=> (and (tr_bound%lib!marshalling.Marshalling_v.Marshal. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.UniformSized_v.UniformSized. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. LenType&. LenType&)) (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data!) (lib!marshalling.Marshalling_v.Marshal.parse.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. LenType&. LenType&) (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/lenf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!))) (vstd!seq.Seq.subrange.? $ (UINT 8) data! (I 0) (I (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? EltFormat&. EltFormat& LenType&. LenType& self!)))))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data!))))))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormat::parse_nat")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.impl&%12.parse_nat. (Dcr Type lib!marshalling.IntegerMarshalling_v.IntFormat. vstd!seq.Seq<u8.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!marshalling.IntegerMarshalling_v.IntFormat.) (data! vstd!seq.Seq<u8.>.)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.impl&%12.parse_nat. T&. T& self! data!) (let ((tmp%%$ (%I (lib!marshalling.Marshalling_v.Marshal.parse.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. self!) (Poly%vstd!seq.Seq<u8.>. data!))))) (and (<= 0 tmp%%$) (<= tmp%%$ (%I (lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? T&. T&)))))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.impl&%12.parse_nat. T&. T& self! data!)))))
(set-info :comment ";; Function-Specs lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::length_ensures")
(declare-fun ens%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.length_ensures. (Dcr Type Dcr Type lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. vstd!seq.Seq<u8.>.) Bool)
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.) (data! vstd!seq.Seq<u8.>.)) (! (= (ens%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.length_ensures. EltFormat&. EltFormat& LenType&. LenType& self! data!) (let ((tmp%%$ (%I (lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!) (Poly%vstd!seq.Seq<u8.>. data!))))) (and (<= 0 tmp%%$) (<= tmp%%$ (%I (lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? LenType&. LenType&)))))) :pattern ((ens%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.length_ensures. EltFormat&. EltFormat& LenType&. LenType& self! data!)))))
(set-info :comment ";; Function-Def lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::length_ensures")
(set-info :comment ";; marshalling/ResizableUniformSizedSeq_v.rs:94:5: 94:54 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::try_length")
(set-info :comment ";; marshalling/ResizableUniformSizedSeq_v.rs:153:10: 153:85 (#0)")
(set-info :comment ";; Function-Axioms lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::gettable")
(assert (fuel_bool_default fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.gettable.))
(assert (=> (fuel_bool fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.gettable.) (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! Poly) (data! Poly) (idx! Poly)) (! (=> (and (tr_bound%lib!marshalling.Marshalling_v.Marshal. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.UniformSized_v.UniformSized. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. LenType&. LenType&)) (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data! idx!) (B (and (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data!)) (and (<= 0 (%I idx!)) (< (%I idx!) (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.spec_max_length.? EltFormat&. EltFormat& LenType&. LenType& self!))))))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data! idx!))))))
(set-info :comment ";; Function-Axioms lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::get")
(assert (fuel_bool_default fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.get.))
(assert (=> (fuel_bool fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.get.) (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! Poly) (dslice! Poly) (data! Poly) (idx! Poly)) (! (=> (and (tr_bound%lib!marshalling.Marshalling_v.Marshal. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.UniformSized_v.UniformSized. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. LenType&. LenType&)) (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.get.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! dslice! data! idx!) (Poly%lib!marshalling.Slice_v.SpecSlice. (lib!marshalling.Slice_v.impl&%0.subslice.? dslice! (I (Add (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? EltFormat&. EltFormat& LenType&. LenType& self!) (Mul (%I idx!) (%I (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? EltFormat&. EltFormat& (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!))))))) (I (Add (Add (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? EltFormat&. EltFormat& LenType&. LenType& self!) (Mul (%I idx!) (%I (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? EltFormat&. EltFormat& (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)))))) (%I (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? EltFormat&. EltFormat& (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)))))))))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.get.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! dslice! data! idx!))))))
(set-info :comment ";; Function-Axioms lib::marshalling::ResizableUniformSizedSeq_v::impl&%1%default%get_data")
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! Poly) (data! Poly) (idx! Poly)) (! (=> (and (tr_bound%lib!marshalling.Marshalling_v.Marshal. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.UniformSized_v.UniformSized. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. LenType&. LenType&)) (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data! idx!) (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data%default%.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data! idx!))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data! idx!)))))
(set-info :comment ";; Function-Axioms lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::elt_parsable")
(assert (fuel_bool_default fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.elt_parsable.))
(assert (=> (fuel_bool fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.elt_parsable.) (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! Poly) (data! Poly) (idx! Poly)) (! (=> (and (tr_bound%lib!marshalling.Marshalling_v.Marshal. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.UniformSized_v.UniformSized. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. LenType&. LenType&)) (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data! idx!) (lib!marshalling.Marshalling_v.Marshal.parsable.? EltFormat&. EltFormat& (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)) (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data! idx!)))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data! idx!))))))
(set-info :comment ";; Function-Axioms lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::get_elt")
(assert (fuel_bool_default fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.get_elt.))
(assert (=> (fuel_bool fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%1.get_elt.) (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! Poly) (data! Poly) (idx! Poly)) (! (=> (and (tr_bound%lib!marshalling.Marshalling_v.Marshal. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.UniformSized_v.UniformSized. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. LenType&. LenType&)) (= (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data! idx!) (lib!marshalling.Marshalling_v.Marshal.parse.? EltFormat&. EltFormat& (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)) (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data! idx!)))) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! data! idx!))))))
(set-info :comment ";; Function-Axioms lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::valid")
(assert (fuel_bool_default fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%3.valid.))
(assert (=> (fuel_bool fuel%lib!marshalling.ResizableUniformSizedSeq_v.impl&%3.valid.) (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! Poly)) (! (=> (and (tr_bound%lib!marshalling.Marshalling_v.Marshal. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.UniformSized_v.UniformSized. EltFormat&. EltFormat&) (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. LenType&. LenType&)) (= (lib!marshalling.Marshalling_v.Marshal.valid.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self!) (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self!))) :pattern ((lib!marshalling.Marshalling_v.Marshal.valid.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self!))))))
(set-info :comment ";; Function-Specs lib::marshalling::math_v::euclidean_div_truncates")
(declare-fun req%lib!marshalling.math_v.euclidean_div_truncates. (Int Int) Bool)
(declare-const %%global_location_label%%117 Bool)
(declare-const %%global_location_label%%118 Bool)
(assert (forall ((x! Int) (y! Int)) (! (= (req%lib!marshalling.math_v.euclidean_div_truncates. x! y!) (and (=> %%global_location_label%%117 (<= 0 x!)) (=> %%global_location_label%%118 (< 0 y!)))) :pattern ((req%lib!marshalling.math_v.euclidean_div_truncates. x! y!)))))
(declare-fun ens%lib!marshalling.math_v.euclidean_div_truncates. (Int Int) Bool)
(assert (forall ((x! Int) (y! Int)) (! (= (ens%lib!marshalling.math_v.euclidean_div_truncates. x! y!) (<= (Mul (EucDiv x! y!) y!) x!)) :pattern ((ens%lib!marshalling.math_v.euclidean_div_truncates. x! y!)))))
(set-info :comment ";; Function-Specs lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::index_bounds_facts")
(declare-fun req%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.index_bounds_facts. (Dcr Type Dcr Type lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. Int) Bool)
(declare-const %%global_location_label%%119 Bool)
(declare-const %%global_location_label%%120 Bool)
(declare-const %%global_location_label%%121 Bool)
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.) (idx! Int)) (! (= (req%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.index_bounds_facts. EltFormat&. EltFormat& LenType&. LenType& self! idx!) (and (=> %%global_location_label%%119 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)))) (=> %%global_location_label%%120 (<= 0 idx!)) (=> %%global_location_label%%121 (< idx! (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.spec_max_length.? EltFormat&. EltFormat& LenType&. LenType& (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)))))) :pattern ((req%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.index_bounds_facts. EltFormat&. EltFormat& LenType&. LenType& self! idx!)))))
(declare-fun ens%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.index_bounds_facts. (Dcr Type Dcr Type lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. Int) Bool)
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.) (idx! Int)) (! (= (ens%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.index_bounds_facts. EltFormat&. EltFormat& LenType&. LenType& self! idx!) (let ((tmp%%$ (Add (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? EltFormat&. EltFormat& LenType&. LenType& (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)) (Mul idx! (%I (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? EltFormat&. EltFormat& (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!))))))))) (let ((tmp%%$1 (Add (Add (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? EltFormat&. EltFormat& LenType&. LenType& (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)) (Mul idx! (%I (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? EltFormat&. EltFormat& (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!))))))) (%I (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? EltFormat&. EltFormat& (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)))))))) (let ((tmp%%$2 (Add (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? EltFormat&. EltFormat& LenType&. LenType& (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)) (Mul (Add idx! 1) (%I (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? EltFormat&. EltFormat& (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!))))))))) (let ((tmp%%$3 (Add (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? EltFormat&. EltFormat& LenType&. LenType& (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)) (Mul (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.spec_max_length.? EltFormat&. EltFormat& LenType&. LenType& (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)) (%I (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? EltFormat&. EltFormat& (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!))))))))) (and (and (and (and (<= (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? EltFormat&. EltFormat& LenType&. LenType& (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)) tmp%%$) (< tmp%%$ tmp%%$1)) (= tmp%%$1 tmp%%$2)) (<= tmp%%$2 tmp%%$3)) (<= tmp%%$3 (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/total_size (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!)))))))))) :pattern ((ens%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.index_bounds_facts. EltFormat&. EltFormat& LenType&. LenType& self! idx!)))))
(set-info :comment ";; Function-Def lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::index_bounds_facts")
(set-info :comment ";; marshalling/ResizableUniformSizedSeq_v.rs:70:5: 70:53 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::get_ensures")
(set-info :comment ";; marshalling/ResizableUniformSizedSeq_v.rs:204:11: 204:76 (#0)")
(set-info :comment ";; Function-Specs lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::exec_size_of_length_field")
(declare-fun ens%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.exec_size_of_length_field. (Dcr Type Dcr Type lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. Int) Bool)
(assert (forall ((EltFormat&. Dcr) (EltFormat& Type) (LenType&. Dcr) (LenType& Type) (self! lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat.) (out! Int)) (! (= (ens%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.exec_size_of_length_field. EltFormat&. EltFormat& LenType&. LenType& self! out!) (and (uInv SZ out!) (= out! (lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.size_of_length_field.? EltFormat&. EltFormat& LenType&. LenType& (Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!))))) :pattern ((ens%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.exec_size_of_length_field. EltFormat&. EltFormat& LenType&. LenType& self! out!)))))
(set-info :comment ";; Function-Def lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::exec_size_of_length_field")
(set-info :comment ";; marshalling/ResizableUniformSizedSeq_v.rs:64:10: 64:60 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::exec_get")
(set-info :comment ";; marshalling/ResizableUniformSizedSeq_v.rs:238:10: 238:90 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::ResizableUniformSizedSeq_v::ResizableUniformSizedElementSeqFormat::exec_get_elt")
(set-info :comment ";; marshalling/ResizableUniformSizedSeq_v.rs:264:10: 264:98 (#0)")
(declare-const EltFormat&. Dcr)
(declare-const EltFormat& Type)
(declare-const LenType&. Dcr)
(declare-const LenType& Type)
(declare-const %return! Poly)
(declare-const self! Poly)
(declare-const dslice! Poly)
(declare-const data! Poly)
(declare-const idx! Poly)
(declare-const tmp%1 Poly)
(declare-const tmp%2 Poly)
(declare-const tmp%3 Poly)
(declare-const tmp%4 Bool)
(declare-const edslice@ lib!marshalling.Slice_v.SpecSlice.)
(declare-const tmp%5 Poly)
(declare-const tmp%6 Poly)
(declare-const eslice@ lib!marshalling.Slice_v.Slice.)
(assert fuel_defaults)
(assert (has_type self! (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)))
(assert (has_type dslice! TYPE%lib!marshalling.Slice_v.Slice.))
(assert (has_type data! (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)))
(assert (has_type idx! (UINT SZ)))
(assert (tr_bound%lib!marshalling.Marshalling_v.Marshal. EltFormat&. EltFormat&))
(assert (tr_bound%lib!marshalling.UniformSized_v.UniformSized. EltFormat&. EltFormat&))
(assert (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. LenType&. LenType&))
(assert (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self!)))
(assert (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) idx!)))
(assert (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) idx!)))
(assert (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%5 Bool)
(assert (not (and (=> %%location_label%%0 (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_get. $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! dslice! data! idx!)) (=> (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_get. $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! dslice! data! idx! tmp%1) (=> (= eslice@ (%Poly%lib!marshalling.Slice_v.Slice. tmp%1)) (=> (= tmp%2 (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!)) (=> (= tmp%3 (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) (and (=> %%location_label%%1 (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_ensures. $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! tmp%2 tmp%3 idx!)) (=> (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_ensures. $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! tmp%2 tmp%3 idx!) (and (=> %%location_label%%2 (req%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.index_bounds_facts. EltFormat&. EltFormat& LenType&. LenType& (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!) (%I idx!))) (=> (ens%lib!marshalling.ResizableUniformSizedSeq_v.impl&%0.index_bounds_facts. EltFormat&. EltFormat& LenType&. LenType& (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!) (%I idx!)) (=> (= edslice@ (%Poly%lib!marshalling.Slice_v.SpecSlice. (lib!marshalling.SeqMarshalling_v.SeqMarshal.get.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! (Poly%lib!marshalling.Slice_v.SpecSlice. (lib!marshalling.Slice_v.impl&%0.all.? $ (UINT 8) (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))) (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) idx!))) (=> (= tmp%4 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (Poly%lib!marshalling.Slice_v.SpecSlice. edslice@) (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))) (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. (Poly%lib!marshalling.Slice_v.Slice. eslice@)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))) (and (=> %%location_label%%3 tmp%4) (=> tmp%4 (=> (= tmp%6 (lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat./ResizableUniformSizedElementSeqFormat/eltf (%Poly%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. self!))) (and (=> %%location_label%%4 (req%lib!marshalling.Marshalling_v.Marshal.exec_parse. EltFormat&. EltFormat& tmp%6 (Poly%lib!marshalling.Slice_v.Slice. eslice@) data!)) (=> (ens%lib!marshalling.Marshalling_v.Marshal.exec_parse. EltFormat&. EltFormat& tmp%6 (Poly%lib!marshalling.Slice_v.Slice. eslice@) data! tmp%5) (=> (= %return! tmp%5) (=> %%location_label%%5 (= (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&)) %return!) (lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt.? $ (TYPE%lib!marshalling.ResizableUniformSizedSeq_v.ResizableUniformSizedElementSeqFormat. EltFormat&. EltFormat& LenType&. LenType&) self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) idx!))))))))))))))))))))))
(check-sat)
(exit)
