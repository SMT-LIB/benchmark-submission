(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verismo (https://www.usenix.org/conference/osdi24/presentation/zhou) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module allocator::bit_p'")
(set-info :comment ";; Fuel")
(declare-const fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_bit64_is_shl_by_bits. FuelId)
(assert (distinct fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2. fuel%verismo!tspec.math.pow_s.spec_bit64_is_shl_by_bits.))
(set-info :comment ";; Datatypes")
(declare-datatypes ((tuple%0. 0)) (((tuple%0./tuple%0 ))))
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(set-info :comment ";; Function-Decl verismo::tspec::math::pow_s::spec_bit64_is_pow_of_2")
(declare-fun verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::math::pow_s::spec_bit64_is_shl_by_bits")
(declare-fun verismo!tspec.math.pow_s.spec_bit64_is_shl_by_bits.? (Poly) Bool)
(set-info :comment ";; Function-Specs verismo::allocator::bit_p::proof_buddy")
(declare-fun req%verismo!allocator.bit_p.proof_buddy. (Int Int Int) Bool)
(declare-const %%global_location_label%%0 Bool)
(declare-const %%global_location_label%%1 Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((current_addr! Int) (current_bucket! Int) (current_size! Int)) (! (= (req%verismo!allocator.bit_p.proof_buddy. current_addr! current_bucket! current_size!) (and (=> %%global_location_label%%0 (< current_bucket! 63)) (=> %%global_location_label%%1 (= (uClip 64 (EucMod current_addr! current_size!)) 0)) (=> %%global_location_label%%2 (= current_size! (uClip 64 (uintshl 64 (I 1) (I current_bucket!))))))) :pattern ((req%verismo!allocator.bit_p.proof_buddy. current_addr! current_bucket! current_size!)))))
(declare-fun ens%verismo!allocator.bit_p.proof_buddy. (Int Int Int Int) Bool)
(assert (forall ((current_addr! Int) (current_bucket! Int) (current_size! Int) (ret! Int)) (! (= (ens%verismo!allocator.bit_p.proof_buddy. current_addr! current_bucket! current_size! ret!) (and (uInv 64 ret!) (= ret! (uClip 64 (uintxor 64 (I current_addr!) (I current_size!)))) (or (= ret! (Add current_addr! current_size!)) (= (Add ret! current_size!) current_addr!)) (=> (= (EucMod current_addr! (Mul current_size! 2)) 0) (= ret! (Add current_addr! current_size!))) (=> (not (= (EucMod current_addr! (Mul current_size! 2)) 0)) (= (Add ret! current_size!) current_addr!)) (= (uClip 64 (EucMod ret! (uClip 64 (uintshl 64 (I 1) (I (uClip 64 (Add current_bucket! 1))))))) 0) (= (Mul current_size! 2) (uClip 64 (uintshl 64 (I 1) (I (uClip 64 (Add current_bucket! 1)))))) (> current_size! 0))) :pattern ((ens%verismo!allocator.bit_p.proof_buddy. current_addr! current_bucket! current_size! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::pow_s::spec_bit64_is_pow_of_2")
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.) (forall ((val! Poly)) (! (= (verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? val!) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I val!) 1) (= (%I val!) 2)) (= (%I val!) 4)) (= (%I val!) 8)) (= (%I val!) 16)) (= (%I val!) 32)) (= (%I val!) 64)) (= (%I val!) 128)) (= (%I val!) 256)) (= (%I val!) 512)) (= (%I val!) 1024)) (= (%I val!) 2048)) (= (%I val!) 4096)) (= (%I val!) 8192)) (= (%I val!) 16384)) (= (%I val!) 32768)) (= (%I val!) 65536)) (= (%I val!) 131072)) (= (%I val!) 262144)) (= (%I val!) 524288)) (= (%I val!) 1048576)) (= (%I val!) 2097152)) (= (%I val!) 4194304)) (= (%I val!) 8388608)) (= (%I val!) 16777216)) (= (%I val!) 33554432)) (= (%I val!) 67108864)) (= (%I val!) 134217728)) (= (%I val!) 268435456)) (= (%I val!) 536870912)) (= (%I val!) 1073741824)) (= (%I val!) 2147483648)) (= (%I val!) 4294967296)) (= (%I val!) 8589934592)) (= (%I val!) 17179869184)) (= (%I val!) 34359738368)) (= (%I val!) 68719476736)) (= (%I val!) 137438953472)) (= (%I val!) 274877906944)) (= (%I val!) 549755813888)) (= (%I val!) 1099511627776)) (= (%I val!) 2199023255552)) (= (%I val!) 4398046511104)) (= (%I val!) 8796093022208)) (= (%I val!) 17592186044416)) (= (%I val!) 35184372088832)) (= (%I val!) 70368744177664)) (= (%I val!) 140737488355328)) (= (%I val!) 281474976710656)) (= (%I val!) 562949953421312)) (= (%I val!) 1125899906842624)) (= (%I val!) 2251799813685248)) (= (%I val!) 4503599627370496)) (= (%I val!) 9007199254740992)) (= (%I val!) 18014398509481984)) (= (%I val!) 36028797018963968)) (= (%I val!) 72057594037927936)) (= (%I val!) 144115188075855872)) (= (%I val!) 288230376151711744)) (= (%I val!) 576460752303423488)) (= (%I val!) 1152921504606846976)) (= (%I val!) 2305843009213693952)) (= (%I val!) 4611686018427387904)) (= (%I val!) 9223372036854775808))) :pattern ((verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? val!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::pow_s::spec_bit64_is_shl_by_bits")
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_bit64_is_shl_by_bits.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_bit64_is_shl_by_bits.) (forall ((val! Poly)) (! (= (verismo!tspec.math.pow_s.spec_bit64_is_shl_by_bits.? val!) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 0)))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 1))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 2))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 3))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 4))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 5))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 6))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 7))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 8))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 9))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 10))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 11))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 12))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 13))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 14))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 15))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 16))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 17))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 18))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 19))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 20))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 21))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 22))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 23))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 24))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 25))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 26))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 27))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 28))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 29))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 30))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 31))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 32))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 33))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 34))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 35))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 36))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 37))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 38))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 39))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 40))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 41))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 42))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 43))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 44))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 45))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 46))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 47))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 48))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 49))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 50))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 51))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 52))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 53))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 54))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 55))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 56))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 57))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 58))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 59))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 60))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 61))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 62))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 63)))))) :pattern ((verismo!tspec.math.pow_s.spec_bit64_is_shl_by_bits.? val!))))))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_shl_values_auto")
(declare-fun ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. no%param) (and (=> (< 0 64) (= (uClip 64 (uintshl 64 (I 1) (I 0))) 1)) (=> (< 1 64) (= (uClip 64 (uintshl 64 (I 1) (I 1))) 2)) (=> (< 2 64) (= (uClip 64 (uintshl 64 (I 1) (I 2))) 4)) (=> (< 3 64) (= (uClip 64 (uintshl 64 (I 1) (I 3))) 8)) (=> (< 4 64) (= (uClip 64 (uintshl 64 (I 1) (I 4))) 16)) (=> (< 5 64) (= (uClip 64 (uintshl 64 (I 1) (I 5))) 32)) (=> (< 6 64) (= (uClip 64 (uintshl 64 (I 1) (I 6))) 64)) (=> (< 7 64) (= (uClip 64 (uintshl 64 (I 1) (I 7))) 128)) (=> (< 8 64) (= (uClip 64 (uintshl 64 (I 1) (I 8))) 256)) (=> (< 9 64) (= (uClip 64 (uintshl 64 (I 1) (I 9))) 512)) (=> (< 10 64) (= (uClip 64 (uintshl 64 (I 1) (I 10))) 1024)) (=> (< 11 64) (= (uClip 64 (uintshl 64 (I 1) (I 11))) 2048)) (=> (< 12 64) (= (uClip 64 (uintshl 64 (I 1) (I 12))) 4096)) (=> (< 13 64) (= (uClip 64 (uintshl 64 (I 1) (I 13))) 8192)) (=> (< 14 64) (= (uClip 64 (uintshl 64 (I 1) (I 14))) 16384)) (=> (< 15 64) (= (uClip 64 (uintshl 64 (I 1) (I 15))) 32768)) (=> (< 16 64) (= (uClip 64 (uintshl 64 (I 1) (I 16))) 65536)) (=> (< 17 64) (= (uClip 64 (uintshl 64 (I 1) (I 17))) 131072)) (=> (< 18 64) (= (uClip 64 (uintshl 64 (I 1) (I 18))) 262144)) (=> (< 19 64) (= (uClip 64 (uintshl 64 (I 1) (I 19))) 524288)) (=> (< 20 64) (= (uClip 64 (uintshl 64 (I 1) (I 20))) 1048576)) (=> (< 21 64) (= (uClip 64 (uintshl 64 (I 1) (I 21))) 2097152)) (=> (< 22 64) (= (uClip 64 (uintshl 64 (I 1) (I 22))) 4194304)) (=> (< 23 64) (= (uClip 64 (uintshl 64 (I 1) (I 23))) 8388608)) (=> (< 24 64) (= (uClip 64 (uintshl 64 (I 1) (I 24))) 16777216)) (=> (< 25 64) (= (uClip 64 (uintshl 64 (I 1) (I 25))) 33554432)) (=> (< 26 64) (= (uClip 64 (uintshl 64 (I 1) (I 26))) 67108864)) (=> (< 27 64) (= (uClip 64 (uintshl 64 (I 1) (I 27))) 134217728)) (=> (< 28 64) (= (uClip 64 (uintshl 64 (I 1) (I 28))) 268435456)) (=> (< 29 64) (= (uClip 64 (uintshl 64 (I 1) (I 29))) 536870912)) (=> (< 30 64) (= (uClip 64 (uintshl 64 (I 1) (I 30))) 1073741824)) (=> (< 31 64) (= (uClip 64 (uintshl 64 (I 1) (I 31))) 2147483648)) (=> (< 32 64) (= (uClip 64 (uintshl 64 (I 1) (I 32))) 4294967296)) (=> (< 33 64) (= (uClip 64 (uintshl 64 (I 1) (I 33))) 8589934592)) (=> (< 34 64) (= (uClip 64 (uintshl 64 (I 1) (I 34))) 17179869184)) (=> (< 35 64) (= (uClip 64 (uintshl 64 (I 1) (I 35))) 34359738368)) (=> (< 36 64) (= (uClip 64 (uintshl 64 (I 1) (I 36))) 68719476736)) (=> (< 37 64) (= (uClip 64 (uintshl 64 (I 1) (I 37))) 137438953472)) (=> (< 38 64) (= (uClip 64 (uintshl 64 (I 1) (I 38))) 274877906944)) (=> (< 39 64) (= (uClip 64 (uintshl 64 (I 1) (I 39))) 549755813888)) (=> (< 40 64) (= (uClip 64 (uintshl 64 (I 1) (I 40))) 1099511627776)) (=> (< 41 64) (= (uClip 64 (uintshl 64 (I 1) (I 41))) 2199023255552)) (=> (< 42 64) (= (uClip 64 (uintshl 64 (I 1) (I 42))) 4398046511104)) (=> (< 43 64) (= (uClip 64 (uintshl 64 (I 1) (I 43))) 8796093022208)) (=> (< 44 64) (= (uClip 64 (uintshl 64 (I 1) (I 44))) 17592186044416)) (=> (< 45 64) (= (uClip 64 (uintshl 64 (I 1) (I 45))) 35184372088832)) (=> (< 46 64) (= (uClip 64 (uintshl 64 (I 1) (I 46))) 70368744177664)) (=> (< 47 64) (= (uClip 64 (uintshl 64 (I 1) (I 47))) 140737488355328)) (=> (< 48 64) (= (uClip 64 (uintshl 64 (I 1) (I 48))) 281474976710656)) (=> (< 49 64) (= (uClip 64 (uintshl 64 (I 1) (I 49))) 562949953421312)) (=> (< 50 64) (= (uClip 64 (uintshl 64 (I 1) (I 50))) 1125899906842624)) (=> (< 51 64) (= (uClip 64 (uintshl 64 (I 1) (I 51))) 2251799813685248)) (=> (< 52 64) (= (uClip 64 (uintshl 64 (I 1) (I 52))) 4503599627370496)) (=> (< 53 64) (= (uClip 64 (uintshl 64 (I 1) (I 53))) 9007199254740992)) (=> (< 54 64) (= (uClip 64 (uintshl 64 (I 1) (I 54))) 18014398509481984)) (=> (< 55 64) (= (uClip 64 (uintshl 64 (I 1) (I 55))) 36028797018963968)) (=> (< 56 64) (= (uClip 64 (uintshl 64 (I 1) (I 56))) 72057594037927936)) (=> (< 57 64) (= (uClip 64 (uintshl 64 (I 1) (I 57))) 144115188075855872)) (=> (< 58 64) (= (uClip 64 (uintshl 64 (I 1) (I 58))) 288230376151711744)) (=> (< 59 64) (= (uClip 64 (uintshl 64 (I 1) (I 59))) 576460752303423488)) (=> (< 60 64) (= (uClip 64 (uintshl 64 (I 1) (I 60))) 1152921504606846976)) (=> (< 61 64) (= (uClip 64 (uintshl 64 (I 1) (I 61))) 2305843009213693952)) (=> (< 62 64) (= (uClip 64 (uintshl 64 (I 1) (I 62))) 4611686018427387904)) (=> (< 63 64) (= (uClip 64 (uintshl 64 (I 1) (I 63))) 9223372036854775808)))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. no%param)))))
(set-info :comment ";; Function-Specs verismo::allocator::bit_p::lemma_get_low_bits_via_bit_op")
(declare-fun req%verismo!allocator.bit_p.lemma_get_low_bits_via_bit_op. (Int Int) Bool)
(declare-const %%global_location_label%%3 Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((val! Int) (align! Int)) (! (= (req%verismo!allocator.bit_p.lemma_get_low_bits_via_bit_op. val! align!) (and (=> %%global_location_label%%3 (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I (I align!)) 1) (= (%I (I align!)) 2)) (= (%I (I align!)) 4)) (= (%I (I align!)) 8)) (= (%I (I align!)) 16)) (= (%I (I align!)) 32)) (= (%I (I align!)) 64)) (= (%I (I align!)) 128)) (= (%I (I align!)) 256)) (= (%I (I align!)) 512)) (= (%I (I align!)) 1024)) (= (%I (I align!)) 2048)) (= (%I (I align!)) 4096)) (= (%I (I align!)) 8192)) (= (%I (I align!)) 16384)) (= (%I (I align!)) 32768)) (= (%I (I align!)) 65536)) (= (%I (I align!)) 131072)) (= (%I (I align!)) 262144)) (= (%I (I align!)) 524288)) (= (%I (I align!)) 1048576)) (= (%I (I align!)) 2097152)) (= (%I (I align!)) 4194304)) (= (%I (I align!)) 8388608)) (= (%I (I align!)) 16777216)) (= (%I (I align!)) 33554432)) (= (%I (I align!)) 67108864)) (= (%I (I align!)) 134217728)) (= (%I (I align!)) 268435456)) (= (%I (I align!)) 536870912)) (= (%I (I align!)) 1073741824)) (= (%I (I align!)) 2147483648)) (= (%I (I align!)) 4294967296)) (= (%I (I align!)) 8589934592)) (= (%I (I align!)) 17179869184)) (= (%I (I align!)) 34359738368)) (= (%I (I align!)) 68719476736)) (= (%I (I align!)) 137438953472)) (= (%I (I align!)) 274877906944)) (= (%I (I align!)) 549755813888)) (= (%I (I align!)) 1099511627776)) (= (%I (I align!)) 2199023255552)) (= (%I (I align!)) 4398046511104)) (= (%I (I align!)) 8796093022208)) (= (%I (I align!)) 17592186044416)) (= (%I (I align!)) 35184372088832)) (= (%I (I align!)) 70368744177664)) (= (%I (I align!)) 140737488355328)) (= (%I (I align!)) 281474976710656)) (= (%I (I align!)) 562949953421312)) (= (%I (I align!)) 1125899906842624)) (= (%I (I align!)) 2251799813685248)) (= (%I (I align!)) 4503599627370496)) (= (%I (I align!)) 9007199254740992)) (= (%I (I align!)) 18014398509481984)) (= (%I (I align!)) 36028797018963968)) (= (%I (I align!)) 72057594037927936)) (= (%I (I align!)) 144115188075855872)) (= (%I (I align!)) 288230376151711744)) (= (%I (I align!)) 576460752303423488)) (= (%I (I align!)) 1152921504606846976)) (= (%I (I align!)) 2305843009213693952)) (= (%I (I align!)) 4611686018427387904)) (= (%I (I align!)) 9223372036854775808))) (=> %%global_location_label%%4 (= (uClip 64 (uintand 64 (I val!) (I (uClip 64 (Sub align! 1))))) 0)))) :pattern ((req%verismo!allocator.bit_p.lemma_get_low_bits_via_bit_op. val! align!)))))
(declare-fun ens%verismo!allocator.bit_p.lemma_get_low_bits_via_bit_op. (Int Int Int) Bool)
(assert (forall ((val! Int) (align! Int) (ret! Int)) (! (= (ens%verismo!allocator.bit_p.lemma_get_low_bits_via_bit_op. val! align! ret!) (and (uInv 64 ret!) (= ret! (uClip 64 (uintand 64 (I val!) (I (uClip 64 (Add (uClip 64 (uintnot 64 (I val!))) 1)))))) (=> (not (= val! 0)) (and (>= ret! align!) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I (I ret!)) 1) (= (%I (I ret!)) 2)) (= (%I (I ret!)) 4)) (= (%I (I ret!)) 8)) (= (%I (I ret!)) 16)) (= (%I (I ret!)) 32)) (= (%I (I ret!)) 64)) (= (%I (I ret!)) 128)) (= (%I (I ret!)) 256)) (= (%I (I ret!)) 512)) (= (%I (I ret!)) 1024)) (= (%I (I ret!)) 2048)) (= (%I (I ret!)) 4096)) (= (%I (I ret!)) 8192)) (= (%I (I ret!)) 16384)) (= (%I (I ret!)) 32768)) (= (%I (I ret!)) 65536)) (= (%I (I ret!)) 131072)) (= (%I (I ret!)) 262144)) (= (%I (I ret!)) 524288)) (= (%I (I ret!)) 1048576)) (= (%I (I ret!)) 2097152)) (= (%I (I ret!)) 4194304)) (= (%I (I ret!)) 8388608)) (= (%I (I ret!)) 16777216)) (= (%I (I ret!)) 33554432)) (= (%I (I ret!)) 67108864)) (= (%I (I ret!)) 134217728)) (= (%I (I ret!)) 268435456)) (= (%I (I ret!)) 536870912)) (= (%I (I ret!)) 1073741824)) (= (%I (I ret!)) 2147483648)) (= (%I (I ret!)) 4294967296)) (= (%I (I ret!)) 8589934592)) (= (%I (I ret!)) 17179869184)) (= (%I (I ret!)) 34359738368)) (= (%I (I ret!)) 68719476736)) (= (%I (I ret!)) 137438953472)) (= (%I (I ret!)) 274877906944)) (= (%I (I ret!)) 549755813888)) (= (%I (I ret!)) 1099511627776)) (= (%I (I ret!)) 2199023255552)) (= (%I (I ret!)) 4398046511104)) (= (%I (I ret!)) 8796093022208)) (= (%I (I ret!)) 17592186044416)) (= (%I (I ret!)) 35184372088832)) (= (%I (I ret!)) 70368744177664)) (= (%I (I ret!)) 140737488355328)) (= (%I (I ret!)) 281474976710656)) (= (%I (I ret!)) 562949953421312)) (= (%I (I ret!)) 1125899906842624)) (= (%I (I ret!)) 2251799813685248)) (= (%I (I ret!)) 4503599627370496)) (= (%I (I ret!)) 9007199254740992)) (= (%I (I ret!)) 18014398509481984)) (= (%I (I ret!)) 36028797018963968)) (= (%I (I ret!)) 72057594037927936)) (= (%I (I ret!)) 144115188075855872)) (= (%I (I ret!)) 288230376151711744)) (= (%I (I ret!)) 576460752303423488)) (= (%I (I ret!)) 1152921504606846976)) (= (%I (I ret!)) 2305843009213693952)) (= (%I (I ret!)) 4611686018427387904)) (= (%I (I ret!)) 9223372036854775808)))) (=> (= val! 0) (= ret! 0)) (= (uClip 64 (uintand 64 (I val!) (I (uClip 64 (Sub ret! 1))))) 0) (= (uClip 64 (uintand 64 (I val!) (I ret!))) ret!))) :pattern ((ens%verismo!allocator.bit_p.lemma_get_low_bits_via_bit_op. val! align! ret!)))))
(set-info :comment ";; Function-Def verismo::allocator::bit_p::lemma_get_low_bits_via_bit_op")
(set-info :comment ";; verismo/src/allocator/bit_p.rs:5:1: 5:78 (#0)")
(declare-const ret! Int)
(declare-const val! Int)
(declare-const align! Int)
(declare-const tmp%1 Bool)
(declare-const ret@ Int)
(assert fuel_defaults)
(assert (uInv 64 val!))
(assert (uInv 64 align!))
(assert (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I (I align!)) 1) (= (%I (I align!)) 2)) (= (%I (I align!)) 4)) (= (%I (I align!)) 8)) (= (%I (I align!)) 16)) (= (%I (I align!)) 32)) (= (%I (I align!)) 64)) (= (%I (I align!)) 128)) (= (%I (I align!)) 256)) (= (%I (I align!)) 512)) (= (%I (I align!)) 1024)) (= (%I (I align!)) 2048)) (= (%I (I align!)) 4096)) (= (%I (I align!)) 8192)) (= (%I (I align!)) 16384)) (= (%I (I align!)) 32768)) (= (%I (I align!)) 65536)) (= (%I (I align!)) 131072)) (= (%I (I align!)) 262144)) (= (%I (I align!)) 524288)) (= (%I (I align!)) 1048576)) (= (%I (I align!)) 2097152)) (= (%I (I align!)) 4194304)) (= (%I (I align!)) 8388608)) (= (%I (I align!)) 16777216)) (= (%I (I align!)) 33554432)) (= (%I (I align!)) 67108864)) (= (%I (I align!)) 134217728)) (= (%I (I align!)) 268435456)) (= (%I (I align!)) 536870912)) (= (%I (I align!)) 1073741824)) (= (%I (I align!)) 2147483648)) (= (%I (I align!)) 4294967296)) (= (%I (I align!)) 8589934592)) (= (%I (I align!)) 17179869184)) (= (%I (I align!)) 34359738368)) (= (%I (I align!)) 68719476736)) (= (%I (I align!)) 137438953472)) (= (%I (I align!)) 274877906944)) (= (%I (I align!)) 549755813888)) (= (%I (I align!)) 1099511627776)) (= (%I (I align!)) 2199023255552)) (= (%I (I align!)) 4398046511104)) (= (%I (I align!)) 8796093022208)) (= (%I (I align!)) 17592186044416)) (= (%I (I align!)) 35184372088832)) (= (%I (I align!)) 70368744177664)) (= (%I (I align!)) 140737488355328)) (= (%I (I align!)) 281474976710656)) (= (%I (I align!)) 562949953421312)) (= (%I (I align!)) 1125899906842624)) (= (%I (I align!)) 2251799813685248)) (= (%I (I align!)) 4503599627370496)) (= (%I (I align!)) 9007199254740992)) (= (%I (I align!)) 18014398509481984)) (= (%I (I align!)) 36028797018963968)) (= (%I (I align!)) 72057594037927936)) (= (%I (I align!)) 144115188075855872)) (= (%I (I align!)) 288230376151711744)) (= (%I (I align!)) 576460752303423488)) (= (%I (I align!)) 1152921504606846976)) (= (%I (I align!)) 2305843009213693952)) (= (%I (I align!)) 4611686018427387904)) (= (%I (I align!)) 9223372036854775808)))
(assert (= (uClip 64 (uintand 64 (I val!) (I (uClip 64 (Sub align! 1))))) 0))
(declare-const %%switch_label%%0 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%14 Bool)
(assert (not (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= ret@ (uClip 64 (uintand 64 (I val!) (I (uClip 64 (Add (uClip 64 (uintnot 64 (I val!))) 1)))))) (and (=> %%location_label%%0 (= ret@ (uClip 64 (uintand 64 (I val!) (I (uClip 64 (Add (uClip 64 (uintnot 64 (I val!))) 1))))))) (=> (= (uClip 64 (uintand 64 (I val!) (I ret@))) ret@) (and (=> %%location_label%%1 (= ret@ (uClip 64 (uintand 64 (I val!) (I (uClip 64 (Add (uClip 64 (uintnot 64 (I val!))) 1))))))) (=> (= (uClip 64 (uintand 64 (I val!) (I (uClip 64 (Sub ret@ 1))))) 0) (or (and (=> (= val! 0) (and (=> %%location_label%%2 (= val! 0)) (=> (= (uClip 64 (uintand 64 (I val!) (I (uClip 64 (Add (uClip 64 (uintnot 64 (I val!))) 1))))) 0) (=> (= tmp%1 (= ret@ 0)) (and (=> %%location_label%%3 tmp%1) (=> tmp%1 %%switch_label%%0)))))) (=> (not (= val! 0)) (and (=> %%location_label%%4 (= ret@ (uClip 64 (uintand 64 (I val!) (I (uClip 64 (Add (uClip 64 (uintnot 64 (I val!))) 1))))))) (and (=> %%location_label%%5 (< 0 val!)) (=> (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 0)))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 1))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 2))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 3))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 4))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 5))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 6))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 7))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 8))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 9))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 10))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 11))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 12))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 13))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 14))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 15))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 16))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 17))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 18))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 19))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 20))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 21))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 22))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 23))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 24))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 25))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 26))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 27))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 28))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 29))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 30))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 31))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 32))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 33))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 34))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 35))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 36))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 37))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 38))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 39))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 40))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 41))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 42))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 43))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 44))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 45))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 46))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 47))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 48))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 49))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 50))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 51))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 52))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 53))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 54))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 55))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 56))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 57))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 58))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 59))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 60))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 61))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 62))))) (= (%I (I ret@)) (uClip 64 (uintshl 64 (I 1) (I 63))))) (and (=> %%location_label%%6 (= (uClip 64 (uintand 64 (I val!) (I (uClip 64 (Sub align! 1))))) 0)) (and (=> %%location_label%%7 (= ret@ (uClip 64 (uintand 64 (I val!) (I (uClip 64 (Add (uClip 64 (uintnot 64 (I val!))) 1))))))) (and (=> %%location_label%%8 (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I (I align!)) 1) (= (%I (I align!)) 2)) (= (%I (I align!)) 4)) (= (%I (I align!)) 8)) (= (%I (I align!)) 16)) (= (%I (I align!)) 32)) (= (%I (I align!)) 64)) (= (%I (I align!)) 128)) (= (%I (I align!)) 256)) (= (%I (I align!)) 512)) (= (%I (I align!)) 1024)) (= (%I (I align!)) 2048)) (= (%I (I align!)) 4096)) (= (%I (I align!)) 8192)) (= (%I (I align!)) 16384)) (= (%I (I align!)) 32768)) (= (%I (I align!)) 65536)) (= (%I (I align!)) 131072)) (= (%I (I align!)) 262144)) (= (%I (I align!)) 524288)) (= (%I (I align!)) 1048576)) (= (%I (I align!)) 2097152)) (= (%I (I align!)) 4194304)) (= (%I (I align!)) 8388608)) (= (%I (I align!)) 16777216)) (= (%I (I align!)) 33554432)) (= (%I (I align!)) 67108864)) (= (%I (I align!)) 134217728)) (= (%I (I align!)) 268435456)) (= (%I (I align!)) 536870912)) (= (%I (I align!)) 1073741824)) (= (%I (I align!)) 2147483648)) (= (%I (I align!)) 4294967296)) (= (%I (I align!)) 8589934592)) (= (%I (I align!)) 17179869184)) (= (%I (I align!)) 34359738368)) (= (%I (I align!)) 68719476736)) (= (%I (I align!)) 137438953472)) (= (%I (I align!)) 274877906944)) (= (%I (I align!)) 549755813888)) (= (%I (I align!)) 1099511627776)) (= (%I (I align!)) 2199023255552)) (= (%I (I align!)) 4398046511104)) (= (%I (I align!)) 8796093022208)) (= (%I (I align!)) 17592186044416)) (= (%I (I align!)) 35184372088832)) (= (%I (I align!)) 70368744177664)) (= (%I (I align!)) 140737488355328)) (= (%I (I align!)) 281474976710656)) (= (%I (I align!)) 562949953421312)) (= (%I (I align!)) 1125899906842624)) (= (%I (I align!)) 2251799813685248)) (= (%I (I align!)) 4503599627370496)) (= (%I (I align!)) 9007199254740992)) (= (%I (I align!)) 18014398509481984)) (= (%I (I align!)) 36028797018963968)) (= (%I (I align!)) 72057594037927936)) (= (%I (I align!)) 144115188075855872)) (= (%I (I align!)) 288230376151711744)) (= (%I (I align!)) 576460752303423488)) (= (%I (I align!)) 1152921504606846976)) (= (%I (I align!)) 2305843009213693952)) (= (%I (I align!)) 4611686018427387904)) (= (%I (I align!)) 9223372036854775808))) (and (=> %%location_label%%9 (< 0 val!)) (=> (>= ret@ align!) %%switch_label%%0)))))))))) (and (not %%switch_label%%0) (=> (= ret! ret@) (and (=> %%location_label%%10 (= ret! (uClip 64 (uintand 64 (I val!) (I (uClip 64 (Add (uClip 64 (uintnot 64 (I val!))) 1))))))) (and (=> %%location_label%%11 (=> (not (= val! 0)) (and (>= ret! align!) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I (I ret!)) 1) (= (%I (I ret!)) 2)) (= (%I (I ret!)) 4)) (= (%I (I ret!)) 8)) (= (%I (I ret!)) 16)) (= (%I (I ret!)) 32)) (= (%I (I ret!)) 64)) (= (%I (I ret!)) 128)) (= (%I (I ret!)) 256)) (= (%I (I ret!)) 512)) (= (%I (I ret!)) 1024)) (= (%I (I ret!)) 2048)) (= (%I (I ret!)) 4096)) (= (%I (I ret!)) 8192)) (= (%I (I ret!)) 16384)) (= (%I (I ret!)) 32768)) (= (%I (I ret!)) 65536)) (= (%I (I ret!)) 131072)) (= (%I (I ret!)) 262144)) (= (%I (I ret!)) 524288)) (= (%I (I ret!)) 1048576)) (= (%I (I ret!)) 2097152)) (= (%I (I ret!)) 4194304)) (= (%I (I ret!)) 8388608)) (= (%I (I ret!)) 16777216)) (= (%I (I ret!)) 33554432)) (= (%I (I ret!)) 67108864)) (= (%I (I ret!)) 134217728)) (= (%I (I ret!)) 268435456)) (= (%I (I ret!)) 536870912)) (= (%I (I ret!)) 1073741824)) (= (%I (I ret!)) 2147483648)) (= (%I (I ret!)) 4294967296)) (= (%I (I ret!)) 8589934592)) (= (%I (I ret!)) 17179869184)) (= (%I (I ret!)) 34359738368)) (= (%I (I ret!)) 68719476736)) (= (%I (I ret!)) 137438953472)) (= (%I (I ret!)) 274877906944)) (= (%I (I ret!)) 549755813888)) (= (%I (I ret!)) 1099511627776)) (= (%I (I ret!)) 2199023255552)) (= (%I (I ret!)) 4398046511104)) (= (%I (I ret!)) 8796093022208)) (= (%I (I ret!)) 17592186044416)) (= (%I (I ret!)) 35184372088832)) (= (%I (I ret!)) 70368744177664)) (= (%I (I ret!)) 140737488355328)) (= (%I (I ret!)) 281474976710656)) (= (%I (I ret!)) 562949953421312)) (= (%I (I ret!)) 1125899906842624)) (= (%I (I ret!)) 2251799813685248)) (= (%I (I ret!)) 4503599627370496)) (= (%I (I ret!)) 9007199254740992)) (= (%I (I ret!)) 18014398509481984)) (= (%I (I ret!)) 36028797018963968)) (= (%I (I ret!)) 72057594037927936)) (= (%I (I ret!)) 144115188075855872)) (= (%I (I ret!)) 288230376151711744)) (= (%I (I ret!)) 576460752303423488)) (= (%I (I ret!)) 1152921504606846976)) (= (%I (I ret!)) 2305843009213693952)) (= (%I (I ret!)) 4611686018427387904)) (= (%I (I ret!)) 9223372036854775808))))) (and (=> %%location_label%%12 (=> (= val! 0) (= ret! 0))) (and (=> %%location_label%%13 (= (uClip 64 (uintand 64 (I val!) (I (uClip 64 (Sub ret! 1))))) 0)) (=> %%location_label%%14 (= (uClip 64 (uintand 64 (I val!) (I ret!))) ret!)))))))))))))))))
(check-sat)
(exit)
