(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verismo (https://www.usenix.org/conference/osdi24/presentation/zhou) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module registers::trackedcore::snpcore'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!set.impl&%0.full. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.is_empty. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_nat_pow2. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_Secret. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec_val. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec__unused. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec_labels. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%12.is_constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%15.is_constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.wf_value. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.bop_new. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.uop_new. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%20.wf. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.seq.fn_spec_to_seq_index. FuelId)
(declare-const fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.bool_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.char_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u8_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u16_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u32_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u64_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u128_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.usize_to_stream. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%21.vspec_cast_to. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%22.spec_size_def. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%24.wf. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%25.is_constant. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%25.is_constant_to. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_regs. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_vmpl. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_cpu. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.cpu. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.update_reg_coremode. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.ghcb_value. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_req. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_resp. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcbmem_req. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcbmem_resp. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.ghcbmsr_msgs. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.ghcbmem_msgs. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.reg_updated. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_updated. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_coremode_updated. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_accessed. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_write. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_conform. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_exe. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_sys. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_dpl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_present. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_accessed. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_write. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_conform. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_exe. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_sys. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_dpl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_present. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%13.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%13.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%14.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.inv. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_new. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.lemma_new_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_accessed. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_write. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_conform. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_exe. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_sys. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_dpl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_present. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.view. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%17.spec_avl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%17.spec_long. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%17.spec_granularity. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_avl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_long. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_granularity. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%28.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%30.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%30.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%31.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.inv. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.spec_new. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.lemma_new_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.spec_avl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.spec_long. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.spec_granularity. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.view. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit0_15. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_base0_23. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit16_19. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_base24_31. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%45.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%47.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%47.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%48.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.inv. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_new. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.lemma_new_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit0_15. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_base0_23. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit16_19. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_base24_31. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.view. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%56.vspec_cast_to. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%57.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%59.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%60.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%60.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_0. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_cpl. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_2. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rax. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved2. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rcx. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rdx. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rbx. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved3. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_r8. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved4. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_code. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_1. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_2. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_scratch. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved5. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_guest_error_code. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_6. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_xcr0. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%7.vspec_cast_to. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%8.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_cpl_offset. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rax_offset. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rcx_offset. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rdx_offset. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rbx_offset. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_r8_offset. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_code_offset. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_1_offset. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_2_offset. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_scratch_offset. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_guest_error_code_offset. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_xcr0_offset. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%59.wf. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%60.is_constant. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%60.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%67.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%68.spec_vmsa_offset. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%68.spec_shared_buffer_offset. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_page.impl&%68.spec_usage_offset. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%0.wf. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%4.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_t.impl&%2.view. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_t.impl&%4.spec_len. FuelId)
(declare-const fuel%verismo!tspec.cast.proof_field_set_constant. FuelId)
(declare-const fuel%verismo!tspec.cast.fn_vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%1.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%2.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%5.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%7.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%8.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%9.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%10.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%11.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%12.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%13.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%14.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%15.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%16.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%17.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%18.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%19.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%20.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%21.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%22.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%23.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%24.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%25.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%26.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%27.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%28.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%29.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%30.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%31.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%32.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%33.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%34.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%35.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%36.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%37.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%38.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%39.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%40.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%41.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%42.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%43.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%44.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%45.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%46.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%47.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%48.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%49.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%50.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%51.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%52.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%53.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%54.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%55.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%56.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%57.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%58.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%59.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%60.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%61.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%62.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%63.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%64.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%65.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%66.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%67.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%68.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%69.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%70.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%71.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%72.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%73.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%74.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%75.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%76.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%77.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%78.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%79.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%80.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%81.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%82.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%83.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%84.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%85.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%86.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%87.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%88.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%89.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%90.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%91.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%92.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%93.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%94.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%95.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%96.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%97.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%98.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%99.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%100.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%101.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%0.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%0.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%1.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%1.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%2.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%2.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%3.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%3.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%4.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%4.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%5.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%5.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%6.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%6.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%7.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%7.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%8.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%8.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%9.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%9.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%10.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%10.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%11.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%11.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.setlib.uop_to_bop. FuelId)
(declare-const fuel%verismo!tspec.setlib.set_op. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%8.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%9.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%10.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%12.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%13.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%14.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%15.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%16.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%17.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%18.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%19.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%0.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%1.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%2.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%3.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%4.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%5.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%6.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%7.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%8.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%9.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%10.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%11.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%12.wf. FuelId)
(declare-const fuel%verismo!arch.reg.MSR_GHCB_BASE. FuelId)
(declare-const fuel%verismo!arch.reg.MSR_EFER_BASE. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%0.wf. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%1.wf. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%0.wf. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%1.is_constant. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%1.is_constant_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.recursive_sec_bytes. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_present. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_write. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_supervisor. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_pwt. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_pcd. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_accessed. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_dirty. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_psize. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_global. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_bit12. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_encrypted. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_page. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_nx. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_present. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_write. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_supervisor. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_pwt. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_pcd. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_accessed. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_dirty. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_psize. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_global. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_bit12. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_encrypted. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_page. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_nx. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%13.is_constant. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%13.is_constant_to. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%14.wf. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.inv. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_new. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.lemma_new_eq. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_present. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_write. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_supervisor. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_pwt. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_pcd. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_accessed. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_dirty. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_psize. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_global. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_bit12. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_encrypted. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_page. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_nx. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.view. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_cpu. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_run. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_vmpl. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_count. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_mem. FuelId)
(declare-const fuel%verismo!registers.msr_perm_s.impl&%0.shared. FuelId)
(declare-const fuel%verismo!registers.msr_perm_s.impl&%0.value. FuelId)
(declare-const fuel%verismo!registers.msr_perm_s.impl&%1.wf. FuelId)
(declare-const fuel%verismo!registers.msr_perm_s.impl&%2.view. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.Seq.last. fuel%vstd!set.impl&%0.full. fuel%vstd!set.impl&%0.choose. fuel%vstd!set_lib.impl&%0.is_empty. fuel%verismo!tspec.math.pow_s.spec_nat_pow2. fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol. fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom. fuel%verismo!tspec.security.sectype.impl&%0.is_Secret. fuel%verismo!tspec.security.sectype.impl&%3.spec_val. fuel%verismo!tspec.security.sectype.impl&%3.spec__unused. fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets. fuel%verismo!tspec.security.sectype.impl&%3.spec_labels. fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to. fuel%verismo!tspec.security.sectype.impl&%12.is_constant. fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to. fuel%verismo!tspec.security.sectype.impl&%15.is_constant. fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl. fuel%verismo!tspec.security.sectype.impl&%16.wf_value. fuel%verismo!tspec.security.sectype.impl&%16.bop_new. fuel%verismo!tspec.security.sectype.impl&%16.uop_new. fuel%verismo!tspec.security.sectype.impl&%16.constant. fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%20.wf. fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to. fuel%verismo!tspec.security.seq.fn_spec_to_seq_index. fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to. fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to. fuel%verismo!tspec.stream.basic.bool_to_stream. fuel%verismo!tspec.stream.basic.char_to_stream. fuel%verismo!tspec.stream.basic.u8_to_stream. fuel%verismo!tspec.stream.basic.u16_to_stream. fuel%verismo!tspec.stream.basic.u32_to_stream. fuel%verismo!tspec.stream.basic.u64_to_stream. fuel%verismo!tspec.stream.basic.u128_to_stream. fuel%verismo!tspec.stream.basic.usize_to_stream. fuel%verismo!boot.idt.def.impl&%21.vspec_cast_to. fuel%verismo!boot.idt.def.impl&%22.spec_size_def. fuel%verismo!boot.idt.def.impl&%24.wf. fuel%verismo!boot.idt.def.impl&%25.is_constant. fuel%verismo!boot.idt.def.impl&%25.is_constant_to. fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid. fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl. fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu. fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_regs. fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid. fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_vmpl. fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_cpu. fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs. fuel%verismo!registers.trackedcore.snpcore.impl&%3.cpu. fuel%verismo!registers.trackedcore.snpcore.impl&%3.update_reg_coremode. fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu. fuel%verismo!registers.trackedcore.snpcore.impl&%3.ghcb_value. fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv. fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_req. fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_resp. fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcbmem_req. fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcbmem_resp. fuel%verismo!registers.trackedcore.snpcore.impl&%3.ghcbmsr_msgs. fuel%verismo!registers.trackedcore.snpcore.impl&%3.ghcbmem_msgs. fuel%verismo!registers.trackedcore.snpcore.impl&%3.reg_updated. fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_updated. fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_coremode_updated. fuel%verismo!snp.cpu.gdt.impl&%0.spec_accessed. fuel%verismo!snp.cpu.gdt.impl&%0.spec_write. fuel%verismo!snp.cpu.gdt.impl&%0.spec_conform. fuel%verismo!snp.cpu.gdt.impl&%0.spec_exe. fuel%verismo!snp.cpu.gdt.impl&%0.spec_sys. fuel%verismo!snp.cpu.gdt.impl&%0.spec_dpl. fuel%verismo!snp.cpu.gdt.impl&%0.spec_present. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_accessed. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_write. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_conform. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_exe. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_sys. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_dpl. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_present. fuel%verismo!snp.cpu.gdt.impl&%11.spec_size_def. fuel%verismo!snp.cpu.gdt.impl&%13.is_constant. fuel%verismo!snp.cpu.gdt.impl&%13.is_constant_to. fuel%verismo!snp.cpu.gdt.impl&%14.wf. fuel%verismo!snp.cpu.gdt.impl&%16.inv. fuel%verismo!snp.cpu.gdt.impl&%16.spec_new. fuel%verismo!snp.cpu.gdt.impl&%16.lemma_new_eq. fuel%verismo!snp.cpu.gdt.impl&%16.spec_accessed. fuel%verismo!snp.cpu.gdt.impl&%16.spec_write. fuel%verismo!snp.cpu.gdt.impl&%16.spec_conform. fuel%verismo!snp.cpu.gdt.impl&%16.spec_exe. fuel%verismo!snp.cpu.gdt.impl&%16.spec_sys. fuel%verismo!snp.cpu.gdt.impl&%16.spec_dpl. fuel%verismo!snp.cpu.gdt.impl&%16.spec_present. fuel%verismo!snp.cpu.gdt.impl&%16.view. fuel%verismo!snp.cpu.gdt.impl&%17.spec_avl. fuel%verismo!snp.cpu.gdt.impl&%17.spec_long. fuel%verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16. fuel%verismo!snp.cpu.gdt.impl&%17.spec_granularity. fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_avl. fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_long. fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16. fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_granularity. fuel%verismo!snp.cpu.gdt.impl&%28.spec_size_def. fuel%verismo!snp.cpu.gdt.impl&%30.is_constant. fuel%verismo!snp.cpu.gdt.impl&%30.is_constant_to. fuel%verismo!snp.cpu.gdt.impl&%31.wf. fuel%verismo!snp.cpu.gdt.impl&%33.inv. fuel%verismo!snp.cpu.gdt.impl&%33.spec_new. fuel%verismo!snp.cpu.gdt.impl&%33.lemma_new_eq. fuel%verismo!snp.cpu.gdt.impl&%33.spec_avl. fuel%verismo!snp.cpu.gdt.impl&%33.spec_long. fuel%verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16. fuel%verismo!snp.cpu.gdt.impl&%33.spec_granularity. fuel%verismo!snp.cpu.gdt.impl&%33.view. fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit0_15. fuel%verismo!snp.cpu.gdt.impl&%34.spec_base0_23. fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7. fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit16_19. fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11. fuel%verismo!snp.cpu.gdt.impl&%34.spec_base24_31. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31. fuel%verismo!snp.cpu.gdt.impl&%45.spec_size_def. fuel%verismo!snp.cpu.gdt.impl&%47.is_constant. fuel%verismo!snp.cpu.gdt.impl&%47.is_constant_to. fuel%verismo!snp.cpu.gdt.impl&%48.wf. fuel%verismo!snp.cpu.gdt.impl&%50.inv. fuel%verismo!snp.cpu.gdt.impl&%50.spec_new. fuel%verismo!snp.cpu.gdt.impl&%50.lemma_new_eq. fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit0_15. fuel%verismo!snp.cpu.gdt.impl&%50.spec_base0_23. fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7. fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit16_19. fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11. fuel%verismo!snp.cpu.gdt.impl&%50.spec_base24_31. fuel%verismo!snp.cpu.gdt.impl&%50.view. fuel%verismo!snp.cpu.gdt.impl&%56.vspec_cast_to. fuel%verismo!snp.cpu.gdt.impl&%57.spec_size_def. fuel%verismo!snp.cpu.gdt.impl&%59.wf. fuel%verismo!snp.cpu.gdt.impl&%60.is_constant. fuel%verismo!snp.cpu.gdt.impl&%60.is_constant_to. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_0. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_cpl. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_2. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rax. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved2. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rcx. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rdx. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rbx. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved3. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_r8. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved4. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_code. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_1. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_2. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_scratch. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved5. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_guest_error_code. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_6. fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_xcr0. fuel%verismo!snp.ghcb.proto_page.impl&%7.vspec_cast_to. fuel%verismo!snp.ghcb.proto_page.impl&%8.spec_size_def. fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_cpl_offset. fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rax_offset. fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rcx_offset. fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rdx_offset. fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rbx_offset. fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_r8_offset. fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_code_offset. fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_1_offset. fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_2_offset. fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_scratch_offset. fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_guest_error_code_offset. fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_xcr0_offset. fuel%verismo!snp.ghcb.proto_page.impl&%59.wf. fuel%verismo!snp.ghcb.proto_page.impl&%60.is_constant. fuel%verismo!snp.ghcb.proto_page.impl&%60.is_constant_to. fuel%verismo!snp.ghcb.proto_page.impl&%67.spec_size_def. fuel%verismo!snp.ghcb.proto_page.impl&%68.spec_vmsa_offset. fuel%verismo!snp.ghcb.proto_page.impl&%68.spec_shared_buffer_offset. fuel%verismo!snp.ghcb.proto_page.impl&%68.spec_usage_offset. fuel%verismo!tspec_e.array.array_s.impl&%0.wf. fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant. fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant_to. fuel%verismo!tspec_e.array.array_s.impl&%3.vspec_cast_to. fuel%verismo!tspec_e.array.array_s.impl&%4.spec_size_def. fuel%verismo!tspec_e.array.array_t.impl&%2.view. fuel%verismo!tspec_e.array.array_t.impl&%4.spec_len. fuel%verismo!tspec.cast.proof_field_set_constant. fuel%verismo!tspec.cast.fn_vspec_cast_to. fuel%verismo!tspec.cast.impl&%1.vspec_cast_to. fuel%verismo!tspec.cast.impl&%2.vspec_cast_to. fuel%verismo!tspec.cast.impl&%3.vspec_cast_to. fuel%verismo!tspec.cast.impl&%4.vspec_cast_to. fuel%verismo!tspec.cast.impl&%5.vspec_cast_to. fuel%verismo!tspec.cast.impl&%6.vspec_cast_to. fuel%verismo!tspec.cast.impl&%7.vspec_cast_to. fuel%verismo!tspec.cast.impl&%8.vspec_cast_to. fuel%verismo!tspec.cast.impl&%9.vspec_cast_to. fuel%verismo!tspec.cast.impl&%10.vspec_cast_to. fuel%verismo!tspec.cast.impl&%11.vspec_cast_to. fuel%verismo!tspec.cast.impl&%12.vspec_cast_to. fuel%verismo!tspec.cast.impl&%13.vspec_cast_to. fuel%verismo!tspec.cast.impl&%14.vspec_cast_to. fuel%verismo!tspec.cast.impl&%15.vspec_cast_to. fuel%verismo!tspec.cast.impl&%16.vspec_cast_to. fuel%verismo!tspec.cast.impl&%17.vspec_cast_to. fuel%verismo!tspec.cast.impl&%18.vspec_cast_to. fuel%verismo!tspec.cast.impl&%19.vspec_cast_to. fuel%verismo!tspec.cast.impl&%20.vspec_cast_to. fuel%verismo!tspec.cast.impl&%21.vspec_cast_to. fuel%verismo!tspec.cast.impl&%22.vspec_cast_to. fuel%verismo!tspec.cast.impl&%23.vspec_cast_to. fuel%verismo!tspec.cast.impl&%24.vspec_cast_to. fuel%verismo!tspec.cast.impl&%25.vspec_cast_to. fuel%verismo!tspec.cast.impl&%26.vspec_cast_to. fuel%verismo!tspec.cast.impl&%27.vspec_cast_to. fuel%verismo!tspec.cast.impl&%28.vspec_cast_to. fuel%verismo!tspec.cast.impl&%29.vspec_cast_to. fuel%verismo!tspec.cast.impl&%30.vspec_cast_to. fuel%verismo!tspec.cast.impl&%31.vspec_cast_to. fuel%verismo!tspec.cast.impl&%32.vspec_cast_to. fuel%verismo!tspec.cast.impl&%33.vspec_cast_to. fuel%verismo!tspec.cast.impl&%34.vspec_cast_to. fuel%verismo!tspec.cast.impl&%35.vspec_cast_to. fuel%verismo!tspec.cast.impl&%36.vspec_cast_to. fuel%verismo!tspec.cast.impl&%37.vspec_cast_to. fuel%verismo!tspec.cast.impl&%38.vspec_cast_to. fuel%verismo!tspec.cast.impl&%39.vspec_cast_to. fuel%verismo!tspec.cast.impl&%40.vspec_cast_to. fuel%verismo!tspec.cast.impl&%41.vspec_cast_to. fuel%verismo!tspec.cast.impl&%42.vspec_cast_to. fuel%verismo!tspec.cast.impl&%43.vspec_cast_to. fuel%verismo!tspec.cast.impl&%44.vspec_cast_to. fuel%verismo!tspec.cast.impl&%45.vspec_cast_to. fuel%verismo!tspec.cast.impl&%46.vspec_cast_to. fuel%verismo!tspec.cast.impl&%47.vspec_cast_to. fuel%verismo!tspec.cast.impl&%48.vspec_cast_to. fuel%verismo!tspec.cast.impl&%49.vspec_cast_to. fuel%verismo!tspec.cast.impl&%50.vspec_cast_to. fuel%verismo!tspec.cast.impl&%51.vspec_cast_to. fuel%verismo!tspec.cast.impl&%52.vspec_cast_to. fuel%verismo!tspec.cast.impl&%53.vspec_cast_to. fuel%verismo!tspec.cast.impl&%54.vspec_cast_to. fuel%verismo!tspec.cast.impl&%55.vspec_cast_to. fuel%verismo!tspec.cast.impl&%56.vspec_cast_to. fuel%verismo!tspec.cast.impl&%57.vspec_cast_to. fuel%verismo!tspec.cast.impl&%58.vspec_cast_to. fuel%verismo!tspec.cast.impl&%59.vspec_cast_to. fuel%verismo!tspec.cast.impl&%60.vspec_cast_to. fuel%verismo!tspec.cast.impl&%61.vspec_cast_to. fuel%verismo!tspec.cast.impl&%62.vspec_cast_to. fuel%verismo!tspec.cast.impl&%63.vspec_cast_to. fuel%verismo!tspec.cast.impl&%64.vspec_cast_to. fuel%verismo!tspec.cast.impl&%65.vspec_cast_to. fuel%verismo!tspec.cast.impl&%66.vspec_cast_to. fuel%verismo!tspec.cast.impl&%67.vspec_cast_to. fuel%verismo!tspec.cast.impl&%68.vspec_cast_to. fuel%verismo!tspec.cast.impl&%69.vspec_cast_to. fuel%verismo!tspec.cast.impl&%70.vspec_cast_to. fuel%verismo!tspec.cast.impl&%71.vspec_cast_to. fuel%verismo!tspec.cast.impl&%72.vspec_cast_to. fuel%verismo!tspec.cast.impl&%73.vspec_cast_to. fuel%verismo!tspec.cast.impl&%74.vspec_cast_to. fuel%verismo!tspec.cast.impl&%75.vspec_cast_to. fuel%verismo!tspec.cast.impl&%76.vspec_cast_to. fuel%verismo!tspec.cast.impl&%77.vspec_cast_to. fuel%verismo!tspec.cast.impl&%78.vspec_cast_to. fuel%verismo!tspec.cast.impl&%79.vspec_cast_to. fuel%verismo!tspec.cast.impl&%80.vspec_cast_to. fuel%verismo!tspec.cast.impl&%81.vspec_cast_to. fuel%verismo!tspec.cast.impl&%82.vspec_cast_to. fuel%verismo!tspec.cast.impl&%83.vspec_cast_to. fuel%verismo!tspec.cast.impl&%84.vspec_cast_to. fuel%verismo!tspec.cast.impl&%85.vspec_cast_to. fuel%verismo!tspec.cast.impl&%86.vspec_cast_to. fuel%verismo!tspec.cast.impl&%87.vspec_cast_to. fuel%verismo!tspec.cast.impl&%88.vspec_cast_to. fuel%verismo!tspec.cast.impl&%89.vspec_cast_to. fuel%verismo!tspec.cast.impl&%90.vspec_cast_to. fuel%verismo!tspec.cast.impl&%91.vspec_cast_to. fuel%verismo!tspec.cast.impl&%92.vspec_cast_to. fuel%verismo!tspec.cast.impl&%93.vspec_cast_to. fuel%verismo!tspec.cast.impl&%94.vspec_cast_to. fuel%verismo!tspec.cast.impl&%95.vspec_cast_to. fuel%verismo!tspec.cast.impl&%96.vspec_cast_to. fuel%verismo!tspec.cast.impl&%97.vspec_cast_to. fuel%verismo!tspec.cast.impl&%98.vspec_cast_to. fuel%verismo!tspec.cast.impl&%99.vspec_cast_to. fuel%verismo!tspec.cast.impl&%100.vspec_cast_to. fuel%verismo!tspec.cast.impl&%101.vspec_cast_to. fuel%verismo!tspec.isconst.impl&%0.is_constant. fuel%verismo!tspec.isconst.impl&%0.is_constant_to. fuel%verismo!tspec.isconst.impl&%1.is_constant. fuel%verismo!tspec.isconst.impl&%1.is_constant_to. fuel%verismo!tspec.isconst.impl&%2.is_constant. fuel%verismo!tspec.isconst.impl&%2.is_constant_to. fuel%verismo!tspec.isconst.impl&%3.is_constant. fuel%verismo!tspec.isconst.impl&%3.is_constant_to. fuel%verismo!tspec.isconst.impl&%4.is_constant. fuel%verismo!tspec.isconst.impl&%4.is_constant_to. fuel%verismo!tspec.isconst.impl&%5.is_constant. fuel%verismo!tspec.isconst.impl&%5.is_constant_to. fuel%verismo!tspec.isconst.impl&%6.is_constant. fuel%verismo!tspec.isconst.impl&%6.is_constant_to. fuel%verismo!tspec.isconst.impl&%7.is_constant. fuel%verismo!tspec.isconst.impl&%7.is_constant_to. fuel%verismo!tspec.isconst.impl&%8.is_constant. fuel%verismo!tspec.isconst.impl&%8.is_constant_to. fuel%verismo!tspec.isconst.impl&%9.is_constant. fuel%verismo!tspec.isconst.impl&%9.is_constant_to. fuel%verismo!tspec.isconst.impl&%10.is_constant. fuel%verismo!tspec.isconst.impl&%10.is_constant_to. fuel%verismo!tspec.isconst.impl&%11.is_constant. fuel%verismo!tspec.isconst.impl&%11.is_constant_to. fuel%verismo!tspec.setlib.uop_to_bop. fuel%verismo!tspec.setlib.set_op. fuel%verismo!tspec.size_s.impl&%8.spec_size_def. fuel%verismo!tspec.size_s.impl&%9.spec_size_def. fuel%verismo!tspec.size_s.impl&%10.spec_size_def. fuel%verismo!tspec.size_s.impl&%11.spec_size_def. fuel%verismo!tspec.size_s.impl&%12.spec_size_def. fuel%verismo!tspec.size_s.impl&%13.spec_size_def. fuel%verismo!tspec.size_s.impl&%14.spec_size_def. fuel%verismo!tspec.size_s.impl&%15.spec_size_def. fuel%verismo!tspec.size_s.impl&%16.spec_size_def. fuel%verismo!tspec.size_s.impl&%17.spec_size_def. fuel%verismo!tspec.size_s.impl&%18.spec_size_def. fuel%verismo!tspec.size_s.impl&%19.spec_size_def. fuel%verismo!tspec.wellformed.impl&%0.wf. fuel%verismo!tspec.wellformed.impl&%1.wf. fuel%verismo!tspec.wellformed.impl&%2.wf. fuel%verismo!tspec.wellformed.impl&%3.wf. fuel%verismo!tspec.wellformed.impl&%4.wf. fuel%verismo!tspec.wellformed.impl&%5.wf. fuel%verismo!tspec.wellformed.impl&%6.wf. fuel%verismo!tspec.wellformed.impl&%7.wf. fuel%verismo!tspec.wellformed.impl&%8.wf. fuel%verismo!tspec.wellformed.impl&%9.wf. fuel%verismo!tspec.wellformed.impl&%10.wf. fuel%verismo!tspec.wellformed.impl&%11.wf. fuel%verismo!tspec.wellformed.impl&%12.wf. fuel%verismo!arch.reg.MSR_GHCB_BASE. fuel%verismo!arch.reg.MSR_EFER_BASE. fuel%verismo!primitives_e.sectype.impl&%0.wf. fuel%verismo!primitives_e.sectype.impl&%1.wf. fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes. fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes. fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to. fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%0.wf. fuel%verismo!primitives_e.seq.impl&%1.is_constant. fuel%verismo!primitives_e.seq.impl&%1.is_constant_to. fuel%verismo!primitives_e.seq.recursive_sec_bytes. fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to. fuel%verismo!pgtable_e.def.impl&%0.spec_present. fuel%verismo!pgtable_e.def.impl&%0.spec_write. fuel%verismo!pgtable_e.def.impl&%0.spec_supervisor. fuel%verismo!pgtable_e.def.impl&%0.spec_pwt. fuel%verismo!pgtable_e.def.impl&%0.spec_pcd. fuel%verismo!pgtable_e.def.impl&%0.spec_accessed. fuel%verismo!pgtable_e.def.impl&%0.spec_dirty. fuel%verismo!pgtable_e.def.impl&%0.spec_psize. fuel%verismo!pgtable_e.def.impl&%0.spec_global. fuel%verismo!pgtable_e.def.impl&%0.spec_bit12. fuel%verismo!pgtable_e.def.impl&%0.spec_encrypted. fuel%verismo!pgtable_e.def.impl&%0.spec_page. fuel%verismo!pgtable_e.def.impl&%0.spec_nx. fuel%verismo!pgtable_e.def.impl&%1.spec_set_present. fuel%verismo!pgtable_e.def.impl&%1.spec_set_write. fuel%verismo!pgtable_e.def.impl&%1.spec_set_supervisor. fuel%verismo!pgtable_e.def.impl&%1.spec_set_pwt. fuel%verismo!pgtable_e.def.impl&%1.spec_set_pcd. fuel%verismo!pgtable_e.def.impl&%1.spec_set_accessed. fuel%verismo!pgtable_e.def.impl&%1.spec_set_dirty. fuel%verismo!pgtable_e.def.impl&%1.spec_set_psize. fuel%verismo!pgtable_e.def.impl&%1.spec_set_global. fuel%verismo!pgtable_e.def.impl&%1.spec_set_bit12. fuel%verismo!pgtable_e.def.impl&%1.spec_set_encrypted. fuel%verismo!pgtable_e.def.impl&%1.spec_set_page. fuel%verismo!pgtable_e.def.impl&%1.spec_set_nx. fuel%verismo!pgtable_e.def.impl&%11.spec_size_def. fuel%verismo!pgtable_e.def.impl&%13.is_constant. fuel%verismo!pgtable_e.def.impl&%13.is_constant_to. fuel%verismo!pgtable_e.def.impl&%14.wf. fuel%verismo!pgtable_e.def.impl&%16.inv. fuel%verismo!pgtable_e.def.impl&%16.spec_new. fuel%verismo!pgtable_e.def.impl&%16.lemma_new_eq. fuel%verismo!pgtable_e.def.impl&%16.spec_present. fuel%verismo!pgtable_e.def.impl&%16.spec_write. fuel%verismo!pgtable_e.def.impl&%16.spec_supervisor. fuel%verismo!pgtable_e.def.impl&%16.spec_pwt. fuel%verismo!pgtable_e.def.impl&%16.spec_pcd. fuel%verismo!pgtable_e.def.impl&%16.spec_accessed. fuel%verismo!pgtable_e.def.impl&%16.spec_dirty. fuel%verismo!pgtable_e.def.impl&%16.spec_psize. fuel%verismo!pgtable_e.def.impl&%16.spec_global. fuel%verismo!pgtable_e.def.impl&%16.spec_bit12. fuel%verismo!pgtable_e.def.impl&%16.spec_encrypted. fuel%verismo!pgtable_e.def.impl&%16.spec_page. fuel%verismo!pgtable_e.def.impl&%16.spec_nx. fuel%verismo!pgtable_e.def.impl&%16.view. fuel%verismo!registers.core_perm_s.impl&%0.spec_cpu. fuel%verismo!registers.core_perm_s.impl&%0.spec_run. fuel%verismo!registers.core_perm_s.impl&%0.spec_vmpl. fuel%verismo!registers.core_perm_s.impl&%0.spec_count. fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs. fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_mem. fuel%verismo!registers.msr_perm_s.impl&%0.shared. fuel%verismo!registers.msr_perm_s.impl&%0.value. fuel%verismo!registers.msr_perm_s.impl&%1.wf. fuel%verismo!registers.msr_perm_s.impl&%2.view.))
(set-info :comment ";; Datatypes")
(declare-sort verismo!registers.core_perm_s.CoreIdPerm. 0)
(declare-sort verismo!registers.msr_perm_s.RegisterPerm. 0)
(declare-sort verismo!snp.ghcb.proto_page.GhcbPage. 0)
(declare-sort verismo!tspec.security.sectype.SecType<u8./tuple%0.>. 0)
(declare-sort verismo!tspec.security.sectype.SecType<u16./tuple%0.>. 0)
(declare-sort verismo!tspec.security.sectype.SecType<u32./tuple%0.>. 0)
(declare-sort verismo!tspec.security.sectype.SecType<u64./tuple%0.>. 0)
(declare-sort vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. 0)
(declare-sort vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<tuple%2<nat./nat.>.>. 0)
(declare-sort vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. 0)
(declare-sort vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<verismo!arch.reg.RegName.>. 0)
(declare-datatypes ((core!option.Option. 0) (verismo!tspec.security.sectype.DataLabel. 0) (verismo!tspec.security.sectype.SpecSecType. 0) (verismo!boot.idt.def.Idtr. 0) (verismo!registers.trackedcore.snpcore.SnpCore. 0) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. 0) (verismo!snp.cpu.gdt.DescriptorAttr0_7. 0) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. 0) (verismo!snp.cpu.gdt.DescriptorAttr8_11. 0) (verismo!snp.cpu.gdt.DescriptorSpec. 0) (verismo!snp.cpu.gdt.Descriptor. 0) (verismo!snp.cpu.gdt.Gdtr. 0) (verismo!snp.ghcb.proto_page.GhcbVmsa. 0) (verismo!arch.reg.RegName. 0) (verismo!pgtable_e.def.SpecPTE. 0) (verismo!pgtable_e.def.PTE. 0) (verismo!registers.core_perm_s.CoreMode. 0) (verismo!registers.msr_perm_s.RegisterPermValue. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((verismo!tspec.security.sectype.DataLabel./Symbol ) (verismo!tspec.security.sectype.DataLabel./Unknown ) (verismo!tspec.security.sectype.DataLabel./TrustedRandom ) (verismo!tspec.security.sectype.DataLabel./Secret )) ((verismo!tspec.security.sectype.SpecSecType./SpecSecType (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?val Poly) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?_unused core!option.Option.) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?valsets Poly) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?labels vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.))) ((verismo!boot.idt.def.Idtr./Idtr (verismo!boot.idt.def.Idtr./Idtr/?limit verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.idt.def.Idtr./Idtr/?base verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?coreid verismo!registers.core_perm_s.CoreIdPerm.) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?vmpl Int) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?cpu Int) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?regs vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.))) ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?accessed Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?write Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?conform Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?exe Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?sys Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?dpl Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?present Int))) ((verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/?value Int))) ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?avl Int) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?long Int) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?size32_or_16 Int) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?granularity Int))) ((verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/?value Int))) ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?limit0_15 Int) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?base0_23 Int) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?attr_0_7 Int) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?limit16_19 Int) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?attr_8_11 Int) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?base24_31 Int))) ((verismo!snp.cpu.gdt.Descriptor./Descriptor (verismo!snp.cpu.gdt.Descriptor./Descriptor/?value Int))) ((verismo!snp.cpu.gdt.Gdtr./Gdtr (verismo!snp.cpu.gdt.Gdtr./Gdtr/?limit verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!snp.cpu.gdt.Gdtr./Gdtr/?base verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?reserved_0 Poly) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?cpl verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?reserved_2 Poly) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?rax verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?reserved2 Poly) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?rcx verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?rdx verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?rbx verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?reserved3 Poly) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?r8 verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?reserved4 Poly) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?sw_exit_code verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?sw_exit_info_1 verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?sw_exit_info_2 verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?sw_scratch verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?reserved5 Poly) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?guest_error_code verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?reserved_6 Poly) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?xcr0 verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!arch.reg.RegName./Rflags ) (verismo!arch.reg.RegName./Rax ) (verismo!arch.reg.RegName./Rsp ) (verismo!arch.reg.RegName./Cs ) (verismo!arch.reg.RegName./Ds ) (verismo!arch.reg.RegName./Ss ) (verismo!arch.reg.RegName./Es ) (verismo!arch.reg.RegName./Gs ) (verismo!arch.reg.RegName./Cpl ) (verismo!arch.reg.RegName./Cr0 ) (verismo!arch.reg.RegName./Cr1 ) (verismo!arch.reg.RegName./Cr2 ) (verismo!arch.reg.RegName./Cr3 ) (verismo!arch.reg.RegName./Cr4 ) (verismo!arch.reg.RegName./XCr0 ) (verismo!arch.reg.RegName./IdtrBaseLimit ) (verismo!arch.reg.RegName./GdtrBaseLimit ) (verismo!arch.reg.RegName./MSR (verismo!arch.reg.RegName./MSR/?0 Int))) ((verismo!pgtable_e.def.SpecPTE./SpecPTE (verismo!pgtable_e.def.SpecPTE./SpecPTE/?present Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?write Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?supervisor Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?pwt Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?pcd Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?accessed Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?dirty Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?psize Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?global Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?bit12 Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?encrypted Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?page Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?nx Int))) ((verismo!pgtable_e.def.PTE./PTE (verismo!pgtable_e.def.PTE./PTE/?value Int))) ((verismo!registers.core_perm_s.CoreMode./CoreMode (verismo!registers.core_perm_s.CoreMode./CoreMode/?cpu Int) (verismo!registers.core_perm_s.CoreMode./CoreMode/?run Bool) (verismo!registers.core_perm_s.CoreMode./CoreMode/?vmpl Int) (verismo!registers.core_perm_s.CoreMode./CoreMode/?count Int) (verismo!registers.core_perm_s.CoreMode./CoreMode/?sent_ghcb_msrs vstd!seq.Seq<tuple%2<nat./nat.>.>.) (verismo!registers.core_perm_s.CoreMode./CoreMode/?sent_mem vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.))) ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?cpu Int) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?id verismo!arch.reg.RegName.) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?shared Bool) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?value Poly))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (verismo!tspec.security.sectype.SpecSecType.) Poly)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (verismo!tspec.security.sectype.SpecSecType.) core!option.Option.)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (verismo!tspec.security.sectype.SpecSecType.) Poly)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (verismo!tspec.security.sectype.SpecSecType.) vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)
(declare-fun verismo!boot.idt.def.Idtr./Idtr/limit (verismo!boot.idt.def.Idtr.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.idt.def.Idtr./Idtr/base (verismo!boot.idt.def.Idtr.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (verismo!registers.trackedcore.snpcore.SnpCore.) verismo!registers.core_perm_s.CoreIdPerm.)
(declare-fun verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (verismo!registers.trackedcore.snpcore.SnpCore.) Int)
(declare-fun verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu (verismo!registers.trackedcore.snpcore.SnpCore.) Int)
(declare-fun verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (verismo!registers.trackedcore.snpcore.SnpCore.) vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (verismo!snp.cpu.gdt.DescriptorAttr0_7.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (verismo!snp.cpu.gdt.DescriptorAttr8_11.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.Descriptor./Descriptor/value (verismo!snp.cpu.gdt.Descriptor.) Int)
(declare-fun verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (verismo!snp.cpu.gdt.Gdtr.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!snp.cpu.gdt.Gdtr./Gdtr/base (verismo!snp.cpu.gdt.Gdtr.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_0 (verismo!snp.ghcb.proto_page.GhcbVmsa.) Poly)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/cpl (verismo!snp.ghcb.proto_page.GhcbVmsa.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_2 (verismo!snp.ghcb.proto_page.GhcbVmsa.) Poly)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rax (verismo!snp.ghcb.proto_page.GhcbVmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved2 (verismo!snp.ghcb.proto_page.GhcbVmsa.) Poly)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rcx (verismo!snp.ghcb.proto_page.GhcbVmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rdx (verismo!snp.ghcb.proto_page.GhcbVmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rbx (verismo!snp.ghcb.proto_page.GhcbVmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved3 (verismo!snp.ghcb.proto_page.GhcbVmsa.) Poly)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/r8 (verismo!snp.ghcb.proto_page.GhcbVmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved4 (verismo!snp.ghcb.proto_page.GhcbVmsa.) Poly)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_code (verismo!snp.ghcb.proto_page.GhcbVmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_1 (verismo!snp.ghcb.proto_page.GhcbVmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_2 (verismo!snp.ghcb.proto_page.GhcbVmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_scratch (verismo!snp.ghcb.proto_page.GhcbVmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved5 (verismo!snp.ghcb.proto_page.GhcbVmsa.) Poly)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/guest_error_code (verismo!snp.ghcb.proto_page.GhcbVmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_6 (verismo!snp.ghcb.proto_page.GhcbVmsa.) Poly)
(declare-fun verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/xcr0 (verismo!snp.ghcb.proto_page.GhcbVmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!arch.reg.RegName./MSR/0 (verismo!arch.reg.RegName.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/present (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/write (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/psize (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/global (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/page (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/nx (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.PTE./PTE/value (verismo!pgtable_e.def.PTE.) Int)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (verismo!registers.core_perm_s.CoreMode.) Int)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/run (verismo!registers.core_perm_s.CoreMode.) Bool)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (verismo!registers.core_perm_s.CoreMode.) Int)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/count (verismo!registers.core_perm_s.CoreMode.) Int)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/sent_ghcb_msrs (verismo!registers.core_perm_s.CoreMode.) vstd!seq.Seq<tuple%2<nat./nat.>.>.)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/sent_mem (verismo!registers.core_perm_s.CoreMode.) vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)
(declare-fun verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/cpu (verismo!registers.msr_perm_s.RegisterPermValue.) Int)
(declare-fun verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/id (verismo!registers.msr_perm_s.RegisterPermValue.) verismo!arch.reg.RegName.)
(declare-fun verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/shared (verismo!registers.msr_perm_s.RegisterPermValue.) Bool)
(declare-fun verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value (verismo!registers.msr_perm_s.RegisterPermValue.) Poly)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%verismo!tspec.security.sectype.SecType. (Dcr Type Dcr Type) Type)
(declare-const TYPE%verismo!tspec.security.sectype.DataLabel. Type)
(declare-fun TYPE%verismo!tspec.security.sectype.SpecSecType. (Dcr Type Dcr Type) Type)
(declare-const TYPE%verismo!boot.idt.def.Idtr. Type)
(declare-const TYPE%verismo!registers.trackedcore.snpcore.SnpCore. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.DescriptorSpec. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.Descriptor. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.Gdtr. Type)
(declare-const TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. Type)
(declare-const TYPE%verismo!snp.ghcb.proto_page.GhcbPage. Type)
(declare-const TYPE%verismo!arch.reg.RegName. Type)
(declare-const TYPE%verismo!pgtable_e.def.SpecPTE. Type)
(declare-const TYPE%verismo!pgtable_e.def.PTE. Type)
(declare-const TYPE%verismo!registers.core_perm_s.CoreMode. Type)
(declare-const TYPE%verismo!registers.core_perm_s.CoreIdPerm. Type)
(declare-fun TYPE%verismo!registers.msr_perm_s.RegisterPermValue. (Dcr Type) Type)
(declare-const TYPE%verismo!registers.msr_perm_s.RegisterPerm. Type)
(declare-fun TYPE%verismo!tspec_e.array.Array. (Dcr Type Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.core_perm_s.CoreIdPerm.) Poly)
(declare-fun %Poly%verismo!registers.core_perm_s.CoreIdPerm. (Poly) verismo!registers.core_perm_s.CoreIdPerm.)
(declare-fun Poly%verismo!registers.msr_perm_s.RegisterPerm. (verismo!registers.msr_perm_s.RegisterPerm.) Poly)
(declare-fun %Poly%verismo!registers.msr_perm_s.RegisterPerm. (Poly) verismo!registers.msr_perm_s.RegisterPerm.)
(declare-fun Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!snp.ghcb.proto_page.GhcbPage.) Poly)
(declare-fun %Poly%verismo!snp.ghcb.proto_page.GhcbPage. (Poly) verismo!snp.ghcb.proto_page.GhcbPage.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (Poly) vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (Poly) vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. (vstd!seq.Seq<tuple%2<nat./nat.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. (Poly) vstd!seq.Seq<tuple%2<nat./nat.>.>.)
(declare-fun Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. (vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. (Poly) vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)
(declare-fun Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (Poly) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.reg.RegName.>. (vstd!set.Set<verismo!arch.reg.RegName.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.reg.RegName.>. (Poly) vstd!set.Set<verismo!arch.reg.RegName.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%verismo!tspec.security.sectype.DataLabel. (verismo!tspec.security.sectype.DataLabel.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.DataLabel. (Poly) verismo!tspec.security.sectype.DataLabel.)
(declare-fun Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SpecSecType.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SpecSecType. (Poly) verismo!tspec.security.sectype.SpecSecType.)
(declare-fun Poly%verismo!boot.idt.def.Idtr. (verismo!boot.idt.def.Idtr.) Poly)
(declare-fun %Poly%verismo!boot.idt.def.Idtr. (Poly) verismo!boot.idt.def.Idtr.)
(declare-fun Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.SnpCore.) Poly)
(declare-fun %Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly) verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-fun Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.DescriptorAttr0_7.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7.)
(declare-fun Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.DescriptorAttr8_11.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11.)
(declare-fun Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.DescriptorSpec.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.DescriptorSpec. (Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.Descriptor.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.Descriptor. (Poly) verismo!snp.cpu.gdt.Descriptor.)
(declare-fun Poly%verismo!snp.cpu.gdt.Gdtr. (verismo!snp.cpu.gdt.Gdtr.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.Gdtr. (Poly) verismo!snp.cpu.gdt.Gdtr.)
(declare-fun Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.GhcbVmsa.) Poly)
(declare-fun %Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (Poly) verismo!snp.ghcb.proto_page.GhcbVmsa.)
(declare-fun Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName.) Poly)
(declare-fun %Poly%verismo!arch.reg.RegName. (Poly) verismo!arch.reg.RegName.)
(declare-fun Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.SpecPTE.) Poly)
(declare-fun %Poly%verismo!pgtable_e.def.SpecPTE. (Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.PTE.) Poly)
(declare-fun %Poly%verismo!pgtable_e.def.PTE. (Poly) verismo!pgtable_e.def.PTE.)
(declare-fun Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.CoreMode.) Poly)
(declare-fun %Poly%verismo!registers.core_perm_s.CoreMode. (Poly) verismo!registers.core_perm_s.CoreMode.)
(declare-fun Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.RegisterPermValue.) Poly)
(declare-fun %Poly%verismo!registers.msr_perm_s.RegisterPermValue. (Poly) verismo!registers.msr_perm_s.RegisterPermValue.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)))) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1)))))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreIdPerm.)) (! (= x (%Poly%verismo!registers.core_perm_s.CoreIdPerm. (Poly%verismo!registers.core_perm_s.CoreIdPerm. x))) :pattern ((Poly%verismo!registers.core_perm_s.CoreIdPerm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.core_perm_s.CoreIdPerm.) (= x (Poly%verismo!registers.core_perm_s.CoreIdPerm. (%Poly%verismo!registers.core_perm_s.CoreIdPerm. x)))) :pattern ((has_type x TYPE%verismo!registers.core_perm_s.CoreIdPerm.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreIdPerm.)) (! (has_type (Poly%verismo!registers.core_perm_s.CoreIdPerm. x) TYPE%verismo!registers.core_perm_s.CoreIdPerm.) :pattern ((has_type (Poly%verismo!registers.core_perm_s.CoreIdPerm. x) TYPE%verismo!registers.core_perm_s.CoreIdPerm.)))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPerm.)) (! (= x (%Poly%verismo!registers.msr_perm_s.RegisterPerm. (Poly%verismo!registers.msr_perm_s.RegisterPerm. x))) :pattern ((Poly%verismo!registers.msr_perm_s.RegisterPerm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (= x (Poly%verismo!registers.msr_perm_s.RegisterPerm. (%Poly%verismo!registers.msr_perm_s.RegisterPerm. x)))) :pattern ((has_type x TYPE%verismo!registers.msr_perm_s.RegisterPerm.)))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPerm.)) (! (has_type (Poly%verismo!registers.msr_perm_s.RegisterPerm. x) TYPE%verismo!registers.msr_perm_s.RegisterPerm.) :pattern ((has_type (Poly%verismo!registers.msr_perm_s.RegisterPerm. x) TYPE%verismo!registers.msr_perm_s.RegisterPerm.)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbPage.)) (! (= x (%Poly%verismo!snp.ghcb.proto_page.GhcbPage. (Poly%verismo!snp.ghcb.proto_page.GhcbPage. x))) :pattern ((Poly%verismo!snp.ghcb.proto_page.GhcbPage. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbPage.) (= x (Poly%verismo!snp.ghcb.proto_page.GhcbPage. (%Poly%verismo!snp.ghcb.proto_page.GhcbPage. x)))) :pattern ((has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbPage.)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbPage.)) (! (has_type (Poly%verismo!snp.ghcb.proto_page.GhcbPage. x) TYPE%verismo!snp.ghcb.proto_page.GhcbPage.) :pattern ((has_type (Poly%verismo!snp.ghcb.proto_page.GhcbPage. x) TYPE%verismo!snp.ghcb.proto_page.GhcbPage.)))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))))))
(assert (forall ((x vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (= x (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x))) :pattern ((Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.)) (= x (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))))))
(assert (forall ((x vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (has_type (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.)) :pattern ((has_type (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))))))
(assert (forall ((x vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.)) (= x (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (%Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.))))))
(assert (forall ((x vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.)) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<tuple%2<nat./nat.>.>.)) (! (= x (%Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. x))) :pattern ((Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT))) (= x (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. (%Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT)))))))
(assert (forall ((x vstd!seq.Seq<tuple%2<nat./nat.>.>.)) (! (has_type (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT))) :pattern ((has_type (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT)))))))
(assert (forall ((x vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)) (! (= x (%Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. x))) :pattern ((Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))) (= x (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. (%Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))
(assert (forall ((x vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)) (! (has_type (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))) :pattern ((has_type (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))
(assert (forall ((x vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)) (! (= x (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x))) :pattern ((Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (= x (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (forall ((x vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)) (! (has_type (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((has_type (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<verismo!arch.reg.RegName.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.reg.RegName.>. (Poly%vstd!set.Set<verismo!arch.reg.RegName.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.reg.RegName.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.)) (= x (Poly%vstd!set.Set<verismo!arch.reg.RegName.>. (%Poly%vstd!set.Set<verismo!arch.reg.RegName.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.reg.RegName.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.reg.RegName.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.reg.RegName.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.))))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x verismo!tspec.security.sectype.DataLabel.)) (! (= x (%Poly%verismo!tspec.security.sectype.DataLabel. (Poly%verismo!tspec.security.sectype.DataLabel. x))) :pattern ((Poly%verismo!tspec.security.sectype.DataLabel. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!tspec.security.sectype.DataLabel.) (= x (Poly%verismo!tspec.security.sectype.DataLabel. (%Poly%verismo!tspec.security.sectype.DataLabel. x)))) :pattern ((has_type x TYPE%verismo!tspec.security.sectype.DataLabel.)))))
(assert (forall ((x verismo!tspec.security.sectype.DataLabel.)) (! (has_type (Poly%verismo!tspec.security.sectype.DataLabel. x) TYPE%verismo!tspec.security.sectype.DataLabel.) :pattern ((has_type (Poly%verismo!tspec.security.sectype.DataLabel. x) TYPE%verismo!tspec.security.sectype.DataLabel.)))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= x (%Poly%verismo!tspec.security.sectype.SpecSecType. (Poly%verismo!tspec.security.sectype.SpecSecType. x))) :pattern ((Poly%verismo!tspec.security.sectype.SpecSecType. x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (= x (Poly%verismo!tspec.security.sectype.SpecSecType. (%Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (_val! Poly) (__unused! core!option.Option.) (_valsets! Poly) (_labels! vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (=> (and (has_type _val! T&) (has_type (Poly%core!option.Option. __unused!) (TYPE%core!option.Option. M&. M&)) (has_type _valsets! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SpecSecType./SpecSecType _val! __unused! _valsets! _labels!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SpecSecType./SpecSecType _val! __unused! _valsets! _labels!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?val x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) T&)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?_unused x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. x))) (TYPE%core!option.Option. M&. M&))) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?valsets x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?labels x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels x)))))
(define-fun is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ ((c verismo!tspec.security.sectype.SpecSecType.)) Bool ((_ is verismo!tspec.security.sectype.SpecSecType./SpecSecType) c))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (=> (is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ x) (height_lt (height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x)) (height (Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (=> (is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ x) (height_lt (height (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x))) (height (Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((height (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x)))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (=> (is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ x) (height_lt (height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x)) (height (Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x))))))
(assert (forall ((x verismo!boot.idt.def.Idtr.)) (! (= x (%Poly%verismo!boot.idt.def.Idtr. (Poly%verismo!boot.idt.def.Idtr. x))) :pattern ((Poly%verismo!boot.idt.def.Idtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.idt.def.Idtr.) (= x (Poly%verismo!boot.idt.def.Idtr. (%Poly%verismo!boot.idt.def.Idtr. x)))) :pattern ((has_type x TYPE%verismo!boot.idt.def.Idtr.)))))
(assert (forall ((x verismo!boot.idt.def.Idtr.)) (! (= (verismo!boot.idt.def.Idtr./Idtr/limit x) (verismo!boot.idt.def.Idtr./Idtr/?limit x)) :pattern ((verismo!boot.idt.def.Idtr./Idtr/limit x)))))
(assert (forall ((x verismo!boot.idt.def.Idtr.)) (! (= (verismo!boot.idt.def.Idtr./Idtr/base x) (verismo!boot.idt.def.Idtr./Idtr/?base x)) :pattern ((verismo!boot.idt.def.Idtr./Idtr/base x)))))
(assert (forall ((x verismo!boot.idt.def.Idtr.)) (! (has_type (Poly%verismo!boot.idt.def.Idtr. x) TYPE%verismo!boot.idt.def.Idtr.) :pattern ((has_type (Poly%verismo!boot.idt.def.Idtr. x) TYPE%verismo!boot.idt.def.Idtr.)))))
(assert (forall ((x verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= x (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. x))) :pattern ((Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (= x (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)))) :pattern ((has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)))))
(assert (forall ((_coreid! verismo!registers.core_perm_s.CoreIdPerm.) (_vmpl! Int) (_cpu! Int) (_regs! vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)) (! (=> (and (<= 0 _vmpl!) (<= 0 _cpu!)) (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore _coreid! _vmpl! _cpu! _regs!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)) :pattern ((has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore _coreid! _vmpl! _cpu! _regs!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)))))
(assert (forall ((x verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid x) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?coreid x)) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid x)))))
(assert (forall ((x verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl x) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?vmpl x)) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)))) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)) (has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)))))
(assert (forall ((x verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu x) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?cpu x)) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)))) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)) (has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)))))
(assert (forall ((x verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs x) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?regs x)) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs x)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= x (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x))) :pattern ((Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (= x (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((_accessed! Int) (_write! Int) (_conform! Int) (_exe! Int) (_sys! Int) (_dpl! Int) (_present! Int)) (! (=> (and (uInv 64 _accessed!) (uInv 64 _write!) (uInv 64 _conform!) (uInv 64 _exe!) (uInv 64 _sys!) (uInv 64 _dpl!) (uInv 64 _present!)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec _accessed! _write! _conform! _exe! _sys! _dpl! _present!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec _accessed! _write! _conform! _exe! _sys! _dpl! _present!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?accessed x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?write x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?conform x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?exe x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?sys x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?dpl x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?present x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7.)) (! (= x (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. x))) :pattern ((Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (= x (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7 _value!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7 _value!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value x) (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/?value x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= x (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x))) :pattern ((Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (= x (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((_avl! Int) (_long! Int) (_size32_or_16! Int) (_granularity! Int)) (! (=> (and (uInv 64 _avl!) (uInv 64 _long!) (uInv 64 _size32_or_16!) (uInv 64 _granularity!)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec _avl! _long! _size32_or_16! _granularity!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec _avl! _long! _size32_or_16! _granularity!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl x) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?avl x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long x) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?long x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 x) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?size32_or_16 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity x) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?granularity x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11.)) (! (= x (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. x))) :pattern ((Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (= x (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11 _value!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11 _value!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value x) (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/?value x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= x (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. (Poly%verismo!snp.cpu.gdt.DescriptorSpec. x))) :pattern ((Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (= x (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((_limit0_15! Int) (_base0_23! Int) (_attr_0_7! Int) (_limit16_19! Int) (_attr_8_11! Int) (_base24_31! Int)) (! (=> (and (uInv 64 _limit0_15!) (uInv 64 _base0_23!) (uInv 64 _attr_0_7!) (uInv 64 _limit16_19!) (uInv 64 _attr_8_11!) (uInv 64 _base24_31!)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec _limit0_15! _base0_23! _attr_0_7! _limit16_19! _attr_8_11! _base24_31!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec _limit0_15! _base0_23! _attr_0_7! _limit16_19! _attr_8_11! _base24_31!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?limit0_15 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?base0_23 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?attr_0_7 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?limit16_19 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?attr_8_11 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?base24_31 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.Descriptor.)) (! (= x (%Poly%verismo!snp.cpu.gdt.Descriptor. (Poly%verismo!snp.cpu.gdt.Descriptor. x))) :pattern ((Poly%verismo!snp.cpu.gdt.Descriptor. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.Descriptor.) (= x (Poly%verismo!snp.cpu.gdt.Descriptor. (%Poly%verismo!snp.cpu.gdt.Descriptor. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.Descriptor.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.Descriptor./Descriptor _value!)) TYPE%verismo!snp.cpu.gdt.Descriptor.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.Descriptor./Descriptor _value!)) TYPE%verismo!snp.cpu.gdt.Descriptor.)))))
(assert (forall ((x verismo!snp.cpu.gdt.Descriptor.)) (! (= (verismo!snp.cpu.gdt.Descriptor./Descriptor/value x) (verismo!snp.cpu.gdt.Descriptor./Descriptor/?value x)) :pattern ((verismo!snp.cpu.gdt.Descriptor./Descriptor/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. x)))) :pattern ((verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. x)) (has_type x TYPE%verismo!snp.cpu.gdt.Descriptor.)))))
(assert (forall ((x verismo!snp.cpu.gdt.Gdtr.)) (! (= x (%Poly%verismo!snp.cpu.gdt.Gdtr. (Poly%verismo!snp.cpu.gdt.Gdtr. x))) :pattern ((Poly%verismo!snp.cpu.gdt.Gdtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.Gdtr.) (= x (Poly%verismo!snp.cpu.gdt.Gdtr. (%Poly%verismo!snp.cpu.gdt.Gdtr. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.Gdtr.)))))
(assert (forall ((x verismo!snp.cpu.gdt.Gdtr.)) (! (= (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit x) (verismo!snp.cpu.gdt.Gdtr./Gdtr/?limit x)) :pattern ((verismo!snp.cpu.gdt.Gdtr./Gdtr/limit x)))))
(assert (forall ((x verismo!snp.cpu.gdt.Gdtr.)) (! (= (verismo!snp.cpu.gdt.Gdtr./Gdtr/base x) (verismo!snp.cpu.gdt.Gdtr./Gdtr/?base x)) :pattern ((verismo!snp.cpu.gdt.Gdtr./Gdtr/base x)))))
(assert (forall ((x verismo!snp.cpu.gdt.Gdtr.)) (! (has_type (Poly%verismo!snp.cpu.gdt.Gdtr. x) TYPE%verismo!snp.cpu.gdt.Gdtr.) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.Gdtr. x) TYPE%verismo!snp.cpu.gdt.Gdtr.)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= x (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x))) :pattern ((Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (= x (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)))) :pattern ((has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.)))))
(assert (forall ((_reserved_0! Poly) (_cpl! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (_reserved_2! Poly) (_rax! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved2! Poly) (_rcx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_rdx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_rbx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved3! Poly) (_r8! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved4! Poly) (_sw_exit_code! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_sw_exit_info_1! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_sw_exit_info_2! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_sw_scratch! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved5! Poly) (_guest_error_code! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved_6! Poly) (_xcr0! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)) (! (=> (and (has_type _reserved_0! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 203))) (has_type _reserved_2! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 300))) (has_type _reserved2! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 264))) (has_type _reserved3! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type _reserved4! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 72))) (has_type _reserved5! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16))) (has_type _reserved_6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)))) (has_type (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa _reserved_0! _cpl! _reserved_2! _rax! _reserved2! _rcx! _rdx! _rbx! _reserved3! _r8! _reserved4! _sw_exit_code! _sw_exit_info_1! _sw_exit_info_2! _sw_scratch! _reserved5! _guest_error_code! _reserved_6! _xcr0!)) TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.)) :pattern ((has_type (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa _reserved_0! _cpl! _reserved_2! _rax! _reserved2! _rcx! _rdx! _rbx! _reserved3! _r8! _reserved4! _sw_exit_code! _sw_exit_info_1! _sw_exit_info_2! _sw_scratch! _reserved5! _guest_error_code! _reserved_6! _xcr0!)) TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_0 x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?reserved_0 x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (has_type (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_0 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 203)))) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_0 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)) (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/cpl x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?cpl x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/cpl x)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_2 x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?reserved_2 x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (has_type (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 300)))) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)) (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rax x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?rax x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rax x)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved2 x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?reserved2 x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (has_type (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 264)))) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)) (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rcx x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?rcx x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rcx x)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rdx x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?rdx x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rdx x)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rbx x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?rbx x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rbx x)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved3 x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?reserved3 x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved3 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (has_type (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved3 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)))) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved3 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)) (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/r8 x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?r8 x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/r8 x)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved4 x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?reserved4 x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved4 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (has_type (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved4 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 72)))) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved4 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)) (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_code x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?sw_exit_code x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_code x)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_1 x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?sw_exit_info_1 x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_1 x)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_2 x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?sw_exit_info_2 x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_2 x)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_scratch x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?sw_scratch x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_scratch x)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved5 x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?reserved5 x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved5 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (has_type (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved5 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)))) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved5 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)) (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/guest_error_code x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?guest_error_code x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/guest_error_code x)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_6 x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?reserved_6 x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_6 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (has_type (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_6 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)))) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_6 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. x)) (has_type x TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.)))))
(assert (forall ((x verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/xcr0 x) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/?xcr0 x)) :pattern ((verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/xcr0 x)))))
(assert (forall ((x verismo!arch.reg.RegName.)) (! (= x (%Poly%verismo!arch.reg.RegName. (Poly%verismo!arch.reg.RegName. x))) :pattern ((Poly%verismo!arch.reg.RegName. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.reg.RegName.) (= x (Poly%verismo!arch.reg.RegName. (%Poly%verismo!arch.reg.RegName. x)))) :pattern ((has_type x TYPE%verismo!arch.reg.RegName.)))))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rsp) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cs) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Ds) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Ss) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Es) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Gs) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cpl) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr0) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr1) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr2) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr3) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr4) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./XCr0) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./IdtrBaseLimit) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./GdtrBaseLimit) TYPE%verismo!arch.reg.RegName.))
(assert (forall ((_0! Int)) (! (=> (uInv 32 _0!) (has_type (Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName./MSR _0!)) TYPE%verismo!arch.reg.RegName.)) :pattern ((has_type (Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName./MSR _0!)) TYPE%verismo!arch.reg.RegName.)))))
(assert (forall ((x verismo!arch.reg.RegName.)) (! (= (verismo!arch.reg.RegName./MSR/0 x) (verismo!arch.reg.RegName./MSR/?0 x)) :pattern ((verismo!arch.reg.RegName./MSR/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.reg.RegName.) (uInv 32 (verismo!arch.reg.RegName./MSR/0 (%Poly%verismo!arch.reg.RegName. x)))) :pattern ((verismo!arch.reg.RegName./MSR/0 (%Poly%verismo!arch.reg.RegName. x)) (has_type x TYPE%verismo!arch.reg.RegName.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= x (%Poly%verismo!pgtable_e.def.SpecPTE. (Poly%verismo!pgtable_e.def.SpecPTE. x))) :pattern ((Poly%verismo!pgtable_e.def.SpecPTE. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (= x (Poly%verismo!pgtable_e.def.SpecPTE. (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((_present! Int) (_write! Int) (_supervisor! Int) (_pwt! Int) (_pcd! Int) (_accessed! Int) (_dirty! Int) (_psize! Int) (_global! Int) (_bit12! Int) (_encrypted! Int) (_page! Int) (_nx! Int)) (! (=> (and (uInv 64 _present!) (uInv 64 _write!) (uInv 64 _supervisor!) (uInv 64 _pwt!) (uInv 64 _pcd!) (uInv 64 _accessed!) (uInv 64 _dirty!) (uInv 64 _psize!) (uInv 64 _global!) (uInv 64 _bit12!) (uInv 64 _encrypted!) (uInv 64 _page!) (uInv 64 _nx!)) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.SpecPTE./SpecPTE _present! _write! _supervisor! _pwt! _pcd! _accessed! _dirty! _psize! _global! _bit12! _encrypted! _page! _nx!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.SpecPTE./SpecPTE _present! _write! _supervisor! _pwt! _pcd! _accessed! _dirty! _psize! _global! _bit12! _encrypted! _page! _nx!)) TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/present x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?present x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/present x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/present (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/present (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/write x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?write x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/write x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/write (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/write (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?supervisor x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?pwt x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?pcd x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?accessed x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?dirty x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/psize x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?psize x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/psize x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/psize (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/psize (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/global x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?global x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/global x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/global (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/global (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?bit12 x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?encrypted x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/page x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?page x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/page x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/page (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/page (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/nx x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?nx x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/nx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/nx (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/nx (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.PTE.)) (! (= x (%Poly%verismo!pgtable_e.def.PTE. (Poly%verismo!pgtable_e.def.PTE. x))) :pattern ((Poly%verismo!pgtable_e.def.PTE. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.PTE.) (= x (Poly%verismo!pgtable_e.def.PTE. (%Poly%verismo!pgtable_e.def.PTE. x)))) :pattern ((has_type x TYPE%verismo!pgtable_e.def.PTE.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.PTE./PTE _value!)) TYPE%verismo!pgtable_e.def.PTE.)) :pattern ((has_type (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.PTE./PTE _value!)) TYPE%verismo!pgtable_e.def.PTE.)))))
(assert (forall ((x verismo!pgtable_e.def.PTE.)) (! (= (verismo!pgtable_e.def.PTE./PTE/value x) (verismo!pgtable_e.def.PTE./PTE/?value x)) :pattern ((verismo!pgtable_e.def.PTE./PTE/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. x)))) :pattern ((verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. x)) (has_type x TYPE%verismo!pgtable_e.def.PTE.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= x (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. x))) :pattern ((Poly%verismo!registers.core_perm_s.CoreMode. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.) (= x (Poly%verismo!registers.core_perm_s.CoreMode. (%Poly%verismo!registers.core_perm_s.CoreMode. x)))) :pattern ((has_type x TYPE%verismo!registers.core_perm_s.CoreMode.)))))
(assert (forall ((_cpu! Int) (_run! Bool) (_vmpl! Int) (_count! Int) (_sent_ghcb_msrs! vstd!seq.Seq<tuple%2<nat./nat.>.>.) (_sent_mem! vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)) (! (=> (and (<= 0 _cpu!) (<= 0 _vmpl!) (<= 0 _count!)) (has_type (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.CoreMode./CoreMode _cpu! _run! _vmpl! _count! _sent_ghcb_msrs! _sent_mem!)) TYPE%verismo!registers.core_perm_s.CoreMode.)) :pattern ((has_type (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.CoreMode./CoreMode _cpu! _run! _vmpl! _count! _sent_ghcb_msrs! _sent_mem!)) TYPE%verismo!registers.core_perm_s.CoreMode.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?cpu x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/cpu x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. x)))) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. x)) (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/run x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?run x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/run x)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?vmpl x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. x)))) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. x)) (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/count x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?count x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/count x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.CoreMode./CoreMode/count (%Poly%verismo!registers.core_perm_s.CoreMode. x)))) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/count (%Poly%verismo!registers.core_perm_s.CoreMode. x)) (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_ghcb_msrs x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?sent_ghcb_msrs x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/sent_ghcb_msrs x)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_mem x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?sent_mem x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/sent_mem x)))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (= x (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. (Poly%verismo!registers.msr_perm_s.RegisterPermValue. x))) :pattern ((Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&)) (= x (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)))) :pattern ((has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_cpu! Int) (_id! verismo!arch.reg.RegName.) (_shared! Bool) (_value! Poly)) (! (=> (and (<= 0 _cpu!) (has_type (Poly%verismo!arch.reg.RegName. _id!) TYPE%verismo!arch.reg.RegName.) (has_type _value! T&)) (has_type (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue _cpu! _id! _shared! _value!)) (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))) :pattern ((has_type (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue _cpu! _id! _shared! _value!)) (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (= (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/cpu x) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?cpu x)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/cpu x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&)) (<= 0 (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/cpu (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)))) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/cpu (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)) (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (= (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/id x) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?id x)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/id x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&)) (has_type (Poly%verismo!arch.reg.RegName. (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/id (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x))) TYPE%verismo!arch.reg.RegName.)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/id (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)) (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (= (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/shared x) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?shared x)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/shared x)))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (= (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value x) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?value x)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&)) (has_type (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)) T&)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)) (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))))))
(define-fun is-verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue_ ((c verismo!registers.msr_perm_s.RegisterPermValue.)) Bool ((_ is verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue) c))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (=> (is-verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue_ x) (height_lt (height (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value x)) (height (Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)))) :pattern ((height (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value x))))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.cast.VTypeCast. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.isconst.IsConstant. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.security.sectype.SecMemType. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.size_s.SpecSize. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.wellformed.WellFormed. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!primitives_e.sectype.ToSecSeq. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!primitives_e.sectype.FromSecSeq. (Dcr Type Dcr Type) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::last")
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::full")
(declare-fun vstd!set.impl&%0.full.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set_lib::impl&%0::is_empty")
(declare-fun vstd!set_lib.impl&%0.is_empty.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::math::pow_s::spec_nat_pow2")
(declare-fun verismo!tspec.math.pow_s.spec_nat_pow2.? (Poly) Int)
(declare-fun verismo!tspec.math.pow_s.rec%spec_nat_pow2.? (Poly Fuel) Int)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::DataLabel::is_Symbol")
(declare-fun verismo!tspec.security.sectype.impl&%0.is_Symbol.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::DataLabel::is_TrustedRandom")
(declare-fun verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::DataLabel::is_Secret")
(declare-fun verismo!tspec.security.sectype.impl&%0.is_Secret.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_new")
(declare-fun verismo!tspec.security.sectype.impl&%2.spec_new.? (Dcr Type Dcr Type Poly Poly Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_val")
(declare-fun verismo!tspec.security.sectype.impl&%3.spec_val.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec__unused")
(declare-fun verismo!tspec.security.sectype.impl&%3.spec__unused.? (Dcr Type Dcr Type Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_valsets")
(declare-fun verismo!tspec.security.sectype.impl&%3.spec_valsets.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_labels")
(declare-fun verismo!tspec.security.sectype.impl&%3.spec_labels.? (Dcr Type Dcr Type Poly) vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SecMemType::view")
(declare-fun verismo!tspec.security.sectype.SecMemType.view.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.SecMemType.view%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SecType::spec_new")
(declare-fun verismo!tspec.security.sectype.impl&%9.spec_new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SecType::wf_value")
(declare-fun verismo!tspec.security.sectype.impl&%9.wf_value.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::wf_vmpl")
(declare-fun verismo!tspec.security.sectype.impl&%16.wf_vmpl.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::wf_value")
(declare-fun verismo!tspec.security.sectype.impl&%16.wf_value.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::bop_new")
(declare-fun verismo!tspec.security.sectype.impl&%16.bop_new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::uop_new")
(declare-fun verismo!tspec.security.sectype.impl&%16.uop_new.? (Dcr Type Dcr Type Dcr Type Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::constant")
(declare-fun verismo!tspec.security.sectype.impl&%16.constant.? (Dcr Type Dcr Type Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SecType::wf")
(declare-fun verismo!tspec.security.sectype.impl&%20.wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::seq::fn_spec_to_seq_index")
(declare-fun verismo!tspec.security.seq.fn_spec_to_seq_index.? (Dcr Type Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::bool_to_stream")
(declare-fun verismo!tspec.stream.basic.bool_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::char_to_stream")
(declare-fun verismo!tspec.stream.basic.char_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::u8_to_stream")
(declare-fun verismo!tspec.stream.basic.u8_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::u16_to_stream")
(declare-fun verismo!tspec.stream.basic.u16_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::u32_to_stream")
(declare-fun verismo!tspec.stream.basic.u32_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::u64_to_stream")
(declare-fun verismo!tspec.stream.basic.u64_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::u128_to_stream")
(declare-fun verismo!tspec.stream.basic.u128_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::usize_to_stream")
(declare-fun verismo!tspec.stream.basic.usize_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::spec_coreid")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? (Poly) verismo!registers.core_perm_s.CoreIdPerm.)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::spec_vmpl")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::spec_cpu")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::spec_regs")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? (Poly) vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::spec_set_coreid")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.? (Poly Poly) verismo!registers.trackedcore.snpcore.SnpCore.)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::spec_set_vmpl")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%1.spec_set_vmpl.? (Poly Poly) verismo!registers.trackedcore.snpcore.SnpCore.)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::spec_set_cpu")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%1.spec_set_cpu.? (Poly Poly) verismo!registers.trackedcore.snpcore.SnpCore.)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::spec_set_regs")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? (Poly Poly) verismo!registers.trackedcore.snpcore.SnpCore.)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::spec_new")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly Poly Poly Poly) verismo!registers.trackedcore.snpcore.SnpCore.)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::cpu")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.cpu.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::update_reg_coremode")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.update_reg_coremode.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::inv_reg_cpu")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::ghcb_value")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.ghcb_value.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::inv")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::last_ghcb_req")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_req.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::last_ghcb_resp")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_resp.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::last_ghcbmem_req")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.last_ghcbmem_req.? (Poly) verismo!snp.ghcb.proto_page.GhcbPage.)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::last_ghcbmem_resp")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.last_ghcbmem_resp.? (Poly) verismo!snp.ghcb.proto_page.GhcbPage.)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::ghcbmsr_msgs")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.ghcbmsr_msgs.? (Poly) vstd!seq.Seq<tuple%2<nat./nat.>.>.)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::ghcbmem_msgs")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.ghcbmem_msgs.? (Poly) vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::reg_updated")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::only_reg_updated")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.only_reg_updated.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::registers::trackedcore::snpcore::SnpCore::only_reg_coremode_updated")
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.only_reg_coremode_updated.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_accessed")
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_accessed.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_write")
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_write.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_conform")
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_conform.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_exe")
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_exe.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_sys")
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_sys.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_dpl")
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_dpl.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_present")
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_present.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_set_accessed")
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_set_write")
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_write.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_set_conform")
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_set_exe")
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_set_sys")
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_set_dpl")
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_set_present")
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_present.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_new")
(declare-fun verismo!snp.cpu.gdt.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::new")
(declare-fun verismo!snp.cpu.gdt.impl&%3.new.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::to_value")
(declare-fun verismo!snp.cpu.gdt.impl&%3.to_value.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7::inv")
(declare-fun verismo!snp.cpu.gdt.impl&%16.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_new")
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_new.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_accessed")
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_accessed.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_write")
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_write.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_conform")
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_conform.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_exe")
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_exe.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_sys")
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_sys.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_dpl")
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_dpl.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_present")
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_present.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr0_7::view")
(declare-fun verismo!snp.cpu.gdt.impl&%16.view.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_avl")
(declare-fun verismo!snp.cpu.gdt.impl&%17.spec_avl.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_long")
(declare-fun verismo!snp.cpu.gdt.impl&%17.spec_long.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_size32_or_16")
(declare-fun verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_granularity")
(declare-fun verismo!snp.cpu.gdt.impl&%17.spec_granularity.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_set_avl")
(declare-fun verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_set_long")
(declare-fun verismo!snp.cpu.gdt.impl&%18.spec_set_long.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_set_size32_or_16")
(declare-fun verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_set_granularity")
(declare-fun verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_new")
(declare-fun verismo!snp.cpu.gdt.impl&%19.spec_new.? (Poly Poly Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::new")
(declare-fun verismo!snp.cpu.gdt.impl&%20.new.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::to_value")
(declare-fun verismo!snp.cpu.gdt.impl&%20.to_value.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11::inv")
(declare-fun verismo!snp.cpu.gdt.impl&%33.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11::spec_new")
(declare-fun verismo!snp.cpu.gdt.impl&%33.spec_new.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11::spec_avl")
(declare-fun verismo!snp.cpu.gdt.impl&%33.spec_avl.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11::spec_long")
(declare-fun verismo!snp.cpu.gdt.impl&%33.spec_long.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11::spec_size32_or_16")
(declare-fun verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11::spec_granularity")
(declare-fun verismo!snp.cpu.gdt.impl&%33.spec_granularity.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorAttr8_11::view")
(declare-fun verismo!snp.cpu.gdt.impl&%33.view.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorSpec::spec_limit0_15")
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorSpec::spec_base0_23")
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorSpec::spec_attr_0_7")
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorSpec::spec_limit16_19")
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorSpec::spec_attr_8_11")
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorSpec::spec_base24_31")
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorSpec::spec_set_limit0_15")
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorSpec::spec_set_base0_23")
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorSpec::spec_set_attr_0_7")
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorSpec::spec_set_limit16_19")
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorSpec::spec_set_attr_8_11")
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorSpec::spec_set_base24_31")
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorSpec::spec_new")
(declare-fun verismo!snp.cpu.gdt.impl&%36.spec_new.? (Poly Poly Poly Poly Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorSpec::new")
(declare-fun verismo!snp.cpu.gdt.impl&%37.new.? (Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::DescriptorSpec::to_value")
(declare-fun verismo!snp.cpu.gdt.impl&%37.to_value.? (Poly) verismo!snp.cpu.gdt.Descriptor.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::Descriptor::inv")
(declare-fun verismo!snp.cpu.gdt.impl&%50.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::Descriptor::spec_new")
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_new.? (Poly) verismo!snp.cpu.gdt.Descriptor.)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::Descriptor::spec_limit0_15")
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::Descriptor::spec_base0_23")
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::Descriptor::spec_attr_0_7")
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::Descriptor::spec_limit16_19")
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::Descriptor::spec_attr_8_11")
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::Descriptor::spec_base24_31")
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::cpu::gdt::Descriptor::view")
(declare-fun verismo!snp.cpu.gdt.impl&%50.view.? (Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_reserved_0")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_0.? (Poly) Poly)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_cpl")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_cpl.? (Poly) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_reserved_2")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_2.? (Poly) Poly)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rax")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_rax.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_reserved2")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_reserved2.? (Poly) Poly)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rcx")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_rcx.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rdx")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_rdx.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rbx")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_rbx.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_reserved3")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_reserved3.? (Poly) Poly)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_r8")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_r8.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_reserved4")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_reserved4.? (Poly) Poly)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_exit_code")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_code.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_exit_info_1")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_1.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_exit_info_2")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_2.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_scratch")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_sw_scratch.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_reserved5")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_reserved5.? (Poly) Poly)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_guest_error_code")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_guest_error_code.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_reserved_6")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_6.? (Poly) Poly)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_xcr0")
(declare-fun verismo!snp.ghcb.proto_page.impl&%0.spec_xcr0.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_new")
(declare-fun verismo!snp.ghcb.proto_page.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly) verismo!snp.ghcb.proto_page.GhcbVmsa.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_cpl_offset")
(declare-fun verismo!snp.ghcb.proto_page.impl&%9.spec_cpl_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rax_offset")
(declare-fun verismo!snp.ghcb.proto_page.impl&%9.spec_rax_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rcx_offset")
(declare-fun verismo!snp.ghcb.proto_page.impl&%9.spec_rcx_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rdx_offset")
(declare-fun verismo!snp.ghcb.proto_page.impl&%9.spec_rdx_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rbx_offset")
(declare-fun verismo!snp.ghcb.proto_page.impl&%9.spec_rbx_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_r8_offset")
(declare-fun verismo!snp.ghcb.proto_page.impl&%9.spec_r8_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_exit_code_offset")
(declare-fun verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_code_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_exit_info_1_offset")
(declare-fun verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_1_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_exit_info_2_offset")
(declare-fun verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_2_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_scratch_offset")
(declare-fun verismo!snp.ghcb.proto_page.impl&%9.spec_sw_scratch_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_guest_error_code_offset")
(declare-fun verismo!snp.ghcb.proto_page.impl&%9.spec_guest_error_code_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbVmsa::spec_xcr0_offset")
(declare-fun verismo!snp.ghcb.proto_page.impl&%9.spec_xcr0_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbPage::spec_new")
(declare-fun verismo!snp.ghcb.proto_page.impl&%62.spec_new.? (Poly Poly Poly Poly Poly Poly Poly) verismo!snp.ghcb.proto_page.GhcbPage.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbPage::spec_vmsa")
(declare-fun verismo!snp.ghcb.proto_page.impl&%63.spec_vmsa.? (Poly) verismo!snp.ghcb.proto_page.GhcbVmsa.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbPage::spec_valid_bitmap")
(declare-fun verismo!snp.ghcb.proto_page.impl&%63.spec_valid_bitmap.? (Poly) Poly)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbPage::spec_reserved6")
(declare-fun verismo!snp.ghcb.proto_page.impl&%63.spec_reserved6.? (Poly) Poly)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbPage::spec_shared_buffer")
(declare-fun verismo!snp.ghcb.proto_page.impl&%63.spec_shared_buffer.? (Poly) Poly)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbPage::spec_reserved7")
(declare-fun verismo!snp.ghcb.proto_page.impl&%63.spec_reserved7.? (Poly) Poly)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbPage::spec_version")
(declare-fun verismo!snp.ghcb.proto_page.impl&%63.spec_version.? (Poly) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbPage::spec_usage")
(declare-fun verismo!snp.ghcb.proto_page.impl&%63.spec_usage.? (Poly) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbPage::spec_vmsa_offset")
(declare-fun verismo!snp.ghcb.proto_page.impl&%68.spec_vmsa_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbPage::spec_shared_buffer_offset")
(declare-fun verismo!snp.ghcb.proto_page.impl&%68.spec_shared_buffer_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::snp::ghcb::proto_page::GhcbPage::spec_usage_offset")
(declare-fun verismo!snp.ghcb.proto_page.impl&%68.spec_usage_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::tspec_e::array::Array::_spec_index")
(declare-fun verismo!tspec_e.array.array_t.impl&%2._spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec_e::array::Array::view")
(declare-fun verismo!tspec_e.array.array_t.impl&%2.view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec_e::array::Array::spec_len")
(declare-fun verismo!tspec_e.array.array_t.impl&%4.spec_len.? (Dcr Type Dcr Type) Int)
(set-info :comment ";; Function-Decl verismo::tspec::cast::VTypeCast::vspec_cast_to")
(declare-fun verismo!tspec.cast.VTypeCast.vspec_cast_to.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.cast.VTypeCast.vspec_cast_to%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::cast::field_at")
(declare-fun verismo!tspec.cast.field_at.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::cast::field_set")
(declare-fun verismo!tspec.cast.field_set.? (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::cast::fn_vspec_cast_to")
(declare-fun verismo!tspec.cast.fn_vspec_cast_to.? (Dcr Type Dcr Type) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::isconst::IsConstant::is_constant")
(declare-fun verismo!tspec.isconst.IsConstant.is_constant.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.isconst.IsConstant.is_constant%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::isconst::IsConstant::is_constant_to")
(declare-fun verismo!tspec.isconst.IsConstant.is_constant_to.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.isconst.IsConstant.is_constant_to%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::setlib::uop_to_bop")
(declare-fun verismo!tspec.setlib.uop_to_bop.? (Dcr Type Dcr Type Dcr Type Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::setlib::set_op")
(declare-fun verismo!tspec.setlib.set_op.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::size_s::spec_max_count")
(declare-fun verismo!tspec.size_s.spec_max_count.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl verismo::tspec::size_s::SpecSize::spec_size_def")
(declare-fun verismo!tspec.size_s.SpecSize.spec_size_def.? (Dcr Type) Poly)
(declare-fun verismo!tspec.size_s.SpecSize.spec_size_def%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::size_s::spec_size")
(declare-fun verismo!tspec.size_s.spec_size.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl verismo::tspec::wellformed::WellFormed::wf")
(declare-fun verismo!tspec.wellformed.WellFormed.wf.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.wellformed.WellFormed.wf%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::arch::reg::MSR_GHCB_BASE")
(declare-fun verismo!arch.reg.MSR_GHCB_BASE.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::reg::MSR_EFER_BASE")
(declare-fun verismo!arch.reg.MSR_EFER_BASE.? () Int)
(set-info :comment ";; Function-Decl verismo::primitives_e::sectype::ToSecSeq::sec_bytes")
(declare-fun verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? (Dcr Type Poly) Poly)
(declare-fun verismo!primitives_e.sectype.ToSecSeq.sec_bytes%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::primitives_e::sectype::FromSecSeq::from_sec_bytes")
(declare-fun verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::primitives_e::seq::recursive_sec_bytes")
(declare-fun verismo!primitives_e.seq.recursive_sec_bytes.? (Dcr Type Poly) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun verismo!primitives_e.seq.rec%recursive_sec_bytes.? (Dcr Type Poly Fuel) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_present")
(declare-fun verismo!pgtable_e.def.impl&%0.spec_present.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_write")
(declare-fun verismo!pgtable_e.def.impl&%0.spec_write.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_supervisor")
(declare-fun verismo!pgtable_e.def.impl&%0.spec_supervisor.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_pwt")
(declare-fun verismo!pgtable_e.def.impl&%0.spec_pwt.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_pcd")
(declare-fun verismo!pgtable_e.def.impl&%0.spec_pcd.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_accessed")
(declare-fun verismo!pgtable_e.def.impl&%0.spec_accessed.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_dirty")
(declare-fun verismo!pgtable_e.def.impl&%0.spec_dirty.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_psize")
(declare-fun verismo!pgtable_e.def.impl&%0.spec_psize.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_global")
(declare-fun verismo!pgtable_e.def.impl&%0.spec_global.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_bit12")
(declare-fun verismo!pgtable_e.def.impl&%0.spec_bit12.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_encrypted")
(declare-fun verismo!pgtable_e.def.impl&%0.spec_encrypted.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_page")
(declare-fun verismo!pgtable_e.def.impl&%0.spec_page.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_nx")
(declare-fun verismo!pgtable_e.def.impl&%0.spec_nx.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_set_present")
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_present.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_set_write")
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_write.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_set_supervisor")
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_set_pwt")
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_pwt.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_set_pcd")
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_pcd.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_set_accessed")
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_accessed.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_set_dirty")
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_dirty.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_set_psize")
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_psize.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_set_global")
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_global.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_set_bit12")
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_bit12.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_set_encrypted")
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_set_page")
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_page.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_set_nx")
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_nx.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::spec_new")
(declare-fun verismo!pgtable_e.def.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::new")
(declare-fun verismo!pgtable_e.def.impl&%3.new.? (Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::SpecPTE::to_value")
(declare-fun verismo!pgtable_e.def.impl&%3.to_value.? (Poly) verismo!pgtable_e.def.PTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::inv")
(declare-fun verismo!pgtable_e.def.impl&%16.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::spec_new")
(declare-fun verismo!pgtable_e.def.impl&%16.spec_new.? (Poly) verismo!pgtable_e.def.PTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::spec_present")
(declare-fun verismo!pgtable_e.def.impl&%16.spec_present.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::spec_write")
(declare-fun verismo!pgtable_e.def.impl&%16.spec_write.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::spec_supervisor")
(declare-fun verismo!pgtable_e.def.impl&%16.spec_supervisor.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::spec_pwt")
(declare-fun verismo!pgtable_e.def.impl&%16.spec_pwt.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::spec_pcd")
(declare-fun verismo!pgtable_e.def.impl&%16.spec_pcd.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::spec_accessed")
(declare-fun verismo!pgtable_e.def.impl&%16.spec_accessed.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::spec_dirty")
(declare-fun verismo!pgtable_e.def.impl&%16.spec_dirty.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::spec_psize")
(declare-fun verismo!pgtable_e.def.impl&%16.spec_psize.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::spec_global")
(declare-fun verismo!pgtable_e.def.impl&%16.spec_global.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::spec_bit12")
(declare-fun verismo!pgtable_e.def.impl&%16.spec_bit12.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::spec_encrypted")
(declare-fun verismo!pgtable_e.def.impl&%16.spec_encrypted.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::spec_page")
(declare-fun verismo!pgtable_e.def.impl&%16.spec_page.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::spec_nx")
(declare-fun verismo!pgtable_e.def.impl&%16.spec_nx.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::PTE::view")
(declare-fun verismo!pgtable_e.def.impl&%16.view.? (Poly) verismo!pgtable_e.def.SpecPTE.)
(set-info :comment ";; Function-Decl verismo::pgtable_e::def::static_cr3_value")
(declare-fun verismo!pgtable_e.def.static_cr3_value.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::registers::core_perm_s::CoreMode::spec_cpu")
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_cpu.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::registers::core_perm_s::CoreMode::spec_run")
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_run.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::registers::core_perm_s::CoreMode::spec_vmpl")
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_vmpl.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::registers::core_perm_s::CoreMode::spec_count")
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_count.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::registers::core_perm_s::CoreMode::spec_sent_ghcb_msrs")
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.? (Poly) vstd!seq.Seq<tuple%2<nat./nat.>.>.)
(set-info :comment ";; Function-Decl verismo::registers::core_perm_s::CoreMode::spec_sent_mem")
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_sent_mem.? (Poly) vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)
(set-info :comment ";; Function-Decl verismo::registers::core_perm_s::CoreMode::spec_new")
(declare-fun verismo!registers.core_perm_s.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly) verismo!registers.core_perm_s.CoreMode.)
(set-info :comment ";; Function-Decl verismo::registers::core_perm_s::CoreIdPerm::view")
(declare-fun verismo!registers.core_perm_s.impl&%4.view.? (Poly) verismo!registers.core_perm_s.CoreMode.)
(set-info :comment ";; Function-Decl verismo::registers::msr_perm_s::RegisterPermValue::shared")
(declare-fun verismo!registers.msr_perm_s.impl&%0.shared.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::registers::msr_perm_s::RegisterPermValue::value")
(declare-fun verismo!registers.msr_perm_s.impl&%0.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::registers::msr_perm_s::RegisterPermValue::wf")
(declare-fun verismo!registers.msr_perm_s.impl&%1.wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::registers::msr_perm_s::RegisterPerm::view")
(declare-fun verismo!registers.msr_perm_s.impl&%2.view.? (Dcr Type Poly) verismo!registers.msr_perm_s.RegisterPermValue.)
(set-info :comment ";; Function-Decl verismo::registers::msr_perm_s::RegisterPerm::cpu")
(declare-fun verismo!registers.msr_perm_s.impl&%2.cpu.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::registers::msr_perm_s::RegisterPerm::id")
(declare-fun verismo!registers.msr_perm_s.impl&%2.id.? (Poly) verismo!arch.reg.RegName.)
(set-info :comment ";; Function-Decl verismo::registers::msr_perm_s::RegisterPerm::shared")
(declare-fun verismo!registers.msr_perm_s.impl&%2.shared.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::registers::msr_perm_s::RegisterPerm::val")
(declare-fun verismo!registers.msr_perm_s.impl&%2.val.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::registers::msr_perm_s::RegisterPerm::wf")
(declare-fun verismo!registers.msr_perm_s.impl&%2.wf.? (Poly) Bool)
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::IsConstant::is_constant")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.isconst.IsConstant.is_constant.? Self%&. Self%& self!) BOOL)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::IsConstant::is_constant_to")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (vmpl! Poly)) (! (=> (and (has_type self! Self%&) (has_type vmpl! NAT)) (has_type (verismo!tspec.isconst.IsConstant.is_constant_to.? Self%&. Self%& self! vmpl!) BOOL)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? Self%&. Self%& self! vmpl!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::WellFormed::wf")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.wellformed.WellFormed.wf.? Self%&. Self%& self!) BOOL)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms verismo::registers::msr_perm_s::RegisterPerm::id")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (has_type (Poly%verismo!arch.reg.RegName. (verismo!registers.msr_perm_s.impl&%2.id.? self!)) TYPE%verismo!arch.reg.RegName.)) :pattern ((verismo!registers.msr_perm_s.impl&%2.id.? self!)))))
(set-info :comment ";; Function-Axioms verismo::registers::msr_perm_s::RegisterPerm::val")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (has_type (verismo!registers.msr_perm_s.impl&%2.val.? T&. T& self!) T&)) :pattern ((verismo!registers.msr_perm_s.impl&%2.val.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::registers::msr_perm_s::RegisterPerm::cpu")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (<= 0 (verismo!registers.msr_perm_s.impl&%2.cpu.? self!))) :pattern ((verismo!registers.msr_perm_s.impl&%2.cpu.? self!)))))
(set-info :comment ";; Function-Axioms verismo::registers::msr_perm_s::RegisterPerm::view")
(assert (fuel_bool_default fuel%verismo!registers.msr_perm_s.impl&%2.view.))
(assert (=> (fuel_bool fuel%verismo!registers.msr_perm_s.impl&%2.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue (%I (I (verismo!registers.msr_perm_s.impl&%2.cpu.? self!))) (%Poly%verismo!arch.reg.RegName. (Poly%verismo!arch.reg.RegName. (verismo!registers.msr_perm_s.impl&%2.id.? self!))) (%B (B (verismo!registers.msr_perm_s.impl&%2.shared.? self!))) (verismo!registers.msr_perm_s.impl&%2.val.? T&. T& self!))) :pattern ((verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (has_type (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!)) (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))) :pattern ((verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::registers::msr_perm_s::RegisterPermValue::shared")
(assert (fuel_bool_default fuel%verismo!registers.msr_perm_s.impl&%0.shared.))
(assert (=> (fuel_bool fuel%verismo!registers.msr_perm_s.impl&%0.shared.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!registers.msr_perm_s.impl&%0.shared.? T&. T& self!) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/shared (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. self!))) :pattern ((verismo!registers.msr_perm_s.impl&%0.shared.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::registers::msr_perm_s::RegisterPermValue::value")
(assert (fuel_bool_default fuel%verismo!registers.msr_perm_s.impl&%0.value.))
(assert (=> (fuel_bool fuel%verismo!registers.msr_perm_s.impl&%0.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. self!))) :pattern ((verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&)) (has_type (verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!) T&)) :pattern ((verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%2 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%6 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%8 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%9 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%10 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%12 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%13 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%14 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%15 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%16 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%17 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%18 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%19 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%20 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%21 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%22 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%23 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%24 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%25 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%26 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::last")
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%27 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::last")
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%28 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%29 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%30 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%31 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%32 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%33 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%34 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%35 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%36 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%37 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)))) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%38 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%39 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%40 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%41 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%42 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%43 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%44 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Axioms vstd::set_lib::impl&%0::is_empty")
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.is_empty.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set_lib.impl&%0.is_empty.? A&. A& self!) (= (vstd!set.impl&%0.len.? A&. A& self!) 0)) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& self!))))))
(set-info :comment ";; Function-Specs vstd::set_lib::axiom_is_empty")
(declare-fun req%vstd!set_lib.axiom_is_empty. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set_lib.axiom_is_empty. A&. A& s!) (and (=> %%global_location_label%%45 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%46 (not (vstd!set_lib.impl&%0.is_empty.? A&. A& s!))))) :pattern ((req%vstd!set_lib.axiom_is_empty. A&. A& s!)))))
(declare-fun ens%vstd!set_lib.axiom_is_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set_lib.axiom_is_empty. A&. A& s!) (exists ((a$ Poly)) (! (and (has_type a$ A&) (vstd!set.impl&%0.contains.? A&. A& s! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a$))))) :pattern ((ens%vstd!set_lib.axiom_is_empty. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set_lib::axiom_is_empty")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (vstd!set_lib.impl&%0.is_empty.? A&. A& s!))) (exists ((a$ Poly)) (! (and (has_type a$ A&) (vstd!set.impl&%0.contains.? A&. A& s! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a$)))))) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& s!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::full")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.full.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.full.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.full.? A&. A&) (vstd!set.impl&%0.complement.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((vstd!set.impl&%0.full.? A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.full.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.full.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::wf")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!) (B (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$))))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::is_constant")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%1.is_constant.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%1.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. T&. T&) self!) (B (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$))))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::is_constant_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%1.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%1.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. T&. T&) self! vmpl!) (B (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$) vmpl!)))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. T&. T&) self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%vstd!seq.Seq. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%vstd!seq.Seq. T&. T&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::DataLabel::is_Symbol")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./Symbol_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./Symbol) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_Symbol.? self!) (is-verismo!tspec.security.sectype.DataLabel./Symbol_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_Symbol.? self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::DataLabel::is_TrustedRandom")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./TrustedRandom) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.? self!) (is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.? self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::DataLabel::is_Secret")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_Secret.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./Secret_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./Secret) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_Secret.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_Secret.? self!) (is-verismo!tspec.security.sectype.DataLabel./Secret_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_Secret.? self!))))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::wf_vmpl")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (valsets! Poly) (labels! Poly) (vmpl! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& valsets! labels! vmpl!) (and (and (and (and (and (=> (is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. labels! vmpl!))) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!) (vstd!set.impl&%0.full.? T&. T&))) (=> (is-verismo!tspec.security.sectype.DataLabel./Secret_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. labels! vmpl!))) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!) (vstd!set.impl&%0.full.? T&. T&)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. labels!) vmpl!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets!) vmpl!)) (> (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!)) 0)) (vstd!set.impl&%0.finite.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!)))) :pattern ((verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& valsets! labels! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::wf_value")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.wf_value.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.wf_value.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& self!) (and (and (and (and (and (and (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 1)) (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 2))) (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 3))) (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 4))) (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) core!option.Option./None)) (ext_eq true (TYPE%vstd!set.Set. $ NAT) (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.empty.? $ NAT) (I 1)) (I 2)) (I 3)) (I 4)))) (ext_eq true (TYPE%vstd!set.Set. $ NAT) (vstd!map.impl&%0.dom.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.empty.? $ NAT) (I 1)) (I 2)) (I 3)) (I 4))))) :pattern ((verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! vmpl!) (B (and (and (and (= (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) vmpl!)) 1) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) vmpl!) (vstd!set.impl&%0.insert.? T&. T& (vstd!set.impl&%0.empty.? T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))))) (is-verismo!tspec.security.sectype.DataLabel./Symbol_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) vmpl!)))) (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%12.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%12.is_constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self!) (B (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 4)))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::wf")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.) self!) (B (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& $ TYPE%tuple%0. self!))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.)) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::VTypeCast::vspec_cast_to")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.cast.VTypeCast.vspec_cast_to.? Self%&. Self%& T&. T& self!) T&)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%44::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%44.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%44.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecMemType::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.security.sectype.SecMemType.view.? Self%&. Self%& T&. T& M&. M& self!) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? Self%&. Self%& T&. T& M&. M& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_new")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (_unused! Poly) (valsets! Poly) (labels! Poly)) (! (=> (and (has_type val! T&) (has_type _unused! (TYPE%core!option.Option. M&. M&)) (has_type valsets! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&))) (has_type labels! (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec__unused")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec__unused.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec__unused.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (Poly%core!option.Option. (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!)) (TYPE%core!option.Option. M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_valsets")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!) (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_labels")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec_labels.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec_labels.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::registers::core_perm_s::CoreIdPerm::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.core_perm_s.CoreIdPerm.) (has_type (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? self!)) TYPE%verismo!registers.core_perm_s.CoreMode.)) :pattern ((verismo!registers.core_perm_s.impl&%4.view.? self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::reg::MSR_GHCB_BASE")
(assert (fuel_bool_default fuel%verismo!arch.reg.MSR_GHCB_BASE.))
(assert (=> (fuel_bool fuel%verismo!arch.reg.MSR_GHCB_BASE.) (= verismo!arch.reg.MSR_GHCB_BASE.? 3221291312)))
(assert (uInv 32 verismo!arch.reg.MSR_GHCB_BASE.?))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%15.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%15.is_constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!))) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Gdtr::is_constant")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%60.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%60.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (%Poly%verismo!snp.cpu.gdt.Gdtr. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/base (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self!))))))
(set-info :comment ";; Function-Axioms verismo::boot::idt::def::Idtr::is_constant")
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%25.is_constant.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%25.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.idt.def.Idtr. self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/limit (%Poly%verismo!boot.idt.def.Idtr. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/base (%Poly%verismo!boot.idt.def.Idtr. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.idt.def.Idtr. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::reg::MSR_EFER_BASE")
(assert (fuel_bool_default fuel%verismo!arch.reg.MSR_EFER_BASE.))
(assert (=> (fuel_bool fuel%verismo!arch.reg.MSR_EFER_BASE.) (= verismo!arch.reg.MSR_EFER_BASE.? 3221225600)))
(assert (uInv 32 verismo!arch.reg.MSR_EFER_BASE.?))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::inv_reg_cpu")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.? self!) (let ((regs$ (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))) (let ((coreid$ (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))) (let ((cr3_pte$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr3)))))))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid$))))) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) (verismo!registers.core_perm_s.CoreMode./CoreMode/run (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid$)))))) (= (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid$))))) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%verismo!arch.reg.RegName.) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.reg.RegName. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$)) id$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.reg.RegName. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$)) id$))))) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%verismo!arch.reg.RegName.) (= (verismo!registers.msr_perm_s.impl&%2.cpu.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$)) (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid$))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))))) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%verismo!arch.reg.RegName.) (= (verismo!registers.msr_perm_s.impl&%2.id.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$)) (%Poly%verismo!arch.reg.RegName. id$))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))))) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%verismo!arch.reg.RegName.) (verismo!registers.msr_perm_s.impl&%2.wf.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))))) (= (verismo!registers.msr_perm_s.impl&%2.shared.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName./MSR (%I (I verismo!arch.reg.MSR_GHCB_BASE.?)))))) true)) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%verismo!arch.reg.RegName.) (=> (not (= (%Poly%verismo!arch.reg.RegName. id$) (verismo!arch.reg.RegName./MSR (%I (I verismo!arch.reg.MSR_GHCB_BASE.?))))) (not (verismo!registers.msr_perm_s.impl&%2.shared.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. (verismo!registers.msr_perm_s.impl&%2.val.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./GdtrBaseLimit)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.idt.def.Idtr. (verismo!registers.msr_perm_s.impl&%2.val.? $ TYPE%verismo!boot.idt.def.Idtr. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./IdtrBaseLimit)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./XCr0)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr0)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr1)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr2)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr3)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr4)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cs)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName./MSR (%I (I verismo!arch.reg.MSR_EFER_BASE.?))))))))) (= cr3_pte$ (verismo!pgtable_e.def.static_cr3_value.? (I 0)))))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.? self!))))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::inv")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.inv.? self!) (and (verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.? self!) (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)) 0))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.inv.? self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%72.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%72.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!) (I (nClip (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%63::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%63.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%63.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%9::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%9.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%9.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT SZ) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::u8_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u8_to_stream.))
(declare-fun %%lambda%%0 (Int Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (%%hole%%2 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) i$) (I (ite (= (%I i$) %%hole%%0) %%hole%%1 %%hole%%2))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) i$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u8_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u8_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I 1) (Poly%fun%1. (mk_fun (%%lambda%%0 0 (%I data!) 0)))))) :pattern ((verismo!tspec.stream.basic.u8_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::u16_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u16_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u16_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u16_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I data!))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I data!) 256))))))))) :pattern ((verismo!tspec.stream.basic.u16_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%3::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%3.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I self!))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I self!) 256)))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::spec_size")
(assert (forall ((T&. Dcr) (T& Type)) (! (<= 0 (verismo!tspec.size_s.spec_size.? T&. T&)) :pattern ((verismo!tspec.size_s.spec_size.? T&. T&)))))
(set-info :comment ";; Function-Axioms verismo::tspec::setlib::set_op")
(assert (fuel_bool_default fuel%verismo!tspec.setlib.set_op.))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Poly Type Type Dcr Type Poly Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Type) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Poly) (%%hole%%11 Dcr) (%%hole%%12 Type) (%%hole%%13 Poly) (%%hole%%14 %%Function%%) (val$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14) val$) (B (exists ((v1$ Poly) (v2$ Poly)) (! (and (and (has_type v1$ %%hole%%6) (has_type v2$ %%hole%%7)) (and (and (vstd!set.impl&%0.contains.? %%hole%%8 %%hole%%9 %%hole%%10 v1$) (vstd!set.impl&%0.contains.? %%hole%%11 %%hole%%12 %%hole%%13 v2$)) (= val$ (%%apply%%1 %%hole%%14 v1$ v2$)))) :pattern ((vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 v1$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 v2$)))))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14) val$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.setlib.set_op.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (s1! Poly) (s2! Poly) (op_fn! Poly)) (! (= (verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!) (vstd!set.impl&%0.new.? T3&. T3& $ (TYPE%fun%1. T3&. T3& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%1 T1&. T1& s1! T2&. T2& s2! T1& T2& T1&. T1& s1! T2&. T2& s2! (%Poly%fun%2. op_fn!)))))) :pattern ((verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (s1! Poly) (s2! Poly) (op_fn! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. T1&. T1&)) (has_type s2! (TYPE%vstd!set.Set. T2&. T2&)) (has_type op_fn! (TYPE%fun%2. T1&. T1& T2&. T2& T3&. T3&))) (has_type (verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!) (TYPE%vstd!set.Set. T3&. T3&))) :pattern ((verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::bop_new")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.bop_new.))
(declare-fun %%lambda%%2 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (vmpl$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1) vmpl$) (B (and (<= %%hole%%0 (%I vmpl$)) (<= (%I vmpl$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1) vmpl$)))))
(declare-fun %%lambda%%3 (Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Type Type Dcr Type Dcr Type %%Function%% Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Poly) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Poly) (%%hole%%15 Dcr) (%%hole%%16 Type) (%%hole%%17 Dcr) (%%hole%%18 Type) (%%hole%%19 Poly) (%%hole%%20 Dcr) (%%hole%%21 Type) (%%hole%%22 Dcr) (%%hole%%23 Type) (%%hole%%24 Type) (%%hole%%25 Type) (%%hole%%26 Dcr) (%%hole%%27 Type) (%%hole%%28 Dcr) (%%hole%%29 Type) (%%hole%%30 %%Function%%) (%%hole%%31 Dcr) (%%hole%%32 Type) (%%hole%%33 Dcr) (%%hole%%34 Type) (vmpl$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28 %%hole%%29 %%hole%%30 %%hole%%31 %%hole%%32 %%hole%%33 %%hole%%34) vmpl$) (vstd!set.impl&%0.new.? %%hole%%31 %%hole%%32 %%hole%%33 %%hole%%34 (Poly%fun%1. (mk_fun (%%lambda%%1 %%hole%%20 %%hole%%21 (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 vmpl$) %%hole%%22 %%hole%%23 (vstd!map.impl&%0.index.? %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 vmpl$) %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 (vstd!map.impl&%0.index.? %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 vmpl$) %%hole%%28 %%hole%%29 (vstd!map.impl&%0.index.? %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 vmpl$) %%hole%%30))))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28 %%hole%%29 %%hole%%30 %%hole%%31 %%hole%%32 %%hole%%33 %%hole%%34) vmpl$)))))
(declare-fun %%lambda%%4 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (vmpl$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0) vmpl$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0) vmpl$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.bop_new.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (Rhs&. Dcr) (Rhs& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly) (op! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType (%%apply%%1 (%Poly%fun%2. op!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!))) (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)))) (vstd!map.impl&%0.new.? $ NAT $ (TYPE%vstd!set.Set. T2&. T2&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ (TYPE%vstd!set.Set. T2&. T2&)) (Poly%fun%1. (mk_fun (%%lambda%%2 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%3 $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) $ NAT $ (TYPE%vstd!set.Set. Rhs&. Rhs&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)) $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) $ NAT $ (TYPE%vstd!set.Set. Rhs&. Rhs&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)) T&. T& Rhs&. Rhs& T& Rhs& T&. T& Rhs&. Rhs& (%Poly%fun%2. op!) T2&. T2& $ (TYPE%fun%1. T2&. T2& $ BOOL))))) (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.) (Poly%fun%1. (mk_fun (%%lambda%%2 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%4 (Poly%verismo!tspec.security.sectype.DataLabel. verismo!tspec.security.sectype.DataLabel./Symbol)))))))) :pattern ((verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (Rhs&. Dcr) (Rhs& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly) (op! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type rhs! (TYPE%verismo!tspec.security.sectype.SpecSecType. Rhs&. Rhs& M&. M&)) (has_type op! (TYPE%fun%2. T&. T& Rhs&. Rhs& T2&. T2&))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::constant")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType val! (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (vstd!map.impl&%0.new.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ (TYPE%vstd!set.Set. T&. T&)) (Poly%fun%1. (mk_fun (%%lambda%%2 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%4 (vstd!set.impl&%0.insert.? T&. T& (vstd!set.impl&%0.empty.? T&. T&) val!))))) (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.) (Poly%fun%1. (mk_fun (%%lambda%%2 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%4 (Poly%verismo!tspec.security.sectype.DataLabel. verismo!tspec.security.sectype.DataLabel./Symbol)))))))) :pattern ((verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! T&) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::setlib::uop_to_bop")
(assert (fuel_bool_default fuel%verismo!tspec.setlib.uop_to_bop.))
(declare-fun %%lambda%%5 (%%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 %%Function%%) (v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 (%%lambda%%5 %%hole%%0) v1$ v2$) (%%apply%%0 %%hole%%0 v1$)) :pattern ((%%apply%%1 (%%lambda%%5 %%hole%%0) v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.setlib.uop_to_bop.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (op! Poly)) (! (= (verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!) (mk_fun (%%lambda%%5 (%Poly%fun%1. op!)))) :pattern ((verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (op! Poly)) (! (=> (has_type op! (TYPE%fun%1. T1&. T1& T3&. T3&)) (has_type (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!)) (TYPE%fun%2. T1&. T1& T2&. T2& T3&. T3&))) :pattern ((verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::uop_new")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.uop_new.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.uop_new.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (T2&. Dcr) (T2& Type) (self! Poly) (op! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!) (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& T&. T& T2&. T2& self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& (vstd!pervasive.arbitrary.? T&. T&))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T&. T& T&. T& T2&. T2& op!)))) :pattern ((verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (T2&. Dcr) (T2& Type) (self! Poly) (op! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type op! (TYPE%fun%1. T&. T& T2&. T2&))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::seq::fn_spec_to_seq_index")
(assert (fuel_bool_default fuel%verismo!tspec.security.seq.fn_spec_to_seq_index.))
(declare-fun %%lambda%%6 (Dcr Type Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) v$) (vstd!seq.Seq.index.? %%hole%%4 %%hole%%5 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 v$) %%hole%%6)) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) v$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.security.seq.fn_spec_to_seq_index.) (forall ((T&. Dcr) (T& Type) (i! Poly)) (! (= (verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!) (mk_fun (%%lambda%%6 T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8) i!))) :pattern ((verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!))))))
(assert (forall ((T&. Dcr) (T& Type) (i! Poly)) (! (=> (has_type i! INT) (has_type (Poly%fun%1. (verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!)) (TYPE%fun%1. T&. T& $ (UINT 8)))) :pattern ((verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to.))
(declare-fun %%lambda%%7 (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Dcr) (%%hole%%15 Type) (%%hole%%16 Poly) (%%hole%%17 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17) i$) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 (Poly%fun%1. (verismo!tspec.security.seq.fn_spec_to_seq_index.? %%hole%%0 %%hole%%1 i$))))))) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17) i$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) (I (verismo!tspec.size_s.spec_size.? T&. T&)) (Poly%fun%1. (mk_fun (%%lambda%%7 T&. T& T&. T& T&. T& $ (UINT 8) T&. T& M&. M& T&. T& $ (UINT 8) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& (vstd!pervasive.arbitrary.? T&. T&)))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::u32_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u32_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u32_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u32_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I data!)))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I data!)))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I data!) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I data!) 65536))))) 256)))))))))))) :pattern ((verismo!tspec.stream.basic.u32_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%5::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%5.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%5.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I self!)))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I self!)))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I self!) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I self!) 65536))))) 256))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::u64_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u64_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u64_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u64_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I data!))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I data!))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I data!)))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I data!)))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296))))) 65536))))) 256))))))))))))))) :pattern ((verismo!tspec.stream.basic.u64_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%7::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%7.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%7.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I self!))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I self!))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I self!)))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I self!)))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296))))) 65536))))) 256)))))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::sectype::ToSecSeq::sec_bytes")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? Self%&. Self%& self!) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::sectype::impl&%2::T::sec_bytes")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? T&. T& self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!)) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? T&. T& self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&)) :pattern ((tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%1::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%1.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%1.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? self!))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::recursive_sec_bytes")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.recursive_sec_bytes.))
(declare-const fuel_nat%verismo!primitives_e.seq.recursive_sec_bytes. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (s! Poly) (fuel% Fuel)) (! (= (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! fuel%) (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! zero)) :pattern ((verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! fuel%)))))
(assert (forall ((T&. Dcr) (T& Type) (s! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (has_type s! (TYPE%vstd!seq.Seq. T&. T&))) (= (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! (succ fuel%)) (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (ite (> (vstd!seq.Seq.len.? T&. T& s!) 0) (let ((prevs$ (vstd!seq.Seq.subrange.? T&. T& s! (I 0) (I (Sub (vstd!seq.Seq.len.? T&. T& s!) 1))))) (ite (< (vstd!seq.Seq.len.? T&. T& prevs$) (vstd!seq.Seq.len.? T&. T& s!)) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& prevs$ fuel%)) (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? T&. T& (vstd!seq.Seq.last.? T&. T& s!))) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! (succ fuel%))))))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.recursive_sec_bytes.) (forall ((T&. Dcr) (T& Type) (s! Poly)) (! (=> (and (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (has_type s! (TYPE%vstd!seq.Seq. T&. T&))) (= (verismo!primitives_e.seq.recursive_sec_bytes.? T&. T& s!) (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! (succ fuel_nat%verismo!primitives_e.seq.recursive_sec_bytes.)))) :pattern ((verismo!primitives_e.seq.recursive_sec_bytes.? T&. T& s!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!primitives_e.seq.recursive_sec_bytes.? T&. T& self!))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec_e::array::Array::spec_len")
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_t.impl&%4.spec_len.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_t.impl&%4.spec_len.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (verismo!tspec_e.array.array_t.impl&%4.spec_len.? T&. T& N&. N&) (const_int N&)) :pattern ((verismo!tspec_e.array.array_t.impl&%4.spec_len.? T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (<= 0 (verismo!tspec_e.array.array_t.impl&%4.spec_len.? T&. T& N&. N&)) :pattern ((verismo!tspec_e.array.array_t.impl&%4.spec_len.? T&. T& N&. N&)))))
(set-info :comment ";; Function-Axioms verismo::tspec_e::array::Array::_spec_index")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)) (has_type i! INT)) (has_type (verismo!tspec_e.array.array_t.impl&%2._spec_index.? T&. T& N&. N& self! i!) T&)) :pattern ((verismo!tspec_e.array.array_t.impl&%2._spec_index.? T&. T& N&. N& self! i!)))))
(set-info :comment ";; Function-Axioms verismo::tspec_e::array::Array::view")
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_t.impl&%2.view.))
(declare-fun %%lambda%%8 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (verismo!tspec_e.array.array_t.impl&%2._spec_index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_t.impl&%2.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (verismo!tspec_e.array.array_t.impl&%4.spec_len.? T&. T& N&. N&)) (Poly%fun%1. (mk_fun (%%lambda%%8 T&. T& N&. N& self!))))) :pattern ((verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)) (has_type (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec_e::array::Array::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%3.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::sectype::FromSecSeq::from_sec_bytes")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? Self%&. Self%& T&. T& self!) T&)) :pattern ((verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::sectype::SecSeqByte::from_sec_bytes")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes.))
(declare-fun %%choose%%1 (Type Dcr Type Bool Type Poly Dcr Type) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Bool) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type)) (! (=> (exists ((v$ Poly)) (! (and (has_type v$ %%hole%%0) (ext_eq %%hole%%3 %%hole%%4 (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%1 %%hole%%2 v$) %%hole%%5)) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%6 %%hole%%7 v$)))) (exists ((v$ Poly)) (! (and (and (has_type v$ %%hole%%0) (ext_eq %%hole%%3 %%hole%%4 (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%1 %%hole%%2 v$) %%hole%%5)) (= (%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7) v$)) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%6 %%hole%%7 v$))))) :pattern ((%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7)))))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!) (as_type (%%choose%%1 T& T&. T& true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self! T&. T&) T&)) :pattern ((verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::sectype::SecSeqByte::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!) (verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_val")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec_val.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec_val.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!) T&)) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!)))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SpecSecType::axiom_spec_new")
(declare-fun ens%verismo!tspec.security.sectype.impl&%2.axiom_spec_new. (Dcr Type Dcr Type Poly core!option.Option. Poly vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (_unused! core!option.Option.) (valsets! Poly) (labels! vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (= (ens%verismo!tspec.security.sectype.impl&%2.axiom_spec_new. T&. T& M&. M& val! _unused! valsets! labels!) (and (= (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) val!) (= (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) _unused!) (= (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) valsets!) (= (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) labels!))) :pattern ((ens%verismo!tspec.security.sectype.impl&%2.axiom_spec_new. T&. T& M&. M& val! _unused! valsets! labels!)))))
(set-info :comment ";; Broadcast verismo::tspec::security::sectype::SpecSecType::axiom_spec_new")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (_unused! Poly) (valsets! Poly) (labels! Poly)) (! (=> (and (has_type val! T&) (has_type _unused! (TYPE%core!option.Option. M&. M&)) (has_type valsets! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&))) (has_type labels! (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))) (and (and (and (= (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) val!) (= (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) (%Poly%core!option.Option. _unused!))) (= (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) valsets!)) (= (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) :pattern ((verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_new")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!)))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::axiom_spec_new")
(declare-fun ens%verismo!tspec.security.sectype.impl&%9.axiom_spec_new. (Dcr Type Dcr Type verismo!tspec.security.sectype.SpecSecType.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! verismo!tspec.security.sectype.SpecSecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%9.axiom_spec_new. T&. T& M&. M& val!) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. val!)))) val!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%9.axiom_spec_new. T&. T& M&. M& val!)))))
(set-info :comment ";; Broadcast verismo::tspec::security::sectype::SecType::axiom_spec_new")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!)) val!)) :pattern ((verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!)))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::axiom_ext_equal")
(declare-fun ens%verismo!tspec.security.sectype.impl&%9.axiom_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (val2! Poly)) (! (= (ens%verismo!tspec.security.sectype.impl&%9.axiom_ext_equal. T&. T& M&. M& val! val2!) (= (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)) (= val! val2!))) :pattern ((ens%verismo!tspec.security.sectype.impl&%9.axiom_ext_equal. T&. T& M&. M& val! val2!)))))
(set-info :comment ";; Broadcast verismo::tspec::security::sectype::SecType::axiom_ext_equal")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (val2! Poly)) (! (=> (and (has_type val! (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (has_type val2! (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) (= (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)) (= val! val2!))) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%46::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%46.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%46.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT SZ)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::fn_vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.fn_vspec_cast_to.))
(declare-fun %%lambda%%9 (Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 v$)) :pattern ((%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.fn_vspec_cast_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (= (verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&) (mk_fun (%%lambda%%9 T1&. T1& T2&. T2&))) :pattern ((verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (has_type (Poly%fun%1. (verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&)) (TYPE%fun%1. T1&. T1& T2&. T2&)) :pattern ((verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? T1&. T1& M&. M& T1&. T1& T2&. T2& self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T1&. T1& M&. M& (vstd!pervasive.arbitrary.? T1&. T1&))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T1&. T1& T1&. T1& T2&. T2& (Poly%fun%1. (verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? T2&. T2& M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) T1&. T1& M&. M& self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%43::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%43.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%43.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 32)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%42::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%42.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%42.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 16)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%41::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%41.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%41.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 8)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%38::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%38.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%38.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT SZ)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%36::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%36.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%36.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%34::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%34.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%34.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 16)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%33::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%33.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%33.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 8)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%30::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%30.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%30.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT SZ)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%28::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%28.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%28.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%27::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%27.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%27.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 32)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%25::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%25.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%25.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 8)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%22::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%22.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%22.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT SZ)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%20::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%20.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%20.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%19::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%19.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%19.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 32)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%18::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%18.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%18.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 16)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%60::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%60.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%60.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%59::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%59.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%59.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 32)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%58::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%58.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%58.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 16)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%57::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%57.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%57.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 8)))
(set-info :comment ";; Function-Axioms verismo::tspec::math::pow_s::spec_nat_pow2")
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_nat_pow2.))
(declare-const fuel_nat%verismo!tspec.math.pow_s.spec_nat_pow2. Fuel)
(assert (forall ((e! Poly) (fuel% Fuel)) (! (= (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! fuel%) (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! zero)) :pattern ((verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! fuel%)))))
(assert (forall ((e! Poly) (fuel% Fuel)) (! (=> (has_type e! NAT) (= (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel%)) (ite (= (%I e!) 0) 1 (Mul 2 (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? (I (nClip (Sub (%I e!) 1))) fuel%))))) :pattern ((verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel%))))))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_nat_pow2.) (forall ((e! Poly)) (! (=> (has_type e! NAT) (= (verismo!tspec.math.pow_s.spec_nat_pow2.? e!) (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel_nat%verismo!tspec.math.pow_s.spec_nat_pow2.)))) :pattern ((verismo!tspec.math.pow_s.spec_nat_pow2.? e!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%47::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%47.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%47.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::wf")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%20.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%20.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%20.wf.? T&. T& self!) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& $ TYPE%tuple%0. self!)) :pattern ((verismo!tspec.security.sectype.impl&%20.wf.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::boot::idt::def::Idtr::wf")
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%24.wf.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%24.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.idt.def.Idtr. self!) (B (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/limit (%Poly%verismo!boot.idt.def.Idtr. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/base (%Poly%verismo!boot.idt.def.Idtr. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.idt.def.Idtr. self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%8::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%8.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%8.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT SZ) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::spec_new")
(assert (forall ((coreid! Poly) (vmpl! Poly) (cpu! Poly) (regs! Poly)) (! (=> (and (has_type coreid! TYPE%verismo!registers.core_perm_s.CoreIdPerm.) (has_type vmpl! NAT) (has_type cpu! NAT) (has_type regs! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.))) (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)) :pattern ((verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!)))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::spec_coreid")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? self!) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? self!))))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::spec_vmpl")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!)))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::spec_cpu")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!)))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::spec_regs")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? self!) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? self!))))))
(set-info :comment ";; Function-Specs verismo::registers::trackedcore::snpcore::SnpCore::axiom_spec_new")
(declare-fun ens%verismo!registers.trackedcore.snpcore.impl&%2.axiom_spec_new. (verismo!registers.core_perm_s.CoreIdPerm. Int Int vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.) Bool)
(assert (forall ((coreid! verismo!registers.core_perm_s.CoreIdPerm.) (vmpl! Int) (cpu! Int) (regs! vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)) (! (= (ens%verismo!registers.trackedcore.snpcore.impl&%2.axiom_spec_new. coreid! vmpl! cpu! regs!) (and (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid!) (I vmpl!) (I cpu!) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs!)))) coreid!) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid!) (I vmpl!) (I cpu!) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs!)))) vmpl!) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid!) (I vmpl!) (I cpu!) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs!)))) cpu!) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid!) (I vmpl!) (I cpu!) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs!)))) regs!))) :pattern ((ens%verismo!registers.trackedcore.snpcore.impl&%2.axiom_spec_new. coreid! vmpl! cpu! regs!)))))
(set-info :comment ";; Broadcast verismo::registers::trackedcore::snpcore::SnpCore::axiom_spec_new")
(assert (forall ((coreid! Poly) (vmpl! Poly) (cpu! Poly) (regs! Poly)) (! (=> (and (has_type coreid! TYPE%verismo!registers.core_perm_s.CoreIdPerm.) (has_type vmpl! NAT) (has_type cpu! NAT) (has_type regs! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.))) (and (and (and (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!))) (%Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid!)) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!))) (%I vmpl!))) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!))) (%I cpu!))) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!))) (%Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs!)))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_new")
(assert (forall ((accessed! Poly) (write! Poly) (conform! Poly) (exe! Poly) (sys! Poly) (dpl! Poly) (present! Poly)) (! (=> (and (has_type accessed! (UINT 64)) (has_type write! (UINT 64)) (has_type conform! (UINT 64)) (has_type exe! (UINT 64)) (has_type sys! (UINT 64)) (has_type dpl! (UINT 64)) (has_type present! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_accessed")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_accessed.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_accessed.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_write")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_write.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_write.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_write.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_conform")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_conform.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_conform.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_exe")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_exe.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_exe.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_sys")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_sys.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_sys.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_dpl")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_dpl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_dpl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_present")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_present.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_present.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_present.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))))
(set-info :comment ";; Function-Specs verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::axiom_spec_new")
(declare-fun ens%verismo!snp.cpu.gdt.impl&%2.axiom_spec_new. (Int Int Int Int Int Int Int) Bool)
(assert (forall ((accessed! Int) (write! Int) (conform! Int) (exe! Int) (sys! Int) (dpl! Int) (present! Int)) (! (= (ens%verismo!snp.cpu.gdt.impl&%2.axiom_spec_new. accessed! write! conform! exe! sys! dpl! present!) (and (= (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) accessed!) (= (verismo!snp.cpu.gdt.impl&%0.spec_write.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) write!) (= (verismo!snp.cpu.gdt.impl&%0.spec_conform.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) conform!) (= (verismo!snp.cpu.gdt.impl&%0.spec_exe.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) exe!) (= (verismo!snp.cpu.gdt.impl&%0.spec_sys.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) sys!) (= (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) dpl!) (= (verismo!snp.cpu.gdt.impl&%0.spec_present.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) present!))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%2.axiom_spec_new. accessed! write! conform! exe! sys! dpl! present!)))))
(set-info :comment ";; Broadcast verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::axiom_spec_new")
(assert (forall ((accessed! Poly) (write! Poly) (conform! Poly) (exe! Poly) (sys! Poly) (dpl! Poly) (present! Poly)) (! (=> (and (has_type accessed! (UINT 64)) (has_type write! (UINT 64)) (has_type conform! (UINT 64)) (has_type exe! (UINT 64)) (has_type sys! (UINT 64)) (has_type dpl! (UINT 64)) (has_type present! (UINT 64))) (and (and (and (and (and (and (= (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I accessed!)) (= (verismo!snp.cpu.gdt.impl&%0.spec_write.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I write!))) (= (verismo!snp.cpu.gdt.impl&%0.spec_conform.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I conform!))) (= (verismo!snp.cpu.gdt.impl&%0.spec_exe.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I exe!))) (= (verismo!snp.cpu.gdt.impl&%0.spec_sys.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I sys!))) (= (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I dpl!))) (= (verismo!snp.cpu.gdt.impl&%0.spec_present.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I present!)))) :pattern ((verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::new")
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%3.new.? val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%3.new.? val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_set_present")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_present.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_present.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_present.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) val!)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_present.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_present.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_present.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_set_dpl")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_set_sys")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_sys.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_sys.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_set_exe")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_exe.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_exe.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_set_conform")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_conform.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_conform.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_set_write")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_write.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_write.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_write.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_write.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_write.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_write.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::spec_set_accessed")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? val! (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_accessed")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_accessed.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_accessed.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_accessed.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_accessed.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_accessed.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_accessed.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_write")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_write.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_write.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_write.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 1))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_write.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_write.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_write.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_conform")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_conform.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_conform.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_conform.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 2))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_conform.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_conform.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_conform.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_exe")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_exe.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_exe.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_exe.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 3))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_exe.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_exe.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_exe.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_sys")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_sys.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_sys.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_sys.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 4))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_sys.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_sys.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_sys.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_dpl")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_dpl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_dpl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_dpl.? self!) (let ((mask$ (uClip 64 3))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 5))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_dpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_dpl.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_dpl.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_present")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_present.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_present.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_present.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 7))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_present.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_present.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_present.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7::view")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.view.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.view.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.view.? self!) (verismo!snp.cpu.gdt.impl&%1.spec_set_present.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_write.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_accessed.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_write.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_conform.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_exe.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_sys.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_dpl.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_present.? self!))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%16.view.? self!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%16.view.? self!)))))
(set-info :comment ";; Function-Specs verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::axiom_new")
(declare-fun ens%verismo!snp.cpu.gdt.impl&%3.axiom_new. (verismo!snp.cpu.gdt.DescriptorAttr0_7.) Bool)
(assert (forall ((val! verismo!snp.cpu.gdt.DescriptorAttr0_7.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%3.axiom_new. val!) (= (verismo!snp.cpu.gdt.impl&%3.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. val!))))) (verismo!snp.cpu.gdt.impl&%16.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. val!)))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%3.axiom_new. val!)))))
(set-info :comment ";; Broadcast verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::axiom_new")
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (= (verismo!snp.cpu.gdt.impl&%3.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. val!)))) (verismo!snp.cpu.gdt.impl&%16.view.? val!))) :pattern ((verismo!snp.cpu.gdt.impl&%3.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. val!)))) (verismo!snp.cpu.gdt.impl&%16.view.? val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::to_value")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.impl&%3.to_value.? self!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)) :pattern ((verismo!snp.cpu.gdt.impl&%3.to_value.? self!)))))
(set-info :comment ";; Function-Specs verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::axiom_into")
(declare-fun ens%verismo!snp.cpu.gdt.impl&%3.axiom_into. (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%3.axiom_into. self!) (= (verismo!snp.cpu.gdt.impl&%16.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.impl&%3.to_value.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!)))) self!)) :pattern ((ens%verismo!snp.cpu.gdt.impl&%3.axiom_into. self!)))))
(set-info :comment ";; Broadcast verismo::snp::cpu::gdt::DescriptorAttr0_7Spec::axiom_into")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (= (verismo!snp.cpu.gdt.impl&%16.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.impl&%3.to_value.? self!))) (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%3.to_value.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7::inv")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.inv.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.inv.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 127)))) :pattern ((verismo!snp.cpu.gdt.impl&%16.inv.? self!))))))
(set-info :comment ";; Function-Specs verismo::snp::cpu::gdt::DescriptorAttr0_7::axiom_inv")
(declare-fun ens%verismo!snp.cpu.gdt.impl&%16.axiom_inv. (verismo!snp.cpu.gdt.DescriptorAttr0_7.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.DescriptorAttr0_7.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%16.axiom_inv. self!) (and (verismo!snp.cpu.gdt.impl&%16.inv.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 127))))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%16.axiom_inv. self!)))))
(set-info :comment ";; Broadcast verismo::snp::cpu::gdt::DescriptorAttr0_7::axiom_inv")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (and (verismo!snp.cpu.gdt.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 127))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.inv.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_new")
(assert (forall ((avl! Poly) (long! Poly) (size32_or_16! Poly) (granularity! Poly)) (! (=> (and (has_type avl! (UINT 64)) (has_type long! (UINT 64)) (has_type size32_or_16! (UINT 64)) (has_type granularity! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_avl")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%17.spec_avl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%17.spec_avl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_long")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%17.spec_long.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%17.spec_long.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%17.spec_long.? self!) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_long.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%17.spec_long.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_long.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_size32_or_16")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_granularity")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%17.spec_granularity.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%17.spec_granularity.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!)))))
(set-info :comment ";; Function-Specs verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::axiom_spec_new")
(declare-fun ens%verismo!snp.cpu.gdt.impl&%19.axiom_spec_new. (Int Int Int Int) Bool)
(assert (forall ((avl! Int) (long! Int) (size32_or_16! Int) (granularity! Int)) (! (= (ens%verismo!snp.cpu.gdt.impl&%19.axiom_spec_new. avl! long! size32_or_16! granularity!) (and (= (verismo!snp.cpu.gdt.impl&%17.spec_avl.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I avl!) (I long!) (I size32_or_16!) (I granularity!)))) avl!) (= (verismo!snp.cpu.gdt.impl&%17.spec_long.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I avl!) (I long!) (I size32_or_16!) (I granularity!)))) long!) (= (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I avl!) (I long!) (I size32_or_16!) (I granularity!)))) size32_or_16!) (= (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I avl!) (I long!) (I size32_or_16!) (I granularity!)))) granularity!))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%19.axiom_spec_new. avl! long! size32_or_16! granularity!)))))
(set-info :comment ";; Broadcast verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::axiom_spec_new")
(assert (forall ((avl! Poly) (long! Poly) (size32_or_16! Poly) (granularity! Poly)) (! (=> (and (has_type avl! (UINT 64)) (has_type long! (UINT 64)) (has_type size32_or_16! (UINT 64)) (has_type granularity! (UINT 64))) (and (and (and (= (verismo!snp.cpu.gdt.impl&%17.spec_avl.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!))) (%I avl!)) (= (verismo!snp.cpu.gdt.impl&%17.spec_long.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!))) (%I long!))) (= (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!))) (%I size32_or_16!))) (= (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!))) (%I granularity!)))) :pattern ((verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::new")
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%20.new.? val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%20.new.? val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_set_granularity")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? self! val!) (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I (verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_long.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!)) val!)) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_set_size32_or_16")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? self! val!) (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I (verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_long.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_set_long")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_long.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_long.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%18.spec_set_long.? self! val!) (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I (verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_long.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_long.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_long.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::spec_set_avl")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_avl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_avl.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? self! val!) (verismo!snp.cpu.gdt.impl&%19.spec_new.? val! (I (verismo!snp.cpu.gdt.impl&%17.spec_long.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11::spec_avl")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.spec_avl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.spec_avl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.spec_avl.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_avl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (uInv 64 (verismo!snp.cpu.gdt.impl&%33.spec_avl.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_avl.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11::spec_long")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.spec_long.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.spec_long.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.spec_long.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (I (uClip 64 1))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_long.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (uInv 64 (verismo!snp.cpu.gdt.impl&%33.spec_long.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_long.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11::spec_size32_or_16")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (I (uClip 64 2))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (uInv 64 (verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11::spec_granularity")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.spec_granularity.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.spec_granularity.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.spec_granularity.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (I (uClip 64 3))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_granularity.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (uInv 64 (verismo!snp.cpu.gdt.impl&%33.spec_granularity.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_granularity.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11::view")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.view.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.view.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.view.? self!) (verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_long.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%33.spec_avl.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%33.spec_long.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%33.spec_granularity.? self!))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%33.view.? self!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%33.view.? self!)))))
(set-info :comment ";; Function-Specs verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::axiom_new")
(declare-fun ens%verismo!snp.cpu.gdt.impl&%20.axiom_new. (verismo!snp.cpu.gdt.DescriptorAttr8_11.) Bool)
(assert (forall ((val! verismo!snp.cpu.gdt.DescriptorAttr8_11.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%20.axiom_new. val!) (= (verismo!snp.cpu.gdt.impl&%20.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. val!))))) (verismo!snp.cpu.gdt.impl&%33.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. val!)))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%20.axiom_new. val!)))))
(set-info :comment ";; Broadcast verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::axiom_new")
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (= (verismo!snp.cpu.gdt.impl&%20.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. val!)))) (verismo!snp.cpu.gdt.impl&%33.view.? val!))) :pattern ((verismo!snp.cpu.gdt.impl&%20.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. val!)))) (verismo!snp.cpu.gdt.impl&%33.view.? val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::to_value")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.impl&%20.to_value.? self!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)) :pattern ((verismo!snp.cpu.gdt.impl&%20.to_value.? self!)))))
(set-info :comment ";; Function-Specs verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::axiom_into")
(declare-fun ens%verismo!snp.cpu.gdt.impl&%20.axiom_into. (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%20.axiom_into. self!) (= (verismo!snp.cpu.gdt.impl&%33.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.impl&%20.to_value.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!)))) self!)) :pattern ((ens%verismo!snp.cpu.gdt.impl&%20.axiom_into. self!)))))
(set-info :comment ";; Broadcast verismo::snp::cpu::gdt::DescriptorAttr8_11Spec::axiom_into")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (= (verismo!snp.cpu.gdt.impl&%33.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.impl&%20.to_value.? self!))) (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%20.to_value.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11::inv")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.inv.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.inv.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 7)))) :pattern ((verismo!snp.cpu.gdt.impl&%33.inv.? self!))))))
(set-info :comment ";; Function-Specs verismo::snp::cpu::gdt::DescriptorAttr8_11::axiom_inv")
(declare-fun ens%verismo!snp.cpu.gdt.impl&%33.axiom_inv. (verismo!snp.cpu.gdt.DescriptorAttr8_11.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.DescriptorAttr8_11.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%33.axiom_inv. self!) (and (verismo!snp.cpu.gdt.impl&%33.inv.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 7))))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%33.axiom_inv. self!)))))
(set-info :comment ";; Broadcast verismo::snp::cpu::gdt::DescriptorAttr8_11::axiom_inv")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (and (verismo!snp.cpu.gdt.impl&%33.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 7))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.inv.? self!) (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorSpec::spec_new")
(assert (forall ((limit0_15! Poly) (base0_23! Poly) (attr_0_7! Poly) (limit16_19! Poly) (attr_8_11! Poly) (base24_31! Poly)) (! (=> (and (has_type limit0_15! (UINT 64)) (has_type base0_23! (UINT 64)) (has_type attr_0_7! (UINT 64)) (has_type limit16_19! (UINT 64)) (has_type attr_8_11! (UINT 64)) (has_type base24_31! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorSpec::spec_limit0_15")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorSpec::spec_base0_23")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_base0_23.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_base0_23.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorSpec::spec_attr_0_7")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorSpec::spec_limit16_19")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorSpec::spec_attr_8_11")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorSpec::spec_base24_31")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_base24_31.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_base24_31.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))))
(set-info :comment ";; Function-Specs verismo::snp::cpu::gdt::DescriptorSpec::axiom_spec_new")
(declare-fun ens%verismo!snp.cpu.gdt.impl&%36.axiom_spec_new. (Int Int Int Int Int Int) Bool)
(assert (forall ((limit0_15! Int) (base0_23! Int) (attr_0_7! Int) (limit16_19! Int) (attr_8_11! Int) (base24_31! Int)) (! (= (ens%verismo!snp.cpu.gdt.impl&%36.axiom_spec_new. limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!) (and (= (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) limit0_15!) (= (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) base0_23!) (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) attr_0_7!) (= (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) limit16_19!) (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) attr_8_11!) (= (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) base24_31!))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%36.axiom_spec_new. limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!)))))
(set-info :comment ";; Broadcast verismo::snp::cpu::gdt::DescriptorSpec::axiom_spec_new")
(assert (forall ((limit0_15! Poly) (base0_23! Poly) (attr_0_7! Poly) (limit16_19! Poly) (attr_8_11! Poly) (base24_31! Poly)) (! (=> (and (has_type limit0_15! (UINT 64)) (has_type base0_23! (UINT 64)) (has_type attr_0_7! (UINT 64)) (has_type limit16_19! (UINT 64)) (has_type attr_8_11! (UINT 64)) (has_type base24_31! (UINT 64))) (and (and (and (and (and (= (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I limit0_15!)) (= (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I base0_23!))) (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I attr_0_7!))) (= (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I limit16_19!))) (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I attr_8_11!))) (= (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I base24_31!)))) :pattern ((verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorSpec::new")
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%37.new.? val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%37.new.? val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorSpec::spec_set_base24_31")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)) val!)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorSpec::spec_set_attr_8_11")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorSpec::spec_set_limit16_19")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorSpec::spec_set_attr_0_7")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorSpec::spec_set_base0_23")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorSpec::spec_set_limit0_15")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? val! (I (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Descriptor::spec_limit0_15")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? self!) (let ((mask$ (uClip 64 65535))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Descriptor::spec_base0_23")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_base0_23.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_base0_23.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? self!) (let ((mask$ (uClip 64 16777215))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 16))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Descriptor::spec_attr_0_7")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? self!) (let ((mask$ (uClip 64 255))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 40))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Descriptor::spec_limit16_19")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? self!) (let ((mask$ (uClip 64 15))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 48))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Descriptor::spec_attr_8_11")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? self!) (let ((mask$ (uClip 64 15))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 52))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Descriptor::spec_base24_31")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_base24_31.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_base24_31.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? self!) (let ((mask$ (uClip 64 511))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 56))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Descriptor::view")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.view.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.view.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.view.? self!) (verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? self!))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%50.view.? self!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%50.view.? self!)))))
(set-info :comment ";; Function-Specs verismo::snp::cpu::gdt::DescriptorSpec::axiom_new")
(declare-fun ens%verismo!snp.cpu.gdt.impl&%37.axiom_new. (verismo!snp.cpu.gdt.Descriptor.) Bool)
(assert (forall ((val! verismo!snp.cpu.gdt.Descriptor.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%37.axiom_new. val!) (= (verismo!snp.cpu.gdt.impl&%37.new.? (I (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. (Poly%verismo!snp.cpu.gdt.Descriptor. val!))))) (verismo!snp.cpu.gdt.impl&%50.view.? (Poly%verismo!snp.cpu.gdt.Descriptor. val!)))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%37.axiom_new. val!)))))
(set-info :comment ";; Broadcast verismo::snp::cpu::gdt::DescriptorSpec::axiom_new")
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!snp.cpu.gdt.Descriptor.) (= (verismo!snp.cpu.gdt.impl&%37.new.? (I (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. val!)))) (verismo!snp.cpu.gdt.impl&%50.view.? val!))) :pattern ((verismo!snp.cpu.gdt.impl&%37.new.? (I (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. val!)))) (verismo!snp.cpu.gdt.impl&%50.view.? val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorSpec::to_value")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.impl&%37.to_value.? self!)) TYPE%verismo!snp.cpu.gdt.Descriptor.)) :pattern ((verismo!snp.cpu.gdt.impl&%37.to_value.? self!)))))
(set-info :comment ";; Function-Specs verismo::snp::cpu::gdt::DescriptorSpec::axiom_into")
(declare-fun ens%verismo!snp.cpu.gdt.impl&%37.axiom_into. (verismo!snp.cpu.gdt.DescriptorSpec.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%37.axiom_into. self!) (= (verismo!snp.cpu.gdt.impl&%50.view.? (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.impl&%37.to_value.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!)))) self!)) :pattern ((ens%verismo!snp.cpu.gdt.impl&%37.axiom_into. self!)))))
(set-info :comment ";; Broadcast verismo::snp::cpu::gdt::DescriptorSpec::axiom_into")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (= (verismo!snp.cpu.gdt.impl&%50.view.? (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.impl&%37.to_value.? self!))) (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%37.to_value.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Descriptor::inv")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.inv.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.inv.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 18446744073709551615)))) :pattern ((verismo!snp.cpu.gdt.impl&%50.inv.? self!))))))
(set-info :comment ";; Function-Specs verismo::snp::cpu::gdt::Descriptor::axiom_inv")
(declare-fun ens%verismo!snp.cpu.gdt.impl&%50.axiom_inv. (verismo!snp.cpu.gdt.Descriptor.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.Descriptor.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%50.axiom_inv. self!) (and (verismo!snp.cpu.gdt.impl&%50.inv.? (Poly%verismo!snp.cpu.gdt.Descriptor. self!)) (let ((tmp%%$ (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. (Poly%verismo!snp.cpu.gdt.Descriptor. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 18446744073709551615))))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%50.axiom_inv. self!)))))
(set-info :comment ";; Broadcast verismo::snp::cpu::gdt::Descriptor::axiom_inv")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (and (verismo!snp.cpu.gdt.impl&%50.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 18446744073709551615))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.inv.? self!) (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Gdtr::wf")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%59.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%59.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self!) (B (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/base (%Poly%verismo!snp.cpu.gdt.Gdtr. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::field_at")
(assert (forall ((T&. Dcr) (T& Type) (F&. Dcr) (F& Type) (val! Poly) (offset! Poly)) (! (=> (and (has_type val! T&) (has_type offset! NAT)) (has_type (verismo!tspec.cast.field_at.? T&. T& F&. F& val! offset!) F&)) :pattern ((verismo!tspec.cast.field_at.? T&. T& F&. F& val! offset!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::SpecSize::spec_size_def")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (verismo!tspec.size_s.SpecSize.spec_size_def.? Self%&. Self%&) NAT) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? Self%&. Self%&)))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%12::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%12.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%12.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16)) (I 2))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 16)))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%19.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%19.spec_size_def.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%11::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32)) (I 4))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 32)))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%10::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%10.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%10.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)) (I 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%13::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%13.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%13.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8)) (I 1))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 8)))
(set-info :comment ";; Function-Axioms verismo::tspec_e::array::Array::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%4.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%4.spec_size_def.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int N&) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)))))) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)))))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::ghcbmsr_msgs")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.ghcbmsr_msgs.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.ghcbmsr_msgs.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.ghcbmsr_msgs.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_ghcb_msrs (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.ghcbmsr_msgs.? self!))))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::last_ghcb_req")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_req.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_req.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_req.? self!) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!seq.Seq.last.? $ (TYPE%tuple%2. $ NAT $ NAT) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_ghcb_msrs (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))))))))))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_req.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_req.? self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_req.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_new")
(assert (forall ((reserved_0! Poly) (cpl! Poly) (reserved_2! Poly) (rax! Poly) (reserved2! Poly) (rcx! Poly) (rdx! Poly) (rbx! Poly) (reserved3! Poly) (r8! Poly) (reserved4! Poly) (sw_exit_code! Poly) (sw_exit_info_1! Poly) (sw_exit_info_2! Poly) (sw_scratch! Poly) (reserved5! Poly) (guest_error_code! Poly) (reserved_6! Poly) (xcr0! Poly)) (! (=> (and (has_type reserved_0! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 203))) (has_type cpl! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type reserved_2! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 300))) (has_type rax! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved2! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 264))) (has_type rcx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rdx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rbx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved3! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type r8! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved4! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 72))) (has_type sw_exit_code! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type sw_exit_info_1! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type sw_exit_info_2! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type sw_scratch! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved5! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16))) (has_type guest_error_code! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved_6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type xcr0! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))) (has_type (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!)) TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.)) :pattern ((verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_reserved_0")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_0.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_0.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_0.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_0 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (has_type (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_0.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 203)))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_0.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_cpl")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_cpl.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_cpl.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_cpl.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/cpl (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_cpl.? self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_reserved_2")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_2.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_2.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_2.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (has_type (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_2.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 300)))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_2.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rax")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rax.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rax.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rax.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rax (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_rax.? self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_reserved2")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved2.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved2.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved2.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_reserved2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (has_type (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved2.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 264)))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_reserved2.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rcx")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rcx.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rcx.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rcx.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rcx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_rcx.? self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rdx")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rdx.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rdx.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rdx.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rdx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_rdx.? self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rbx")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rbx.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_rbx.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rbx.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rbx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_rbx.? self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_reserved3")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved3.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved3.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved3.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved3 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_reserved3.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (has_type (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved3.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_reserved3.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_r8")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_r8.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_r8.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_r8.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/r8 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_r8.? self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_reserved4")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved4.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved4.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved4.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved4 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_reserved4.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (has_type (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved4.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 72)))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_reserved4.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_exit_code")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_code.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_code.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_code.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_code (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_code.? self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_exit_info_1")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_1.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_1.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_1.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_1 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_1.? self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_exit_info_2")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_2.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_2.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_2.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_2.? self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_scratch")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_scratch.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_sw_scratch.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_scratch.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_scratch (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_sw_scratch.? self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_reserved5")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved5.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved5.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved5.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved5 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_reserved5.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (has_type (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved5.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_reserved5.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_guest_error_code")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_guest_error_code.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_guest_error_code.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_guest_error_code.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/guest_error_code (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_guest_error_code.? self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_reserved_6")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_6.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_6.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_6.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_6 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_6.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (has_type (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_6.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_6.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_xcr0")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_xcr0.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%0.spec_xcr0.) (forall ((self! Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%0.spec_xcr0.? self!) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/xcr0 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_xcr0.? self!))))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_spec_new")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%2.axiom_spec_new. (Poly verismo!tspec.security.sectype.SecType<u8./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) Bool)
(assert (forall ((reserved_0! Poly) (cpl! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (reserved_2! Poly) (rax! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved2! Poly) (rcx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (rdx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (rbx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved3! Poly) (r8! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved4! Poly) (sw_exit_code! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (sw_exit_info_1! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (sw_exit_info_2! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (sw_scratch! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved5! Poly) (guest_error_code! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved_6! Poly) (xcr0! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%2.axiom_spec_new. reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!) (and (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_0.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) reserved_0!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_cpl.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) cpl!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_2.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) reserved_2!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rax.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) rax!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved2.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) reserved2!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rcx.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) rcx!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rdx.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) rdx!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rbx.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) rbx!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved3.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) reserved3!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_r8.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) r8!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved4.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) reserved4!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_code.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) sw_exit_code!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_1.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) sw_exit_info_1!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_2.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) sw_exit_info_2!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_scratch.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) sw_scratch!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved5.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) reserved5!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_guest_error_code.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) guest_error_code!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_6.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) reserved_6!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_xcr0.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved_2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) reserved_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) xcr0!))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%2.axiom_spec_new. reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_spec_new")
(assert (forall ((reserved_0! Poly) (cpl! Poly) (reserved_2! Poly) (rax! Poly) (reserved2! Poly) (rcx! Poly) (rdx! Poly) (rbx! Poly) (reserved3! Poly) (r8! Poly) (reserved4! Poly) (sw_exit_code! Poly) (sw_exit_info_1! Poly) (sw_exit_info_2! Poly) (sw_scratch! Poly) (reserved5! Poly) (guest_error_code! Poly) (reserved_6! Poly) (xcr0! Poly)) (! (=> (and (has_type reserved_0! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 203))) (has_type cpl! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type reserved_2! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 300))) (has_type rax! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved2! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 264))) (has_type rcx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rdx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rbx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved3! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type r8! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved4! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 72))) (has_type sw_exit_code! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type sw_exit_info_1! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type sw_exit_info_2! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type sw_scratch! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved5! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16))) (has_type guest_error_code! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved_6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32))) (has_type xcr0! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_0.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) reserved_0!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_cpl.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!))) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_2.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) reserved_2!)) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rax.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!))) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved2.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) reserved2!)) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rcx.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!))) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rdx.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!))) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rbx.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!))) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved3.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) reserved3!)) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_r8.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. r8!))) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved4.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) reserved4!)) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_code.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_code!))) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_1.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_1!))) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_2.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_exit_info_2!))) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_scratch.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sw_scratch!))) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved5.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) reserved5!)) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_guest_error_code.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!))) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_reserved_6.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) reserved_6!)) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_xcr0.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!)))) :pattern ((verismo!snp.ghcb.proto_page.impl&%2.spec_new.? reserved_0! cpl! reserved_2! rax! reserved2! rcx! rdx! rbx! reserved3! r8! reserved4! sw_exit_code! sw_exit_info_1! sw_exit_info_2! sw_scratch! reserved5! guest_error_code! reserved_6! xcr0!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%7.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%7.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 203)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_0 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/cpl (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 300)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rax (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 264)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rcx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rdx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rbx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved3 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/r8 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 72)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved4 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_code (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_1 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_scratch (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved5 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/guest_error_code (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_6 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/xcr0 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_cpl_offset")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_cpl_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_cpl_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%9.spec_cpl_offset.? no%param) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_cpl_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.ghcb.proto_page.impl&%9.spec_cpl_offset.? no%param))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_cpl_offset.? no%param)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_cpl")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_cpl. (verismo!snp.ghcb.proto_page.GhcbVmsa.) Bool)
(assert (forall ((self! verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_cpl. self!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_cpl.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!) (I (verismo!snp.ghcb.proto_page.impl&%9.spec_cpl_offset.? (I 0))))))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_cpl. self!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_cpl")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_cpl.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! (I (verismo!snp.ghcb.proto_page.impl&%9.spec_cpl_offset.? (I 0))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_cpl.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rax_offset")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rax_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rax_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%9.spec_rax_offset.? no%param) (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 300)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_rax_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.ghcb.proto_page.impl&%9.spec_rax_offset.? no%param))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_rax_offset.? no%param)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_rax")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_rax. (verismo!snp.ghcb.proto_page.GhcbVmsa.) Bool)
(assert (forall ((self! verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_rax. self!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rax.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!) (I (verismo!snp.ghcb.proto_page.impl&%9.spec_rax_offset.? (I 0))))))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_rax. self!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_rax")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rax.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.ghcb.proto_page.impl&%9.spec_rax_offset.? (I 0))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_rax.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rcx_offset")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rcx_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rcx_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%9.spec_rcx_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 300)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 264)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_rcx_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.ghcb.proto_page.impl&%9.spec_rcx_offset.? no%param))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_rcx_offset.? no%param)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_rcx")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_rcx. (verismo!snp.ghcb.proto_page.GhcbVmsa.) Bool)
(assert (forall ((self! verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_rcx. self!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rcx.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!) (I (verismo!snp.ghcb.proto_page.impl&%9.spec_rcx_offset.? (I 0))))))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_rcx. self!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_rcx")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rcx.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.ghcb.proto_page.impl&%9.spec_rcx_offset.? (I 0))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_rcx.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rdx_offset")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rdx_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rdx_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%9.spec_rdx_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 300)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 264)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_rdx_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.ghcb.proto_page.impl&%9.spec_rdx_offset.? no%param))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_rdx_offset.? no%param)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_rdx")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_rdx. (verismo!snp.ghcb.proto_page.GhcbVmsa.) Bool)
(assert (forall ((self! verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_rdx. self!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rdx.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!) (I (verismo!snp.ghcb.proto_page.impl&%9.spec_rdx_offset.? (I 0))))))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_rdx. self!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_rdx")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rdx.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.ghcb.proto_page.impl&%9.spec_rdx_offset.? (I 0))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_rdx.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_rbx_offset")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rbx_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_rbx_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%9.spec_rbx_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 300)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 264)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_rbx_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.ghcb.proto_page.impl&%9.spec_rbx_offset.? no%param))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_rbx_offset.? no%param)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_rbx")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_rbx. (verismo!snp.ghcb.proto_page.GhcbVmsa.) Bool)
(assert (forall ((self! verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_rbx. self!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rbx.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!) (I (verismo!snp.ghcb.proto_page.impl&%9.spec_rbx_offset.? (I 0))))))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_rbx. self!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_rbx")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_rbx.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.ghcb.proto_page.impl&%9.spec_rbx_offset.? (I 0))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_rbx.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_r8_offset")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_r8_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_r8_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%9.spec_r8_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 300)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 264)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_r8_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.ghcb.proto_page.impl&%9.spec_r8_offset.? no%param))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_r8_offset.? no%param)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_r8")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_r8. (verismo!snp.ghcb.proto_page.GhcbVmsa.) Bool)
(assert (forall ((self! verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_r8. self!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_r8.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!) (I (verismo!snp.ghcb.proto_page.impl&%9.spec_r8_offset.? (I 0))))))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_r8. self!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_r8")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_r8.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.ghcb.proto_page.impl&%9.spec_r8_offset.? (I 0))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_r8.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_exit_code_offset")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_code_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_code_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_code_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 300)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 264)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 72)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_code_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_code_offset.? no%param))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_code_offset.? no%param)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_sw_exit_code")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_sw_exit_code. (verismo!snp.ghcb.proto_page.GhcbVmsa.) Bool)
(assert (forall ((self! verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_sw_exit_code. self!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_code.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!) (I (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_code_offset.? (I 0))))))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_sw_exit_code. self!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_sw_exit_code")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_code.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_code_offset.? (I 0))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_code.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_exit_info_1_offset")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_1_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_1_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_1_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 300)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 264)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 72)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_1_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_1_offset.? no%param))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_1_offset.? no%param)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_sw_exit_info_1")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_sw_exit_info_1. (verismo!snp.ghcb.proto_page.GhcbVmsa.) Bool)
(assert (forall ((self! verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_sw_exit_info_1. self!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_1.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!) (I (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_1_offset.? (I 0))))))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_sw_exit_info_1. self!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_sw_exit_info_1")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_1.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_1_offset.? (I 0))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_1.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_exit_info_2_offset")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_2_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_2_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_2_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 300)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 264)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 72)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_2_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_2_offset.? no%param))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_2_offset.? no%param)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_sw_exit_info_2")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_sw_exit_info_2. (verismo!snp.ghcb.proto_page.GhcbVmsa.) Bool)
(assert (forall ((self! verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_sw_exit_info_2. self!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_2.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!) (I (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_2_offset.? (I 0))))))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_sw_exit_info_2. self!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_sw_exit_info_2")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_2.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_exit_info_2_offset.? (I 0))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_sw_exit_info_2.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_sw_scratch_offset")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_scratch_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_sw_scratch_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_scratch_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 300)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 264)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 72)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_sw_scratch_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_scratch_offset.? no%param))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_sw_scratch_offset.? no%param)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_sw_scratch")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_sw_scratch. (verismo!snp.ghcb.proto_page.GhcbVmsa.) Bool)
(assert (forall ((self! verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_sw_scratch. self!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_scratch.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!) (I (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_scratch_offset.? (I 0))))))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_sw_scratch. self!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_sw_scratch")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_sw_scratch.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.ghcb.proto_page.impl&%9.spec_sw_scratch_offset.? (I 0))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_sw_scratch.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_guest_error_code_offset")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_guest_error_code_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_guest_error_code_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%9.spec_guest_error_code_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 300)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 264)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 72)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_guest_error_code_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.ghcb.proto_page.impl&%9.spec_guest_error_code_offset.? no%param))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_guest_error_code_offset.? no%param)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_guest_error_code")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_guest_error_code. (verismo!snp.ghcb.proto_page.GhcbVmsa.) Bool)
(assert (forall ((self! verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_guest_error_code. self!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_guest_error_code.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!) (I (verismo!snp.ghcb.proto_page.impl&%9.spec_guest_error_code_offset.? (I 0))))))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_guest_error_code. self!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_guest_error_code")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_guest_error_code.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.ghcb.proto_page.impl&%9.spec_guest_error_code_offset.? (I 0))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_guest_error_code.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_xcr0_offset")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_xcr0_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%9.spec_xcr0_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%9.spec_xcr0_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 300)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 264)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 72)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_xcr0_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.ghcb.proto_page.impl&%9.spec_xcr0_offset.? no%param))) :pattern ((verismo!snp.ghcb.proto_page.impl&%9.spec_xcr0_offset.? no%param)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_xcr0")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_xcr0. (verismo!snp.ghcb.proto_page.GhcbVmsa.) Bool)
(assert (forall ((self! verismo!snp.ghcb.proto_page.GhcbVmsa.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_xcr0. self!) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_xcr0.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!) (I (verismo!snp.ghcb.proto_page.impl&%9.spec_xcr0_offset.? (I 0))))))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%9.axiom_field_xcr0. self!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbVmsa::axiom_field_xcr0")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (= (verismo!snp.ghcb.proto_page.impl&%0.spec_xcr0.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.ghcb.proto_page.impl&%9.spec_xcr0_offset.? (I 0))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%0.spec_xcr0.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbPage::spec_vmsa")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbPage.) (has_type (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!snp.ghcb.proto_page.impl&%63.spec_vmsa.? self!)) TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.)) :pattern ((verismo!snp.ghcb.proto_page.impl&%63.spec_vmsa.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbPage::spec_valid_bitmap")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbPage.) (has_type (verismo!snp.ghcb.proto_page.impl&%63.spec_valid_bitmap.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)))) :pattern ((verismo!snp.ghcb.proto_page.impl&%63.spec_valid_bitmap.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbPage::spec_reserved6")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbPage.) (has_type (verismo!snp.ghcb.proto_page.impl&%63.spec_reserved6.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 1024)))) :pattern ((verismo!snp.ghcb.proto_page.impl&%63.spec_reserved6.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbPage::spec_shared_buffer")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbPage.) (has_type (verismo!snp.ghcb.proto_page.impl&%63.spec_shared_buffer.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 2032)))) :pattern ((verismo!snp.ghcb.proto_page.impl&%63.spec_shared_buffer.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbPage::spec_reserved7")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbPage.) (has_type (verismo!snp.ghcb.proto_page.impl&%63.spec_reserved7.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 10)))) :pattern ((verismo!snp.ghcb.proto_page.impl&%63.spec_reserved7.? self!)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbPage::axiom_spec_new")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%62.axiom_spec_new. (verismo!snp.ghcb.proto_page.GhcbVmsa. Poly Poly Poly Poly verismo!tspec.security.sectype.SecType<u16./tuple%0.>. verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) Bool)
(assert (forall ((vmsa! verismo!snp.ghcb.proto_page.GhcbVmsa.) (valid_bitmap! Poly) (reserved6! Poly) (shared_buffer! Poly) (reserved7! Poly) (version! verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (usage! verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%62.axiom_spec_new. vmsa! valid_bitmap! reserved6! shared_buffer! reserved7! version! usage!) (and (= (verismo!snp.ghcb.proto_page.impl&%63.spec_vmsa.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!snp.ghcb.proto_page.impl&%62.spec_new.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. vmsa!) valid_bitmap! reserved6! shared_buffer! reserved7! (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. usage!)))) vmsa!) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_valid_bitmap.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!snp.ghcb.proto_page.impl&%62.spec_new.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. vmsa!) valid_bitmap! reserved6! shared_buffer! reserved7! (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. usage!)))) valid_bitmap!) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_reserved6.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!snp.ghcb.proto_page.impl&%62.spec_new.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. vmsa!) valid_bitmap! reserved6! shared_buffer! reserved7! (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. usage!)))) reserved6!) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_shared_buffer.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!snp.ghcb.proto_page.impl&%62.spec_new.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. vmsa!) valid_bitmap! reserved6! shared_buffer! reserved7! (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. usage!)))) shared_buffer!) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_reserved7.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!snp.ghcb.proto_page.impl&%62.spec_new.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. vmsa!) valid_bitmap! reserved6! shared_buffer! reserved7! (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. usage!)))) reserved7!) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_version.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!snp.ghcb.proto_page.impl&%62.spec_new.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. vmsa!) valid_bitmap! reserved6! shared_buffer! reserved7! (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. usage!)))) version!) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_usage.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!snp.ghcb.proto_page.impl&%62.spec_new.? (Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. vmsa!) valid_bitmap! reserved6! shared_buffer! reserved7! (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. version!) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. usage!)))) usage!))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%62.axiom_spec_new. vmsa! valid_bitmap! reserved6! shared_buffer! reserved7! version! usage!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbPage::axiom_spec_new")
(assert (forall ((vmsa! Poly) (valid_bitmap! Poly) (reserved6! Poly) (shared_buffer! Poly) (reserved7! Poly) (version! Poly) (usage! Poly)) (! (=> (and (has_type vmsa! TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (has_type valid_bitmap! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16))) (has_type reserved6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 1024))) (has_type shared_buffer! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 2032))) (has_type reserved7! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 10))) (has_type version! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.)) (has_type usage! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.))) (and (and (and (and (and (and (= (verismo!snp.ghcb.proto_page.impl&%63.spec_vmsa.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!snp.ghcb.proto_page.impl&%62.spec_new.? vmsa! valid_bitmap! reserved6! shared_buffer! reserved7! version! usage!))) (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. vmsa!)) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_valid_bitmap.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!snp.ghcb.proto_page.impl&%62.spec_new.? vmsa! valid_bitmap! reserved6! shared_buffer! reserved7! version! usage!))) valid_bitmap!)) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_reserved6.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!snp.ghcb.proto_page.impl&%62.spec_new.? vmsa! valid_bitmap! reserved6! shared_buffer! reserved7! version! usage!))) reserved6!)) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_shared_buffer.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!snp.ghcb.proto_page.impl&%62.spec_new.? vmsa! valid_bitmap! reserved6! shared_buffer! reserved7! version! usage!))) shared_buffer!)) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_reserved7.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!snp.ghcb.proto_page.impl&%62.spec_new.? vmsa! valid_bitmap! reserved6! shared_buffer! reserved7! version! usage!))) reserved7!)) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_version.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!snp.ghcb.proto_page.impl&%62.spec_new.? vmsa! valid_bitmap! reserved6! shared_buffer! reserved7! version! usage!))) (%Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. version!))) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_usage.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!snp.ghcb.proto_page.impl&%62.spec_new.? vmsa! valid_bitmap! reserved6! shared_buffer! reserved7! version! usage!))) (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. usage!)))) :pattern ((verismo!snp.ghcb.proto_page.impl&%62.spec_new.? vmsa! valid_bitmap! reserved6! shared_buffer! reserved7! version! usage!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!snp.ghcb.proto_page.GhcbPage. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbPage::spec_vmsa_offset")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%68.spec_vmsa_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%68.spec_vmsa_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%68.spec_vmsa_offset.? no%param) 0) :pattern ((verismo!snp.ghcb.proto_page.impl&%68.spec_vmsa_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.ghcb.proto_page.impl&%68.spec_vmsa_offset.? no%param))) :pattern ((verismo!snp.ghcb.proto_page.impl&%68.spec_vmsa_offset.? no%param)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbPage::axiom_field_vmsa")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%68.axiom_field_vmsa. (verismo!snp.ghcb.proto_page.GhcbPage.) Bool)
(assert (forall ((self! verismo!snp.ghcb.proto_page.GhcbPage.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%68.axiom_field_vmsa. self!) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_vmsa.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. self!)) (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbPage. $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. (Poly%verismo!snp.ghcb.proto_page.GhcbPage. self!) (I (verismo!snp.ghcb.proto_page.impl&%68.spec_vmsa_offset.? (I 0))))))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%68.axiom_field_vmsa. self!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbPage::axiom_field_vmsa")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbPage.) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_vmsa.? self!) (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbPage. $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. self! (I (verismo!snp.ghcb.proto_page.impl&%68.spec_vmsa_offset.? (I 0))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%63.spec_vmsa.? self!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::spec_size_def")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%8.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%8.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa.) (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 300)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 264)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 72)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbPage::spec_shared_buffer_offset")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%68.spec_shared_buffer_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%68.spec_shared_buffer_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%68.spec_shared_buffer_offset.? no%param) (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 300)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 264)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 72)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 1024)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%68.spec_shared_buffer_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.ghcb.proto_page.impl&%68.spec_shared_buffer_offset.? no%param))) :pattern ((verismo!snp.ghcb.proto_page.impl&%68.spec_shared_buffer_offset.? no%param)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbPage::axiom_field_shared_buffer")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%68.axiom_field_shared_buffer. (verismo!snp.ghcb.proto_page.GhcbPage.) Bool)
(assert (forall ((self! verismo!snp.ghcb.proto_page.GhcbPage.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%68.axiom_field_shared_buffer. self!) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_shared_buffer.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. self!)) (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbPage. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 2032)) (Poly%verismo!snp.ghcb.proto_page.GhcbPage. self!) (I (verismo!snp.ghcb.proto_page.impl&%68.spec_shared_buffer_offset.? (I 0)))))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%68.axiom_field_shared_buffer. self!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbPage::axiom_field_shared_buffer")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbPage.) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_shared_buffer.? self!) (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbPage. $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 2032)) self! (I (verismo!snp.ghcb.proto_page.impl&%68.spec_shared_buffer_offset.? (I 0)))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%63.spec_shared_buffer.? self!)))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbPage::spec_usage_offset")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%68.spec_usage_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%68.spec_usage_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.ghcb.proto_page.impl&%68.spec_usage_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 300)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 264)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 72)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 1024)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 2032)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 10)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16)))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%68.spec_usage_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.ghcb.proto_page.impl&%68.spec_usage_offset.? no%param))) :pattern ((verismo!snp.ghcb.proto_page.impl&%68.spec_usage_offset.? no%param)))))
(set-info :comment ";; Function-Specs verismo::snp::ghcb::proto_page::GhcbPage::axiom_field_usage")
(declare-fun ens%verismo!snp.ghcb.proto_page.impl&%68.axiom_field_usage. (verismo!snp.ghcb.proto_page.GhcbPage.) Bool)
(assert (forall ((self! verismo!snp.ghcb.proto_page.GhcbPage.)) (! (= (ens%verismo!snp.ghcb.proto_page.impl&%68.axiom_field_usage. self!) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_usage.? (Poly%verismo!snp.ghcb.proto_page.GhcbPage. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbPage. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!snp.ghcb.proto_page.GhcbPage. self!) (I (verismo!snp.ghcb.proto_page.impl&%68.spec_usage_offset.? (I 0))))))) :pattern ((ens%verismo!snp.ghcb.proto_page.impl&%68.axiom_field_usage. self!)))))
(set-info :comment ";; Broadcast verismo::snp::ghcb::proto_page::GhcbPage::axiom_field_usage")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.ghcb.proto_page.GhcbPage.) (= (verismo!snp.ghcb.proto_page.impl&%63.spec_usage.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbPage. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) self! (I (verismo!snp.ghcb.proto_page.impl&%68.spec_usage_offset.? (I 0))))))) :pattern ((verismo!snp.ghcb.proto_page.impl&%63.spec_usage.? self!)))))
(set-info :comment ";; Function-Specs verismo::tspec::cast::axiom_cast_to_seq_unique")
(declare-fun ens%verismo!tspec.cast.axiom_cast_to_seq_unique. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (ens%verismo!tspec.cast.axiom_cast_to_seq_unique. T&. T& val!) (= val! (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!)))) :pattern ((ens%verismo!tspec.cast.axiom_cast_to_seq_unique. T&. T& val!)))))
(set-info :comment ";; Broadcast verismo::tspec::cast::axiom_cast_to_seq_unique")
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! T&) (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (= val! (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!))))))
(set-info :comment ";; Function-Specs verismo::tspec::isconst::axiom_const_forall")
(declare-fun ens%verismo!tspec.isconst.axiom_const_forall. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (= (ens%verismo!tspec.isconst.axiom_const_forall. T&. T& v!) (and (and (and (= (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& v!) (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 4))))) :pattern ((ens%verismo!tspec.isconst.axiom_const_forall. T&. T& v!)))))
(set-info :comment ";; Broadcast verismo::tspec::isconst::axiom_const_forall")
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (=> (has_type v! T&) (=> (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (and (and (and (= (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& v!) (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 4)))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? T&. T& v!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::spec_max_count")
(assert (forall ((T&. Dcr) (T& Type)) (! (<= 0 (verismo!tspec.size_s.spec_max_count.? T&. T&)) :pattern ((verismo!tspec.size_s.spec_max_count.? T&. T&)))))
(set-info :comment ";; Function-Specs verismo::tspec::size_s::axiom_max_count_size_rel")
(declare-fun ens%verismo!tspec.size_s.axiom_max_count_size_rel. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!tspec.size_s.axiom_max_count_size_rel. T&. T&) (let ((tmp%%$ (verismo!tspec.size_s.spec_max_count.? T&. T&))) (and (< (EucDiv (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (verismo!tspec.size_s.spec_size.? T&. T&))) 2) tmp%%$) (<= tmp%%$ (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (nClip (Mul (verismo!tspec.size_s.spec_size.? T&. T&) 8)))))))) :pattern ((ens%verismo!tspec.size_s.axiom_max_count_size_rel. T&. T&)))))
(set-info :comment ";; Broadcast verismo::tspec::size_s::axiom_max_count_size_rel")
(assert (forall ((T&. Dcr) (T& Type)) (! (let ((tmp%%$ (verismo!tspec.size_s.spec_max_count.? T&. T&))) (and (< (EucDiv (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (verismo!tspec.size_s.spec_size.? T&. T&))) 2) tmp%%$) (<= tmp%%$ (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (nClip (Mul (verismo!tspec.size_s.spec_size.? T&. T&) 8))))))) :pattern ((verismo!tspec.size_s.spec_max_count.? T&. T&)))))
(set-info :comment ";; Function-Specs verismo::tspec::size_s::axiom_set_full_max_count_rel")
(declare-fun ens%verismo!tspec.size_s.axiom_set_full_max_count_rel. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!tspec.size_s.axiom_set_full_max_count_rel. T&. T&) (= (vstd!set.impl&%0.len.? T&. T& (vstd!set.impl&%0.full.? T&. T&)) (verismo!tspec.size_s.spec_max_count.? T&. T&))) :pattern ((ens%verismo!tspec.size_s.axiom_set_full_max_count_rel. T&. T&)))))
(set-info :comment ";; Broadcast verismo::tspec::size_s::axiom_set_full_max_count_rel")
(assert (forall ((T&. Dcr) (T& Type)) (! (= (vstd!set.impl&%0.len.? T&. T& (vstd!set.impl&%0.full.? T&. T&)) (verismo!tspec.size_s.spec_max_count.? T&. T&)) :pattern ((verismo!tspec.size_s.spec_max_count.? T&. T&)))))
(set-info :comment ";; Function-Specs verismo::tspec::size_s::axiom_size_from_cast_bytes")
(declare-fun ens%verismo!tspec.size_s.axiom_size_from_cast_bytes. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!tspec.size_s.axiom_size_from_cast_bytes. T&. T&) (= (verismo!tspec.size_s.spec_size.? T&. T&) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)))) :pattern ((ens%verismo!tspec.size_s.axiom_size_from_cast_bytes. T&. T&)))))
(set-info :comment ";; Broadcast verismo::tspec::size_s::axiom_size_from_cast_bytes")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (= (verismo!tspec.size_s.spec_size.? T&. T&) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)))) :pattern ((verismo!tspec.size_s.spec_size.? T&. T&)))))
(set-info :comment ";; Function-Specs verismo::tspec::size_s::axiom_size_from_cast_bytes_def")
(declare-fun ens%verismo!tspec.size_s.axiom_size_from_cast_bytes_def. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (ens%verismo!tspec.size_s.axiom_size_from_cast_bytes_def. T&. T& val!) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (UINT 8) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) val!)))) :pattern ((ens%verismo!tspec.size_s.axiom_size_from_cast_bytes_def. T&. T& val!)))))
(set-info :comment ";; Broadcast verismo::tspec::size_s::axiom_size_from_cast_bytes_def")
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! T&) (=> (and (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (UINT 8) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) val!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) val!)))))
(set-info :comment ";; Function-Specs verismo::primitives_e::sectype::axiom_size_from_cast_secbytes_def")
(declare-fun ens%verismo!primitives_e.sectype.axiom_size_from_cast_secbytes_def. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (ens%verismo!primitives_e.sectype.axiom_size_from_cast_secbytes_def. T&. T& val!) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!)))) :pattern ((ens%verismo!primitives_e.sectype.axiom_size_from_cast_secbytes_def. T&. T& val!)))))
(set-info :comment ";; Broadcast verismo::primitives_e::sectype::axiom_size_from_cast_secbytes_def")
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! T&) (=> (and (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self! vmpl!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%2::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%2.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%2.is_constant.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? T1&. T1& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T2&. T2& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%1::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%1.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%1.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%tuple%0. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%1::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%1.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%1.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%tuple%0. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%tuple%0. self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%tuple%0.))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%0::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%0.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%tuple%0. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%tuple%0.))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%16::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%16.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%16.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%tuple%0.) (I 0))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%tuple%0.))
(set-info :comment ";; Function-Axioms verismo::tspec::security::seq::impl&%1::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%8::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%8.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%8.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT SZ) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT SZ) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%8::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%8.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%8.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT SZ)) (I 8))))
(set-info :comment ";; Function-Axioms verismo::tspec_e::array::Array::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self!) (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. T&. T&) (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::spec_set_regs")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? self! val!) (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? self!)) (I (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!)) (I (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!)) val!)) :pattern ((verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type val! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.))) (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? self! val!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)) :pattern ((verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::spec_set_coreid")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.? self! val!) (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? val! (I (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!)) (I (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!)) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? self!)))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type val! TYPE%verismo!registers.core_perm_s.CoreIdPerm.)) (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.? self! val!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)) :pattern ((verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::reg_updated")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.) (forall ((self! Poly) (prev! Poly) (regs! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? self! prev! regs!) (forall ((i$ Poly)) (! (=> (has_type i$ TYPE%verismo!arch.reg.RegName.) (=> (not (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.reg.RegName. regs! i$)) (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) i$) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. prev!))) i$)))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) i$))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? self! prev! regs!))))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::only_reg_coremode_updated")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_coremode_updated.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_coremode_updated.) (forall ((self! Poly) (prev! Poly) (regs! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.only_reg_coremode_updated.? self! prev! regs!) (and (= (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!) (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.? prev! (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))))) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))))) (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? self! prev! regs!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.only_reg_coremode_updated.? self! prev! regs!))))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::cpu")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.cpu.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.cpu.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.cpu.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.cpu.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.impl&%3.cpu.? self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.cpu.? self!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT SZ)))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::usize_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.usize_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.usize_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.usize_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))) 256))))))))))))))) :pattern ((verismo!tspec.stream.basic.usize_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%11::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%11.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%11.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))) 256)))))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::impl&%4::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to.))
(declare-fun %%lambda%%10 (Dcr Type Poly Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) i$) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$)))) :pattern ((%%apply%%0 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) i$)))))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%10 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::spec_psize")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_psize.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_psize.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_psize.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 7))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_psize.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_psize.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_psize.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::spec_present")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_present.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_present.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_present.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_present.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_present.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_present.? self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec_e::array::Array::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant_to.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self! vmpl!) (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. T&. T&) (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) vmpl!)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))))))
(set-info :comment ";; Function-Axioms verismo::tspec_e::array::Array::wf")
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self!) (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::wf")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%1.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%1.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.) self!) (B (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& $ TYPE%tuple%0. self!))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.)) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.))))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::spec_page")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_page.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_page.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_page.? self!) (let ((mask$ (uClip 64 549755813887))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 12))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_page.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_page.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_page.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_new")
(assert (forall ((present! Poly) (write! Poly) (supervisor! Poly) (pwt! Poly) (pcd! Poly) (accessed! Poly) (dirty! Poly) (psize! Poly) (global! Poly) (bit12! Poly) (encrypted! Poly) (page! Poly) (nx! Poly)) (! (=> (and (has_type present! (UINT 64)) (has_type write! (UINT 64)) (has_type supervisor! (UINT 64)) (has_type pwt! (UINT 64)) (has_type pcd! (UINT 64)) (has_type accessed! (UINT 64)) (has_type dirty! (UINT 64)) (has_type psize! (UINT 64)) (has_type global! (UINT 64)) (has_type bit12! (UINT 64)) (has_type encrypted! (UINT 64)) (has_type page! (UINT 64)) (has_type nx! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_present")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_present.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_present.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_present.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/present (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_present.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_present.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_present.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_write")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_write.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_write.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_write.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/write (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_write.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_write.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_write.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_supervisor")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_supervisor.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_supervisor.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_pwt")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_pwt.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_pwt.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_pwt.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_pcd")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_pcd.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_pcd.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_pcd.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_accessed")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_accessed.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_accessed.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_accessed.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_dirty")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_dirty.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_dirty.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_dirty.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_psize")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_psize.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_psize.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_psize.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/psize (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_psize.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_psize.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_psize.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_global")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_global.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_global.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_global.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/global (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_global.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_global.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_global.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_bit12")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_bit12.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_bit12.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_bit12.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_encrypted")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_encrypted.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_encrypted.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_page")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_page.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_page.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_page.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/page (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_page.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_page.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_page.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_nx")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_nx.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_nx.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_nx.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/nx (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_nx.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_nx.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))))
(set-info :comment ";; Function-Specs verismo::pgtable_e::def::SpecPTE::axiom_spec_new")
(declare-fun ens%verismo!pgtable_e.def.impl&%2.axiom_spec_new. (Int Int Int Int Int Int Int Int Int Int Int Int Int) Bool)
(assert (forall ((present! Int) (write! Int) (supervisor! Int) (pwt! Int) (pcd! Int) (accessed! Int) (dirty! Int) (psize! Int) (global! Int) (bit12! Int) (encrypted! Int) (page! Int) (nx! Int)) (! (= (ens%verismo!pgtable_e.def.impl&%2.axiom_spec_new. present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!) (and (= (verismo!pgtable_e.def.impl&%0.spec_present.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) present!) (= (verismo!pgtable_e.def.impl&%0.spec_write.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) write!) (= (verismo!pgtable_e.def.impl&%0.spec_supervisor.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) supervisor!) (= (verismo!pgtable_e.def.impl&%0.spec_pwt.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) pwt!) (= (verismo!pgtable_e.def.impl&%0.spec_pcd.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) pcd!) (= (verismo!pgtable_e.def.impl&%0.spec_accessed.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) accessed!) (= (verismo!pgtable_e.def.impl&%0.spec_dirty.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) dirty!) (= (verismo!pgtable_e.def.impl&%0.spec_psize.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) psize!) (= (verismo!pgtable_e.def.impl&%0.spec_global.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) global!) (= (verismo!pgtable_e.def.impl&%0.spec_bit12.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) bit12!) (= (verismo!pgtable_e.def.impl&%0.spec_encrypted.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) encrypted!) (= (verismo!pgtable_e.def.impl&%0.spec_page.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) page!) (= (verismo!pgtable_e.def.impl&%0.spec_nx.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) nx!))) :pattern ((ens%verismo!pgtable_e.def.impl&%2.axiom_spec_new. present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!)))))
(set-info :comment ";; Broadcast verismo::pgtable_e::def::SpecPTE::axiom_spec_new")
(assert (forall ((present! Poly) (write! Poly) (supervisor! Poly) (pwt! Poly) (pcd! Poly) (accessed! Poly) (dirty! Poly) (psize! Poly) (global! Poly) (bit12! Poly) (encrypted! Poly) (page! Poly) (nx! Poly)) (! (=> (and (has_type present! (UINT 64)) (has_type write! (UINT 64)) (has_type supervisor! (UINT 64)) (has_type pwt! (UINT 64)) (has_type pcd! (UINT 64)) (has_type accessed! (UINT 64)) (has_type dirty! (UINT 64)) (has_type psize! (UINT 64)) (has_type global! (UINT 64)) (has_type bit12! (UINT 64)) (has_type encrypted! (UINT 64)) (has_type page! (UINT 64)) (has_type nx! (UINT 64))) (and (and (and (and (and (and (and (and (and (and (and (and (= (verismo!pgtable_e.def.impl&%0.spec_present.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I present!)) (= (verismo!pgtable_e.def.impl&%0.spec_write.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I write!))) (= (verismo!pgtable_e.def.impl&%0.spec_supervisor.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I supervisor!))) (= (verismo!pgtable_e.def.impl&%0.spec_pwt.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I pwt!))) (= (verismo!pgtable_e.def.impl&%0.spec_pcd.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I pcd!))) (= (verismo!pgtable_e.def.impl&%0.spec_accessed.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I accessed!))) (= (verismo!pgtable_e.def.impl&%0.spec_dirty.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I dirty!))) (= (verismo!pgtable_e.def.impl&%0.spec_psize.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I psize!))) (= (verismo!pgtable_e.def.impl&%0.spec_global.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I global!))) (= (verismo!pgtable_e.def.impl&%0.spec_bit12.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I bit12!))) (= (verismo!pgtable_e.def.impl&%0.spec_encrypted.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I encrypted!))) (= (verismo!pgtable_e.def.impl&%0.spec_page.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I page!))) (= (verismo!pgtable_e.def.impl&%0.spec_nx.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I nx!)))) :pattern ((verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::new")
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%3.new.? val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%3.new.? val!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_set_nx")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_nx.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_nx.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_nx.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) val!)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_nx.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_nx.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_nx.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_set_page")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_page.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_page.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_page.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_page.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_page.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_page.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_set_encrypted")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_encrypted.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_encrypted.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_set_bit12")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_bit12.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_bit12.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_bit12.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_bit12.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_bit12.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_bit12.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_set_global")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_global.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_global.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_global.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_global.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_global.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_global.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_set_psize")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_psize.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_psize.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_psize.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_psize.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_psize.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_psize.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_set_dirty")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_dirty.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_dirty.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_dirty.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_dirty.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_dirty.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_dirty.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_set_accessed")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_accessed.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_accessed.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_accessed.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_accessed.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_accessed.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_accessed.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_set_pcd")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_pcd.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_pcd.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_pcd.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_pcd.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_pcd.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_pcd.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_set_pwt")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_pwt.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_pwt.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_pwt.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_pwt.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_pwt.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_pwt.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_set_supervisor")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_supervisor.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_supervisor.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_set_write")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_write.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_write.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_write.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_write.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_write.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_write.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::spec_set_present")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_present.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_present.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_present.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? val! (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_present.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_present.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_present.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::spec_write")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_write.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_write.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_write.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 1))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_write.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_write.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_write.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::spec_supervisor")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_supervisor.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_supervisor.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_supervisor.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 2))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_supervisor.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_supervisor.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_supervisor.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::spec_pwt")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_pwt.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_pwt.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_pwt.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 3))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_pwt.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_pwt.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_pwt.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::spec_pcd")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_pcd.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_pcd.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_pcd.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 4))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_pcd.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_pcd.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_pcd.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::spec_accessed")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_accessed.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_accessed.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_accessed.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 5))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_accessed.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_accessed.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_accessed.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::spec_dirty")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_dirty.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_dirty.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_dirty.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 6))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_dirty.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_dirty.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_dirty.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::spec_global")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_global.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_global.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_global.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 8))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_global.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_global.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_global.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::spec_bit12")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_bit12.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_bit12.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_bit12.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 12))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_bit12.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_bit12.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_bit12.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::spec_encrypted")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_encrypted.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_encrypted.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_encrypted.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 51))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_encrypted.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_encrypted.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_encrypted.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::spec_nx")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_nx.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_nx.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_nx.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 63))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_nx.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_nx.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_nx.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::view")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.view.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.view.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.view.? self!) (verismo!pgtable_e.def.impl&%1.spec_set_nx.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_page.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_bit12.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_global.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_psize.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_dirty.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_accessed.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_pcd.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_pwt.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_write.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_present.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!pgtable_e.def.SpecPTE.) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_present.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_write.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_supervisor.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_pwt.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_pcd.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_accessed.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_dirty.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_psize.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_global.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_bit12.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_encrypted.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_page.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_nx.? self!))))) :pattern ((verismo!pgtable_e.def.impl&%16.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%16.view.? self!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%16.view.? self!)))))
(set-info :comment ";; Function-Specs verismo::pgtable_e::def::SpecPTE::axiom_new")
(declare-fun ens%verismo!pgtable_e.def.impl&%3.axiom_new. (verismo!pgtable_e.def.PTE.) Bool)
(assert (forall ((val! verismo!pgtable_e.def.PTE.)) (! (= (ens%verismo!pgtable_e.def.impl&%3.axiom_new. val!) (= (verismo!pgtable_e.def.impl&%3.new.? (I (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. (Poly%verismo!pgtable_e.def.PTE. val!))))) (verismo!pgtable_e.def.impl&%16.view.? (Poly%verismo!pgtable_e.def.PTE. val!)))) :pattern ((ens%verismo!pgtable_e.def.impl&%3.axiom_new. val!)))))
(set-info :comment ";; Broadcast verismo::pgtable_e::def::SpecPTE::axiom_new")
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!pgtable_e.def.PTE.) (= (verismo!pgtable_e.def.impl&%3.new.? (I (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. val!)))) (verismo!pgtable_e.def.impl&%16.view.? val!))) :pattern ((verismo!pgtable_e.def.impl&%3.new.? (I (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. val!)))) (verismo!pgtable_e.def.impl&%16.view.? val!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::SpecPTE::to_value")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.impl&%3.to_value.? self!)) TYPE%verismo!pgtable_e.def.PTE.)) :pattern ((verismo!pgtable_e.def.impl&%3.to_value.? self!)))))
(set-info :comment ";; Function-Specs verismo::pgtable_e::def::SpecPTE::axiom_into")
(declare-fun ens%verismo!pgtable_e.def.impl&%3.axiom_into. (verismo!pgtable_e.def.SpecPTE.) Bool)
(assert (forall ((self! verismo!pgtable_e.def.SpecPTE.)) (! (= (ens%verismo!pgtable_e.def.impl&%3.axiom_into. self!) (= (verismo!pgtable_e.def.impl&%16.view.? (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.impl&%3.to_value.? (Poly%verismo!pgtable_e.def.SpecPTE. self!)))) self!)) :pattern ((ens%verismo!pgtable_e.def.impl&%3.axiom_into. self!)))))
(set-info :comment ";; Broadcast verismo::pgtable_e::def::SpecPTE::axiom_into")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (= (verismo!pgtable_e.def.impl&%16.view.? (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.impl&%3.to_value.? self!))) (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%3.to_value.? self!)))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::inv")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.inv.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.inv.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 9223372036854775807)))) :pattern ((verismo!pgtable_e.def.impl&%16.inv.? self!))))))
(set-info :comment ";; Function-Specs verismo::pgtable_e::def::PTE::axiom_inv")
(declare-fun ens%verismo!pgtable_e.def.impl&%16.axiom_inv. (verismo!pgtable_e.def.PTE.) Bool)
(assert (forall ((self! verismo!pgtable_e.def.PTE.)) (! (= (ens%verismo!pgtable_e.def.impl&%16.axiom_inv. self!) (and (verismo!pgtable_e.def.impl&%16.inv.? (Poly%verismo!pgtable_e.def.PTE. self!)) (let ((tmp%%$ (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. (Poly%verismo!pgtable_e.def.PTE. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 9223372036854775807))))) :pattern ((ens%verismo!pgtable_e.def.impl&%16.axiom_inv. self!)))))
(set-info :comment ";; Broadcast verismo::pgtable_e::def::PTE::axiom_inv")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (and (verismo!pgtable_e.def.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 9223372036854775807))))) :pattern ((verismo!pgtable_e.def.impl&%16.inv.? self!) (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%5::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%5.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%5.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 64) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%6::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%6.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%6.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 64) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 64) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%5::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%5.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%5.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 64) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 64) self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::registers::msr_perm_s::RegisterPermValue::wf")
(assert (fuel_bool_default fuel%verismo!registers.msr_perm_s.impl&%1.wf.))
(assert (=> (fuel_bool fuel%verismo!registers.msr_perm_s.impl&%1.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!registers.msr_perm_s.impl&%1.wf.? T&. T& self!) (and (=> (verismo!registers.msr_perm_s.impl&%0.shared.? T&. T& self!) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& (verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& (verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!))))) :pattern ((verismo!registers.msr_perm_s.impl&%1.wf.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::registers::core_perm_s::CoreMode::spec_new")
(assert (forall ((cpu! Poly) (run! Poly) (vmpl! Poly) (count! Poly) (sent_ghcb_msrs! Poly) (sent_mem! Poly)) (! (=> (and (has_type cpu! NAT) (has_type run! BOOL) (has_type vmpl! NAT) (has_type count! NAT) (has_type sent_ghcb_msrs! (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT))) (has_type sent_mem! (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))) (has_type (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!)) TYPE%verismo!registers.core_perm_s.CoreMode.)) :pattern ((verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!)))))
(set-info :comment ";; Function-Axioms verismo::registers::core_perm_s::CoreMode::spec_cpu")
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_cpu.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_cpu.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_cpu.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_cpu.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.impl&%0.spec_cpu.? self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_cpu.? self!)))))
(set-info :comment ";; Function-Axioms verismo::registers::core_perm_s::CoreMode::spec_run")
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_run.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_run.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_run.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/run (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_run.? self!))))))
(set-info :comment ";; Function-Axioms verismo::registers::core_perm_s::CoreMode::spec_vmpl")
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_vmpl.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_vmpl.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_vmpl.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_vmpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.impl&%0.spec_vmpl.? self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_vmpl.? self!)))))
(set-info :comment ";; Function-Axioms verismo::registers::core_perm_s::CoreMode::spec_count")
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_count.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_count.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_count.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/count (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_count.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.impl&%0.spec_count.? self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_count.? self!)))))
(set-info :comment ";; Function-Axioms verismo::registers::core_perm_s::CoreMode::spec_sent_ghcb_msrs")
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_ghcb_msrs (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.? self!))))))
(set-info :comment ";; Function-Axioms verismo::registers::core_perm_s::CoreMode::spec_sent_mem")
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_mem.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_mem.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_sent_mem.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_mem (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_sent_mem.? self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%48::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%48.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%48.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Specs verismo::registers::core_perm_s::CoreMode::axiom_spec_new")
(declare-fun ens%verismo!registers.core_perm_s.impl&%2.axiom_spec_new. (Int Bool Int Int vstd!seq.Seq<tuple%2<nat./nat.>.>. vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.) Bool)
(assert (forall ((cpu! Int) (run! Bool) (vmpl! Int) (count! Int) (sent_ghcb_msrs! vstd!seq.Seq<tuple%2<nat./nat.>.>.) (sent_mem! vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)) (! (= (ens%verismo!registers.core_perm_s.impl&%2.axiom_spec_new. cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!) (and (= (verismo!registers.core_perm_s.impl&%0.spec_cpu.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) cpu!) (= (verismo!registers.core_perm_s.impl&%0.spec_run.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) run!) (= (verismo!registers.core_perm_s.impl&%0.spec_vmpl.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) vmpl!) (= (verismo!registers.core_perm_s.impl&%0.spec_count.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) count!) (= (verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) sent_ghcb_msrs!) (= (verismo!registers.core_perm_s.impl&%0.spec_sent_mem.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) sent_mem!))) :pattern ((ens%verismo!registers.core_perm_s.impl&%2.axiom_spec_new. cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!)))))
(set-info :comment ";; Broadcast verismo::registers::core_perm_s::CoreMode::axiom_spec_new")
(assert (forall ((cpu! Poly) (run! Poly) (vmpl! Poly) (count! Poly) (sent_ghcb_msrs! Poly) (sent_mem! Poly)) (! (=> (and (has_type cpu! NAT) (has_type run! BOOL) (has_type vmpl! NAT) (has_type count! NAT) (has_type sent_ghcb_msrs! (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT))) (has_type sent_mem! (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))) (and (and (and (and (and (= (verismo!registers.core_perm_s.impl&%0.spec_cpu.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%I cpu!)) (= (verismo!registers.core_perm_s.impl&%0.spec_run.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%B run!))) (= (verismo!registers.core_perm_s.impl&%0.spec_vmpl.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%I vmpl!))) (= (verismo!registers.core_perm_s.impl&%0.spec_count.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%I count!))) (= (verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!))) (= (verismo!registers.core_perm_s.impl&%0.spec_sent_mem.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) :pattern ((verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!)))))
(set-info :comment ";; Function-Specs verismo::registers::msr_perm_s::RegisterPerm::axiom_eq")
(declare-fun req%verismo!registers.msr_perm_s.impl&%2.axiom_eq. (Dcr Type verismo!registers.msr_perm_s.RegisterPerm. verismo!registers.msr_perm_s.RegisterPerm.) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((T&. Dcr) (T& Type) (x! verismo!registers.msr_perm_s.RegisterPerm.) (y! verismo!registers.msr_perm_s.RegisterPerm.)) (! (= (req%verismo!registers.msr_perm_s.impl&%2.axiom_eq. T&. T& x! y!) (=> %%global_location_label%%47 (= (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& (Poly%verismo!registers.msr_perm_s.RegisterPerm. x!)) (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& (Poly%verismo!registers.msr_perm_s.RegisterPerm. y!))))) :pattern ((req%verismo!registers.msr_perm_s.impl&%2.axiom_eq. T&. T& x! y!)))))
(declare-fun ens%verismo!registers.msr_perm_s.impl&%2.axiom_eq. (Dcr Type verismo!registers.msr_perm_s.RegisterPerm. verismo!registers.msr_perm_s.RegisterPerm.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (x! verismo!registers.msr_perm_s.RegisterPerm.) (y! verismo!registers.msr_perm_s.RegisterPerm.)) (! (= (ens%verismo!registers.msr_perm_s.impl&%2.axiom_eq. T&. T& x! y!) (= x! y!)) :pattern ((ens%verismo!registers.msr_perm_s.impl&%2.axiom_eq. T&. T& x! y!)))))
(set-info :comment ";; Broadcast verismo::registers::msr_perm_s::RegisterPerm::axiom_eq")
(assert (forall ((T&. Dcr) (T& Type) (x! Poly) (y! Poly)) (! (=> (and (has_type x! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (has_type y! TYPE%verismo!registers.msr_perm_s.RegisterPerm.)) (=> (= (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& x!) (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& y!)) (= x! y!))) :pattern ((verismo!registers.msr_perm_s.impl&%2.view.? T&. T& x!) (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& y!)) :pattern ((verismo!registers.msr_perm_s.impl&%2.view.? T&. T& x!) (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& y!)))))
(set-info :comment ";; Function-Specs verismo::registers::msr_perm_s::RegisterPerm::axiom_wf")
(declare-fun ens%verismo!registers.msr_perm_s.impl&%2.axiom_wf. (Dcr Type verismo!registers.msr_perm_s.RegisterPerm.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!registers.msr_perm_s.RegisterPerm.)) (! (= (ens%verismo!registers.msr_perm_s.impl&%2.axiom_wf. T&. T& self!) (= (verismo!registers.msr_perm_s.impl&%2.wf.? (Poly%verismo!registers.msr_perm_s.RegisterPerm. self!)) (verismo!registers.msr_perm_s.impl&%1.wf.? T&. T& (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& (Poly%verismo!registers.msr_perm_s.RegisterPerm. self!)))))) :pattern ((ens%verismo!registers.msr_perm_s.impl&%2.axiom_wf. T&. T& self!)))))
(set-info :comment ";; Broadcast verismo::registers::msr_perm_s::RegisterPerm::axiom_wf")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (=> (and (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&)) (= (verismo!registers.msr_perm_s.impl&%2.wf.? self!) (verismo!registers.msr_perm_s.impl&%1.wf.? T&. T& (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!)))))) :pattern ((verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%62::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%62.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%62.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%708::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%709::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%70.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%70.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT SZ)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%64::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%64.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%64.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms core::option::Option::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%0.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%0.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%core!option.Option. T&. T&) self!) (B (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%core!option.Option. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms core::option::Option::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%0.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%0.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%core!option.Option. T&. T&) self! vmpl!) (B (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%core!option.Option. T&. T&) self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Function-Axioms core::option::Option::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%3.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%3.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%core!option.Option. T&. T&) self!) (B (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%core!option.Option. T&. T&) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%23::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%23.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%23.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%484::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%485::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%24::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%24.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%24.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%488::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%489::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%492::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%493::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%496::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%497::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%500::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%501::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%504::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%505::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%17::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%17.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%17.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%508::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%509::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%512::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%513::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%31::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%31.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%31.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%538::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%539::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%32::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%32.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%32.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%542::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%543::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%546::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%547::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%550::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%551::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%554::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%555::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%26::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%26.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%26.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%558::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%559::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%562::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%563::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%566::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%567::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%39::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%39.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%39.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%592::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%593::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%40::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%40.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%40.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%596::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%597::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%600::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%601::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%604::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%605::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%35::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%35.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%35.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%608::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%609::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%612::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%613::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%616::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%617::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%620::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%621::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%646::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%647::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%650::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%651::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%654::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%655::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%658::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%659::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%662::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%663::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%666::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%667::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%670::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%671::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%674::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%675::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%700::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%701::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%704::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%705::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%712::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%713::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%716::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%717::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%720::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%721::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%724::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%725::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%728::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%729::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%79.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%79.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%80.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%80.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%78.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%78.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%76.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%76.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%75.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%75.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%74.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%74.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%73.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%73.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%71.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%71.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%68.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%68.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%67.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%67.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%66.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%66.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%65.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%65.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::bool_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.bool_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.bool_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.bool_to_stream.? data!) (verismo!tspec.stream.basic.u8_to_stream.? (I (ite (%B data!) 1 0)))) :pattern ((verismo!tspec.stream.basic.bool_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::char_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.char_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.char_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.char_to_stream.? data!) (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (char%to_unicode (%C data!)))))) :pattern ((verismo!tspec.stream.basic.char_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::u128_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u128_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u128_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u128_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))) 256))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296)))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296)))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296))))) 65536))))) 256)))))))))))))))))) :pattern ((verismo!tspec.stream.basic.u128_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::boot::idt::def::Idtr::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%21.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%21.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.idt.def.Idtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/limit (%Poly%verismo!boot.idt.def.Idtr. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/base (%Poly%verismo!boot.idt.def.Idtr. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.idt.def.Idtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::boot::idt::def::Idtr::spec_size_def")
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%22.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%22.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.idt.def.Idtr.) (I (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))))))
(set-info :comment ";; Function-Axioms verismo::boot::idt::def::Idtr::is_constant_to")
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%25.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%25.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.idt.def.Idtr. self! vmpl!) (B (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/limit (%Poly%verismo!boot.idt.def.Idtr. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/limit (%Poly%verismo!boot.idt.def.Idtr. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/base (%Poly%verismo!boot.idt.def.Idtr. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/base (%Poly%verismo!boot.idt.def.Idtr. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.idt.def.Idtr. self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::spec_set_vmpl")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_vmpl.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_vmpl.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_vmpl.? self! val!) (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? self!)) val! (I (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!)) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? self!)))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%1.spec_set_vmpl.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type val! NAT)) (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_vmpl.? self! val!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)) :pattern ((verismo!registers.trackedcore.snpcore.impl&%1.spec_set_vmpl.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::spec_set_cpu")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_cpu.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%1.spec_set_cpu.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_cpu.? self! val!) (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? self!)) (I (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!)) val! (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? self!)))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%1.spec_set_cpu.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type val! NAT)) (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_cpu.? self! val!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)) :pattern ((verismo!registers.trackedcore.snpcore.impl&%1.spec_set_cpu.? self! val!)))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::update_reg_coremode")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.update_reg_coremode.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.update_reg_coremode.) (forall ((self! Poly) (prev! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.update_reg_coremode.? self! prev!) (= (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!) (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_coreid.? prev! (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))))) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.update_reg_coremode.? self! prev!))))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::ghcb_value")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.ghcb_value.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.ghcb_value.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.ghcb_value.? self!) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) (Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName./MSR (%I (I verismo!arch.reg.MSR_GHCB_BASE.?)))))))))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.ghcb_value.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (uInv 64 (verismo!registers.trackedcore.snpcore.impl&%3.ghcb_value.? self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.ghcb_value.? self!)))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::last_ghcb_resp")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_resp.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_resp.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_resp.? self!) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!seq.Seq.last.? $ (TYPE%tuple%2. $ NAT $ NAT) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_ghcb_msrs (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))))))))))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_resp.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_resp.? self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.last_ghcb_resp.? self!)))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::ghcbmem_msgs")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.ghcbmem_msgs.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.ghcbmem_msgs.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.ghcbmem_msgs.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_mem (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.ghcbmem_msgs.? self!))))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::last_ghcbmem_req")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcbmem_req.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcbmem_req.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.last_ghcbmem_req.? self!) (%Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ TYPE%verismo!snp.ghcb.proto_page.GhcbPage. (tuple%3./tuple%3/1 (%Poly%tuple%3. (vstd!seq.Seq.last.? $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_mem (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))))))))))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.last_ghcbmem_req.? self!))))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::last_ghcbmem_resp")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcbmem_resp.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.last_ghcbmem_resp.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.last_ghcbmem_resp.? self!) (%Poly%verismo!snp.ghcb.proto_page.GhcbPage. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ TYPE%verismo!snp.ghcb.proto_page.GhcbPage. (tuple%3./tuple%3/2 (%Poly%tuple%3. (vstd!seq.Seq.last.? $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_mem (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))))))))))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.last_ghcbmem_resp.? self!))))))
(set-info :comment ";; Function-Axioms verismo::registers::trackedcore::snpcore::SnpCore::only_reg_updated")
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_updated.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.only_reg_updated.) (forall ((self! Poly) (prev! Poly) (regs! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.only_reg_updated.? self! prev! regs!) (and (and (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? self! prev! regs!) (=> (vstd!set_lib.impl&%0.is_empty.? $ TYPE%verismo!arch.reg.RegName. regs!) (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. prev!))))) (= (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!) (verismo!registers.trackedcore.snpcore.impl&%1.spec_set_regs.? prev! (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.only_reg_updated.? self! prev! regs!))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_size_def")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (I 8))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7::is_constant")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%13.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%13.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7::is_constant_to")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%13.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%13.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7::wf")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%14.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%14.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr0_7::spec_new")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_new.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_new.) (forall ((val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_new.? val!) (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7 (%I val!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.impl&%16.spec_new.? val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_new.? val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11::spec_size_def")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%28.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%28.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (I 8))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11::is_constant")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%30.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%30.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11::is_constant_to")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%30.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%30.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11::wf")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%31.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%31.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::DescriptorAttr8_11::spec_new")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.spec_new.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.spec_new.) (forall ((val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.spec_new.? val!) (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11 (%I val!))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.impl&%33.spec_new.? val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_new.? val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Descriptor::spec_size_def")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%45.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%45.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.gdt.Descriptor.) (I 8))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Descriptor::is_constant")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%47.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%47.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Descriptor::is_constant_to")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%47.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%47.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Descriptor::wf")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%48.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%48.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Descriptor::spec_new")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_new.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_new.) (forall ((val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_new.? val!) (verismo!snp.cpu.gdt.Descriptor./Descriptor (%I val!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.impl&%50.spec_new.? val!)) TYPE%verismo!snp.cpu.gdt.Descriptor.)) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_new.? val!)))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Gdtr::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%56.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%56.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/base (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Gdtr::spec_size_def")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%57.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%57.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.gdt.Gdtr.) (I (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))))))
(set-info :comment ";; Function-Axioms verismo::snp::cpu::gdt::Gdtr::is_constant_to")
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%60.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%60.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self! vmpl!) (B (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (%Poly%verismo!snp.cpu.gdt.Gdtr. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/base (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/base (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%6::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%6.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%6.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 32) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%6::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%6.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%6.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 32) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 32) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%7::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%7.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%7.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 32) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::impl&%7::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%10 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::impl&%6::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%10 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::wf")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%59.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%59.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. self!) (B (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 203)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_0 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 8) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/cpl (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 300)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rax (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 264)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rcx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rdx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rbx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved3 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/r8 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 72)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved4 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_code (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_1 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_scratch (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved5 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/guest_error_code (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_6 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/xcr0 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::is_constant")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%60.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%60.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. self!) (B (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 203)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_0 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/cpl (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 300)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rax (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 264)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rcx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rdx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rbx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved3 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/r8 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 72)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved4 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_code (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_1 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_scratch (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved5 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/guest_error_code (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_6 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/xcr0 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. self!))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbVmsa::is_constant_to")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%60.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%60.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. self! vmpl!) (B (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 203)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_0 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) vmpl!)) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/cpl (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/cpl (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 300)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rax (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rax (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 264)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rcx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rcx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rdx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rdx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rbx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/rbx (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved3 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/r8 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/r8 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 72)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved4 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_code (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_code (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_1 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_1 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_exit_info_2 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_scratch (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/sw_scratch (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved5 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/guest_error_code (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/guest_error_code (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 32)) (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/reserved_6 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/xcr0 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.ghcb.proto_page.GhcbVmsa./GhcbVmsa/xcr0 (%Poly%verismo!snp.ghcb.proto_page.GhcbVmsa. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbVmsa. self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::snp::ghcb::proto_page::GhcbPage::spec_size_def")
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_page.impl&%67.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_page.impl&%67.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.ghcb.proto_page.GhcbPage.) (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 203)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 300)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 264)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 72)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 32)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 1024)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 2032)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 10)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32)))))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%9::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%9.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%9.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 8) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 8) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%2.vspec_cast_to.))
(declare-fun %%choose%%2 (Type Dcr Type Dcr Type Poly Dcr Type Dcr Type) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type)) (! (=> (exists ((ret$ Poly)) (! (and (has_type ret$ %%hole%%0) (= %%hole%%5 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 ret$))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 ret$)))) (exists ((ret$ Poly)) (! (and (and (has_type ret$ %%hole%%0) (= %%hole%%5 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 ret$))) (= (%%choose%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9) ret$)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 ret$))))) :pattern ((%%choose%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9)))))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%2.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8) self!) (as_type (%%choose%%2 (UINT 8) $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%4.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%4.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 16) self!) (as_type (%%choose%%2 (UINT 16) $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 16))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%6.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 32) self!) (as_type (%%choose%%2 (UINT 32) $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 32))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%8.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%8.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 64) self!) (as_type (%%choose%%2 (UINT 64) $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 64))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%9::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%9.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%9.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))) 256))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296)))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296)))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296))))) 65536))))) 256))))))))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%10.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%10.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 128) self!) (as_type (%%choose%%2 (UINT 128) $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 128))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%12.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%12.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT SZ) self!) (as_type (%%choose%%2 (UINT SZ) $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT SZ))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%13::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%13.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%13.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (char%to_unicode (%C self!))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%14.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%14.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ CHAR self!) (as_type (%%choose%%2 CHAR $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8))) CHAR)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ CHAR self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%15::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%15.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%15.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (ite (%B self!) 1 0))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%16.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%16.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ BOOL self!) (as_type (%%choose%%2 BOOL $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8))) BOOL)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%21::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%21.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%21.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%29::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%29.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%29.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%37::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%37.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%37.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%45::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%45.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%45.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%49::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%49.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%49.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%50::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%50.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%50.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%51::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%51.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%51.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%52::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%52.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%52.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%53::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%53.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%53.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%54::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%54.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%54.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%55::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%55.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%55.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%56::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%56.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%56.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%61::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%61.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%61.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%69.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%69.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%77.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%77.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%81::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%81.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%81.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%82::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%82.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%82.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 8) self!) (as_type (%%choose%%2 (UINT 8) $ (UINT 8) $ BOOL self! $ (UINT 8) $ BOOL) (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%83::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%83.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%83.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%84::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%84.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%84.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 16) self!) (as_type (%%choose%%2 (UINT 16) $ (UINT 16) $ BOOL self! $ (UINT 16) $ BOOL) (UINT 16))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%85::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%85.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%85.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%86::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%86.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%86.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 32) self!) (as_type (%%choose%%2 (UINT 32) $ (UINT 32) $ BOOL self! $ (UINT 32) $ BOOL) (UINT 32))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%87::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%87.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%87.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%88::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%88.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%88.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 64) self!) (as_type (%%choose%%2 (UINT 64) $ (UINT 64) $ BOOL self! $ (UINT 64) $ BOOL) (UINT 64))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%89::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%89.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%89.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%90::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%90.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%90.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 128) self!) (as_type (%%choose%%2 (UINT 128) $ (UINT 128) $ BOOL self! $ (UINT 128) $ BOOL) (UINT 128))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%91::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%91.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%91.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%92::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%92.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%92.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT SZ) self!) (as_type (%%choose%%2 (UINT SZ) $ (UINT SZ) $ BOOL self! $ (UINT SZ) $ BOOL) (UINT SZ))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%93.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%93.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%94::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%94.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%94.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ INT self!) (as_type (%%choose%%2 INT $ INT $ BOOL self! $ INT $ BOOL) INT)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ INT self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%95.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%95.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%96::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%96.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%96.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ NAT self!) (as_type (%%choose%%2 NAT $ NAT $ BOOL self! $ NAT $ BOOL) NAT)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%97::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%97.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%97.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (UINT 8) self!) (I (uClip 8 (char%to_unicode (%C self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%98::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%98.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%98.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms builtin::Ghost::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%99.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%99.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%100.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%100.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%101.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%101.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%2::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%2.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%2.is_constant_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self! vmpl!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T1&. T1& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)) vmpl!)) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T2&. T2& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self! vmpl!))))))
(set-info :comment ";; Function-Axioms builtin::Ghost::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%3.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%3.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? (GHOST T&.) T& self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? (GHOST T&.) T& self!))))))
(set-info :comment ";; Function-Axioms builtin::Ghost::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%3.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%3.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? (GHOST T&.) T& self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? (GHOST T&.) T& self! vmpl!))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%4.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%4.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? (TRACKED T&.) T& self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? (TRACKED T&.) T& self!))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%4.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%4.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? (TRACKED T&.) T& self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? (TRACKED T&.) T& self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%7::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%7.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%7.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 16) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%7::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%7.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%7.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 16) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 16) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%9::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%9.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%9.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 8) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 8) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%10::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%10.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%10.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ BOOL self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%10::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%10.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%10.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ BOOL self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ BOOL self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%11::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%11.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%11.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ CHAR self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ CHAR self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%11::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%11.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%11.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ CHAR self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ CHAR self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%9::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%9.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%9.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 128)) (I 16))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%14::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%14.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%14.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ BOOL) (I 1))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%15::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%15.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%15.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ CHAR) (I 1))))
(set-info :comment ";; Function-Axioms builtin::Ghost::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%17.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%17.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? (GHOST T&.) T&) (I 0)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? (GHOST T&.) T&))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%18.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%18.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? (TRACKED T&.) T&) (I 0)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? (TRACKED T&.) T&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%1::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%1.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%1.wf.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!) (B (and (%B (verismo!tspec.wellformed.WellFormed.wf.? T1&. T1& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T2&. T2& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%2::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%2.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%2.wf.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%tuple%3. T1&. T1& T2&. T2& T3&. T3&) self!) (B (and (and (%B (verismo!tspec.wellformed.WellFormed.wf.? T1&. T1& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T2&. T2& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T3&. T3& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%tuple%3. T1&. T1& T2&. T2& T3&. T3&) self!))))))
(set-info :comment ";; Function-Axioms builtin::Ghost::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%4.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%4.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? (GHOST T&.) T& self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? (GHOST T&.) T& self!))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%5.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%5.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? (TRACKED T&.) T& self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? (TRACKED T&.) T& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%8::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%8.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%8.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 16) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%10::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%10.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%10.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 8) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%11::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%11.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%11.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ BOOL self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%12::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%12.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%12.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ CHAR self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ CHAR self!))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::impl&%3::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%10 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::impl&%5::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%10 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::spec_size_def")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!pgtable_e.def.PTE.) (I 8))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::is_constant")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%13.is_constant.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%13.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!pgtable_e.def.PTE. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!pgtable_e.def.PTE. self!))))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::is_constant_to")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%13.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%13.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!pgtable_e.def.PTE. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!pgtable_e.def.PTE. self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::wf")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%14.wf.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%14.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!pgtable_e.def.PTE. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!pgtable_e.def.PTE. self!))))))
(set-info :comment ";; Function-Axioms verismo::pgtable_e::def::PTE::spec_new")
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_new.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_new.) (forall ((val! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_new.? val!) (verismo!pgtable_e.def.PTE./PTE (%I val!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.impl&%16.spec_new.? val!)) TYPE%verismo!pgtable_e.def.PTE.)) :pattern ((verismo!pgtable_e.def.impl&%16.spec_new.? val!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ CHAR $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T1&. T1&) (tr_bound%verismo!tspec.isconst.IsConstant. T2&. T2&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. (GHOST T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. (TRACKED T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.security.sectype.SecMemType. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M&) :pattern ((tr_bound%verismo!tspec.security.sectype.SecMemType. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T1&. T1& T2&. T2&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T1&. T1& T2&. T2&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.size_s.SpecSize. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. (GHOST T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.size_s.SpecSize. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. (TRACKED T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%core!option.Option. T&. T&)) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (=> (and (tr_bound%verismo!tspec.wellformed.WellFormed. T1&. T1&) (tr_bound%verismo!tspec.wellformed.WellFormed. T2&. T2&)) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type)) (! (=> (and (tr_bound%verismo!tspec.wellformed.WellFormed. T1&. T1&) (tr_bound%verismo!tspec.wellformed.WellFormed. T2&. T2&) (tr_bound%verismo!tspec.wellformed.WellFormed. T3&. T3&)) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%tuple%3. T1&. T1& T2&. T2& T3&. T3&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%tuple%3. T1&. T1& T2&. T2& T3&. T3&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. (GHOST T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. (TRACKED T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (tr_bound%verismo!primitives_e.sectype.FromSecSeq. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)) :pattern ((tr_bound%verismo!primitives_e.sectype.FromSecSeq. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!boot.idt.def.Idtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!boot.idt.def.Idtr.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!boot.idt.def.Idtr.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!boot.idt.def.Idtr.))
(set-info :comment ";; Function-Specs verismo::registers::trackedcore::snpcore::SnpCore::lemma_regs_update_auto")
(declare-fun ens%verismo!registers.trackedcore.snpcore.impl&%3.lemma_regs_update_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!registers.trackedcore.snpcore.impl&%3.lemma_regs_update_auto. no%param) (forall ((prev$ Poly) (cur$ Poly) (next$ Poly) (regs1$ Poly) (regs2$ Poly)) (! (=> (and (has_type prev$ TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type cur$ TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type next$ TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type regs1$ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.)) (has_type regs2$ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.))) (=> (and (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? cur$ prev$ regs1$) (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? next$ cur$ regs2$)) (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? next$ prev$ (vstd!set.impl&%0.union.? $ TYPE%verismo!arch.reg.RegName. regs1$ regs2$)))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? cur$ prev$ regs1$) (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? next$ cur$ regs2$))))) :pattern ((ens%verismo!registers.trackedcore.snpcore.impl&%3.lemma_regs_update_auto. no%param)))))
(set-info :comment ";; Function-Def verismo::registers::trackedcore::snpcore::SnpCore::lemma_regs_update_auto")
(set-info :comment ";; verismo/src/registers/trackedcore/snpcore.rs:109:5: 109:42 (#0)")
(declare-const no%param Int)
(declare-const prev@ Poly)
(declare-const cur@ Poly)
(declare-const next@ Poly)
(declare-const regs1@ Poly)
(declare-const regs2@ Poly)
(declare-const i@ Poly)
(declare-const tmp%1 Bool)
(declare-const tmp%2 Bool)
(declare-const regs@ vstd!set.Set<verismo!arch.reg.RegName.>.)
(assert fuel_defaults)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%4 Bool)
(assert (not (and (=> (has_type prev@ TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (=> (has_type cur@ TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (=> (has_type next@ TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (=> (has_type regs1@ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.)) (=> (has_type regs2@ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.)) (=> (and (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? cur@ prev@ regs1@) (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? next@ cur@ regs2@)) (=> (= regs@ (%Poly%vstd!set.Set<verismo!arch.reg.RegName.>. (vstd!set.impl&%0.union.? $ TYPE%verismo!arch.reg.RegName. regs1@ regs2@))) (and (=> (has_type i@ TYPE%verismo!arch.reg.RegName.) (=> (not (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.reg.RegName. (Poly%vstd!set.Set<verismo!arch.reg.RegName.>. regs@) i@)) (=> (= tmp%1 (not (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.reg.RegName. regs1@ i@))) (and (=> %%location_label%%0 tmp%1) (=> tmp%1 (=> (= tmp%2 (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. cur@))) i@) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. prev@))) i@))) (and (=> %%location_label%%1 tmp%2) (=> tmp%2 (=> %%location_label%%2 (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. next@))) i@) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. prev@))) i@))))))))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ TYPE%verismo!arch.reg.RegName.) (=> (not (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.reg.RegName. (Poly%vstd!set.Set<verismo!arch.reg.RegName.>. regs@) i$)) (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. next@))) i$) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. prev@))) i$)))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. next@))) i$)))) (=> %%location_label%%3 (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? next@ prev@ (vstd!set.impl&%0.union.? $ TYPE%verismo!arch.reg.RegName. regs1@ regs2@)))))))))))) (=> (forall ((prev$ Poly) (cur$ Poly) (next$ Poly) (regs1$ Poly) (regs2$ Poly)) (! (=> (and (has_type prev$ TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type cur$ TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type next$ TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type regs1$ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.)) (has_type regs2$ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.))) (=> (and (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? cur$ prev$ regs1$) (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? next$ cur$ regs2$)) (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? next$ prev$ (vstd!set.impl&%0.union.? $ TYPE%verismo!arch.reg.RegName. regs1$ regs2$)))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? cur$ prev$ regs1$) (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? next$ cur$ regs2$)))) (=> %%location_label%%4 (forall ((prev$ Poly) (cur$ Poly) (next$ Poly) (regs1$ Poly) (regs2$ Poly)) (! (=> (and (has_type prev$ TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type cur$ TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type next$ TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (has_type regs1$ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.)) (has_type regs2$ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.reg.RegName.))) (=> (and (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? cur$ prev$ regs1$) (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? next$ cur$ regs2$)) (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? next$ prev$ (vstd!set.impl&%0.union.? $ TYPE%verismo!arch.reg.RegName. regs1$ regs2$)))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? cur$ prev$ regs1$) (verismo!registers.trackedcore.snpcore.impl&%3.reg_updated.? next$ cur$ regs2$)))))))))
(check-sat)
(exit)
