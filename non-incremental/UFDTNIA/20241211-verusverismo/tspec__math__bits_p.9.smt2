(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verismo (https://www.usenix.org/conference/osdi24/presentation/zhou) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module tspec::math::bits_p'")
(set-info :comment ";; Fuel")
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit64. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit_set. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit_clear. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_has_bit_set. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.slow_bit_range_req. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2. FuelId)
(assert (distinct fuel%verismo!tspec.math.bits_p.spec_bit64. fuel%verismo!tspec.math.bits_p.spec_bit_set. fuel%verismo!tspec.math.bits_p.spec_bit_clear. fuel%verismo!tspec.math.bits_p.spec_has_bit_set. fuel%verismo!tspec.math.bits_p.slow_bit_range_req. fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties. fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties. fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.))
(set-info :comment ";; Datatypes")
(declare-datatypes ((tuple%0. 0)) (((tuple%0./tuple%0 ))))
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(set-info :comment ";; Function-Decl verismo::tspec::math::bits_p::spec_bit64")
(declare-fun verismo!tspec.math.bits_p.spec_bit64.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::tspec::math::bits_p::spec_bit_set")
(declare-fun verismo!tspec.math.bits_p.spec_bit_set.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl verismo::tspec::math::bits_p::spec_bit_clear")
(declare-fun verismo!tspec.math.bits_p.spec_bit_clear.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl verismo::tspec::math::bits_p::spec_has_bit_set")
(declare-fun verismo!tspec.math.bits_p.spec_has_bit_set.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::math::bits_p::slow_bit_range_req")
(declare-fun verismo!tspec.math.bits_p.slow_bit_range_req.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::math::bits_p::spec_bit64_or_properties")
(declare-fun verismo!tspec.math.bits_p.spec_bit64_or_properties.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::math::bits_p::spec_bit64_not_properties")
(declare-fun verismo!tspec.math.bits_p.spec_bit64_not_properties.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::math::pow_s::spec_bit64_is_pow_of_2")
(declare-fun verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? (Poly) Bool)
(set-info :comment ";; Function-Axioms verismo::tspec::math::bits_p::spec_bit_set")
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit_set.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit_set.) (forall ((val! Poly) (bit! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit_set.? val! bit!) (uClip 64 (uintor 64 (I (%I val!)) (I (uClip 64 (uintshl 64 (I 1) (I (%I bit!)))))))) :pattern ((verismo!tspec.math.bits_p.spec_bit_set.? val! bit!))))))
(assert (forall ((val! Poly) (bit! Poly)) (! (=> (and (has_type val! (UINT 64)) (has_type bit! (UINT 64))) (uInv 64 (verismo!tspec.math.bits_p.spec_bit_set.? val! bit!))) :pattern ((verismo!tspec.math.bits_p.spec_bit_set.? val! bit!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::bits_p::spec_has_bit_set")
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_has_bit_set.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_has_bit_set.) (forall ((val! Poly) (bit! Poly)) (! (= (verismo!tspec.math.bits_p.spec_has_bit_set.? val! bit!) (= (uClip 64 (uintshl 64 (I 1) (I (%I bit!)))) (uClip 64 (uintand 64 (I (%I val!)) (I (uClip 64 (uintshl 64 (I 1) (I (%I bit!))))))))) :pattern ((verismo!tspec.math.bits_p.spec_has_bit_set.? val! bit!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::pow_s::spec_bit64_is_pow_of_2")
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.) (forall ((val! Poly)) (! (= (verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? val!) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I val!) 1) (= (%I val!) 2)) (= (%I val!) 4)) (= (%I val!) 8)) (= (%I val!) 16)) (= (%I val!) 32)) (= (%I val!) 64)) (= (%I val!) 128)) (= (%I val!) 256)) (= (%I val!) 512)) (= (%I val!) 1024)) (= (%I val!) 2048)) (= (%I val!) 4096)) (= (%I val!) 8192)) (= (%I val!) 16384)) (= (%I val!) 32768)) (= (%I val!) 65536)) (= (%I val!) 131072)) (= (%I val!) 262144)) (= (%I val!) 524288)) (= (%I val!) 1048576)) (= (%I val!) 2097152)) (= (%I val!) 4194304)) (= (%I val!) 8388608)) (= (%I val!) 16777216)) (= (%I val!) 33554432)) (= (%I val!) 67108864)) (= (%I val!) 134217728)) (= (%I val!) 268435456)) (= (%I val!) 536870912)) (= (%I val!) 1073741824)) (= (%I val!) 2147483648)) (= (%I val!) 4294967296)) (= (%I val!) 8589934592)) (= (%I val!) 17179869184)) (= (%I val!) 34359738368)) (= (%I val!) 68719476736)) (= (%I val!) 137438953472)) (= (%I val!) 274877906944)) (= (%I val!) 549755813888)) (= (%I val!) 1099511627776)) (= (%I val!) 2199023255552)) (= (%I val!) 4398046511104)) (= (%I val!) 8796093022208)) (= (%I val!) 17592186044416)) (= (%I val!) 35184372088832)) (= (%I val!) 70368744177664)) (= (%I val!) 140737488355328)) (= (%I val!) 281474976710656)) (= (%I val!) 562949953421312)) (= (%I val!) 1125899906842624)) (= (%I val!) 2251799813685248)) (= (%I val!) 4503599627370496)) (= (%I val!) 9007199254740992)) (= (%I val!) 18014398509481984)) (= (%I val!) 36028797018963968)) (= (%I val!) 72057594037927936)) (= (%I val!) 144115188075855872)) (= (%I val!) 288230376151711744)) (= (%I val!) 576460752303423488)) (= (%I val!) 1152921504606846976)) (= (%I val!) 2305843009213693952)) (= (%I val!) 4611686018427387904)) (= (%I val!) 9223372036854775808))) :pattern ((verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? val!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::bits_p::spec_bit64")
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit64.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit64.) (forall ((val! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit64.? val!) (uClip 64 (uintshl 64 (I 1) (I (%I val!))))) :pattern ((verismo!tspec.math.bits_p.spec_bit64.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (uInv 64 (verismo!tspec.math.bits_p.spec_bit64.? val!))) :pattern ((verismo!tspec.math.bits_p.spec_bit64.? val!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::bits_p::spec_bit_clear")
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit_clear.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit_clear.) (forall ((val! Poly) (bit! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit_clear.? val! bit!) (uClip 64 (uintand 64 (I (%I val!)) (I (uClip 64 (uintnot 64 (I (uClip 64 (uintshl 64 (I 1) (I (%I bit!))))))))))) :pattern ((verismo!tspec.math.bits_p.spec_bit_clear.? val! bit!))))))
(assert (forall ((val! Poly) (bit! Poly)) (! (=> (and (has_type val! (UINT 64)) (has_type bit! (UINT 64))) (uInv 64 (verismo!tspec.math.bits_p.spec_bit_clear.? val! bit!))) :pattern ((verismo!tspec.math.bits_p.spec_bit_clear.? val! bit!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::bits_p::slow_bit_range_req")
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.slow_bit_range_req.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.slow_bit_range_req.) (forall ((bits! Poly)) (! (= (verismo!tspec.math.bits_p.slow_bit_range_req.? bits!) (or (or (= (%I bits!) 2) (= (%I bits!) 3)) (= (%I bits!) 12))) :pattern ((verismo!tspec.math.bits_p.slow_bit_range_req.? bits!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::bits_p::spec_bit64_or_properties")
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties.) (forall ((a! Poly) (b! Poly) (ret! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit64_or_properties.? a! b! ret!) (and (and (and (and (and (and (= (%I ret!) (uClip 64 (uintor 64 (I (%I a!)) (I (%I b!))))) (= (%I ret!) (uClip 64 (uintor 64 (I (%I b!)) (I (%I a!)))))) (and (<= 0 (%I ret!)) (<= (%I ret!) 18446744073709551615))) (= (uClip 64 (uintand 64 (I (%I ret!)) (I (%I b!)))) (%I b!))) (>= (%I ret!) (%I a!))) (>= (%I ret!) (%I b!))) (= (uClip 64 (uintand 64 (I (%I ret!)) (I (uClip 64 (uintnot 64 (I (%I b!))))))) (uClip 64 (uintand 64 (I (%I a!)) (I (uClip 64 (uintnot 64 (I (%I b!)))))))))) :pattern ((verismo!tspec.math.bits_p.spec_bit64_or_properties.? a! b! ret!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::bits_p::spec_bit64_not_properties")
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties.) (forall ((a! Poly) (ret! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit64_not_properties.? a! ret!) (and (and (and (and (= (%I ret!) (uClip 64 (uintnot 64 (I (%I a!))))) (= (uClip 64 (uintand 64 (I (%I ret!)) (I (%I a!)))) 0)) (= (%I ret!) (uClip 64 (Sub 18446744073709551615 (%I a!))))) (and (<= 0 (%I ret!)) (<= (%I ret!) 18446744073709551615))) (= (uClip 64 (uintnot 64 (I (%I ret!)))) (%I a!)))) :pattern ((verismo!tspec.math.bits_p.spec_bit64_not_properties.? a! ret!))))))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_shl_auto")
(declare-fun ens%verismo!tspec.math.bits_p.bit64_shl_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_shl_auto. no%param) (and (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintshl 64 (I (%I a$)) (I 0))) (%I a$))) :pattern ((uClip 64 (uintshl 64 (I (%I a$)) (I 0)))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (=> (< (%I a$) 64) (> (uClip 64 (uintshl 64 (I 1) (I (%I a$)))) 0))) :pattern ((uClip 64 (uintshl 64 (I 1) (I (%I a$))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (=> (< (%I b$) 64) (or (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintshl 64 (I 1) (I (%I b$))))))) (uClip 64 (uintshl 64 (I 1) (I (%I b$))))) (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintshl 64 (I 1) (I (%I b$))))))) 0)))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintshl 64 (I 1) (I (%I b$)))))))))) (=> (< 0 64) (= (uClip 64 (uintshl 64 (I 1) (I 0))) 1)) (=> (< 1 64) (= (uClip 64 (uintshl 64 (I 1) (I 1))) 2)) (=> (< 2 64) (= (uClip 64 (uintshl 64 (I 1) (I 2))) 4)) (=> (< 3 64) (= (uClip 64 (uintshl 64 (I 1) (I 3))) 8)) (=> (< 4 64) (= (uClip 64 (uintshl 64 (I 1) (I 4))) 16)) (=> (< 5 64) (= (uClip 64 (uintshl 64 (I 1) (I 5))) 32)) (=> (< 6 64) (= (uClip 64 (uintshl 64 (I 1) (I 6))) 64)) (=> (< 7 64) (= (uClip 64 (uintshl 64 (I 1) (I 7))) 128)) (=> (< 8 64) (= (uClip 64 (uintshl 64 (I 1) (I 8))) 256)) (=> (< 9 64) (= (uClip 64 (uintshl 64 (I 1) (I 9))) 512)) (=> (< 10 64) (= (uClip 64 (uintshl 64 (I 1) (I 10))) 1024)) (=> (< 11 64) (= (uClip 64 (uintshl 64 (I 1) (I 11))) 2048)) (=> (< 12 64) (= (uClip 64 (uintshl 64 (I 1) (I 12))) 4096)) (=> (< 13 64) (= (uClip 64 (uintshl 64 (I 1) (I 13))) 8192)) (=> (< 14 64) (= (uClip 64 (uintshl 64 (I 1) (I 14))) 16384)) (=> (< 15 64) (= (uClip 64 (uintshl 64 (I 1) (I 15))) 32768)) (=> (< 16 64) (= (uClip 64 (uintshl 64 (I 1) (I 16))) 65536)) (=> (< 17 64) (= (uClip 64 (uintshl 64 (I 1) (I 17))) 131072)) (=> (< 18 64) (= (uClip 64 (uintshl 64 (I 1) (I 18))) 262144)) (=> (< 19 64) (= (uClip 64 (uintshl 64 (I 1) (I 19))) 524288)) (=> (< 20 64) (= (uClip 64 (uintshl 64 (I 1) (I 20))) 1048576)) (=> (< 21 64) (= (uClip 64 (uintshl 64 (I 1) (I 21))) 2097152)) (=> (< 22 64) (= (uClip 64 (uintshl 64 (I 1) (I 22))) 4194304)) (=> (< 23 64) (= (uClip 64 (uintshl 64 (I 1) (I 23))) 8388608)) (=> (< 24 64) (= (uClip 64 (uintshl 64 (I 1) (I 24))) 16777216)) (=> (< 25 64) (= (uClip 64 (uintshl 64 (I 1) (I 25))) 33554432)) (=> (< 26 64) (= (uClip 64 (uintshl 64 (I 1) (I 26))) 67108864)) (=> (< 27 64) (= (uClip 64 (uintshl 64 (I 1) (I 27))) 134217728)) (=> (< 28 64) (= (uClip 64 (uintshl 64 (I 1) (I 28))) 268435456)) (=> (< 29 64) (= (uClip 64 (uintshl 64 (I 1) (I 29))) 536870912)) (=> (< 30 64) (= (uClip 64 (uintshl 64 (I 1) (I 30))) 1073741824)) (=> (< 31 64) (= (uClip 64 (uintshl 64 (I 1) (I 31))) 2147483648)) (=> (< 32 64) (= (uClip 64 (uintshl 64 (I 1) (I 32))) 4294967296)) (=> (< 33 64) (= (uClip 64 (uintshl 64 (I 1) (I 33))) 8589934592)) (=> (< 34 64) (= (uClip 64 (uintshl 64 (I 1) (I 34))) 17179869184)) (=> (< 35 64) (= (uClip 64 (uintshl 64 (I 1) (I 35))) 34359738368)) (=> (< 36 64) (= (uClip 64 (uintshl 64 (I 1) (I 36))) 68719476736)) (=> (< 37 64) (= (uClip 64 (uintshl 64 (I 1) (I 37))) 137438953472)) (=> (< 38 64) (= (uClip 64 (uintshl 64 (I 1) (I 38))) 274877906944)) (=> (< 39 64) (= (uClip 64 (uintshl 64 (I 1) (I 39))) 549755813888)) (=> (< 40 64) (= (uClip 64 (uintshl 64 (I 1) (I 40))) 1099511627776)) (=> (< 41 64) (= (uClip 64 (uintshl 64 (I 1) (I 41))) 2199023255552)) (=> (< 42 64) (= (uClip 64 (uintshl 64 (I 1) (I 42))) 4398046511104)) (=> (< 43 64) (= (uClip 64 (uintshl 64 (I 1) (I 43))) 8796093022208)) (=> (< 44 64) (= (uClip 64 (uintshl 64 (I 1) (I 44))) 17592186044416)) (=> (< 45 64) (= (uClip 64 (uintshl 64 (I 1) (I 45))) 35184372088832)) (=> (< 46 64) (= (uClip 64 (uintshl 64 (I 1) (I 46))) 70368744177664)) (=> (< 47 64) (= (uClip 64 (uintshl 64 (I 1) (I 47))) 140737488355328)) (=> (< 48 64) (= (uClip 64 (uintshl 64 (I 1) (I 48))) 281474976710656)) (=> (< 49 64) (= (uClip 64 (uintshl 64 (I 1) (I 49))) 562949953421312)) (=> (< 50 64) (= (uClip 64 (uintshl 64 (I 1) (I 50))) 1125899906842624)) (=> (< 51 64) (= (uClip 64 (uintshl 64 (I 1) (I 51))) 2251799813685248)) (=> (< 52 64) (= (uClip 64 (uintshl 64 (I 1) (I 52))) 4503599627370496)) (=> (< 53 64) (= (uClip 64 (uintshl 64 (I 1) (I 53))) 9007199254740992)) (=> (< 54 64) (= (uClip 64 (uintshl 64 (I 1) (I 54))) 18014398509481984)) (=> (< 55 64) (= (uClip 64 (uintshl 64 (I 1) (I 55))) 36028797018963968)) (=> (< 56 64) (= (uClip 64 (uintshl 64 (I 1) (I 56))) 72057594037927936)) (=> (< 57 64) (= (uClip 64 (uintshl 64 (I 1) (I 57))) 144115188075855872)) (=> (< 58 64) (= (uClip 64 (uintshl 64 (I 1) (I 58))) 288230376151711744)) (=> (< 59 64) (= (uClip 64 (uintshl 64 (I 1) (I 59))) 576460752303423488)) (=> (< 60 64) (= (uClip 64 (uintshl 64 (I 1) (I 60))) 1152921504606846976)) (=> (< 61 64) (= (uClip 64 (uintshl 64 (I 1) (I 61))) 2305843009213693952)) (=> (< 62 64) (= (uClip 64 (uintshl 64 (I 1) (I 62))) 4611686018427387904)) (=> (< 63 64) (= (uClip 64 (uintshl 64 (I 1) (I 63))) 9223372036854775808)))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_shl_auto. no%param)))))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_shl_values_auto")
(declare-fun ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. no%param) (and (=> (< 0 64) (= (uClip 64 (uintshl 64 (I 1) (I 0))) 1)) (=> (< 1 64) (= (uClip 64 (uintshl 64 (I 1) (I 1))) 2)) (=> (< 2 64) (= (uClip 64 (uintshl 64 (I 1) (I 2))) 4)) (=> (< 3 64) (= (uClip 64 (uintshl 64 (I 1) (I 3))) 8)) (=> (< 4 64) (= (uClip 64 (uintshl 64 (I 1) (I 4))) 16)) (=> (< 5 64) (= (uClip 64 (uintshl 64 (I 1) (I 5))) 32)) (=> (< 6 64) (= (uClip 64 (uintshl 64 (I 1) (I 6))) 64)) (=> (< 7 64) (= (uClip 64 (uintshl 64 (I 1) (I 7))) 128)) (=> (< 8 64) (= (uClip 64 (uintshl 64 (I 1) (I 8))) 256)) (=> (< 9 64) (= (uClip 64 (uintshl 64 (I 1) (I 9))) 512)) (=> (< 10 64) (= (uClip 64 (uintshl 64 (I 1) (I 10))) 1024)) (=> (< 11 64) (= (uClip 64 (uintshl 64 (I 1) (I 11))) 2048)) (=> (< 12 64) (= (uClip 64 (uintshl 64 (I 1) (I 12))) 4096)) (=> (< 13 64) (= (uClip 64 (uintshl 64 (I 1) (I 13))) 8192)) (=> (< 14 64) (= (uClip 64 (uintshl 64 (I 1) (I 14))) 16384)) (=> (< 15 64) (= (uClip 64 (uintshl 64 (I 1) (I 15))) 32768)) (=> (< 16 64) (= (uClip 64 (uintshl 64 (I 1) (I 16))) 65536)) (=> (< 17 64) (= (uClip 64 (uintshl 64 (I 1) (I 17))) 131072)) (=> (< 18 64) (= (uClip 64 (uintshl 64 (I 1) (I 18))) 262144)) (=> (< 19 64) (= (uClip 64 (uintshl 64 (I 1) (I 19))) 524288)) (=> (< 20 64) (= (uClip 64 (uintshl 64 (I 1) (I 20))) 1048576)) (=> (< 21 64) (= (uClip 64 (uintshl 64 (I 1) (I 21))) 2097152)) (=> (< 22 64) (= (uClip 64 (uintshl 64 (I 1) (I 22))) 4194304)) (=> (< 23 64) (= (uClip 64 (uintshl 64 (I 1) (I 23))) 8388608)) (=> (< 24 64) (= (uClip 64 (uintshl 64 (I 1) (I 24))) 16777216)) (=> (< 25 64) (= (uClip 64 (uintshl 64 (I 1) (I 25))) 33554432)) (=> (< 26 64) (= (uClip 64 (uintshl 64 (I 1) (I 26))) 67108864)) (=> (< 27 64) (= (uClip 64 (uintshl 64 (I 1) (I 27))) 134217728)) (=> (< 28 64) (= (uClip 64 (uintshl 64 (I 1) (I 28))) 268435456)) (=> (< 29 64) (= (uClip 64 (uintshl 64 (I 1) (I 29))) 536870912)) (=> (< 30 64) (= (uClip 64 (uintshl 64 (I 1) (I 30))) 1073741824)) (=> (< 31 64) (= (uClip 64 (uintshl 64 (I 1) (I 31))) 2147483648)) (=> (< 32 64) (= (uClip 64 (uintshl 64 (I 1) (I 32))) 4294967296)) (=> (< 33 64) (= (uClip 64 (uintshl 64 (I 1) (I 33))) 8589934592)) (=> (< 34 64) (= (uClip 64 (uintshl 64 (I 1) (I 34))) 17179869184)) (=> (< 35 64) (= (uClip 64 (uintshl 64 (I 1) (I 35))) 34359738368)) (=> (< 36 64) (= (uClip 64 (uintshl 64 (I 1) (I 36))) 68719476736)) (=> (< 37 64) (= (uClip 64 (uintshl 64 (I 1) (I 37))) 137438953472)) (=> (< 38 64) (= (uClip 64 (uintshl 64 (I 1) (I 38))) 274877906944)) (=> (< 39 64) (= (uClip 64 (uintshl 64 (I 1) (I 39))) 549755813888)) (=> (< 40 64) (= (uClip 64 (uintshl 64 (I 1) (I 40))) 1099511627776)) (=> (< 41 64) (= (uClip 64 (uintshl 64 (I 1) (I 41))) 2199023255552)) (=> (< 42 64) (= (uClip 64 (uintshl 64 (I 1) (I 42))) 4398046511104)) (=> (< 43 64) (= (uClip 64 (uintshl 64 (I 1) (I 43))) 8796093022208)) (=> (< 44 64) (= (uClip 64 (uintshl 64 (I 1) (I 44))) 17592186044416)) (=> (< 45 64) (= (uClip 64 (uintshl 64 (I 1) (I 45))) 35184372088832)) (=> (< 46 64) (= (uClip 64 (uintshl 64 (I 1) (I 46))) 70368744177664)) (=> (< 47 64) (= (uClip 64 (uintshl 64 (I 1) (I 47))) 140737488355328)) (=> (< 48 64) (= (uClip 64 (uintshl 64 (I 1) (I 48))) 281474976710656)) (=> (< 49 64) (= (uClip 64 (uintshl 64 (I 1) (I 49))) 562949953421312)) (=> (< 50 64) (= (uClip 64 (uintshl 64 (I 1) (I 50))) 1125899906842624)) (=> (< 51 64) (= (uClip 64 (uintshl 64 (I 1) (I 51))) 2251799813685248)) (=> (< 52 64) (= (uClip 64 (uintshl 64 (I 1) (I 52))) 4503599627370496)) (=> (< 53 64) (= (uClip 64 (uintshl 64 (I 1) (I 53))) 9007199254740992)) (=> (< 54 64) (= (uClip 64 (uintshl 64 (I 1) (I 54))) 18014398509481984)) (=> (< 55 64) (= (uClip 64 (uintshl 64 (I 1) (I 55))) 36028797018963968)) (=> (< 56 64) (= (uClip 64 (uintshl 64 (I 1) (I 56))) 72057594037927936)) (=> (< 57 64) (= (uClip 64 (uintshl 64 (I 1) (I 57))) 144115188075855872)) (=> (< 58 64) (= (uClip 64 (uintshl 64 (I 1) (I 58))) 288230376151711744)) (=> (< 59 64) (= (uClip 64 (uintshl 64 (I 1) (I 59))) 576460752303423488)) (=> (< 60 64) (= (uClip 64 (uintshl 64 (I 1) (I 60))) 1152921504606846976)) (=> (< 61 64) (= (uClip 64 (uintshl 64 (I 1) (I 61))) 2305843009213693952)) (=> (< 62 64) (= (uClip 64 (uintshl 64 (I 1) (I 62))) 4611686018427387904)) (=> (< 63 64) (= (uClip 64 (uintshl 64 (I 1) (I 63))) 9223372036854775808)))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. no%param)))))
(set-info :comment ";; Function-Def verismo::tspec::math::bits_p::bit64_shl_values_auto")
(set-info :comment ";; verismo/src/tspec/math/bits_p.rs:394:5: 394:29 (#84)")
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_shr_div_rel")
(declare-fun req%verismo!tspec.math.bits_p.bit64_shr_div_rel. (Int Int) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((b! Int) (a! Int)) (! (= (req%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a!) (=> %%global_location_label%%0 (< a! 64))) :pattern ((req%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a!)))))
(declare-fun ens%verismo!tspec.math.bits_p.bit64_shr_div_rel. (Int Int Int) Bool)
(assert (forall ((b! Int) (a! Int) (ret! Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a! ret!) (and (uInv 64 ret!) (= ret! (uClip 64 (uintshr 64 (I b!) (I a!)))) (<= (Mul ret! (uClip 64 (uintshl 64 (I 1) (I a!)))) 18446744073709551615) (= (uClip 64 (uintshr 64 (I b!) (I a!))) (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I a!)))))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::math::bits_p::bit64_shr_div_rel")
(set-info :comment ";; verismo/src/tspec/math/bits_p.rs:486:5: 486:64 (#0)")
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_shl_mul_rel")
(declare-fun req%verismo!tspec.math.bits_p.bit64_shl_mul_rel. (Int Int) Bool)
(declare-const %%global_location_label%%1 Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((b! Int) (a! Int)) (! (= (req%verismo!tspec.math.bits_p.bit64_shl_mul_rel. b! a!) (and (=> %%global_location_label%%1 (< a! 64)) (=> %%global_location_label%%2 (<= (Mul b! (uClip 64 (uintshl 64 (I 1) (I a!)))) 18446744073709551615)))) :pattern ((req%verismo!tspec.math.bits_p.bit64_shl_mul_rel. b! a!)))))
(declare-fun ens%verismo!tspec.math.bits_p.bit64_shl_mul_rel. (Int Int) Bool)
(assert (forall ((b! Int) (a! Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_shl_mul_rel. b! a!) (= (uClip 64 (uintshl 64 (I b!) (I a!))) (Mul b! (uClip 64 (uintshl 64 (I 1) (I a!)))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_shl_mul_rel. b! a!)))))
(set-info :comment ";; Function-Def verismo::tspec::math::bits_p::bit64_shl_mul_rel")
(set-info :comment ";; verismo/src/tspec/math/bits_p.rs:511:9: 511:55 (#0)")
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_and_auto")
(declare-fun ens%verismo!tspec.math.bits_p.bit64_and_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_and_auto. no%param) (and (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (= (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$)))) (uClip 64 (uintand 64 (I (%I b$)) (I (%I a$)))))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))))) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64)) (has_type c$ (UINT 64))) (= (uClip 64 (uintand 64 (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))) (I (%I c$)))) (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintand 64 (I (%I b$)) (I (%I c$))))))))) :pattern ((uClip 64 (uintand 64 (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))) (I (%I c$))))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintand 64 (I (%I a$)) (I (%I a$)))) (%I a$))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (%I a$))))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintand 64 (I (%I a$)) (I 0))) 0)) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I 0)))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintand 64 (I (%I a$)) (I 18446744073709551615))) (%I a$))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I 18446744073709551615)))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (and (<= (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$)))) (%I b$)) (<= (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$)))) (%I a$)))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 32)) (has_type b$ (UINT 32))) (<= (uClip 32 (uintand 32 (I (%I a$)) (I (%I b$)))) (%I b$))) :pattern ((uClip 32 (uintand 32 (I (%I a$)) (I (%I b$))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 16)) (has_type b$ (UINT 16))) (<= (uClip 16 (uintand 16 (I (%I a$)) (I (%I b$)))) (%I b$))) :pattern ((uClip 16 (uintand 16 (I (%I a$)) (I (%I b$))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 8)) (has_type b$ (UINT 8))) (<= (uClip 8 (uintand 8 (I (%I a$)) (I (%I b$)))) (%I b$))) :pattern ((uClip 8 (uintand 8 (I (%I a$)) (I (%I b$))))))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_and_auto. no%param)))))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_property_auto")
(declare-fun ens%verismo!tspec.math.bits_p.bit64_property_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_property_auto. no%param) (and (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))))) (%I a$))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (= (uClip 64 (uintor 64 (I (%I a$)) (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))))) (%I a$))) :pattern ((uClip 64 (uintor 64 (I (%I a$)) (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$)))))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintand 64 (I (uClip 64 (uintnot 64 (I (%I a$))))) (I (%I b$))))))) 0)) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintand 64 (I (uClip 64 (uintnot 64 (I (%I a$))))) (I (%I b$)))))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (or (= (%I a$) 0) (not (= (uClip 64 (uintand 64 (I (uClip 64 (uintnot 64 (I (%I a$))))) (I (%I b$)))) (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))))) :pattern ((uClip 64 (uintand 64 (I (uClip 64 (uintnot 64 (I (%I a$))))) (I (%I b$)))) (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))))) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64)) (has_type c$ (UINT 64))) (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintor 64 (I (%I b$)) (I (%I c$))))))) (uClip 64 (uintor 64 (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))) (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I c$))))))))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintor 64 (I (%I b$)) (I (%I c$)))))))))) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64)) (has_type c$ (UINT 64))) (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintxor 64 (I (%I b$)) (I (%I c$))))))) (uClip 64 (uintxor 64 (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))) (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I c$))))))))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintxor 64 (I (%I b$)) (I (%I c$)))))))))) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64)) (has_type c$ (UINT 64))) (= (uClip 64 (uintor 64 (I (%I a$)) (I (uClip 64 (uintand 64 (I (%I b$)) (I (%I c$))))))) (uClip 64 (uintand 64 (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))) (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I c$))))))))) :pattern ((uClip 64 (uintor 64 (I (%I a$)) (I (uClip 64 (uintand 64 (I (%I b$)) (I (%I c$)))))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (= (uClip 64 (uintnot 64 (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$))))))) (uClip 64 (uintor 64 (I (uClip 64 (uintnot 64 (I (%I a$))))) (I (uClip 64 (uintnot 64 (I (%I b$))))))))) :pattern ((uClip 64 (uintnot 64 (I (uClip 64 (uintand 64 (I (%I a$)) (I (%I b$)))))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (= (uClip 64 (uintnot 64 (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))))) (uClip 64 (uintand 64 (I (uClip 64 (uintnot 64 (I (%I a$))))) (I (uClip 64 (uintnot 64 (I (%I b$))))))))) :pattern ((uClip 64 (uintnot 64 (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))))))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_property_auto. no%param)))))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_or_properties")
(declare-fun ens%verismo!tspec.math.bits_p.bit64_or_properties. (Int Int) Bool)
(assert (forall ((a! Int) (b! Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_or_properties. a! b!) (and (and (and (and (and (and (= (%I (I (uClip 64 (uintor 64 (I a!) (I b!))))) (uClip 64 (uintor 64 (I (%I (I a!))) (I (%I (I b!)))))) (= (%I (I (uClip 64 (uintor 64 (I a!) (I b!))))) (uClip 64 (uintor 64 (I (%I (I b!))) (I (%I (I a!))))))) (and (<= 0 (%I (I (uClip 64 (uintor 64 (I a!) (I b!)))))) (<= (%I (I (uClip 64 (uintor 64 (I a!) (I b!))))) 18446744073709551615))) (= (uClip 64 (uintand 64 (I (%I (I (uClip 64 (uintor 64 (I a!) (I b!)))))) (I (%I (I b!))))) (%I (I b!)))) (>= (%I (I (uClip 64 (uintor 64 (I a!) (I b!))))) (%I (I a!)))) (>= (%I (I (uClip 64 (uintor 64 (I a!) (I b!))))) (%I (I b!)))) (= (uClip 64 (uintand 64 (I (%I (I (uClip 64 (uintor 64 (I a!) (I b!)))))) (I (uClip 64 (uintnot 64 (I (%I (I b!)))))))) (uClip 64 (uintand 64 (I (%I (I a!))) (I (uClip 64 (uintnot 64 (I (%I (I b!))))))))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_or_properties. a! b!)))))
(set-info :comment ";; Function-Def verismo::tspec::math::bits_p::bit64_or_properties")
(set-info :comment ";; verismo/src/tspec/math/bits_p.rs:316:9: 316:46 (#72)")
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_or_auto")
(declare-fun ens%verismo!tspec.math.bits_p.bit64_or_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_or_auto. no%param) (and (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (and (and (and (and (and (and (= (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))) (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))) (= (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))) (uClip 64 (uintor 64 (I (%I b$)) (I (%I a$)))))) (and (<= 0 (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))))) (<= (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))) 18446744073709551615))) (= (uClip 64 (uintand 64 (I (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))))) (I (%I b$)))) (%I b$))) (>= (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))) (%I a$))) (>= (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$)))))) (%I b$))) (= (uClip 64 (uintand 64 (I (%I (I (uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))))) (I (uClip 64 (uintnot 64 (I (%I b$))))))) (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintnot 64 (I (%I b$)))))))))) :pattern ((uClip 64 (uintor 64 (I (%I a$)) (I (%I b$))))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintor 64 (I (%I a$)) (I (%I a$)))) (%I a$))) :pattern ((uClip 64 (uintor 64 (I (%I a$)) (I (%I a$))))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintor 64 (I (%I a$)) (I 0))) (%I a$))) :pattern ((uClip 64 (uintor 64 (I (%I a$)) (I 0)))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintor 64 (I (%I a$)) (I 18446744073709551615))) 18446744073709551615)) :pattern ((uClip 64 (uintor 64 (I (%I a$)) (I 18446744073709551615)))))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_or_auto. no%param)))))
(set-info :comment ";; Function-Def verismo::tspec::math::bits_p::bit64_or_auto")
(set-info :comment ";; verismo/src/tspec/math/bits_p.rs:323:9: 323:34 (#72)")
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_xor_auto")
(declare-fun ens%verismo!tspec.math.bits_p.bit64_xor_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_xor_auto. no%param) (and (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (= (uClip 64 (uintxor 64 (I (%I a$)) (I (%I b$)))) (uClip 64 (uintxor 64 (I (%I b$)) (I (%I a$)))))) :pattern ((uClip 64 (uintxor 64 (I (%I a$)) (I (%I b$))))))) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64)) (has_type c$ (UINT 64))) (= (uClip 64 (uintxor 64 (I (uClip 64 (uintxor 64 (I (%I a$)) (I (%I b$))))) (I (%I c$)))) (uClip 64 (uintxor 64 (I (%I a$)) (I (uClip 64 (uintxor 64 (I (%I b$)) (I (%I c$))))))))) :pattern ((uClip 64 (uintxor 64 (I (uClip 64 (uintxor 64 (I (%I a$)) (I (%I b$))))) (I (%I c$))))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintxor 64 (I (%I a$)) (I (%I a$)))) 0)) :pattern ((uClip 64 (uintxor 64 (I (%I a$)) (I (%I a$))))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintxor 64 (I (%I a$)) (I 0))) (%I a$))) :pattern ((uClip 64 (uintxor 64 (I (%I a$)) (I 0)))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintxor 64 (I (%I a$)) (I 18446744073709551615))) (uClip 64 (uintnot 64 (I (%I a$)))))) :pattern ((uClip 64 (uintxor 64 (I (%I a$)) (I 18446744073709551615)))))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_xor_auto. no%param)))))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_not_auto")
(declare-fun ens%verismo!tspec.math.bits_p.bit64_not_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_not_auto. no%param) (and (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (and (and (and (and (= (%I (I (uClip 64 (uintnot 64 (I (%I a$)))))) (uClip 64 (uintnot 64 (I (%I a$))))) (= (uClip 64 (uintand 64 (I (%I (I (uClip 64 (uintnot 64 (I (%I a$))))))) (I (%I a$)))) 0)) (= (%I (I (uClip 64 (uintnot 64 (I (%I a$)))))) (uClip 64 (Sub 18446744073709551615 (%I a$))))) (and (<= 0 (%I (I (uClip 64 (uintnot 64 (I (%I a$))))))) (<= (%I (I (uClip 64 (uintnot 64 (I (%I a$)))))) 18446744073709551615))) (= (uClip 64 (uintnot 64 (I (%I (I (uClip 64 (uintnot 64 (I (%I a$))))))))) (%I a$)))) :pattern ((uClip 64 (uintnot 64 (I (%I a$))))))) (= (uClip 64 (uintnot 64 (I 0))) 18446744073709551615))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_not_auto. no%param)))))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit_set_non_zero")
(declare-fun req%verismo!tspec.math.bits_p.bit_set_non_zero. (Int Int) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((val! Int) (b! Int)) (! (= (req%verismo!tspec.math.bits_p.bit_set_non_zero. val! b!) (=> %%global_location_label%%3 (and (<= 0 b!) (< b! 64)))) :pattern ((req%verismo!tspec.math.bits_p.bit_set_non_zero. val! b!)))))
(declare-fun ens%verismo!tspec.math.bits_p.bit_set_non_zero. (Int Int) Bool)
(assert (forall ((val! Int) (b! Int)) (! (= (ens%verismo!tspec.math.bits_p.bit_set_non_zero. val! b!) (> (uClip 64 (uintor 64 (I (%I (I val!))) (I (uClip 64 (uintshl 64 (I 1) (I (%I (I b!)))))))) 0)) :pattern ((ens%verismo!tspec.math.bits_p.bit_set_non_zero. val! b!)))))
(set-info :comment ";; Function-Def verismo::tspec::math::bits_p::bit_set_non_zero")
(set-info :comment ";; verismo/src/tspec/math/bits_p.rs:472:5: 472:52 (#0)")
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::proof_bit64_clear_set_property")
(declare-fun req%verismo!tspec.math.bits_p.proof_bit64_clear_set_property. (Int Int) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((val! Int) (bit! Int)) (! (= (req%verismo!tspec.math.bits_p.proof_bit64_clear_set_property. val! bit!) (=> %%global_location_label%%4 (< bit! 64))) :pattern ((req%verismo!tspec.math.bits_p.proof_bit64_clear_set_property. val! bit!)))))
(declare-fun ens%verismo!tspec.math.bits_p.proof_bit64_clear_set_property. (Int Int) Bool)
(assert (forall ((val! Int) (bit! Int)) (! (= (ens%verismo!tspec.math.bits_p.proof_bit64_clear_set_property. val! bit!) (and (= (uClip 64 (uintshl 64 (I 1) (I (%I (I bit!))))) (uClip 64 (uintand 64 (I (%I (I (uClip 64 (uintor 64 (I (%I (I val!))) (I (uClip 64 (uintshl 64 (I 1) (I (%I (I bit!))))))))))) (I (uClip 64 (uintshl 64 (I 1) (I (%I (I bit!))))))))) (not (= (uClip 64 (uintshl 64 (I 1) (I (%I (I bit!))))) (uClip 64 (uintand 64 (I (%I (I (uClip 64 (uintand 64 (I (%I (I val!))) (I (uClip 64 (uintnot 64 (I (uClip 64 (uintshl 64 (I 1) (I (%I (I bit!)))))))))))))) (I (uClip 64 (uintshl 64 (I 1) (I (%I (I bit!)))))))))))) :pattern ((ens%verismo!tspec.math.bits_p.proof_bit64_clear_set_property. val! bit!)))))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::proof_bit64_has_bit_property")
(declare-fun req%verismo!tspec.math.bits_p.proof_bit64_has_bit_property. (Int Int Int) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((val! Int) (x! Int) (bit! Int)) (! (= (req%verismo!tspec.math.bits_p.proof_bit64_has_bit_property. val! x! bit!) (=> %%global_location_label%%5 (< bit! 64))) :pattern ((req%verismo!tspec.math.bits_p.proof_bit64_has_bit_property. val! x! bit!)))))
(declare-fun ens%verismo!tspec.math.bits_p.proof_bit64_has_bit_property. (Int Int Int) Bool)
(assert (forall ((val! Int) (x! Int) (bit! Int)) (! (= (ens%verismo!tspec.math.bits_p.proof_bit64_has_bit_property. val! x! bit!) (and (=> (= (uClip 64 (uintshl 64 (I 1) (I (%I (I bit!))))) (uClip 64 (uintand 64 (I (%I (I val!))) (I (uClip 64 (uintshl 64 (I 1) (I (%I (I bit!))))))))) (= (uClip 64 (uintshl 64 (I 1) (I (%I (I bit!))))) (uClip 64 (uintand 64 (I (%I (I (uClip 64 (uintor 64 (I val!) (I x!)))))) (I (uClip 64 (uintshl 64 (I 1) (I (%I (I bit!)))))))))) (=> (not (= (uClip 64 (uintshl 64 (I 1) (I (%I (I bit!))))) (uClip 64 (uintand 64 (I (%I (I val!))) (I (uClip 64 (uintshl 64 (I 1) (I (%I (I bit!)))))))))) (not (= (uClip 64 (uintshl 64 (I 1) (I (%I (I bit!))))) (uClip 64 (uintand 64 (I (%I (I (uClip 64 (uintand 64 (I val!) (I x!)))))) (I (uClip 64 (uintshl 64 (I 1) (I (%I (I bit!))))))))))))) :pattern ((ens%verismo!tspec.math.bits_p.proof_bit64_has_bit_property. val! x! bit!)))))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::slow_bit_mask64_mod_auto")
(declare-fun req%verismo!tspec.math.bits_p.slow_bit_mask64_mod_auto. (Int) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((bits! Int)) (! (= (req%verismo!tspec.math.bits_p.slow_bit_mask64_mod_auto. bits!) (=> %%global_location_label%%6 (verismo!tspec.math.bits_p.slow_bit_range_req.? (I bits!)))) :pattern ((req%verismo!tspec.math.bits_p.slow_bit_mask64_mod_auto. bits!)))))
(declare-fun ens%verismo!tspec.math.bits_p.slow_bit_mask64_mod_auto. (Int) Bool)
(assert (forall ((bits! Int)) (! (= (ens%verismo!tspec.math.bits_p.slow_bit_mask64_mod_auto. bits!) (and (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (Sub (uClip 64 (uintshl 64 (I 1) (I bits!))) 1))))) (uClip 64 (EucMod (%I a$) (uClip 64 (uintshl 64 (I 1) (I bits!))))))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (Sub (uClip 64 (uintshl 64 (I 1) (I bits!))) 1)))))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintor 64 (I (%I a$)) (I (uClip 64 (Sub (uClip 64 (uintshl 64 (I 1) (I bits!))) 1))))) (uClip 64 (Add (uClip 64 (Sub (%I a$) (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (Sub (uClip 64 (uintshl 64 (I 1) (I bits!))) 1))))))) (uClip 64 (Sub (uClip 64 (uintshl 64 (I 1) (I bits!))) 1)))))) :pattern ((uClip 64 (uintor 64 (I (%I a$)) (I (uClip 64 (Sub (uClip 64 (uintshl 64 (I 1) (I bits!))) 1)))))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (>= (uClip 64 (Add (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintnot 64 (I (uClip 64 (Sub (uClip 64 (uintshl 64 (I 1) (I bits!))) 1)))))))) (uClip 64 (Sub (uClip 64 (uintshl 64 (I 1) (I bits!))) 1)))) (%I a$))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintnot 64 (I (uClip 64 (Sub (uClip 64 (uintshl 64 (I 1) (I bits!))) 1))))))))))))) :pattern ((ens%verismo!tspec.math.bits_p.slow_bit_mask64_mod_auto. bits!)))))
(set-info :comment ";; Function-Def verismo::tspec::math::bits_p::slow_bit_mask64_mod_auto")
(set-info :comment ";; verismo/src/tspec/math/bits_p.rs:266:9: 266:57 (#42)")
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_or_mask_auto")
(declare-fun ens%verismo!tspec.math.bits_p.bit64_or_mask_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_or_mask_auto. no%param) (forall ((a$ Poly) (bits$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type bits$ (UINT 64))) (=> (and (<= 0 (%I bits$)) (< (%I bits$) 64)) (= (uClip 64 (uintand 64 (I (uClip 64 (Add (uClip 64 (uintor 64 (I (%I a$)) (I (uClip 64 (Sub (uClip 64 (uintshl 64 (I 1) (I (%I bits$)))) 1))))) 1))) (I (uClip 64 (Sub (uClip 64 (uintshl 64 (I 1) (I (%I bits$)))) 1))))) 0))) :pattern ((uClip 64 (uintor 64 (I (%I a$)) (I (uClip 64 (Sub (uClip 64 (uintshl 64 (I 1) (I (%I bits$)))) 1))))))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_or_mask_auto. no%param)))))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::proof_bit_u64_not")
(declare-fun ens%verismo!tspec.math.bits_p.proof_bit_u64_not. (Int) Bool)
(assert (forall ((a! Int)) (! (= (ens%verismo!tspec.math.bits_p.proof_bit_u64_not. a!) (= (uClip 64 (uintnot 64 (I a!))) (uClip 64 (Sub 18446744073709551615 a!)))) :pattern ((ens%verismo!tspec.math.bits_p.proof_bit_u64_not. a!)))))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::proof_bit_usize_not")
(declare-fun ens%verismo!tspec.math.bits_p.proof_bit_usize_not. (Int) Bool)
(assert (forall ((a! Int)) (! (= (ens%verismo!tspec.math.bits_p.proof_bit_usize_not. a!) (= (uClip SZ (uintnot SZ (I a!))) (uClip SZ (Sub (uClip SZ 18446744073709551615) a!)))) :pattern ((ens%verismo!tspec.math.bits_p.proof_bit_usize_not. a!)))))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::proof_bit64_and_rel_mod")
(declare-fun req%verismo!tspec.math.bits_p.proof_bit64_and_rel_mod. (Int Int) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((a! Int) (b! Int)) (! (= (req%verismo!tspec.math.bits_p.proof_bit64_and_rel_mod. a! b!) (=> %%global_location_label%%7 (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I (I b!)) 1) (= (%I (I b!)) 2)) (= (%I (I b!)) 4)) (= (%I (I b!)) 8)) (= (%I (I b!)) 16)) (= (%I (I b!)) 32)) (= (%I (I b!)) 64)) (= (%I (I b!)) 128)) (= (%I (I b!)) 256)) (= (%I (I b!)) 512)) (= (%I (I b!)) 1024)) (= (%I (I b!)) 2048)) (= (%I (I b!)) 4096)) (= (%I (I b!)) 8192)) (= (%I (I b!)) 16384)) (= (%I (I b!)) 32768)) (= (%I (I b!)) 65536)) (= (%I (I b!)) 131072)) (= (%I (I b!)) 262144)) (= (%I (I b!)) 524288)) (= (%I (I b!)) 1048576)) (= (%I (I b!)) 2097152)) (= (%I (I b!)) 4194304)) (= (%I (I b!)) 8388608)) (= (%I (I b!)) 16777216)) (= (%I (I b!)) 33554432)) (= (%I (I b!)) 67108864)) (= (%I (I b!)) 134217728)) (= (%I (I b!)) 268435456)) (= (%I (I b!)) 536870912)) (= (%I (I b!)) 1073741824)) (= (%I (I b!)) 2147483648)) (= (%I (I b!)) 4294967296)) (= (%I (I b!)) 8589934592)) (= (%I (I b!)) 17179869184)) (= (%I (I b!)) 34359738368)) (= (%I (I b!)) 68719476736)) (= (%I (I b!)) 137438953472)) (= (%I (I b!)) 274877906944)) (= (%I (I b!)) 549755813888)) (= (%I (I b!)) 1099511627776)) (= (%I (I b!)) 2199023255552)) (= (%I (I b!)) 4398046511104)) (= (%I (I b!)) 8796093022208)) (= (%I (I b!)) 17592186044416)) (= (%I (I b!)) 35184372088832)) (= (%I (I b!)) 70368744177664)) (= (%I (I b!)) 140737488355328)) (= (%I (I b!)) 281474976710656)) (= (%I (I b!)) 562949953421312)) (= (%I (I b!)) 1125899906842624)) (= (%I (I b!)) 2251799813685248)) (= (%I (I b!)) 4503599627370496)) (= (%I (I b!)) 9007199254740992)) (= (%I (I b!)) 18014398509481984)) (= (%I (I b!)) 36028797018963968)) (= (%I (I b!)) 72057594037927936)) (= (%I (I b!)) 144115188075855872)) (= (%I (I b!)) 288230376151711744)) (= (%I (I b!)) 576460752303423488)) (= (%I (I b!)) 1152921504606846976)) (= (%I (I b!)) 2305843009213693952)) (= (%I (I b!)) 4611686018427387904)) (= (%I (I b!)) 9223372036854775808)))) :pattern ((req%verismo!tspec.math.bits_p.proof_bit64_and_rel_mod. a! b!)))))
(declare-fun ens%verismo!tspec.math.bits_p.proof_bit64_and_rel_mod. (Int Int) Bool)
(assert (forall ((a! Int) (b! Int)) (! (= (ens%verismo!tspec.math.bits_p.proof_bit64_and_rel_mod. a! b!) (= (uClip 64 (uintand 64 (I a!) (I (uClip 64 (Sub b! 1))))) (uClip 64 (EucMod a! b!)))) :pattern ((ens%verismo!tspec.math.bits_p.proof_bit64_and_rel_mod. a! b!)))))
(set-info :comment ";; Function-Def verismo::tspec::math::bits_p::proof_bit64_and_rel_mod")
(set-info :comment ";; verismo/src/tspec/math/bits_p.rs:535:5: 535:57 (#0)")
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::proof_bit_usize_and_rel_mod")
(declare-fun req%verismo!tspec.math.bits_p.proof_bit_usize_and_rel_mod. (Int Int) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((a! Int) (b! Int)) (! (= (req%verismo!tspec.math.bits_p.proof_bit_usize_and_rel_mod. a! b!) (=> %%global_location_label%%8 (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I (I b!)) 1) (= (%I (I b!)) 2)) (= (%I (I b!)) 4)) (= (%I (I b!)) 8)) (= (%I (I b!)) 16)) (= (%I (I b!)) 32)) (= (%I (I b!)) 64)) (= (%I (I b!)) 128)) (= (%I (I b!)) 256)) (= (%I (I b!)) 512)) (= (%I (I b!)) 1024)) (= (%I (I b!)) 2048)) (= (%I (I b!)) 4096)) (= (%I (I b!)) 8192)) (= (%I (I b!)) 16384)) (= (%I (I b!)) 32768)) (= (%I (I b!)) 65536)) (= (%I (I b!)) 131072)) (= (%I (I b!)) 262144)) (= (%I (I b!)) 524288)) (= (%I (I b!)) 1048576)) (= (%I (I b!)) 2097152)) (= (%I (I b!)) 4194304)) (= (%I (I b!)) 8388608)) (= (%I (I b!)) 16777216)) (= (%I (I b!)) 33554432)) (= (%I (I b!)) 67108864)) (= (%I (I b!)) 134217728)) (= (%I (I b!)) 268435456)) (= (%I (I b!)) 536870912)) (= (%I (I b!)) 1073741824)) (= (%I (I b!)) 2147483648)) (= (%I (I b!)) 4294967296)) (= (%I (I b!)) 8589934592)) (= (%I (I b!)) 17179869184)) (= (%I (I b!)) 34359738368)) (= (%I (I b!)) 68719476736)) (= (%I (I b!)) 137438953472)) (= (%I (I b!)) 274877906944)) (= (%I (I b!)) 549755813888)) (= (%I (I b!)) 1099511627776)) (= (%I (I b!)) 2199023255552)) (= (%I (I b!)) 4398046511104)) (= (%I (I b!)) 8796093022208)) (= (%I (I b!)) 17592186044416)) (= (%I (I b!)) 35184372088832)) (= (%I (I b!)) 70368744177664)) (= (%I (I b!)) 140737488355328)) (= (%I (I b!)) 281474976710656)) (= (%I (I b!)) 562949953421312)) (= (%I (I b!)) 1125899906842624)) (= (%I (I b!)) 2251799813685248)) (= (%I (I b!)) 4503599627370496)) (= (%I (I b!)) 9007199254740992)) (= (%I (I b!)) 18014398509481984)) (= (%I (I b!)) 36028797018963968)) (= (%I (I b!)) 72057594037927936)) (= (%I (I b!)) 144115188075855872)) (= (%I (I b!)) 288230376151711744)) (= (%I (I b!)) 576460752303423488)) (= (%I (I b!)) 1152921504606846976)) (= (%I (I b!)) 2305843009213693952)) (= (%I (I b!)) 4611686018427387904)) (= (%I (I b!)) 9223372036854775808)))) :pattern ((req%verismo!tspec.math.bits_p.proof_bit_usize_and_rel_mod. a! b!)))))
(declare-fun ens%verismo!tspec.math.bits_p.proof_bit_usize_and_rel_mod. (Int Int) Bool)
(assert (forall ((a! Int) (b! Int)) (! (= (ens%verismo!tspec.math.bits_p.proof_bit_usize_and_rel_mod. a! b!) (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub b! 1))))) (uClip SZ (EucMod a! b!)))) :pattern ((ens%verismo!tspec.math.bits_p.proof_bit_usize_and_rel_mod. a! b!)))))
(set-info :comment ";; Function-Def verismo::tspec::math::bits_p::proof_bit_usize_and_rel_mod")
(set-info :comment ";; verismo/src/tspec/math/bits_p.rs:546:5: 546:65 (#0)")
(declare-const a! Int)
(declare-const b! Int)
(assert fuel_defaults)
(assert (uInv SZ a!))
(assert (uInv SZ b!))
(assert (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I (I b!)) 1) (= (%I (I b!)) 2)) (= (%I (I b!)) 4)) (= (%I (I b!)) 8)) (= (%I (I b!)) 16)) (= (%I (I b!)) 32)) (= (%I (I b!)) 64)) (= (%I (I b!)) 128)) (= (%I (I b!)) 256)) (= (%I (I b!)) 512)) (= (%I (I b!)) 1024)) (= (%I (I b!)) 2048)) (= (%I (I b!)) 4096)) (= (%I (I b!)) 8192)) (= (%I (I b!)) 16384)) (= (%I (I b!)) 32768)) (= (%I (I b!)) 65536)) (= (%I (I b!)) 131072)) (= (%I (I b!)) 262144)) (= (%I (I b!)) 524288)) (= (%I (I b!)) 1048576)) (= (%I (I b!)) 2097152)) (= (%I (I b!)) 4194304)) (= (%I (I b!)) 8388608)) (= (%I (I b!)) 16777216)) (= (%I (I b!)) 33554432)) (= (%I (I b!)) 67108864)) (= (%I (I b!)) 134217728)) (= (%I (I b!)) 268435456)) (= (%I (I b!)) 536870912)) (= (%I (I b!)) 1073741824)) (= (%I (I b!)) 2147483648)) (= (%I (I b!)) 4294967296)) (= (%I (I b!)) 8589934592)) (= (%I (I b!)) 17179869184)) (= (%I (I b!)) 34359738368)) (= (%I (I b!)) 68719476736)) (= (%I (I b!)) 137438953472)) (= (%I (I b!)) 274877906944)) (= (%I (I b!)) 549755813888)) (= (%I (I b!)) 1099511627776)) (= (%I (I b!)) 2199023255552)) (= (%I (I b!)) 4398046511104)) (= (%I (I b!)) 8796093022208)) (= (%I (I b!)) 17592186044416)) (= (%I (I b!)) 35184372088832)) (= (%I (I b!)) 70368744177664)) (= (%I (I b!)) 140737488355328)) (= (%I (I b!)) 281474976710656)) (= (%I (I b!)) 562949953421312)) (= (%I (I b!)) 1125899906842624)) (= (%I (I b!)) 2251799813685248)) (= (%I (I b!)) 4503599627370496)) (= (%I (I b!)) 9007199254740992)) (= (%I (I b!)) 18014398509481984)) (= (%I (I b!)) 36028797018963968)) (= (%I (I b!)) 72057594037927936)) (= (%I (I b!)) 144115188075855872)) (= (%I (I b!)) 288230376151711744)) (= (%I (I b!)) 576460752303423488)) (= (%I (I b!)) 1152921504606846976)) (= (%I (I b!)) 2305843009213693952)) (= (%I (I b!)) 4611686018427387904)) (= (%I (I b!)) 9223372036854775808)))
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%23 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%24 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%25 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%26 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%27 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%28 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%29 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%30 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%31 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%32 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%33 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%34 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%35 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%36 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%37 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%38 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%39 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%40 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%41 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%42 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%43 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%44 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%45 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%46 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%47 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%48 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%49 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%50 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%51 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%52 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%53 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%54 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%55 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%56 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%57 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%58 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%59 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%60 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%61 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%62 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%63 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%64 Bool)
(assert (not (and (=> %%location_label%%0 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 1) 1))))) (uClip SZ (EucMod a! (uClip SZ 1)))) (and (=> %%location_label%%1 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 2) 1))))) (uClip SZ (EucMod a! (uClip SZ 2)))) (and (=> %%location_label%%2 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 4) 1))))) (uClip SZ (EucMod a! (uClip SZ 4)))) (and (=> %%location_label%%3 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 8) 1))))) (uClip SZ (EucMod a! (uClip SZ 8)))) (and (=> %%location_label%%4 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 16) 1))))) (uClip SZ (EucMod a! (uClip SZ 16)))) (and (=> %%location_label%%5 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 32) 1))))) (uClip SZ (EucMod a! (uClip SZ 32)))) (and (=> %%location_label%%6 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 64) 1))))) (uClip SZ (EucMod a! (uClip SZ 64)))) (and (=> %%location_label%%7 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 128) 1))))) (uClip SZ (EucMod a! (uClip SZ 128)))) (and (=> %%location_label%%8 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 256) 1))))) (uClip SZ (EucMod a! (uClip SZ 256)))) (and (=> %%location_label%%9 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 512) 1))))) (uClip SZ (EucMod a! (uClip SZ 512)))) (and (=> %%location_label%%10 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 1024) 1))))) (uClip SZ (EucMod a! (uClip SZ 1024)))) (and (=> %%location_label%%11 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 2048) 1))))) (uClip SZ (EucMod a! (uClip SZ 2048)))) (and (=> %%location_label%%12 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 4096) 1))))) (uClip SZ (EucMod a! (uClip SZ 4096)))) (and (=> %%location_label%%13 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 8192) 1))))) (uClip SZ (EucMod a! (uClip SZ 8192)))) (and (=> %%location_label%%14 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 16384) 1))))) (uClip SZ (EucMod a! (uClip SZ 16384)))) (and (=> %%location_label%%15 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 32768) 1))))) (uClip SZ (EucMod a! (uClip SZ 32768)))) (and (=> %%location_label%%16 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 65536) 1))))) (uClip SZ (EucMod a! (uClip SZ 65536)))) (and (=> %%location_label%%17 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 131072) 1))))) (uClip SZ (EucMod a! (uClip SZ 131072)))) (and (=> %%location_label%%18 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 262144) 1))))) (uClip SZ (EucMod a! (uClip SZ 262144)))) (and (=> %%location_label%%19 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 524288) 1))))) (uClip SZ (EucMod a! (uClip SZ 524288)))) (and (=> %%location_label%%20 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 1048576) 1))))) (uClip SZ (EucMod a! (uClip SZ 1048576)))) (and (=> %%location_label%%21 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 2097152) 1))))) (uClip SZ (EucMod a! (uClip SZ 2097152)))) (and (=> %%location_label%%22 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 4194304) 1))))) (uClip SZ (EucMod a! (uClip SZ 4194304)))) (and (=> %%location_label%%23 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 8388608) 1))))) (uClip SZ (EucMod a! (uClip SZ 8388608)))) (and (=> %%location_label%%24 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 16777216) 1))))) (uClip SZ (EucMod a! (uClip SZ 16777216)))) (and (=> %%location_label%%25 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 33554432) 1))))) (uClip SZ (EucMod a! (uClip SZ 33554432)))) (and (=> %%location_label%%26 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 67108864) 1))))) (uClip SZ (EucMod a! (uClip SZ 67108864)))) (and (=> %%location_label%%27 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 134217728) 1))))) (uClip SZ (EucMod a! (uClip SZ 134217728)))) (and (=> %%location_label%%28 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 268435456) 1))))) (uClip SZ (EucMod a! (uClip SZ 268435456)))) (and (=> %%location_label%%29 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 536870912) 1))))) (uClip SZ (EucMod a! (uClip SZ 536870912)))) (and (=> %%location_label%%30 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 1073741824) 1))))) (uClip SZ (EucMod a! (uClip SZ 1073741824)))) (and (=> %%location_label%%31 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 2147483648) 1))))) (uClip SZ (EucMod a! (uClip SZ 2147483648)))) (and (=> %%location_label%%32 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 4294967296) 1))))) (uClip SZ (EucMod a! (uClip SZ 4294967296)))) (and (=> %%location_label%%33 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 8589934592) 1))))) (uClip SZ (EucMod a! (uClip SZ 8589934592)))) (and (=> %%location_label%%34 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 17179869184) 1))))) (uClip SZ (EucMod a! (uClip SZ 17179869184)))) (and (=> %%location_label%%35 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 34359738368) 1))))) (uClip SZ (EucMod a! (uClip SZ 34359738368)))) (and (=> %%location_label%%36 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 68719476736) 1))))) (uClip SZ (EucMod a! (uClip SZ 68719476736)))) (and (=> %%location_label%%37 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 137438953472) 1))))) (uClip SZ (EucMod a! (uClip SZ 137438953472)))) (and (=> %%location_label%%38 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 274877906944) 1))))) (uClip SZ (EucMod a! (uClip SZ 274877906944)))) (and (=> %%location_label%%39 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 549755813888) 1))))) (uClip SZ (EucMod a! (uClip SZ 549755813888)))) (and (=> %%location_label%%40 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 1099511627776) 1))))) (uClip SZ (EucMod a! (uClip SZ 1099511627776)))) (and (=> %%location_label%%41 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 2199023255552) 1))))) (uClip SZ (EucMod a! (uClip SZ 2199023255552)))) (and (=> %%location_label%%42 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 4398046511104) 1))))) (uClip SZ (EucMod a! (uClip SZ 4398046511104)))) (and (=> %%location_label%%43 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 8796093022208) 1))))) (uClip SZ (EucMod a! (uClip SZ 8796093022208)))) (and (=> %%location_label%%44 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 17592186044416) 1))))) (uClip SZ (EucMod a! (uClip SZ 17592186044416)))) (and (=> %%location_label%%45 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 35184372088832) 1))))) (uClip SZ (EucMod a! (uClip SZ 35184372088832)))) (and (=> %%location_label%%46 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 70368744177664) 1))))) (uClip SZ (EucMod a! (uClip SZ 70368744177664)))) (and (=> %%location_label%%47 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 140737488355328) 1))))) (uClip SZ (EucMod a! (uClip SZ 140737488355328)))) (and (=> %%location_label%%48 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 281474976710656) 1))))) (uClip SZ (EucMod a! (uClip SZ 281474976710656)))) (and (=> %%location_label%%49 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 562949953421312) 1))))) (uClip SZ (EucMod a! (uClip SZ 562949953421312)))) (and (=> %%location_label%%50 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 1125899906842624) 1))))) (uClip SZ (EucMod a! (uClip SZ 1125899906842624)))) (and (=> %%location_label%%51 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 2251799813685248) 1))))) (uClip SZ (EucMod a! (uClip SZ 2251799813685248)))) (and (=> %%location_label%%52 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 4503599627370496) 1))))) (uClip SZ (EucMod a! (uClip SZ 4503599627370496)))) (and (=> %%location_label%%53 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 9007199254740992) 1))))) (uClip SZ (EucMod a! (uClip SZ 9007199254740992)))) (and (=> %%location_label%%54 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 18014398509481984) 1))))) (uClip SZ (EucMod a! (uClip SZ 18014398509481984)))) (and (=> %%location_label%%55 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 36028797018963968) 1))))) (uClip SZ (EucMod a! (uClip SZ 36028797018963968)))) (and (=> %%location_label%%56 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 72057594037927936) 1))))) (uClip SZ (EucMod a! (uClip SZ 72057594037927936)))) (and (=> %%location_label%%57 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 144115188075855872) 1))))) (uClip SZ (EucMod a! (uClip SZ 144115188075855872)))) (and (=> %%location_label%%58 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 288230376151711744) 1))))) (uClip SZ (EucMod a! (uClip SZ 288230376151711744)))) (and (=> %%location_label%%59 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 576460752303423488) 1))))) (uClip SZ (EucMod a! (uClip SZ 576460752303423488)))) (and (=> %%location_label%%60 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 1152921504606846976) 1))))) (uClip SZ (EucMod a! (uClip SZ 1152921504606846976)))) (and (=> %%location_label%%61 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 2305843009213693952) 1))))) (uClip SZ (EucMod a! (uClip SZ 2305843009213693952)))) (and (=> %%location_label%%62 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 4611686018427387904) 1))))) (uClip SZ (EucMod a! (uClip SZ 4611686018427387904)))) (and (=> %%location_label%%63 true) (=> (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub (uClip SZ 9223372036854775808) 1))))) (uClip SZ (EucMod a! (uClip SZ 9223372036854775808)))) (=> %%location_label%%64 (= (uClip SZ (uintand SZ (I a!) (I (uClip SZ (Sub b! 1))))) (uClip SZ (EucMod a! b!))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
