(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verismo (https://www.usenix.org/conference/osdi24/presentation/zhou) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module arch::tlb::tlb_p'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.submap_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_int_pow2. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_nat_pow2. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.PAGE_SIZE. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.value. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.to_page. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.to_offset. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.new2. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.value. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.is_valid. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.new. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.new2. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%5.as_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.first. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.offset. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.len. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%8.is_PTE. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivData. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivCode. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivStack. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%8.is_SmBootData. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%8.is_SmVmplPage. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%10.is_sm_int. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%10.is_vm_int. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%10.need_c_bit. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.memtype. FuelId)
(declare-const fuel%verismo!arch.rmp.perm_s.impl&%1.as_int. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.impl&%8.spec_value. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.contains_flag. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_ppn. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.is_encrypted. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.is_present. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page. FuelId)
(declare-const fuel%verismo!arch.pgtable.memmap_s.impl&%0.spec_index. FuelId)
(declare-const fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_valid. FuelId)
(declare-const fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted. FuelId)
(declare-const fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted_or_none. FuelId)
(declare-const fuel%verismo!arch.pgtable.memmap_s.impl&%0.translate. FuelId)
(declare-const fuel%verismo!arch.pgtable.memmap_s.impl&%1.inv_encrypted_priv_mem. FuelId)
(declare-const fuel%verismo!arch.pgtable.memmap_s.impl&%1.need_c_bit. FuelId)
(declare-const fuel%verismo!arch.tlb.def_s.impl&%2.spec_db. FuelId)
(declare-const fuel%verismo!arch.tlb.tlb_s.impl&%0.to_mem_map. FuelId)
(declare-const fuel%verismo!arch.tlb.tlb_u.impl&%0.model1_eq. FuelId)
(declare-const fuel%verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem. FuelId)
(declare-const fuel%verismo!tspec.fmap.impl&%3.spec_index. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!tspec.spec_unused. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.submap_of. fuel%vstd!set.impl&%0.choose. fuel%verismo!tspec.math.pow_s.spec_int_pow2. fuel%verismo!tspec.math.pow_s.spec_nat_pow2. fuel%verismo!arch.addr_s.def_s.PAGE_SIZE. fuel%verismo!arch.addr_s.page.impl&%2.value. fuel%verismo!arch.addr_s.page.impl&%2.to_page. fuel%verismo!arch.addr_s.page.impl&%2.to_offset. fuel%verismo!arch.addr_s.page.impl&%2.new2. fuel%verismo!arch.addr_s.page.impl&%3.value. fuel%verismo!arch.addr_s.page.impl&%3.is_valid. fuel%verismo!arch.addr_s.page.impl&%3.new. fuel%verismo!arch.addr_s.page.impl&%3.new2. fuel%verismo!arch.addr_s.page.impl&%4.as_int. fuel%verismo!arch.addr_s.page.impl&%5.as_int. fuel%verismo!arch.addr_s.page.impl&%8.first. fuel%verismo!arch.addr_s.page.impl&%8.offset. fuel%verismo!arch.addr_s.page.impl&%8.len. fuel%verismo!arch.entities.memtype.impl&%4.as_int. fuel%verismo!arch.entities.memtype.impl&%8.is_PTE. fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivData. fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivCode. fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivStack. fuel%verismo!arch.entities.memtype.impl&%8.is_SmBootData. fuel%verismo!arch.entities.memtype.impl&%8.is_SmVmplPage. fuel%verismo!arch.entities.memtype.impl&%10.is_sm_int. fuel%verismo!arch.entities.memtype.impl&%10.is_vm_int. fuel%verismo!arch.entities.memtype.impl&%10.need_c_bit. fuel%verismo!arch.entities.memtype.memtype. fuel%verismo!arch.rmp.perm_s.impl&%1.as_int. fuel%verismo!arch.pgtable.def.impl&%4.as_int. fuel%verismo!arch.pgtable.def.impl&%8.spec_value. fuel%verismo!arch.pgtable.entry_s.impl&%1.contains_flag. fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_ppn. fuel%verismo!arch.pgtable.entry_s.impl&%1.is_encrypted. fuel%verismo!arch.pgtable.entry_s.impl&%1.is_present. fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page. fuel%verismo!arch.pgtable.memmap_s.impl&%0.spec_index. fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_valid. fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted. fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted_or_none. fuel%verismo!arch.pgtable.memmap_s.impl&%0.translate. fuel%verismo!arch.pgtable.memmap_s.impl&%1.inv_encrypted_priv_mem. fuel%verismo!arch.pgtable.memmap_s.impl&%1.need_c_bit. fuel%verismo!arch.tlb.def_s.impl&%2.spec_db. fuel%verismo!arch.tlb.tlb_s.impl&%0.to_mem_map. fuel%verismo!arch.tlb.tlb_u.impl&%0.model1_eq. fuel%verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem. fuel%verismo!tspec.fmap.impl&%3.spec_index. fuel%verismo!arch.entities.impl&%4.as_int. fuel%verismo!tspec.spec_unused.))
(set-info :comment ";; Datatypes")
(declare-sort verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. 0)
(declare-sort vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. 0)
(declare-sort vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. 0)
(declare-sort vstd!set.Set<verismo!arch.entities.VMPL.>. 0)
(declare-sort vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. 0)
(declare-datatypes ((core!option.Option. 0) (verismo!arch.addr_s.def_s.GuestVir. 0) (verismo!arch.addr_s.def_s.GuestPhy. 0) (verismo!arch.addr_s.def_s.SpecPage. 0) (verismo!arch.addr_s.def_s.SpecAddr. 0) (verismo!arch.addr_s.def_s.SpecMem. 0) (verismo!arch.entities.memid.MemID. 0) (verismo!arch.entities.memtype.PTLevel. 0) (verismo!arch.entities.memtype.MemType. 0) (verismo!arch.rmp.perm_s.Perm. 0) (verismo!arch.pgtable.def.MemMap. 0) (verismo!arch.pgtable.def.PteFlag. 0) (verismo!arch.pgtable.def.SpecPageTableEntry. 0) (verismo!arch.tlb.def_s.TLB. 0) (verismo!arch.entities.VMPL. 0) (tuple%0. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((verismo!arch.addr_s.def_s.GuestVir./GuestVir )) ((verismo!arch.addr_s.def_s.GuestPhy./GuestPhy )) ((verismo!arch.addr_s.def_s.SpecPage./SpecPage (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?value Int) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?dummy Poly))) ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?value Int) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?dummy Poly))) ((verismo!arch.addr_s.def_s.SpecMem./SpecMem (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?first verismo!arch.addr_s.def_s.SpecAddr.) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?size Int))) ((verismo!arch.entities.memid.MemID./Guest (verismo!arch.entities.memid.MemID./Guest/?0 Int) (verismo!arch.entities.memid.MemID./Guest/?1 verismo!arch.entities.VMPL.)) (verismo!arch.entities.memid.MemID./Hv )) ((verismo!arch.entities.memtype.PTLevel./L3 ) (verismo!arch.entities.memtype.PTLevel./L2 ) (verismo!arch.entities.memtype.PTLevel./L1 ) (verismo!arch.entities.memtype.PTLevel./L0 )) ((verismo!arch.entities.memtype.MemType./PTE (verismo!arch.entities.memtype.MemType./PTE/?0 verismo!arch.entities.memtype.PTLevel.)) (verismo!arch.entities.memtype.MemType./SmPrivData ) (verismo!arch.entities.memtype.MemType./SmPrivCode ) (verismo!arch.entities.memtype.MemType./SmPrivStack ) (verismo!arch.entities.memtype.MemType./SmBootData ) (verismo!arch.entities.memtype.MemType./SmVmplPage ) (verismo!arch.entities.memtype.MemType./RichOSMem ) (verismo!arch.entities.memtype.MemType./HvShared )) ((verismo!arch.rmp.perm_s.Perm./Read ) (verismo!arch.rmp.perm_s.Perm./Write ) (verismo!arch.rmp.perm_s.Perm./ExeU ) (verismo!arch.rmp.perm_s.Perm./ExeS ) (verismo!arch.rmp.perm_s.Perm./Shadow )) ((verismo!arch.pgtable.def.MemMap./MemMap (verismo!arch.pgtable.def.MemMap./MemMap/?db Poly))) ((verismo!arch.pgtable.def.PteFlag./P ) (verismo!arch.pgtable.def.PteFlag./W ) (verismo!arch.pgtable.def.PteFlag./S ) (verismo!arch.pgtable.def.PteFlag./PWT ) (verismo!arch.pgtable.def.PteFlag./PCD ) (verismo!arch.pgtable.def.PteFlag./A ) (verismo!arch.pgtable.def.PteFlag./D ) (verismo!arch.pgtable.def.PteFlag./C ) (verismo!arch.pgtable.def.PteFlag./NX )) ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?value Int) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?dummy Poly))) ((verismo!arch.tlb.def_s.TLB./TLB (verismo!arch.tlb.def_s.TLB./TLB/?db verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.))) ((verismo!arch.entities.VMPL./VMPL0 ) (verismo!arch.entities.VMPL./VMPL1 ) (verismo!arch.entities.VMPL./VMPL2 ) (verismo!arch.entities.VMPL./VMPL3 )) ((tuple%0./tuple%0 ))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (verismo!arch.addr_s.def_s.SpecPage.) Int)
(declare-fun verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (verismo!arch.addr_s.def_s.SpecPage.) Poly)
(declare-fun verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (verismo!arch.addr_s.def_s.SpecAddr.) Int)
(declare-fun verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (verismo!arch.addr_s.def_s.SpecAddr.) Poly)
(declare-fun verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (verismo!arch.addr_s.def_s.SpecMem.) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (verismo!arch.addr_s.def_s.SpecMem.) Int)
(declare-fun verismo!arch.entities.memid.MemID./Guest/0 (verismo!arch.entities.memid.MemID.) Int)
(declare-fun verismo!arch.entities.memid.MemID./Guest/1 (verismo!arch.entities.memid.MemID.) verismo!arch.entities.VMPL.)
(declare-fun verismo!arch.entities.memtype.MemType./PTE/0 (verismo!arch.entities.memtype.MemType.) verismo!arch.entities.memtype.PTLevel.)
(declare-fun verismo!arch.pgtable.def.MemMap./MemMap/db (verismo!arch.pgtable.def.MemMap.) Poly)
(declare-fun verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/value (verismo!arch.pgtable.def.SpecPageTableEntry.) Int)
(declare-fun verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy (verismo!arch.pgtable.def.SpecPageTableEntry.) Poly)
(declare-fun verismo!arch.tlb.def_s.TLB./TLB/db (verismo!arch.tlb.def_s.TLB.) verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.addr_s.def_s.GuestVir. Type)
(declare-const TYPE%verismo!arch.addr_s.def_s.GuestPhy. Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecPage. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecAddr. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecMem. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.entities.memid.MemID. Type)
(declare-const TYPE%verismo!arch.entities.memtype.PTLevel. Type)
(declare-const TYPE%verismo!arch.entities.memtype.MemType. Type)
(declare-const TYPE%verismo!arch.rmp.perm_s.Perm. Type)
(declare-fun TYPE%verismo!arch.pgtable.def.MemMap. (Dcr Type Dcr Type) Type)
(declare-const TYPE%verismo!arch.pgtable.def.PteFlag. Type)
(declare-fun TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.tlb.def_s.TLB. Type)
(declare-fun TYPE%verismo!tspec.fmap.FMap. (Dcr Type Dcr Type) Type)
(declare-const TYPE%verismo!arch.entities.VMPL. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.) Poly)
(declare-fun %Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (Poly) verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (Poly) vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (vstd!set.Set<verismo!arch.entities.VMPL.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (Poly) vstd!set.Set<verismo!arch.entities.VMPL.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (Poly) vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%verismo!arch.addr_s.def_s.GuestVir. (verismo!arch.addr_s.def_s.GuestVir.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.GuestVir. (Poly) verismo!arch.addr_s.def_s.GuestVir.)
(declare-fun Poly%verismo!arch.addr_s.def_s.GuestPhy. (verismo!arch.addr_s.def_s.GuestPhy.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.GuestPhy. (Poly) verismo!arch.addr_s.def_s.GuestPhy.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecAddr.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.def_s.SpecMem.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly) verismo!arch.addr_s.def_s.SpecMem.)
(declare-fun Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.MemID.) Poly)
(declare-fun %Poly%verismo!arch.entities.memid.MemID. (Poly) verismo!arch.entities.memid.MemID.)
(declare-fun Poly%verismo!arch.entities.memtype.PTLevel. (verismo!arch.entities.memtype.PTLevel.) Poly)
(declare-fun %Poly%verismo!arch.entities.memtype.PTLevel. (Poly) verismo!arch.entities.memtype.PTLevel.)
(declare-fun Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.MemType.) Poly)
(declare-fun %Poly%verismo!arch.entities.memtype.MemType. (Poly) verismo!arch.entities.memtype.MemType.)
(declare-fun Poly%verismo!arch.rmp.perm_s.Perm. (verismo!arch.rmp.perm_s.Perm.) Poly)
(declare-fun %Poly%verismo!arch.rmp.perm_s.Perm. (Poly) verismo!arch.rmp.perm_s.Perm.)
(declare-fun Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.pgtable.def.MemMap.) Poly)
(declare-fun %Poly%verismo!arch.pgtable.def.MemMap. (Poly) verismo!arch.pgtable.def.MemMap.)
(declare-fun Poly%verismo!arch.pgtable.def.PteFlag. (verismo!arch.pgtable.def.PteFlag.) Poly)
(declare-fun %Poly%verismo!arch.pgtable.def.PteFlag. (Poly) verismo!arch.pgtable.def.PteFlag.)
(declare-fun Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def.SpecPageTableEntry.) Poly)
(declare-fun %Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (Poly) verismo!arch.pgtable.def.SpecPageTableEntry.)
(declare-fun Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.tlb.def_s.TLB.) Poly)
(declare-fun %Poly%verismo!arch.tlb.def_s.TLB. (Poly) verismo!arch.tlb.def_s.TLB.)
(declare-fun Poly%verismo!arch.entities.VMPL. (verismo!arch.entities.VMPL.) Poly)
(declare-fun %Poly%verismo!arch.entities.VMPL. (Poly) verismo!arch.entities.VMPL.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)) (! (= x (%Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. x))) :pattern ((Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) (= x (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (%Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))))))))
(assert (forall ((x verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)) (! (has_type (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. x) (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) :pattern ((has_type (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. x) (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))))))))
(assert (forall ((x vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (= x (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (%Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x) (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x) (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) (= x (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.VMPL.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.)) (= x (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (%Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.VMPL.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (= x (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestVir.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.GuestVir. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.GuestVir. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.addr_s.def_s.GuestVir.) (= x (Poly%verismo!arch.addr_s.def_s.GuestVir. (%Poly%verismo!arch.addr_s.def_s.GuestVir. x)))) :pattern ((has_type x TYPE%verismo!arch.addr_s.def_s.GuestVir.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestVir.)) (! (has_type (Poly%verismo!arch.addr_s.def_s.GuestVir. x) TYPE%verismo!arch.addr_s.def_s.GuestVir.) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.GuestVir. x) TYPE%verismo!arch.addr_s.def_s.GuestVir.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestPhy.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.GuestPhy. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.GuestPhy. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (= x (Poly%verismo!arch.addr_s.def_s.GuestPhy. (%Poly%verismo!arch.addr_s.def_s.GuestPhy. x)))) :pattern ((has_type x TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestPhy.)) (! (has_type (Poly%verismo!arch.addr_s.def_s.GuestPhy. x) TYPE%verismo!arch.addr_s.def_s.GuestPhy.) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.GuestPhy. x) TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly%verismo!arch.addr_s.def_s.SpecPage. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecPage. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecPage. (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! Int) (_dummy! Poly)) (! (=> (and (<= 0 _value!) (has_type _dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage./SpecPage _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage./SpecPage _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value x) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?value x)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?dummy x)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) T&)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(define-fun is-verismo!arch.addr_s.def_s.SpecPage./SpecPage_ ((c verismo!arch.addr_s.def_s.SpecPage.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecPage./SpecPage) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecPage./SpecPage_ x) (height_lt (height (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x)) (height (Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((height (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x))))))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type y (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. y))) (ext_eq deep T& (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. y)))) (ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) x y)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly%verismo!arch.addr_s.def_s.SpecAddr. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecAddr. (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! Int) (_dummy! Poly)) (! (=> (and (<= 0 _value!) (has_type _dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value x) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?value x)) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?dummy x)) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) T&)) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(define-fun is-verismo!arch.addr_s.def_s.SpecAddr./SpecAddr_ ((c verismo!arch.addr_s.def_s.SpecAddr.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecAddr./SpecAddr) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecAddr./SpecAddr_ x) (height_lt (height (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x)) (height (Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))) :pattern ((height (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x))))))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type y (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. y))) (ext_eq deep T& (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. y)))) (ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) x y)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecMem. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecMem. (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_first! verismo!arch.addr_s.def_s.SpecAddr.) (_size! Int)) (! (=> (and (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. _first!) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (<= 0 _size!)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.def_s.SpecMem./SpecMem _first! _size!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.def_s.SpecMem./SpecMem _first! _size!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (= (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?first x)) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. x))) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (= (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size x) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?size x)) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/size x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(define-fun is-verismo!arch.addr_s.def_s.SpecMem./SpecMem_ ((c verismo!arch.addr_s.def_s.SpecMem.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecMem./SpecMem) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecMem./SpecMem_ x) (height_lt (height (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x))) (height (Poly%verismo!arch.addr_s.def_s.SpecMem. x)))) :pattern ((height (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x)))))))
(assert (forall ((x verismo!arch.entities.memid.MemID.)) (! (= x (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. x))) :pattern ((Poly%verismo!arch.entities.memid.MemID. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memid.MemID.) (= x (Poly%verismo!arch.entities.memid.MemID. (%Poly%verismo!arch.entities.memid.MemID. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.memid.MemID.)))))
(assert (forall ((_0! Int) (_1! verismo!arch.entities.VMPL.)) (! (=> (<= 0 _0!) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.MemID./Guest _0! _1!)) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.MemID./Guest _0! _1!)) TYPE%verismo!arch.entities.memid.MemID.)))))
(assert (forall ((x verismo!arch.entities.memid.MemID.)) (! (= (verismo!arch.entities.memid.MemID./Guest/0 x) (verismo!arch.entities.memid.MemID./Guest/?0 x)) :pattern ((verismo!arch.entities.memid.MemID./Guest/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memid.MemID.) (<= 0 (verismo!arch.entities.memid.MemID./Guest/0 (%Poly%verismo!arch.entities.memid.MemID. x)))) :pattern ((verismo!arch.entities.memid.MemID./Guest/0 (%Poly%verismo!arch.entities.memid.MemID. x)) (has_type x TYPE%verismo!arch.entities.memid.MemID.)))))
(assert (forall ((x verismo!arch.entities.memid.MemID.)) (! (= (verismo!arch.entities.memid.MemID./Guest/1 x) (verismo!arch.entities.memid.MemID./Guest/?1 x)) :pattern ((verismo!arch.entities.memid.MemID./Guest/1 x)))))
(assert (has_type (Poly%verismo!arch.entities.memid.MemID. verismo!arch.entities.memid.MemID./Hv) TYPE%verismo!arch.entities.memid.MemID.))
(assert (forall ((x verismo!arch.entities.memtype.PTLevel.)) (! (= x (%Poly%verismo!arch.entities.memtype.PTLevel. (Poly%verismo!arch.entities.memtype.PTLevel. x))) :pattern ((Poly%verismo!arch.entities.memtype.PTLevel. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memtype.PTLevel.) (= x (Poly%verismo!arch.entities.memtype.PTLevel. (%Poly%verismo!arch.entities.memtype.PTLevel. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.memtype.PTLevel.)))))
(assert (forall ((x verismo!arch.entities.memtype.PTLevel.)) (! (has_type (Poly%verismo!arch.entities.memtype.PTLevel. x) TYPE%verismo!arch.entities.memtype.PTLevel.) :pattern ((has_type (Poly%verismo!arch.entities.memtype.PTLevel. x) TYPE%verismo!arch.entities.memtype.PTLevel.)))))
(assert (forall ((x verismo!arch.entities.memtype.MemType.)) (! (= x (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. x))) :pattern ((Poly%verismo!arch.entities.memtype.MemType. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memtype.MemType.) (= x (Poly%verismo!arch.entities.memtype.MemType. (%Poly%verismo!arch.entities.memtype.MemType. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.memtype.MemType.)))))
(assert (forall ((x verismo!arch.entities.memtype.MemType.)) (! (= (verismo!arch.entities.memtype.MemType./PTE/0 x) (verismo!arch.entities.memtype.MemType./PTE/?0 x)) :pattern ((verismo!arch.entities.memtype.MemType./PTE/0 x)))))
(assert (forall ((x verismo!arch.entities.memtype.MemType.)) (! (has_type (Poly%verismo!arch.entities.memtype.MemType. x) TYPE%verismo!arch.entities.memtype.MemType.) :pattern ((has_type (Poly%verismo!arch.entities.memtype.MemType. x) TYPE%verismo!arch.entities.memtype.MemType.)))))
(assert (forall ((x verismo!arch.rmp.perm_s.Perm.)) (! (= x (%Poly%verismo!arch.rmp.perm_s.Perm. (Poly%verismo!arch.rmp.perm_s.Perm. x))) :pattern ((Poly%verismo!arch.rmp.perm_s.Perm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.perm_s.Perm.) (= x (Poly%verismo!arch.rmp.perm_s.Perm. (%Poly%verismo!arch.rmp.perm_s.Perm. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.perm_s.Perm.)))))
(assert (forall ((x verismo!arch.rmp.perm_s.Perm.)) (! (has_type (Poly%verismo!arch.rmp.perm_s.Perm. x) TYPE%verismo!arch.rmp.perm_s.Perm.) :pattern ((has_type (Poly%verismo!arch.rmp.perm_s.Perm. x) TYPE%verismo!arch.rmp.perm_s.Perm.)))))
(assert (forall ((x verismo!arch.pgtable.def.MemMap.)) (! (= x (%Poly%verismo!arch.pgtable.def.MemMap. (Poly%verismo!arch.pgtable.def.MemMap. x))) :pattern ((Poly%verismo!arch.pgtable.def.MemMap. x)))))
(assert (forall ((T&. Dcr) (T& Type) (PT&. Dcr) (PT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&)) (= x (Poly%verismo!arch.pgtable.def.MemMap. (%Poly%verismo!arch.pgtable.def.MemMap. x)))) :pattern ((has_type x (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&))))))
(assert (forall ((T&. Dcr) (T& Type) (PT&. Dcr) (PT& Type) (_db! Poly)) (! (=> (has_type _db! (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&))) (has_type (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.pgtable.def.MemMap./MemMap _db!)) (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&))) :pattern ((has_type (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.pgtable.def.MemMap./MemMap _db!)) (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&))))))
(assert (forall ((x verismo!arch.pgtable.def.MemMap.)) (! (= (verismo!arch.pgtable.def.MemMap./MemMap/db x) (verismo!arch.pgtable.def.MemMap./MemMap/?db x)) :pattern ((verismo!arch.pgtable.def.MemMap./MemMap/db x)))))
(assert (forall ((T&. Dcr) (T& Type) (PT&. Dcr) (PT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&)) (has_type (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. x)) (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&)))) :pattern ((verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. x)) (has_type x (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&))))))
(define-fun is-verismo!arch.pgtable.def.MemMap./MemMap_ ((c verismo!arch.pgtable.def.MemMap.)) Bool ((_ is verismo!arch.pgtable.def.MemMap./MemMap) c))
(assert (forall ((x verismo!arch.pgtable.def.MemMap.)) (! (=> (is-verismo!arch.pgtable.def.MemMap./MemMap_ x) (height_lt (height (verismo!arch.pgtable.def.MemMap./MemMap/db x)) (height (Poly%verismo!arch.pgtable.def.MemMap. x)))) :pattern ((height (verismo!arch.pgtable.def.MemMap./MemMap/db x))))))
(assert (forall ((x verismo!arch.pgtable.def.PteFlag.)) (! (= x (%Poly%verismo!arch.pgtable.def.PteFlag. (Poly%verismo!arch.pgtable.def.PteFlag. x))) :pattern ((Poly%verismo!arch.pgtable.def.PteFlag. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.pgtable.def.PteFlag.) (= x (Poly%verismo!arch.pgtable.def.PteFlag. (%Poly%verismo!arch.pgtable.def.PteFlag. x)))) :pattern ((has_type x TYPE%verismo!arch.pgtable.def.PteFlag.)))))
(assert (forall ((x verismo!arch.pgtable.def.PteFlag.)) (! (has_type (Poly%verismo!arch.pgtable.def.PteFlag. x) TYPE%verismo!arch.pgtable.def.PteFlag.) :pattern ((has_type (Poly%verismo!arch.pgtable.def.PteFlag. x) TYPE%verismo!arch.pgtable.def.PteFlag.)))))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (= x (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x))) :pattern ((Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (= x (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)))) :pattern ((has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! Int) (_dummy! Poly)) (! (=> (has_type _dummy! T&) (has_type (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry _value! _dummy!)) (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))) :pattern ((has_type (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry _value! _dummy!)) (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))))))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (= (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/value x) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?value x)) :pattern ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/value x)))))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (= (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?dummy x)) :pattern ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (has_type (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)) T&)) :pattern ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)) (has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))))))
(define-fun is-verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry_ ((c verismo!arch.pgtable.def.SpecPageTableEntry.)) Bool ((_ is verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry) c))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (=> (is-verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry_ x) (height_lt (height (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x)) (height (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)))) :pattern ((height (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x))))))
(assert (forall ((x verismo!arch.tlb.def_s.TLB.)) (! (= x (%Poly%verismo!arch.tlb.def_s.TLB. (Poly%verismo!arch.tlb.def_s.TLB. x))) :pattern ((Poly%verismo!arch.tlb.def_s.TLB. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.tlb.def_s.TLB.) (= x (Poly%verismo!arch.tlb.def_s.TLB. (%Poly%verismo!arch.tlb.def_s.TLB. x)))) :pattern ((has_type x TYPE%verismo!arch.tlb.def_s.TLB.)))))
(assert (forall ((x verismo!arch.tlb.def_s.TLB.)) (! (= (verismo!arch.tlb.def_s.TLB./TLB/db x) (verismo!arch.tlb.def_s.TLB./TLB/?db x)) :pattern ((verismo!arch.tlb.def_s.TLB./TLB/db x)))))
(assert (forall ((x verismo!arch.tlb.def_s.TLB.)) (! (has_type (Poly%verismo!arch.tlb.def_s.TLB. x) TYPE%verismo!arch.tlb.def_s.TLB.) :pattern ((has_type (Poly%verismo!arch.tlb.def_s.TLB. x) TYPE%verismo!arch.tlb.def_s.TLB.)))))
(assert (forall ((x verismo!arch.entities.VMPL.)) (! (= x (%Poly%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. x))) :pattern ((Poly%verismo!arch.entities.VMPL. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.VMPL.) (= x (Poly%verismo!arch.entities.VMPL. (%Poly%verismo!arch.entities.VMPL. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.VMPL.)))))
(assert (forall ((x verismo!arch.entities.VMPL.)) (! (has_type (Poly%verismo!arch.entities.VMPL. x) TYPE%verismo!arch.entities.VMPL.) :pattern ((has_type (Poly%verismo!arch.entities.VMPL. x) TYPE%verismo!arch.entities.VMPL.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.integer.IntValue. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!arch.addr_s.def_s.AddrType. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!arch.attack.Model1Eq. (Dcr Type) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::layout::size_of")
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::submap_of")
(declare-fun vstd!map_lib.impl&%0.submap_of.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::math::pow_s::spec_int_pow2")
(declare-fun verismo!tspec.math.pow_s.spec_int_pow2.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::tspec::math::pow_s::spec_nat_pow2")
(declare-fun verismo!tspec.math.pow_s.spec_nat_pow2.? (Poly) Int)
(declare-fun verismo!tspec.math.pow_s.rec%spec_nat_pow2.? (Poly Fuel) Int)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::PAGE_SIZE")
(declare-fun verismo!arch.addr_s.def_s.PAGE_SIZE.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecAddr::value")
(declare-fun verismo!arch.addr_s.page.impl&%2.value.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecAddr::to_page")
(declare-fun verismo!arch.addr_s.page.impl&%2.to_page.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecPage.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecAddr::to_offset")
(declare-fun verismo!arch.addr_s.page.impl&%2.to_offset.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecAddr::new2")
(declare-fun verismo!arch.addr_s.page.impl&%2.new2.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecPage::value")
(declare-fun verismo!arch.addr_s.page.impl&%3.value.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecPage::is_valid")
(declare-fun verismo!arch.addr_s.page.impl&%3.is_valid.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecPage::new")
(declare-fun verismo!arch.addr_s.page.impl&%3.new.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecPage.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecPage::new2")
(declare-fun verismo!arch.addr_s.page.impl&%3.new2.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecPage.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecMem::first")
(declare-fun verismo!arch.addr_s.page.impl&%8.first.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecMem::offset")
(declare-fun verismo!arch.addr_s.page.impl&%8.offset.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecMem::len")
(declare-fun verismo!arch.addr_s.page.impl&%8.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_PTE")
(declare-fun verismo!arch.entities.memtype.impl&%8.is_PTE.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_SmPrivData")
(declare-fun verismo!arch.entities.memtype.impl&%8.is_SmPrivData.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_SmPrivCode")
(declare-fun verismo!arch.entities.memtype.impl&%8.is_SmPrivCode.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_SmPrivStack")
(declare-fun verismo!arch.entities.memtype.impl&%8.is_SmPrivStack.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_SmBootData")
(declare-fun verismo!arch.entities.memtype.impl&%8.is_SmBootData.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_SmVmplPage")
(declare-fun verismo!arch.entities.memtype.impl&%8.is_SmVmplPage.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_sm_int")
(declare-fun verismo!arch.entities.memtype.impl&%10.is_sm_int.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_vm_int")
(declare-fun verismo!arch.entities.memtype.impl&%10.is_vm_int.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::need_c_bit")
(declare-fun verismo!arch.entities.memtype.impl&%10.need_c_bit.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::memtype_inner")
(declare-fun verismo!arch.entities.memtype.memtype_inner.? (Poly) verismo!arch.entities.memtype.MemType.)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::memtype")
(declare-fun verismo!arch.entities.memtype.memtype.? (Poly Poly) verismo!arch.entities.memtype.MemType.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::SpecPageTableEntry::spec_value")
(declare-fun verismo!arch.pgtable.def.impl&%8.spec_value.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::spec_page_frame_bits")
(declare-fun verismo!arch.pgtable.def.spec_page_frame_bits.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::SpecPageTableEntry::contains_flag")
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.contains_flag.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::SpecPageTableEntry::spec_ppn")
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecPage.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::SpecPageTableEntry::is_encrypted")
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.is_encrypted.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::SpecPageTableEntry::is_present")
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.is_present.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::SpecPageTableEntry::spec_translate_page")
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.? (Dcr Type Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::MemMap::spec_index")
(declare-fun verismo!arch.pgtable.memmap_s.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::MemMap::is_valid")
(declare-fun verismo!arch.pgtable.memmap_s.impl&%0.is_valid.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::MemMap::is_encrypted")
(declare-fun verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.? (Dcr Type Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::MemMap::is_encrypted_or_none")
(declare-fun verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted_or_none.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::MemMap::translate")
(declare-fun verismo!arch.pgtable.memmap_s.impl&%0.translate.? (Dcr Type Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::MemMap::inv_encrypted_priv_mem")
(declare-fun verismo!arch.pgtable.memmap_s.impl&%1.inv_encrypted_priv_mem.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::MemMap::need_c_bit")
(declare-fun verismo!arch.pgtable.memmap_s.impl&%1.need_c_bit.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::tlb::def_s::TLB::spec_new")
(declare-fun verismo!arch.tlb.def_s.impl&%1.spec_new.? (Poly) verismo!arch.tlb.def_s.TLB.)
(set-info :comment ";; Function-Decl verismo::arch::tlb::def_s::TLB::spec_db")
(declare-fun verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly) verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)
(set-info :comment ";; Function-Decl verismo::arch::tlb::def_s::TLB::to_mem_map")
(declare-fun verismo!arch.tlb.tlb_s.impl&%0.to_mem_map.? (Poly Poly) verismo!arch.pgtable.def.MemMap.)
(set-info :comment ";; Function-Decl verismo::arch::tlb::def_s::TLB::inv_encrypted_priv_mem")
(declare-fun verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::fmap::FMap::spec_map")
(declare-fun verismo!tspec.fmap.impl&%0.spec_map.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::fmap::FMap::spec_new")
(declare-fun verismo!tspec.fmap.impl&%2.spec_new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::fmap::FMap::spec_index")
(declare-fun verismo!tspec.fmap.impl&%3.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::integer::IntValue::as_int")
(declare-fun verismo!tspec.integer.IntValue.as_int.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntValue.as_int%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::arch::attack::Model1Eq::model1_eq")
(declare-fun verismo!arch.attack.Model1Eq.model1_eq.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun verismo!arch.attack.Model1Eq.model1_eq%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::spec_unused")
(declare-fun verismo!tspec.spec_unused.? (Dcr Type) Poly)
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::layout::size_of")
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.size_of.? V&. V&)) :pattern ((vstd!layout.size_of.? V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%0 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%1 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%2 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%6 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%8 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%9 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%10 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%11 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%12 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%13 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%14 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%15 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%16 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%17 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%18 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)))) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%19 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%20 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%21 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%22 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%23 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%24 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%25 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::submap_of")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.submap_of.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.submap_of.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$))))) :pattern ((vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::IntValue::as_int")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.integer.IntValue.as_int.? Self%&. Self%& self!) INT)) :pattern ((verismo!tspec.integer.IntValue.as_int.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::VMPL::as_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%4.as_int.))
(define-fun is-verismo!arch.entities.VMPL./VMPL0_ ((c verismo!arch.entities.VMPL.)) Bool ((_ is verismo!arch.entities.VMPL./VMPL0) c))
(define-fun is-verismo!arch.entities.VMPL./VMPL1_ ((c verismo!arch.entities.VMPL.)) Bool ((_ is verismo!arch.entities.VMPL./VMPL1) c))
(define-fun is-verismo!arch.entities.VMPL./VMPL2_ ((c verismo!arch.entities.VMPL.)) Bool ((_ is verismo!arch.entities.VMPL./VMPL2) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%4.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. self!) (I (let ((val$ (ite (is-verismo!arch.entities.VMPL./VMPL0_ (%Poly%verismo!arch.entities.VMPL. self!)) 0 (ite (is-verismo!arch.entities.VMPL./VMPL1_ (%Poly%verismo!arch.entities.VMPL. self!)) 1 (ite (is-verismo!arch.entities.VMPL./VMPL2_ (%Poly%verismo!arch.entities.VMPL. self!)) 2 3))))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::PAGE_SIZE")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.PAGE_SIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.PAGE_SIZE.) (= verismo!arch.addr_s.def_s.PAGE_SIZE.? 4096)))
(assert (uInv SZ verismo!arch.addr_s.def_s.PAGE_SIZE.?))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecPage::new2")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.new2.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.new2.) (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!) (verismo!arch.addr_s.def_s.SpecPage./SpecPage (%I (I (nClip (%I val!)))) dummy!)) :pattern ((verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (=> (and (has_type val! INT) (has_type dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::spec_unused")
(assert (fuel_bool_default fuel%verismo!tspec.spec_unused.))
(assert (=> (fuel_bool fuel%verismo!tspec.spec_unused.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.spec_unused.? T&. T&) (vstd!pervasive.arbitrary.? T&. T&)) :pattern ((verismo!tspec.spec_unused.? T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (verismo!tspec.spec_unused.? T&. T&) T&) :pattern ((verismo!tspec.spec_unused.? T&. T&)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecPage::new")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.new.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.new.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!) (verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecAddr::as_int")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%5.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%5.as_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!) (I (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. self!)))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecAddr::value")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.value.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.value.? T&. T& self!) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!))) :pattern ((verismo!arch.addr_s.page.impl&%2.value.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecAddr::to_page")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.to_page.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.to_page.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!) (verismo!arch.addr_s.page.impl&%3.new.? T&. T& (I (EucDiv (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!)) 4096)))) :pattern ((verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecAddr::new2")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.new2.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.new2.) (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr (%I (I (nClip (%I val!)))) dummy!)) :pattern ((verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (=> (and (has_type val! INT) (has_type dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!arch.addr_s.def_s.AddrType. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecPage::as_int")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%4.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%4.as_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!) (I (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!)))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecPage::value")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.value.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!))) :pattern ((verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fmap::FMap::spec_new")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (map! Poly)) (! (=> (has_type map! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& map!) (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&))) :pattern ((verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& map!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fmap::FMap::spec_map")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fmap::FMap::spec_index")
(assert (fuel_bool_default fuel%verismo!tspec.fmap.impl&%3.spec_index.))
(assert (=> (fuel_bool fuel%verismo!tspec.fmap.impl&%3.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (verismo!tspec.fmap.impl&%3.spec_index.? K&. K& V&. V& self! k!) (vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) k!)) :pattern ((verismo!tspec.fmap.impl&%3.spec_index.? K&. K& V&. V& self! k!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type k! K&)) (has_type (verismo!tspec.fmap.impl&%3.spec_index.? K&. K& V&. V& self! k!) V&)) :pattern ((verismo!tspec.fmap.impl&%3.spec_index.? K&. K& V&. V& self! k!)))))
(set-info :comment ";; Function-Specs verismo::arch::addr_s::def_s::SpecAddr::axiom_equal")
(declare-fun ens%verismo!arch.addr_s.page.impl&%0.axiom_equal. (Dcr Type verismo!arch.addr_s.def_s.SpecAddr. verismo!arch.addr_s.def_s.SpecAddr.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (left! verismo!arch.addr_s.def_s.SpecAddr.) (right! verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (ens%verismo!arch.addr_s.page.impl&%0.axiom_equal. T&. T& left! right!) (and (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. left!))) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. right!)))) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. left!) (Poly%verismo!arch.addr_s.def_s.SpecAddr. right!))) (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. left!))) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. right!)))) (= left! right!)))) :pattern ((ens%verismo!arch.addr_s.page.impl&%0.axiom_equal. T&. T& left! right!)))))
(set-info :comment ";; Broadcast verismo::arch::addr_s::def_s::SpecAddr::axiom_equal")
(assert (forall ((T&. Dcr) (T& Type) (left! Poly) (right! Poly)) (! (=> (and (has_type left! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type right! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) (and (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left!)) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) right!))) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left! right!)) (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left!)) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) right!))) (= left! right!)))) :pattern ((ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left! right!)))))
(set-info :comment ";; Function-Specs verismo::arch::addr_s::def_s::SpecAddr::axiom_addr_type_dummy_holder")
(declare-fun ens%verismo!arch.addr_s.page.impl&%0.axiom_addr_type_dummy_holder. (Dcr Type verismo!arch.addr_s.def_s.SpecAddr.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (ens%verismo!arch.addr_s.page.impl&%0.axiom_addr_type_dummy_holder. T&. T& self!) (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly%verismo!arch.addr_s.def_s.SpecAddr. self!))) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((ens%verismo!arch.addr_s.page.impl&%0.axiom_addr_type_dummy_holder. T&. T& self!)))))
(set-info :comment ";; Broadcast verismo::arch::addr_s::def_s::SpecAddr::axiom_addr_type_dummy_holder")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&)))))
(set-info :comment ";; Function-Specs verismo::arch::addr_s::def_s::SpecPage::axiom_equal")
(declare-fun ens%verismo!arch.addr_s.page.impl&%1.axiom_equal. (Dcr Type verismo!arch.addr_s.def_s.SpecPage. verismo!arch.addr_s.def_s.SpecPage.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (left! verismo!arch.addr_s.def_s.SpecPage.) (right! verismo!arch.addr_s.def_s.SpecPage.)) (! (= (ens%verismo!arch.addr_s.page.impl&%1.axiom_equal. T&. T& left! right!) (and (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. left!)) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. right!))) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecPage. left!) (Poly%verismo!arch.addr_s.def_s.SpecPage. right!))) (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. left!)) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. right!))) (= left! right!)))) :pattern ((ens%verismo!arch.addr_s.page.impl&%1.axiom_equal. T&. T& left! right!)))))
(set-info :comment ";; Broadcast verismo::arch::addr_s::def_s::SpecPage::axiom_equal")
(assert (forall ((T&. Dcr) (T& Type) (left! Poly) (right! Poly)) (! (=> (and (has_type left! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type right! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) (and (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& left!) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& right!)) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) left! right!)) (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& left!) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& right!)) (= left! right!)))) :pattern ((ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) left! right!)))))
(set-info :comment ";; Function-Specs verismo::arch::addr_s::def_s::SpecPage::axiom_addr_type_dummy_holder")
(declare-fun ens%verismo!arch.addr_s.page.impl&%1.axiom_addr_type_dummy_holder. (Dcr Type verismo!arch.addr_s.def_s.SpecPage.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.addr_s.def_s.SpecPage.)) (! (= (ens%verismo!arch.addr_s.page.impl&%1.axiom_addr_type_dummy_holder. T&. T& self!) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly%verismo!arch.addr_s.def_s.SpecPage. self!))) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((ens%verismo!arch.addr_s.page.impl&%1.axiom_addr_type_dummy_holder. T&. T& self!)))))
(set-info :comment ";; Broadcast verismo::arch::addr_s::def_s::SpecPage::axiom_addr_type_dummy_holder")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecAddr::to_offset")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.to_offset.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.to_offset.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& self!) (EucMod (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!)) verismo!arch.addr_s.def_s.PAGE_SIZE.?)) :pattern ((verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecMem::first")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.first.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.first.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecMem::offset")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.offset.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.offset.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) (nClip (verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!)))))) :pattern ((verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (<= 0 (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecMem::len")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.len.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.len.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (<= 0 (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!)))))
(set-info :comment ";; Function-Specs verismo::arch::addr_s::def_s::SpecMem::axiom_inv")
(declare-fun ens%verismo!arch.addr_s.page.impl&%8.axiom_inv. (Dcr Type verismo!arch.addr_s.def_s.SpecMem.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.addr_s.def_s.SpecMem.)) (! (= (ens%verismo!arch.addr_s.page.impl&%8.axiom_inv. T&. T& self!) (and (<= (nClip (Add (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecMem. self!)) (verismo!arch.addr_s.page.impl&%8.len.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecMem. self!)))) 4096) (< (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecMem. self!)) 4096))) :pattern ((ens%verismo!arch.addr_s.page.impl&%8.axiom_inv. T&. T& self!)))))
(set-info :comment ";; Broadcast verismo::arch::addr_s::def_s::SpecMem::axiom_inv")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (and (<= (nClip (Add (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!))) 4096) (< (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) 4096))) :pattern ((verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!)) :pattern ((verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!)))))
(set-info :comment ";; Function-Specs verismo::arch::rmp::perm_s::rmp_perm_track_dom")
(declare-fun ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. (vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. verismo!arch.entities.VMPL.) Bool)
(assert (forall ((p! vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) (vmpl! verismo!arch.entities.VMPL.)) (! (= (ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. p! vmpl!) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. p!)) (Poly%verismo!arch.entities.VMPL. vmpl!))) :pattern ((ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. p! vmpl!)))))
(set-info :comment ";; Broadcast verismo::arch::rmp::perm_s::rmp_perm_track_dom")
(assert (forall ((p! Poly) (vmpl! Poly)) (! (=> (and (has_type p! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) (has_type vmpl! TYPE%verismo!arch.entities.VMPL.)) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) p!) vmpl!)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) p!) vmpl!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::spec_page_frame_bits")
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (uInv 64 (verismo!arch.pgtable.def.spec_page_frame_bits.? no%param))) :pattern ((verismo!arch.pgtable.def.spec_page_frame_bits.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecPage::is_valid")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.is_valid.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.is_valid.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.is_valid.? T&. T& self!) (let ((tmp%%$ (verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!))) (and (<= 0 tmp%%$) (< tmp%%$ 1099511627776)))) :pattern ((verismo!arch.addr_s.page.impl&%3.is_valid.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::MemMap::spec_index")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.memmap_s.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.memmap_s.impl&%0.spec_index.) (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly) (vpage! Poly)) (! (= (verismo!arch.pgtable.memmap_s.impl&%0.spec_index.? VT&. VT& PT&. PT& self! vpage!) (ite (vstd!set.impl&%0.contains.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. self!))) vpage!) (core!option.Option./Some (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. self!)) vpage!)) core!option.Option./None)) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.spec_index.? VT&. VT& PT&. PT& self! vpage!))))))
(assert (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly) (vpage! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.pgtable.def.MemMap. VT&. VT& PT&. PT&)) (has_type vpage! (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&))) (has_type (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.spec_index.? VT&. VT& PT&. PT& self! vpage!)) (TYPE%core!option.Option. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&)))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.spec_index.? VT&. VT& PT&. PT& self! vpage!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::SpecPageTableEntry::spec_value")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.impl&%8.spec_value.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.impl&%8.spec_value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.pgtable.def.impl&%8.spec_value.? T&. T& self!) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/value (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. self!))) :pattern ((verismo!arch.pgtable.def.impl&%8.spec_value.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::pow_s::spec_nat_pow2")
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_nat_pow2.))
(declare-const fuel_nat%verismo!tspec.math.pow_s.spec_nat_pow2. Fuel)
(assert (forall ((e! Poly) (fuel% Fuel)) (! (= (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! fuel%) (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! zero)) :pattern ((verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! fuel%)))))
(assert (forall ((e! Poly) (fuel% Fuel)) (! (=> (has_type e! NAT) (= (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel%)) (ite (= (%I e!) 0) 1 (Mul 2 (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? (I (nClip (Sub (%I e!) 1))) fuel%))))) :pattern ((verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel%))))))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_nat_pow2.) (forall ((e! Poly)) (! (=> (has_type e! NAT) (= (verismo!tspec.math.pow_s.spec_nat_pow2.? e!) (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel_nat%verismo!tspec.math.pow_s.spec_nat_pow2.)))) :pattern ((verismo!tspec.math.pow_s.spec_nat_pow2.? e!))))))
(set-info :comment ";; Function-Specs verismo::tspec::math::pow_s::spec_int_pow2")
(declare-fun req%verismo!tspec.math.pow_s.spec_int_pow2. (Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((offset! Poly)) (! (= (req%verismo!tspec.math.pow_s.spec_int_pow2. offset!) (=> %%global_location_label%%26 (>= (%I offset!) 0))) :pattern ((req%verismo!tspec.math.pow_s.spec_int_pow2. offset!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::pow_s::spec_int_pow2")
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_int_pow2.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_int_pow2.) (forall ((offset! Poly)) (! (= (verismo!tspec.math.pow_s.spec_int_pow2.? offset!) (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (nClip (%I offset!))))) :pattern ((verismo!tspec.math.pow_s.spec_int_pow2.? offset!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::PteFlag::as_int")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.impl&%4.as_int.))
(define-fun is-verismo!arch.pgtable.def.PteFlag./P_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./P) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./W_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./W) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./S_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./S) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./PWT_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./PWT) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./PCD_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./PCD) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./A_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./A) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./D_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./D) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./C_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./C) c))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.impl&%4.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. self!) (I (let ((val$ (ite (is-verismo!arch.pgtable.def.PteFlag./P_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 0 (ite (is-verismo!arch.pgtable.def.PteFlag./W_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 1 (ite (is-verismo!arch.pgtable.def.PteFlag./S_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 2 (ite (is-verismo!arch.pgtable.def.PteFlag./PWT_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 3 (ite (is-verismo!arch.pgtable.def.PteFlag./PCD_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 4 (ite (is-verismo!arch.pgtable.def.PteFlag./A_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 5 (ite (is-verismo!arch.pgtable.def.PteFlag./D_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 6 (ite (is-verismo!arch.pgtable.def.PteFlag./C_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 51 63)))))))))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::SpecPageTableEntry::contains_flag")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.contains_flag.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.contains_flag.) (forall ((T&. Dcr) (T& Type) (self! Poly) (flag! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.contains_flag.? T&. T& self! flag!) (= (EucMod (EucDiv (verismo!arch.pgtable.def.impl&%8.spec_value.? T&. T& self!) (verismo!tspec.math.pow_s.spec_int_pow2.? (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. flag!))) 2) 1)) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.contains_flag.? T&. T& self! flag!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::SpecPageTableEntry::is_present")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.is_present.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.is_present.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.is_present.? T&. T& self!) (verismo!arch.pgtable.entry_s.impl&%1.contains_flag.? T&. T& self! (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./P))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.is_present.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::SpecPageTableEntry::spec_ppn")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!) (let ((bits$ (verismo!arch.pgtable.def.spec_page_frame_bits.? (I 0)))) (let ((addr$ (EucMod (verismo!arch.pgtable.def.impl&%8.spec_value.? T&. T& self!) (uClip 64 (uintshl 64 (I 1) (I (uClip 64 bits$))))))) (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& (I addr$) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. self!)))))))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::SpecPageTableEntry::spec_translate_page")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.) (forall ((T&. Dcr) (T& Type) (VT&. Dcr) (VT& Type) (self! Poly) (v! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.? T&. T& VT&. VT& self! v!) (ite (verismo!arch.pgtable.entry_s.impl&%1.is_present.? T&. T& self!) (core!option.Option./Some (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!))) core!option.Option./None)) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.? T&. T& VT&. VT& self! v!))))))
(assert (forall ((T&. Dcr) (T& Type) (VT&. Dcr) (VT& Type) (self! Poly) (v! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (has_type v! (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&))) (has_type (Poly%core!option.Option. (verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.? T&. T& VT&. VT& self! v!)) (TYPE%core!option.Option. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.? T&. T& VT&. VT& self! v!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::MemMap::translate")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.memmap_s.impl&%0.translate.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.memmap_s.impl&%0.translate.) (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly) (vpage! Poly)) (! (= (verismo!arch.pgtable.memmap_s.impl&%0.translate.? VT&. VT& PT&. PT& self! vpage!) (let ((entry$ (ite (vstd!set.impl&%0.contains.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. self!))) vpage!) (core!option.Option./Some (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. self!)) vpage!)) core!option.Option./None))) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. entry$))))) (verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.? PT&. PT& VT&. VT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. entry$))) vpage!) core!option.Option./None))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.translate.? VT&. VT& PT&. PT& self! vpage!))))))
(assert (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly) (vpage! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.pgtable.def.MemMap. VT&. VT& PT&. PT&)) (has_type vpage! (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&))) (has_type (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? VT&. VT& PT&. PT& self! vpage!)) (TYPE%core!option.Option. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. PT&. PT&)))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.translate.? VT&. VT& PT&. PT& self! vpage!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::MemMap::is_valid")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_valid.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_valid.) (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly)) (! (= (verismo!arch.pgtable.memmap_s.impl&%0.is_valid.? VT&. VT& PT&. PT& self!) (forall ((page$ Poly)) (! (=> (has_type page$ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&)) (=> (and (verismo!arch.addr_s.page.impl&%3.is_valid.? VT&. VT& page$) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? VT&. VT& PT&. PT& self! page$))))))) (verismo!arch.addr_s.page.impl&%3.is_valid.? PT&. PT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? VT&. VT& PT&. PT& self! page$))))))) :pattern ((verismo!arch.addr_s.page.impl&%3.is_valid.? VT&. VT& page$))))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.is_valid.? VT&. VT& PT&. PT& self!))))))
(set-info :comment ";; Function-Specs verismo::arch::pgtable::def::MemMap::axiom_is_valid")
(declare-fun ens%verismo!arch.pgtable.memmap_s.impl&%0.axiom_is_valid. (Dcr Type Dcr Type verismo!arch.pgtable.def.MemMap.) Bool)
(assert (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! verismo!arch.pgtable.def.MemMap.)) (! (= (ens%verismo!arch.pgtable.memmap_s.impl&%0.axiom_is_valid. VT&. VT& PT&. PT& self!) (verismo!arch.pgtable.memmap_s.impl&%0.is_valid.? VT&. VT& PT&. PT& (Poly%verismo!arch.pgtable.def.MemMap. self!))) :pattern ((ens%verismo!arch.pgtable.memmap_s.impl&%0.axiom_is_valid. VT&. VT& PT&. PT& self!)))))
(set-info :comment ";; Broadcast verismo::arch::pgtable::def::MemMap::axiom_is_valid")
(assert (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.pgtable.def.MemMap. VT&. VT& PT&. PT&)) (=> (and (tr_bound%verismo!arch.addr_s.def_s.AddrType. VT&. VT&) (tr_bound%verismo!arch.addr_s.def_s.AddrType. PT&. PT&)) (verismo!arch.pgtable.memmap_s.impl&%0.is_valid.? VT&. VT& PT&. PT& self!))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.is_valid.? VT&. VT& PT&. PT& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::tlb::def_s::TLB::spec_db")
(assert (fuel_bool_default fuel%verismo!arch.tlb.def_s.impl&%2.spec_db.))
(assert (=> (fuel_bool fuel%verismo!arch.tlb.def_s.impl&%2.spec_db.) (forall ((self! Poly)) (! (= (verismo!arch.tlb.def_s.impl&%2.spec_db.? self!) (verismo!arch.tlb.def_s.TLB./TLB/db (%Poly%verismo!arch.tlb.def_s.TLB. self!))) :pattern ((verismo!arch.tlb.def_s.impl&%2.spec_db.? self!))))))
(set-info :comment ";; Function-Specs verismo::arch::tlb::def_s::TLB::axiom_spec_new")
(declare-fun ens%verismo!arch.tlb.def_s.impl&%1.axiom_spec_new. (verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.) Bool)
(assert (forall ((db! verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)) (! (= (ens%verismo!arch.tlb.def_s.impl&%1.axiom_spec_new. db!) (= (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.tlb.def_s.impl&%1.spec_new.? (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. db!)))) db!)) :pattern ((ens%verismo!arch.tlb.def_s.impl&%1.axiom_spec_new. db!)))))
(set-info :comment ";; Broadcast verismo::arch::tlb::def_s::TLB::axiom_spec_new")
(assert (forall ((db! Poly)) (! (=> (has_type db! (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) (= (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.tlb.def_s.impl&%1.spec_new.? db!))) (%Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. db!))) :pattern ((verismo!arch.tlb.def_s.impl&%1.spec_new.? db!)))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::PTLevel::as_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%4.as_int.))
(define-fun is-verismo!arch.entities.memtype.PTLevel./L3_ ((c verismo!arch.entities.memtype.PTLevel.)) Bool ((_ is verismo!arch.entities.memtype.PTLevel./L3) c))
(define-fun is-verismo!arch.entities.memtype.PTLevel./L2_ ((c verismo!arch.entities.memtype.PTLevel.)) Bool ((_ is verismo!arch.entities.memtype.PTLevel./L2) c))
(define-fun is-verismo!arch.entities.memtype.PTLevel./L1_ ((c verismo!arch.entities.memtype.PTLevel.)) Bool ((_ is verismo!arch.entities.memtype.PTLevel./L1) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%4.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. self!) (I (let ((val$ (ite (is-verismo!arch.entities.memtype.PTLevel./L3_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) 0 (ite (is-verismo!arch.entities.memtype.PTLevel./L2_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) 1 (ite (is-verismo!arch.entities.memtype.PTLevel./L1_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) 2 3))))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!arch.addr_s.def_s.AddrType. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::memtype")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.memtype.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.memtype.) (forall ((memid! Poly) (gpn! Poly)) (! (= (verismo!arch.entities.memtype.memtype.? memid! gpn!) (verismo!arch.entities.memtype.memtype_inner.? gpn!)) :pattern ((verismo!arch.entities.memtype.memtype.? memid! gpn!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_SmPrivData")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivData.))
(define-fun is-verismo!arch.entities.memtype.MemType./SmPrivData_ ((c verismo!arch.entities.memtype.MemType.)) Bool ((_ is verismo!arch.entities.memtype.MemType./SmPrivData) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivData.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%8.is_SmPrivData.? self!) (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) :pattern ((verismo!arch.entities.memtype.impl&%8.is_SmPrivData.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_SmBootData")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%8.is_SmBootData.))
(define-fun is-verismo!arch.entities.memtype.MemType./SmBootData_ ((c verismo!arch.entities.memtype.MemType.)) Bool ((_ is verismo!arch.entities.memtype.MemType./SmBootData) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%8.is_SmBootData.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%8.is_SmBootData.? self!) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) :pattern ((verismo!arch.entities.memtype.impl&%8.is_SmBootData.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_SmPrivCode")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivCode.))
(define-fun is-verismo!arch.entities.memtype.MemType./SmPrivCode_ ((c verismo!arch.entities.memtype.MemType.)) Bool ((_ is verismo!arch.entities.memtype.MemType./SmPrivCode) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivCode.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%8.is_SmPrivCode.? self!) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) :pattern ((verismo!arch.entities.memtype.impl&%8.is_SmPrivCode.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_SmPrivStack")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivStack.))
(define-fun is-verismo!arch.entities.memtype.MemType./SmPrivStack_ ((c verismo!arch.entities.memtype.MemType.)) Bool ((_ is verismo!arch.entities.memtype.MemType./SmPrivStack) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivStack.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%8.is_SmPrivStack.? self!) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) :pattern ((verismo!arch.entities.memtype.impl&%8.is_SmPrivStack.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_PTE")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%8.is_PTE.))
(define-fun is-verismo!arch.entities.memtype.MemType./PTE_ ((c verismo!arch.entities.memtype.MemType.)) Bool ((_ is verismo!arch.entities.memtype.MemType./PTE) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%8.is_PTE.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%8.is_PTE.? self!) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) :pattern ((verismo!arch.entities.memtype.impl&%8.is_PTE.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_sm_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%10.is_sm_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%10.is_sm_int.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%10.is_sm_int.? self!) (or (or (or (or (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. self!)) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. self!)))) :pattern ((verismo!arch.entities.memtype.impl&%10.is_sm_int.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_SmVmplPage")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%8.is_SmVmplPage.))
(define-fun is-verismo!arch.entities.memtype.MemType./SmVmplPage_ ((c verismo!arch.entities.memtype.MemType.)) Bool ((_ is verismo!arch.entities.memtype.MemType./SmVmplPage) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%8.is_SmVmplPage.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%8.is_SmVmplPage.? self!) (is-verismo!arch.entities.memtype.MemType./SmVmplPage_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) :pattern ((verismo!arch.entities.memtype.impl&%8.is_SmVmplPage.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_vm_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%10.is_vm_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%10.is_vm_int.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%10.is_vm_int.? self!) (or (or (or (or (or (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. self!)) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmVmplPage_ (%Poly%verismo!arch.entities.memtype.MemType. self!)))) :pattern ((verismo!arch.entities.memtype.impl&%10.is_vm_int.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::need_c_bit")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%10.need_c_bit.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%10.need_c_bit.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%10.need_c_bit.? self!) (or (or (or (or (or (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. self!)) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmVmplPage_ (%Poly%verismo!arch.entities.memtype.MemType. self!)))) :pattern ((verismo!arch.entities.memtype.impl&%10.need_c_bit.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::SpecPageTableEntry::is_encrypted")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.is_encrypted.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.is_encrypted.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.is_encrypted.? T&. T& self!) (verismo!arch.pgtable.entry_s.impl&%1.contains_flag.? T&. T& self! (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./C))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.is_encrypted.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::tlb::def_s::TLB::to_mem_map")
(assert (fuel_bool_default fuel%verismo!arch.tlb.tlb_s.impl&%0.to_mem_map.))
(assert (=> (fuel_bool fuel%verismo!arch.tlb.tlb_s.impl&%0.to_mem_map.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.tlb.tlb_s.impl&%0.to_mem_map.? self! memid!) (verismo!arch.pgtable.def.MemMap./MemMap (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? self!))) memid!))) :pattern ((verismo!arch.tlb.tlb_s.impl&%0.to_mem_map.? self! memid!))))))
(assert (forall ((self! Poly) (memid! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.tlb.def_s.TLB.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.tlb.tlb_s.impl&%0.to_mem_map.? self! memid!)) (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.tlb.tlb_s.impl&%0.to_mem_map.? self! memid!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::MemMap::need_c_bit")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.memmap_s.impl&%1.need_c_bit.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.memmap_s.impl&%1.need_c_bit.) (forall ((self! Poly) (memid! Poly) (gvn! Poly)) (! (= (verismo!arch.pgtable.memmap_s.impl&%1.need_c_bit.? self! memid! gvn!) (or (or (or (or (or (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? memid! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self! gvn!)))))))) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? memid! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self! gvn!))))))))) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? memid! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self! gvn!))))))))) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? memid! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self! gvn!))))))))) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? memid! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self! gvn!))))))))) (is-verismo!arch.entities.memtype.MemType./SmVmplPage_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? memid! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self! gvn!)))))))))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%1.need_c_bit.? self! memid! gvn!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::MemMap::is_encrypted")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.) (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly) (vpage! Poly)) (! (= (verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.? VT&. VT& PT&. PT& self! vpage!) (let ((entry$ (ite (vstd!set.impl&%0.contains.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. self!))) vpage!) (core!option.Option./Some (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. self!)) vpage!)) core!option.Option./None))) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. entry$))))) (core!option.Option./Some (B (verismo!arch.pgtable.entry_s.impl&%1.is_encrypted.? PT&. PT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. entry$)))))) core!option.Option./None))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.? VT&. VT& PT&. PT& self! vpage!))))))
(assert (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly) (vpage! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.pgtable.def.MemMap. VT&. VT& PT&. PT&)) (has_type vpage! (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&))) (has_type (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.? VT&. VT& PT&. PT& self! vpage!)) (TYPE%core!option.Option. $ BOOL))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.? VT&. VT& PT&. PT& self! vpage!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::MemMap::is_encrypted_or_none")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted_or_none.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted_or_none.) (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly) (vpage! Poly)) (! (= (verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted_or_none.? VT&. VT& PT&. PT& self! vpage!) (or (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? VT&. VT& PT&. PT& self! vpage!)))))) (%B (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.? VT&. VT& PT&. PT& self! vpage!))))))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted_or_none.? VT&. VT& PT&. PT& self! vpage!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::MemMap::inv_encrypted_priv_mem")
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.memmap_s.impl&%1.inv_encrypted_priv_mem.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.pgtable.memmap_s.impl&%1.inv_encrypted_priv_mem.? self! memid!) (forall ((gvn$ Poly)) (! (=> (has_type gvn$ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (=> (and (verismo!arch.addr_s.page.impl&%3.is_valid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. gvn$) (verismo!arch.pgtable.memmap_s.impl&%1.need_c_bit.? self! memid! gvn$)) (verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted_or_none.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self! gvn$))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted_or_none.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self! gvn$))))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%1.inv_encrypted_priv_mem.? self! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::tlb::def_s::TLB::inv_encrypted_priv_mem")
(assert (fuel_bool_default fuel%verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem.))
(assert (=> (fuel_bool fuel%verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem.? self! memid!) (let ((memmap$ (verismo!arch.pgtable.def.MemMap./MemMap (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? self!))) memid!)))) (verismo!arch.pgtable.memmap_s.impl&%1.inv_encrypted_priv_mem.? (Poly%verismo!arch.pgtable.def.MemMap. memmap$) memid!))) :pattern ((verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem.? self! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::attack::Model1Eq::model1_eq")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly) (memid! Poly)) (! (=> (and (has_type self! Self%&) (has_type other! Self%&) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.)) (has_type (verismo!arch.attack.Model1Eq.model1_eq.? Self%&. Self%& self! other! memid!) BOOL)) :pattern ((verismo!arch.attack.Model1Eq.model1_eq.? Self%&. Self%& self! other! memid!)))))
(set-info :comment ";; Function-Axioms verismo::arch::tlb::def_s::TLB::model1_eq")
(assert (fuel_bool_default fuel%verismo!arch.tlb.tlb_u.impl&%0.model1_eq.))
(assert (=> (fuel_bool fuel%verismo!arch.tlb.tlb_u.impl&%0.model1_eq.) (forall ((self! Poly) (other! Poly) (memid! Poly)) (! (= (verismo!arch.attack.Model1Eq.model1_eq.? $ TYPE%verismo!arch.tlb.def_s.TLB. self! other! memid!) (B (vstd!map_lib.impl&%0.submap_of.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.TLB./TLB/db (%Poly%verismo!arch.tlb.def_s.TLB. self!)))) memid!) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.TLB./TLB/db (%Poly%verismo!arch.tlb.def_s.TLB. other!)))) memid!)))) :pattern ((verismo!arch.attack.Model1Eq.model1_eq.? $ TYPE%verismo!arch.tlb.def_s.TLB. self! other! memid!))))))
(set-info :comment ";; Function-Specs verismo::tspec::fmap::FMap::axiom_spec_new")
(declare-fun ens%verismo!tspec.fmap.impl&%2.axiom_spec_new. (Dcr Type Dcr Type Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (map! Poly)) (! (= (ens%verismo!tspec.fmap.impl&%2.axiom_spec_new. K&. K& V&. V& map!) (= (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& (verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& map!)) map!)) :pattern ((ens%verismo!tspec.fmap.impl&%2.axiom_spec_new. K&. K& V&. V& map!)))))
(set-info :comment ";; Broadcast verismo::tspec::fmap::FMap::axiom_spec_new")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (map! Poly)) (! (=> (has_type map! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& (verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& map!)) map!)) :pattern ((verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& map!)))))
(set-info :comment ";; Function-Specs verismo::tspec::fmap::FMap::axiom_inv")
(declare-fun ens%verismo!tspec.fmap.impl&%3.axiom_inv. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (id! Poly)) (! (= (ens%verismo!tspec.fmap.impl&%3.axiom_inv. K&. K& V&. V& self! id!) (and (= (vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) id!) (vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) id!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!)) id!))) :pattern ((ens%verismo!tspec.fmap.impl&%3.axiom_inv. K&. K& V&. V& self! id!)))))
(set-info :comment ";; Broadcast verismo::tspec::fmap::FMap::axiom_inv")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (id! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type id! K&)) (and (= (vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) id!) (vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) id!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!)) id!))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) id!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!)) id!)))))
(set-info :comment ";; Function-Specs verismo::tspec::fmap::FMap::axiom_equal")
(declare-fun ens%verismo!tspec.fmap.impl&%3.axiom_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (other! Poly)) (! (= (ens%verismo!tspec.fmap.impl&%3.axiom_equal. K&. K& V&. V& self! other!) (and (= (ext_eq true (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&) self! other!) (= self! other!)) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& other!)) (= self! other!)))) :pattern ((ens%verismo!tspec.fmap.impl&%3.axiom_equal. K&. K& V&. V& self! other!)))))
(set-info :comment ";; Broadcast verismo::tspec::fmap::FMap::axiom_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type other! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&))) (and (= (ext_eq true (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&) self! other!) (= self! other!)) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& other!)) (= self! other!)))) :pattern ((ext_eq true (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&) self! other!) (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::perm_s::PagePerm::as_int")
(assert (fuel_bool_default fuel%verismo!arch.rmp.perm_s.impl&%1.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.perm_s.impl&%1.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) self!) (I (let ((v1$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Read)) 1 0))) (let ((v2$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write)) 2 0))) (let ((v3$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeU)) 4 0))) (let ((v4$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeS)) 8 0))) (let ((v5$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Shadow)) 16 0))) (Add (Add (Add (Add v1$ v2$) v3$) v4$) v5$)))))))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.entities.memtype.PTLevel.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.entities.VMPL.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.pgtable.def.PteFlag.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!arch.attack.Model1Eq. $ TYPE%verismo!arch.tlb.def_s.TLB.))
(set-info :comment ";; Function-Specs verismo::arch::tlb::def_s::TLB::lemma_model1_inv_encrypted_priv_mem")
(declare-fun req%verismo!arch.tlb.tlb_p.impl&%0.lemma_model1_inv_encrypted_priv_mem. (verismo!arch.tlb.def_s.TLB. verismo!arch.tlb.def_s.TLB. verismo!arch.entities.memid.MemID.) Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((self! verismo!arch.tlb.def_s.TLB.) (other! verismo!arch.tlb.def_s.TLB.) (memid! verismo!arch.entities.memid.MemID.)) (! (= (req%verismo!arch.tlb.tlb_p.impl&%0.lemma_model1_inv_encrypted_priv_mem. self! other! memid!) (and (=> %%global_location_label%%27 (%B (verismo!arch.attack.Model1Eq.model1_eq.? $ TYPE%verismo!arch.tlb.def_s.TLB. (Poly%verismo!arch.tlb.def_s.TLB. self!) (Poly%verismo!arch.tlb.def_s.TLB. other!) (Poly%verismo!arch.entities.memid.MemID. memid!)))) (=> %%global_location_label%%28 (verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem.? (Poly%verismo!arch.tlb.def_s.TLB. other!) (Poly%verismo!arch.entities.memid.MemID. memid!))))) :pattern ((req%verismo!arch.tlb.tlb_p.impl&%0.lemma_model1_inv_encrypted_priv_mem. self! other! memid!)))))
(declare-fun ens%verismo!arch.tlb.tlb_p.impl&%0.lemma_model1_inv_encrypted_priv_mem. (verismo!arch.tlb.def_s.TLB. verismo!arch.tlb.def_s.TLB. verismo!arch.entities.memid.MemID.) Bool)
(assert (forall ((self! verismo!arch.tlb.def_s.TLB.) (other! verismo!arch.tlb.def_s.TLB.) (memid! verismo!arch.entities.memid.MemID.)) (! (= (ens%verismo!arch.tlb.tlb_p.impl&%0.lemma_model1_inv_encrypted_priv_mem. self! other! memid!) (verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem.? (Poly%verismo!arch.tlb.def_s.TLB. self!) (Poly%verismo!arch.entities.memid.MemID. memid!))) :pattern ((ens%verismo!arch.tlb.tlb_p.impl&%0.lemma_model1_inv_encrypted_priv_mem. self! other! memid!)))))
(set-info :comment ";; Function-Def verismo::arch::tlb::def_s::TLB::lemma_model1_inv_encrypted_priv_mem")
(set-info :comment ";; verismo/src/arch/tlb/tlb_p.rs:7:5: 7:88 (#0)")
(declare-const self! verismo!arch.tlb.def_s.TLB.)
(declare-const other! verismo!arch.tlb.def_s.TLB.)
(declare-const memid! verismo!arch.entities.memid.MemID.)
(declare-const gvn@ Poly)
(declare-const tmp%1 Bool)
(declare-const memmap@ verismo!arch.pgtable.def.MemMap.)
(assert fuel_defaults)
(assert (has_type (Poly%verismo!arch.entities.memid.MemID. memid!) TYPE%verismo!arch.entities.memid.MemID.))
(assert (%B (verismo!arch.attack.Model1Eq.model1_eq.? $ TYPE%verismo!arch.tlb.def_s.TLB. (Poly%verismo!arch.tlb.def_s.TLB. self!) (Poly%verismo!arch.tlb.def_s.TLB. other!) (Poly%verismo!arch.entities.memid.MemID. memid!))))
(assert (verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem.? (Poly%verismo!arch.tlb.def_s.TLB. other!) (Poly%verismo!arch.entities.memid.MemID. memid!)))
(declare-const %%switch_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%2 Bool)
(assert (not (=> (fuel_bool fuel%verismo!arch.pgtable.memmap_s.impl&%1.inv_encrypted_priv_mem.) (=> (= memmap@ (verismo!arch.pgtable.def.MemMap./MemMap (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. self!)))) (Poly%verismo!arch.entities.memid.MemID. memid!)))) (and (=> (has_type gvn@ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (=> (and (verismo!arch.addr_s.page.impl&%3.is_valid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. gvn@) (or (or (or (or (or (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn@)))))))) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn@))))))))) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn@))))))))) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn@))))))))) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn@))))))))) (is-verismo!arch.entities.memtype.MemType./SmVmplPage_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn@)))))))))) (or (and (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn@)))))) (=> (= tmp%1 (verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted_or_none.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.pgtable.def.MemMap./MemMap (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. other!)))) (Poly%verismo!arch.entities.memid.MemID. memid!)))) gvn@)) (and (=> %%location_label%%0 tmp%1) (=> tmp%1 %%switch_label%%0)))) (=> (not (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn@))))))) %%switch_label%%0)) (and (not %%switch_label%%0) (=> %%location_label%%1 (verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted_or_none.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn@)))))) (=> (forall ((gvn$ Poly)) (! (=> (has_type gvn$ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (=> (and (verismo!arch.addr_s.page.impl&%3.is_valid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. gvn$) (or (or (or (or (or (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn$)))))))) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn$))))))))) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn$))))))))) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn$))))))))) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn$))))))))) (is-verismo!arch.entities.memtype.MemType./SmVmplPage_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn$)))))))))) (verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted_or_none.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn$))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted_or_none.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. memmap@) gvn$)))) (=> %%location_label%%2 (verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem.? (Poly%verismo!arch.tlb.def_s.TLB. self!) (Poly%verismo!arch.entities.memid.MemID. memid!)))))))))
(check-sat)
(exit)
