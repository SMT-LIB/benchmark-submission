(set-info :smt-lib-version 2.6)
(set-logic UFBVDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verismo (https://www.usenix.org/conference/osdi24/presentation/zhou) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
 z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-option :sat.euf true)
(set-option :tactic.default_tactic sat)
(set-option :smt.ematching false)
(set-option :smt.case_split 0)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)) )))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)) )))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)) )))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)) )))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)) )))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)) )))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)) )))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)) )))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module tspec::math::align_s'")
(set-info :comment ";; verismo/src/tspec/math/align_s.rs:33:21: 33:27 (#0)")
(set-info :comment ";; Fuel")
(declare-const fuel%verismo!tspec.math.align_s.spec_align_up. FuelId)
(declare-const fuel%verismo!tspec.math.align_s.spec_align_down. FuelId)
(declare-const fuel%verismo!tspec.math.align_s.spec_is_align_up_by_int. FuelId)
(declare-const fuel%verismo!tspec.math.align_s.spec_is_align_down_by_int. FuelId)
(declare-const fuel%verismo!tspec.math.align_s.spec_valid_align. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_pow2_to_bits. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_bit64_is_shl_by_bits. FuelId)
(assert (distinct fuel%verismo!tspec.math.align_s.spec_align_up. fuel%verismo!tspec.math.align_s.spec_align_down. fuel%verismo!tspec.math.align_s.spec_is_align_up_by_int. fuel%verismo!tspec.math.align_s.spec_is_align_down_by_int. fuel%verismo!tspec.math.align_s.spec_valid_align. fuel%verismo!tspec.math.pow_s.spec_pow2_to_bits. fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2. fuel%verismo!tspec.math.pow_s.spec_bit64_is_shl_by_bits.))
(set-info :comment ";; Datatypes")
(declare-datatypes ((tuple%0. 0) (tuple%3. 0) (tuple%4. 0)) (((tuple%0./tuple%0 )) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly)))))
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))) )))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))) )))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))) )))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) )))
(set-info :comment ";; Function-Decl verismo::tspec::math::align_s::spec_align_up")
(declare-fun verismo!tspec.math.align_s.spec_align_up.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl verismo::tspec::math::align_s::spec_align_down")
(declare-fun verismo!tspec.math.align_s.spec_align_down.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl verismo::tspec::math::align_s::spec_is_align_up_by_int")
(declare-fun verismo!tspec.math.align_s.spec_is_align_up_by_int.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::math::align_s::spec_is_align_down_by_int")
(declare-fun verismo!tspec.math.align_s.spec_is_align_down_by_int.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::math::align_s::spec_valid_align")
(declare-fun verismo!tspec.math.align_s.spec_valid_align.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::math::pow_s::spec_pow2_to_bits")
(declare-fun verismo!tspec.math.pow_s.spec_pow2_to_bits.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::tspec::math::pow_s::spec_bit64_is_pow_of_2")
(declare-fun verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::math::pow_s::spec_bit64_is_shl_by_bits")
(declare-fun verismo!tspec.math.pow_s.spec_bit64_is_shl_by_bits.? (Poly) Bool)
(set-info :comment ";; Function-Axioms verismo::tspec::math::align_s::spec_align_down")
(assert (fuel_bool_default fuel%verismo!tspec.math.align_s.spec_align_down.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.align_s.spec_align_down.) (forall ((val! Poly) (align! Poly)) (! (= (verismo!tspec.math.align_s.spec_align_down.? val! align!) (Sub (%I val!) (EucMod (%I val!) (%I align!)))) :pattern ((verismo!tspec.math.align_s.spec_align_down.? val! align!)) ))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::align_s::spec_align_up")
(assert (fuel_bool_default fuel%verismo!tspec.math.align_s.spec_align_up.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.align_s.spec_align_up.) (forall ((val! Poly) (align! Poly)) (! (= (verismo!tspec.math.align_s.spec_align_up.? val! align!) (let ((r$ (EucMod (%I val!) (%I align!)))) (Add (%I val!) (ite (= r$ 0) 0 (Sub (%I align!) r$))))) :pattern ((verismo!tspec.math.align_s.spec_align_up.? val! align!)) ))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::align_s::spec_is_align_up_by_int")
(assert (fuel_bool_default fuel%verismo!tspec.math.align_s.spec_is_align_up_by_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.align_s.spec_is_align_up_by_int.) (forall ((val! Poly) (align! Poly) (ret! Poly)) (! (= (verismo!tspec.math.align_s.spec_is_align_up_by_int.? val! align! ret!) (and (and (= (EucMod (%I ret!) (%I align!)) 0) (= (%I ret!) (verismo!tspec.math.align_s.spec_align_up.? val! align!))) (and (<= (%I val!) (%I ret!)) (< (%I ret!) (Add (%I val!) (%I align!)))))) :pattern ((verismo!tspec.math.align_s.spec_is_align_up_by_int.? val! align! ret!)) ))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::pow_s::spec_pow2_to_bits")
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_pow2_to_bits.))
(declare-fun %%choose%%0 (Type Int Poly Int Int Int Int Int Poly Int) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Int) (%%hole%%2 Poly) (%%hole%%3 Int) (%%hole%%4 Int) (%%hole%%5 Int) (%%hole%%6 Int) (%%hole%%7 Int) (%%hole%%8 Poly) (%%hole%%9 Int)) (! (=> (exists ((ret$ Poly)) (! (and (has_type ret$ %%hole%%0) (and (= (uClip %%hole%%3 (uintshl %%hole%%1 %%hole%%2 (I (%I ret$)))) %%hole%%4) (and (<= %%hole%%5 (%I ret$)) (< (%I ret$) %%hole%%6)))) :pattern ((uClip %%hole%%9 (uintshl %%hole%%7 %%hole%%8 (I (%I ret$))))) )) (exists ((ret$ Poly)) (! (and (and (has_type ret$ %%hole%%0) (and (= (uClip %%hole%%3 (uintshl %%hole%%1 %%hole%%2 (I (%I ret$)))) %%hole%%4) (and (<= %%hole%%5 (%I ret$)) (< (%I ret$) %%hole%%6)))) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9) ret$)) :pattern ((uClip %%hole%%9 (uintshl %%hole%%7 %%hole%%8 (I (%I ret$)))))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9)))))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_pow2_to_bits.) (forall ((val! Poly)) (! (= (verismo!tspec.math.pow_s.spec_pow2_to_bits.? val!) (%I (as_type (%%choose%%0 (UINT 64) 64 (I 1) 64 (%I val!) 0 64 64 (I 1) 64) (UINT 64)))) :pattern ((verismo!tspec.math.pow_s.spec_pow2_to_bits.? val!)) ))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (uInv 64 (verismo!tspec.math.pow_s.spec_pow2_to_bits.? val!))) :pattern ((verismo!tspec.math.pow_s.spec_pow2_to_bits.? val!)) )))
(set-info :comment ";; Function-Axioms verismo::tspec::math::align_s::spec_is_align_down_by_int")
(assert (fuel_bool_default fuel%verismo!tspec.math.align_s.spec_is_align_down_by_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.align_s.spec_is_align_down_by_int.) (forall ((val! Poly) (align! Poly) (ret! Poly)) (! (= (verismo!tspec.math.align_s.spec_is_align_down_by_int.? val! align! ret!) (and (and (= (%I ret!) (Sub (%I val!) (EucMod (%I val!) (%I align!)))) (= (%I ret!) (uClip 64 (uintshl 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (%I val!))) (I (%I (as_type (%%choose%%0 (UINT 64) 64 (I 1) 64 (%I (I (uClip 64 (%I align!)))) 0 64 64 (I 1) 64) (UINT 64))))))) (I (%I (as_type (%%choose%%0 (UINT 64) 64 (I 1) 64 (%I (I (uClip 64 (%I align!)))) 0 64 64 (I 1) 64) (UINT 64)))))))) (= (EucMod (%I ret!) (%I align!)) 0))) :pattern ((verismo!tspec.math.align_s.spec_is_align_down_by_int.? val! align! ret!)) ))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::pow_s::spec_bit64_is_pow_of_2")
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.) (forall ((val! Poly)) (! (= (verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? val!) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I val!) 1) (= (%I val!) 2)) (= (%I val!) 4)) (= (%I val!) 8)) (= (%I val!) 16)) (= (%I val!) 32)) (= (%I val!) 64)) (= (%I val!) 128)) (= (%I val!) 256)) (= (%I val!) 512)) (= (%I val!) 1024)) (= (%I val!) 2048)) (= (%I val!) 4096)) (= (%I val!) 8192)) (= (%I val!) 16384)) (= (%I val!) 32768)) (= (%I val!) 65536)) (= (%I val!) 131072)) (= (%I val!) 262144)) (= (%I val!) 524288)) (= (%I val!) 1048576)) (= (%I val!) 2097152)) (= (%I val!) 4194304)) (= (%I val!) 8388608)) (= (%I val!) 16777216)) (= (%I val!) 33554432)) (= (%I val!) 67108864)) (= (%I val!) 134217728)) (= (%I val!) 268435456)) (= (%I val!) 536870912)) (= (%I val!) 1073741824)) (= (%I val!) 2147483648)) (= (%I val!) 4294967296)) (= (%I val!) 8589934592)) (= (%I val!) 17179869184)) (= (%I val!) 34359738368)) (= (%I val!) 68719476736)) (= (%I val!) 137438953472)) (= (%I val!) 274877906944)) (= (%I val!) 549755813888)) (= (%I val!) 1099511627776)) (= (%I val!) 2199023255552)) (= (%I val!) 4398046511104)) (= (%I val!) 8796093022208)) (= (%I val!) 17592186044416)) (= (%I val!) 35184372088832)) (= (%I val!) 70368744177664)) (= (%I val!) 140737488355328)) (= (%I val!) 281474976710656)) (= (%I val!) 562949953421312)) (= (%I val!) 1125899906842624)) (= (%I val!) 2251799813685248)) (= (%I val!) 4503599627370496)) (= (%I val!) 9007199254740992)) (= (%I val!) 18014398509481984)) (= (%I val!) 36028797018963968)) (= (%I val!) 72057594037927936)) (= (%I val!) 144115188075855872)) (= (%I val!) 288230376151711744)) (= (%I val!) 576460752303423488)) (= (%I val!) 1152921504606846976)) (= (%I val!) 2305843009213693952)) (= (%I val!) 4611686018427387904)) (= (%I val!) 9223372036854775808))) :pattern ((verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? val!)) ))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::align_s::spec_valid_align")
(assert (fuel_bool_default fuel%verismo!tspec.math.align_s.spec_valid_align.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.align_s.spec_valid_align.) (forall ((align! Poly)) (! (= (verismo!tspec.math.align_s.spec_valid_align.? align!) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I align!) 1) (= (%I align!) 2)) (= (%I align!) 4)) (= (%I align!) 8)) (= (%I align!) 16)) (= (%I align!) 32)) (= (%I align!) 64)) (= (%I align!) 128)) (= (%I align!) 256)) (= (%I align!) 512)) (= (%I align!) 1024)) (= (%I align!) 2048)) (= (%I align!) 4096)) (= (%I align!) 8192)) (= (%I align!) 16384)) (= (%I align!) 32768)) (= (%I align!) 65536)) (= (%I align!) 131072)) (= (%I align!) 262144)) (= (%I align!) 524288)) (= (%I align!) 1048576)) (= (%I align!) 2097152)) (= (%I align!) 4194304)) (= (%I align!) 8388608)) (= (%I align!) 16777216)) (= (%I align!) 33554432)) (= (%I align!) 67108864)) (= (%I align!) 134217728)) (= (%I align!) 268435456)) (= (%I align!) 536870912)) (= (%I align!) 1073741824)) (= (%I align!) 2147483648)) (= (%I align!) 4294967296)) (= (%I align!) 8589934592)) (= (%I align!) 17179869184)) (= (%I align!) 34359738368)) (= (%I align!) 68719476736)) (= (%I align!) 137438953472)) (= (%I align!) 274877906944)) (= (%I align!) 549755813888)) (= (%I align!) 1099511627776)) (= (%I align!) 2199023255552)) (= (%I align!) 4398046511104)) (= (%I align!) 8796093022208)) (= (%I align!) 17592186044416)) (= (%I align!) 35184372088832)) (= (%I align!) 70368744177664)) (= (%I align!) 140737488355328)) (= (%I align!) 281474976710656)) (= (%I align!) 562949953421312)) (= (%I align!) 1125899906842624)) (= (%I align!) 2251799813685248)) (= (%I align!) 4503599627370496)) (= (%I align!) 9007199254740992)) (= (%I align!) 18014398509481984)) (= (%I align!) 36028797018963968)) (= (%I align!) 72057594037927936)) (= (%I align!) 144115188075855872)) (= (%I align!) 288230376151711744)) (= (%I align!) 576460752303423488)) (= (%I align!) 1152921504606846976)) (= (%I align!) 2305843009213693952)) (= (%I align!) 4611686018427387904)) (= (%I align!) 9223372036854775808))) :pattern ((verismo!tspec.math.align_s.spec_valid_align.? align!)) ))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::pow_s::spec_bit64_is_shl_by_bits")
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_bit64_is_shl_by_bits.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_bit64_is_shl_by_bits.) (forall ((val! Poly)) (! (= (verismo!tspec.math.pow_s.spec_bit64_is_shl_by_bits.? val!) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 0)))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 1))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 2))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 3))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 4))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 5))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 6))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 7))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 8))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 9))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 10))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 11))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 12))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 13))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 14))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 15))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 16))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 17))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 18))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 19))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 20))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 21))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 22))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 23))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 24))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 25))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 26))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 27))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 28))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 29))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 30))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 31))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 32))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 33))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 34))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 35))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 36))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 37))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 38))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 39))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 40))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 41))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 42))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 43))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 44))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 45))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 46))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 47))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 48))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 49))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 50))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 51))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 52))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 53))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 54))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 55))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 56))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 57))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 58))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 59))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 60))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 61))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 62))))) (= (%I val!) (uClip 64 (uintshl 64 (I 1) (I 63)))))) :pattern ((verismo!tspec.math.pow_s.spec_bit64_is_shl_by_bits.? val!)) ))))
(set-info :comment ";; Function-Specs verismo::tspec::math::nonlinear::proof_mul_exchange")
(declare-fun ens%verismo!tspec.math.nonlinear.proof_mul_exchange. (Int Int Int) Bool)
(assert (forall ((a! Int) (b! Int) (ret! Int)) (! (= (ens%verismo!tspec.math.nonlinear.proof_mul_exchange. a! b! ret!) (and (= ret! (Mul a! b!)) (= ret! (Mul b! a!)))) :pattern ((ens%verismo!tspec.math.nonlinear.proof_mul_exchange. a! b! ret!)) )))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_shl_values_auto")
(declare-fun ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. no%param) (and (=> (< 0 64) (= (uClip 64 (uintshl 64 (I 1) (I 0))) 1)) (=> (< 1 64) (= (uClip 64 (uintshl 64 (I 1) (I 1))) 2)) (=> (< 2 64) (= (uClip 64 (uintshl 64 (I 1) (I 2))) 4)) (=> (< 3 64) (= (uClip 64 (uintshl 64 (I 1) (I 3))) 8)) (=> (< 4 64) (= (uClip 64 (uintshl 64 (I 1) (I 4))) 16)) (=> (< 5 64) (= (uClip 64 (uintshl 64 (I 1) (I 5))) 32)) (=> (< 6 64) (= (uClip 64 (uintshl 64 (I 1) (I 6))) 64)) (=> (< 7 64) (= (uClip 64 (uintshl 64 (I 1) (I 7))) 128)) (=> (< 8 64) (= (uClip 64 (uintshl 64 (I 1) (I 8))) 256)) (=> (< 9 64) (= (uClip 64 (uintshl 64 (I 1) (I 9))) 512)) (=> (< 10 64) (= (uClip 64 (uintshl 64 (I 1) (I 10))) 1024)) (=> (< 11 64) (= (uClip 64 (uintshl 64 (I 1) (I 11))) 2048)) (=> (< 12 64) (= (uClip 64 (uintshl 64 (I 1) (I 12))) 4096)) (=> (< 13 64) (= (uClip 64 (uintshl 64 (I 1) (I 13))) 8192)) (=> (< 14 64) (= (uClip 64 (uintshl 64 (I 1) (I 14))) 16384)) (=> (< 15 64) (= (uClip 64 (uintshl 64 (I 1) (I 15))) 32768)) (=> (< 16 64) (= (uClip 64 (uintshl 64 (I 1) (I 16))) 65536)) (=> (< 17 64) (= (uClip 64 (uintshl 64 (I 1) (I 17))) 131072)) (=> (< 18 64) (= (uClip 64 (uintshl 64 (I 1) (I 18))) 262144)) (=> (< 19 64) (= (uClip 64 (uintshl 64 (I 1) (I 19))) 524288)) (=> (< 20 64) (= (uClip 64 (uintshl 64 (I 1) (I 20))) 1048576)) (=> (< 21 64) (= (uClip 64 (uintshl 64 (I 1) (I 21))) 2097152)) (=> (< 22 64) (= (uClip 64 (uintshl 64 (I 1) (I 22))) 4194304)) (=> (< 23 64) (= (uClip 64 (uintshl 64 (I 1) (I 23))) 8388608)) (=> (< 24 64) (= (uClip 64 (uintshl 64 (I 1) (I 24))) 16777216)) (=> (< 25 64) (= (uClip 64 (uintshl 64 (I 1) (I 25))) 33554432)) (=> (< 26 64) (= (uClip 64 (uintshl 64 (I 1) (I 26))) 67108864)) (=> (< 27 64) (= (uClip 64 (uintshl 64 (I 1) (I 27))) 134217728)) (=> (< 28 64) (= (uClip 64 (uintshl 64 (I 1) (I 28))) 268435456)) (=> (< 29 64) (= (uClip 64 (uintshl 64 (I 1) (I 29))) 536870912)) (=> (< 30 64) (= (uClip 64 (uintshl 64 (I 1) (I 30))) 1073741824)) (=> (< 31 64) (= (uClip 64 (uintshl 64 (I 1) (I 31))) 2147483648)) (=> (< 32 64) (= (uClip 64 (uintshl 64 (I 1) (I 32))) 4294967296)) (=> (< 33 64) (= (uClip 64 (uintshl 64 (I 1) (I 33))) 8589934592)) (=> (< 34 64) (= (uClip 64 (uintshl 64 (I 1) (I 34))) 17179869184)) (=> (< 35 64) (= (uClip 64 (uintshl 64 (I 1) (I 35))) 34359738368)) (=> (< 36 64) (= (uClip 64 (uintshl 64 (I 1) (I 36))) 68719476736)) (=> (< 37 64) (= (uClip 64 (uintshl 64 (I 1) (I 37))) 137438953472)) (=> (< 38 64) (= (uClip 64 (uintshl 64 (I 1) (I 38))) 274877906944)) (=> (< 39 64) (= (uClip 64 (uintshl 64 (I 1) (I 39))) 549755813888)) (=> (< 40 64) (= (uClip 64 (uintshl 64 (I 1) (I 40))) 1099511627776)) (=> (< 41 64) (= (uClip 64 (uintshl 64 (I 1) (I 41))) 2199023255552)) (=> (< 42 64) (= (uClip 64 (uintshl 64 (I 1) (I 42))) 4398046511104)) (=> (< 43 64) (= (uClip 64 (uintshl 64 (I 1) (I 43))) 8796093022208)) (=> (< 44 64) (= (uClip 64 (uintshl 64 (I 1) (I 44))) 17592186044416)) (=> (< 45 64) (= (uClip 64 (uintshl 64 (I 1) (I 45))) 35184372088832)) (=> (< 46 64) (= (uClip 64 (uintshl 64 (I 1) (I 46))) 70368744177664)) (=> (< 47 64) (= (uClip 64 (uintshl 64 (I 1) (I 47))) 140737488355328)) (=> (< 48 64) (= (uClip 64 (uintshl 64 (I 1) (I 48))) 281474976710656)) (=> (< 49 64) (= (uClip 64 (uintshl 64 (I 1) (I 49))) 562949953421312)) (=> (< 50 64) (= (uClip 64 (uintshl 64 (I 1) (I 50))) 1125899906842624)) (=> (< 51 64) (= (uClip 64 (uintshl 64 (I 1) (I 51))) 2251799813685248)) (=> (< 52 64) (= (uClip 64 (uintshl 64 (I 1) (I 52))) 4503599627370496)) (=> (< 53 64) (= (uClip 64 (uintshl 64 (I 1) (I 53))) 9007199254740992)) (=> (< 54 64) (= (uClip 64 (uintshl 64 (I 1) (I 54))) 18014398509481984)) (=> (< 55 64) (= (uClip 64 (uintshl 64 (I 1) (I 55))) 36028797018963968)) (=> (< 56 64) (= (uClip 64 (uintshl 64 (I 1) (I 56))) 72057594037927936)) (=> (< 57 64) (= (uClip 64 (uintshl 64 (I 1) (I 57))) 144115188075855872)) (=> (< 58 64) (= (uClip 64 (uintshl 64 (I 1) (I 58))) 288230376151711744)) (=> (< 59 64) (= (uClip 64 (uintshl 64 (I 1) (I 59))) 576460752303423488)) (=> (< 60 64) (= (uClip 64 (uintshl 64 (I 1) (I 60))) 1152921504606846976)) (=> (< 61 64) (= (uClip 64 (uintshl 64 (I 1) (I 61))) 2305843009213693952)) (=> (< 62 64) (= (uClip 64 (uintshl 64 (I 1) (I 62))) 4611686018427387904)) (=> (< 63 64) (= (uClip 64 (uintshl 64 (I 1) (I 63))) 9223372036854775808)))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. no%param)) )))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_shr_div_rel")
(declare-fun req%verismo!tspec.math.bits_p.bit64_shr_div_rel. (Int Int) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((b! Int) (a! Int)) (! (= (req%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a!) (=> %%global_location_label%%0 (< a! 64))) :pattern ((req%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a!)) )))
(declare-fun ens%verismo!tspec.math.bits_p.bit64_shr_div_rel. (Int Int Int) Bool)
(assert (forall ((b! Int) (a! Int) (ret! Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a! ret!) (and (uInv 64 ret!) (= ret! (uClip 64 (uintshr 64 (I b!) (I a!)))) (<= (Mul ret! (uClip 64 (uintshl 64 (I 1) (I a!)))) 18446744073709551615) (= (uClip 64 (uintshr 64 (I b!) (I a!))) (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I a!)))))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a! ret!)) )))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_shl_mul_rel")
(declare-fun req%verismo!tspec.math.bits_p.bit64_shl_mul_rel. (Int Int) Bool)
(declare-const %%global_location_label%%1 Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((b! Int) (a! Int)) (! (= (req%verismo!tspec.math.bits_p.bit64_shl_mul_rel. b! a!) (and (=> %%global_location_label%%1 (< a! 64)) (=> %%global_location_label%%2 (<= (Mul b! (uClip 64 (uintshl 64 (I 1) (I a!)))) 18446744073709551615)))) :pattern ((req%verismo!tspec.math.bits_p.bit64_shl_mul_rel. b! a!)) )))
(declare-fun ens%verismo!tspec.math.bits_p.bit64_shl_mul_rel. (Int Int) Bool)
(assert (forall ((b! Int) (a! Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_shl_mul_rel. b! a!) (= (uClip 64 (uintshl 64 (I b!) (I a!))) (Mul b! (uClip 64 (uintshl 64 (I 1) (I a!)))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_shl_mul_rel. b! a!)) )))
(set-info :comment ";; Function-Specs verismo::tspec::math::align_s::proof_align_down")
(declare-fun req%verismo!tspec.math.align_s.proof_align_down. (Int Int) Bool)
(declare-const %%global_location_label%%3 Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((val! Int) (align! Int)) (! (= (req%verismo!tspec.math.align_s.proof_align_down. val! align!) (and (=> %%global_location_label%%3 (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I (I align!)) 1) (= (%I (I align!)) 2)) (= (%I (I align!)) 4)) (= (%I (I align!)) 8)) (= (%I (I align!)) 16)) (= (%I (I align!)) 32)) (= (%I (I align!)) 64)) (= (%I (I align!)) 128)) (= (%I (I align!)) 256)) (= (%I (I align!)) 512)) (= (%I (I align!)) 1024)) (= (%I (I align!)) 2048)) (= (%I (I align!)) 4096)) (= (%I (I align!)) 8192)) (= (%I (I align!)) 16384)) (= (%I (I align!)) 32768)) (= (%I (I align!)) 65536)) (= (%I (I align!)) 131072)) (= (%I (I align!)) 262144)) (= (%I (I align!)) 524288)) (= (%I (I align!)) 1048576)) (= (%I (I align!)) 2097152)) (= (%I (I align!)) 4194304)) (= (%I (I align!)) 8388608)) (= (%I (I align!)) 16777216)) (= (%I (I align!)) 33554432)) (= (%I (I align!)) 67108864)) (= (%I (I align!)) 134217728)) (= (%I (I align!)) 268435456)) (= (%I (I align!)) 536870912)) (= (%I (I align!)) 1073741824)) (= (%I (I align!)) 2147483648)) (= (%I (I align!)) 4294967296)) (= (%I (I align!)) 8589934592)) (= (%I (I align!)) 17179869184)) (= (%I (I align!)) 34359738368)) (= (%I (I align!)) 68719476736)) (= (%I (I align!)) 137438953472)) (= (%I (I align!)) 274877906944)) (= (%I (I align!)) 549755813888)) (= (%I (I align!)) 1099511627776)) (= (%I (I align!)) 2199023255552)) (= (%I (I align!)) 4398046511104)) (= (%I (I align!)) 8796093022208)) (= (%I (I align!)) 17592186044416)) (= (%I (I align!)) 35184372088832)) (= (%I (I align!)) 70368744177664)) (= (%I (I align!)) 140737488355328)) (= (%I (I align!)) 281474976710656)) (= (%I (I align!)) 562949953421312)) (= (%I (I align!)) 1125899906842624)) (= (%I (I align!)) 2251799813685248)) (= (%I (I align!)) 4503599627370496)) (= (%I (I align!)) 9007199254740992)) (= (%I (I align!)) 18014398509481984)) (= (%I (I align!)) 36028797018963968)) (= (%I (I align!)) 72057594037927936)) (= (%I (I align!)) 144115188075855872)) (= (%I (I align!)) 288230376151711744)) (= (%I (I align!)) 576460752303423488)) (= (%I (I align!)) 1152921504606846976)) (= (%I (I align!)) 2305843009213693952)) (= (%I (I align!)) 4611686018427387904)) (= (%I (I align!)) 9223372036854775808))) (=> %%global_location_label%%4 (= (uClip 64 val!) val!)))) :pattern ((req%verismo!tspec.math.align_s.proof_align_down. val! align!)) )))
(declare-fun ens%verismo!tspec.math.align_s.proof_align_down. (Int Int tuple%3.) Bool)
(assert (forall ((val! Int) (align! Int) (ret! tuple%3.)) (! (= (ens%verismo!tspec.math.align_s.proof_align_down. val! align! ret!) (and (has_type (Poly%tuple%3. ret!) (TYPE%tuple%3. $ (UINT 64) $ (UINT 64) $ (UINT 64))) (= (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) (uClip 64 (Sub (uClip 64 align!) 1))) (= (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) (%I (as_type (%%choose%%0 (UINT 64) 64 (I 1) 64 (%I (I (uClip 64 align!))) 0 64 64 (I 1) 64) (UINT 64)))) (= (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) (Sub val! (nClip (EucMod val! align!)))) (= (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) (nClip (Mul (nClip (EucDiv val! align!)) align!))) (= (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) (uClip 64 (uintshl 64 (I (uClip 64 (uintshr 64 (I (uClip 64 val!)) (I (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. ret!)))))))) (I (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. ret!)))))))) (= (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. ret!)))) (uClip 64 (uintand 64 (I (uClip 64 val!)) (I (uClip 64 (uintnot 64 (I (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. ret!))))))))))))) :pattern ((ens%verismo!tspec.math.align_s.proof_align_down. val! align! ret!)) )))
(set-info :comment ";; Function-Specs verismo::tspec::math::nonlinear::proof_div_mod_rel")
(declare-fun req%verismo!tspec.math.nonlinear.proof_div_mod_rel. (Int Int) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((a! Int) (b! Int)) (! (= (req%verismo!tspec.math.nonlinear.proof_div_mod_rel. a! b!) (=> %%global_location_label%%5 (not (= b! 0)))) :pattern ((req%verismo!tspec.math.nonlinear.proof_div_mod_rel. a! b!)) )))
(declare-fun ens%verismo!tspec.math.nonlinear.proof_div_mod_rel. (Int Int Int) Bool)
(assert (forall ((a! Int) (b! Int) (ret! Int)) (! (= (ens%verismo!tspec.math.nonlinear.proof_div_mod_rel. a! b! ret!) (and (= ret! (EucDiv a! b!)) (= (Add (Mul ret! b!) (EucMod a! b!)) a!))) :pattern ((ens%verismo!tspec.math.nonlinear.proof_div_mod_rel. a! b! ret!)) )))
(set-info :comment ";; Function-Specs verismo::tspec::math::nonlinear::proof_mul_div_rel")
(declare-fun req%verismo!tspec.math.nonlinear.proof_mul_div_rel. (Int Int) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((a! Int) (b! Int)) (! (= (req%verismo!tspec.math.nonlinear.proof_mul_div_rel. a! b!) (=> %%global_location_label%%6 (not (= b! 0)))) :pattern ((req%verismo!tspec.math.nonlinear.proof_mul_div_rel. a! b!)) )))
(declare-fun ens%verismo!tspec.math.nonlinear.proof_mul_div_rel. (Int Int Int) Bool)
(assert (forall ((a! Int) (b! Int) (ret! Int)) (! (= (ens%verismo!tspec.math.nonlinear.proof_mul_div_rel. a! b! ret!) (and (= ret! (Mul a! b!)) (= (EucDiv ret! b!) a!))) :pattern ((ens%verismo!tspec.math.nonlinear.proof_mul_div_rel. a! b! ret!)) )))
(set-info :comment ";; Function-Specs verismo::tspec::math::align_s::proof_align_is_aligned")
(declare-fun req%verismo!tspec.math.align_s.proof_align_is_aligned. (Int Int) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((val! Int) (align! Int)) (! (= (req%verismo!tspec.math.align_s.proof_align_is_aligned. val! align!) (and (=> %%global_location_label%%7 (> align! 0)) (=> %%global_location_label%%8 (>= val! 0)))) :pattern ((req%verismo!tspec.math.align_s.proof_align_is_aligned. val! align!)) )))
(declare-fun ens%verismo!tspec.math.align_s.proof_align_is_aligned. (Int Int) Bool)
(assert (forall ((val! Int) (align! Int)) (! (= (ens%verismo!tspec.math.align_s.proof_align_is_aligned. val! align!) (and (= (EucMod (verismo!tspec.math.align_s.spec_align_up.? (I val!) (I align!)) align!) 0) (= (EucMod (verismo!tspec.math.align_s.spec_align_down.? (I val!) (I align!)) align!) 0))) :pattern ((ens%verismo!tspec.math.align_s.proof_align_is_aligned. val! align!)) )))
(set-info :comment ";; Function-Specs verismo::tspec::math::align_s::lemma_bit_and_mod_rel")
(declare-fun req%verismo!tspec.math.align_s.lemma_bit_and_mod_rel. (Int Int) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((val! Int) (align! Int)) (! (= (req%verismo!tspec.math.align_s.lemma_bit_and_mod_rel. val! align!) (=> %%global_location_label%%9 (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 0)))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 1))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 2))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 3))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 4))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 5))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 6))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 7))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 8))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 9))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 10))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 11))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 12))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 13))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 14))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 15))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 16))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 17))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 18))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 19))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 20))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 21))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 22))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 23))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 24))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 25))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 26))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 27))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 28))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 29))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 30))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 31))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 32))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 33))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 34))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 35))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 36))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 37))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 38))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 39))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 40))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 41))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 42))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 43))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 44))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 45))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 46))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 47))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 48))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 49))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 50))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 51))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 52))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 53))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 54))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 55))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 56))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 57))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 58))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 59))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 60))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 61))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 62))))) (= (%I (I align!)) (uClip 64 (uintshl 64 (I 1) (I 63))))))) :pattern ((req%verismo!tspec.math.align_s.lemma_bit_and_mod_rel. val! align!)) )))
(declare-fun ens%verismo!tspec.math.align_s.lemma_bit_and_mod_rel. (Int Int) Bool)
(assert (forall ((val! Int) (align! Int)) (! (= (ens%verismo!tspec.math.align_s.lemma_bit_and_mod_rel. val! align!) (= (uClip 64 (EucMod val! align!)) (uClip 64 (uintand 64 (I val!) (I (uClip 64 (Sub align! 1))))))) :pattern ((ens%verismo!tspec.math.align_s.lemma_bit_and_mod_rel. val! align!)) )))
(set-info :comment ";; Function-Def verismo::tspec::math::align_s::lemma_bit_and_mod_rel")
(set-info :comment ";; verismo/src/tspec/math/align_s.rs:33:21: 33:27 (#0)")
(declare-const val!@0 (_ BitVec 64))
(declare-const align!@0 (_ BitVec 64))
(assert true)
(set-info :comment ";; bitvector ensures not satisfied")
(declare-const %%location_label%%0 Bool)
(assert (not (=> %%location_label%%0 (= (bvurem val!@0 (bvshl (_ bv1 64) (_ bv9 64))) (bvand val!@0 (bvsub (bvshl (_ bv1 64) (_ bv9 64)) (_ bv1 64)))))))
(check-sat)
(exit)
