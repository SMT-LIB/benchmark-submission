(set-info :smt-lib-version 2.6)
(set-logic UFBVDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Unknown Project 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
    (set-option :sat.euf true)
    (set-option :tactic.default_tactic sat)
    (set-option :smt.ematching false)
    (set-option :smt.case_split 0)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%lib!flags.flags0_is_reset. FuelId)
(declare-const fuel%lib!flags.flags0_is_committed. FuelId)
(declare-const fuel%lib!flags.flags0_is_zero_init. FuelId)
(declare-const fuel%lib!flags.flags1_in_full. FuelId)
(declare-const fuel%lib!flags.flags1_has_aligned. FuelId)
(declare-const fuel%lib!flags.flags2_is_zero. FuelId)
(declare-const fuel%lib!flags.flags2_retire_expire. FuelId)
(declare-const fuel%lib!flags.impl&%0.is_reset. FuelId)
(declare-const fuel%lib!flags.impl&%0.is_committed. FuelId)
(declare-const fuel%lib!flags.impl&%0.is_zero_init. FuelId)
(declare-const fuel%lib!flags.impl&%0.in_full. FuelId)
(declare-const fuel%lib!flags.impl&%0.has_aligned. FuelId)
(declare-const fuel%lib!flags.impl&%0.is_zero. FuelId)
(declare-const fuel%lib!flags.impl&%0.retire_expire. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%lib!flags.flags0_is_reset. fuel%lib!flags.flags0_is_committed. fuel%lib!flags.flags0_is_zero_init. fuel%lib!flags.flags1_in_full. fuel%lib!flags.flags1_has_aligned. fuel%lib!flags.flags2_is_zero. fuel%lib!flags.flags2_retire_expire. fuel%lib!flags.impl&%0.is_reset. fuel%lib!flags.impl&%0.is_committed. fuel%lib!flags.impl&%0.is_zero_init. fuel%lib!flags.impl&%0.in_full. fuel%lib!flags.impl&%0.has_aligned. fuel%lib!flags.impl&%0.is_zero. fuel%lib!flags.impl&%0.retire_expire. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-sort lib!linked_list.LL. 0)
(declare-datatypes ((lib!types.PageInner. 0) (tuple%0. 0)) (((lib!types.PageInner./PageInner (lib!types.PageInner./PageInner/?flags0 Int) (lib!types.PageInner./PageInner/?capacity Int) (lib!types.PageInner./PageInner/?reserved Int) (lib!types.PageInner./PageInner/?flags1 Int) (lib!types.PageInner./PageInner/?flags2 Int) (lib!types.PageInner./PageInner/?free lib!linked_list.LL.) (lib!types.PageInner./PageInner/?used Int) (lib!types.PageInner./PageInner/?xblock_size Int) (lib!types.PageInner./PageInner/?local_free lib!linked_list.LL.))) ((tuple%0./tuple%0 ))))
(declare-fun lib!types.PageInner./PageInner/flags0 (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/capacity (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/reserved (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/flags1 (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/flags2 (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/free (lib!types.PageInner.) lib!linked_list.LL.)
(declare-fun lib!types.PageInner./PageInner/used (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/xblock_size (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/local_free (lib!types.PageInner.) lib!linked_list.LL.)
(declare-const TYPE%lib!types.PageInner. Type)
(declare-const TYPE%lib!linked_list.LL. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%lib!linked_list.LL. (lib!linked_list.LL.) Poly)
(declare-fun %Poly%lib!linked_list.LL. (Poly) lib!linked_list.LL.)
(declare-fun Poly%lib!types.PageInner. (lib!types.PageInner.) Poly)
(declare-fun %Poly%lib!types.PageInner. (Poly) lib!types.PageInner.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x lib!linked_list.LL.)) (! (= x (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. x))) :pattern ((Poly%lib!linked_list.LL. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.LL.) (= x (Poly%lib!linked_list.LL. (%Poly%lib!linked_list.LL. x)))) :pattern ((has_type x TYPE%lib!linked_list.LL.)))))
(assert (forall ((x lib!linked_list.LL.)) (! (has_type (Poly%lib!linked_list.LL. x) TYPE%lib!linked_list.LL.) :pattern ((has_type (Poly%lib!linked_list.LL. x) TYPE%lib!linked_list.LL.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= x (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. x))) :pattern ((Poly%lib!types.PageInner. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (= x (Poly%lib!types.PageInner. (%Poly%lib!types.PageInner. x)))) :pattern ((has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((_flags0! Int) (_capacity! Int) (_reserved! Int) (_flags1! Int) (_flags2! Int) (_free! lib!linked_list.LL.) (_used! Int) (_xblock_size! Int) (_local_free! lib!linked_list.LL.)) (! (=> (and (uInv 8 _flags0!) (uInv 16 _capacity!) (uInv 16 _reserved!) (uInv 8 _flags1!) (uInv 8 _flags2!) (uInv 32 _used!) (uInv 32 _xblock_size!)) (has_type (Poly%lib!types.PageInner. (lib!types.PageInner./PageInner _flags0! _capacity! _reserved! _flags1! _flags2! _free! _used! _xblock_size! _local_free!)) TYPE%lib!types.PageInner.)) :pattern ((has_type (Poly%lib!types.PageInner. (lib!types.PageInner./PageInner _flags0! _capacity! _reserved! _flags1! _flags2! _free! _used! _xblock_size! _local_free!)) TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/flags0 x) (lib!types.PageInner./PageInner/?flags0 x)) :pattern ((lib!types.PageInner./PageInner/flags0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 8 (lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/capacity x) (lib!types.PageInner./PageInner/?capacity x)) :pattern ((lib!types.PageInner./PageInner/capacity x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 16 (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/reserved x) (lib!types.PageInner./PageInner/?reserved x)) :pattern ((lib!types.PageInner./PageInner/reserved x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 16 (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/flags1 x) (lib!types.PageInner./PageInner/?flags1 x)) :pattern ((lib!types.PageInner./PageInner/flags1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 8 (lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/flags2 x) (lib!types.PageInner./PageInner/?flags2 x)) :pattern ((lib!types.PageInner./PageInner/flags2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 8 (lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/free x) (lib!types.PageInner./PageInner/?free x)) :pattern ((lib!types.PageInner./PageInner/free x)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/used x) (lib!types.PageInner./PageInner/?used x)) :pattern ((lib!types.PageInner./PageInner/used x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 32 (lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/xblock_size x) (lib!types.PageInner./PageInner/?xblock_size x)) :pattern ((lib!types.PageInner./PageInner/xblock_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 32 (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/local_free x) (lib!types.PageInner./PageInner/?local_free x)) :pattern ((lib!types.PageInner./PageInner/local_free x)))))
(assert (forall ((x lib!types.PageInner.)) (! (=> ((_ is lib!types.PageInner./PageInner) x) (height_lt (height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free x))) (height (Poly%lib!types.PageInner. x)))) :pattern ((height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free x)))))))
(assert (forall ((x lib!types.PageInner.)) (! (=> ((_ is lib!types.PageInner./PageInner) x) (height_lt (height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free x))) (height (Poly%lib!types.PageInner. x)))) :pattern ((height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free x)))))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(declare-fun lib!flags.flags1_in_full.? (Poly) Bool)
(declare-fun lib!flags.impl&%0.in_full.? (Poly) Bool)
(declare-fun lib!flags.flags0_is_reset.? (Poly) Bool)
(declare-fun lib!flags.flags0_is_committed.? (Poly) Bool)
(declare-fun lib!flags.flags0_is_zero_init.? (Poly) Bool)
(declare-fun lib!flags.flags1_has_aligned.? (Poly) Bool)
(declare-fun lib!flags.flags2_is_zero.? (Poly) Bool)
(declare-fun lib!flags.flags2_retire_expire.? (Poly) Int)
(declare-fun lib!flags.impl&%0.is_reset.? (Poly) Bool)
(declare-fun lib!flags.impl&%0.is_committed.? (Poly) Bool)
(declare-fun lib!flags.impl&%0.is_zero_init.? (Poly) Bool)
(declare-fun lib!flags.impl&%0.has_aligned.? (Poly) Bool)
(declare-fun lib!flags.impl&%0.is_zero.? (Poly) Bool)
(declare-fun lib!flags.impl&%0.retire_expire.? (Poly) Int)
(assert (fuel_bool_default fuel%lib!flags.flags1_in_full.))
(assert (=> (fuel_bool fuel%lib!flags.flags1_in_full.) (forall ((u! Poly)) (! (= (lib!flags.flags1_in_full.? u!) (not (= (uClip 8 (bitand (I (%I u!)) (I 1))) 0))) :pattern ((lib!flags.flags1_in_full.? u!))))))
(assert (fuel_bool_default fuel%lib!flags.impl&%0.in_full.))
(assert (=> (fuel_bool fuel%lib!flags.impl&%0.in_full.) (forall ((self! Poly)) (! (= (lib!flags.impl&%0.in_full.? self!) (lib!flags.flags1_in_full.? (I (lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. self!))))) :pattern ((lib!flags.impl&%0.in_full.? self!))))))
(assert (fuel_bool_default fuel%lib!flags.flags0_is_reset.))
(assert (=> (fuel_bool fuel%lib!flags.flags0_is_reset.) (forall ((u! Poly)) (! (= (lib!flags.flags0_is_reset.? u!) (not (= (uClip 8 (bitand (I (%I u!)) (I 1))) 0))) :pattern ((lib!flags.flags0_is_reset.? u!))))))
(assert (fuel_bool_default fuel%lib!flags.flags0_is_committed.))
(assert (=> (fuel_bool fuel%lib!flags.flags0_is_committed.) (forall ((u! Poly)) (! (= (lib!flags.flags0_is_committed.? u!) (not (= (uClip 8 (bitand (I (%I u!)) (I 2))) 0))) :pattern ((lib!flags.flags0_is_committed.? u!))))))
(assert (fuel_bool_default fuel%lib!flags.flags0_is_zero_init.))
(assert (=> (fuel_bool fuel%lib!flags.flags0_is_zero_init.) (forall ((u! Poly)) (! (= (lib!flags.flags0_is_zero_init.? u!) (not (= (uClip 8 (bitand (I (%I u!)) (I 4))) 0))) :pattern ((lib!flags.flags0_is_zero_init.? u!))))))
(assert (fuel_bool_default fuel%lib!flags.flags1_has_aligned.))
(assert (=> (fuel_bool fuel%lib!flags.flags1_has_aligned.) (forall ((u! Poly)) (! (= (lib!flags.flags1_has_aligned.? u!) (not (= (uClip 8 (bitand (I (%I u!)) (I 2))) 0))) :pattern ((lib!flags.flags1_has_aligned.? u!))))))
(assert (fuel_bool_default fuel%lib!flags.flags2_is_zero.))
(assert (=> (fuel_bool fuel%lib!flags.flags2_is_zero.) (forall ((u! Poly)) (! (= (lib!flags.flags2_is_zero.? u!) (not (= (uClip 8 (bitand (I (%I u!)) (I 1))) 0))) :pattern ((lib!flags.flags2_is_zero.? u!))))))
(assert (fuel_bool_default fuel%lib!flags.flags2_retire_expire.))
(assert (=> (fuel_bool fuel%lib!flags.flags2_retire_expire.) (forall ((u! Poly)) (! (= (lib!flags.flags2_retire_expire.? u!) (uClip 8 (bitshr (I (%I u!)) (I 1)))) :pattern ((lib!flags.flags2_retire_expire.? u!))))))
(assert (fuel_bool_default fuel%lib!flags.impl&%0.is_reset.))
(assert (=> (fuel_bool fuel%lib!flags.impl&%0.is_reset.) (forall ((self! Poly)) (! (= (lib!flags.impl&%0.is_reset.? self!) (lib!flags.flags0_is_reset.? (I (lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. self!))))) :pattern ((lib!flags.impl&%0.is_reset.? self!))))))
(assert (fuel_bool_default fuel%lib!flags.impl&%0.is_committed.))
(assert (=> (fuel_bool fuel%lib!flags.impl&%0.is_committed.) (forall ((self! Poly)) (! (= (lib!flags.impl&%0.is_committed.? self!) (lib!flags.flags0_is_committed.? (I (lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. self!))))) :pattern ((lib!flags.impl&%0.is_committed.? self!))))))
(assert (fuel_bool_default fuel%lib!flags.impl&%0.is_zero_init.))
(assert (=> (fuel_bool fuel%lib!flags.impl&%0.is_zero_init.) (forall ((self! Poly)) (! (= (lib!flags.impl&%0.is_zero_init.? self!) (lib!flags.flags0_is_zero_init.? (I (lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. self!))))) :pattern ((lib!flags.impl&%0.is_zero_init.? self!))))))
(assert (fuel_bool_default fuel%lib!flags.impl&%0.has_aligned.))
(assert (=> (fuel_bool fuel%lib!flags.impl&%0.has_aligned.) (forall ((self! Poly)) (! (= (lib!flags.impl&%0.has_aligned.? self!) (lib!flags.flags1_has_aligned.? (I (lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. self!))))) :pattern ((lib!flags.impl&%0.has_aligned.? self!))))))
(assert (fuel_bool_default fuel%lib!flags.impl&%0.is_zero.))
(assert (=> (fuel_bool fuel%lib!flags.impl&%0.is_zero.) (forall ((self! Poly)) (! (= (lib!flags.impl&%0.is_zero.? self!) (lib!flags.flags2_is_zero.? (I (lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. self!))))) :pattern ((lib!flags.impl&%0.is_zero.? self!))))))
(assert (fuel_bool_default fuel%lib!flags.impl&%0.retire_expire.))
(assert (=> (fuel_bool fuel%lib!flags.impl&%0.retire_expire.) (forall ((self! Poly)) (! (= (lib!flags.impl&%0.retire_expire.? self!) (lib!flags.flags2_retire_expire.? (I (lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. self!))))) :pattern ((lib!flags.impl&%0.retire_expire.? self!))))))
(declare-fun ens%lib!flags.impl&%0.get_is_reset. (lib!types.PageInner. Bool) Bool)
(assert (forall ((self! lib!types.PageInner.) (b! Bool)) (! (= (ens%lib!flags.impl&%0.get_is_reset. self! b!) (= b! (lib!flags.impl&%0.is_reset.? (Poly%lib!types.PageInner. self!)))) :pattern ((ens%lib!flags.impl&%0.get_is_reset. self! b!)))))
(declare-fun ens%lib!flags.impl&%0.get_is_committed. (lib!types.PageInner. Bool) Bool)
(assert (forall ((self! lib!types.PageInner.) (b! Bool)) (! (= (ens%lib!flags.impl&%0.get_is_committed. self! b!) (= b! (lib!flags.impl&%0.is_committed.? (Poly%lib!types.PageInner. self!)))) :pattern ((ens%lib!flags.impl&%0.get_is_committed. self! b!)))))
(declare-fun ens%lib!flags.impl&%0.get_is_zero_init. (lib!types.PageInner. Bool) Bool)
(assert (forall ((self! lib!types.PageInner.) (b! Bool)) (! (= (ens%lib!flags.impl&%0.get_is_zero_init. self! b!) (= b! (lib!flags.impl&%0.is_zero_init.? (Poly%lib!types.PageInner. self!)))) :pattern ((ens%lib!flags.impl&%0.get_is_zero_init. self! b!)))))
(declare-fun ens%lib!flags.impl&%0.get_in_full. (lib!types.PageInner. Bool) Bool)
(assert (forall ((self! lib!types.PageInner.) (b! Bool)) (! (= (ens%lib!flags.impl&%0.get_in_full. self! b!) (= b! (lib!flags.impl&%0.in_full.? (Poly%lib!types.PageInner. self!)))) :pattern ((ens%lib!flags.impl&%0.get_in_full. self! b!)))))
(declare-fun ens%lib!flags.impl&%0.get_has_aligned. (lib!types.PageInner. Bool) Bool)
(assert (forall ((self! lib!types.PageInner.) (b! Bool)) (! (= (ens%lib!flags.impl&%0.get_has_aligned. self! b!) (= b! (lib!flags.impl&%0.has_aligned.? (Poly%lib!types.PageInner. self!)))) :pattern ((ens%lib!flags.impl&%0.get_has_aligned. self! b!)))))
(declare-fun ens%lib!flags.impl&%0.get_is_zero. (lib!types.PageInner. Bool) Bool)
(assert (forall ((self! lib!types.PageInner.) (b! Bool)) (! (= (ens%lib!flags.impl&%0.get_is_zero. self! b!) (= b! (lib!flags.impl&%0.is_zero.? (Poly%lib!types.PageInner. self!)))) :pattern ((ens%lib!flags.impl&%0.get_is_zero. self! b!)))))
(declare-fun ens%lib!flags.impl&%0.get_retire_expire. (lib!types.PageInner. Int) Bool)
(assert (forall ((self! lib!types.PageInner.) (u! Int)) (! (= (ens%lib!flags.impl&%0.get_retire_expire. self! u!) (and (uInv 8 u!) (= u! (lib!flags.impl&%0.retire_expire.? (Poly%lib!types.PageInner. self!))) (<= u! 127))) :pattern ((ens%lib!flags.impl&%0.get_retire_expire. self! u!)))))
(declare-fun ens%lib!flags.impl&%0.not_full_nor_aligned. (lib!types.PageInner. Bool) Bool)
(assert (forall ((self! lib!types.PageInner.) (b! Bool)) (! (= (ens%lib!flags.impl&%0.not_full_nor_aligned. self! b!) (=> b! (and (not (lib!flags.impl&%0.in_full.? (Poly%lib!types.PageInner. self!))) (not (lib!flags.impl&%0.has_aligned.? (Poly%lib!types.PageInner. self!)))))) :pattern ((ens%lib!flags.impl&%0.not_full_nor_aligned. self! b!)))))
(declare-fun req%lib!flags.impl&%0.set_retire_expire. (lib!types.PageInner. Int) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((pre%self! lib!types.PageInner.) (u! Int)) (! (= (req%lib!flags.impl&%0.set_retire_expire. pre%self! u!) (=> %%global_location_label%%0 (<= u! 127))) :pattern ((req%lib!flags.impl&%0.set_retire_expire. pre%self! u!)))))
(declare-fun ens%lib!flags.impl&%0.set_retire_expire. (lib!types.PageInner. lib!types.PageInner. Int) Bool)
(assert (forall ((pre%self! lib!types.PageInner.) (self! lib!types.PageInner.) (u! Int)) (! (= (ens%lib!flags.impl&%0.set_retire_expire. pre%self! self! u!) (and (has_type (Poly%lib!types.PageInner. self!) TYPE%lib!types.PageInner.) (= self! (lib!types.PageInner./PageInner (%I (I (lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. self!))))) (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))))) (= (lib!flags.impl&%0.is_zero.? (Poly%lib!types.PageInner. self!)) (lib!flags.impl&%0.is_zero.? (Poly%lib!types.PageInner. pre%self!))) (= (lib!flags.impl&%0.retire_expire.? (Poly%lib!types.PageInner. self!)) u!))) :pattern ((ens%lib!flags.impl&%0.set_retire_expire. pre%self! self! u!)))))
(declare-fun ens%lib!flags.impl&%0.set_is_reset. (lib!types.PageInner. lib!types.PageInner. Bool) Bool)
(assert (forall ((pre%self! lib!types.PageInner.) (self! lib!types.PageInner.) (b! Bool)) (! (= (ens%lib!flags.impl&%0.set_is_reset. pre%self! self! b!) (and (has_type (Poly%lib!types.PageInner. self!) TYPE%lib!types.PageInner.) (= self! (lib!types.PageInner./PageInner (%I (I (lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. self!))))) (%I (I (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))))) (= (lib!flags.impl&%0.is_reset.? (Poly%lib!types.PageInner. self!)) b!) (= (lib!flags.impl&%0.is_committed.? (Poly%lib!types.PageInner. self!)) (lib!flags.impl&%0.is_committed.? (Poly%lib!types.PageInner. pre%self!))) (= (lib!flags.impl&%0.is_zero_init.? (Poly%lib!types.PageInner. self!)) (lib!flags.impl&%0.is_zero_init.? (Poly%lib!types.PageInner. pre%self!))))) :pattern ((ens%lib!flags.impl&%0.set_is_reset. pre%self! self! b!)))))
(declare-fun ens%lib!flags.impl&%0.set_is_committed. (lib!types.PageInner. lib!types.PageInner. Bool) Bool)
(assert (forall ((pre%self! lib!types.PageInner.) (self! lib!types.PageInner.) (b! Bool)) (! (= (ens%lib!flags.impl&%0.set_is_committed. pre%self! self! b!) (and (has_type (Poly%lib!types.PageInner. self!) TYPE%lib!types.PageInner.) (= self! (lib!types.PageInner./PageInner (%I (I (lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. self!))))) (%I (I (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))))) (= (lib!flags.impl&%0.is_reset.? (Poly%lib!types.PageInner. self!)) (lib!flags.impl&%0.is_reset.? (Poly%lib!types.PageInner. pre%self!))) (= (lib!flags.impl&%0.is_committed.? (Poly%lib!types.PageInner. self!)) b!) (= (lib!flags.impl&%0.is_zero_init.? (Poly%lib!types.PageInner. self!)) (lib!flags.impl&%0.is_zero_init.? (Poly%lib!types.PageInner. pre%self!))))) :pattern ((ens%lib!flags.impl&%0.set_is_committed. pre%self! self! b!)))))
(declare-fun ens%lib!flags.impl&%0.set_is_zero_init. (lib!types.PageInner. lib!types.PageInner. Bool) Bool)
(assert (forall ((pre%self! lib!types.PageInner.) (self! lib!types.PageInner.) (b! Bool)) (! (= (ens%lib!flags.impl&%0.set_is_zero_init. pre%self! self! b!) (and (has_type (Poly%lib!types.PageInner. self!) TYPE%lib!types.PageInner.) (= self! (lib!types.PageInner./PageInner (%I (I (lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. self!))))) (%I (I (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))))) (= (lib!flags.impl&%0.is_reset.? (Poly%lib!types.PageInner. self!)) (lib!flags.impl&%0.is_reset.? (Poly%lib!types.PageInner. pre%self!))) (= (lib!flags.impl&%0.is_committed.? (Poly%lib!types.PageInner. self!)) (lib!flags.impl&%0.is_committed.? (Poly%lib!types.PageInner. pre%self!))) (= (lib!flags.impl&%0.is_zero_init.? (Poly%lib!types.PageInner. self!)) b!))) :pattern ((ens%lib!flags.impl&%0.set_is_zero_init. pre%self! self! b!)))))
(declare-fun ens%lib!flags.impl&%0.set_in_full. (lib!types.PageInner. lib!types.PageInner. Bool) Bool)
(assert (forall ((pre%self! lib!types.PageInner.) (self! lib!types.PageInner.) (b! Bool)) (! (= (ens%lib!flags.impl&%0.set_in_full. pre%self! self! b!) (and (has_type (Poly%lib!types.PageInner. self!) TYPE%lib!types.PageInner.) (= self! (lib!types.PageInner./PageInner (%I (I (lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. self!))))) (%I (I (lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%I (I (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))) (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. pre%self!))))))) (= (lib!flags.impl&%0.has_aligned.? (Poly%lib!types.PageInner. self!)) (lib!flags.impl&%0.has_aligned.? (Poly%lib!types.PageInner. pre%self!))) (= (lib!flags.impl&%0.in_full.? (Poly%lib!types.PageInner. self!)) b!))) :pattern ((ens%lib!flags.impl&%0.set_in_full. pre%self! self! b!)))))
(declare-const y@ (_ BitVec 8))
(declare-const x@ (_ BitVec 8))
(assert true)
(declare-const %%location_label%%0 Bool)
(assert (not (=> %%location_label%%0 (=> (or (= y@ ((_ zero_extend 7) (_ bv1 1))) (= y@ ((_ zero_extend 7) (_ bv0 1)))) (= (bvand (bvor (bvand x@ (bvnot ((_ zero_extend 7) (_ bv1 1)))) y@) ((_ zero_extend 6) (_ bv2 2))) (bvand x@ ((_ zero_extend 6) (_ bv2 2))))))))
(check-sat)
(exit)
