(set-info :smt-lib-version 2.6)
(set-logic UFBVDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verismo (https://www.usenix.org/conference/osdi24/presentation/zhou) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
    (set-option :sat.euf true)
    (set-option :tactic.default_tactic sat)
    (set-option :smt.ematching false)
    (set-option :smt.case_split 0)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit64. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit_set. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit_clear. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_has_bit_set. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.slow_bit_range_req. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2. FuelId)
(assert (distinct fuel%verismo!tspec.math.bits_p.spec_bit64. fuel%verismo!tspec.math.bits_p.spec_bit_set. fuel%verismo!tspec.math.bits_p.spec_bit_clear. fuel%verismo!tspec.math.bits_p.spec_has_bit_set. fuel%verismo!tspec.math.bits_p.slow_bit_range_req. fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties. fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties. fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.))
(declare-datatypes ((tuple%0. 0)) (((tuple%0./tuple%0 ))))
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(declare-fun verismo!tspec.math.bits_p.spec_bit64.? (Poly) Int)
(declare-fun verismo!tspec.math.bits_p.spec_bit_set.? (Poly Poly) Int)
(declare-fun verismo!tspec.math.bits_p.spec_bit_clear.? (Poly Poly) Int)
(declare-fun verismo!tspec.math.bits_p.spec_has_bit_set.? (Poly Poly) Bool)
(declare-fun verismo!tspec.math.bits_p.slow_bit_range_req.? (Poly) Bool)
(declare-fun verismo!tspec.math.bits_p.spec_bit64_or_properties.? (Poly Poly Poly) Bool)
(declare-fun verismo!tspec.math.bits_p.spec_bit64_not_properties.? (Poly Poly) Bool)
(declare-fun verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? (Poly) Bool)
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit_set.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit_set.) (forall ((val! Poly) (bit! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit_set.? val! bit!) (uClip 64 (uintor 64 (I (%I val!)) (I (uClip 64 (uintshl 64 (I 1) (I (%I bit!)))))))) :pattern ((verismo!tspec.math.bits_p.spec_bit_set.? val! bit!))))))
(assert (forall ((val! Poly) (bit! Poly)) (! (=> (and (has_type val! (UINT 64)) (has_type bit! (UINT 64))) (uInv 64 (verismo!tspec.math.bits_p.spec_bit_set.? val! bit!))) :pattern ((verismo!tspec.math.bits_p.spec_bit_set.? val! bit!)))))
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_has_bit_set.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_has_bit_set.) (forall ((val! Poly) (bit! Poly)) (! (= (verismo!tspec.math.bits_p.spec_has_bit_set.? val! bit!) (= (uClip 64 (uintshl 64 (I 1) (I (%I bit!)))) (uClip 64 (uintand 64 (I (%I val!)) (I (uClip 64 (uintshl 64 (I 1) (I (%I bit!))))))))) :pattern ((verismo!tspec.math.bits_p.spec_has_bit_set.? val! bit!))))))
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.) (forall ((val! Poly)) (! (= (verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? val!) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I val!) 1) (= (%I val!) 2)) (= (%I val!) 4)) (= (%I val!) 8)) (= (%I val!) 16)) (= (%I val!) 32)) (= (%I val!) 64)) (= (%I val!) 128)) (= (%I val!) 256)) (= (%I val!) 512)) (= (%I val!) 1024)) (= (%I val!) 2048)) (= (%I val!) 4096)) (= (%I val!) 8192)) (= (%I val!) 16384)) (= (%I val!) 32768)) (= (%I val!) 65536)) (= (%I val!) 131072)) (= (%I val!) 262144)) (= (%I val!) 524288)) (= (%I val!) 1048576)) (= (%I val!) 2097152)) (= (%I val!) 4194304)) (= (%I val!) 8388608)) (= (%I val!) 16777216)) (= (%I val!) 33554432)) (= (%I val!) 67108864)) (= (%I val!) 134217728)) (= (%I val!) 268435456)) (= (%I val!) 536870912)) (= (%I val!) 1073741824)) (= (%I val!) 2147483648)) (= (%I val!) 4294967296)) (= (%I val!) 8589934592)) (= (%I val!) 17179869184)) (= (%I val!) 34359738368)) (= (%I val!) 68719476736)) (= (%I val!) 137438953472)) (= (%I val!) 274877906944)) (= (%I val!) 549755813888)) (= (%I val!) 1099511627776)) (= (%I val!) 2199023255552)) (= (%I val!) 4398046511104)) (= (%I val!) 8796093022208)) (= (%I val!) 17592186044416)) (= (%I val!) 35184372088832)) (= (%I val!) 70368744177664)) (= (%I val!) 140737488355328)) (= (%I val!) 281474976710656)) (= (%I val!) 562949953421312)) (= (%I val!) 1125899906842624)) (= (%I val!) 2251799813685248)) (= (%I val!) 4503599627370496)) (= (%I val!) 9007199254740992)) (= (%I val!) 18014398509481984)) (= (%I val!) 36028797018963968)) (= (%I val!) 72057594037927936)) (= (%I val!) 144115188075855872)) (= (%I val!) 288230376151711744)) (= (%I val!) 576460752303423488)) (= (%I val!) 1152921504606846976)) (= (%I val!) 2305843009213693952)) (= (%I val!) 4611686018427387904)) (= (%I val!) 9223372036854775808))) :pattern ((verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? val!))))))
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit64.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit64.) (forall ((val! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit64.? val!) (uClip 64 (uintshl 64 (I 1) (I (%I val!))))) :pattern ((verismo!tspec.math.bits_p.spec_bit64.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (uInv 64 (verismo!tspec.math.bits_p.spec_bit64.? val!))) :pattern ((verismo!tspec.math.bits_p.spec_bit64.? val!)))))
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit_clear.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit_clear.) (forall ((val! Poly) (bit! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit_clear.? val! bit!) (uClip 64 (uintand 64 (I (%I val!)) (I (uClip 64 (uintnot 64 (I (uClip 64 (uintshl 64 (I 1) (I (%I bit!))))))))))) :pattern ((verismo!tspec.math.bits_p.spec_bit_clear.? val! bit!))))))
(assert (forall ((val! Poly) (bit! Poly)) (! (=> (and (has_type val! (UINT 64)) (has_type bit! (UINT 64))) (uInv 64 (verismo!tspec.math.bits_p.spec_bit_clear.? val! bit!))) :pattern ((verismo!tspec.math.bits_p.spec_bit_clear.? val! bit!)))))
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.slow_bit_range_req.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.slow_bit_range_req.) (forall ((bits! Poly)) (! (= (verismo!tspec.math.bits_p.slow_bit_range_req.? bits!) (or (or (= (%I bits!) 2) (= (%I bits!) 3)) (= (%I bits!) 12))) :pattern ((verismo!tspec.math.bits_p.slow_bit_range_req.? bits!))))))
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties.) (forall ((a! Poly) (b! Poly) (ret! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit64_or_properties.? a! b! ret!) (and (and (and (and (and (and (= (%I ret!) (uClip 64 (uintor 64 (I (%I a!)) (I (%I b!))))) (= (%I ret!) (uClip 64 (uintor 64 (I (%I b!)) (I (%I a!)))))) (and (<= 0 (%I ret!)) (<= (%I ret!) 18446744073709551615))) (= (uClip 64 (uintand 64 (I (%I ret!)) (I (%I b!)))) (%I b!))) (>= (%I ret!) (%I a!))) (>= (%I ret!) (%I b!))) (= (uClip 64 (uintand 64 (I (%I ret!)) (I (uClip 64 (uintnot 64 (I (%I b!))))))) (uClip 64 (uintand 64 (I (%I a!)) (I (uClip 64 (uintnot 64 (I (%I b!)))))))))) :pattern ((verismo!tspec.math.bits_p.spec_bit64_or_properties.? a! b! ret!))))))
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties.) (forall ((a! Poly) (ret! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit64_not_properties.? a! ret!) (and (and (and (and (= (%I ret!) (uClip 64 (uintnot 64 (I (%I a!))))) (= (uClip 64 (uintand 64 (I (%I ret!)) (I (%I a!)))) 0)) (= (%I ret!) (uClip 64 (Sub 18446744073709551615 (%I a!))))) (and (<= 0 (%I ret!)) (<= (%I ret!) 18446744073709551615))) (= (uClip 64 (uintnot 64 (I (%I ret!)))) (%I a!)))) :pattern ((verismo!tspec.math.bits_p.spec_bit64_not_properties.? a! ret!))))))
(declare-fun ens%verismo!tspec.math.bits_p.bit64_shl_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_shl_auto. no%param) (and (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintshl 64 (I (%I a$)) (I 0))) (%I a$))) :pattern ((uClip 64 (uintshl 64 (I (%I a$)) (I 0)))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (=> (< (%I a$) 64) (> (uClip 64 (uintshl 64 (I 1) (I (%I a$)))) 0))) :pattern ((uClip 64 (uintshl 64 (I 1) (I (%I a$))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (=> (< (%I b$) 64) (or (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintshl 64 (I 1) (I (%I b$))))))) (uClip 64 (uintshl 64 (I 1) (I (%I b$))))) (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintshl 64 (I 1) (I (%I b$))))))) 0)))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintshl 64 (I 1) (I (%I b$)))))))))) (=> (< 0 64) (= (uClip 64 (uintshl 64 (I 1) (I 0))) 1)) (=> (< 1 64) (= (uClip 64 (uintshl 64 (I 1) (I 1))) 2)) (=> (< 2 64) (= (uClip 64 (uintshl 64 (I 1) (I 2))) 4)) (=> (< 3 64) (= (uClip 64 (uintshl 64 (I 1) (I 3))) 8)) (=> (< 4 64) (= (uClip 64 (uintshl 64 (I 1) (I 4))) 16)) (=> (< 5 64) (= (uClip 64 (uintshl 64 (I 1) (I 5))) 32)) (=> (< 6 64) (= (uClip 64 (uintshl 64 (I 1) (I 6))) 64)) (=> (< 7 64) (= (uClip 64 (uintshl 64 (I 1) (I 7))) 128)) (=> (< 8 64) (= (uClip 64 (uintshl 64 (I 1) (I 8))) 256)) (=> (< 9 64) (= (uClip 64 (uintshl 64 (I 1) (I 9))) 512)) (=> (< 10 64) (= (uClip 64 (uintshl 64 (I 1) (I 10))) 1024)) (=> (< 11 64) (= (uClip 64 (uintshl 64 (I 1) (I 11))) 2048)) (=> (< 12 64) (= (uClip 64 (uintshl 64 (I 1) (I 12))) 4096)) (=> (< 13 64) (= (uClip 64 (uintshl 64 (I 1) (I 13))) 8192)) (=> (< 14 64) (= (uClip 64 (uintshl 64 (I 1) (I 14))) 16384)) (=> (< 15 64) (= (uClip 64 (uintshl 64 (I 1) (I 15))) 32768)) (=> (< 16 64) (= (uClip 64 (uintshl 64 (I 1) (I 16))) 65536)) (=> (< 17 64) (= (uClip 64 (uintshl 64 (I 1) (I 17))) 131072)) (=> (< 18 64) (= (uClip 64 (uintshl 64 (I 1) (I 18))) 262144)) (=> (< 19 64) (= (uClip 64 (uintshl 64 (I 1) (I 19))) 524288)) (=> (< 20 64) (= (uClip 64 (uintshl 64 (I 1) (I 20))) 1048576)) (=> (< 21 64) (= (uClip 64 (uintshl 64 (I 1) (I 21))) 2097152)) (=> (< 22 64) (= (uClip 64 (uintshl 64 (I 1) (I 22))) 4194304)) (=> (< 23 64) (= (uClip 64 (uintshl 64 (I 1) (I 23))) 8388608)) (=> (< 24 64) (= (uClip 64 (uintshl 64 (I 1) (I 24))) 16777216)) (=> (< 25 64) (= (uClip 64 (uintshl 64 (I 1) (I 25))) 33554432)) (=> (< 26 64) (= (uClip 64 (uintshl 64 (I 1) (I 26))) 67108864)) (=> (< 27 64) (= (uClip 64 (uintshl 64 (I 1) (I 27))) 134217728)) (=> (< 28 64) (= (uClip 64 (uintshl 64 (I 1) (I 28))) 268435456)) (=> (< 29 64) (= (uClip 64 (uintshl 64 (I 1) (I 29))) 536870912)) (=> (< 30 64) (= (uClip 64 (uintshl 64 (I 1) (I 30))) 1073741824)) (=> (< 31 64) (= (uClip 64 (uintshl 64 (I 1) (I 31))) 2147483648)) (=> (< 32 64) (= (uClip 64 (uintshl 64 (I 1) (I 32))) 4294967296)) (=> (< 33 64) (= (uClip 64 (uintshl 64 (I 1) (I 33))) 8589934592)) (=> (< 34 64) (= (uClip 64 (uintshl 64 (I 1) (I 34))) 17179869184)) (=> (< 35 64) (= (uClip 64 (uintshl 64 (I 1) (I 35))) 34359738368)) (=> (< 36 64) (= (uClip 64 (uintshl 64 (I 1) (I 36))) 68719476736)) (=> (< 37 64) (= (uClip 64 (uintshl 64 (I 1) (I 37))) 137438953472)) (=> (< 38 64) (= (uClip 64 (uintshl 64 (I 1) (I 38))) 274877906944)) (=> (< 39 64) (= (uClip 64 (uintshl 64 (I 1) (I 39))) 549755813888)) (=> (< 40 64) (= (uClip 64 (uintshl 64 (I 1) (I 40))) 1099511627776)) (=> (< 41 64) (= (uClip 64 (uintshl 64 (I 1) (I 41))) 2199023255552)) (=> (< 42 64) (= (uClip 64 (uintshl 64 (I 1) (I 42))) 4398046511104)) (=> (< 43 64) (= (uClip 64 (uintshl 64 (I 1) (I 43))) 8796093022208)) (=> (< 44 64) (= (uClip 64 (uintshl 64 (I 1) (I 44))) 17592186044416)) (=> (< 45 64) (= (uClip 64 (uintshl 64 (I 1) (I 45))) 35184372088832)) (=> (< 46 64) (= (uClip 64 (uintshl 64 (I 1) (I 46))) 70368744177664)) (=> (< 47 64) (= (uClip 64 (uintshl 64 (I 1) (I 47))) 140737488355328)) (=> (< 48 64) (= (uClip 64 (uintshl 64 (I 1) (I 48))) 281474976710656)) (=> (< 49 64) (= (uClip 64 (uintshl 64 (I 1) (I 49))) 562949953421312)) (=> (< 50 64) (= (uClip 64 (uintshl 64 (I 1) (I 50))) 1125899906842624)) (=> (< 51 64) (= (uClip 64 (uintshl 64 (I 1) (I 51))) 2251799813685248)) (=> (< 52 64) (= (uClip 64 (uintshl 64 (I 1) (I 52))) 4503599627370496)) (=> (< 53 64) (= (uClip 64 (uintshl 64 (I 1) (I 53))) 9007199254740992)) (=> (< 54 64) (= (uClip 64 (uintshl 64 (I 1) (I 54))) 18014398509481984)) (=> (< 55 64) (= (uClip 64 (uintshl 64 (I 1) (I 55))) 36028797018963968)) (=> (< 56 64) (= (uClip 64 (uintshl 64 (I 1) (I 56))) 72057594037927936)) (=> (< 57 64) (= (uClip 64 (uintshl 64 (I 1) (I 57))) 144115188075855872)) (=> (< 58 64) (= (uClip 64 (uintshl 64 (I 1) (I 58))) 288230376151711744)) (=> (< 59 64) (= (uClip 64 (uintshl 64 (I 1) (I 59))) 576460752303423488)) (=> (< 60 64) (= (uClip 64 (uintshl 64 (I 1) (I 60))) 1152921504606846976)) (=> (< 61 64) (= (uClip 64 (uintshl 64 (I 1) (I 61))) 2305843009213693952)) (=> (< 62 64) (= (uClip 64 (uintshl 64 (I 1) (I 62))) 4611686018427387904)) (=> (< 63 64) (= (uClip 64 (uintshl 64 (I 1) (I 63))) 9223372036854775808)))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_shl_auto. no%param)))))
(declare-const %%location_label%%0 Bool)
(declare-const %%location_label%%1 Bool)
(declare-const %%location_label%%2 Bool)
(declare-const %%location_label%%3 Bool)
(declare-const %%location_label%%4 Bool)
(declare-const %%location_label%%5 Bool)
(declare-const %%location_label%%6 Bool)
(declare-const %%location_label%%7 Bool)
(declare-const %%location_label%%8 Bool)
(declare-const %%location_label%%9 Bool)
(declare-const %%location_label%%10 Bool)
(declare-const %%location_label%%11 Bool)
(declare-const %%location_label%%12 Bool)
(declare-const %%location_label%%13 Bool)
(declare-const %%location_label%%14 Bool)
(declare-const %%location_label%%15 Bool)
(declare-const %%location_label%%16 Bool)
(declare-const %%location_label%%17 Bool)
(declare-const %%location_label%%18 Bool)
(declare-const %%location_label%%19 Bool)
(declare-const %%location_label%%20 Bool)
(declare-const %%location_label%%21 Bool)
(declare-const %%location_label%%22 Bool)
(declare-const %%location_label%%23 Bool)
(declare-const %%location_label%%24 Bool)
(declare-const %%location_label%%25 Bool)
(declare-const %%location_label%%26 Bool)
(declare-const %%location_label%%27 Bool)
(declare-const %%location_label%%28 Bool)
(declare-const %%location_label%%29 Bool)
(declare-const %%location_label%%30 Bool)
(declare-const %%location_label%%31 Bool)
(declare-const %%location_label%%32 Bool)
(declare-const %%location_label%%33 Bool)
(declare-const %%location_label%%34 Bool)
(declare-const %%location_label%%35 Bool)
(declare-const %%location_label%%36 Bool)
(declare-const %%location_label%%37 Bool)
(declare-const %%location_label%%38 Bool)
(declare-const %%location_label%%39 Bool)
(declare-const %%location_label%%40 Bool)
(declare-const %%location_label%%41 Bool)
(declare-const %%location_label%%42 Bool)
(declare-const %%location_label%%43 Bool)
(declare-const %%location_label%%44 Bool)
(declare-const %%location_label%%45 Bool)
(declare-const %%location_label%%46 Bool)
(declare-const %%location_label%%47 Bool)
(declare-const %%location_label%%48 Bool)
(declare-const %%location_label%%49 Bool)
(declare-const %%location_label%%50 Bool)
(declare-const %%location_label%%51 Bool)
(declare-const %%location_label%%52 Bool)
(declare-const %%location_label%%53 Bool)
(declare-const %%location_label%%54 Bool)
(declare-const %%location_label%%55 Bool)
(declare-const %%location_label%%56 Bool)
(declare-const %%location_label%%57 Bool)
(declare-const %%location_label%%58 Bool)
(declare-const %%location_label%%59 Bool)
(declare-const %%location_label%%60 Bool)
(declare-const %%location_label%%61 Bool)
(declare-const %%location_label%%62 Bool)
(declare-const %%location_label%%63 Bool)
(declare-const %%location_label%%64 Bool)
(declare-const %%location_label%%65 Bool)
(declare-const %%location_label%%66 Bool)
(assert (not (and (=> %%location_label%%0 (forall ((a$ (_ BitVec 64))) (! (= (bvshl a$ (_ bv0 64)) a$) :pattern ((bvshl a$ #x0000000000000000))))) (and (=> %%location_label%%1 (forall ((a$ (_ BitVec 64))) (! (=> (bvult a$ (concat (_ bv0 32) (_ bv64 32))) (bvugt (bvshl (_ bv1 64) a$) (_ bv0 64))) :pattern ((bvshl #x0000000000000001 a$))))) (and (=> %%location_label%%2 (forall ((a$ (_ BitVec 64)) (b$ (_ BitVec 64))) (! (=> (bvult b$ (concat (_ bv0 32) (_ bv64 32))) (or (= (bvand a$ (bvshl (_ bv1 64) b$)) (bvshl (_ bv1 64) b$)) (= (bvand a$ (bvshl (_ bv1 64) b$)) (_ bv0 64)))) :pattern ((bvand a$ (bvshl #x0000000000000001 b$)))))) (and (=> %%location_label%%3 (=> (bvult (_ bv0 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv0 64)) (_ bv1 64)))) (and (=> %%location_label%%4 (=> (bvult (_ bv1 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv1 64)) (_ bv2 64)))) (and (=> %%location_label%%5 (=> (bvult (_ bv2 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv2 64)) (_ bv4 64)))) (and (=> %%location_label%%6 (=> (bvult (_ bv3 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv3 64)) (_ bv8 64)))) (and (=> %%location_label%%7 (=> (bvult (_ bv4 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv4 64)) (_ bv16 64)))) (and (=> %%location_label%%8 (=> (bvult (_ bv5 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv5 64)) (_ bv32 64)))) (and (=> %%location_label%%9 (=> (bvult (_ bv6 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv6 64)) (_ bv64 64)))) (and (=> %%location_label%%10 (=> (bvult (_ bv7 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv7 64)) (_ bv128 64)))) (and (=> %%location_label%%11 (=> (bvult (_ bv8 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv8 64)) (_ bv256 64)))) (and (=> %%location_label%%12 (=> (bvult (_ bv9 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv9 64)) (_ bv512 64)))) (and (=> %%location_label%%13 (=> (bvult (_ bv10 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv10 64)) (_ bv1024 64)))) (and (=> %%location_label%%14 (=> (bvult (_ bv11 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv11 64)) (_ bv2048 64)))) (and (=> %%location_label%%15 (=> (bvult (_ bv12 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv12 64)) (_ bv4096 64)))) (and (=> %%location_label%%16 (=> (bvult (_ bv13 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv13 64)) (_ bv8192 64)))) (and (=> %%location_label%%17 (=> (bvult (_ bv14 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv14 64)) (_ bv16384 64)))) (and (=> %%location_label%%18 (=> (bvult (_ bv15 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv15 64)) (_ bv32768 64)))) (and (=> %%location_label%%19 (=> (bvult (_ bv16 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv16 64)) (_ bv65536 64)))) (and (=> %%location_label%%20 (=> (bvult (_ bv17 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv17 64)) (_ bv131072 64)))) (and (=> %%location_label%%21 (=> (bvult (_ bv18 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv18 64)) (_ bv262144 64)))) (and (=> %%location_label%%22 (=> (bvult (_ bv19 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv19 64)) (_ bv524288 64)))) (and (=> %%location_label%%23 (=> (bvult (_ bv20 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv20 64)) (_ bv1048576 64)))) (and (=> %%location_label%%24 (=> (bvult (_ bv21 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv21 64)) (_ bv2097152 64)))) (and (=> %%location_label%%25 (=> (bvult (_ bv22 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv22 64)) (_ bv4194304 64)))) (and (=> %%location_label%%26 (=> (bvult (_ bv23 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv23 64)) (_ bv8388608 64)))) (and (=> %%location_label%%27 (=> (bvult (_ bv24 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv24 64)) (_ bv16777216 64)))) (and (=> %%location_label%%28 (=> (bvult (_ bv25 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv25 64)) (_ bv33554432 64)))) (and (=> %%location_label%%29 (=> (bvult (_ bv26 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv26 64)) (_ bv67108864 64)))) (and (=> %%location_label%%30 (=> (bvult (_ bv27 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv27 64)) (_ bv134217728 64)))) (and (=> %%location_label%%31 (=> (bvult (_ bv28 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv28 64)) (_ bv268435456 64)))) (and (=> %%location_label%%32 (=> (bvult (_ bv29 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv29 64)) (_ bv536870912 64)))) (and (=> %%location_label%%33 (=> (bvult (_ bv30 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv30 64)) (_ bv1073741824 64)))) (and (=> %%location_label%%34 (=> (bvult (_ bv31 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv31 64)) (_ bv2147483648 64)))) (and (=> %%location_label%%35 (=> (bvult (_ bv32 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv32 64)) (_ bv4294967296 64)))) (and (=> %%location_label%%36 (=> (bvult (_ bv33 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv33 64)) (_ bv8589934592 64)))) (and (=> %%location_label%%37 (=> (bvult (_ bv34 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv34 64)) (_ bv17179869184 64)))) (and (=> %%location_label%%38 (=> (bvult (_ bv35 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv35 64)) (_ bv34359738368 64)))) (and (=> %%location_label%%39 (=> (bvult (_ bv36 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv36 64)) (_ bv68719476736 64)))) (and (=> %%location_label%%40 (=> (bvult (_ bv37 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv37 64)) (_ bv137438953472 64)))) (and (=> %%location_label%%41 (=> (bvult (_ bv38 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv38 64)) (_ bv274877906944 64)))) (and (=> %%location_label%%42 (=> (bvult (_ bv39 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv39 64)) (_ bv549755813888 64)))) (and (=> %%location_label%%43 (=> (bvult (_ bv40 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv40 64)) (_ bv1099511627776 64)))) (and (=> %%location_label%%44 (=> (bvult (_ bv41 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv41 64)) (_ bv2199023255552 64)))) (and (=> %%location_label%%45 (=> (bvult (_ bv42 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv42 64)) (_ bv4398046511104 64)))) (and (=> %%location_label%%46 (=> (bvult (_ bv43 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv43 64)) (_ bv8796093022208 64)))) (and (=> %%location_label%%47 (=> (bvult (_ bv44 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv44 64)) (_ bv17592186044416 64)))) (and (=> %%location_label%%48 (=> (bvult (_ bv45 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv45 64)) (_ bv35184372088832 64)))) (and (=> %%location_label%%49 (=> (bvult (_ bv46 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv46 64)) (_ bv70368744177664 64)))) (and (=> %%location_label%%50 (=> (bvult (_ bv47 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv47 64)) (_ bv140737488355328 64)))) (and (=> %%location_label%%51 (=> (bvult (_ bv48 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv48 64)) (_ bv281474976710656 64)))) (and (=> %%location_label%%52 (=> (bvult (_ bv49 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv49 64)) (_ bv562949953421312 64)))) (and (=> %%location_label%%53 (=> (bvult (_ bv50 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv50 64)) (_ bv1125899906842624 64)))) (and (=> %%location_label%%54 (=> (bvult (_ bv51 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv51 64)) (_ bv2251799813685248 64)))) (and (=> %%location_label%%55 (=> (bvult (_ bv52 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv52 64)) (_ bv4503599627370496 64)))) (and (=> %%location_label%%56 (=> (bvult (_ bv53 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv53 64)) (_ bv9007199254740992 64)))) (and (=> %%location_label%%57 (=> (bvult (_ bv54 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv54 64)) (_ bv18014398509481984 64)))) (and (=> %%location_label%%58 (=> (bvult (_ bv55 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv55 64)) (_ bv36028797018963968 64)))) (and (=> %%location_label%%59 (=> (bvult (_ bv56 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv56 64)) (_ bv72057594037927936 64)))) (and (=> %%location_label%%60 (=> (bvult (_ bv57 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv57 64)) (_ bv144115188075855872 64)))) (and (=> %%location_label%%61 (=> (bvult (_ bv58 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv58 64)) (_ bv288230376151711744 64)))) (and (=> %%location_label%%62 (=> (bvult (_ bv59 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv59 64)) (_ bv576460752303423488 64)))) (and (=> %%location_label%%63 (=> (bvult (_ bv60 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv60 64)) (_ bv1152921504606846976 64)))) (and (=> %%location_label%%64 (=> (bvult (_ bv61 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv61 64)) (_ bv2305843009213693952 64)))) (and (=> %%location_label%%65 (=> (bvult (_ bv62 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv62 64)) (_ bv4611686018427387904 64)))) (=> %%location_label%%66 (=> (bvult (_ bv63 32) (_ bv64 32)) (= (bvshl (_ bv1 64) (_ bv63 64)) (_ bv9223372036854775808 64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
