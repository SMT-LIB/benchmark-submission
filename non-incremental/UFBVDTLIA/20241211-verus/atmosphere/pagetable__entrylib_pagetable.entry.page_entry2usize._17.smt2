(set-info :smt-lib-version 2.6)
(set-logic UFBVDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Atmosphere (https://mars-research.github.io/projects/atmo/) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-option :sat.euf true)
(set-option :tactic.default_tactic sat)
(set-option :smt.ematching false)
(set-option :smt.case_split 0)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module pagetable::entry'")
(set-info :comment ";; pagetable/entry.rs:335:9: 335:15 (#0)")
(set-info :comment ";; query spun off because: bitvector")
(set-info :comment ";; Fuel")
(declare-const fuel%lib!pagetable.entry.impl&%4.is_empty. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_page_entry_to_map_entry. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_map_entry_to_page_entry. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2present. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2ps. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2write. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2execute_disable. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2user. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_usize2page_entry_perm. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_usize2page_entry. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_usize2pa. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.MEM_valid. FuelId)
(declare-const fuel%lib!define.MEM_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_USER_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PS_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PRESENT_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_WRITE_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_USER_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PS_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%lib!pagetable.entry.impl&%4.is_empty. fuel%lib!pagetable.entry.spec_page_entry_to_map_entry. fuel%lib!pagetable.entry.spec_map_entry_to_page_entry. fuel%lib!pagetable.entry.usize2present. fuel%lib!pagetable.entry.usize2ps. fuel%lib!pagetable.entry.usize2write. fuel%lib!pagetable.entry.usize2execute_disable. fuel%lib!pagetable.entry.usize2user. fuel%lib!pagetable.entry.spec_usize2page_entry_perm. fuel%lib!pagetable.entry.spec_usize2page_entry. fuel%lib!pagetable.entry.spec_usize2pa. fuel%lib!util.page_ptr_util_u.MEM_valid. fuel%lib!define.MEM_MASK. fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT. fuel%lib!define.PAGE_ENTRY_USER_SHIFT. fuel%lib!define.PAGE_ENTRY_PS_SHIFT. fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT. fuel%lib!define.PAGE_ENTRY_PRESENT_MASK. fuel%lib!define.PAGE_ENTRY_WRITE_MASK. fuel%lib!define.PAGE_ENTRY_USER_MASK. fuel%lib!define.PAGE_ENTRY_PS_MASK. fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-datatypes ((lib!pagetable.entry.PageEntryPerm. 0) (lib!pagetable.entry.PageEntry. 0) (lib!pagetable.entry.MapEntry. 0) (tuple%0. 0)) (((lib!pagetable.entry.PageEntryPerm./PageEntryPerm (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?present Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?ps Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?write Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?execute_disable Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?user Bool))) ((lib!pagetable.entry.PageEntry./PageEntry (lib!pagetable.entry.PageEntry./PageEntry/?addr Int) (lib!pagetable.entry.PageEntry./PageEntry/?perm lib!pagetable.entry.PageEntryPerm.))) ((lib!pagetable.entry.MapEntry./MapEntry (lib!pagetable.entry.MapEntry./MapEntry/?addr Int) (lib!pagetable.entry.MapEntry./MapEntry/?write Bool) (lib!pagetable.entry.MapEntry./MapEntry/?execute_disable Bool))) ((tuple%0./tuple%0 ))))
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntry./PageEntry/addr (lib!pagetable.entry.PageEntry.) Int)
(declare-fun lib!pagetable.entry.PageEntry./PageEntry/perm (lib!pagetable.entry.PageEntry.) lib!pagetable.entry.PageEntryPerm.)
(declare-fun lib!pagetable.entry.MapEntry./MapEntry/addr (lib!pagetable.entry.MapEntry.) Int)
(declare-fun lib!pagetable.entry.MapEntry./MapEntry/write (lib!pagetable.entry.MapEntry.) Bool)
(declare-fun lib!pagetable.entry.MapEntry./MapEntry/execute_disable (lib!pagetable.entry.MapEntry.) Bool)
(declare-const TYPE%lib!pagetable.entry.PageEntryPerm. Type)
(declare-const TYPE%lib!pagetable.entry.PageEntry. Type)
(declare-const TYPE%lib!pagetable.entry.MapEntry. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntryPerm.) Poly)
(declare-fun %Poly%lib!pagetable.entry.PageEntryPerm. (Poly) lib!pagetable.entry.PageEntryPerm.)
(declare-fun Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.PageEntry.) Poly)
(declare-fun %Poly%lib!pagetable.entry.PageEntry. (Poly) lib!pagetable.entry.PageEntry.)
(declare-fun Poly%lib!pagetable.entry.MapEntry. (lib!pagetable.entry.MapEntry.) Poly)
(declare-fun %Poly%lib!pagetable.entry.MapEntry. (Poly) lib!pagetable.entry.MapEntry.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= x (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. x))) :pattern ((Poly%lib!pagetable.entry.PageEntryPerm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.PageEntryPerm.) (= x (Poly%lib!pagetable.entry.PageEntryPerm. (%Poly%lib!pagetable.entry.PageEntryPerm. x)))) :pattern ((has_type x TYPE%lib!pagetable.entry.PageEntryPerm.)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?present x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?ps x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?write x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?execute_disable x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?user x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user x)))))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (has_type (Poly%lib!pagetable.entry.PageEntryPerm. x) TYPE%lib!pagetable.entry.PageEntryPerm.) :pattern ((has_type (Poly%lib!pagetable.entry.PageEntryPerm. x) TYPE%lib!pagetable.entry.PageEntryPerm.)))))
(assert (forall ((x lib!pagetable.entry.PageEntry.)) (! (= x (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. x))) :pattern ((Poly%lib!pagetable.entry.PageEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.PageEntry.) (= x (Poly%lib!pagetable.entry.PageEntry. (%Poly%lib!pagetable.entry.PageEntry. x)))) :pattern ((has_type x TYPE%lib!pagetable.entry.PageEntry.)))))
(assert (forall ((_addr! Int) (_perm! lib!pagetable.entry.PageEntryPerm.)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.PageEntry./PageEntry _addr! _perm!)) TYPE%lib!pagetable.entry.PageEntry.)) :pattern ((has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.PageEntry./PageEntry _addr! _perm!)) TYPE%lib!pagetable.entry.PageEntry.)))))
(assert (forall ((x lib!pagetable.entry.PageEntry.)) (! (= (lib!pagetable.entry.PageEntry./PageEntry/addr x) (lib!pagetable.entry.PageEntry./PageEntry/?addr x)) :pattern ((lib!pagetable.entry.PageEntry./PageEntry/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.PageEntry.) (uInv SZ (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. x)))) :pattern ((lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. x)) (has_type x TYPE%lib!pagetable.entry.PageEntry.)))))
(assert (forall ((x lib!pagetable.entry.PageEntry.)) (! (= (lib!pagetable.entry.PageEntry./PageEntry/perm x) (lib!pagetable.entry.PageEntry./PageEntry/?perm x)) :pattern ((lib!pagetable.entry.PageEntry./PageEntry/perm x)))))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= x (%Poly%lib!pagetable.entry.MapEntry. (Poly%lib!pagetable.entry.MapEntry. x))) :pattern ((Poly%lib!pagetable.entry.MapEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.MapEntry.) (= x (Poly%lib!pagetable.entry.MapEntry. (%Poly%lib!pagetable.entry.MapEntry. x)))) :pattern ((has_type x TYPE%lib!pagetable.entry.MapEntry.)))))
(assert (forall ((_addr! Int) (_write! Bool) (_execute_disable! Bool)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!pagetable.entry.MapEntry. (lib!pagetable.entry.MapEntry./MapEntry _addr! _write! _execute_disable!)) TYPE%lib!pagetable.entry.MapEntry.)) :pattern ((has_type (Poly%lib!pagetable.entry.MapEntry. (lib!pagetable.entry.MapEntry./MapEntry _addr! _write! _execute_disable!)) TYPE%lib!pagetable.entry.MapEntry.)))))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= (lib!pagetable.entry.MapEntry./MapEntry/addr x) (lib!pagetable.entry.MapEntry./MapEntry/?addr x)) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.MapEntry.) (uInv SZ (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. x)))) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. x)) (has_type x TYPE%lib!pagetable.entry.MapEntry.)))))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= (lib!pagetable.entry.MapEntry./MapEntry/write x) (lib!pagetable.entry.MapEntry./MapEntry/?write x)) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/write x)))))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= (lib!pagetable.entry.MapEntry./MapEntry/execute_disable x) (lib!pagetable.entry.MapEntry./MapEntry/?execute_disable x)) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/execute_disable x)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(set-info :comment ";; Function-Decl lib::define::MEM_MASK")
(declare-fun lib!define.MEM_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_usize2pa")
(declare-fun lib!pagetable.entry.spec_usize2pa.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PRESENT_MASK")
(declare-fun lib!define.PAGE_ENTRY_PRESENT_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2present")
(declare-fun lib!pagetable.entry.usize2present.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PS_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_PS_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PS_MASK")
(declare-fun lib!define.PAGE_ENTRY_PS_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2ps")
(declare-fun lib!pagetable.entry.usize2ps.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_WRITE_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_WRITE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_WRITE_MASK")
(declare-fun lib!define.PAGE_ENTRY_WRITE_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2write")
(declare-fun lib!pagetable.entry.usize2write.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_EXECUTE_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_EXECUTE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_EXECUTE_MASK")
(declare-fun lib!define.PAGE_ENTRY_EXECUTE_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2execute_disable")
(declare-fun lib!pagetable.entry.usize2execute_disable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_USER_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_USER_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_USER_MASK")
(declare-fun lib!define.PAGE_ENTRY_USER_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2user")
(declare-fun lib!pagetable.entry.usize2user.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_usize2page_entry_perm")
(declare-fun lib!pagetable.entry.spec_usize2page_entry_perm.? (Poly) lib!pagetable.entry.PageEntryPerm.)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_usize2page_entry")
(declare-fun lib!pagetable.entry.spec_usize2page_entry.? (Poly) lib!pagetable.entry.PageEntry.)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::MEM_valid")
(declare-fun lib!util.page_ptr_util_u.MEM_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::entry::PageEntry::is_empty")
(declare-fun lib!pagetable.entry.impl&%4.is_empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_page_entry_to_map_entry")
(declare-fun lib!pagetable.entry.spec_page_entry_to_map_entry.? (Poly) lib!pagetable.entry.MapEntry.)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_map_entry_to_page_entry")
(declare-fun lib!pagetable.entry.spec_map_entry_to_page_entry.? (Poly Poly) lib!pagetable.entry.PageEntry.)
(set-info :comment ";; Function-Axioms lib::define::MEM_MASK")
(assert (fuel_bool_default fuel%lib!define.MEM_MASK.))
(assert (=> (fuel_bool fuel%lib!define.MEM_MASK.) (= lib!define.MEM_MASK.? 281474976706560)))
(assert (uInv 64 lib!define.MEM_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_usize2pa")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_usize2pa.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_usize2pa.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.spec_usize2pa.? v!) (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.MEM_MASK.?))))) :pattern ((lib!pagetable.entry.spec_usize2pa.? v!))))))
(assert (forall ((v! Poly)) (! (=> (has_type v! (UINT SZ)) (uInv SZ (lib!pagetable.entry.spec_usize2pa.? v!))) :pattern ((lib!pagetable.entry.spec_usize2pa.? v!)))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_PRESENT_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_PRESENT_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_PRESENT_MASK.) (= lib!define.PAGE_ENTRY_PRESENT_MASK.? 1)))
(assert (uInv 64 lib!define.PAGE_ENTRY_PRESENT_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2present")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2present.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2present.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2present.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_PRESENT_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2present.? v!))))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_PS_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_PS_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_PS_SHIFT.) (= lib!define.PAGE_ENTRY_PS_SHIFT.? 7)))
(assert (uInv 64 lib!define.PAGE_ENTRY_PS_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_PS_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_PS_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_PS_MASK.) (= lib!define.PAGE_ENTRY_PS_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_PS_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_PS_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2ps")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2ps.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2ps.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2ps.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_PS_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2ps.? v!))))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_WRITE_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT.) (= lib!define.PAGE_ENTRY_WRITE_SHIFT.? 1)))
(assert (uInv 64 lib!define.PAGE_ENTRY_WRITE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_WRITE_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_WRITE_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_WRITE_MASK.) (= lib!define.PAGE_ENTRY_WRITE_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_WRITE_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_WRITE_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2write")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2write.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2write.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2write.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_WRITE_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2write.? v!))))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_EXECUTE_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT.) (= lib!define.PAGE_ENTRY_EXECUTE_SHIFT.? 63)))
(assert (uInv 64 lib!define.PAGE_ENTRY_EXECUTE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_EXECUTE_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK.) (= lib!define.PAGE_ENTRY_EXECUTE_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_EXECUTE_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_EXECUTE_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2execute_disable")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2execute_disable.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2execute_disable.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2execute_disable.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_EXECUTE_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2execute_disable.? v!))))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_USER_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_USER_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_USER_SHIFT.) (= lib!define.PAGE_ENTRY_USER_SHIFT.? 2)))
(assert (uInv 64 lib!define.PAGE_ENTRY_USER_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_USER_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_USER_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_USER_MASK.) (= lib!define.PAGE_ENTRY_USER_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_USER_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_USER_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2user")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2user.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2user.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2user.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_USER_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2user.? v!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_usize2page_entry_perm")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_usize2page_entry_perm.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_usize2page_entry_perm.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.spec_usize2page_entry_perm.? v!) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm (%B (B (lib!pagetable.entry.usize2present.? v!))) (%B (B (lib!pagetable.entry.usize2ps.? v!))) (%B (B (lib!pagetable.entry.usize2write.? v!))) (%B (B (lib!pagetable.entry.usize2execute_disable.? v!))) (%B (B (lib!pagetable.entry.usize2user.? v!))))) :pattern ((lib!pagetable.entry.spec_usize2page_entry_perm.? v!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_usize2page_entry")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_usize2page_entry.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_usize2page_entry.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.spec_usize2page_entry.? v!) (lib!pagetable.entry.PageEntry./PageEntry (%I (I (lib!pagetable.entry.spec_usize2pa.? v!))) (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.spec_usize2page_entry_perm.? v!))))) :pattern ((lib!pagetable.entry.spec_usize2page_entry.? v!))))))
(assert (forall ((v! Poly)) (! (=> (has_type v! (UINT SZ)) (has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.spec_usize2page_entry.? v!)) TYPE%lib!pagetable.entry.PageEntry.)) :pattern ((lib!pagetable.entry.spec_usize2page_entry.? v!)))))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::MEM_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.MEM_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.MEM_valid.) (forall ((v! Poly)) (! (= (lib!util.page_ptr_util_u.MEM_valid.? v!) (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ (uClip 64 (bitnot (I lib!define.MEM_MASK.?))))))) 0)) :pattern ((lib!util.page_ptr_util_u.MEM_valid.? v!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::PageEntry::is_empty")
(assert (fuel_bool_default fuel%lib!pagetable.entry.impl&%4.is_empty.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.impl&%4.is_empty.) (forall ((self! Poly)) (! (= (lib!pagetable.entry.impl&%4.is_empty.? self!) (and (and (and (and (and (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. self!)) 0) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false))) :pattern ((lib!pagetable.entry.impl&%4.is_empty.? self!))))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_page_entry_to_map_entry")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_page_entry_to_map_entry.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_page_entry_to_map_entry.) (forall ((p! Poly)) (! (= (lib!pagetable.entry.spec_page_entry_to_map_entry.? p!) (lib!pagetable.entry.MapEntry./MapEntry (%I (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. p!)))) (%B (B (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. p!))))))) (%B (B (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. p!))))))))) :pattern ((lib!pagetable.entry.spec_page_entry_to_map_entry.? p!))))))
(assert (forall ((p! Poly)) (! (=> (has_type p! TYPE%lib!pagetable.entry.PageEntry.) (has_type (Poly%lib!pagetable.entry.MapEntry. (lib!pagetable.entry.spec_page_entry_to_map_entry.? p!)) TYPE%lib!pagetable.entry.MapEntry.)) :pattern ((lib!pagetable.entry.spec_page_entry_to_map_entry.? p!)))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_map_entry_to_page_entry")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_map_entry_to_page_entry.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_map_entry_to_page_entry.) (forall ((m! Poly) (ps! Poly)) (! (= (lib!pagetable.entry.spec_map_entry_to_page_entry.? m! ps!) (lib!pagetable.entry.PageEntry./PageEntry (%I (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. m!)))) (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntryPerm./PageEntryPerm (%B (B true)) (%B ps!) (%B (B (lib!pagetable.entry.MapEntry./MapEntry/write (%Poly%lib!pagetable.entry.MapEntry. m!)))) (%B (B (lib!pagetable.entry.MapEntry./MapEntry/execute_disable (%Poly%lib!pagetable.entry.MapEntry. m!)))) (%B (B true))))))) :pattern ((lib!pagetable.entry.spec_map_entry_to_page_entry.? m! ps!))))))
(assert (forall ((m! Poly) (ps! Poly)) (! (=> (and (has_type m! TYPE%lib!pagetable.entry.MapEntry.) (has_type ps! BOOL)) (has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.spec_map_entry_to_page_entry.? m! ps!)) TYPE%lib!pagetable.entry.PageEntry.)) :pattern ((lib!pagetable.entry.spec_map_entry_to_page_entry.? m! ps!)))))
(set-info :comment ";; Function-Specs lib::pagetable::entry::zero_leads_is_empty_page_entry")
(declare-fun ens%lib!pagetable.entry.zero_leads_is_empty_page_entry. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!pagetable.entry.zero_leads_is_empty_page_entry. no%param) (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.spec_usize2page_entry.? (I 0))))) :pattern ((ens%lib!pagetable.entry.zero_leads_is_empty_page_entry. no%param)))))
(set-info :comment ";; Function-Specs lib::pagetable::entry::page_entry2usize")
(declare-fun req%lib!pagetable.entry.page_entry2usize. (lib!pagetable.entry.PageEntry.) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((page_entry! lib!pagetable.entry.PageEntry.)) (! (= (req%lib!pagetable.entry.page_entry2usize. page_entry!) (=> %%global_location_label%%0 (lib!util.page_ptr_util_u.MEM_valid.? (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) :pattern ((req%lib!pagetable.entry.page_entry2usize. page_entry!)))))
(declare-fun ens%lib!pagetable.entry.page_entry2usize. (lib!pagetable.entry.PageEntry. Int) Bool)
(assert (forall ((page_entry! lib!pagetable.entry.PageEntry.) (ret! Int)) (! (= (ens%lib!pagetable.entry.page_entry2usize. page_entry! ret!) (and (uInv SZ ret!) (= (lib!pagetable.entry.usize2present.? (I ret!)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) (= (lib!pagetable.entry.usize2ps.? (I ret!)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) (= (lib!pagetable.entry.usize2write.? (I ret!)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) (= (lib!pagetable.entry.usize2execute_disable.? (I ret!)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) (= (lib!pagetable.entry.usize2user.? (I ret!)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) (= (lib!pagetable.entry.spec_usize2pa.? (I ret!)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))) (ext_eq false TYPE%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.spec_usize2page_entry_perm.? (I ret!))) (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) :pattern ((ens%lib!pagetable.entry.page_entry2usize. page_entry! ret!)))))
(set-info :comment ";; Function-Def lib::pagetable::entry::page_entry2usize")
(set-info :comment ";; pagetable/entry.rs:335:9: 335:15 (#0)")
(declare-const ghost_ret@ (_ BitVec 64))
(assert (= (bvand ghost_ret@ (bvnot (bvor (bvor ((_ zero_extend 63) (_ bv1 1)) (bvshl ((_ zero_extend 63) (_ bv1 1)) ((_ zero_extend 61) (_ bv7 3)))) ((_ zero_extend 16) (_ bv281474976706560 48))))) ((_ zero_extend 63) (_ bv0 1))))
(set-info :comment ";; bitvector assertion not satisfied")
(declare-const %%location_label%%0 Bool)
(assert (not (=> %%location_label%%0 (= (bvand (bvor ghost_ret@ (bvshl ((_ zero_extend 63) (_ bv1 1)) ((_ zero_extend 63) (_ bv1 1)))) (bvnot (bvor (bvor (bvor ((_ zero_extend 63) (_ bv1 1)) (bvshl ((_ zero_extend 63) (_ bv1 1)) ((_ zero_extend 61) (_ bv7 3)))) (bvshl ((_ zero_extend 63) (_ bv1 1)) ((_ zero_extend 63) (_ bv1 1)))) ((_ zero_extend 16) (_ bv281474976706560 48))))) ((_ zero_extend 63) (_ bv0 1))))))
(check-sat)
(exit)
