(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "b") (str.to_re "n"))
                           (str.to_re "r")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "b") (str.to_re "n"))
                           (str.to_re "r")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (re.++ (str.to_re "bn") (re.* (str.to_re "n")))
                  (str.to_re "r"))))
  (or (and (str.in_re X a!1) true (= X varin) isin (not isout)))))
(assert (let ((a!1 (re.union (re.union (str.to_re "n") (str.to_re "r"))
                     (re.++ (str.to_re "b")
                            (re.union (str.to_re "b") (str.to_re "r")))))
      (a!2 (re.++ (re.union (str.to_re "n") (str.to_re "r"))
                  (re.* (re.union (str.to_re "n") (str.to_re "r")))))
      (a!8 (re.++ (re.* (re.union (str.to_re "n") (str.to_re "r")))
                  (str.to_re "b")))
      (a!18 (re.++ (str.to_re "n")
                   (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "n") (str.to_re "r")))
                  (re.union (str.to_re "") a!2)))
      (a!9 (re.union (str.to_re "b")
                     (re.++ (re.union (str.to_re "n") (str.to_re "r")) a!8)))
      (a!19 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                   (re.++ (re.* (str.to_re "n"))
                          (re.union (str.to_re "r") a!18)))))
(let ((a!4 (re.++ (re.* (str.to_re "n"))
                  (re.union (str.to_re "") (re.++ (str.to_re "b") a!3))))
      (a!10 (re.++ (re.* (re.union (str.to_re "n") (str.to_re "r"))) a!9))
      (a!20 (re.++ (re.union (re.union (str.to_re "b") (str.to_re "n"))
                             (str.to_re "r"))
                   a!3))
      (a!29 (re.union (str.to_re "")
                      (re.++ (re.union (str.to_re "b") (str.to_re "r")) a!3))))
(let ((a!5 (re.union (re.union (str.to_re "") (re.++ (str.to_re "b") a!3))
                     (re.++ (str.to_re "n") a!4)))
      (a!11 (re.++ (str.to_re "n")
                   (re.++ (re.* (str.to_re "n")) (re.++ (str.to_re "b") a!10))))
      (a!14 (re.* (re.union (str.to_re "n") (re.++ (str.to_re "b") a!10))))
      (a!21 (re.++ (re.union (re.union (str.to_re "b") (str.to_re "n"))
                             (str.to_re "r"))
                   a!10)))
(let ((a!6 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) a!5)))
      (a!12 (re.++ (re.* (str.to_re "n"))
                   (re.union (re.++ (str.to_re "b") a!10) a!11)))
      (a!15 (re.++ a!14 (re.union (str.to_re "") (re.++ (str.to_re "b") a!3))))
      (a!24 (re.++ (re.union (str.to_re "n") (re.++ (str.to_re "b") a!10))
                   (re.++ a!14 (str.to_re "r")))))
(let ((a!7 (re.union (re.union (re.union (str.to_re "") (str.to_re "b"))
                               (re.++ a!1 a!3))
                     a!6))
      (a!13 (re.union (re.++ a!1 a!10)
                      (re.++ (re.++ (str.to_re "b") (str.to_re "n")) a!12)))
      (a!16 (re.++ (re.union (str.to_re "n") (re.++ (str.to_re "b") a!10)) a!15))
      (a!26 (re.++ a!21 (re.++ a!14 (re.union (str.to_re "r") a!24))))
      (a!27 (re.++ (re.++ (re.union (str.to_re "b") (str.to_re "r")) a!10)
                   (re.++ a!14 (re.union (str.to_re "r") a!24)))))
(let ((a!17 (re.union (re.union (str.to_re "") (re.++ (str.to_re "b") a!3))
                      a!16))
      (a!25 (re.++ a!13 (re.++ a!14 (re.union (str.to_re "r") a!24))))
      (a!28 (re.* (re.union a!27 (re.++ (str.to_re "n") a!26)))))
(let ((a!22 (re.++ a!19 (re.union a!20 (re.++ a!21 (re.++ a!14 a!17)))))
      (a!30 (re.++ (re.++ (re.union (str.to_re "b") (str.to_re "r")) a!10)
                   (re.++ a!14 a!17)))
      (a!31 (re.++ (str.to_re "n")
                   (re.union a!20 (re.++ a!21 (re.++ a!14 a!17))))))
(let ((a!23 (re.union (re.union a!7 (re.++ a!13 (re.++ a!14 a!17))) a!22))
      (a!32 (re.++ (re.union a!27 (re.++ (str.to_re "n") a!26))
                   (re.++ a!28 (re.union (re.union a!29 a!30) a!31)))))
(let ((a!33 (re.++ a!28 (re.union (re.union (re.union a!29 a!30) a!31) a!32))))
(let ((a!34 (re.union a!23 (re.++ (re.union a!25 (re.++ a!19 a!26)) a!33))))
  (str.in_re varin a!34)))))))))))))
(check-sat)
(exit)
