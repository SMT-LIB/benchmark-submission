(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "l") (str.to_re "e"))
                               (str.to_re "d"))
                     (str.to_re "h"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "0")) (str.to_re "b"))
                     (str.to_re "g"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "a")) (str.to_re "1"))
                     (str.to_re "j"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "c")) (str.to_re "f"))
                     (str.to_re "i"))))
  (str.in_re varout (re.* (re.union a!4 (str.to_re "k")))))))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "l") (str.to_re "e"))
                               (str.to_re "d"))
                     (str.to_re "h"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "0")) (str.to_re "b"))
                     (str.to_re "g"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "a")) (str.to_re "1"))
                     (str.to_re "j"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "c")) (str.to_re "f"))
                     (str.to_re "i"))))
  (str.in_re varin (re.* (re.union a!4 (str.to_re "k")))))))))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.union (str.to_re "1")
                     (re.++ (str.to_re "0")
                            (re.union (str.to_re "j") (str.to_re "k")))))
      (a!4 (re.++ (re.++ (str.to_re "0")
                         (re.union (str.to_re "i") (str.to_re "l")))
                  (re.union (str.to_re "j") (str.to_re "k"))))
      (a!5 (re.++ (re.union (str.to_re "j") (str.to_re "k"))
                  (re.union (str.to_re "j") (str.to_re "k"))))
      (a!6 (re.++ (re.union (str.to_re "j") (str.to_re "k"))
                  (re.union (str.to_re "i") (str.to_re "l"))))
      (a!10 (re.++ (re.union (str.to_re "i") (str.to_re "l"))
                   (re.union (str.to_re "j") (str.to_re "k")))))
(let ((a!2 (re.union (str.to_re "0")
                     (re.++ a!1 (re.union (str.to_re "i") (str.to_re "l")))))
      (a!7 (re.union (re.++ a!5 (re.union (str.to_re "i") (str.to_re "l")))
                     (re.++ a!6 (re.union (str.to_re "j") (str.to_re "k")))))
      (a!11 (re.union (re.++ (str.to_re "0")
                             (re.union (str.to_re "j") (str.to_re "k")))
                      (re.++ a!1 a!10)))
      (a!12 (re.++ (re.++ (str.to_re "0")
                          (re.union (str.to_re "i") (str.to_re "l")))
                   a!5))
      (a!14 (re.++ a!5
                   (re.++ (re.* a!5)
                          (re.union (re.++ a!5 a!10) (re.++ a!6 a!5)))))
      (a!17 (re.++ a!5
                   (re.++ (re.* a!5) (re.union (str.to_re "j") (str.to_re "k")))))
      (a!19 (re.++ (re.* a!5)
                   (re.++ a!5 (re.union (str.to_re "j") (str.to_re "k"))))))
(let ((a!3 (re.union a!2
                     (re.++ (str.to_re "1")
                            (re.union (str.to_re "j") (str.to_re "k")))))
      (a!8 (re.union a!7 (re.++ a!5 (re.++ (re.* a!5) a!7))))
      (a!13 (re.union (re.union a!11 (re.++ (str.to_re "1") a!5)) a!12))
      (a!15 (re.++ (re.* a!5)
                   (re.union (re.union (re.++ a!5 a!10) (re.++ a!6 a!5)) a!14)))
      (a!18 (re.++ (re.* a!5)
                   (re.union (re.union (str.to_re "j") (str.to_re "k")) a!17)))
      (a!20 (re.union (re.++ a!5 (re.union (str.to_re "j") (str.to_re "k")))
                      (re.++ a!5 a!19))))
(let ((a!9 (re.++ (re.++ (str.to_re "0")
                         (re.union (str.to_re "j") (str.to_re "k")))
                  (re.++ (re.* a!5) a!8)))
      (a!16 (re.++ (re.++ (str.to_re "0")
                          (re.union (str.to_re "j") (str.to_re "k")))
                   a!15))
      (a!21 (re.++ (re.++ (str.to_re "0")
                          (re.union (str.to_re "j") (str.to_re "k")))
                   (re.++ (re.* a!5) a!20)))
      (a!23 (re.++ (re.++ (re.union (str.to_re "j") (str.to_re "k")) a!10) a!18)))
(let ((a!22 (re.union (re.++ a!1 (re.union (str.to_re "j") (str.to_re "k")))
                      a!21))
      (a!24 (re.union (re.union a!6 a!23)
                      (re.++ a!5 (re.++ (re.* a!5) (re.union a!6 a!23))))))
(let ((a!25 (re.union (re.union (re.union (re.union a!3 a!4) a!9)
                                (re.++ (re.union a!13 a!16) a!18))
                      (re.++ a!22 (re.++ (re.* a!5) a!24)))))
  (or (and (str.in_re X a!25) (not isin) (= X varout) isout)))))))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "d") (str.to_re "h"))
                               (str.to_re "0"))
                     (str.to_re "a")))
      (a!3 (re.union (re.union (re.union (str.to_re "l") (str.to_re "e"))
                               (str.to_re "b"))
                     (str.to_re "g")))
      (a!7 (re.union (re.union (re.union (str.to_re "d") (str.to_re "h"))
                               (str.to_re "0"))
                     (str.to_re "b")))
      (a!9 (re.union (re.union (re.union (str.to_re "l") (str.to_re "e"))
                               (str.to_re "1"))
                     (str.to_re "j"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "c")) (str.to_re "f"))))
      (a!4 (re.union (re.union (re.union a!3 (str.to_re "1")) (str.to_re "j"))
                     (str.to_re "i")))
      (a!8 (re.union (re.union (re.union a!7 (str.to_re "g")) (str.to_re "a"))
                     (str.to_re "c"))))
(let ((a!5 (re.++ (re.union (re.union a!1 (str.to_re "c")) (str.to_re "f"))
                  (re.++ a!2 (re.union a!4 (str.to_re "k"))))))
(let ((a!6 (re.++ a!2 (re.union (re.union a!4 (str.to_re "k")) a!5))))
(let ((a!10 (re.++ (re.union (re.union a!9 (str.to_re "i")) (str.to_re "k"))
                   a!6)))
(let ((a!11 (re.* (re.union (re.union a!8 (str.to_re "f")) a!10))))
(let ((a!12 (re.++ (re.union (re.union a!8 (str.to_re "f")) a!10) a!11)))
(let ((a!13 (re.++ a!6 (re.++ a!11 (re.union (str.to_re "") a!12)))))
  (str.in_re varout a!13))))))))))
(check-sat)
(exit)
