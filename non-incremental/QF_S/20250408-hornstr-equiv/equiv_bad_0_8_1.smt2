(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "b") (str.to_re "n"))
                           (str.to_re "r")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "b") (str.to_re "n"))
                           (str.to_re "r")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (re.++ (str.to_re "bn") (re.* (str.to_re "n")))
                  (str.to_re "r"))))
  (or (and (str.in_re X a!1) true (= X varin) isin (not isout)))))
(assert (let ((a!1 (re.union (re.union (str.to_re "n") (str.to_re "r"))
                     (re.++ (str.to_re "b")
                            (re.union (str.to_re "b") (str.to_re "r")))))
      (a!2 (re.union (str.to_re "")
                     (re.++ (str.to_re "r") (re.* (str.to_re "r")))))
      (a!8 (re.++ (str.to_re "r")
                  (re.++ (re.* (str.to_re "r")) (str.to_re "b"))))
      (a!16 (re.++ (str.to_re "r")
                   (re.++ (re.* (str.to_re "r")) (str.to_re "n"))))
      (a!32 (re.++ (str.to_re "n")
                   (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!3 (re.++ a!1 (re.++ (re.* (str.to_re "r")) a!2)))
      (a!4 (re.++ (str.to_re "b") (re.++ (re.* (str.to_re "r")) a!2)))
      (a!9 (re.++ a!1
                  (re.++ (re.* (str.to_re "r")) (re.union (str.to_re "b") a!8))))
      (a!10 (re.++ (str.to_re "b")
                   (re.++ (re.* (str.to_re "r")) (re.union (str.to_re "b") a!8))))
      (a!17 (re.++ a!1
                   (re.++ (re.* (str.to_re "r"))
                          (re.union (str.to_re "n") a!16))))
      (a!18 (re.++ (str.to_re "b")
                   (re.++ (re.* (str.to_re "r"))
                          (re.union (str.to_re "n") a!16))))
      (a!24 (re.++ (re.union (str.to_re "n") (str.to_re "r"))
                   (re.++ (re.* (str.to_re "r"))
                          (re.union (str.to_re "n") a!16))))
      (a!25 (re.++ (re.union (str.to_re "n") (str.to_re "r"))
                   (re.++ (re.* (str.to_re "r")) (re.union (str.to_re "b") a!8))))
      (a!26 (re.++ (re.union (str.to_re "n") (str.to_re "r"))
                   (re.++ (re.* (str.to_re "r")) a!2)))
      (a!33 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                   (re.++ (re.* (str.to_re "n"))
                          (re.union (str.to_re "r") a!32))))
      (a!34 (re.++ (re.union (re.union (str.to_re "b") (str.to_re "n"))
                             (str.to_re "r"))
                   (re.++ (re.* (str.to_re "r")) a!2)))
      (a!35 (re.++ (re.union (re.union (str.to_re "b") (str.to_re "n"))
                             (str.to_re "r"))
                   (re.++ (re.* (str.to_re "r")) (re.union (str.to_re "b") a!8))))
      (a!36 (re.++ (re.union (re.union (str.to_re "b") (str.to_re "n"))
                             (str.to_re "r"))
                   (re.++ (re.* (str.to_re "r"))
                          (re.union (str.to_re "n") a!16))))
      (a!47 (re.++ (re.union (str.to_re "b") (str.to_re "r"))
                   (re.++ (re.* (str.to_re "r")) (re.union (str.to_re "b") a!8))))
      (a!48 (re.++ (re.union (str.to_re "b") (str.to_re "r"))
                   (re.++ (re.* (str.to_re "r"))
                          (re.union (str.to_re "n") a!16))))
      (a!51 (re.++ (re.union (str.to_re "b") (str.to_re "r"))
                   (re.++ (re.* (str.to_re "r")) a!2))))
(let ((a!5 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "") a!4))))
      (a!11 (re.++ (str.to_re "n") (re.++ (re.* (str.to_re "n")) a!10)))
      (a!13 (re.++ (re.* (re.union (str.to_re "n") a!10))
                   (re.union (str.to_re "") a!4)))
      (a!19 (re.++ (str.to_re "n") (re.++ (re.* (str.to_re "n")) a!18)))
      (a!21 (re.++ (re.* (re.union (str.to_re "n") a!10)) a!18))
      (a!38 (re.++ (re.* (re.union (str.to_re "n") a!10)) (str.to_re "r"))))
(let ((a!6 (re.++ (re.* (str.to_re "n"))
                  (re.union (re.union (str.to_re "") a!4) a!5)))
      (a!12 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                   (re.++ (re.* (str.to_re "n")) (re.union a!10 a!11))))
      (a!14 (re.union (re.union (str.to_re "") a!4)
                      (re.++ (re.union (str.to_re "n") a!10) a!13)))
      (a!20 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                   (re.++ (re.* (str.to_re "n")) (re.union a!18 a!19))))
      (a!22 (re.union a!18 (re.++ (re.union (str.to_re "n") a!10) a!21)))
      (a!39 (re.union (str.to_re "r")
                      (re.++ (re.union (str.to_re "n") a!10) a!38))))
(let ((a!7 (re.union (re.union (re.union (str.to_re "") (str.to_re "b")) a!3)
                     (re.++ (re.++ (str.to_re "b") (str.to_re "n")) a!6)))
      (a!15 (re.++ (re.* (re.union (str.to_re "n") a!10)) a!14))
      (a!23 (re.++ (re.* (re.union (str.to_re "n") a!10)) a!22))
      (a!40 (re.++ (re.* (re.union (str.to_re "n") a!10)) a!39)))
(let ((a!27 (re.++ (re.* (re.union a!24 (re.++ a!25 a!23)))
                   (re.union (re.union (str.to_re "") a!26) (re.++ a!25 a!15))))
      (a!41 (re.++ (re.* (re.union a!24 (re.++ a!25 a!23))) (re.++ a!25 a!40)))
      (a!56 (re.++ (re.* (re.union a!24 (re.++ a!25 a!23))) (str.to_re "b"))))
(let ((a!28 (re.union (re.union (re.union (str.to_re "") a!26)
                                (re.++ a!25 a!15))
                      (re.++ (re.union a!24 (re.++ a!25 a!23)) a!27)))
      (a!42 (re.union (re.++ a!25 a!40)
                      (re.++ (re.union a!24 (re.++ a!25 a!23)) a!41)))
      (a!57 (re.union (str.to_re "b")
                      (re.++ (re.union a!24 (re.++ a!25 a!23)) a!56))))
(let ((a!29 (re.++ (re.* (re.union a!24 (re.++ a!25 a!23))) a!28))
      (a!43 (re.++ (re.* (re.union a!24 (re.++ a!25 a!23))) a!42))
      (a!58 (re.++ (re.* (re.union a!24 (re.++ a!25 a!23))) a!57)))
(let ((a!30 (re.++ (re.union (re.union a!17 a!20)
                             (re.++ (re.union a!9 a!12) a!23))
                   a!29))
      (a!37 (re.union (re.union a!34 (re.++ a!35 a!15))
                      (re.++ (re.union a!36 (re.++ a!35 a!23)) a!29)))
      (a!44 (re.++ (re.union (re.union a!17 a!20)
                             (re.++ (re.union a!9 a!12) a!23))
                   a!43))
      (a!45 (re.union (re.++ a!35 a!40)
                      (re.++ (re.union a!36 (re.++ a!35 a!23)) a!43)))
      (a!49 (re.union (re.++ a!47 a!40)
                      (re.++ (re.union a!48 (re.++ a!47 a!23)) a!43)))
      (a!52 (re.union (re.union (re.union (str.to_re "") a!51)
                                (re.++ a!47 a!15))
                      (re.++ (re.union a!48 (re.++ a!47 a!23)) a!29)))
      (a!59 (re.++ (re.union (re.union a!17 a!20)
                             (re.++ (re.union a!9 a!12) a!23))
                   a!58))
      (a!60 (re.++ a!33 (re.++ (re.union a!36 (re.++ a!35 a!23)) a!58)))
      (a!61 (re.++ (str.to_re "n")
                   (re.++ (re.union a!36 (re.++ a!35 a!23)) a!58)))
      (a!65 (re.union (str.to_re "n")
                      (re.++ (re.union a!18 (re.++ a!10 a!23)) a!58)))
      (a!66 (re.union (re.++ a!10 a!40)
                      (re.++ (re.union a!18 (re.++ a!10 a!23)) a!43)))
      (a!68 (re.union (re.union (re.union (str.to_re "") a!4) (re.++ a!10 a!15))
                      (re.++ (re.union a!18 (re.++ a!10 a!23)) a!29)))
      (a!73 (re.union (re.union (str.to_re "n") (re.++ a!47 a!40))
                      (re.++ (re.union a!48 (re.++ a!47 a!23)) a!43))))
(let ((a!31 (re.union (re.union a!7 (re.++ (re.union a!9 a!12) a!15)) a!30))
      (a!46 (re.union (re.union (re.++ (re.union a!9 a!12) a!40) a!44)
                      (re.++ a!33 a!45)))
      (a!50 (re.* (re.union a!49 (re.++ (str.to_re "n") a!45))))
      (a!62 (re.union (re.++ (re.union a!48 (re.++ a!47 a!23)) a!58) a!61)))
(let ((a!53 (re.++ a!50 (re.union a!52 (re.++ (str.to_re "n") a!37))))
      (a!63 (re.++ (re.union a!49 (re.++ (str.to_re "n") a!45))
                   (re.++ a!50 a!62)))
      (a!74 (re.union (re.++ (re.union a!48 (re.++ a!47 a!23)) a!58)
                      (re.++ a!73 (re.++ a!50 a!62)))))
(let ((a!54 (re.++ (re.union a!49 (re.++ (str.to_re "n") a!45)) a!53))
      (a!64 (re.union (re.union a!59 a!60)
                      (re.++ a!46 (re.++ a!50 (re.union a!62 a!63)))))
      (a!67 (re.union a!65 (re.++ a!66 (re.++ a!50 (re.union a!62 a!63))))))
(let ((a!55 (re.union (re.union a!52 (re.++ (str.to_re "n") a!37)) a!54))
      (a!72 (re.union (str.to_re "r")
                      (re.++ a!67 (re.++ (re.* a!67) (str.to_re "r"))))))
(let ((a!69 (re.++ (re.* a!67) (re.union a!68 (re.++ a!66 (re.++ a!50 a!55)))))
      (a!75 (re.* (re.++ a!74 (re.++ (re.* a!67) a!72)))))
(let ((a!70 (re.union (re.union a!68 (re.++ a!66 (re.++ a!50 a!55)))
                      (re.++ a!67 a!69))))
(let ((a!71 (re.union (re.union (re.union a!31 (re.++ a!33 a!37))
                                (re.++ a!46 (re.++ a!50 a!55)))
                      (re.++ a!64 (re.++ (re.* a!67) a!70))))
      (a!76 (re.union (re.union a!52 (re.++ a!73 a!53))
                      (re.++ a!74 (re.++ (re.* a!67) a!70)))))
(let ((a!77 (re.++ (re.++ a!74 (re.++ (re.* a!67) a!72)) (re.++ a!75 a!76))))
(let ((a!78 (re.++ (re.++ a!64 (re.++ (re.* a!67) a!72))
                   (re.++ a!75 (re.union a!76 a!77)))))
  (str.in_re varin (re.union a!71 a!78)))))))))))))))))))))
(check-sat)
(exit)
