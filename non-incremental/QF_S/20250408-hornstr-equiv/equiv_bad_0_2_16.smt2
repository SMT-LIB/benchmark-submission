(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "F") (str.to_re "B"))
                               (str.to_re "D"))
                     (str.to_re "E"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "C")) (str.to_re "A")))))
  (str.in_re varout a!2))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "F") (str.to_re "B"))
                               (str.to_re "D"))
                     (str.to_re "E"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "C")) (str.to_re "A")))))
  (str.in_re varin a!2))))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "D") (str.to_re "C"))
                               (str.to_re "B"))
                     (str.to_re "A")))
      (a!4 (re.union (re.union (re.union (str.to_re "F") (str.to_re "D"))
                               (str.to_re "C"))
                     (str.to_re "B"))))
(let ((a!2 (re.++ a!1
                  (re.++ (re.* a!1) (re.union (str.to_re "F") (str.to_re "E")))))
      (a!5 (re.* (re.union (re.union a!4 (str.to_re "E")) (str.to_re "A")))))
(let ((a!3 (re.++ (re.* a!1)
                  (re.union (re.union (str.to_re "F") (str.to_re "E")) a!2)))
      (a!6 (re.++ (re.union (re.union a!4 (str.to_re "E")) (str.to_re "A")) a!5)))
(let ((a!7 (re.++ (re.++ a!3 a!3) (re.++ a!5 (re.union (str.to_re "") a!6)))))
  (or (and (str.in_re X a!7) true (= X varin) isin (not isout))))))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "B") (str.to_re "D"))
                               (str.to_re "C"))
                     (str.to_re "A")))
      (a!5 (re.union (re.union (re.union (str.to_re "F") (str.to_re "B"))
                               (str.to_re "D"))
                     (str.to_re "E"))))
(let ((a!2 (re.++ (re.* a!1) (re.union (str.to_re "") (re.++ a!1 (re.* a!1)))))
      (a!3 (re.++ a!1
                  (re.++ (re.* a!1) (re.union (str.to_re "F") (str.to_re "E"))))))
(let ((a!4 (re.++ (re.* a!1)
                  (re.union (re.union (str.to_re "F") (str.to_re "E")) a!3))))
(let ((a!6 (re.* (re.union (re.union a!5 (str.to_re "A"))
                           (re.++ (str.to_re "C") a!4)))))
(let ((a!7 (re.++ (re.union (re.union a!5 (str.to_re "A"))
                            (re.++ (str.to_re "C") a!4))
                  (re.++ a!6 (re.++ (str.to_re "C") a!2)))))
(let ((a!8 (re.++ a!6 (re.union (re.++ (str.to_re "C") a!2) a!7))))
  (str.in_re varin (re.union a!2 (re.++ a!4 a!8))))))))))
(check-sat)
(exit)
