(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "0") (str.to_re "1"))
                           (str.to_re "2")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "0") (str.to_re "1"))
                           (str.to_re "2")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (str.in_re X (re.++ (str.to_re "20") (re.* (str.to_re "0"))))))
  (or (and a!1 (not isin) (= X varout) isout))))
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "1") (str.to_re "2")))
                  (str.to_re "0"))))
(let ((a!2 (re.union (str.to_re "0")
                     (re.++ (re.union (str.to_re "1") (str.to_re "2")) a!1))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "1") (str.to_re "2"))) a!2)))
(let ((a!4 (re.++ (re.* (re.++ (str.to_re "2") a!3)) (str.to_re "0")))
      (a!9 (re.++ (re.* (re.++ (str.to_re "2") a!3)) (str.to_re "1"))))
(let ((a!5 (re.union (str.to_re "0") (re.++ (re.++ (str.to_re "2") a!3) a!4)))
      (a!10 (re.union (str.to_re "1") (re.++ (re.++ (str.to_re "2") a!3) a!9))))
(let ((a!6 (re.++ (re.* (re.++ (str.to_re "2") a!3)) a!5))
      (a!11 (re.++ (re.* (re.++ (str.to_re "2") a!3)) a!10)))
(let ((a!7 (re.union (str.to_re "0") (re.++ (re.++ (str.to_re "2") a!3) a!6)))
      (a!12 (re.union (str.to_re "1") (re.++ (re.++ (str.to_re "2") a!3) a!11)))
      (a!15 (re.++ (re.++ (re.union (str.to_re "1") (str.to_re "2")) a!3) a!11))
      (a!16 (re.++ (re.++ (re.union (str.to_re "1") (str.to_re "2")) a!3) a!6)))
(let ((a!8 (re.++ (re.* a!7) (re.union (str.to_re "") (re.++ a!7 (re.* a!7)))))
      (a!13 (re.union a!12 (re.++ a!7 (re.++ (re.* a!7) a!12)))))
(let ((a!14 (re.union (re.++ a!3 a!11)
                      (re.++ (re.++ a!3 a!6) (re.++ (re.* a!7) a!13))))
      (a!17 (re.union (re.union (str.to_re "0") a!15)
                      (re.++ a!16 (re.++ (re.* a!7) a!13)))))
(let ((a!18 (re.++ a!17
                   (re.++ (re.* a!17)
                          (re.union (str.to_re "") (re.++ a!16 a!8))))))
(let ((a!19 (re.++ (re.* a!17)
                   (re.union (re.union (str.to_re "") (re.++ a!16 a!8)) a!18))))
  (str.in_re varout (re.union (re.++ (re.++ a!3 a!6) a!8) (re.++ a!14 a!19)))))))))))))))
(check-sat)
(exit)
