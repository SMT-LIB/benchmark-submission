(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (str.in_re varout (re.* (re.union (str.to_re "N") (str.to_re "T")))))
(declare-fun varin () String)
(assert (str.in_re varin (re.* (re.union (str.to_re "N") (str.to_re "T")))))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "T") (str.to_re "N")))
                  (str.to_re "T")))
      (a!4 (re.++ (re.union (str.to_re "T") (str.to_re "N"))
                  (re.* (re.union (str.to_re "T") (str.to_re "N"))))))
(let ((a!2 (re.union (str.to_re "T")
                     (re.++ (re.union (str.to_re "T") (str.to_re "N")) a!1)))
      (a!5 (re.++ (re.* (re.union (str.to_re "T") (str.to_re "N")))
                  (re.union (str.to_re "") a!4))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "T") (str.to_re "N"))) a!2)))
(let ((a!6 (and (str.in_re X (re.++ (re.++ a!3 a!3) a!5))
                (not isin)
                (= X varout)
                isout)))
  (or a!6))))))
(assert (let ((a!1 (re.union (str.to_re "")
                     (re.++ (str.to_re "N") (re.* (str.to_re "N")))))
      (a!2 (re.++ (str.to_re "N")
                  (re.++ (re.* (str.to_re "N")) (str.to_re "T")))))
(let ((a!3 (re.++ (str.to_re "N")
                  (re.++ (re.* (str.to_re "N")) (re.union (str.to_re "T") a!2))))
      (a!4 (re.++ (str.to_re "N") (re.++ (re.* (str.to_re "N")) a!1))))
(let ((a!5 (re.++ a!3 (re.++ (re.* a!3) (re.union (str.to_re "") a!4))))
      (a!9 (re.union (str.to_re "T")
                     (re.++ a!3 (re.++ (re.* a!3) (str.to_re "T"))))))
(let ((a!6 (re.++ (re.* a!3) (re.union (re.union (str.to_re "") a!4) a!5)))
      (a!10 (re.++ (re.++ (re.* (str.to_re "N")) (re.union (str.to_re "T") a!2))
                   (re.++ (re.* a!3) a!9)))
      (a!11 (re.union (str.to_re "T") (re.++ a!3 (re.++ (re.* a!3) a!9)))))
(let ((a!7 (re.++ (re.++ (re.* (str.to_re "N")) (re.union (str.to_re "T") a!2))
                  a!6))
      (a!12 (re.++ a!11 (re.++ (re.* a!11) (re.union a!4 (re.++ a!3 a!6))))))
(let ((a!8 (re.union (re.++ (re.* (str.to_re "N")) a!1) a!7))
      (a!13 (re.++ (re.* a!11) (re.union (re.union a!4 (re.++ a!3 a!6)) a!12))))
  (str.in_re varout (re.union a!8 (re.++ a!10 a!13))))))))))
(check-sat)
(exit)
