(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "I") (str.to_re "U"))
                           (str.to_re "M")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "I") (str.to_re "U"))
                           (str.to_re "M")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (or (and (= X "MU") true (= X varin) isin (not isout))))
(assert (let ((a!1 (re.union (re.union (str.to_re "I") (str.to_re "U"))
                     (re.++ (str.to_re "M")
                            (re.union (str.to_re "I") (str.to_re "U")))))
      (a!5 (re.union (str.to_re "M")
                     (re.++ (str.to_re "U")
                            (re.union (str.to_re "I") (str.to_re "U"))))))
(let ((a!2 (re.++ a!1
                  (re.++ (re.* a!1) (re.++ (str.to_re "M") (str.to_re "M"))))))
(let ((a!3 (re.++ (re.* a!1)
                  (re.union (re.++ (str.to_re "M") (str.to_re "M")) a!2))))
(let ((a!4 (re.union (str.to_re "M")
                     (re.++ (re.union (str.to_re "I") (str.to_re "U")) a!3)))
      (a!6 (re.union (re.union (str.to_re "I")
                               (re.++ (str.to_re "U") (str.to_re "M")))
                     (re.++ a!5 a!3))))
(let ((a!7 (re.++ (re.* a!6) (re.union (str.to_re "") (re.++ a!6 (re.* a!6))))))
  (str.in_re varin (re.++ a!4 a!7))))))))
(check-sat)
(exit)
