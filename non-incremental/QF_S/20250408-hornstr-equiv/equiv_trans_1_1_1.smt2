(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "1") (str.to_re "2"))
                           (str.to_re "0")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "1") (str.to_re "2"))
                           (str.to_re "0")))))
  (str.in_re varin a!1)))
(declare-fun Y () String)
(declare-fun A () String)
(declare-fun B () String)
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (and true
                (= Y (str.++ A "20" B))
                (= X (str.++ A "11" B))
                (str.in_re A (re.* (str.to_re "0")))
                (str.in_re B (re.* (str.to_re "0")))
                (= Y varin)
                isin
                (= X varout)
                isout)))
  (or a!1)))
(assert (let ((a!1 (re.++ (str.to_re "1")
                  (re.++ (re.* (str.to_re "1")) (str.to_re "2"))))
      (a!2 (re.* (re.union (re.union (str.to_re "1") (str.to_re "2"))
                           (str.to_re "0"))))
      (a!5 (re.++ (str.to_re "1")
                  (re.++ (re.* (str.to_re "1")) (str.to_re "0")))))
(let ((a!3 (re.++ (re.union (re.union (str.to_re "1") (str.to_re "2"))
                            (str.to_re "0"))
                  a!2))
      (a!6 (re.++ (str.to_re "1")
                  (re.++ (re.* (str.to_re "1")) (re.union (str.to_re "0") a!5))))
      (a!8 (re.++ (str.to_re "1")
                  (re.++ (re.* (str.to_re "1")) (re.union (str.to_re "2") a!1)))))
(let ((a!4 (re.++ (re.++ (re.* (str.to_re "1")) (re.union (str.to_re "2") a!1))
                  (re.++ a!2 (re.union (str.to_re "") a!3))))
      (a!7 (re.* (re.union (re.union (str.to_re "2") (str.to_re "0")) a!6)))
      (a!9 (re.++ a!8 (re.++ a!2 (re.union (str.to_re "") a!3)))))
(let ((a!10 (re.++ (re.union (re.union (str.to_re "2") (str.to_re "0")) a!6)
                   (re.++ a!7 a!9))))
(let ((a!11 (re.++ (re.++ (re.* (str.to_re "1")) (re.union (str.to_re "0") a!5))
                   (re.++ a!7 (re.union a!9 a!10)))))
  (str.in_re varin (re.union a!4 a!11))))))))
(assert (let ((a!1 (re.union (str.to_re "")
                     (re.++ (str.to_re "1") (re.* (str.to_re "1")))))
      (a!2 (re.++ (str.to_re "1")
                  (re.++ (re.* (str.to_re "1")) (str.to_re "0")))))
(let ((a!3 (re.++ (str.to_re "1")
                  (re.++ (re.* (str.to_re "1")) (re.union (str.to_re "0") a!2))))
      (a!5 (re.++ (str.to_re "1") (re.++ (re.* (str.to_re "1")) a!1))))
(let ((a!4 (re.* (re.union (re.union (str.to_re "2") (str.to_re "0")) a!3))))
(let ((a!6 (re.++ (re.union (re.union (str.to_re "2") (str.to_re "0")) a!3)
                  (re.++ a!4 (re.union (str.to_re "") a!5)))))
(let ((a!7 (re.++ a!4 (re.union (re.union (str.to_re "") a!5) a!6))))
(let ((a!8 (re.++ (re.++ (re.* (str.to_re "1")) (re.union (str.to_re "0") a!2))
                  a!7)))
(let ((a!9 (re.union (re.++ (re.* (str.to_re "1")) a!1) a!8)))
  (str.in_re varout a!9)))))))))
(check-sat)
(exit)
