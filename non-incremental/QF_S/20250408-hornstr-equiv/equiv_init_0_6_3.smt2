(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "b") (str.to_re "n"))
                           (str.to_re "r")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "b") (str.to_re "n"))
                           (str.to_re "r")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (re.++ (str.to_re "rn") (re.* (str.to_re "nn")))
                  (str.to_re "b"))))
  (or (and (str.in_re X a!1) (not isin) (= X varout) isout))))
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!3 (re.union (re.union (str.to_re "n") (str.to_re "r"))
                     (re.++ (str.to_re "b")
                            (re.union (str.to_re "b") (str.to_re "r")))))
      (a!4 (re.++ (str.to_re "r")
                  (re.++ (re.* (str.to_re "r")) (str.to_re "b"))))
      (a!12 (re.++ (str.to_re "r")
                   (re.++ (re.* (str.to_re "r")) (str.to_re "n")))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!5 (re.++ a!3
                  (re.++ (re.* (str.to_re "r")) (re.union (str.to_re "b") a!4))))
      (a!6 (re.++ (str.to_re "b")
                  (re.++ (re.* (str.to_re "r")) (re.union (str.to_re "b") a!4))))
      (a!13 (re.++ a!3
                   (re.++ (re.* (str.to_re "r"))
                          (re.union (str.to_re "n") a!12))))
      (a!14 (re.++ (str.to_re "b")
                   (re.++ (re.* (str.to_re "r"))
                          (re.union (str.to_re "n") a!12))))
      (a!20 (re.++ (re.union (re.union (str.to_re "b") (str.to_re "n"))
                             (str.to_re "r"))
                   (re.++ (re.* (str.to_re "r"))
                          (re.union (str.to_re "n") a!12))))
      (a!21 (re.++ (re.union (re.union (str.to_re "b") (str.to_re "n"))
                             (str.to_re "r"))
                   (re.++ (re.* (str.to_re "r")) (re.union (str.to_re "b") a!4))))
      (a!28 (re.++ (re.union (str.to_re "b") (str.to_re "r"))
                   (re.++ (re.* (str.to_re "r")) (re.union (str.to_re "b") a!4))))
      (a!29 (re.++ (re.union (str.to_re "b") (str.to_re "r"))
                   (re.++ (re.* (str.to_re "r"))
                          (re.union (str.to_re "n") a!12)))))
(let ((a!7 (re.++ (str.to_re "n") (re.++ (re.* (str.to_re "n")) a!6)))
      (a!9 (re.++ (re.* (re.union (str.to_re "n") a!6)) (str.to_re "r")))
      (a!15 (re.++ (str.to_re "n") (re.++ (re.* (str.to_re "n")) a!14)))
      (a!17 (re.++ (re.* (re.union (str.to_re "n") a!6)) a!14)))
(let ((a!8 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union a!6 a!7))))
      (a!10 (re.union (str.to_re "r")
                      (re.++ (re.union (str.to_re "n") a!6) a!9)))
      (a!16 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                   (re.++ (re.* (str.to_re "n")) (re.union a!14 a!15))))
      (a!18 (re.union a!14 (re.++ (re.union (str.to_re "n") a!6) a!17))))
(let ((a!11 (re.++ (re.* (re.union (str.to_re "n") a!6)) a!10))
      (a!19 (re.++ (re.* (re.union (str.to_re "n") a!6)) a!18)))
(let ((a!22 (re.++ (re.* (re.union a!20 (re.++ a!21 a!19))) (re.++ a!21 a!11))))
(let ((a!23 (re.union (re.++ a!21 a!11)
                      (re.++ (re.union a!20 (re.++ a!21 a!19)) a!22))))
(let ((a!24 (re.++ (re.* (re.union a!20 (re.++ a!21 a!19))) a!23)))
(let ((a!25 (re.++ (re.union (re.union a!13 a!16)
                             (re.++ (re.union a!5 a!8) a!19))
                   a!24))
      (a!26 (re.union (re.++ a!21 a!11)
                      (re.++ (re.union a!20 (re.++ a!21 a!19)) a!24)))
      (a!30 (re.union (re.++ a!28 a!11)
                      (re.++ (re.union a!29 (re.++ a!28 a!19)) a!24))))
(let ((a!27 (re.union (re.union (re.++ (re.union a!5 a!8) a!11) a!25)
                      (re.++ a!2 a!26)))
      (a!31 (re.* (re.union a!30 (re.++ (str.to_re "n") a!26)))))
(let ((a!32 (re.++ (re.union a!30 (re.++ (str.to_re "n") a!26))
                   (re.++ a!31 (str.to_re "n")))))
(let ((a!33 (re.++ a!27 (re.++ a!31 (re.union (str.to_re "n") a!32)))))
  (str.in_re varout (re.union a!2 a!33)))))))))))))))
(check-sat)
(exit)
