(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "B") (str.to_re "O"))
                               (str.to_re "0"))
                     (str.to_re "E"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "1")) (str.to_re "W")))))
  (str.in_re varout a!2))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "B") (str.to_re "O"))
                               (str.to_re "0"))
                     (str.to_re "E"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "1")) (str.to_re "W")))))
  (str.in_re varin a!2))))
(declare-fun X () String)
(declare-fun reg1 () String)
(declare-fun Y () String)
(declare-fun reg0 () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "W") (str.to_re "0"))
                           (str.to_re "B")))))
(let ((a!2 (and true
                (= X (str.++ reg1))
                (= Y (str.++ reg1))
                (str.in_re reg0 a!1)
                (str.in_re reg1 (re.* (str.to_re "1")))
                (= X varin)
                isin
                (= Y varout)
                isout)))
  (or a!2))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "B") (str.to_re "O"))
                               (str.to_re "0"))
                     (str.to_re "1"))))
(let ((a!2 (re.++ a!1
                  (re.++ (re.* a!1) (re.union (str.to_re "E") (str.to_re "W"))))))
(let ((a!3 (re.++ (re.* a!1)
                  (re.union (re.union (str.to_re "E") (str.to_re "W")) a!2))))
(let ((a!4 (re.++ (re.union (re.union (str.to_re "O") (str.to_re "E"))
                            (str.to_re "W"))
                  a!3)))
(let ((a!5 (re.union (re.union (re.union (str.to_re "B") (str.to_re "0"))
                               (str.to_re "1"))
                     a!4)))
(let ((a!6 (re.++ (re.* a!5) (re.union (str.to_re "") (re.++ a!5 (re.* a!5))))))
  (str.in_re varin (re.++ a!3 a!6)))))))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "B") (str.to_re "O"))
                               (str.to_re "0"))
                     (str.to_re "1"))))
(let ((a!2 (re.++ (re.* a!1) (re.union (str.to_re "") (re.++ a!1 (re.* a!1)))))
      (a!3 (re.++ a!1
                  (re.++ (re.* a!1) (re.union (str.to_re "E") (str.to_re "W"))))))
(let ((a!4 (re.++ (re.* a!1)
                  (re.union (re.union (str.to_re "E") (str.to_re "W")) a!3)))
      (a!7 (re.++ (re.union (re.union (str.to_re "O") (str.to_re "E"))
                            (str.to_re "W"))
                  a!2)))
(let ((a!5 (re.++ (re.union (re.union (str.to_re "O") (str.to_re "E"))
                            (str.to_re "W"))
                  a!4)))
(let ((a!6 (re.union (re.union (re.union (str.to_re "B") (str.to_re "0"))
                               (str.to_re "1"))
                     a!5)))
(let ((a!8 (re.union a!7 (re.++ a!6 (re.++ (re.* a!6) a!7)))))
(let ((a!9 (re.union a!2 (re.++ a!4 (re.++ (re.* a!6) a!8)))))
  (str.in_re varout a!9)))))))))
(check-sat)
(exit)
