(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "b") (str.to_re "n"))
                           (str.to_re "r")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "b") (str.to_re "n"))
                           (str.to_re "r")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun A () String)
(declare-fun B () String)
(declare-fun C () String)
(declare-fun Y () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (and true
                (= X (str.++ A "rn" B "nb" C))
                (= Y (str.++ A "nr" B "bn" C))
                (str.in_re A (re.* (str.to_re "n")))
                (str.in_re B (re.* (str.to_re "n")))
                (str.in_re C (re.* (str.to_re "n")))
                (= X varin)
                isin
                (= Y varout)
                isout)))
  (or a!1)))
(assert (let ((a!1 (re.union (re.union (str.to_re "n") (str.to_re "r"))
                     (re.++ (str.to_re "b")
                            (re.union (str.to_re "b") (str.to_re "r")))))
      (a!2 (re.* (re.union (re.union (str.to_re "b") (str.to_re "n"))
                           (str.to_re "r"))))
      (a!9 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!3 (re.++ (re.union (re.union (str.to_re "b") (str.to_re "n"))
                            (str.to_re "r"))
                  a!2))
      (a!10 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!9)))))
(let ((a!4 (re.++ a!1 (re.++ a!2 (re.union (str.to_re "") a!3))))
      (a!5 (re.++ (str.to_re "b") (re.++ a!2 (re.union (str.to_re "") a!3))))
      (a!11 (re.++ (re.union (re.union (str.to_re "b") (str.to_re "n"))
                             (str.to_re "r"))
                   (re.++ a!2 (re.union (str.to_re "") a!3)))))
(let ((a!6 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "") a!5)))))
(let ((a!7 (re.++ (re.* (str.to_re "n"))
                  (re.union (re.union (str.to_re "") a!5) a!6))))
(let ((a!8 (re.union (re.union (re.union (str.to_re "") (str.to_re "b")) a!4)
                     (re.++ (re.++ (str.to_re "b") (str.to_re "n")) a!7))))
  (str.in_re varin (re.union a!8 (re.++ a!10 a!11))))))))))
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
  (str.in_re varout a!2))))
(check-sat)
(exit)
