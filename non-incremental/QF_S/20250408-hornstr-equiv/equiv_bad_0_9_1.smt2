(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "l") (str.to_re "e"))
                               (str.to_re "d"))
                     (str.to_re "h"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "0")) (str.to_re "b"))
                     (str.to_re "g"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "a")) (str.to_re "1"))
                     (str.to_re "j"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "c")) (str.to_re "f"))
                     (str.to_re "i"))))
  (str.in_re varout (re.* (re.union a!4 (str.to_re "k")))))))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "l") (str.to_re "e"))
                               (str.to_re "d"))
                     (str.to_re "h"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "0")) (str.to_re "b"))
                     (str.to_re "g"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "a")) (str.to_re "1"))
                     (str.to_re "j"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "c")) (str.to_re "f"))
                     (str.to_re "i"))))
  (str.in_re varin (re.* (re.union a!4 (str.to_re "k")))))))))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (re.union (str.to_re "d") (str.to_re "b"))
                  (re.* (re.union (str.to_re "d") (str.to_re "b")))))
      (a!3 (re.++ (re.* (re.union (str.to_re "d") (str.to_re "b")))
                  (re.union (str.to_re "f") (str.to_re "h"))))
      (a!6 (re.++ (re.* (re.union (str.to_re "d") (str.to_re "b")))
                  (re.union (str.to_re "c") (str.to_re "a"))))
      (a!13 (re.++ (re.* (re.union (str.to_re "d") (str.to_re "b")))
                   (re.union (str.to_re "g") (str.to_re "e")))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "d") (str.to_re "b")))
                  (re.union (str.to_re "") a!1)))
      (a!4 (re.union (re.union (str.to_re "f") (str.to_re "h"))
                     (re.++ (re.union (str.to_re "d") (str.to_re "b")) a!3)))
      (a!7 (re.union (re.union (str.to_re "c") (str.to_re "a"))
                     (re.++ (re.union (str.to_re "d") (str.to_re "b")) a!6)))
      (a!14 (re.union (re.union (str.to_re "g") (str.to_re "e"))
                      (re.++ (re.union (str.to_re "d") (str.to_re "b")) a!13))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "d") (str.to_re "b"))) a!4))
      (a!8 (re.++ (re.* (re.union (str.to_re "d") (str.to_re "b"))) a!7))
      (a!15 (re.++ (re.* (re.union (str.to_re "d") (str.to_re "b"))) a!14)))
(let ((a!9 (re.union (re.union (str.to_re "d") (str.to_re "b"))
                     (re.++ (re.union (str.to_re "c") (str.to_re "a")) a!8)))
      (a!10 (re.union (re.union (str.to_re "g") (str.to_re "e"))
                      (re.++ (re.union (str.to_re "c") (str.to_re "a")) a!5)))
      (a!16 (re.union (re.union (str.to_re "f") (str.to_re "h"))
                      (re.++ (re.union (str.to_re "c") (str.to_re "a")) a!15)))
      (a!23 (re.union (re.++ (str.to_re "1") a!15)
                      (re.++ (re.++ (str.to_re "1") a!8) a!5))))
(let ((a!11 (re.union a!10 (re.++ a!9 (re.++ (re.* a!9) a!10))))
      (a!17 (re.union a!16 (re.++ a!9 (re.++ (re.* a!9) a!16))))
      (a!19 (re.++ (re.* a!9)
                   (re.++ (re.union (str.to_re "c") (str.to_re "a")) a!2)))
      (a!24 (re.union a!23 (re.++ (re.++ (str.to_re "1") a!5) a!8)))
      (a!27 (re.union (re.++ a!10 a!2)
                      (re.++ a!9 (re.++ (re.* a!9) (re.++ a!10 a!2)))))
      (a!30 (re.++ a!9 (re.++ (re.* a!9) (re.union a!16 (re.++ a!10 a!8))))))
(let ((a!12 (re.union (re.++ (str.to_re "0") a!5)
                      (re.++ (re.++ (str.to_re "0") a!8)
                             (re.++ (re.* a!9) a!11))))
      (a!18 (re.union (re.++ (str.to_re "0") a!15)
                      (re.++ (re.++ (str.to_re "0") a!8)
                             (re.++ (re.* a!9) a!17))))
      (a!20 (re.union (re.++ (re.union (str.to_re "c") (str.to_re "a")) a!2)
                      (re.++ a!9 a!19)))
      (a!28 (re.++ (re.++ (re.++ (str.to_re "1") a!8) a!8)
                   (re.++ (re.* a!9) a!27)))
      (a!29 (re.union (re.++ (re.++ (str.to_re "1") a!8) a!15) (re.++ a!24 a!8)))
      (a!31 (re.++ (re.* a!9) (re.union (re.union a!16 (re.++ a!10 a!8)) a!30))))
(let ((a!21 (re.union (re.union (re.++ (str.to_re "1") a!2) (re.++ a!12 a!2))
                      (re.++ (re.union a!18 (re.++ a!12 a!8))
                             (re.++ (re.* a!9) a!20))))
      (a!26 (re.++ (re.++ (re.++ (str.to_re "0") a!8) a!8)
                   (re.++ (re.* a!9) a!20)))
      (a!32 (re.++ (re.++ (re.++ (str.to_re "1") a!8) a!8) a!31)))
(let ((a!22 (re.union a!21 (re.++ (re.++ (str.to_re "0") a!8) a!2))))
(let ((a!25 (re.union (re.union a!22 (re.++ a!24 a!2))
                      (re.++ (re.++ (str.to_re "1") a!8)
                             (re.++ (re.* a!9) a!20)))))
(let ((a!33 (re.union (re.union (re.union a!25 a!26) a!28)
                      (re.++ (re.union a!29 a!32) (re.++ (re.* a!9) a!20)))))
  (or (and (str.in_re X a!33) true (= X varin) isin (not isout))))))))))))))
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "d") (str.to_re "h"))
                           (str.to_re "0"))))
      (a!3 (re.union (re.union (re.union (str.to_re "l") (str.to_re "e"))
                               (str.to_re "b"))
                     (str.to_re "g")))
      (a!8 (re.union (re.union (re.union (str.to_re "e") (str.to_re "d"))
                               (str.to_re "h"))
                     (str.to_re "0")))
      (a!10 (re.union (re.union (re.union (str.to_re "l") (str.to_re "1"))
                                (str.to_re "j"))
                      (str.to_re "i"))))
(let ((a!2 (re.++ (re.union (re.union (str.to_re "d") (str.to_re "h"))
                            (str.to_re "0"))
                  a!1))
      (a!4 (re.union (re.union (re.union a!3 (str.to_re "a")) (str.to_re "1"))
                     (str.to_re "j")))
      (a!9 (re.union (re.union (re.union a!8 (str.to_re "b")) (str.to_re "g"))
                     (str.to_re "a"))))
(let ((a!5 (re.union (re.union (re.union a!4 (str.to_re "c")) (str.to_re "f"))
                     (str.to_re "i")))
      (a!12 (re.++ (re.union a!10 (str.to_re "k"))
                   (re.++ a!1 (re.union (str.to_re "") a!2)))))
(let ((a!6 (re.++ (re.union (re.union (str.to_re "d") (str.to_re "h"))
                            (str.to_re "0"))
                  (re.++ a!1 (re.union a!5 (str.to_re "k"))))))
(let ((a!7 (re.++ a!1 (re.union (re.union a!5 (str.to_re "k")) a!6))))
(let ((a!11 (re.union (re.union (re.union a!9 (str.to_re "c")) (str.to_re "f"))
                      (re.++ (re.union a!10 (str.to_re "k")) a!7))))
(let ((a!13 (re.union a!12 (re.++ a!11 (re.++ (re.* a!11) a!12)))))
(let ((a!14 (re.union (re.++ a!1 (re.union (str.to_re "") a!2))
                      (re.++ a!7 (re.++ (re.* a!11) a!13)))))
  (str.in_re varin a!14))))))))))
(check-sat)
(exit)
