(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "e") (str.to_re "a"))
                               (str.to_re "f"))
                     (str.to_re "b"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "c")) (str.to_re "Z"))
                     (str.to_re "d"))))
  (str.in_re varout (re.* a!2)))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "e") (str.to_re "a"))
                               (str.to_re "f"))
                     (str.to_re "b"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "c")) (str.to_re "Z"))
                     (str.to_re "d"))))
  (str.in_re varin (re.* a!2)))))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (re.* (re.++ (str.to_re "b") (str.to_re "b")))
                  (str.to_re "b")))
      (a!5 (re.++ (re.* (re.++ (str.to_re "b") (str.to_re "b")))
                  (re.++ (str.to_re "b") (str.to_re "e"))))
      (a!9 (re.++ (re.* (re.++ (str.to_re "e") (str.to_re "e")))
                  (str.to_re "e"))))
(let ((a!2 (re.union (str.to_re "b")
                     (re.++ (re.++ (str.to_re "b") (str.to_re "b")) a!1)))
      (a!6 (re.union (re.++ (str.to_re "b") (str.to_re "e"))
                     (re.++ (re.++ (str.to_re "b") (str.to_re "b")) a!5)))
      (a!10 (re.union (str.to_re "e")
                      (re.++ (re.++ (str.to_re "e") (str.to_re "e")) a!9))))
(let ((a!3 (re.++ (re.* (re.++ (str.to_re "b") (str.to_re "b"))) a!2))
      (a!7 (re.++ (re.* (re.++ (str.to_re "b") (str.to_re "b"))) a!6))
      (a!11 (re.++ (re.* (re.++ (str.to_re "e") (str.to_re "e"))) a!10)))
(let ((a!4 (re.union (str.to_re "Z")
                     (re.++ (re.++ (str.to_re "Z") (str.to_re "b")) a!3)))
      (a!8 (re.union (re.++ (str.to_re "Z") (str.to_re "e"))
                     (re.++ (re.++ (str.to_re "Z") (str.to_re "b")) a!7))))
(let ((a!12 (and (str.in_re X (re.union a!4 (re.++ a!8 a!11)))
                 (not isin)
                 (= X varout)
                 isout)))
  (or a!12)))))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "e") (str.to_re "a"))
                               (str.to_re "f"))
                     (str.to_re "b")))
      (a!4 (re.union (re.union (re.union (str.to_re "e") (str.to_re "a"))
                               (str.to_re "f"))
                     (str.to_re "c")))
      (a!8 (re.union (re.union (re.union (str.to_re "e") (str.to_re "f"))
                               (str.to_re "c"))
                     (str.to_re "Z")))
      (a!12 (re.union (re.union (re.union (str.to_re "f") (str.to_re "c"))
                                (str.to_re "Z"))
                      (str.to_re "d")))
      (a!23 (re.union (re.union (re.union (str.to_re "e") (str.to_re "f"))
                                (str.to_re "b"))
                      (str.to_re "d"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "c")) (str.to_re "d")))))
(let ((a!3 (re.++ (re.union (re.union a!1 (str.to_re "c")) (str.to_re "d"))
                  (re.++ a!2 (str.to_re "Z")))))
(let ((a!5 (re.++ (re.union (re.union a!4 (str.to_re "Z")) (str.to_re "d"))
                  (re.++ a!2 (re.union (str.to_re "Z") a!3))))
      (a!9 (re.++ a!8 (re.++ a!2 (re.union (str.to_re "Z") a!3))))
      (a!13 (re.++ a!12 (re.++ a!2 (re.union (str.to_re "Z") a!3))))
      (a!24 (re.++ (re.union (re.union (str.to_re "a") (str.to_re "c"))
                             (str.to_re "Z"))
                   (re.++ a!2 (re.union (str.to_re "Z") a!3)))))
(let ((a!6 (re.union (str.to_re "b")
                     (re.++ a!5 (re.++ (re.* a!5) (str.to_re "b"))))))
(let ((a!7 (re.++ (re.++ a!2 (re.union (str.to_re "Z") a!3))
                  (re.++ (re.* a!5) a!6)))
      (a!10 (re.union (str.to_re "b") (re.++ a!9 (re.++ (re.* a!5) a!6)))))
(let ((a!11 (re.union (str.to_re "a")
                      (re.++ a!10 (re.++ (re.* a!10) (str.to_re "a")))))
      (a!18 (re.union (str.to_re "d")
                      (re.++ a!10 (re.++ (re.* a!10) (str.to_re "d"))))))
(let ((a!14 (re.++ (re.++ a!13 (re.++ (re.* a!5) a!6)) (re.++ (re.* a!10) a!11)))
      (a!19 (re.++ (re.++ a!13 (re.++ (re.* a!5) a!6)) (re.++ (re.* a!10) a!18)))
      (a!25 (re.++ (re.++ a!24 (re.++ (re.* a!5) a!6)) (re.++ (re.* a!10) a!18)))
      (a!26 (re.++ (re.++ a!24 (re.++ (re.* a!5) a!6)) (re.++ (re.* a!10) a!11))))
(let ((a!15 (re.union (re.union (re.union (str.to_re "e") (str.to_re "a"))
                                (str.to_re "b"))
                      a!14)))
(let ((a!16 (re.++ (re.* a!15)
                   (re.union (str.to_re "") (re.++ a!15 (re.* a!15)))))
      (a!20 (re.union a!19 (re.++ a!15 (re.++ (re.* a!15) a!19)))))
(let ((a!17 (re.++ (re.++ a!7 (re.++ (re.* a!10) a!11)) a!16))
      (a!21 (re.++ (re.++ a!7 (re.++ (re.* a!10) a!11))
                   (re.++ (re.* a!15) a!20)))
      (a!27 (re.union (re.union a!23 a!25)
                      (re.++ a!26 (re.++ (re.* a!15) a!20)))))
(let ((a!22 (re.union (re.++ a!7 (re.++ (re.* a!10) a!18)) a!21))
      (a!28 (re.++ a!27
                   (re.++ (re.* a!27)
                          (re.union (str.to_re "") (re.++ a!26 a!16))))))
(let ((a!29 (re.++ (re.* a!27)
                   (re.union (re.union (str.to_re "") (re.++ a!26 a!16)) a!28))))
  (str.in_re varout (re.union a!17 (re.++ a!22 a!29)))))))))))))))))
(check-sat)
(exit)
