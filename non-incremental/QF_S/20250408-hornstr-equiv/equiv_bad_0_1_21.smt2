(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "0") (str.to_re "B"))
                               (str.to_re "1"))
                     (str.to_re "E"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "W")) (str.to_re "O")))))
  (str.in_re varout a!2))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "0") (str.to_re "B"))
                               (str.to_re "1"))
                     (str.to_re "E"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "W")) (str.to_re "O")))))
  (str.in_re varin a!2))))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (str.to_re "0")
                  (re.++ (re.* (str.to_re "0")) (str.to_re "B"))))
      (a!3 (re.union (str.to_re "")
                     (re.++ (str.to_re "1") (re.* (str.to_re "1"))))))
(let ((a!2 (re.++ (str.to_re "O")
                  (re.++ (re.* (str.to_re "0")) (re.union (str.to_re "B") a!1))))
      (a!5 (re.union (str.to_re "") (re.++ (re.* (str.to_re "1")) a!3))))
(let ((a!4 (re.++ a!2 (re.++ (re.* (str.to_re "1")) a!3)))
      (a!6 (re.++ (str.to_re "0") (re.++ (re.* (str.to_re "0")) a!5))))
(let ((a!7 (re.++ (re.++ (str.to_re "E") (str.to_re "W"))
                  (re.++ (re.* (str.to_re "0")) (re.union a!5 a!6)))))
  (or (and (str.in_re X (re.union a!4 a!7)) true (= X varin) isin (not isout))))))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "0") (str.to_re "B"))
                               (str.to_re "1"))
                     (str.to_re "E")))
      (a!7 (re.union (re.union (re.union (str.to_re "1") (str.to_re "E"))
                               (str.to_re "W"))
                     (str.to_re "O")))
      (a!14 (re.union (re.union (re.union (str.to_re "0") (str.to_re "B"))
                                (str.to_re "E"))
                      (str.to_re "W"))))
(let ((a!2 (re.++ (re.union a!1 (str.to_re "W"))
                  (re.* (re.union a!1 (str.to_re "W")))))
      (a!4 (re.++ (re.* (re.union a!1 (str.to_re "W"))) (str.to_re "O"))))
(let ((a!3 (re.++ (re.* (re.union a!1 (str.to_re "W")))
                  (re.union (str.to_re "") a!2)))
      (a!5 (re.union (str.to_re "O") (re.++ (re.union a!1 (str.to_re "W")) a!4))))
(let ((a!6 (re.++ (re.* (re.union a!1 (str.to_re "W"))) a!5)))
(let ((a!8 (re.++ (re.* (re.union (str.to_re "0") (re.++ a!7 a!6)))
                  (re.union (str.to_re "") (re.++ a!7 a!3))))
      (a!11 (re.++ (re.* (re.union (str.to_re "0") (re.++ a!7 a!6)))
                   (str.to_re "B"))))
(let ((a!9 (re.union (re.union (str.to_re "") (re.++ a!7 a!3))
                     (re.++ (re.union (str.to_re "0") (re.++ a!7 a!6)) a!8)))
      (a!12 (re.union (str.to_re "B")
                      (re.++ (re.union (str.to_re "0") (re.++ a!7 a!6)) a!11))))
(let ((a!10 (re.++ (re.* (re.union (str.to_re "0") (re.++ a!7 a!6))) a!9))
      (a!13 (re.++ (re.* (re.union (str.to_re "0") (re.++ a!7 a!6))) a!12)))
(let ((a!15 (re.++ (re.++ (re.union a!14 (str.to_re "O")) a!6) a!13))
      (a!16 (re.++ (re.++ (re.union a!14 (str.to_re "O")) a!6) a!10)))
(let ((a!17 (re.union (re.++ (re.union a!14 (str.to_re "O")) a!3) a!16)))
(let ((a!18 (re.++ (re.* (re.union (str.to_re "1") a!15)) a!17)))
(let ((a!19 (re.union a!17 (re.++ (re.union (str.to_re "1") a!15) a!18))))
(let ((a!20 (re.++ (re.* (re.union (str.to_re "1") a!15)) a!19)))
  (str.in_re varin
             (re.union (re.union a!3 (re.++ a!6 a!10))
                       (re.++ (re.++ a!6 a!13) a!20))))))))))))))))
(check-sat)
(exit)
