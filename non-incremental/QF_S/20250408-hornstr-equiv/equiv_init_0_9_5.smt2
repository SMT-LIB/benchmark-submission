(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "r") (str.to_re "b"))
                           (str.to_re "n")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "r") (str.to_re "b"))
                           (str.to_re "n")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (re.++ (str.to_re "rn") (re.* (str.to_re "nn")))
                  (str.to_re "b"))))
  (or (and (str.in_re X a!1) (not isin) (= X varout) isout))))
(assert (let ((a!1 (re.++ (str.to_re "r")
                  (re.++ (re.* (str.to_re "r")) (str.to_re "b"))))
      (a!2 (re.++ (re.union (str.to_re "r") (str.to_re "n"))
                  (re.* (re.union (str.to_re "r") (str.to_re "n")))))
      (a!5 (re.++ (str.to_re "r")
                  (re.++ (re.* (str.to_re "r")) (str.to_re "n"))))
      (a!6 (re.++ (re.* (re.union (str.to_re "r") (str.to_re "n")))
                  (str.to_re "b"))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "r") (str.to_re "n")))
                  (re.union (str.to_re "") a!2)))
      (a!7 (re.union (str.to_re "b")
                     (re.++ (re.union (str.to_re "r") (str.to_re "n")) a!6)))
      (a!11 (re.++ (re.union (str.to_re "b") (str.to_re "n"))
                   (re.++ (re.* (str.to_re "r")) (re.union (str.to_re "n") a!5))))
      (a!12 (re.++ (re.union (str.to_re "b") (str.to_re "n"))
                   (re.++ (re.* (str.to_re "r")) (re.union (str.to_re "b") a!1)))))
(let ((a!4 (re.++ (re.++ (re.* (str.to_re "r")) (re.union (str.to_re "b") a!1))
                  a!3))
      (a!8 (re.++ (re.* (re.union (str.to_re "r") (str.to_re "n"))) a!7))
      (a!14 (re.union (str.to_re "")
                      (re.++ (re.union (str.to_re "r") a!12) a!3))))
(let ((a!9 (re.++ (re.++ (re.* (str.to_re "r")) (re.union (str.to_re "b") a!1))
                  a!8))
      (a!13 (re.union a!11 (re.++ (re.union (str.to_re "r") a!12) a!8))))
(let ((a!10 (re.union (re.++ (re.* (str.to_re "r"))
                             (re.union (str.to_re "n") a!5))
                      a!9))
      (a!15 (re.union a!14 (re.++ a!13 (re.++ (re.* a!13) a!14)))))
(let ((a!16 (re.union a!4 (re.++ a!10 (re.++ (re.* a!13) a!15)))))
  (str.in_re varout a!16))))))))
(check-sat)
(exit)
