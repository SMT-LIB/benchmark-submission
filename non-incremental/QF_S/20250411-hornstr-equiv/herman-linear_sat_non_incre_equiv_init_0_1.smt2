(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun varout () String)
(assert (str.in_re varout (re.* (re.union (str.to_re "T") (str.to_re "N")))))
(declare-fun varin () String)
(assert (str.in_re varin (re.* (re.union (str.to_re "T") (str.to_re "N")))))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "N") (str.to_re "T")))
                  (str.to_re "T")))
      (a!4 (re.++ (re.union (str.to_re "N") (str.to_re "T"))
                  (re.* (re.union (str.to_re "N") (str.to_re "T"))))))
(let ((a!2 (re.union (str.to_re "T")
                     (re.++ (re.union (str.to_re "N") (str.to_re "T")) a!1)))
      (a!5 (re.++ (re.* (re.union (str.to_re "N") (str.to_re "T")))
                  (re.union (str.to_re "") a!4))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "N") (str.to_re "T"))) a!2)))
  (and (str.in_re X (re.++ a!3 a!5)) (not isin) (= X varout) isout)))))
(assert (str.in_re varout re.none))
(check-sat)
