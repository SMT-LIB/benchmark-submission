(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "1") (str.to_re "0"))
                           (str.to_re "2")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "1") (str.to_re "0"))
                           (str.to_re "2")))))
  (str.in_re varin a!1)))
(declare-fun Y () String)
(declare-fun A () String)
(declare-fun B () String)
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (and true
     (= Y (str.++ A "20" B))
     (= X (str.++ A "11" B))
     (str.in_re A (re.* (str.to_re "0")))
     (str.in_re B (re.* (str.to_re "0")))
     (= Y varin)
     isin
     (= X varout)
     isout))
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "1") (str.to_re "0")))
                  (str.to_re "2"))))
(let ((a!2 (re.union (str.to_re "2")
                     (re.++ (re.union (str.to_re "1") (str.to_re "0")) a!1))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "1") (str.to_re "0"))) a!2)))
(let ((a!4 (re.union (re.union (str.to_re "1") (str.to_re "0"))
                     (re.++ (str.to_re "2") a!3))))
(let ((a!5 (re.++ (re.* a!4) (re.union (str.to_re "") (re.++ a!4 (re.* a!4))))))
  (str.in_re varin (re.++ a!3 a!5))))))))
(assert (let ((a!1 (re.++ (re.union (str.to_re "1") (str.to_re "0"))
                  (re.* (re.union (str.to_re "1") (str.to_re "0")))))
      (a!3 (re.++ (re.* (re.union (str.to_re "1") (str.to_re "0")))
                  (str.to_re "2"))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "1") (str.to_re "0")))
                  (re.union (str.to_re "") a!1)))
      (a!4 (re.union (str.to_re "2")
                     (re.++ (re.union (str.to_re "1") (str.to_re "0")) a!3))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "1") (str.to_re "0"))) a!4)))
(let ((a!6 (re.union (re.union (str.to_re "1") (str.to_re "0"))
                     (re.++ (str.to_re "2") a!5))))
(let ((a!7 (re.++ a!6 (re.++ (re.* a!6) (re.++ (str.to_re "2") a!2)))))
(let ((a!8 (re.++ (re.* a!6) (re.union (re.++ (str.to_re "2") a!2) a!7))))
  (str.in_re varout (re.union a!2 (re.++ a!5 a!8))))))))))
(check-sat)
