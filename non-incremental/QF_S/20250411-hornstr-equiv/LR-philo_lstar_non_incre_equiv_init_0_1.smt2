(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "L") (str.to_re "R"))
                           (str.to_re "T")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "L") (str.to_re "R"))
                           (str.to_re "T")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.union (str.to_re "")
                     (re.++ (str.to_re "T") (re.* (str.to_re "T"))))))
(let ((a!2 (re.++ (re.++ (re.++ (str.to_re "T") (str.to_re "T"))
                         (str.to_re "T"))
                  (re.++ (re.* (str.to_re "T")) a!1))))
  (and (str.in_re X a!2) (not isin) (= X varout) isout))))
(assert (let ((a!1 (re.union (re.union (str.to_re "R") (str.to_re "T"))
                     (re.++ (str.to_re "L")
                            (re.union (str.to_re "L") (str.to_re "T")))))
      (a!7 (re.union (re.union (str.to_re "L") (str.to_re "T"))
                     (re.++ (str.to_re "R")
                            (re.union (str.to_re "L") (str.to_re "T"))))))
(let ((a!2 (re.union (str.to_re "L")
                     (re.++ a!1 (re.++ (re.* a!1) (str.to_re "L")))))
      (a!4 (re.++ a!1
                  (re.++ (re.* a!1) (re.++ (str.to_re "L") (str.to_re "R"))))))
(let ((a!3 (re.union (str.to_re "")
                     (re.++ (re.union (str.to_re "L") (str.to_re "T"))
                            (re.++ (re.* a!1) a!2))))
      (a!5 (re.++ (re.* a!1)
                  (re.union (re.++ (str.to_re "L") (str.to_re "R")) a!4)))
      (a!9 (re.union (str.to_re "R") (re.++ a!7 (re.++ (re.* a!1) a!2)))))
(let ((a!6 (re.union (str.to_re "R")
                     (re.++ (re.union (str.to_re "L") (str.to_re "T")) a!5)))
      (a!8 (re.* (re.union (re.++ (str.to_re "R") (str.to_re "R"))
                           (re.++ a!7 a!5)))))
(let ((a!10 (re.++ (re.union (re.++ (str.to_re "R") (str.to_re "R"))
                             (re.++ a!7 a!5))
                   (re.++ a!8 a!9))))
(let ((a!11 (re.union a!3 (re.++ a!6 (re.++ a!8 (re.union a!9 a!10))))))
  (str.in_re varout a!11))))))))
(check-sat)
(exit)
