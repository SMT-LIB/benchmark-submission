(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "i") (str.to_re "a"))
                               (str.to_re "e"))
                     (str.to_re "j"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "f")) (str.to_re "b"))
                     (str.to_re "g"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "c")) (str.to_re "0"))
                     (str.to_re "l"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "h")) (str.to_re "d"))
                     (str.to_re "k"))))
  (str.in_re varout (re.* (re.union a!4 (str.to_re "1")))))))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "i") (str.to_re "a"))
                               (str.to_re "e"))
                     (str.to_re "j"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "f")) (str.to_re "b"))
                     (str.to_re "g"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "c")) (str.to_re "0"))
                     (str.to_re "l"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "h")) (str.to_re "d"))
                     (str.to_re "k"))))
  (str.in_re varin (re.* (re.union a!4 (str.to_re "1")))))))))
(declare-fun X () String)
(declare-fun Y () String)
(declare-fun reg0 () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "b") (str.to_re "a"))
                               (str.to_re "d"))
                     (str.to_re "c"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "f")) (str.to_re "e"))
                     (str.to_re "h"))))
(let ((a!3 (str.in_re reg0 (re.* (re.union a!2 (str.to_re "g"))))))
  (and true (= X "l") (= Y "g") a!3 (= X varin) isin (= Y varout) isout)))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "e") (str.to_re "b"))
                               (str.to_re "g"))
                     (str.to_re "0")))
      (a!4 (re.union (re.union (re.union (str.to_re "i") (str.to_re "a"))
                               (str.to_re "j"))
                     (str.to_re "f")))
      (a!9 (re.union (re.union (re.union (str.to_re "a") (str.to_re "e"))
                               (str.to_re "f"))
                     (str.to_re "b")))
      (a!12 (re.union (re.union (re.union (str.to_re "i") (str.to_re "j"))
                                (str.to_re "l"))
                      (str.to_re "k"))))
(let ((a!2 (re.++ (re.union a!1 (str.to_re "d"))
                  (re.* (re.union a!1 (str.to_re "d")))))
      (a!5 (re.union (re.union (re.union a!4 (str.to_re "c")) (str.to_re "l"))
                     (str.to_re "h")))
      (a!10 (re.union (re.union (re.union a!9 (str.to_re "g")) (str.to_re "c"))
                      (str.to_re "0"))))
(let ((a!3 (re.++ (re.* (re.union a!1 (str.to_re "d")))
                  (re.union (str.to_re "") a!2)))
      (a!6 (re.++ (re.* (re.union a!1 (str.to_re "d")))
                  (re.union (re.union a!5 (str.to_re "k")) (str.to_re "1"))))
      (a!11 (re.union (re.union (re.union a!10 (str.to_re "h")) (str.to_re "d"))
                      (str.to_re "1"))))
(let ((a!7 (re.union (re.union (re.union a!5 (str.to_re "k")) (str.to_re "1"))
                     (re.++ (re.union a!1 (str.to_re "d")) a!6))))
(let ((a!8 (re.++ (re.* (re.union a!1 (str.to_re "d"))) a!7)))
(let ((a!13 (re.++ (re.* (re.union a!11 (re.++ a!12 a!8))) (re.++ a!12 a!3))))
(let ((a!14 (re.union (re.++ a!12 a!3)
                      (re.++ (re.union a!11 (re.++ a!12 a!8)) a!13))))
(let ((a!15 (re.++ (re.* (re.union a!11 (re.++ a!12 a!8))) a!14)))
  (str.in_re varin (re.union a!3 (re.++ a!8 a!15))))))))))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "e") (str.to_re "b"))
                               (str.to_re "g"))
                     (str.to_re "0")))
      (a!2 (re.union (re.union (re.union (str.to_re "i") (str.to_re "a"))
                               (str.to_re "j"))
                     (str.to_re "f")))
      (a!7 (re.union (re.union (re.union (str.to_re "a") (str.to_re "e"))
                               (str.to_re "f"))
                     (str.to_re "b")))
      (a!10 (re.union (re.union (re.union (str.to_re "i") (str.to_re "j"))
                                (str.to_re "l"))
                      (str.to_re "k"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "c")) (str.to_re "l"))
                     (str.to_re "h")))
      (a!8 (re.union (re.union (re.union a!7 (str.to_re "g")) (str.to_re "c"))
                     (str.to_re "0"))))
(let ((a!4 (re.++ (re.* (re.union a!1 (str.to_re "d")))
                  (re.union (re.union a!3 (str.to_re "k")) (str.to_re "1"))))
      (a!9 (re.union (re.union (re.union a!8 (str.to_re "h")) (str.to_re "d"))
                     (str.to_re "1"))))
(let ((a!5 (re.union (re.union (re.union a!3 (str.to_re "k")) (str.to_re "1"))
                     (re.++ (re.union a!1 (str.to_re "d")) a!4))))
(let ((a!6 (re.++ (re.* (re.union a!1 (str.to_re "d"))) a!5)))
(let ((a!11 (re.++ (re.union a!9 (re.++ a!10 a!6))
                   (re.* (re.union a!9 (re.++ a!10 a!6))))))
(let ((a!12 (re.++ (re.* (re.union a!9 (re.++ a!10 a!6)))
                   (re.union (str.to_re "") a!11))))
  (str.in_re varout (re.++ a!6 a!12))))))))))
(check-sat)
(exit)
