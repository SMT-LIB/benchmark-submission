(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "E") (str.to_re "O"))
                               (str.to_re "1"))
                     (str.to_re "W"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "0")) (str.to_re "B")))))
  (str.in_re varout a!2))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "E") (str.to_re "O"))
                               (str.to_re "1"))
                     (str.to_re "W"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "0")) (str.to_re "B")))))
  (str.in_re varin a!2))))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (str.to_re "0")
                  (re.++ (re.* (str.to_re "0")) (str.to_re "B"))))
      (a!3 (re.union (str.to_re "")
                     (re.++ (str.to_re "1") (re.* (str.to_re "1"))))))
(let ((a!2 (re.++ (str.to_re "O")
                  (re.++ (re.* (str.to_re "0")) (re.union (str.to_re "B") a!1))))
      (a!5 (re.union (str.to_re "") (re.++ (re.* (str.to_re "1")) a!3))))
(let ((a!4 (re.++ a!2 (re.++ (re.* (str.to_re "1")) a!3)))
      (a!6 (re.++ (str.to_re "0") (re.++ (re.* (str.to_re "0")) a!5))))
(let ((a!7 (re.++ (re.++ (str.to_re "E") (str.to_re "W"))
                  (re.++ (re.* (str.to_re "0")) (re.union a!5 a!6)))))
  (and (str.in_re X (re.union a!4 a!7)) true (= X varin) isin (not isout)))))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "1") (str.to_re "W"))
                               (str.to_re "0"))
                     (str.to_re "B")))
      (a!4 (re.union (re.union (re.union (str.to_re "E") (str.to_re "O"))
                               (str.to_re "1"))
                     (str.to_re "0")))
      (a!14 (re.union (re.union (re.union (str.to_re "E") (str.to_re "O"))
                                (str.to_re "1"))
                      (str.to_re "W")))
      (a!26 (re.union (re.union (re.union (str.to_re "E") (str.to_re "O"))
                                (str.to_re "W"))
                      (str.to_re "0"))))
(let ((a!2 (re.++ (re.* a!1) (re.union (str.to_re "") (re.++ a!1 (re.* a!1)))))
      (a!3 (re.union (str.to_re "E")
                     (re.++ a!1 (re.++ (re.* a!1) (str.to_re "E")))))
      (a!9 (re.union (str.to_re "O")
                     (re.++ a!1 (re.++ (re.* a!1) (str.to_re "O"))))))
(let ((a!5 (re.* (re.++ (re.union a!4 (str.to_re "B")) (re.++ (re.* a!1) a!3))))
      (a!6 (re.union (str.to_re "") (re.++ (re.union a!4 (str.to_re "B")) a!2)))
      (a!15 (re.union (str.to_re "0") (re.++ a!14 (re.++ (re.* a!1) a!9)))))
(let ((a!7 (re.++ (re.++ (re.union a!4 (str.to_re "B")) (re.++ (re.* a!1) a!3))
                  (re.++ a!5 a!6)))
      (a!10 (re.++ a!5
                   (re.++ (re.union a!4 (str.to_re "B")) (re.++ (re.* a!1) a!9))))
      (a!21 (re.++ (re.++ (re.union a!4 (str.to_re "B")) (re.++ (re.* a!1) a!3))
                   (re.++ a!5 (str.to_re "W")))))
(let ((a!8 (re.union a!2
                     (re.++ (re.++ (re.* a!1) a!3)
                            (re.++ a!5 (re.union a!6 a!7)))))
      (a!11 (re.++ (re.++ (re.union a!4 (str.to_re "B")) (re.++ (re.* a!1) a!3))
                   a!10))
      (a!17 (re.++ (re.++ a!14 (re.++ (re.* a!1) a!3))
                   (re.++ a!5 (re.union a!6 a!7))))
      (a!22 (re.++ (re.++ (re.* a!1) a!3)
                   (re.++ a!5 (re.union (str.to_re "W") a!21))))
      (a!23 (re.++ (re.++ a!14 (re.++ (re.* a!1) a!3))
                   (re.++ a!5 (re.union (str.to_re "W") a!21))))
      (a!27 (re.++ (re.++ (re.union a!26 (str.to_re "B"))
                          (re.++ (re.* a!1) a!3))
                   (re.++ a!5 (re.union (str.to_re "W") a!21))))
      (a!31 (re.++ (re.++ (re.union a!26 (str.to_re "B"))
                          (re.++ (re.* a!1) a!3))
                   (re.++ a!5 (re.union a!6 a!7)))))
(let ((a!12 (re.union (re.++ (re.union a!4 (str.to_re "B"))
                             (re.++ (re.* a!1) a!9))
                      a!11))
      (a!32 (re.union (re.++ (re.union a!26 (str.to_re "B")) a!2) a!31)))
(let ((a!13 (re.union (re.++ (re.* a!1) a!9)
                      (re.++ (re.++ (re.* a!1) a!3) (re.++ a!5 a!12))))
      (a!16 (re.++ (re.++ a!14 (re.++ (re.* a!1) a!3)) (re.++ a!5 a!12)))
      (a!28 (re.++ (re.++ (re.union a!26 (str.to_re "B"))
                          (re.++ (re.* a!1) a!3))
                   (re.++ a!5 a!12))))
(let ((a!18 (re.++ (re.* (re.union a!15 a!16))
                   (re.union (re.union (str.to_re "") (re.++ a!14 a!2)) a!17)))
      (a!24 (re.++ (re.union a!15 a!16)
                   (re.++ (re.* (re.union a!15 a!16))
                          (re.union (str.to_re "B") a!23))))
      (a!29 (re.union (re.++ (re.union a!26 (str.to_re "B"))
                             (re.++ (re.* a!1) a!9))
                      a!28)))
(let ((a!19 (re.union (re.union (re.union (str.to_re "") (re.++ a!14 a!2)) a!17)
                      (re.++ (re.union a!15 a!16) a!18)))
      (a!25 (re.++ (re.* (re.union a!15 a!16))
                   (re.union (re.union (str.to_re "B") a!23) a!24))))
(let ((a!20 (re.++ a!13 (re.++ (re.* (re.union a!15 a!16)) a!19)))
      (a!30 (re.* (re.union (re.union (str.to_re "1") a!27) (re.++ a!29 a!25))))
      (a!33 (re.++ a!29 (re.++ (re.* (re.union a!15 a!16)) a!19))))
(let ((a!34 (re.++ (re.union (re.union (str.to_re "1") a!27) (re.++ a!29 a!25))
                   (re.++ a!30 (re.union a!32 a!33)))))
(let ((a!35 (re.++ (re.union a!22 (re.++ a!13 a!25))
                   (re.++ a!30 (re.union (re.union a!32 a!33) a!34)))))
  (str.in_re varin (re.union (re.union a!8 a!20) a!35)))))))))))))))
(check-sat)
(exit)
