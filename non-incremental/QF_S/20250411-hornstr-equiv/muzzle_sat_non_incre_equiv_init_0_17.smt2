(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "M") (str.to_re "U"))
                           (str.to_re "I")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "M") (str.to_re "U"))
                           (str.to_re "I")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (and (= X "MI") (not isin) (= X varout) isout))
(assert (let ((a!1 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "U"))
                         (re.union (str.to_re "M") (str.to_re "I")))))
      (a!3 (re.++ (re.union (str.to_re "M") (str.to_re "U"))
                  (re.* (re.union (str.to_re "M") (str.to_re "U")))))
      (a!5 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "U")))
                  (str.to_re "I"))))
(let ((a!2 (re.++ (re.* (str.to_re "U"))
                  (re.union (re.union (str.to_re "M") (str.to_re "I")) a!1)))
      (a!4 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "U")))
                  (re.union (str.to_re "") a!3)))
      (a!6 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "M") (str.to_re "U")) a!5))))
(let ((a!7 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "U"))) a!6))
      (a!9 (re.++ (re.union (str.to_re "M") (re.++ (str.to_re "I") a!2)) a!4)))
(let ((a!8 (re.++ (re.union (str.to_re "M") (re.++ (str.to_re "I") a!2)) a!7)))
(let ((a!10 (re.++ (re.* (re.union (str.to_re "U") a!8)) a!9)))
(let ((a!11 (re.union a!9 (re.++ (re.union (str.to_re "U") a!8) a!10))))
(let ((a!12 (re.++ (re.* (re.union (str.to_re "U") a!8)) a!11)))
  (str.in_re varout (re.union (re.++ a!2 a!4) (re.++ (re.++ a!2 a!7) a!12)))))))))))
(check-sat)
(exit)
