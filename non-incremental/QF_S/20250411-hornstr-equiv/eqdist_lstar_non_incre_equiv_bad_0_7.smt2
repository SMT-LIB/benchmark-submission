(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "r") (str.to_re "n"))
                           (str.to_re "b")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "r") (str.to_re "n"))
                           (str.to_re "b")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (re.++ (str.to_re "bn") (re.* (str.to_re "n")))
                  (str.to_re "r"))))
  (and (str.in_re X a!1) true (= X varin) isin (not isout))))
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "r") (str.to_re "n"))
                           (str.to_re "b"))))
      (a!14 (re.++ (str.to_re "n")
                   (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!2 (re.++ (re.union (re.union (str.to_re "r") (str.to_re "n"))
                            (str.to_re "b"))
                  a!1))
      (a!15 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n"))
                          (re.union (str.to_re "r") a!14))))
      (a!17 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                   (re.++ (re.* (str.to_re "n"))
                          (re.union (str.to_re "r") a!14)))))
(let ((a!3 (re.++ (str.to_re "r") (re.++ a!1 (re.union (str.to_re "") a!2))))
      (a!5 (re.++ (re.union (str.to_re "r") (str.to_re "b"))
                  (re.++ a!1 (re.union (str.to_re "") a!2))))
      (a!7 (re.++ (re.union (re.union (str.to_re "r") (str.to_re "n"))
                            (str.to_re "b"))
                  (re.++ a!1 (re.union (str.to_re "") a!2))))
      (a!9 (re.++ (str.to_re "b") (re.++ a!1 (re.union (str.to_re "") a!2)))))
(let ((a!4 (re.union (re.union (str.to_re "") a!3)
                     (re.++ (str.to_re "n") (re.union (str.to_re "") a!3))))
      (a!10 (re.++ (str.to_re "n")
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "") a!9))))
      (a!18 (re.++ (re.union a!17 (re.++ a!15 (str.to_re "n"))) a!7)))
(let ((a!6 (re.union a!4 (re.++ (str.to_re "b") (re.union (str.to_re "") a!5))))
      (a!11 (re.++ (re.* (str.to_re "n"))
                   (re.union (re.union (str.to_re "") a!9) a!10))))
(let ((a!8 (re.union a!6
                     (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                            (re.union (str.to_re "") a!7)))))
(let ((a!12 (re.union a!8 (re.++ (re.++ (str.to_re "n") (str.to_re "b")) a!11))))
(let ((a!13 (re.union a!12 (re.++ (re.++ (str.to_re "b") (str.to_re "n")) a!11))))
(let ((a!16 (re.union a!13 (re.++ a!15 (re.union (str.to_re "") a!5)))))
  (str.in_re varin (re.union a!16 a!18))))))))))))
(check-sat)
(exit)
