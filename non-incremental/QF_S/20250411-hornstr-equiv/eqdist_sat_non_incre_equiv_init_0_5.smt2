(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "r") (str.to_re "b"))
                           (str.to_re "n")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "r") (str.to_re "b"))
                           (str.to_re "n")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (re.++ (str.to_re "rn") (re.* (str.to_re "nn")))
                  (str.to_re "b"))))
  (and (str.in_re X a!1) (not isin) (= X varout) isout)))
(assert (let ((a!1 (re.++ (str.to_re "r")
                  (re.++ (re.* (str.to_re "r"))
                         (re.union (str.to_re "b") (str.to_re "n")))))
      (a!4 (re.++ (str.to_re "n")
                  (re.union (re.union (str.to_re "r") (str.to_re "b"))
                            (str.to_re "n")))))
(let ((a!2 (re.++ (re.* (str.to_re "r"))
                  (re.union (re.union (str.to_re "b") (str.to_re "n")) a!1))))
(let ((a!3 (re.++ (re.union (re.union (str.to_re "r") (str.to_re "b"))
                            (str.to_re "n"))
                  a!2))
      (a!5 (re.union (str.to_re "r") (re.++ (re.union (str.to_re "b") a!4) a!2))))
(let ((a!6 (re.++ a!5
                  (re.++ (re.* a!5) (re.union (str.to_re "") (str.to_re "n"))))))
(let ((a!7 (re.++ (re.* a!5)
                  (re.union (re.union (str.to_re "") (str.to_re "n")) a!6))))
  (str.in_re varout (re.union (str.to_re "") (re.++ a!3 a!7)))))))))
(check-sat)
