(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "r") (str.to_re "n"))
                           (str.to_re "b")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "r") (str.to_re "n"))
                           (str.to_re "b")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun A () String)
(declare-fun B () String)
(declare-fun C () String)
(declare-fun Y () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (and true
     (= X (str.++ A "nb" B "rn" C))
     (= Y (str.++ A "bn" B "nr" C))
     (str.in_re A (re.* (str.to_re "n")))
     (str.in_re B (re.* (str.to_re "n")))
     (str.in_re C (re.* (str.to_re "n")))
     (= X varin)
     isin
     (= Y varout)
     isout))
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "r") (str.to_re "n"))
                           (str.to_re "b"))))
      (a!13 (re.++ (str.to_re "n")
                   (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!2 (re.++ (re.union (re.union (str.to_re "r") (str.to_re "n"))
                            (str.to_re "b"))
                  a!1))
      (a!14 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n"))
                          (re.union (str.to_re "r") a!13))))
      (a!16 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                   (re.++ (re.* (str.to_re "n"))
                          (re.union (str.to_re "r") a!13)))))
(let ((a!3 (re.++ (str.to_re "r") (re.++ a!1 (re.union (str.to_re "") a!2))))
      (a!4 (re.++ (re.union (str.to_re "r") (str.to_re "n"))
                  (re.++ a!1 (re.union (str.to_re "") a!2))))
      (a!6 (re.++ (re.union (str.to_re "r") (str.to_re "b"))
                  (re.++ a!1 (re.union (str.to_re "") a!2))))
      (a!8 (re.++ (str.to_re "b") (re.++ a!1 (re.union (str.to_re "") a!2))))
      (a!17 (re.++ (re.union (re.union (str.to_re "r") (str.to_re "n"))
                             (str.to_re "b"))
                   (re.++ a!1 (re.union (str.to_re "") a!2)))))
(let ((a!5 (re.union (re.union (str.to_re "") a!3)
                     (re.++ (str.to_re "n") (re.union (str.to_re "") a!4))))
      (a!9 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "") a!8))))
      (a!18 (re.++ (re.union a!16 (re.++ a!14 (str.to_re "n"))) a!17)))
(let ((a!7 (re.union a!5 (re.++ (str.to_re "b") (re.union (str.to_re "") a!6))))
      (a!10 (re.++ (re.* (str.to_re "n"))
                   (re.union (re.union (str.to_re "") a!8) a!9))))
(let ((a!11 (re.union a!7 (re.++ (re.++ (str.to_re "n") (str.to_re "b")) a!10))))
(let ((a!12 (re.union a!11 (re.++ (re.++ (str.to_re "b") (str.to_re "n")) a!10))))
(let ((a!15 (re.union a!12 (re.++ a!14 (re.union (str.to_re "") a!6)))))
  (str.in_re varin (re.union a!15 a!18)))))))))))
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
  (str.in_re varout (re.union a!2 (re.++ a!3 (str.to_re "n")))))))
(check-sat)
