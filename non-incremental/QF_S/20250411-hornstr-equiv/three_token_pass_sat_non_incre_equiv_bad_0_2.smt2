(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "t") (str.to_re "m"))
                               (str.to_re "b"))
                     (str.to_re "n"))))
  (str.in_re varout (re.* a!1))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "t") (str.to_re "m"))
                               (str.to_re "b"))
                     (str.to_re "n"))))
  (str.in_re varin (re.* a!1))))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (re.++ (re.* (str.to_re "n")) (str.to_re "t"))
                  (re.* (str.to_re "n")))))
  (and (str.in_re X a!1) true (= X varin) isin (not isout))))
(assert (let ((a!1 (re.union (str.to_re "")
                     (re.++ (str.to_re "n") (re.* (str.to_re "n")))))
      (a!2 (re.++ (re.* (str.to_re "n"))
                  (re.union (re.union (str.to_re "t") (str.to_re "m"))
                            (str.to_re "b")))))
(let ((a!3 (re.union (re.union (re.union (str.to_re "t") (str.to_re "m"))
                               (str.to_re "b"))
                     (re.++ (str.to_re "n") a!2)))
      (a!5 (re.++ (re.union (re.union (str.to_re "t") (str.to_re "m"))
                            (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) a!1))))
(let ((a!4 (re.++ (re.union (re.union (str.to_re "t") (str.to_re "m"))
                            (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) a!3))))
(let ((a!6 (re.++ (re.* (re.union (str.to_re "n") a!4)) a!5)))
(let ((a!7 (re.union a!5 (re.++ (re.union (str.to_re "n") a!4) a!6))))
(let ((a!8 (re.++ (re.* (re.union (str.to_re "n") a!4)) a!7)))
(let ((a!9 (re.++ (re.++ (re.* (str.to_re "n")) a!3) a!8)))
(let ((a!10 (re.union (re.++ (re.* (str.to_re "n")) a!1) a!9)))
  (str.in_re varin a!10))))))))))
(check-sat)
