(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "M") (str.to_re "U"))
                           (str.to_re "I")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "M") (str.to_re "U"))
                           (str.to_re "I")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (and (= X "MI") (not isin) (= X varout) isout))
(assert (let ((a!1 (re.union (str.to_re "")
                     (re.++ (str.to_re "U") (re.* (str.to_re "U")))))
      (a!2 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "U")) (str.to_re "M"))))
      (a!8 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "U")) (str.to_re "I")))))
(let ((a!3 (re.++ (re.union (str.to_re "M") (str.to_re "U"))
                  (re.++ (re.* (str.to_re "U")) (re.union (str.to_re "M") a!2))))
      (a!4 (re.++ (re.union (str.to_re "M") (str.to_re "U"))
                  (re.++ (re.* (str.to_re "U")) a!1)))
      (a!9 (re.++ (re.union (str.to_re "M") (str.to_re "U"))
                  (re.++ (re.* (str.to_re "U")) (re.union (str.to_re "I") a!8))))
      (a!14 (re.++ (str.to_re "I")
                   (re.++ (re.* (str.to_re "U")) (re.union (str.to_re "I") a!8))))
      (a!15 (re.++ (str.to_re "I")
                   (re.++ (re.* (str.to_re "U")) (re.union (str.to_re "M") a!2))))
      (a!18 (re.++ (str.to_re "I") (re.++ (re.* (str.to_re "U")) a!1))))
(let ((a!5 (re.union a!4 (re.++ a!3 (re.++ (re.* a!3) a!4))))
      (a!10 (re.++ a!3 (re.++ (re.* a!3) (re.union (str.to_re "I") a!9))))
      (a!16 (re.++ (re.union (str.to_re "U") a!15)
                   (re.++ (re.* a!3) (re.union (str.to_re "I") a!9))))
      (a!19 (re.union a!18
                      (re.++ (re.union (str.to_re "U") a!15)
                             (re.++ (re.* a!3) a!4)))))
(let ((a!6 (re.++ (re.++ (re.* (str.to_re "U")) (re.union (str.to_re "M") a!2))
                  (re.++ (re.* a!3) a!5)))
      (a!11 (re.++ (re.* a!3) (re.union (re.union (str.to_re "I") a!9) a!10)))
      (a!17 (re.* (re.union (re.union (str.to_re "M") a!14) a!16))))
(let ((a!7 (re.union (re.++ (re.* (str.to_re "U")) a!1) a!6))
      (a!12 (re.++ (re.++ (re.* (str.to_re "U")) (re.union (str.to_re "M") a!2))
                   a!11))
      (a!20 (re.++ (re.union (re.union (str.to_re "M") a!14) a!16)
                   (re.++ a!17 a!19))))
(let ((a!13 (re.union (re.++ (re.* (str.to_re "U"))
                             (re.union (str.to_re "I") a!8))
                      a!12)))
(let ((a!21 (re.union a!7 (re.++ a!13 (re.++ a!17 (re.union a!19 a!20))))))
  (str.in_re varout a!21)))))))))
(check-sat)
