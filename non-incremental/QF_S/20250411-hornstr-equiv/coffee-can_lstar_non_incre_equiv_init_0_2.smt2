(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "E") (str.to_re "O"))
                               (str.to_re "1"))
                     (str.to_re "W"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "0")) (str.to_re "B")))))
  (str.in_re varout a!2))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "E") (str.to_re "O"))
                               (str.to_re "1"))
                     (str.to_re "W"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "0")) (str.to_re "B")))))
  (str.in_re varin a!2))))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (re.* (re.++ (str.to_re "W") (str.to_re "W")))
                  (re.++ (str.to_re "W") (str.to_re "W"))))
      (a!5 (re.union (str.to_re "")
                     (re.++ (str.to_re "0") (re.* (str.to_re "0")))))
      (a!12 (re.union (str.to_re "")
                      (re.++ (str.to_re "B") (re.* (str.to_re "B")))))
      (a!14 (re.union (str.to_re "")
                      (re.++ (str.to_re "1") (re.* (str.to_re "1"))))))
(let ((a!2 (re.union (re.++ (str.to_re "W") (str.to_re "W"))
                     (re.++ (re.++ (str.to_re "W") (str.to_re "W")) a!1)))
      (a!7 (re.++ (str.to_re "W") (re.++ (re.* (str.to_re "0")) a!5))))
(let ((a!3 (re.++ (re.* (re.++ (str.to_re "W") (str.to_re "W"))) a!2))
      (a!8 (re.++ (re.* (re.++ (str.to_re "W") (str.to_re "W"))) a!7)))
(let ((a!4 (re.union (re.union (re.++ (str.to_re "O") (str.to_re "W"))
                               (str.to_re "E"))
                     (re.++ (re.++ (str.to_re "O") (str.to_re "W")) a!3)))
      (a!9 (re.union a!7 (re.++ (re.++ (str.to_re "W") (str.to_re "W")) a!8))))
(let ((a!6 (re.++ a!4 (re.++ (re.* (str.to_re "0")) a!5)))
      (a!10 (re.++ (re.* (re.++ (str.to_re "W") (str.to_re "W"))) a!9)))
(let ((a!11 (re.union a!6 (re.++ (re.++ (str.to_re "E") (str.to_re "W")) a!10))))
(let ((a!13 (re.++ a!11 (re.++ (re.* (str.to_re "B")) a!12))))
(let ((a!15 (re.++ a!13 (re.++ (re.* (str.to_re "1")) a!14))))
  (and (str.in_re X (re.union a!13 a!15)) (not isin) (= X varout) isout))))))))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "1") (str.to_re "W"))
                               (str.to_re "0"))
                     (str.to_re "B")))
      (a!3 (re.union (re.union (re.union (str.to_re "E") (str.to_re "O"))
                               (str.to_re "1"))
                     (str.to_re "0")))
      (a!12 (re.union (re.union (re.union (str.to_re "E") (str.to_re "O"))
                                (str.to_re "1"))
                      (str.to_re "W")))
      (a!18 (re.union (re.union (re.union (str.to_re "E") (str.to_re "O"))
                                (str.to_re "W"))
                      (str.to_re "0"))))
(let ((a!2 (re.union (str.to_re "E")
                     (re.++ a!1 (re.++ (re.* a!1) (str.to_re "E")))))
      (a!7 (re.union (str.to_re "O")
                     (re.++ a!1 (re.++ (re.* a!1) (str.to_re "O"))))))
(let ((a!4 (re.* (re.++ (re.union a!3 (str.to_re "B")) (re.++ (re.* a!1) a!2))))
      (a!13 (re.union (str.to_re "0") (re.++ a!12 (re.++ (re.* a!1) a!7)))))
(let ((a!5 (re.++ (re.++ (re.union a!3 (str.to_re "B")) (re.++ (re.* a!1) a!2))
                  (re.++ a!4 (str.to_re "W"))))
      (a!8 (re.++ a!4
                  (re.++ (re.union a!3 (str.to_re "B")) (re.++ (re.* a!1) a!7)))))
(let ((a!6 (re.++ (re.++ (re.* a!1) a!2)
                  (re.++ a!4 (re.union (str.to_re "W") a!5))))
      (a!9 (re.++ (re.++ (re.union a!3 (str.to_re "B")) (re.++ (re.* a!1) a!2))
                  a!8))
      (a!15 (re.++ (re.++ a!12 (re.++ (re.* a!1) a!2))
                   (re.++ a!4 (re.union (str.to_re "W") a!5))))
      (a!19 (re.++ (re.++ (re.union a!18 (str.to_re "B"))
                          (re.++ (re.* a!1) a!2))
                   (re.++ a!4 (re.union (str.to_re "W") a!5)))))
(let ((a!10 (re.union (re.++ (re.union a!3 (str.to_re "B"))
                             (re.++ (re.* a!1) a!7))
                      a!9)))
(let ((a!11 (re.union (re.++ (re.* a!1) a!7)
                      (re.++ (re.++ (re.* a!1) a!2) (re.++ a!4 a!10))))
      (a!14 (re.++ (re.++ a!12 (re.++ (re.* a!1) a!2)) (re.++ a!4 a!10)))
      (a!20 (re.++ (re.++ (re.union a!18 (str.to_re "B"))
                          (re.++ (re.* a!1) a!2))
                   (re.++ a!4 a!10))))
(let ((a!16 (re.++ (re.union a!13 a!14)
                   (re.++ (re.* (re.union a!13 a!14))
                          (re.union (str.to_re "B") a!15))))
      (a!21 (re.union (re.++ (re.union a!18 (str.to_re "B"))
                             (re.++ (re.* a!1) a!7))
                      a!20)))
(let ((a!17 (re.++ (re.* (re.union a!13 a!14))
                   (re.union (re.union (str.to_re "B") a!15) a!16))))
(let ((a!22 (re.* (re.union (re.union (str.to_re "1") a!19) (re.++ a!21 a!17)))))
(let ((a!23 (re.++ (re.union (re.union (str.to_re "1") a!19) (re.++ a!21 a!17))
                   a!22)))
(let ((a!24 (re.++ (re.union a!6 (re.++ a!11 a!17))
                   (re.++ a!22 (re.union (str.to_re "") a!23)))))
  (str.in_re varout a!24))))))))))))))
(check-sat)
