(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "M") (str.to_re "U"))
                           (str.to_re "I")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "M") (str.to_re "U"))
                           (str.to_re "I")))))
  (str.in_re varin a!1)))
(declare-fun Y () String)
(declare-fun A () String)
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (and true
     (= Y (str.++ "M" A))
     (= X (str.++ "M" A A))
     (= Y varin)
     isin
     (= X varout)
     isout))
(assert (let ((a!1 (re.++ (str.to_re "I")
                  (re.++ (re.* (str.to_re "I")) (str.to_re "U"))))
      (a!2 (re.++ (str.to_re "I")
                  (re.++ (re.* (str.to_re "I")) (str.to_re "M")))))
(let ((a!3 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2))))
      (a!4 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "U") a!1))))
      (a!10 (re.++ (str.to_re "I")
                   (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "U") a!1))))
      (a!11 (re.++ (str.to_re "I")
                   (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2)))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "M") a!3))
                  (re.union (str.to_re "I") a!4))))
(let ((a!6 (re.union (re.union (str.to_re "I") a!4)
                     (re.++ (re.union (str.to_re "M") a!3) a!5))))
(let ((a!7 (re.++ (re.* (re.union (str.to_re "M") a!3)) a!6)))
(let ((a!8 (re.++ (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2))
                  a!7))
      (a!12 (re.union (re.union (str.to_re "U") a!10)
                      (re.++ (re.union (str.to_re "M") a!11) a!7))))
(let ((a!9 (re.union (re.++ (re.* (str.to_re "I"))
                            (re.union (str.to_re "U") a!1))
                     a!8))
      (a!13 (re.++ (re.* a!12)
                   (re.union (str.to_re "") (re.++ a!12 (re.* a!12))))))
  (str.in_re varin (re.++ a!9 a!13))))))))))
(assert (let ((a!1 (re.union (str.to_re "")
                     (re.++ (str.to_re "I") (re.* (str.to_re "I")))))
      (a!2 (re.++ (str.to_re "I")
                  (re.++ (re.* (str.to_re "I")) (str.to_re "M"))))
      (a!10 (re.++ (str.to_re "I")
                   (re.++ (re.* (str.to_re "I")) (str.to_re "U")))))
(let ((a!3 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2))))
      (a!4 (re.++ (str.to_re "U") (re.++ (re.* (str.to_re "I")) a!1)))
      (a!11 (re.++ (str.to_re "U")
                   (re.++ (re.* (str.to_re "I"))
                          (re.union (str.to_re "U") a!10))))
      (a!17 (re.++ (str.to_re "I")
                   (re.++ (re.* (str.to_re "I"))
                          (re.union (str.to_re "U") a!10))))
      (a!18 (re.++ (str.to_re "I")
                   (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2))))
      (a!20 (re.++ (str.to_re "I") (re.++ (re.* (str.to_re "I")) a!1))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "M") a!3))
                  (re.union (str.to_re "") a!4)))
      (a!12 (re.++ (re.* (re.union (str.to_re "M") a!3))
                   (re.union (str.to_re "I") a!11))))
(let ((a!6 (re.union (re.union (str.to_re "") a!4)
                     (re.++ (re.union (str.to_re "M") a!3) a!5)))
      (a!13 (re.union (re.union (str.to_re "I") a!11)
                      (re.++ (re.union (str.to_re "M") a!3) a!12))))
(let ((a!7 (re.++ (re.* (re.union (str.to_re "M") a!3)) a!6))
      (a!14 (re.++ (re.* (re.union (str.to_re "M") a!3)) a!13)))
(let ((a!8 (re.++ (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2))
                  a!7))
      (a!15 (re.++ (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2))
                   a!14))
      (a!19 (re.union (re.union (str.to_re "U") a!17)
                      (re.++ (re.union (str.to_re "M") a!18) a!14)))
      (a!21 (re.union a!20 (re.++ (re.union (str.to_re "M") a!18) a!7))))
(let ((a!9 (re.union (re.++ (re.* (str.to_re "I")) a!1) a!8))
      (a!16 (re.union (re.++ (re.* (str.to_re "I"))
                             (re.union (str.to_re "U") a!10))
                      a!15))
      (a!22 (re.union a!21 (re.++ a!19 (re.++ (re.* a!19) a!21)))))
(let ((a!23 (re.union a!9 (re.++ a!16 (re.++ (re.* a!19) a!22)))))
  (str.in_re varout a!23))))))))))
(check-sat)
