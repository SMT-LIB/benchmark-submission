(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module spec::unbounded_log::UnboundedLog'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_pair. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_version_upper_bound_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_1. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_apply_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_1. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_done_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_trivial_start_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_local_version_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_global_head_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_local_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_remote_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_update_version_upper_bound_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_no_change_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_version_upper_bound. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_version_upper_bound_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_ready_to_read. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_1. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_apply. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_apply_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_update_place_ops_in_log_one. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_1. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_update_done. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_done_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_trivial_start. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_trivial_start_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_load_local_version. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_local_version_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_load_global_head. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_global_head_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_dispatch_local. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_local_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_dispatch_remote. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_remote_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_update_version_upper_bound. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_update_version_upper_bound_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_finish. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_finish_no_change. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_no_change_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_initialize_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.is_initialize. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.get_initialize_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize_enabled. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_strong. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_enabled. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_strong. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_enabled. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_strong. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_enabled. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_strong. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_enabled. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_strong. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_enabled. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_strong. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_enabled. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_strong. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_enabled. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_strong. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_enabled. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_strong. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_enabled. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_strong. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_enabled. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_strong. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_enabled. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_strong. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_enabled. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_strong. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_enabled. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.next_by. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.next. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong_by. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.init_by. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.init. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match. FuelId)
(declare-const fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version. FuelId)
(declare-const fuel%lib!spec.utils.seq_unique. FuelId)
(declare-const fuel%lib!spec.utils.seq_disjoint. FuelId)
(declare-const fuel%lib!spec.utils.map_new_rec. FuelId)
(declare-const fuel%lib!spec.utils.rangeincl. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.is_Done. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_Done_node_id. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Init_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Placed. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Placed_idx. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Applied. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Done. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_Loop_lversion. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_Loop_idx. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_Loop_tail. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%7.queued_ops. FuelId)
(declare-const fuel%lib!spec.unbounded_log.combiner_request_id_fresh. FuelId)
(declare-const fuel%lib!spec.unbounded_log.get_fresh_nat. FuelId)
(declare-const fuel%lib!spec.unbounded_log.LogContainsEntriesUpToHere. FuelId)
(declare-const fuel%lib!spec.unbounded_log.LogNoEntriesFromHere. FuelId)
(declare-const fuel%lib!spec.unbounded_log.LogRangeNoNodeId. FuelId)
(declare-const fuel%lib!spec.unbounded_log.LogRangeMatchesQueue. FuelId)
(declare-const fuel%lib!spec.unbounded_log.QueueRidsUpdateDone. FuelId)
(declare-const fuel%lib!spec.unbounded_log.QueueRidsUpdatePlaced. FuelId)
(declare-const fuel%lib!spec.unbounded_log.compute_nrstate_at_version. FuelId)
(declare-const fuel%lib!add_ticket. FuelId)
(declare-const fuel%lib!consume_stub. FuelId)
(assert (distinct fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.contains_pair. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.impl&%0.choose. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_version_upper_bound_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_1. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_apply_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_1. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_done_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_trivial_start_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_local_version_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_global_head_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_local_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_remote_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_update_version_upper_bound_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_no_change_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_dummy_to_use_type_params_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_version_upper_bound. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_version_upper_bound_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_ready_to_read. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_1. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_apply. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_apply_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_update_place_ops_in_log_one. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_1. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_update_done. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_done_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_trivial_start. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_trivial_start_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_load_local_version. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_local_version_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_load_global_head. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_global_head_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_dispatch_local. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_local_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_dispatch_remote. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_remote_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_update_version_upper_bound. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_update_version_upper_bound_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_finish. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_finish_no_change. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_no_change_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_dummy_to_use_type_params. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_dummy_to_use_type_params_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_initialize_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_dummy_to_use_type_params_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.is_initialize. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.get_initialize_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.is_dummy_to_use_type_params. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.get_dummy_to_use_type_params_0. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize_enabled. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_strong. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_enabled. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_strong. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_enabled. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_strong. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_enabled. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_strong. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_enabled. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_strong. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_enabled. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_strong. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_enabled. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_strong. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_enabled. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_strong. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_enabled. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_strong. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_enabled. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_strong. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_enabled. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_strong. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_enabled. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_strong. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_enabled. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_strong. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_enabled. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.next_by. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.next. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong_by. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.init_by. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.init. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match. fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version. fuel%lib!spec.utils.seq_unique. fuel%lib!spec.utils.seq_disjoint. fuel%lib!spec.utils.map_new_rec. fuel%lib!spec.utils.rangeincl. fuel%lib!spec.unbounded_log.impl&%0.is_Done. fuel%lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound. fuel%lib!spec.unbounded_log.impl&%0.get_Done_node_id. fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret. fuel%lib!spec.unbounded_log.impl&%3.get_Init_op. fuel%lib!spec.unbounded_log.impl&%3.is_Placed. fuel%lib!spec.unbounded_log.impl&%3.get_Placed_idx. fuel%lib!spec.unbounded_log.impl&%3.is_Applied. fuel%lib!spec.unbounded_log.impl&%3.is_Done. fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret. fuel%lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops. fuel%lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops. fuel%lib!spec.unbounded_log.impl&%5.get_Loop_lversion. fuel%lib!spec.unbounded_log.impl&%5.get_Loop_idx. fuel%lib!spec.unbounded_log.impl&%5.get_Loop_tail. fuel%lib!spec.unbounded_log.impl&%7.queued_ops. fuel%lib!spec.unbounded_log.combiner_request_id_fresh. fuel%lib!spec.unbounded_log.get_fresh_nat. fuel%lib!spec.unbounded_log.LogContainsEntriesUpToHere. fuel%lib!spec.unbounded_log.LogNoEntriesFromHere. fuel%lib!spec.unbounded_log.LogRangeNoNodeId. fuel%lib!spec.unbounded_log.LogRangeMatchesQueue. fuel%lib!spec.unbounded_log.QueueRidsUpdateDone. fuel%lib!spec.unbounded_log.QueueRidsUpdatePlaced. fuel%lib!spec.unbounded_log.compute_nrstate_at_version. fuel%lib!add_ticket. fuel%lib!consume_stub.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%lib!Dispatch./ReadOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./ReadOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./WriteOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./WriteOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./Response (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./Response (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./View (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./View (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<nat./nat.>. 0)
(declare-sort vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. 0)
(declare-sort vstd!seq.Seq<nat.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!state_machine_internal.NoCopy. 0)
(declare-sort vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. 0)
(declare-datatypes ((lib!spec.unbounded_log.UnboundedLog.State. 0) (lib!spec.unbounded_log.UnboundedLog.Step. 0) (lib!spec.unbounded_log.UnboundedLog.Config. 0) (lib!spec.unbounded_log.UnboundedLog.Instance. 0) (lib!spec.unbounded_log.UnboundedLog.log. 0) (lib!spec.unbounded_log.UnboundedLog.log_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.tail. 0) (lib!spec.unbounded_log.UnboundedLog.tail_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.replicas. 0) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.local_versions. 0) (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound. 0) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.local_reads. 0) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.local_updates. 0) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. 0) (lib!spec.unbounded_log.UnboundedLog.combiner. 0) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data. 0) (lib!spec.types.LogEntry. 0) (lib!spec.unbounded_log.ReadonlyState. 0) (lib!spec.unbounded_log.UpdateState. 0) (lib!spec.unbounded_log.CombinerState. 0) (lib!InputOperation. 0) (lib!OutputOperation. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0) (tuple%4. 0) (tuple%9. 0)) (((lib!spec.unbounded_log.UnboundedLog.State./State (lib!spec.unbounded_log.UnboundedLog.State./State/?num_replicas Int) (lib!spec.unbounded_log.UnboundedLog.State./State/?log Poly) (lib!spec.unbounded_log.UnboundedLog.State./State/?tail Int) (lib!spec.unbounded_log.UnboundedLog.State./State/?replicas Poly) (lib!spec.unbounded_log.UnboundedLog.State./State/?local_versions vstd!map.Map<nat./nat.>.) (lib!spec.unbounded_log.UnboundedLog.State./State/?version_upper_bound Int) (lib!spec.unbounded_log.UnboundedLog.State./State/?local_reads Poly) (lib!spec.unbounded_log.UnboundedLog.State./State/?local_updates Poly) (lib!spec.unbounded_log.UnboundedLog.State./State/?combiner vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.))) ((lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound (lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound/?0 Int)) (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/?0 Int) (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/?1 Int)) (lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply (lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply/?0 Int)) (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/?0 Int) (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/?1 Int)) (lib!spec.unbounded_log.UnboundedLog.Step./update_done (lib!spec.unbounded_log.UnboundedLog.Step./update_done/?0 Int)) (lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start (lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start/?0 Int)) (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version/?0 Int)) (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head/?0 Int)) (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local/?0 Int)) (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote/?0 Int)) (lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound (lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound/?0 Int)) (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish/?0 Int)) (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change/?0 Int)) (lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params (lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params/?0 lib!spec.unbounded_log.UnboundedLog.State.))) ((lib!spec.unbounded_log.UnboundedLog.Config./initialize (lib!spec.unbounded_log.UnboundedLog.Config./initialize/?0 Int)) (lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params (lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params/?0 lib!spec.unbounded_log.UnboundedLog.State.))) ((lib!spec.unbounded_log.UnboundedLog.Instance./Instance (lib!spec.unbounded_log.UnboundedLog.Instance./Instance/?send_sync vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.) (lib!spec.unbounded_log.UnboundedLog.Instance./Instance/?state lib!spec.unbounded_log.UnboundedLog.State.) (lib!spec.unbounded_log.UnboundedLog.Instance./Instance/?location Int))) ((lib!spec.unbounded_log.UnboundedLog.log./log (lib!spec.unbounded_log.UnboundedLog.log./log/?dummy_instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.log./log/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?value lib!spec.types.LogEntry.))) ((lib!spec.unbounded_log.UnboundedLog.tail./tail (lib!spec.unbounded_log.UnboundedLog.tail./tail/?dummy_instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.tail./tail/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/?instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/?value Int))) ((lib!spec.unbounded_log.UnboundedLog.replicas./replicas (lib!spec.unbounded_log.UnboundedLog.replicas./replicas/?dummy_instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.replicas./replicas/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?value Poly))) ((lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions (lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions/?dummy_instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/?instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/?value Int))) ((lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound (lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound/?dummy_instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/?instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/?value Int))) ((lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads (lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads/?dummy_instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?value lib!spec.unbounded_log.ReadonlyState.))) ((lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates (lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates/?dummy_instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?value lib!spec.unbounded_log.UpdateState.))) ((lib!spec.unbounded_log.UnboundedLog.combiner./combiner (lib!spec.unbounded_log.UnboundedLog.combiner./combiner/?dummy_instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.combiner./combiner/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?instance lib!spec.unbounded_log.UnboundedLog.Instance.) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?value lib!spec.unbounded_log.CombinerState.))) ((lib!spec.types.LogEntry./LogEntry (lib!spec.types.LogEntry./LogEntry/?op Poly) (lib!spec.types.LogEntry./LogEntry/?node_id Int))) ((lib!spec.unbounded_log.ReadonlyState./Init (lib!spec.unbounded_log.ReadonlyState./Init/?op Poly)) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?op Poly) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?version_upper_bound Int)) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?op Poly) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?version_upper_bound Int) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?node_id Int)) (lib!spec.unbounded_log.ReadonlyState./Done (lib!spec.unbounded_log.ReadonlyState./Done/?op Poly) (lib!spec.unbounded_log.ReadonlyState./Done/?version_upper_bound Int) (lib!spec.unbounded_log.ReadonlyState./Done/?node_id Int) (lib!spec.unbounded_log.ReadonlyState./Done/?ret Poly))) ((lib!spec.unbounded_log.UpdateState./Init (lib!spec.unbounded_log.UpdateState./Init/?op Poly)) (lib!spec.unbounded_log.UpdateState./Placed (lib!spec.unbounded_log.UpdateState./Placed/?op Poly) (lib!spec.unbounded_log.UpdateState./Placed/?idx Int)) (lib!spec.unbounded_log.UpdateState./Applied (lib!spec.unbounded_log.UpdateState./Applied/?ret Poly) (lib!spec.unbounded_log.UpdateState./Applied/?idx Int)) (lib!spec.unbounded_log.UpdateState./Done (lib!spec.unbounded_log.UpdateState./Done/?ret Poly) (lib!spec.unbounded_log.UpdateState./Done/?idx Int))) ((lib!spec.unbounded_log.CombinerState./Ready ) (lib!spec.unbounded_log.CombinerState./Placed (lib!spec.unbounded_log.CombinerState./Placed/?queued_ops vstd!seq.Seq<nat.>.)) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?queued_ops vstd!seq.Seq<nat.>.) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?lversion Int)) (lib!spec.unbounded_log.CombinerState./Loop (lib!spec.unbounded_log.CombinerState./Loop/?queued_ops vstd!seq.Seq<nat.>.) (lib!spec.unbounded_log.CombinerState./Loop/?lversion Int) (lib!spec.unbounded_log.CombinerState./Loop/?idx Int) (lib!spec.unbounded_log.CombinerState./Loop/?tail Int)) (lib!spec.unbounded_log.CombinerState./UpdatedVersion (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?queued_ops vstd!seq.Seq<nat.>.) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?tail Int))) ((lib!InputOperation./Read (lib!InputOperation./Read/?0 Poly)) (lib!InputOperation./Write (lib!InputOperation./Write/?0 Poly))) ((lib!OutputOperation./Read (lib!OutputOperation./Read/?0 Poly)) (lib!OutputOperation./Write (lib!OutputOperation./Write/?0 Poly))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly))) ((tuple%9./tuple%9 (tuple%9./tuple%9/?0 Poly) (tuple%9./tuple%9/?1 Poly) (tuple%9./tuple%9/?2 Poly) (tuple%9./tuple%9/?3 Poly) (tuple%9./tuple%9/?4 Poly) (tuple%9./tuple%9/?5 Poly) (tuple%9./tuple%9/?6 Poly) (tuple%9./tuple%9/?7 Poly) (tuple%9./tuple%9/?8 Poly)))))
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (lib!spec.unbounded_log.UnboundedLog.State.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/log (lib!spec.unbounded_log.UnboundedLog.State.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/tail (lib!spec.unbounded_log.UnboundedLog.State.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/replicas (lib!spec.unbounded_log.UnboundedLog.State.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (lib!spec.unbounded_log.UnboundedLog.State.) vstd!map.Map<nat./nat.>.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (lib!spec.unbounded_log.UnboundedLog.State.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (lib!spec.unbounded_log.UnboundedLog.State.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (lib!spec.unbounded_log.UnboundedLog.State.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.State./State/combiner (lib!spec.unbounded_log.UnboundedLog.State.) vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound/0 (lib!spec.unbounded_log.UnboundedLog.Step.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/0 (lib!spec.unbounded_log.UnboundedLog.Step.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/1 (lib!spec.unbounded_log.UnboundedLog.Step.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply/0 (lib!spec.unbounded_log.UnboundedLog.Step.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/0 (lib!spec.unbounded_log.UnboundedLog.Step.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/1 (lib!spec.unbounded_log.UnboundedLog.Step.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./update_done/0 (lib!spec.unbounded_log.UnboundedLog.Step.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start/0 (lib!spec.unbounded_log.UnboundedLog.Step.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version/0 (lib!spec.unbounded_log.UnboundedLog.Step.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head/0 (lib!spec.unbounded_log.UnboundedLog.Step.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local/0 (lib!spec.unbounded_log.UnboundedLog.Step.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote/0 (lib!spec.unbounded_log.UnboundedLog.Step.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound/0 (lib!spec.unbounded_log.UnboundedLog.Step.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./exec_finish/0 (lib!spec.unbounded_log.UnboundedLog.Step.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change/0 (lib!spec.unbounded_log.UnboundedLog.Step.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params/0 (lib!spec.unbounded_log.UnboundedLog.Step.) lib!spec.unbounded_log.UnboundedLog.State.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Config./initialize/0 (lib!spec.unbounded_log.UnboundedLog.Config.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params/0 (lib!spec.unbounded_log.UnboundedLog.Config.) lib!spec.unbounded_log.UnboundedLog.State.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Instance./Instance/send_sync (lib!spec.unbounded_log.UnboundedLog.Instance.) vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Instance./Instance/state (lib!spec.unbounded_log.UnboundedLog.Instance.) lib!spec.unbounded_log.UnboundedLog.State.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.Instance./Instance/location (lib!spec.unbounded_log.UnboundedLog.Instance.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.log./log/dummy_instance (lib!spec.unbounded_log.UnboundedLog.log.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.log./log/no_copy (lib!spec.unbounded_log.UnboundedLog.log.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (lib!spec.unbounded_log.UnboundedLog.log_token_data.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (lib!spec.unbounded_log.UnboundedLog.log_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (lib!spec.unbounded_log.UnboundedLog.log_token_data.) lib!spec.types.LogEntry.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.tail./tail/dummy_instance (lib!spec.unbounded_log.UnboundedLog.tail.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.tail./tail/no_copy (lib!spec.unbounded_log.UnboundedLog.tail.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (lib!spec.unbounded_log.UnboundedLog.tail_token_data.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (lib!spec.unbounded_log.UnboundedLog.tail_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.replicas./replicas/dummy_instance (lib!spec.unbounded_log.UnboundedLog.replicas.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.replicas./replicas/no_copy (lib!spec.unbounded_log.UnboundedLog.replicas.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions/dummy_instance (lib!spec.unbounded_log.UnboundedLog.local_versions.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions/no_copy (lib!spec.unbounded_log.UnboundedLog.local_versions.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound/dummy_instance (lib!spec.unbounded_log.UnboundedLog.version_upper_bound.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound/no_copy (lib!spec.unbounded_log.UnboundedLog.version_upper_bound.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads/dummy_instance (lib!spec.unbounded_log.UnboundedLog.local_reads.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads/no_copy (lib!spec.unbounded_log.UnboundedLog.local_reads.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) lib!spec.unbounded_log.ReadonlyState.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates/dummy_instance (lib!spec.unbounded_log.UnboundedLog.local_updates.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates/no_copy (lib!spec.unbounded_log.UnboundedLog.local_updates.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) lib!spec.unbounded_log.UpdateState.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.combiner./combiner/dummy_instance (lib!spec.unbounded_log.UnboundedLog.combiner.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.combiner./combiner/no_copy (lib!spec.unbounded_log.UnboundedLog.combiner.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) lib!spec.unbounded_log.CombinerState.)
(declare-fun lib!spec.types.LogEntry./LogEntry/op (lib!spec.types.LogEntry.) Poly)
(declare-fun lib!spec.types.LogEntry./LogEntry/node_id (lib!spec.types.LogEntry.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Init/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/node_id (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/ret (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Init/op (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Placed/op (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Placed/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.UpdateState./Applied/ret (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Applied/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.UpdateState./Done/ret (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Done/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Placed/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/lversion (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/idx (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/tail (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!InputOperation./Read/0 (lib!InputOperation.) Poly)
(declare-fun lib!InputOperation./Write/0 (lib!InputOperation.) Poly)
(declare-fun lib!OutputOperation./Read/0 (lib!OutputOperation.) Poly)
(declare-fun lib!OutputOperation./Write/0 (lib!OutputOperation.) Poly)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun tuple%9./tuple%9/0 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/1 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/2 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/3 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/4 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/5 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/6 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/7 (tuple%9.) Poly)
(declare-fun tuple%9./tuple%9/8 (tuple%9.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. (Dcr Type) Type)
(declare-const TYPE%vstd!state_machine_internal.NoCopy. Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.State. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.Step. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.Config. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.log. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.tail. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.types.LogEntry. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.ReadonlyState. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UpdateState. (Dcr Type) Type)
(declare-const TYPE%lib!spec.unbounded_log.CombinerState. Type)
(declare-fun TYPE%lib!InputOperation. (Dcr Type) Type)
(declare-fun TYPE%lib!OutputOperation. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%9. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./nat.>. (vstd!map.Map<nat./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./nat.>. (Poly) vstd!map.Map<nat./nat.>.)
(declare-fun Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly) vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)
(declare-fun Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq<nat.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<nat.>. (Poly) vstd!seq.Seq<nat.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!state_machine_internal.NoCopy. (vstd!state_machine_internal.NoCopy.) Poly)
(declare-fun %Poly%vstd!state_machine_internal.NoCopy. (Poly) vstd!state_machine_internal.NoCopy.)
(declare-fun Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. (vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.) Poly)
(declare-fun %Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. (Poly) vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.State.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.State. (Poly) lib!spec.unbounded_log.UnboundedLog.State.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.Step. (Poly) lib!spec.unbounded_log.UnboundedLog.Step.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.Config. (lib!spec.unbounded_log.UnboundedLog.Config.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.Config. (Poly) lib!spec.unbounded_log.UnboundedLog.Config.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.Instance.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (Poly) lib!spec.unbounded_log.UnboundedLog.Instance.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.log. (lib!spec.unbounded_log.UnboundedLog.log.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.log. (Poly) lib!spec.unbounded_log.UnboundedLog.log.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.log_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.log_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.tail. (lib!spec.unbounded_log.UnboundedLog.tail.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.tail. (Poly) lib!spec.unbounded_log.UnboundedLog.tail.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.tail_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.tail_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.replicas. (lib!spec.unbounded_log.UnboundedLog.replicas.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.replicas. (Poly) lib!spec.unbounded_log.UnboundedLog.replicas.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.replicas_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. (lib!spec.unbounded_log.UnboundedLog.local_versions.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. (Poly) lib!spec.unbounded_log.UnboundedLog.local_versions.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. (lib!spec.unbounded_log.UnboundedLog.version_upper_bound.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. (Poly) lib!spec.unbounded_log.UnboundedLog.version_upper_bound.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. (lib!spec.unbounded_log.UnboundedLog.local_reads.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. (Poly) lib!spec.unbounded_log.UnboundedLog.local_reads.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. (lib!spec.unbounded_log.UnboundedLog.local_updates.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. (Poly) lib!spec.unbounded_log.UnboundedLog.local_updates.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.combiner. (lib!spec.unbounded_log.UnboundedLog.combiner.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.combiner. (Poly) lib!spec.unbounded_log.UnboundedLog.combiner.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)
(declare-fun Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry.) Poly)
(declare-fun %Poly%lib!spec.types.LogEntry. (Poly) lib!spec.types.LogEntry.)
(declare-fun Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.ReadonlyState. (Poly) lib!spec.unbounded_log.ReadonlyState.)
(declare-fun Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UpdateState. (Poly) lib!spec.unbounded_log.UpdateState.)
(declare-fun Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.CombinerState. (Poly) lib!spec.unbounded_log.CombinerState.)
(declare-fun Poly%lib!InputOperation. (lib!InputOperation.) Poly)
(declare-fun %Poly%lib!InputOperation. (Poly) lib!InputOperation.)
(declare-fun Poly%lib!OutputOperation. (lib!OutputOperation.) Poly)
(declare-fun %Poly%lib!OutputOperation. (Poly) lib!OutputOperation.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(declare-fun Poly%tuple%9. (tuple%9.) Poly)
(declare-fun %Poly%tuple%9. (Poly) tuple%9.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (= x (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. x))) :pattern ((Poly%vstd!map.Map<nat./nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ NAT)) (= x (Poly%vstd!map.Map<nat./nat.>. (%Poly%vstd!map.Map<nat./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ NAT))) )))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT))) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.)) (= x (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.))) )))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (= x (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. x))) :pattern ((Poly%vstd!seq.Seq<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ NAT)) (= x (Poly%vstd!seq.Seq<nat.>. (%Poly%vstd!seq.Seq<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ NAT))) )))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT)) :pattern ((has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!state_machine_internal.NoCopy.)) (! (= x (%Poly%vstd!state_machine_internal.NoCopy. (Poly%vstd!state_machine_internal.NoCopy. x))) :pattern ((Poly%vstd!state_machine_internal.NoCopy. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!state_machine_internal.NoCopy.) (= x (Poly%vstd!state_machine_internal.NoCopy. (%Poly%vstd!state_machine_internal.NoCopy. x)))) :pattern ((has_type x TYPE%vstd!state_machine_internal.NoCopy.)) )))
(assert (forall ((x vstd!state_machine_internal.NoCopy.)) (! (has_type (Poly%vstd!state_machine_internal.NoCopy. x) TYPE%vstd!state_machine_internal.NoCopy.) :pattern ((has_type (Poly%vstd!state_machine_internal.NoCopy. x) TYPE%vstd!state_machine_internal.NoCopy.)) )))
(assert (forall ((x vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.)) (! (= x (%Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. x))) :pattern ((Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ TYPE%tuple%0.)) (= x (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. (%Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. x)))) :pattern ((has_type x (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ TYPE%tuple%0.))) )))
(assert (forall ((x vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.)) (! (has_type (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. x) (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ TYPE%tuple%0.)) :pattern ((has_type (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. x) (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ TYPE%tuple%0.))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.State. (Poly%lib!spec.unbounded_log.UnboundedLog.State. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.State. (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_num_replicas! Int) (_log! Poly) (_tail! Int) (_replicas! Poly) (_local_versions! vstd!map.Map<nat./nat.>.) (_version_upper_bound! Int) (_local_reads! Poly) (_local_updates! Poly) (_combiner! vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)) (! (=> (and (<= 0 _num_replicas!) (has_type _log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (<= 0 _tail!) (has_type _replicas! (TYPE%vstd!map.Map. $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&))) (<= 0 _version_upper_bound!) (has_type _local_reads! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) (has_type _local_updates! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.State./State _num_replicas! _log! _tail! _replicas! _local_versions! _version_upper_bound! _local_reads! _local_updates! _combiner!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.State./State _num_replicas! _log! _tail! _replicas! _local_versions! _version_upper_bound! _local_reads! _local_updates! _combiner!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas x) (lib!spec.unbounded_log.UnboundedLog.State./State/?num_replicas x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/log x) (lib!spec.unbounded_log.UnboundedLog.State./State/?log x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/log x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail x) (lib!spec.unbounded_log.UnboundedLog.State./State/?tail x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/tail x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas x) (lib!spec.unbounded_log.UnboundedLog.State./State/?replicas x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/replicas x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (TYPE%vstd!map.Map. $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions x) (lib!spec.unbounded_log.UnboundedLog.State./State/?local_versions x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/local_versions x)) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound x) (lib!spec.unbounded_log.UnboundedLog.State./State/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads x) (lib!spec.unbounded_log.UnboundedLog.State./State/?local_reads x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/local_reads x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates x) (lib!spec.unbounded_log.UnboundedLog.State./State/?local_updates x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/local_updates x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner x) (lib!spec.unbounded_log.UnboundedLog.State./State/?combiner x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.State./State/combiner x)) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.State./State_ ((c lib!spec.unbounded_log.UnboundedLog.State.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.State./State) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.State./State_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.State./State/log x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.State./State/log x))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.State./State_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.State./State/replicas x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.State./State/replicas x))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.State./State_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads x))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.State.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.State./State_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.State. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates x))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. (Poly%lib!spec.unbounded_log.UnboundedLog.Step. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound/0 x) (lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! Int)) (! (=> (and (<= 0 _0!) (<= 0 _1!)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read _0! _1!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read _0! _1!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/0 x) (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/1 x) (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/?1 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/1 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/1 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply/0 x) (lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! Int)) (! (=> (and (<= 0 _0!) (<= 0 _1!)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one _0! _1!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one _0! _1!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/0 x) (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/1 x) (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/?1 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/1 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/1 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./update_done _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./update_done _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./update_done/0 x) (lib!spec.unbounded_log.UnboundedLog.Step./update_done/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./update_done/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Step./update_done/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./update_done/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start/0 x) (lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version/0 x) (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head/0 x) (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local/0 x) (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote/0 x) (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound/0 x) (lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish/0 x) (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_finish/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_finish/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change/0 x) (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.unbounded_log.UnboundedLog.State.)) (! (=> (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. _0!) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Step. (lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params/0 x) (lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&))) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params_ ((c lib!spec.unbounded_log.UnboundedLog.Step.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Step.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params/0 x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.Step. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params/0 x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Config.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.Config. (Poly%lib!spec.unbounded_log.UnboundedLog.Config. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.Config. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Config. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.Config. (%Poly%lib!spec.unbounded_log.UnboundedLog.Config. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Config. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Config. (lib!spec.unbounded_log.UnboundedLog.Config./initialize _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Config. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Config. (lib!spec.unbounded_log.UnboundedLog.Config./initialize _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Config. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Config.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Config./initialize/0 x) (lib!spec.unbounded_log.UnboundedLog.Config./initialize/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Config./initialize/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Config. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.Config./initialize/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Config. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Config./initialize/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Config. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Config. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.unbounded_log.UnboundedLog.State.)) (! (=> (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. _0!) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Config. (lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Config. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Config. (lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params _0!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Config. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Config.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params/0 x) (lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Config. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Config. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Config. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Config. DT&. DT&))) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params_ ((c lib!spec.unbounded_log.UnboundedLog.Config.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Config.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params/0 x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.Config. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params/0 x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Instance.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.Instance. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (%Poly%lib!spec.unbounded_log.UnboundedLog.Instance. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_send_sync! vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.) (_state! lib!spec.unbounded_log.UnboundedLog.State.) (_location! Int)) (! (=> (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. _state!) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.Instance./Instance _send_sync! _state! _location!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.Instance./Instance _send_sync! _state! _location!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Instance.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Instance./Instance/send_sync x) (lib!spec.unbounded_log.UnboundedLog.Instance./Instance/?send_sync x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Instance./Instance/send_sync x)) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Instance.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Instance./Instance/state x) (lib!spec.unbounded_log.UnboundedLog.Instance./Instance/?state x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Instance./Instance/state x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.Instance./Instance/state (%Poly%lib!spec.unbounded_log.UnboundedLog.Instance. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.Instance./Instance/state (%Poly%lib!spec.unbounded_log.UnboundedLog.Instance. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Instance.)) (! (= (lib!spec.unbounded_log.UnboundedLog.Instance./Instance/location x) (lib!spec.unbounded_log.UnboundedLog.Instance./Instance/?location x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.Instance./Instance/location x)) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Instance./Instance_ ((c lib!spec.unbounded_log.UnboundedLog.Instance.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Instance./Instance) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.Instance.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.Instance./Instance_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.Instance./Instance/state x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.Instance./Instance/state x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.log. (Poly%lib!spec.unbounded_log.UnboundedLog.log. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.log. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.log. (%Poly%lib!spec.unbounded_log.UnboundedLog.log. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_dummy_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _dummy_instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.log. (lib!spec.unbounded_log.UnboundedLog.log./log _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.log. (lib!spec.unbounded_log.UnboundedLog.log./log _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log.)) (! (= (lib!spec.unbounded_log.UnboundedLog.log./log/dummy_instance x) (lib!spec.unbounded_log.UnboundedLog.log./log/?dummy_instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.log./log/dummy_instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.log./log/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.log./log/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log.)) (! (= (lib!spec.unbounded_log.UnboundedLog.log./log/no_copy x) (lib!spec.unbounded_log.UnboundedLog.log./log/?no_copy x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.log./log/no_copy x)) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.log./log_ ((c lib!spec.unbounded_log.UnboundedLog.log.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.log./log) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.log./log_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.log./log/dummy_instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.log. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.log./log/dummy_instance x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_key! Int) (_value! lib!spec.types.LogEntry.)) (! (=> (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.types.LogEntry. _value!) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&)) (has_type (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x))) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.log_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.log_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data_ x) (height_lt (height (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. x)))) :pattern ((height (Poly%lib!spec.types.LogEntry. (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.tail.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.tail. (Poly%lib!spec.unbounded_log.UnboundedLog.tail. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.tail. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.tail. (%Poly%lib!spec.unbounded_log.UnboundedLog.tail. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_dummy_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _dummy_instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.tail. (lib!spec.unbounded_log.UnboundedLog.tail./tail _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.tail. (lib!spec.unbounded_log.UnboundedLog.tail./tail _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.tail.)) (! (= (lib!spec.unbounded_log.UnboundedLog.tail./tail/dummy_instance x) (lib!spec.unbounded_log.UnboundedLog.tail./tail/?dummy_instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.tail./tail/dummy_instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.tail./tail/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.tail./tail/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.tail.)) (! (= (lib!spec.unbounded_log.UnboundedLog.tail./tail/no_copy x) (lib!spec.unbounded_log.UnboundedLog.tail./tail/?no_copy x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.tail./tail/no_copy x)) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.tail./tail_ ((c lib!spec.unbounded_log.UnboundedLog.tail.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.tail./tail) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.tail.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.tail./tail_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.tail./tail/dummy_instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.tail. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.tail./tail/dummy_instance x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.tail_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_value! Int)) (! (=> (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _value!)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data _instance! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data _instance! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.tail_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.tail_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&))) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.tail_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.tail_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.replicas. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_dummy_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _dummy_instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. (lib!spec.unbounded_log.UnboundedLog.replicas./replicas _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. (lib!spec.unbounded_log.UnboundedLog.replicas./replicas _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas.)) (! (= (lib!spec.unbounded_log.UnboundedLog.replicas./replicas/dummy_instance x) (lib!spec.unbounded_log.UnboundedLog.replicas./replicas/?dummy_instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas./replicas/dummy_instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.replicas./replicas/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas./replicas/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas.)) (! (= (lib!spec.unbounded_log.UnboundedLog.replicas./replicas/no_copy x) (lib!spec.unbounded_log.UnboundedLog.replicas./replicas/?no_copy x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas./replicas/no_copy x)) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.replicas./replicas_ ((c lib!spec.unbounded_log.UnboundedLog.replicas.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.replicas./replicas) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.replicas./replicas_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.replicas./replicas/dummy_instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.replicas./replicas/dummy_instance x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_key! Int) (_value! Poly)) (! (=> (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type _value! (proj%lib!Dispatch./View DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (proj%lib!Dispatch./View DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_versions.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_dummy_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _dummy_instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. (lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. (lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_versions.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions/dummy_instance x) (lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions/?dummy_instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions/dummy_instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_versions.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions/no_copy x) (lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions/?no_copy x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions/no_copy x)) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions_ ((c lib!spec.unbounded_log.UnboundedLog.local_versions.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_versions.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions/dummy_instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_versions./local_versions/dummy_instance x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_key! Int) (_value! Int)) (! (=> (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (<= 0 _value!)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&))) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.version_upper_bound.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_dummy_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _dummy_instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. (lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. (lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.version_upper_bound.)) (! (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound/dummy_instance x) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound/?dummy_instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound/dummy_instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.version_upper_bound.)) (! (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound/no_copy x) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound/?no_copy x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound/no_copy x)) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound_ ((c lib!spec.unbounded_log.UnboundedLog.version_upper_bound.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.version_upper_bound.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound/dummy_instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.version_upper_bound./version_upper_bound/dummy_instance x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_value! Int)) (! (=> (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _value!)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data _instance! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data _instance! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&))) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_dummy_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _dummy_instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. (lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. (lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads/dummy_instance x) (lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads/?dummy_instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads/dummy_instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads/no_copy x) (lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads/?no_copy x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads/no_copy x)) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads_ ((c lib!spec.unbounded_log.UnboundedLog.local_reads.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads/dummy_instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_reads./local_reads/dummy_instance x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_key! Int) (_value! lib!spec.unbounded_log.ReadonlyState.)) (! (=> (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. _value!) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x))) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_dummy_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _dummy_instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. (lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. (lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates/dummy_instance x) (lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates/?dummy_instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates/dummy_instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates/no_copy x) (lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates/?no_copy x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates/no_copy x)) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates_ ((c lib!spec.unbounded_log.UnboundedLog.local_updates.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates/dummy_instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_updates./local_updates/dummy_instance x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_key! Int) (_value! lib!spec.unbounded_log.UpdateState.)) (! (=> (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.unbounded_log.UpdateState. _value!) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x))) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.combiner. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_dummy_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _dummy_instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. (lib!spec.unbounded_log.UnboundedLog.combiner./combiner _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. (lib!spec.unbounded_log.UnboundedLog.combiner./combiner _dummy_instance! _no_copy!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (lib!spec.unbounded_log.UnboundedLog.combiner./combiner/dummy_instance x) (lib!spec.unbounded_log.UnboundedLog.combiner./combiner/?dummy_instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner./combiner/dummy_instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.combiner./combiner/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner./combiner/dummy_instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (lib!spec.unbounded_log.UnboundedLog.combiner./combiner/no_copy x) (lib!spec.unbounded_log.UnboundedLog.combiner./combiner/?no_copy x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner./combiner/no_copy x)) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.combiner./combiner_ ((c lib!spec.unbounded_log.UnboundedLog.combiner.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.combiner./combiner) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.combiner./combiner_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.combiner./combiner/dummy_instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.combiner./combiner/dummy_instance x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! lib!spec.unbounded_log.UnboundedLog.Instance.) (_key! Int) (_value! lib!spec.unbounded_log.CombinerState.)) (! (=> (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. _instance!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.unbounded_log.CombinerState. _value!) TYPE%lib!spec.unbounded_log.CombinerState.)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x))) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x))) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance x)))) )))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= x (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. x))) :pattern ((Poly%lib!spec.types.LogEntry. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (= x (Poly%lib!spec.types.LogEntry. (%Poly%lib!spec.types.LogEntry. x)))) :pattern ((has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (<= 0 _node_id!)) (has_type (Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry./LogEntry _op! _node_id!)) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry./LogEntry _op! _node_id!)) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) )))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= (lib!spec.types.LogEntry./LogEntry/op x) (lib!spec.types.LogEntry./LogEntry/?op x)) :pattern ((lib!spec.types.LogEntry./LogEntry/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (has_type (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. x)) (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))) )))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= (lib!spec.types.LogEntry./LogEntry/node_id x) (lib!spec.types.LogEntry./LogEntry/?node_id x)) :pattern ((lib!spec.types.LogEntry./LogEntry/node_id x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (<= 0 (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. x)))) :pattern ((lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. x)) (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= x (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. x))) :pattern ((Poly%lib!spec.unbounded_log.ReadonlyState. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.ReadonlyState. (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly)) (! (=> (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Init _op!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Init _op!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Init/op x) (lib!spec.unbounded_log.ReadonlyState./Init/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Init/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_version_upper_bound! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (<= 0 _version_upper_bound!)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound _op! _version_upper_bound!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound _op! _version_upper_bound!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op x) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound x) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_version_upper_bound! Int) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (<= 0 _version_upper_bound!) (<= 0 _node_id!)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./ReadyToRead _op! _version_upper_bound! _node_id!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./ReadyToRead _op! _version_upper_bound! _node_id!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op x) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound x) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id x) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?node_id x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_version_upper_bound! Int) (_node_id! Int) (_ret! Poly)) (! (=> (and (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (<= 0 _version_upper_bound!) (<= 0 _node_id!) (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Done _op! _version_upper_bound! _node_id! _ret!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Done _op! _version_upper_bound! _node_id! _ret!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/op x) (lib!spec.unbounded_log.ReadonlyState./Done/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound x) (lib!spec.unbounded_log.ReadonlyState./Done/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/node_id x) (lib!spec.unbounded_log.ReadonlyState./Done/?node_id x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/node_id x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/ret x) (lib!spec.unbounded_log.ReadonlyState./Done/?ret x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/ret x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= x (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. x))) :pattern ((Poly%lib!spec.unbounded_log.UpdateState. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UpdateState. (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly)) (! (=> (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Init _op!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Init _op!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Init/op x) (lib!spec.unbounded_log.UpdateState./Init/?op x)) :pattern ((lib!spec.unbounded_log.UpdateState./Init/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_idx! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Placed _op! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Placed _op! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Placed/op x) (lib!spec.unbounded_log.UpdateState./Placed/?op x)) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Placed/idx x) (lib!spec.unbounded_log.UpdateState./Placed/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/idx x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_ret! Poly) (_idx! Int)) (! (=> (and (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Applied _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Applied _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Applied/ret x) (lib!spec.unbounded_log.UpdateState./Applied/?ret x)) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/ret x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Applied/idx x) (lib!spec.unbounded_log.UpdateState./Applied/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/idx x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_ret! Poly) (_idx! Int)) (! (=> (and (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Done _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Done _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Done/ret x) (lib!spec.unbounded_log.UpdateState./Done/?ret x)) :pattern ((lib!spec.unbounded_log.UpdateState./Done/ret x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Done/idx x) (lib!spec.unbounded_log.UpdateState./Done/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Done/idx x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= x (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. x))) :pattern ((Poly%lib!spec.unbounded_log.CombinerState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (= x (Poly%lib!spec.unbounded_log.CombinerState. (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((has_type x TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (has_type (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready) TYPE%lib!spec.unbounded_log.CombinerState.))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.)) (! (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Placed _queued_ops!)) TYPE%lib!spec.unbounded_log.CombinerState.) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Placed _queued_ops!)) TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Placed/queued_ops x) (lib!spec.unbounded_log.CombinerState./Placed/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./Placed/queued_ops x)) )))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.) (_lversion! Int)) (! (=> (<= 0 _lversion!) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion _queued_ops! _lversion!)) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion _queued_ops! _lversion!)) TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops x) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops x)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion x) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?lversion x)) :pattern ((lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.) (_lversion! Int) (_idx! Int) (_tail! Int)) (! (=> (and (<= 0 _lversion!) (<= 0 _idx!) (<= 0 _tail!)) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop _queued_ops! _lversion! _idx! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop _queued_ops! _lversion! _idx! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/queued_ops x) (lib!spec.unbounded_log.CombinerState./Loop/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/queued_ops x)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/lversion x) (lib!spec.unbounded_log.CombinerState./Loop/?lversion x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/lversion x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/idx x) (lib!spec.unbounded_log.CombinerState./Loop/?idx x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/idx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/tail x) (lib!spec.unbounded_log.CombinerState./Loop/?tail x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/tail x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.) (_tail! Int)) (! (=> (<= 0 _tail!) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./UpdatedVersion _queued_ops! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./UpdatedVersion _queued_ops! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops x) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops x)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail x) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?tail x)) :pattern ((lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((x lib!InputOperation.)) (! (= x (%Poly%lib!InputOperation. (Poly%lib!InputOperation. x))) :pattern ((Poly%lib!InputOperation. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!InputOperation. DT&. DT&)) (= x (Poly%lib!InputOperation. (%Poly%lib!InputOperation. x)))) :pattern ((has_type x (TYPE%lib!InputOperation. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (has_type (Poly%lib!InputOperation. (lib!InputOperation./Read _0!)) (TYPE%lib!InputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!InputOperation. (lib!InputOperation./Read _0!)) (TYPE%lib!InputOperation. DT&. DT&))) )))
(assert (forall ((x lib!InputOperation.)) (! (= (lib!InputOperation./Read/0 x) (lib!InputOperation./Read/?0 x)) :pattern ((lib!InputOperation./Read/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!InputOperation. DT&. DT&)) (has_type (lib!InputOperation./Read/0 (%Poly%lib!InputOperation. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!InputOperation./Read/0 (%Poly%lib!InputOperation. x)) (has_type x (TYPE%lib!InputOperation. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (has_type (Poly%lib!InputOperation. (lib!InputOperation./Write _0!)) (TYPE%lib!InputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!InputOperation. (lib!InputOperation./Write _0!)) (TYPE%lib!InputOperation. DT&. DT&))) )))
(assert (forall ((x lib!InputOperation.)) (! (= (lib!InputOperation./Write/0 x) (lib!InputOperation./Write/?0 x)) :pattern ((lib!InputOperation./Write/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!InputOperation. DT&. DT&)) (has_type (lib!InputOperation./Write/0 (%Poly%lib!InputOperation. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!InputOperation./Write/0 (%Poly%lib!InputOperation. x)) (has_type x (TYPE%lib!InputOperation. DT&. DT&))) )))
(assert (forall ((x lib!OutputOperation.)) (! (= x (%Poly%lib!OutputOperation. (Poly%lib!OutputOperation. x))) :pattern ((Poly%lib!OutputOperation. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!OutputOperation. DT&. DT&)) (= x (Poly%lib!OutputOperation. (%Poly%lib!OutputOperation. x)))) :pattern ((has_type x (TYPE%lib!OutputOperation. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./Response DT&. DT&)) (has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Read _0!)) (TYPE%lib!OutputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Read _0!)) (TYPE%lib!OutputOperation. DT&. DT&))) )))
(assert (forall ((x lib!OutputOperation.)) (! (= (lib!OutputOperation./Read/0 x) (lib!OutputOperation./Read/?0 x)) :pattern ((lib!OutputOperation./Read/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!OutputOperation. DT&. DT&)) (has_type (lib!OutputOperation./Read/0 (%Poly%lib!OutputOperation. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!OutputOperation./Read/0 (%Poly%lib!OutputOperation. x)) (has_type x (TYPE%lib!OutputOperation. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./Response DT&. DT&)) (has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Write _0!)) (TYPE%lib!OutputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Write _0!)) (TYPE%lib!OutputOperation. DT&. DT&))) )))
(assert (forall ((x lib!OutputOperation.)) (! (= (lib!OutputOperation./Write/0 x) (lib!OutputOperation./Write/?0 x)) :pattern ((lib!OutputOperation./Write/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!OutputOperation. DT&. DT&)) (has_type (lib!OutputOperation./Write/0 (%Poly%lib!OutputOperation. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!OutputOperation./Write/0 (%Poly%lib!OutputOperation. x)) (has_type x (TYPE%lib!OutputOperation. DT&. DT&))) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))) )))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))) )))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))) )))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) )))
(assert (forall ((x tuple%9.)) (! (= x (%Poly%tuple%9. (Poly%tuple%9. x))) :pattern ((Poly%tuple%9. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (= x (Poly%tuple%9. (%Poly%tuple%9. x)))) :pattern ((has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly) (_4! Poly) (_5! Poly) (_6! Poly) (_7! Poly) (_8! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&) (has_type _4! T%4&) (has_type _5! T%5&) (has_type _6! T%6&) (has_type _7! T%7&) (has_type _8! T%8&)) (has_type (Poly%tuple%9. (tuple%9./tuple%9 _0! _1! _2! _3! _4! _5! _6! _7! _8!)) (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))) :pattern ((has_type (Poly%tuple%9. (tuple%9./tuple%9 _0! _1! _2! _3! _4! _5! _6! _7! _8!)) (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))) )))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/0 x) (tuple%9./tuple%9/?0 x)) :pattern ((tuple%9./tuple%9/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/0 (%Poly%tuple%9. x)) T%0&)) :pattern ((tuple%9./tuple%9/0 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))) )))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/1 x) (tuple%9./tuple%9/?1 x)) :pattern ((tuple%9./tuple%9/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/1 (%Poly%tuple%9. x)) T%1&)) :pattern ((tuple%9./tuple%9/1 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))) )))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/2 x) (tuple%9./tuple%9/?2 x)) :pattern ((tuple%9./tuple%9/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/2 (%Poly%tuple%9. x)) T%2&)) :pattern ((tuple%9./tuple%9/2 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))) )))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/3 x) (tuple%9./tuple%9/?3 x)) :pattern ((tuple%9./tuple%9/3 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/3 (%Poly%tuple%9. x)) T%3&)) :pattern ((tuple%9./tuple%9/3 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))) )))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/4 x) (tuple%9./tuple%9/?4 x)) :pattern ((tuple%9./tuple%9/4 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/4 (%Poly%tuple%9. x)) T%4&)) :pattern ((tuple%9./tuple%9/4 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))) )))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/5 x) (tuple%9./tuple%9/?5 x)) :pattern ((tuple%9./tuple%9/5 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/5 (%Poly%tuple%9. x)) T%5&)) :pattern ((tuple%9./tuple%9/5 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))) )))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/6 x) (tuple%9./tuple%9/?6 x)) :pattern ((tuple%9./tuple%9/6 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/6 (%Poly%tuple%9. x)) T%6&)) :pattern ((tuple%9./tuple%9/6 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))) )))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/7 x) (tuple%9./tuple%9/?7 x)) :pattern ((tuple%9./tuple%9/7 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/7 (%Poly%tuple%9. x)) T%7&)) :pattern ((tuple%9./tuple%9/7 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))) )))
(assert (forall ((x tuple%9.)) (! (= (tuple%9./tuple%9/8 x) (tuple%9./tuple%9/?8 x)) :pattern ((tuple%9./tuple%9/8 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type (tuple%9./tuple%9/8 (%Poly%tuple%9. x)) T%8&)) :pattern ((tuple%9./tuple%9/8 (%Poly%tuple%9. x)) (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&))) )))
(define-fun is-tuple%9./tuple%9_ ((c tuple%9.)) Bool ((_ is tuple%9./tuple%9) c))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/0 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/0 x))) )))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/1 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/1 x))) )))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/2 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/2 x))) )))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/3 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/3 x))) )))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/4 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/4 x))) )))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/5 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/5 x))) )))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/6 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/6 x))) )))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/7 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/7 x))) )))
(assert (forall ((x tuple%9.)) (! (=> (is-tuple%9./tuple%9_ x) (height_lt (height (tuple%9./tuple%9/8 x)) (height (Poly%tuple%9. x)))) :pattern ((height (tuple%9./tuple%9/8 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (has_type y (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&)) (ext_eq deep T%0& (tuple%9./tuple%9/0 (%Poly%tuple%9. x)) (tuple%9./tuple%9/0 (%Poly%tuple%9. y))) (ext_eq deep T%1& (tuple%9./tuple%9/1 (%Poly%tuple%9. x)) (tuple%9./tuple%9/1 (%Poly%tuple%9. y))) (ext_eq deep T%2& (tuple%9./tuple%9/2 (%Poly%tuple%9. x)) (tuple%9./tuple%9/2 (%Poly%tuple%9. y))) (ext_eq deep T%3& (tuple%9./tuple%9/3 (%Poly%tuple%9. x)) (tuple%9./tuple%9/3 (%Poly%tuple%9. y))) (ext_eq deep T%4& (tuple%9./tuple%9/4 (%Poly%tuple%9. x)) (tuple%9./tuple%9/4 (%Poly%tuple%9. y))) (ext_eq deep T%5& (tuple%9./tuple%9/5 (%Poly%tuple%9. x)) (tuple%9./tuple%9/5 (%Poly%tuple%9. y))) (ext_eq deep T%6& (tuple%9./tuple%9/6 (%Poly%tuple%9. x)) (tuple%9./tuple%9/6 (%Poly%tuple%9. y))) (ext_eq deep T%7& (tuple%9./tuple%9/7 (%Poly%tuple%9. x)) (tuple%9./tuple%9/7 (%Poly%tuple%9. y))) (ext_eq deep T%8& (tuple%9./tuple%9/8 (%Poly%tuple%9. x)) (tuple%9./tuple%9/8 (%Poly%tuple%9. y)))) (ext_eq deep (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&) x y)) :pattern ((ext_eq deep (TYPE%tuple%9. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%lib!Dispatch. (Dcr Type) Bool)
(set-info :comment ";; Function-Decl vstd::layout::size_of")
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_pair")
(declare-fun vstd!map_lib.impl&%0.contains_pair.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::filter")
(declare-fun vstd!seq_lib.impl&%0.filter.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_set")
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_add")
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_readonly_version_upper_bound_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_version_upper_bound_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_readonly_ready_to_read_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_readonly_ready_to_read_1")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_1.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_readonly_apply_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_apply_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_update_place_ops_in_log_one_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_update_place_ops_in_log_one_1")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_1.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_update_done_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_done_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_trivial_start_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_trivial_start_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_load_local_version_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_local_version_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_load_global_head_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_global_head_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_dispatch_local_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_local_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_dispatch_remote_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_remote_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_update_version_upper_bound_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_update_version_upper_bound_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_finish_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_finish_no_change_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_no_change_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::arrow_dummy_to_use_type_params_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.State.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::is_readonly_version_upper_bound")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_version_upper_bound.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_readonly_version_upper_bound_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_version_upper_bound_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::is_readonly_ready_to_read")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_ready_to_read.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_readonly_ready_to_read_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_readonly_ready_to_read_1")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_1.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::is_readonly_apply")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_apply.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_readonly_apply_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_apply_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::is_update_place_ops_in_log_one")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.is_update_place_ops_in_log_one.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_update_place_ops_in_log_one_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_update_place_ops_in_log_one_1")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_1.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::is_update_done")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.is_update_done.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_update_done_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_done_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::is_exec_trivial_start")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_trivial_start.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_exec_trivial_start_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_trivial_start_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::is_exec_load_local_version")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_load_local_version.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_exec_load_local_version_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_local_version_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::is_exec_load_global_head")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_load_global_head.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_exec_load_global_head_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_global_head_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::is_exec_dispatch_local")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_dispatch_local.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_exec_dispatch_local_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_local_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::is_exec_dispatch_remote")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_dispatch_remote.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_exec_dispatch_remote_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_remote_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::is_exec_update_version_upper_bound")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_update_version_upper_bound.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_exec_update_version_upper_bound_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_update_version_upper_bound_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::is_exec_finish")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_finish.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_exec_finish_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::is_exec_finish_no_change")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_finish_no_change.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_exec_finish_no_change_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_no_change_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::is_dummy_to_use_type_params")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.is_dummy_to_use_type_params.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Step::get_dummy_to_use_type_params_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%1.get_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.State.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Config::arrow_initialize_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_initialize_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Config::arrow_dummy_to_use_type_params_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.State.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Config::is_initialize")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%3.is_initialize.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Config::get_initialize_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%3.get_initialize_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Config::is_dummy_to_use_type_params")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%3.is_dummy_to_use_type_params.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Config::get_dummy_to_use_type_params_0")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%3.get_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.State.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::log::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.log_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::log::map_agree")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::log::map_agree_strict")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::tail::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.tail_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::replicas::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.replicas_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::replicas::map_agree")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::replicas::map_agree_strict")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_versions::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.local_versions_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_versions::map_agree")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_versions::map_agree_strict")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::version_upper_bound::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_reads::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.local_reads_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_reads::map_agree")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_reads::map_agree_strict")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_updates::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_updates::map_agree")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_updates::map_agree_strict")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::combiner::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.combiner_token_data.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::combiner::map_agree")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::combiner::map_agree_strict")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::Instance::num_replicas")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::initialize")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::initialize_enabled")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize_enabled.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::readonly_version_upper_bound")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::readonly_version_upper_bound_strong")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::readonly_version_upper_bound_enabled")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::readonly_ready_to_read")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::readonly_ready_to_read_strong")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_strong.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::readonly_ready_to_read_enabled")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_enabled.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::readonly_apply")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::readonly_apply_strong")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::readonly_apply_enabled")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::update_place_ops_in_log_one")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::update_place_ops_in_log_one_strong")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_strong.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::update_place_ops_in_log_one_enabled")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_enabled.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::update_done")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::update_done_strong")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::update_done_enabled")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_trivial_start")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_trivial_start_strong")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_trivial_start_enabled")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_load_local_version")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_load_local_version_strong")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_load_local_version_enabled")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_load_global_head")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_load_global_head_strong")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_load_global_head_enabled")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_local")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_local_strong")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_local_enabled")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_remote")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_remote_strong")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_remote_enabled")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_update_version_upper_bound")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_update_version_upper_bound_strong")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_update_version_upper_bound_enabled")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_finish")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_finish_strong")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_finish_enabled")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_finish_no_change")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_finish_no_change_strong")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::exec_finish_no_change_enabled")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::next_by")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.next_by.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::next")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.next.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::next_strong_by")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong_by.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::next_strong")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::init_by")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.init_by.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::init")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::invariant")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_request_ids_finite")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_local_combiner_complete")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::combiner_local_versions_domains")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::combiner_replicas_domains")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_version_in_range")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_local_version_upper_bound_heads")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_readonly_requests_wf")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::combiner_states_wf")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_log_complete")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_local_updates")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_read_results")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_update_results")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_combiner_rids_distinct")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::replica_state")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::wf_node_id")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::wf_readstate")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::wf_combiner_for_node_id")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::inv_local_updates_wf")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::read_results_match")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::update_results_match")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::State::current_local_version")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? (Dcr Type Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::utils::seq_unique")
(declare-fun lib!spec.utils.seq_unique.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::utils::seq_disjoint")
(declare-fun lib!spec.utils.seq_disjoint.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::utils::map_new_rec")
(declare-fun lib!spec.utils.map_new_rec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!spec.utils.rec%map_new_rec.? (Dcr Type Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl lib::spec::utils::rangeincl")
(declare-fun lib!spec.utils.rangeincl.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::is_Done")
(declare-fun lib!spec.unbounded_log.impl&%0.is_Done.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_Done_version_upper_bound")
(declare-fun lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_Done_node_id")
(declare-fun lib!spec.unbounded_log.impl&%0.get_Done_node_id.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_Done_ret")
(declare-fun lib!spec.unbounded_log.impl&%0.get_Done_ret.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Init_op")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Init_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Placed")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Placed.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Placed_idx")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Placed_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Applied")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Applied.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Done")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Done.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Done_ret")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Done_ret.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_Placed_queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_Loop_queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_Loop_lversion")
(declare-fun lib!spec.unbounded_log.impl&%5.get_Loop_lversion.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_Loop_idx")
(declare-fun lib!spec.unbounded_log.impl&%5.get_Loop_idx.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_Loop_tail")
(declare-fun lib!spec.unbounded_log.impl&%5.get_Loop_tail.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%7.queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::combiner_request_id_fresh")
(declare-fun lib!spec.unbounded_log.combiner_request_id_fresh.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::get_fresh_nat")
(declare-fun lib!spec.unbounded_log.get_fresh_nat.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::LogContainsEntriesUpToHere")
(declare-fun lib!spec.unbounded_log.LogContainsEntriesUpToHere.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::LogNoEntriesFromHere")
(declare-fun lib!spec.unbounded_log.LogNoEntriesFromHere.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::LogRangeNoNodeId")
(declare-fun lib!spec.unbounded_log.LogRangeNoNodeId.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.unbounded_log.rec%LogRangeNoNodeId.? (Dcr Type Poly Poly Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::LogRangeMatchesQueue")
(declare-fun lib!spec.unbounded_log.LogRangeMatchesQueue.? (Dcr Type Poly Poly Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? (Dcr Type Poly Poly Poly Poly Poly Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::QueueRidsUpdateDone")
(declare-fun lib!spec.unbounded_log.QueueRidsUpdateDone.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::QueueRidsUpdatePlaced")
(declare-fun lib!spec.unbounded_log.QueueRidsUpdatePlaced.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::compute_nrstate_at_version")
(declare-fun lib!spec.unbounded_log.compute_nrstate_at_version.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!spec.unbounded_log.rec%compute_nrstate_at_version.? (Dcr Type Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl lib::Dispatch::init_spec")
(declare-fun lib!Dispatch.init_spec.? (Dcr Type) Poly)
(declare-fun lib!Dispatch.init_spec%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl lib::Dispatch::dispatch_spec")
(declare-fun lib!Dispatch.dispatch_spec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!Dispatch.dispatch_spec%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::Dispatch::dispatch_mut_spec")
(declare-fun lib!Dispatch.dispatch_mut_spec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!Dispatch.dispatch_mut_spec%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::add_ticket")
(declare-fun lib!add_ticket.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::consume_stub")
(declare-fun lib!consume_stub.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Axioms lib::Dispatch::init_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!Dispatch.init_spec.? Self%&. Self%&) (proj%lib!Dispatch./View Self%&. Self%&)) :pattern ((lib!Dispatch.init_spec.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms lib::Dispatch::dispatch_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (ds! Poly) (op! Poly)) (! (=> (and (has_type ds! (proj%lib!Dispatch./View Self%&. Self%&)) (has_type op! (proj%lib!Dispatch./ReadOperation Self%&. Self%&))) (has_type (lib!Dispatch.dispatch_spec.? Self%&. Self%& ds! op!) (proj%lib!Dispatch./Response Self%&. Self%&))) :pattern ((lib!Dispatch.dispatch_spec.? Self%&. Self%& ds! op!)) )))
(set-info :comment ";; Function-Axioms lib::Dispatch::dispatch_mut_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (ds! Poly) (op! Poly)) (! (=> (and (has_type ds! (proj%lib!Dispatch./View Self%&. Self%&)) (has_type op! (proj%lib!Dispatch./WriteOperation Self%&. Self%&))) (has_type (lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& ds! op!) (TYPE%tuple%2. (proj%%lib!Dispatch./View Self%&. Self%&) (proj%lib!Dispatch./View Self%&. Self%&) (proj%%lib!Dispatch./Response Self%&. Self%&) (proj%lib!Dispatch./Response Self%&. Self%&)))) :pattern ((lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& ds! op!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_updates::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Init_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Init_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Init_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Done")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Done.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Done_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Done) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Done.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Done.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Done.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Done_ret")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_reads::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::is_Done")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.is_Done.))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./Done_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./Done) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.is_Done.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.is_Done.? DT&. DT& self!) (is-lib!spec.unbounded_log.ReadonlyState./Done_ (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.is_Done.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_Done_ret")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_request_ids_finite")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite.? DT&. DT& self!) (and (and (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))))) (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_local_combiner_complete")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete.? DT&. DT& self!) (forall ((node_id$ Poly)) (! (=> (has_type node_id$ NAT) (= (and (<= 0 (%I node_id$)) (< (%I node_id$) (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::combiner_local_versions_domains")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains.? DT&. DT& self!) (forall ((k$ Poly)) (! (=> (has_type k$ NAT) (= (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) k$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) k$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) k$)) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) k$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::combiner_replicas_domains")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains.? DT&. DT& self!) (forall ((k$ Poly)) (! (=> (has_type k$ NAT) (= (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) k$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) k$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) k$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_version_in_range")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range.? DT&. DT& self!) (<= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%1 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_local_version_upper_bound_heads")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads.? DT&. DT& self!) (forall ((node_id$ Poly)) (! (=> (has_type node_id$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id$) (<= (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id$)) (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::wf_node_id")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.? DT&. DT& self! node_id!) (and (and (and (and (<= 0 (%I node_id!)) (< (%I node_id!) (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.? DT&. DT& self! node_id!)) ))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::current_local_version")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Poly)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version. DT&. DT& self! node_id!) (=> %%global_location_label%%3 (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id!) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id!)))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version. DT&. DT& self! node_id!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::current_local_version")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.))
(define-fun is-lib!spec.unbounded_log.CombinerState./Ready_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./Ready) c))
(define-fun is-lib!spec.unbounded_log.CombinerState./Placed_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./Placed) c))
(define-fun is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./LoadedLocalVersion) c))
(define-fun is-lib!spec.unbounded_log.CombinerState./Loop_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./Loop) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? DT&. DT& self! node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Ready_ tmp%%$) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) lversion$) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) lversion$) (let ((tail$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) tail$))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? DT&. DT& self! node_id!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Poly)) (! (=> (and (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)) (has_type node_id! NAT)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? DT&. DT& self! node_id!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? DT&. DT& self! node_id!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::wf_readstate")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate.))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./Init_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./Init) c))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./VersionUpperBound) c))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./ReadyToRead) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (rs! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate.? DT&. DT& self! rs!) (ite (is-lib!spec.unbounded_log.ReadonlyState./Init_ (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) true) (ite (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (<= version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))))) (ite (is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (let ((node_id$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (and (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.? DT&. DT& self! (I node_id$)) (<= version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (<= version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? DT&. DT& self! (I node_id$))))))) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (let ((ret$ (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (let ((node_id$ (lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. rs!)))) (and (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.? DT&. DT& self! (I node_id$)) (<= version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (<= version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? DT&. DT& self! (I node_id$)))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate.? DT&. DT& self! rs!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_readonly_requests_wf")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf.? DT&. DT& self!) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$) (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_readstate.? DT&. DT& self! (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeNoNodeId")
(declare-fun req%lib!spec.unbounded_log.LogRangeNoNodeId. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (start! Poly) (end! Poly) (node_id! Poly)) (! (= (req%lib!spec.unbounded_log.LogRangeNoNodeId. DT&. DT& log! start! end! node_id!) (=> %%global_location_label%%4 (<= (%I start!) (%I end!)))) :pattern ((req%lib!spec.unbounded_log.LogRangeNoNodeId. DT&. DT& log! start! end! node_id!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::LogRangeNoNodeId")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.LogRangeNoNodeId.))
(declare-const fuel_nat%lib!spec.unbounded_log.LogRangeNoNodeId. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (start! Poly) (end! Poly) (node_id! Poly) (fuel% Fuel)) (! (= (lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! fuel%) (lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! zero)) :pattern ((lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! fuel%)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (start! Poly) (end! Poly) (node_id! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type start! NAT) (has_type end! NAT) (has_type node_id! NAT) (<= (%I start!) (%I end!))) (= (lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! (succ fuel%)) (=> (< (%I start!) (%I end!)) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) start!) (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! start!))) (%I node_id!)))) (lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! (I (nClip (Add (%I start!) 1))) end! node_id! fuel%))))) :pattern ((lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.LogRangeNoNodeId.) (forall ((DT&. Dcr) (DT& Type) (log! Poly) (start! Poly) (end! Poly) (node_id! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type start! NAT) (has_type end! NAT) (has_type node_id! NAT) (<= (%I start!) (%I end!))) (= (lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& log! start! end! node_id!) (lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! (succ fuel_nat%lib!spec.unbounded_log.LogRangeNoNodeId.)))) :pattern ((lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& log! start! end! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::LogContainsEntriesUpToHere")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.LogContainsEntriesUpToHere.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.LogContainsEntriesUpToHere.) (forall ((DT&. Dcr) (DT& Type) (log! Poly) (end! Poly)) (! (= (lib!spec.unbounded_log.LogContainsEntriesUpToHere.? DT&. DT& log! end!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (%I end!))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$)) ))) :pattern ((lib!spec.unbounded_log.LogContainsEntriesUpToHere.? DT&. DT& log! end!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Placed")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Placed.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Placed_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Placed) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Placed.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Placed.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Placed.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Placed_idx")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Placed_idx.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Placed_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Placed_idx.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Placed_idx.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%3.get_Placed_idx.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Placed_idx.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeMatchesQueue")
(declare-fun req%lib!spec.unbounded_log.LogRangeMatchesQueue. (Dcr Type Poly Poly Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! Poly) (log! Poly) (queueIndex! Poly) (logIndexLower! Poly) (logIndexUpper! Poly) (nodeId! Poly) (updates! Poly)) (! (= (req%lib!spec.unbounded_log.LogRangeMatchesQueue. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates!) (and (=> %%global_location_label%%5 (and (<= 0 (%I queueIndex!)) (<= (%I queueIndex!) (vstd!seq.Seq.len.? $ NAT queue!)))) (=> %%global_location_label%%6 (lib!spec.unbounded_log.LogContainsEntriesUpToHere.? DT&. DT& log! logIndexUpper!)) (=> %%global_location_label%%7 (<= (%I logIndexLower!) (%I logIndexUpper!))))) :pattern ((req%lib!spec.unbounded_log.LogRangeMatchesQueue. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::LogRangeMatchesQueue")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.LogRangeMatchesQueue.))
(declare-const fuel_nat%lib!spec.unbounded_log.LogRangeMatchesQueue. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! Poly) (log! Poly) (queueIndex! Poly) (logIndexLower! Poly) (logIndexUpper! Poly) (nodeId! Poly) (updates! Poly) (fuel% Fuel)) (! (= (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! fuel%) (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! zero)) :pattern ((lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! fuel%)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (queue! Poly) (log! Poly) (queueIndex! Poly) (logIndexLower! Poly) (logIndexUpper! Poly) (nodeId! Poly) (updates! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type queue! (TYPE%vstd!seq.Seq. $ NAT)) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type queueIndex! NAT) (has_type logIndexLower! NAT) (has_type logIndexUpper! NAT) (has_type nodeId! NAT) (has_type updates! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) (<= (%I logIndexLower!) (%I logIndexUpper!))) (= (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! (succ fuel%)) (and (=> (= logIndexLower! logIndexUpper!) (= (%I queueIndex!) (vstd!seq.Seq.len.? $ NAT queue!))) (=> (< (%I logIndexLower!) (%I logIndexUpper!)) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) logIndexLower!) (=> (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! logIndexLower!))) (%I nodeId!)) (and (and (and (and (< (%I queueIndex!) (vstd!seq.Seq.len.? $ NAT queue!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates!) (vstd!seq.Seq.index.? $ NAT queue! queueIndex!))) (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates! (vstd!seq.Seq.index.? $ NAT queue! queueIndex!))))) (= (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates! (vstd!seq.Seq.index.? $ NAT queue! queueIndex!)))) (%I logIndexLower!))) (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! (I (nClip (Add (%I queueIndex!) 1))) (I (nClip (Add (%I logIndexLower!) 1))) logIndexUpper! nodeId! updates! fuel%)))) (=> (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! logIndexLower!))) (%I nodeId!))) (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! (I (nClip (Add (%I logIndexLower!) 1))) logIndexUpper! nodeId! updates! fuel%))))))) :pattern ((lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.LogRangeMatchesQueue.) (forall ((DT&. Dcr) (DT& Type) (queue! Poly) (log! Poly) (queueIndex! Poly) (logIndexLower! Poly) (logIndexUpper! Poly) (nodeId! Poly) (updates! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type queue! (TYPE%vstd!seq.Seq. $ NAT)) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type queueIndex! NAT) (has_type logIndexLower! NAT) (has_type logIndexUpper! NAT) (has_type nodeId! NAT) (has_type updates! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) (<= (%I logIndexLower!) (%I logIndexUpper!))) (= (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates!) (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! (succ fuel_nat%lib!spec.unbounded_log.LogRangeMatchesQueue.)))) :pattern ((lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%8 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::QueueRidsUpdatePlaced")
(declare-fun req%lib!spec.unbounded_log.QueueRidsUpdatePlaced. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queued_ops! Poly) (localUpdates! Poly) (bound! Poly)) (! (= (req%lib!spec.unbounded_log.QueueRidsUpdatePlaced. DT&. DT& queued_ops! localUpdates! bound!) (=> %%global_location_label%%9 (and (<= 0 (%I bound!)) (<= (%I bound!) (vstd!seq.Seq.len.? $ NAT queued_ops!))))) :pattern ((req%lib!spec.unbounded_log.QueueRidsUpdatePlaced. DT&. DT& queued_ops! localUpdates! bound!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::QueueRidsUpdatePlaced")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.QueueRidsUpdatePlaced.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.QueueRidsUpdatePlaced.) (forall ((DT&. Dcr) (DT& Type) (queued_ops! Poly) (localUpdates! Poly) (bound! Poly)) (! (= (lib!spec.unbounded_log.QueueRidsUpdatePlaced.? DT&. DT& queued_ops! localUpdates! bound!) (forall ((j$ Poly)) (! (=> (has_type j$ INT) (=> (and (<= (%I bound!) (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? $ NAT queued_ops!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) localUpdates!) (vstd!seq.Seq.index.? $ NAT queued_ops! j$)) (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) localUpdates! (vstd!seq.Seq.index.? $ NAT queued_ops! j$))))))) :pattern ((vstd!seq.Seq.index.? $ NAT queued_ops! j$)) ))) :pattern ((lib!spec.unbounded_log.QueueRidsUpdatePlaced.? DT&. DT& queued_ops! localUpdates! bound!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::utils::seq_unique")
(assert (fuel_bool_default fuel%lib!spec.utils.seq_unique.))
(assert (=> (fuel_bool fuel%lib!spec.utils.seq_unique.) (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (= (lib!spec.utils.seq_unique.? A&. A& seq!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& seq!))) (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? A&. A& seq!)))) (not (= i$ j$))) (not (= (vstd!seq.Seq.index.? A&. A& seq! i$) (vstd!seq.Seq.index.? A&. A& seq! j$))))) :pattern ((vstd!seq.Seq.index.? A&. A& seq! i$) (vstd!seq.Seq.index.? A&. A& seq! j$)) ))) :pattern ((lib!spec.utils.seq_unique.? A&. A& seq!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Applied")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Applied.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Applied_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Applied) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Applied.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Applied.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Applied_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Applied.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::QueueRidsUpdateDone")
(declare-fun req%lib!spec.unbounded_log.QueueRidsUpdateDone. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queued_ops! Poly) (localUpdates! Poly) (bound! Poly)) (! (= (req%lib!spec.unbounded_log.QueueRidsUpdateDone. DT&. DT& queued_ops! localUpdates! bound!) (=> %%global_location_label%%10 (and (<= 0 (%I bound!)) (<= (%I bound!) (vstd!seq.Seq.len.? $ NAT queued_ops!))))) :pattern ((req%lib!spec.unbounded_log.QueueRidsUpdateDone. DT&. DT& queued_ops! localUpdates! bound!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::QueueRidsUpdateDone")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.QueueRidsUpdateDone.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.QueueRidsUpdateDone.) (forall ((DT&. Dcr) (DT& Type) (queued_ops! Poly) (localUpdates! Poly) (bound! Poly)) (! (= (lib!spec.unbounded_log.QueueRidsUpdateDone.? DT&. DT& queued_ops! localUpdates! bound!) (forall ((j$ Poly)) (! (=> (has_type j$ INT) (=> (and (<= 0 (%I j$)) (< (%I j$) (%I bound!))) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) localUpdates!) (vstd!seq.Seq.index.? $ NAT queued_ops! j$)) (or (is-lib!spec.unbounded_log.UpdateState./Applied_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) localUpdates! (vstd!seq.Seq.index.? $ NAT queued_ops! j$)))) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) localUpdates! (vstd!seq.Seq.index.? $ NAT queued_ops! j$)))))))) :pattern ((vstd!seq.Seq.index.? $ NAT queued_ops! j$)) ))) :pattern ((lib!spec.unbounded_log.QueueRidsUpdateDone.? DT&. DT& queued_ops! localUpdates! bound!)) ))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::wf_combiner_for_node_id")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Poly)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id. DT&. DT& self! node_id!) (=> %%global_location_label%%11 (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_node_id.? DT&. DT& self! node_id!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id. DT&. DT& self! node_id!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::wf_combiner_for_node_id")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id.? DT&. DT& self! node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Ready_ tmp%%$) (lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (and (and (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I 0) (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id! (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) (lib!spec.unbounded_log.QueueRidsUpdatePlaced.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I 0))) (lib!spec.utils.seq_unique.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$)))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (and (and (and (= lversion$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!))) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I 0) (I lversion$) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id! (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (lib!spec.unbounded_log.QueueRidsUpdatePlaced.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I 0))) (lib!spec.utils.seq_unique.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (and (and (and (and (and (and (and (and (and (<= tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) (>= lversion$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)))) (<= lversion$ tail$)) (lib!spec.unbounded_log.LogContainsEntriesUpToHere.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I lversion$))) (and (<= 0 idx$) (<= idx$ (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$))))) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I idx$) (I lversion$) (I tail$) node_id! (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I tail$) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)) (lib!spec.unbounded_log.QueueRidsUpdatePlaced.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I idx$))) (lib!spec.unbounded_log.QueueRidsUpdateDone.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I idx$))) (lib!spec.utils.seq_unique.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$))))))) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (and (and (and (and (and (<= tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) (<= (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)) tail$)) (lib!spec.unbounded_log.LogContainsEntriesUpToHere.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I tail$))) (lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I tail$) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id!)) (lib!spec.unbounded_log.QueueRidsUpdateDone.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queued_ops$) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$))))) (lib!spec.utils.seq_unique.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id.? DT&. DT& self! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::combiner_states_wf")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf.? DT&. DT& self!) (forall ((node_id$ Poly)) (! (=> (has_type node_id$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id$) (lib!spec.unbounded_log.UnboundedLog.impl&%13.wf_combiner_for_node_id.? DT&. DT& self! node_id$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::LogNoEntriesFromHere")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.LogNoEntriesFromHere.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.LogNoEntriesFromHere.) (forall ((DT&. Dcr) (DT& Type) (log! Poly) (start! Poly)) (! (= (lib!spec.unbounded_log.LogNoEntriesFromHere.? DT&. DT& log! start!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (<= (%I start!) (%I i$)) (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$)) ))) :pattern ((lib!spec.unbounded_log.LogNoEntriesFromHere.? DT&. DT& log! start!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_log_complete")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete.? DT&. DT& self!) (and (lib!spec.unbounded_log.LogContainsEntriesUpToHere.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (lib!spec.unbounded_log.LogNoEntriesFromHere.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_local_updates_wf")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Init_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Init) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (update! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf.? DT&. DT& self! update!) (ite (is-lib!spec.unbounded_log.UpdateState./Init_ (%Poly%lib!spec.unbounded_log.UpdateState. update!)) (let ((op$ (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) true) (ite (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. update!)) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) (I idx$)) (< idx$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))))) (ite (is-lib!spec.unbounded_log.UpdateState./Applied_ (%Poly%lib!spec.unbounded_log.UpdateState. update!)) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) (I idx$)) (< idx$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))))) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) (I idx$)) (< idx$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf.? DT&. DT& self! update!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_local_updates")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates.? DT&. DT& self!) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates_wf.? DT&. DT& self! (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::utils::rangeincl")
(assert (fuel_bool_default fuel%lib!spec.utils.rangeincl.))
(assert (=> (fuel_bool fuel%lib!spec.utils.rangeincl.) (forall ((low! Poly) (mid! Poly) (high! Poly)) (! (= (lib!spec.utils.rangeincl.? low! mid! high!) (and (<= (%I low!) (%I mid!)) (<= (%I mid!) (%I high!)))) :pattern ((lib!spec.utils.rangeincl.? low! mid! high!)) ))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::compute_nrstate_at_version")
(declare-fun req%lib!spec.unbounded_log.compute_nrstate_at_version. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (= (req%lib!spec.unbounded_log.compute_nrstate_at_version. DT&. DT& log! version!) (=> %%global_location_label%%12 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (%I version!))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$)) )))) :pattern ((req%lib!spec.unbounded_log.compute_nrstate_at_version. DT&. DT& log! version!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::compute_nrstate_at_version")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.compute_nrstate_at_version.))
(declare-const fuel_nat%lib!spec.unbounded_log.compute_nrstate_at_version. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly) (fuel% Fuel)) (! (= (lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! fuel%) (lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! zero)) :pattern ((lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! fuel%)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type version! NAT)) (= (lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! (succ fuel%)) (ite (= (%I version!) 0) (lib!Dispatch.init_spec.? DT&. DT&) (let ((ver$ (nClip (Sub (%I version!) 1)))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& (lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! (I ver$) fuel%) (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! (I ver$))))))))))) :pattern ((lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.compute_nrstate_at_version.) (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type version! NAT)) (= (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& log! version!) (lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! (succ fuel_nat%lib!spec.unbounded_log.compute_nrstate_at_version.)))) :pattern ((lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& log! version!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (=> (and (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type version! NAT)) (has_type (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& log! version!) (proj%lib!Dispatch./View DT&. DT&))) :pattern ((lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& log! version!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::read_results_match")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (read! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match.? DT&. DT& self! read!) (=> (is-lib!spec.unbounded_log.ReadonlyState./Done_ (%Poly%lib!spec.unbounded_log.ReadonlyState. read!)) (let ((ret$ (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. read!)))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. read!)))) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. read!)))) (exists ((v$ Poly)) (! (and (has_type v$ NAT) (and (lib!spec.utils.rangeincl.? (I version_upper_bound$) v$ (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) (= ret$ (lib!Dispatch.dispatch_spec.? DT&. DT& (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) v$) op$)))) :pattern ((lib!spec.utils.rangeincl.? (I version_upper_bound$) v$ (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))))) ))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match.? DT&. DT& self! read!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_read_results")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results.? DT&. DT& self!) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$) (lib!spec.unbounded_log.UnboundedLog.impl&%13.read_results_match.? DT&. DT& self! (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::update_results_match")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (update! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match.? DT&. DT& self! update!) (ite (is-lib!spec.unbounded_log.UpdateState./Applied_ (%Poly%lib!spec.unbounded_log.UpdateState. update!)) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (= ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I idx$)) (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I idx$)))))))))) (=> (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. update!)) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. update!)))) (= ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I idx$)) (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I idx$))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match.? DT&. DT& self! update!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_update_results")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results.? DT&. DT& self!) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$) (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_results_match.? DT&. DT& self! (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) rid$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::utils::seq_disjoint")
(assert (fuel_bool_default fuel%lib!spec.utils.seq_disjoint.))
(assert (=> (fuel_bool fuel%lib!spec.utils.seq_disjoint.) (forall ((A&. Dcr) (A& Type) (s! Poly) (t! Poly)) (! (= (lib!spec.utils.seq_disjoint.? A&. A& s! t!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? A&. A& t!)))) (not (= (vstd!seq.Seq.index.? A&. A& s! i$) (vstd!seq.Seq.index.? A&. A& t! j$))))) :pattern ((vstd!seq.Seq.index.? A&. A& s! i$) (vstd!seq.Seq.index.? A&. A& t! j$)) ))) :pattern ((lib!spec.utils.seq_disjoint.? A&. A& s! t!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%7.queued_ops.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%7.queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%7.queued_ops.? self!) (ite (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.empty.? $ NAT)) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$)))))) :pattern ((lib!spec.unbounded_log.impl&%7.queued_ops.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::inv_combiner_rids_distinct")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct.? DT&. DT& self!) (forall ((node_id1$ Poly) (node_id2$ Poly)) (! (=> (and (has_type node_id1$ NAT) (has_type node_id2$ NAT)) (=> (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id1$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id2$)) (not (= node_id1$ node_id2$))) (lib!spec.utils.seq_disjoint.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec.unbounded_log.impl&%7.queued_ops.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id1$))) (Poly%vstd!seq.Seq<nat.>. (lib!spec.unbounded_log.impl&%7.queued_ops.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id2$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id1$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)))) node_id2$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::replica_state")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state.? DT&. DT& self!) (forall ((node_id$ Poly)) (! (=> (has_type node_id$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id$) (= (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) node_id$) (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!)) (I (lib!spec.unbounded_log.UnboundedLog.impl&%13.current_local_version.? DT&. DT& self! node_id$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. self!))) node_id$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::invariant")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& self!) (and (and (and (and (and (and (and (and (and (and (and (and (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct.? DT&. DT& self!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::initialize")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize.))
(declare-fun %%lambda%%0 (Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (n$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0) n$) (B (< (%I n$) %%hole%%0))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0) n$)))))
(declare-fun %%lambda%%1 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (n$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0) n$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0) n$)))))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize.) (forall ((DT&. Dcr) (DT& Type) (post! Poly) (number_of_nodes! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize.? DT&. DT& post! number_of_nodes!) (and (> (%I number_of_nodes!) 0) (let ((update_tmp_num_replicas$ (%I number_of_nodes!))) (let ((update_tmp_log$ (vstd!map.impl&%0.empty.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&)))) (let ((update_tmp_tail$ 0)) (let ((update_tmp_replicas$ (vstd!map.impl&%0.new.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&)) (Poly%fun%1. (mk_fun (%%lambda%%0 (%I number_of_nodes!)))) (Poly%fun%1. (mk_fun (%%lambda%%1 (lib!Dispatch.init_spec.? DT&. DT&))))))) (let ((update_tmp_local_versions$ (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.new.? $ NAT $ NAT $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ NAT) (Poly%fun%1. (mk_fun (%%lambda%%0 (%I number_of_nodes!)))) (Poly%fun%1. (mk_fun (%%lambda%%1 (I 0)))))))) (let ((update_tmp_version_upper_bound$ 0)) (let ((update_tmp_local_reads$ (vstd!map.impl&%0.empty.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)))) (let ((update_tmp_local_updates$ (vstd!map.impl&%0.empty.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)))) (let ((update_tmp_combiner$ (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.) (Poly%fun%1. (mk_fun (%%lambda%%0 (%I number_of_nodes!)))) (Poly%fun%1. (mk_fun (%%lambda%%1 (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready)))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$) (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$)))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize.? DT&. DT& post! number_of_nodes!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::init_by")
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Config./initialize_ ((c lib!spec.unbounded_log.UnboundedLog.Config.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Config./initialize) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.init_by.) (forall ((DT&. Dcr) (DT& Type) (post! Poly) (step! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.init_by.? DT&. DT& post! step!) (and (is-lib!spec.unbounded_log.UnboundedLog.Config./initialize_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Config. step!)) (let ((number_of_nodes$ (lib!spec.unbounded_log.UnboundedLog.Config./initialize/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Config. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize.? DT&. DT& post! (I number_of_nodes$))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.init_by.? DT&. DT& post! step!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::init")
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.init.) (forall ((DT&. Dcr) (DT& Type) (post! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.init.? DT&. DT& post!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!spec.unbounded_log.UnboundedLog.Config. DT&. DT&)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.init_by.? DT&. DT& post! step$)) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.init_by.? DT&. DT& post! step$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.init.? DT&. DT& post!)) ))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::readonly_version_upper_bound_strong")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_strong.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (rid! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_strong.? DT&. DT& pre! post! rid!) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$) rid!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (and (is-lib!spec.unbounded_log.ReadonlyState./Init_ tmp%%$) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) true)))) (and (let ((op$ (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (ite (is-lib!spec.unbounded_log.ReadonlyState./Init_ tmp%%$) (let ((op$2 (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) op$2) (vstd!pervasive.arbitrary.? (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)))))) (let ((update_tmp_local_reads$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$1) rid!)) (let ((update_tmp_local_reads$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$1 rid! (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound op$ (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))))))))) (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$2))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$) (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$)))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_strong.? DT&. DT& pre! post! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::readonly_ready_to_read_strong")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_strong.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (rid! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_strong.? DT&. DT& pre! post! rid! node_id!) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$) rid!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (and (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ tmp%%$) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (ite (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ tmp%%$2) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$2))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$2))))) (tuple%2./tuple%2 op$ (I version_upper_bound$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) $ NAT))))))) (let ((op$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((version_upper_bound$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_local_reads$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) node_id!) (let ((local_head$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (and (>= local_head$ version_upper_bound$) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$1) rid!)) (let ((update_tmp_local_reads$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$1 rid! (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./ReadyToRead op$ (%I (I version_upper_bound$)) (%I node_id!)))))) (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$2)))))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$) (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$)))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_strong.? DT&. DT& pre! post! rid! node_id!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_pair")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_pair.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_pair.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k!) v!))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::readonly_apply_strong")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_strong.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (rid! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_strong.? DT&. DT& pre! post! rid!) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$) rid!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (and (is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ tmp%%$) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) (let ((node_id$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) true)))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (ite (is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ tmp%%$2) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$2))))) (let ((node_id$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$2))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$2))))) (tuple%3./tuple%3 op$ (I node_id$) (I version_upper_bound$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) $ NAT $ NAT))))))) (let ((op$ (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$))))) (let ((node_id$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((version_upper_bound$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((update_tmp_local_reads$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!))) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) (I node_id$) (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready)) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$) (I node_id$)) (let ((state$ (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ (I node_id$)))) (let ((ret$ (lib!Dispatch.dispatch_spec.? DT&. DT& state$ op$))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$1) rid!)) (let ((update_tmp_local_reads$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$1 rid! (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Done op$ (%I (I version_upper_bound$)) (%I (I node_id$)) ret$))))) (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$2)))))))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$) (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$)))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_strong.? DT&. DT& pre! post! rid!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::update_place_ops_in_log_one_strong")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_strong.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly) (rid! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_strong.? DT&. DT& pre! post! node_id! rid!) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))) (and (let ((queued_ops$ (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$2 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$2) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$) rid!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!)))) (and (is-lib!spec.unbounded_log.UpdateState./Init_ tmp%%$) (let ((op$ (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) true)))) (let ((op$ (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!)))) (ite (is-lib!spec.unbounded_log.UpdateState./Init_ tmp%%$) (let ((op$2 (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) op$2) (vstd!pervasive.arbitrary.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))))) (let ((update_tmp_local_updates$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!))) (let ((update_tmp_tail$ (nClip (Add (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) 1)))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))))) (let ((update_tmp_log$1 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$ (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))) (Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry./LogEntry op$ (%I node_id!)))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$1) rid!)) (let ((update_tmp_local_updates$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$1 rid! (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Placed op$ (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))))))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!)) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Placed (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.push.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) rid!)))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$2) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$1) (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$)))))))))))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$) (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$)))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_strong.? DT&. DT& pre! post! node_id! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::update_done_strong")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_strong.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (rid! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_strong.? DT&. DT& pre! post! rid!) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$) rid!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!)))) (and (is-lib!spec.unbounded_log.UpdateState./Applied_ tmp%%$) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!)))) (ite (is-lib!spec.unbounded_log.UpdateState./Applied_ tmp%%$2) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$2))))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$2))))) (tuple%2./tuple%2 ret$ (I idx$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ NAT))))))) (let ((ret$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_local_updates$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!))) (and (> (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) idx$) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$1) rid!)) (let ((update_tmp_local_updates$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$1 rid! (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Done ret$ (%I (I idx$))))))) (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$2)))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$) (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$)))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_strong.? DT&. DT& pre! post! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_trivial_start_strong")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_strong.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id! (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready)) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!)) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Placed (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.empty.? $ NAT)))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$) (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$))))))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_strong.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_load_local_version_strong")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_strong.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))) (and (let ((queued_ops$ (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$2 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$2) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) node_id!) (let ((lversion$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!)) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I lversion$)))))))) (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$) (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$)))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_strong.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_load_global_head_strong")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_strong.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((lversion$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!)) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I lversion$)) (%I (I 0)) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))))))))) (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$) (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$)))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_strong.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_local_strong")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_strong.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$) node_id!) (let ((old_nr_state$ (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ node_id!))) (let ((update_tmp_replicas$1 (vstd!map.impl&%0.remove.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ node_id!))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$) (I rid$)) (let ((local_update$ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ (I rid$))))) (let ((update_tmp_local_updates$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ (I rid$)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$) (I lversion$)) (let ((log_entry$ (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$ (I lversion$))))) (and (< lversion$ tail$) (and (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))) (%I node_id!)) (let ((tmp%%$3 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$3))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$3))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$1) (I rid$))) (let ((update_tmp_local_updates$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$1 (I rid$) (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Applied ret$ (%I (I lversion$))))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$1) node_id!)) (let ((update_tmp_replicas$2 (vstd!map.impl&%0.insert.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$1 node_id! new_nr_state$))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!)) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I (nClip (Add lversion$ 1)))) (%I (I (nClip (Add idx$ 1)))) (%I (I tail$)))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$2) (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$2))))))))))))))))))))))))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$) (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$)))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_strong.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_remote_strong")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_strong.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$) node_id!) (let ((old_nr_state$ (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ node_id!))) (let ((update_tmp_replicas$1 (vstd!map.impl&%0.remove.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ node_id!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$) (I lversion$)) (let ((log_entry$ (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$ (I lversion$))))) (and (< lversion$ tail$) (and (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))) (%I node_id!))) (let ((tmp%%$3 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$3))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$3))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$1) node_id!)) (let ((update_tmp_replicas$2 (vstd!map.impl&%0.insert.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$1 node_id! new_nr_state$))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!)) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I (nClip (Add lversion$ 1)))) (%I (I idx$)) (%I (I tail$)))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2) (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$2)))))))))))))))))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$) (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_strong.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_update_version_upper_bound_strong")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_strong.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (= lversion$ tail$) (let ((update_tmp_version_upper_bound$ (ite (>= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) tail$) (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) tail$))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!)) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./UpdatedVersion (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I tail$)))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2) (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$)))))))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$) (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$)))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_strong.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_finish_strong")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_strong.))
(define-fun is-lib!spec.unbounded_log.CombinerState./UpdatedVersion_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./UpdatedVersion) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./UpdatedVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./UpdatedVersion_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I tail$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tail$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) node_id!) (let ((old_local_head$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (let ((update_tmp_local_versions$1 (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.remove.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$1)) node_id!)) (let ((update_tmp_local_versions$2 (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.insert.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$1) node_id! (I tail$))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!)) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2) (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$2))))))))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$) (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_strong.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_finish_no_change_strong")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_strong.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_strong.? DT&. DT& pre! post! node_id!) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((lversion$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (= lversion$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))) (and (= (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$)) 0) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!)) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready))))) (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2))))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$) (and (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$) (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$)))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_strong.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::next_strong_by")
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound_ ((c lib!spec.unbounded_log.UnboundedLog.Step.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound) c))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read_ ((c lib!spec.unbounded_log.UnboundedLog.Step.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read) c))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply_ ((c lib!spec.unbounded_log.UnboundedLog.Step.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply) c))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one_ ((c lib!spec.unbounded_log.UnboundedLog.Step.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one) c))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Step./update_done_ ((c lib!spec.unbounded_log.UnboundedLog.Step.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Step./update_done) c))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start_ ((c lib!spec.unbounded_log.UnboundedLog.Step.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start) c))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version_ ((c lib!spec.unbounded_log.UnboundedLog.Step.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version) c))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head_ ((c lib!spec.unbounded_log.UnboundedLog.Step.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head) c))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local_ ((c lib!spec.unbounded_log.UnboundedLog.Step.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local) c))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote_ ((c lib!spec.unbounded_log.UnboundedLog.Step.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote) c))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound_ ((c lib!spec.unbounded_log.UnboundedLog.Step.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound) c))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_ ((c lib!spec.unbounded_log.UnboundedLog.Step.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Step./exec_finish) c))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change_ ((c lib!spec.unbounded_log.UnboundedLog.Step.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong_by.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (step! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong_by.? DT&. DT& pre! post! step!) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((rid$ (lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_strong.? DT&. DT& pre! post! (I rid$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((rid$ (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/1 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_strong.? DT&. DT& pre! post! (I rid$) (I node_id$)))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((rid$ (lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_strong.? DT&. DT& pre! post! (I rid$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (let ((rid$ (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/1 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_strong.? DT&. DT& pre! post! (I node_id$) (I rid$)))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./update_done_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((rid$ (lib!spec.unbounded_log.UnboundedLog.Step./update_done/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_strong.? DT&. DT& pre! post! (I rid$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_strong.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_strong.? DT&. DT& pre! post! (I node_id$))) (and (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_strong.? DT&. DT& pre! post! (I node_id$))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong_by.? DT&. DT& pre! post! step!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::next_strong")
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong.? DT&. DT& pre! post!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong_by.? DT&. DT& pre! post! step$)) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong_by.? DT&. DT& pre! post! step$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.next_strong.? DT&. DT& pre! post!)) ))))
(set-info :comment ";; Function-Axioms lib::add_ticket")
(assert (fuel_bool_default fuel%lib!add_ticket.))
(define-fun is-lib!InputOperation./Read_ ((c lib!InputOperation.)) Bool ((_ is lib!InputOperation./Read) c))
(assert (=> (fuel_bool fuel%lib!add_ticket.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (input! Poly) (rid! Poly)) (! (= (lib!add_ticket.? DT&. DT& pre! post! input! rid!) (and (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))) rid!)) (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))) rid!))) (ite (is-lib!InputOperation./Read_ (%Poly%lib!InputOperation. input!)) (let ((read_op$ (lib!InputOperation./Read/0 (%Poly%lib!InputOperation. input!)))) (= (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (lib!spec.unbounded_log.UnboundedLog.State./State (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid! (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Init read_op$))) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))))))) (let ((write_op$ (lib!InputOperation./Write/0 (%Poly%lib!InputOperation. input!)))) (= (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (lib!spec.unbounded_log.UnboundedLog.State./State (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid! (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Init write_op$))) (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))))))))) :pattern ((lib!add_ticket.? DT&. DT& pre! post! input! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::consume_stub")
(assert (fuel_bool_default fuel%lib!consume_stub.))
(define-fun is-lib!OutputOperation./Read_ ((c lib!OutputOperation.)) Bool ((_ is lib!OutputOperation./Read) c))
(assert (=> (fuel_bool fuel%lib!consume_stub.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (output! Poly) (rid! Poly)) (! (= (lib!consume_stub.? DT&. DT& pre! post! output! rid!) (ite (is-lib!OutputOperation./Read_ (%Poly%lib!OutputOperation. output!)) (let ((response$ (lib!OutputOperation./Read/0 (%Poly%lib!OutputOperation. output!)))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))) rid!) (is-lib!spec.unbounded_log.ReadonlyState./Done_ (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid!)))) (= (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid!))) response$)) (= (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (lib!spec.unbounded_log.UnboundedLog.State./State (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid!) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))))))) (let ((response$ (lib!OutputOperation./Write/0 (%Poly%lib!OutputOperation. output!)))) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))) rid!) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid!)))) (= (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid!))) response$)) (= (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (lib!spec.unbounded_log.UnboundedLog.State./State (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) rid!) (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))))))))) :pattern ((lib!consume_stub.? DT&. DT& pre! post! output! rid!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%13 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%14 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::layout::size_of")
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.size_of.? V&. V&)) :pattern ((vstd!layout.size_of.? V&. V&)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%15 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%16 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%17 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%18 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%19 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%20 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%21 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%22 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%23 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%24 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%25 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%26 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%27 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%28 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%29 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%30 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%31 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%32 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%33 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%34 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%35 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::filter")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (has_type (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$)) ))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!)) ))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::filter_lemma_broadcast")
(declare-fun ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. (Dcr Type Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A&. A& self! pred!) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!))))) (and (%B (%%apply%%0 pred! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$))) (vstd!seq_lib.impl&%0.contains.? A&. A& self! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 pred! (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) (vstd!seq.Seq.index.? A&. A& self! i$))) )) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!))) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A&. A& self! pred!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::filter_lemma_broadcast")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (and (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)))) (and (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))) (vstd!seq_lib.impl&%0.contains.? A&. A& self! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$))) ))) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!))) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::filter_distributes_over_add_broacast")
(declare-fun ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. (Dcr Type Poly Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (pred! %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A&. A& a! b! pred!) (= (vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) (Poly%fun%1. pred!)) (vstd!seq.Seq.add.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& a! (Poly%fun%1. pred!)) (vstd!seq_lib.impl&%0.filter.? A&. A& b! (Poly%fun%1. pred!))))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A&. A& a! b! pred!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::filter_distributes_over_add_broacast")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (pred! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (= (vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!) (vstd!seq.Seq.add.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& a! pred!) (vstd!seq_lib.impl&%0.filter.? A&. A& b! pred!)))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_set")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%2 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%2 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::seq_to_set_is_finite_broadcast")
(declare-fun ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (= (ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A&. A& seq!) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A&. A& seq!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::seq_to_set_is_finite_broadcast")
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%36 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%37 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%38 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%39 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%40 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%41 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%42 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%43 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%44 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%45 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%46 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%47 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%48 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%49 Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%49 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%50 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%51 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%52 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::readonly_version_upper_bound")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (rid! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound.? DT&. DT& pre! post! rid!) (let ((tmp_assert$ true)) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$) rid!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (and (is-lib!spec.unbounded_log.ReadonlyState./Init_ tmp%%$) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) true)))) (and (let ((op$ (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (ite (is-lib!spec.unbounded_log.ReadonlyState./Init_ tmp%%$) (let ((op$2 (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) op$2) (vstd!pervasive.arbitrary.? (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)))))) (let ((update_tmp_local_reads$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$1) rid!))))) (let ((update_tmp_local_reads$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$1 rid! (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound op$ (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))))))))) (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$2)))))) (let ((tmp_assert$2 (let ((op$ (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (ite (is-lib!spec.unbounded_log.ReadonlyState./Init_ tmp%%$) (let ((op$4 (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) op$4) (vstd!pervasive.arbitrary.? (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)))))) (let ((update_tmp_local_reads$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!))) (let ((tmp_assert$3 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$3) rid!))))) (let ((update_tmp_local_reads$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$3 rid! (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound op$ (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))))))))) tmp_assert$3)))))) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$)) (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$))))))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound.? DT&. DT& pre! post! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::readonly_ready_to_read")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (rid! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read.? DT&. DT& pre! post! rid! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$) rid!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (and (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ tmp%%$) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (ite (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ tmp%%$2) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$2))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$2))))) (tuple%2./tuple%2 op$ (I version_upper_bound$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) $ NAT))))))) (let ((op$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((version_upper_bound$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_local_reads$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) node_id!)) (let ((local_head$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (and (=> tmp_assert$ (>= local_head$ version_upper_bound$)) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$1) rid!))))) (let ((update_tmp_local_reads$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$1 rid! (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./ReadyToRead op$ (%I (I version_upper_bound$)) (%I node_id!)))))) (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$2))))))))))) (let ((tmp_assert$2 (let ((tmp%%$ (let ((tmp%%$4 (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (ite (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ tmp%%$4) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$4))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$4))))) (tuple%2./tuple%2 op$ (I version_upper_bound$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) $ NAT))))))) (let ((op$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((version_upper_bound$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_local_reads$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!))) (let ((tmp_assert$3 (let ((local_head$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (let ((tmp_assert$4 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$3) rid!))))) (let ((update_tmp_local_reads$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$3 rid! (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./ReadyToRead op$ (%I (I version_upper_bound$)) (%I node_id!)))))) tmp_assert$4))))) tmp_assert$3))))))) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$)) (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$))))))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read.? DT&. DT& pre! post! rid! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::readonly_apply")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (rid! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply.? DT&. DT& pre! post! rid!) (let ((tmp_assert$ true)) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$) rid!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (and (is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ tmp%%$) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) (let ((node_id$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) true)))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (ite (is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ tmp%%$2) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$2))))) (let ((node_id$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$2))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$2))))) (tuple%3./tuple%3 op$ (I node_id$) (I version_upper_bound$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) $ NAT $ NAT))))))) (let ((op$ (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$))))) (let ((node_id$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((version_upper_bound$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((update_tmp_local_reads$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!))) (and (=> tmp_assert$ (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) (I node_id$) (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$) (I node_id$))) (let ((state$ (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ (I node_id$)))) (let ((ret$ (lib!Dispatch.dispatch_spec.? DT&. DT& state$ op$))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$1) rid!))))) (let ((update_tmp_local_reads$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$1 rid! (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Done op$ (%I (I version_upper_bound$)) (%I (I node_id$)) ret$))))) (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$2))))))))))))) (let ((tmp_assert$2 (let ((tmp%%$ (let ((tmp%%$4 (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (ite (is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ tmp%%$4) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$4))))) (let ((node_id$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$4))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$4))))) (tuple%3./tuple%3 op$ (I node_id$) (I version_upper_bound$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) $ NAT $ NAT))))))) (let ((op$ (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$))))) (let ((node_id$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((version_upper_bound$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((update_tmp_local_reads$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!))) (let ((tmp_assert$3 (let ((state$ (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ (I node_id$)))) (let ((tmp_assert$4 (let ((ret$ (lib!Dispatch.dispatch_spec.? DT&. DT& state$ op$))) (let ((tmp_assert$5 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$3) rid!))))) (let ((update_tmp_local_reads$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$3 rid! (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Done op$ (%I (I version_upper_bound$)) (%I (I node_id$)) ret$))))) tmp_assert$5))))) tmp_assert$4)))) tmp_assert$3)))))))) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$)) (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$))))))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply.? DT&. DT& pre! post! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::update_place_ops_in_log_one")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly) (rid! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one.? DT&. DT& pre! post! node_id! rid!) (let ((tmp_assert$ true)) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))) (and (let ((queued_ops$ (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$2 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$2) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (=> tmp_assert$ (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$) rid!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!)))) (and (is-lib!spec.unbounded_log.UpdateState./Init_ tmp%%$) (let ((op$ (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) true))))) (let ((op$ (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!)))) (ite (is-lib!spec.unbounded_log.UpdateState./Init_ tmp%%$) (let ((op$2 (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) op$2) (vstd!pervasive.arbitrary.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))))) (let ((update_tmp_local_updates$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!))) (let ((update_tmp_tail$ (nClip (Add (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) 1)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))))))) (let ((update_tmp_log$1 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$ (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))) (Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry./LogEntry op$ (%I node_id!)))))) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$1) rid!))))) (let ((update_tmp_local_updates$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$1 rid! (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Placed op$ (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))))))))) (let ((tmp_assert$3 (and tmp_assert$2 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!))))) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Placed (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.push.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) rid!)))))))) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$2)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$1)) (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$))))))))))))))))) (let ((tmp_assert$4 (let ((queued_ops$ (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$4 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$4) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (let ((update_tmp_combiner$3 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (let ((tmp_assert$5 (let ((op$ (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!)))) (ite (is-lib!spec.unbounded_log.UpdateState./Init_ tmp%%$) (let ((op$4 (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) op$4) (vstd!pervasive.arbitrary.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))))) (let ((update_tmp_local_updates$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!))) (let ((update_tmp_tail$ (nClip (Add (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) 1)))) (let ((tmp_assert$6 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$) (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))))))) (let ((update_tmp_log$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$ (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))) (Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry./LogEntry op$ (%I node_id!)))))) (let ((tmp_assert$7 (and tmp_assert$6 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$3) rid!))))) (let ((update_tmp_local_updates$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$3 rid! (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Placed op$ (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))))))))) (let ((tmp_assert$8 (and tmp_assert$7 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3)) node_id!))))) (let ((update_tmp_combiner$4 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Placed (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.push.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) rid!)))))))) tmp_assert$8))))))))))) tmp_assert$5))))) (and (=> tmp_assert$4 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$)) (and (=> tmp_assert$4 (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$)) (and (=> tmp_assert$4 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$4 (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$)) (=> tmp_assert$4 (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one.? DT&. DT& pre! post! node_id! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::update_done")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (rid! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done.? DT&. DT& pre! post! rid!) (let ((tmp_assert$ true)) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$) rid!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!)))) (and (is-lib!spec.unbounded_log.UpdateState./Applied_ tmp%%$) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!)))) (ite (is-lib!spec.unbounded_log.UpdateState./Applied_ tmp%%$2) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$2))))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$2))))) (tuple%2./tuple%2 ret$ (I idx$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ NAT))))))) (let ((ret$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_local_updates$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!))) (and (=> tmp_assert$ (> (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) idx$)) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$1) rid!))))) (let ((update_tmp_local_updates$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$1 rid! (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Done ret$ (%I (I idx$))))))) (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$2))))))))) (let ((tmp_assert$2 (let ((tmp%%$ (let ((tmp%%$4 (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!)))) (ite (is-lib!spec.unbounded_log.UpdateState./Applied_ tmp%%$4) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$4))))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$4))))) (tuple%2./tuple%2 ret$ (I idx$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ NAT))))))) (let ((ret$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_local_updates$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!))) (let ((tmp_assert$3 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$3) rid!))))) (let ((update_tmp_local_updates$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$3 rid! (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Done ret$ (%I (I idx$))))))) tmp_assert$3)))))))) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$)) (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$))))))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done.? DT&. DT& pre! post! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_trivial_start")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id! (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready)) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!))))) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Placed (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.empty.? $ NAT)))))))) (and (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2)) (and (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$)) (and (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$)) (and (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$)) (and (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$)) (and (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$)) (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$))))))))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_load_local_version")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))) (and (let ((queued_ops$ (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$2 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$2) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) node_id!)) (let ((lversion$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!))))) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I lversion$)))))))) (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2)))))))) (let ((tmp_assert$2 (let ((queued_ops$ (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$4 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$4) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (let ((update_tmp_combiner$3 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (let ((tmp_assert$3 (let ((lversion$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (let ((tmp_assert$4 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3)) node_id!))))) (let ((update_tmp_combiner$4 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I lversion$)))))))) tmp_assert$4))))) tmp_assert$3))))) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$)) (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$))))))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_load_global_head")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((lversion$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!))))) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I lversion$)) (%I (I 0)) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))))))))) (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2)))))))) (let ((tmp_assert$2 (let ((tmp%%$ (let ((tmp%%$4 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$4) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((lversion$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$3 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (let ((tmp_assert$3 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3)) node_id!))))) (let ((update_tmp_combiner$4 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I lversion$)) (%I (I 0)) (%I (I (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))))))))) tmp_assert$3)))))))) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$)) (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$))))))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_local")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$) node_id!)) (let ((old_nr_state$ (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ node_id!))) (let ((update_tmp_replicas$1 (vstd!map.impl&%0.remove.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ node_id!))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$) (I rid$))) (let ((local_update$ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ (I rid$))))) (let ((update_tmp_local_updates$1 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ (I rid$)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$) (I lversion$))) (let ((log_entry$ (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$ (I lversion$))))) (and (=> tmp_assert$ (< lversion$ tail$)) (and (=> tmp_assert$ (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))) (%I node_id!))) (let ((tmp%%$3 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$3))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$3))))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$1) (I rid$)))))) (let ((update_tmp_local_updates$2 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$1 (I rid$) (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Applied ret$ (%I (I lversion$))))))) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$1) node_id!))))) (let ((update_tmp_replicas$2 (vstd!map.impl&%0.insert.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$1 node_id! new_nr_state$))) (let ((tmp_assert$3 (and tmp_assert$2 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!))))) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I (nClip (Add lversion$ 1)))) (%I (I (nClip (Add idx$ 1)))) (%I (I tail$)))))))) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$2)) (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$2)))))))))))))))))))))))))))))) (let ((tmp_assert$4 (let ((tmp%%$ (let ((tmp%%$5 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$5) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$5))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$5))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$5))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$5))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((update_tmp_combiner$3 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (let ((tmp_assert$5 (let ((old_nr_state$ (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ node_id!))) (let ((update_tmp_replicas$3 (vstd!map.impl&%0.remove.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ node_id!))) (let ((tmp_assert$6 (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (let ((tmp_assert$7 (let ((local_update$ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ (I rid$))))) (let ((update_tmp_local_updates$3 (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ (I rid$)))) (let ((tmp_assert$8 (let ((log_entry$ (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$ (I lversion$))))) (let ((tmp_assert$9 (let ((tmp%%$6 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$6))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$6))))) (let ((tmp_assert$10 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$3) (I rid$)))))) (let ((update_tmp_local_updates$4 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$3 (I rid$) (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Applied ret$ (%I (I lversion$))))))) (let ((tmp_assert$11 (and tmp_assert$10 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$3) node_id!))))) (let ((update_tmp_replicas$4 (vstd!map.impl&%0.insert.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$3 node_id! new_nr_state$))) (let ((tmp_assert$12 (and tmp_assert$11 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3)) node_id!))))) (let ((update_tmp_combiner$4 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I (nClip (Add lversion$ 1)))) (%I (I (nClip (Add idx$ 1)))) (%I (I tail$)))))))) tmp_assert$12))))))))))) tmp_assert$9)))) tmp_assert$8))))) tmp_assert$7)))) tmp_assert$6))))) tmp_assert$5))))))))) (and (=> tmp_assert$4 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$)) (and (=> tmp_assert$4 (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$)) (and (=> tmp_assert$4 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$4 (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$4 (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$)) (=> tmp_assert$4 (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$))))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_remote")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$) node_id!)) (let ((old_nr_state$ (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ node_id!))) (let ((update_tmp_replicas$1 (vstd!map.impl&%0.remove.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ node_id!))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$) (I lversion$))) (let ((log_entry$ (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$ (I lversion$))))) (and (=> tmp_assert$ (< lversion$ tail$)) (and (=> tmp_assert$ (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))) (%I node_id!)))) (let ((tmp%%$3 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$3))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$3))))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$1) node_id!))))) (let ((update_tmp_replicas$2 (vstd!map.impl&%0.insert.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$1 node_id! new_nr_state$))) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!))))) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I (nClip (Add lversion$ 1)))) (%I (I idx$)) (%I (I tail$)))))))) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2)) (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$2))))))))))))))))))))))) (let ((tmp_assert$3 (let ((tmp%%$ (let ((tmp%%$5 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$5) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$5))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$5))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$5))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$5))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((update_tmp_combiner$3 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (let ((tmp_assert$4 (let ((old_nr_state$ (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ node_id!))) (let ((update_tmp_replicas$3 (vstd!map.impl&%0.remove.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ node_id!))) (let ((tmp_assert$5 (let ((log_entry$ (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$ (I lversion$))))) (let ((tmp_assert$6 (let ((tmp%%$6 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$6))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$6))))) (let ((tmp_assert$7 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$3) node_id!))))) (let ((update_tmp_replicas$4 (vstd!map.impl&%0.insert.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$3 node_id! new_nr_state$))) (let ((tmp_assert$8 (and tmp_assert$7 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3)) node_id!))))) (let ((update_tmp_combiner$4 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I (nClip (Add lversion$ 1)))) (%I (I idx$)) (%I (I tail$)))))))) tmp_assert$8))))))))) tmp_assert$6)))) tmp_assert$5))))) tmp_assert$4))))))))) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$)) (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$)))))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_update_version_upper_bound")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (=> tmp_assert$ (= lversion$ tail$)) (let ((update_tmp_version_upper_bound$ (ite (>= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) tail$) (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) tail$))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!))))) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./UpdatedVersion (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I tail$)))))))) (and (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2)) (=> tmp_assert$1 (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$))))))))))))) (let ((tmp_assert$2 (let ((tmp%%$ (let ((tmp%%$4 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$4) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((update_tmp_combiner$3 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (let ((update_tmp_version_upper_bound$ (ite (>= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) tail$) (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) tail$))) (let ((tmp_assert$3 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3)) node_id!))))) (let ((update_tmp_combiner$4 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3) node_id! (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./UpdatedVersion (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I tail$)))))))) tmp_assert$3))))))))))) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$)) (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$))))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_finish")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./UpdatedVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./UpdatedVersion_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I tail$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tail$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) node_id!)) (let ((old_local_head$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (let ((update_tmp_local_versions$1 (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.remove.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$1)) node_id!))))) (let ((update_tmp_local_versions$2 (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.insert.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$1) node_id! (I tail$))))) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!))))) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready))))) (and (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2)) (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$2)))))))))))))) (let ((tmp_assert$3 (let ((tmp%%$ (let ((tmp%%$4 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./UpdatedVersion_ tmp%%$4) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I tail$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tail$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$3 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (let ((tmp_assert$4 (let ((old_local_head$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (let ((update_tmp_local_versions$3 (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.remove.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (let ((tmp_assert$5 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$3)) node_id!))))) (let ((update_tmp_local_versions$4 (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.insert.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$3) node_id! (I tail$))))) (let ((tmp_assert$6 (and tmp_assert$5 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3)) node_id!))))) (let ((update_tmp_combiner$4 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3) node_id! (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready))))) tmp_assert$6)))))))) tmp_assert$4))))))) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$)) (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$)))))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_finish_no_change")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change.? DT&. DT& pre! post! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_num_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_tail$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_version_upper_bound$ (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((lversion$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (=> tmp_assert$ (= lversion$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((tmp_assert$1 (and tmp_assert$ (= (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$)) 0)))) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1)) node_id!))))) (let ((update_tmp_combiner$2 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$1) node_id! (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready))))) (=> tmp_assert$2 (= (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_combiner$2)))))))))) (let ((tmp_assert$3 (let ((tmp%%$ (let ((tmp%%$4 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$4) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((lversion$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_combiner$3 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (let ((tmp_assert$4 (and tmp_assert$ (= (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$)) 0)))) (let ((tmp_assert$5 (and tmp_assert$4 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3)) node_id!))))) (let ((update_tmp_combiner$4 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$3) node_id! (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready))))) tmp_assert$5))))))))) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_updates$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_reads$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_version_upper_bound$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_local_versions$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_replicas$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_tail$)) (and (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_log$)) (=> tmp_assert$3 (= (lib!spec.unbounded_log.UnboundedLog.State./State/num_replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)) update_tmp_num_replicas$))))))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change.? DT&. DT& pre! post! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::next_by")
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.next_by.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (step! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.next_by.? DT&. DT& pre! post! step!) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((rid$ (lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound.? DT&. DT& pre! post! (I rid$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((rid$ (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/1 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read.? DT&. DT& pre! post! (I rid$) (I node_id$)))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((rid$ (lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply.? DT&. DT& pre! post! (I rid$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (let ((rid$ (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/1 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one.? DT&. DT& pre! post! (I node_id$) (I rid$)))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./update_done_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((rid$ (lib!spec.unbounded_log.UnboundedLog.Step./update_done/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done.? DT&. DT& pre! post! (I rid$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound.? DT&. DT& pre! post! (I node_id$))) (ite (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish.? DT&. DT& pre! post! (I node_id$))) (and (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)) (let ((node_id$ (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. step!)))) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change.? DT&. DT& pre! post! (I node_id$))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.next_by.? DT&. DT& pre! post! step!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::next")
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.next.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.next.? DT&. DT& pre! post!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.next_by.? DT&. DT& pre! post! step$)) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.next_by.? DT&. DT& pre! post! step$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.next.? DT&. DT& pre! post!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::log::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.log_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::log::arbitrary")
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%4.arbitrary. (Dcr Type lib!spec.unbounded_log.UnboundedLog.log.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (%return! lib!spec.unbounded_log.UnboundedLog.log.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%4.arbitrary. DT&. DT& %return!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.log. %return!) (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%4.arbitrary. DT&. DT& %return!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::tail::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.tail_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::tail::arbitrary")
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%5.arbitrary. (Dcr Type lib!spec.unbounded_log.UnboundedLog.tail.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (%return! lib!spec.unbounded_log.UnboundedLog.tail.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%5.arbitrary. DT&. DT& %return!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.tail. %return!) (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%5.arbitrary. DT&. DT& %return!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::replicas::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::replicas::arbitrary")
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%6.arbitrary. (Dcr Type lib!spec.unbounded_log.UnboundedLog.replicas.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (%return! lib!spec.unbounded_log.UnboundedLog.replicas.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%6.arbitrary. DT&. DT& %return!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. %return!) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%6.arbitrary. DT&. DT& %return!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_versions::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::local_versions::arbitrary")
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%7.arbitrary. (Dcr Type lib!spec.unbounded_log.UnboundedLog.local_versions.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (%return! lib!spec.unbounded_log.UnboundedLog.local_versions.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%7.arbitrary. DT&. DT& %return!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. %return!) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%7.arbitrary. DT&. DT& %return!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::version_upper_bound::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::version_upper_bound::arbitrary")
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%8.arbitrary. (Dcr Type lib!spec.unbounded_log.UnboundedLog.version_upper_bound.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (%return! lib!spec.unbounded_log.UnboundedLog.version_upper_bound.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%8.arbitrary. DT&. DT& %return!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. %return!) (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%8.arbitrary. DT&. DT& %return!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::local_reads::arbitrary")
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%9.arbitrary. (Dcr Type lib!spec.unbounded_log.UnboundedLog.local_reads.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (%return! lib!spec.unbounded_log.UnboundedLog.local_reads.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%9.arbitrary. DT&. DT& %return!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. %return!) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%9.arbitrary. DT&. DT& %return!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::local_updates::arbitrary")
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%10.arbitrary. (Dcr Type lib!spec.unbounded_log.UnboundedLog.local_updates.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (%return! lib!spec.unbounded_log.UnboundedLog.local_updates.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%10.arbitrary. DT&. DT& %return!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. %return!) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%10.arbitrary. DT&. DT& %return!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::combiner::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::combiner::arbitrary")
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%11.arbitrary. (Dcr Type lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (%return! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%11.arbitrary. DT&. DT& %return!) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. %return!) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%11.arbitrary. DT&. DT& %return!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::clone")
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.clone. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. lib!spec.unbounded_log.UnboundedLog.Instance.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (s! lib!spec.unbounded_log.UnboundedLog.Instance.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.clone. DT&. DT& self! s!) (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. s!) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (= self! s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.clone. DT&. DT& self! s!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Instance::num_replicas")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::lemma_msg_inv_request_ids_finite")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_request_ids_finite. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_request_ids_finite. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_request_ids_finite. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_request_ids_finite. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_request_ids_finite. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_request_ids_finite.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_request_ids_finite. DT&. DT& s!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::lemma_msg_inv_local_combiner_complete")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_combiner_complete. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_combiner_complete. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_combiner_complete. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_combiner_complete. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_combiner_complete. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_combiner_complete.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_combiner_complete. DT&. DT& s!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::lemma_msg_combiner_local_versions_domains")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_local_versions_domains. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_local_versions_domains. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_local_versions_domains. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_local_versions_domains. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_local_versions_domains. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_local_versions_domains.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_local_versions_domains. DT&. DT& s!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::lemma_msg_combiner_replicas_domains")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_replicas_domains. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_replicas_domains. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_replicas_domains. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_replicas_domains. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_replicas_domains. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_replicas_domains.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_replicas_domains. DT&. DT& s!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::lemma_msg_inv_version_in_range")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_version_in_range. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_version_in_range. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_version_in_range. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_version_in_range. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_version_in_range. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_version_in_range.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_version_in_range. DT&. DT& s!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::lemma_msg_inv_local_version_upper_bound_heads")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_version_upper_bound_heads. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_version_upper_bound_heads. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_version_upper_bound_heads. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_version_upper_bound_heads. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_version_upper_bound_heads. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_version_upper_bound_heads.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_version_upper_bound_heads. DT&. DT& s!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::lemma_msg_inv_readonly_requests_wf")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_readonly_requests_wf. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_readonly_requests_wf. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_readonly_requests_wf. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_readonly_requests_wf. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_readonly_requests_wf. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_readonly_requests_wf.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_readonly_requests_wf. DT&. DT& s!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::lemma_msg_combiner_states_wf")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_states_wf. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_states_wf. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_states_wf. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_states_wf. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_states_wf. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.combiner_states_wf.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_states_wf. DT&. DT& s!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::lemma_msg_inv_log_complete")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_log_complete. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_log_complete. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_log_complete. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_log_complete. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_log_complete. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_log_complete.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_log_complete. DT&. DT& s!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::lemma_msg_inv_local_updates")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_updates. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_updates. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_updates. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_updates. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_updates. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_local_updates.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_updates. DT&. DT& s!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::lemma_msg_inv_read_results")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_read_results. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_read_results. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_read_results. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_read_results. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_read_results. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_read_results.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_read_results. DT&. DT& s!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::lemma_msg_inv_update_results")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_update_results. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_update_results. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_update_results. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_update_results. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_update_results. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_update_results.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_update_results. DT&. DT& s!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::lemma_msg_inv_combiner_rids_distinct")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_combiner_rids_distinct. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_combiner_rids_distinct. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_combiner_rids_distinct. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_combiner_rids_distinct. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_combiner_rids_distinct. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.inv_combiner_rids_distinct.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_combiner_rids_distinct. DT&. DT& s!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::lemma_msg_replica_state")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_replica_state. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_replica_state. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_replica_state. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_replica_state. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.unbounded_log.UnboundedLog.State.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_replica_state. DT&. DT& s!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.replica_state.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. s!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_replica_state. DT&. DT& s!)) )))
(set-info :comment ";; Function-Specs lib::VERUS_layout_of_usize")
(declare-fun ens%lib!VERUS_layout_of_usize. () Bool)
(assert (= ens%lib!VERUS_layout_of_usize. (= (vstd!layout.size_of.? $ (UINT SZ)) 8)))
(set-info :comment ";; Broadcast lib::VERUS_layout_of_usize")
(assert (= (vstd!layout.size_of.? $ (UINT SZ)) 8))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_readonly_version_upper_bound_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_version_upper_bound_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_version_upper_bound_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_version_upper_bound_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_version_upper_bound_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_version_upper_bound_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_version_upper_bound_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_readonly_ready_to_read_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_readonly_ready_to_read_1")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_1.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_1.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/1 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_1.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_1.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_ready_to_read_1.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_readonly_apply_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_apply_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_apply_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_apply_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_apply_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_apply_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_readonly_apply_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_update_place_ops_in_log_one_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_update_place_ops_in_log_one_1")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_1.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_1.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/1 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_1.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_1.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_place_ops_in_log_one_1.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_update_done_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_done_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_done_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_done_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./update_done/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_done_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_done_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_update_done_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_trivial_start_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_trivial_start_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_trivial_start_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_trivial_start_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_trivial_start_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_trivial_start_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_trivial_start_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_load_local_version_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_local_version_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_local_version_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_local_version_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_local_version_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_local_version_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_local_version_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_load_global_head_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_global_head_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_global_head_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_global_head_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_global_head_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_global_head_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_load_global_head_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_dispatch_local_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_local_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_local_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_local_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_local_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_local_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_local_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_dispatch_remote_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_remote_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_remote_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_remote_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_remote_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_remote_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_dispatch_remote_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_update_version_upper_bound_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_update_version_upper_bound_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_update_version_upper_bound_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_update_version_upper_bound_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_update_version_upper_bound_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_update_version_upper_bound_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_update_version_upper_bound_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_finish_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_exec_finish_no_change_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_no_change_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_no_change_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_no_change_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_no_change_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_no_change_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_exec_finish_no_change_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_dummy_to_use_type_params_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_dummy_to_use_type_params_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%0.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::is_readonly_version_upper_bound")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_version_upper_bound.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_version_upper_bound.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_version_upper_bound.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_version_upper_bound.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_readonly_version_upper_bound_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_version_upper_bound_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_version_upper_bound_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_version_upper_bound_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./readonly_version_upper_bound/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_version_upper_bound_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_version_upper_bound_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_version_upper_bound_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::is_readonly_ready_to_read")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_ready_to_read.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_ready_to_read.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_ready_to_read.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_ready_to_read.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_readonly_ready_to_read_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_readonly_ready_to_read_1")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_1.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_1.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./readonly_ready_to_read/1 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_1.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_1.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_ready_to_read_1.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::is_readonly_apply")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_apply.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_apply.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_apply.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.is_readonly_apply.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_readonly_apply_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_apply_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_apply_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_apply_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./readonly_apply/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_apply_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_apply_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_readonly_apply_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::is_update_place_ops_in_log_one")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_update_place_ops_in_log_one.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_update_place_ops_in_log_one.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.is_update_place_ops_in_log_one.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.is_update_place_ops_in_log_one.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_update_place_ops_in_log_one_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_update_place_ops_in_log_one_1")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_1.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_1.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./update_place_ops_in_log_one/1 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_1.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_1.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_place_ops_in_log_one_1.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::is_update_done")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_update_done.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_update_done.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.is_update_done.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Step./update_done_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.is_update_done.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_update_done_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_done_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_done_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_done_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./update_done/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_done_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_done_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_update_done_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::is_exec_trivial_start")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_trivial_start.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_trivial_start.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_trivial_start.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_trivial_start.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_exec_trivial_start_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_trivial_start_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_trivial_start_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_trivial_start_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_trivial_start/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_trivial_start_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_trivial_start_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_trivial_start_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::is_exec_load_local_version")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_load_local_version.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_load_local_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_load_local_version.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_load_local_version.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_exec_load_local_version_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_local_version_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_local_version_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_local_version_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_local_version/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_local_version_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_local_version_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_local_version_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::is_exec_load_global_head")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_load_global_head.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_load_global_head.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_load_global_head.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_load_global_head.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_exec_load_global_head_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_global_head_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_global_head_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_global_head_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_load_global_head/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_global_head_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_global_head_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_load_global_head_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::is_exec_dispatch_local")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_dispatch_local.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_dispatch_local.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_dispatch_local.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_dispatch_local.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_exec_dispatch_local_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_local_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_local_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_local_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_local/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_local_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_local_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_local_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::is_exec_dispatch_remote")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_dispatch_remote.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_dispatch_remote.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_dispatch_remote.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_dispatch_remote.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_exec_dispatch_remote_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_remote_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_remote_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_remote_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_dispatch_remote/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_remote_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_remote_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_dispatch_remote_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::is_exec_update_version_upper_bound")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_update_version_upper_bound.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_update_version_upper_bound.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_update_version_upper_bound.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_update_version_upper_bound.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_exec_update_version_upper_bound_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_update_version_upper_bound_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_update_version_upper_bound_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_update_version_upper_bound_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_update_version_upper_bound/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_update_version_upper_bound_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_update_version_upper_bound_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_update_version_upper_bound_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::is_exec_finish")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_finish.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_finish.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_finish.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_finish.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_exec_finish_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::is_exec_finish_no_change")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_finish_no_change.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_finish_no_change.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_finish_no_change.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.is_exec_finish_no_change.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_exec_finish_no_change_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_no_change_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_no_change_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_no_change_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./exec_finish_no_change/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_no_change_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_no_change_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_exec_finish_no_change_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_dummy_to_use_type_params.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.is_dummy_to_use_type_params.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.is_dummy_to_use_type_params.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.is_dummy_to_use_type_params.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Step::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%1.get_dummy_to_use_type_params_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_dummy_to_use_type_params_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Step. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_dummy_to_use_type_params_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Step. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.impl&%1.get_dummy_to_use_type_params_0.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%1.get_dummy_to_use_type_params_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Config::arrow_initialize_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_initialize_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_initialize_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_initialize_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Config./initialize/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Config. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_initialize_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Config. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_initialize_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_initialize_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Config::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_dummy_to_use_type_params_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_dummy_to_use_type_params_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Config. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Config. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%2.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Config::is_initialize")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.is_initialize.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.is_initialize.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%3.is_initialize.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Config./initialize_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Config. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%3.is_initialize.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Config::get_initialize_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.get_initialize_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.get_initialize_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%3.get_initialize_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Config./initialize/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Config. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%3.get_initialize_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Config. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.impl&%3.get_initialize_0.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%3.get_initialize_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Config::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.is_dummy_to_use_type_params.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.is_dummy_to_use_type_params.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%3.is_dummy_to_use_type_params.? DT&. DT& self!) (is-lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params_ (%Poly%lib!spec.unbounded_log.UnboundedLog.Config. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%3.is_dummy_to_use_type_params.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::Config::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%3.get_dummy_to_use_type_params_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%3.get_dummy_to_use_type_params_0.? DT&. DT& self!) (lib!spec.unbounded_log.UnboundedLog.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.unbounded_log.UnboundedLog.Config. self!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%3.get_dummy_to_use_type_params_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.Config. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. (lib!spec.unbounded_log.UnboundedLog.impl&%3.get_dummy_to_use_type_params_0.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%3.get_dummy_to_use_type_params_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::log::map_agree")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.unbounded_log.UnboundedLog.Instance. instance!)) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) token_map! key$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree.? DT&. DT& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::log::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) m!)) (lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict.? DT&. DT& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::replicas::map_agree")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.unbounded_log.UnboundedLog.Instance. instance!)) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) token_map! key$))))) (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) m! key$))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) token_map! key$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree.? DT&. DT& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::replicas::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) m!)) (lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict.? DT&. DT& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_versions::map_agree")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.unbounded_log.UnboundedLog.Instance. instance!)) (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) token_map! key$))))) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) token_map! key$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree.? DT&. DT& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_versions::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ NAT m!)) (lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict.? DT&. DT& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_reads::map_agree")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.unbounded_log.UnboundedLog.Instance. instance!)) (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&) token_map! key$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree.? DT&. DT& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_reads::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) m!)) (lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict.? DT&. DT& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_updates::map_agree")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.unbounded_log.UnboundedLog.Instance. instance!)) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) token_map! key$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree.? DT&. DT& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_updates::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) m!)) (lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict.? DT&. DT& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::combiner::map_agree")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree.? DT&. DT& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) token_map!) key$) (and (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.unbounded_log.UnboundedLog.Instance. instance!)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) token_map! key$))))) (%I key$))) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) token_map! key$))))) (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) token_map! key$)) ))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree.? DT&. DT& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::combiner::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict.) (forall ((DT&. Dcr) (DT& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict.? DT&. DT& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&) token_map!) (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. m!)) (lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree.? DT&. DT& token_map! m! instance!))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict.? DT&. DT& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::initialize_enabled")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize_enabled.) (forall ((DT&. Dcr) (DT& Type) (number_of_nodes! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize_enabled.? DT&. DT& number_of_nodes!) (> (%I number_of_nodes!) 0)) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize_enabled.? DT&. DT& number_of_nodes!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::readonly_version_upper_bound_enabled")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (rid! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_enabled.? DT&. DT& pre! rid!) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$) rid!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (and (is-lib!spec.unbounded_log.ReadonlyState./Init_ tmp%%$) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) true)))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_enabled.? DT&. DT& pre! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::readonly_ready_to_read_enabled")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (rid! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_enabled.? DT&. DT& pre! rid! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$) rid!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (and (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ tmp%%$) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) true))))) (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (ite (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ tmp%%$2) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$2))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$2))))) (tuple%2./tuple%2 op$ (I version_upper_bound$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) $ NAT))))))) (let ((op$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((version_upper_bound$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) node_id!)) (let ((local_head$ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$) node_id!)))) (=> tmp_assert$ (>= local_head$ version_upper_bound$)))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_enabled.? DT&. DT& pre! rid! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::readonly_apply_enabled")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (rid! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_enabled.? DT&. DT& pre! rid!) (let ((tmp_assert$ true)) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_reads$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$) rid!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (and (is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ tmp%%$) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) (let ((node_id$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) true)))))) (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) update_tmp_local_reads$ rid!)))) (ite (is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ tmp%%$2) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$2))))) (let ((node_id$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$2))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$2))))) (tuple%3./tuple%3 op$ (I node_id$) (I version_upper_bound$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) $ NAT $ NAT))))))) (let ((op$ (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$))))) (let ((node_id$ (%I (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((version_upper_bound$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (and (=> tmp_assert$ (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) (I node_id$) (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready))) (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$) (I node_id$)))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_enabled.? DT&. DT& pre! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::update_place_ops_in_log_one_enabled")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly) (rid! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_enabled.? DT&. DT& pre! node_id! rid!) (let ((tmp_assert$ true)) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))) (let ((queued_ops$ (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$2 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$2) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (=> tmp_assert$ (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$) rid!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!)))) (and (is-lib!spec.unbounded_log.UpdateState./Init_ tmp%%$) (let ((op$ (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) true))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_enabled.? DT&. DT& pre! node_id! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::update_done_enabled")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (rid! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_enabled.? DT&. DT& pre! rid!) (let ((tmp_assert$ true)) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$) rid!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!)))) (and (is-lib!spec.unbounded_log.UpdateState./Applied_ tmp%%$) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) true))))) (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ rid!)))) (ite (is-lib!spec.unbounded_log.UpdateState./Applied_ tmp%%$2) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$2))))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$2))))) (tuple%2./tuple%2 ret$ (I idx$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ NAT))))))) (let ((ret$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (=> tmp_assert$ (> (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) idx$))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_enabled.? DT&. DT& pre! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_trivial_start_enabled")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_enabled.? DT&. DT& pre! node_id!) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id! (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_enabled.? DT&. DT& pre! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_load_local_version_enabled")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_enabled.? DT&. DT& pre! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))) (let ((queued_ops$ (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$2 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$2) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) node_id!)))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_enabled.? DT&. DT& pre! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_load_global_head_enabled")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_enabled.? DT&. DT& pre! node_id!) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_enabled.? DT&. DT& pre! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_local_enabled")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_enabled.? DT&. DT& pre! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_local_updates$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_updates (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))))) (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$) node_id!)) (let ((old_nr_state$ (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ node_id!))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$) (I rid$))) (let ((local_update$ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) update_tmp_local_updates$ (I rid$))))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$) (I lversion$))) (let ((log_entry$ (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$ (I lversion$))))) (and (=> tmp_assert$ (< lversion$ tail$)) (=> tmp_assert$ (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))) (%I node_id!))))))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_enabled.? DT&. DT& pre! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_remote_enabled")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_enabled.? DT&. DT& pre! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_log$ (lib!spec.unbounded_log.UnboundedLog.State./State/log (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_replicas$ (lib!spec.unbounded_log.UnboundedLog.State./State/replicas (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))))) (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$) node_id!)) (let ((old_nr_state$ (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) update_tmp_replicas$ node_id!))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$) (I lversion$))) (let ((log_entry$ (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) update_tmp_log$ (I lversion$))))) (and (=> tmp_assert$ (< lversion$ tail$)) (=> tmp_assert$ (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))) (%I node_id!)))))))))))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_enabled.? DT&. DT& pre! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_update_version_upper_bound_enabled")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_enabled.? DT&. DT& pre! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))))) (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (=> tmp_assert$ (= lversion$ tail$))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_enabled.? DT&. DT& pre! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_finish_enabled")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_enabled.? DT&. DT& pre! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_local_versions$ (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./UpdatedVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))) (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./UpdatedVersion_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I tail$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tail$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. update_tmp_local_versions$)) node_id!)))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_enabled.? DT&. DT& pre! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::State::exec_finish_no_change_enabled")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (node_id! Poly)) (! (= (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_enabled.? DT&. DT& pre! node_id!) (let ((tmp_assert$ true)) (let ((update_tmp_combiner$ (lib!spec.unbounded_log.UnboundedLog.State./State/combiner (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$)) node_id!) (let ((tmp%%$ (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (and (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))) (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. update_tmp_combiner$) node_id!)))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$2) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$2))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((lversion$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (=> tmp_assert$ (= lversion$ (lib!spec.unbounded_log.UnboundedLog.State./State/tail (%Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!))))))))))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_enabled.? DT&. DT& pre! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_Placed_queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops.? self!) (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops.? self!)) ))))
(set-info :comment ";; Function-Specs lib::spec::utils::map_new_rec")
(declare-fun req%lib!spec.utils.map_new_rec. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%53 Bool)
(assert (forall ((V&. Dcr) (V& Type) (dom! Poly) (val! Poly)) (! (= (req%lib!spec.utils.map_new_rec. V&. V& dom! val!) (=> %%global_location_label%%53 (>= (%I dom!) 0))) :pattern ((req%lib!spec.utils.map_new_rec. V&. V& dom! val!)) )))
(set-info :comment ";; Function-Axioms lib::spec::utils::map_new_rec")
(assert (fuel_bool_default fuel%lib!spec.utils.map_new_rec.))
(declare-const fuel_nat%lib!spec.utils.map_new_rec. Fuel)
(assert (forall ((V&. Dcr) (V& Type) (dom! Poly) (val! Poly) (fuel% Fuel)) (! (= (lib!spec.utils.rec%map_new_rec.? V&. V& dom! val! fuel%) (lib!spec.utils.rec%map_new_rec.? V&. V& dom! val! zero)) :pattern ((lib!spec.utils.rec%map_new_rec.? V&. V& dom! val! fuel%)) )))
(assert (forall ((V&. Dcr) (V& Type) (dom! Poly) (val! Poly) (fuel% Fuel)) (! (=> (and (has_type dom! NAT) (has_type val! V&) (>= (%I dom!) 0)) (= (lib!spec.utils.rec%map_new_rec.? V&. V& dom! val! (succ fuel%)) (ite (= (%I dom!) 0) (vstd!map.impl&%0.insert.? $ NAT V&. V& (vstd!map.impl&%0.empty.? $ NAT V&. V&) dom! val!) (vstd!map.impl&%0.insert.? $ NAT V&. V& (lib!spec.utils.rec%map_new_rec.? V&. V& (I (nClip (Sub (%I dom!) 1))) val! fuel%) dom! val!)))) :pattern ((lib!spec.utils.rec%map_new_rec.? V&. V& dom! val! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.utils.map_new_rec.) (forall ((V&. Dcr) (V& Type) (dom! Poly) (val! Poly)) (! (=> (and (has_type dom! NAT) (has_type val! V&) (>= (%I dom!) 0)) (= (lib!spec.utils.map_new_rec.? V&. V& dom! val!) (lib!spec.utils.rec%map_new_rec.? V&. V& dom! val! (succ fuel_nat%lib!spec.utils.map_new_rec.)))) :pattern ((lib!spec.utils.map_new_rec.? V&. V& dom! val!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (dom! Poly) (val! Poly)) (! (=> (and (has_type dom! NAT) (has_type val! V&)) (has_type (lib!spec.utils.map_new_rec.? V&. V& dom! val!) (TYPE%vstd!map.Map. $ NAT V&. V&))) :pattern ((lib!spec.utils.map_new_rec.? V&. V& dom! val!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_Done_version_upper_bound")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_Done_node_id")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_Done_node_id.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_Done_node_id.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_Done_node_id.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_node_id.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%0.get_Done_node_id.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_node_id.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_Loop_queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops.? self!) (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_Loop_lversion")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_Loop_lversion.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_Loop_lversion.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_Loop_lversion.? self!) (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_lversion.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%5.get_Loop_lversion.? self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_lversion.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_Loop_idx")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_Loop_idx.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_Loop_idx.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_Loop_idx.? self!) (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_idx.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%5.get_Loop_idx.? self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_idx.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_Loop_tail")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_Loop_tail.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_Loop_tail.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_Loop_tail.? self!) (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_tail.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%5.get_Loop_tail.? self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_tail.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::combiner_request_id_fresh")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.combiner_request_id_fresh.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.combiner_request_id_fresh.) (forall ((combiners! Poly) (rid! Poly)) (! (= (lib!spec.unbounded_log.combiner_request_id_fresh.? combiners! rid!) (forall ((n$ Poly)) (! (=> (has_type n$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners!) n$) (not (vstd!seq_lib.impl&%0.contains.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec.unbounded_log.impl&%7.queued_ops.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners! n$))) rid!)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners!) n$)) ))) :pattern ((lib!spec.unbounded_log.combiner_request_id_fresh.? combiners! rid!)) ))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::get_fresh_nat")
(declare-fun req%lib!spec.unbounded_log.get_fresh_nat. (Poly Poly) Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((reqs! Poly) (combiner! Poly)) (! (= (req%lib!spec.unbounded_log.get_fresh_nat. reqs! combiner!) (=> %%global_location_label%%54 (and (vstd!set.impl&%0.finite.? $ NAT reqs!) (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiner!))))) :pattern ((req%lib!spec.unbounded_log.get_fresh_nat. reqs! combiner!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::get_fresh_nat")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.get_fresh_nat.))
(declare-fun %%choose%%1 (Type Dcr Type Poly Poly Dcr Type Poly Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Poly) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Poly)) (! (=> (exists ((n$ Poly)) (! (and (has_type n$ %%hole%%0) (and (not (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 n$)) (lib!spec.unbounded_log.combiner_request_id_fresh.? %%hole%%4 n$))) :pattern ((vstd!set.impl&%0.contains.? %%hole%%5 %%hole%%6 %%hole%%7 n$)) :pattern ((lib!spec.unbounded_log.combiner_request_id_fresh.? %%hole%%8 n$)) )) (exists ((n$ Poly)) (! (and (and (has_type n$ %%hole%%0) (and (not (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 n$)) (lib!spec.unbounded_log.combiner_request_id_fresh.? %%hole%%4 n$))) (= (%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8) n$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%5 %%hole%%6 %%hole%%7 n$)) :pattern ((lib!spec.unbounded_log.combiner_request_id_fresh.? %%hole%%8 n$))))) :pattern ((%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8)))))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.get_fresh_nat.) (forall ((reqs! Poly) (combiner! Poly)) (! (= (lib!spec.unbounded_log.get_fresh_nat.? reqs! combiner!) (%I (as_type (%%choose%%1 NAT $ NAT reqs! combiner! $ NAT reqs! combiner!) NAT))) :pattern ((lib!spec.unbounded_log.get_fresh_nat.? reqs! combiner!)) ))))
(assert (forall ((reqs! Poly) (combiner! Poly)) (! (=> (and (has_type reqs! (TYPE%vstd!set.Set. $ NAT)) (has_type combiner! (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.))) (<= 0 (lib!spec.unbounded_log.get_fresh_nat.? reqs! combiner!))) :pattern ((lib!spec.unbounded_log.get_fresh_nat.? reqs! combiner!)) )))
(set-info :comment ";; Function-Specs lib::spec::utils::map_new_rec_dom_finite")
(declare-fun ens%lib!spec.utils.map_new_rec_dom_finite. (Dcr Type Int Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (dom! Int) (val! Poly)) (! (= (ens%lib!spec.utils.map_new_rec_dom_finite. V&. V& dom! val!) (and (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT V&. V& (lib!spec.utils.map_new_rec.? V&. V& (I dom!) val!))) (forall ((n$ Poly)) (! (=> (has_type n$ NAT) (= (and (<= 0 (%I n$)) (<= (%I n$) dom!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT V&. V& (lib!spec.utils.map_new_rec.? V&. V& (I dom!) val!)) n$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT V&. V& (lib!spec.utils.map_new_rec.? V&. V& (I dom!) val!)) n$)) )) (forall ((n$ Poly)) (! (=> (has_type n$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT V&. V& (lib!spec.utils.map_new_rec.? V&. V& (I dom!) val!)) n$) (= (vstd!map.impl&%0.index.? $ NAT V&. V& (lib!spec.utils.map_new_rec.? V&. V& (I dom!) val!) n$) val!))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT V&. V& (lib!spec.utils.map_new_rec.? V&. V& (I dom!) val!)) n$)) )))) :pattern ((ens%lib!spec.utils.map_new_rec_dom_finite. V&. V& dom! val!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::initialize_inductive")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (post! lib!spec.unbounded_log.UnboundedLog.State.) (number_of_nodes! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize_inductive. DT&. DT& post! number_of_nodes!) (=> %%global_location_label%%55 (lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (I number_of_nodes!)))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize_inductive. DT&. DT& post! number_of_nodes!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (post! lib!spec.unbounded_log.UnboundedLog.State.) (number_of_nodes! Int)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize_inductive. DT&. DT& post! number_of_nodes!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.initialize_inductive. DT&. DT& post! number_of_nodes!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::initialize_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:834:5: 834:62 (#0)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::initialize")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.initialize. (Dcr Type Int) Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (number_of_nodes! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.initialize. DT&. DT& number_of_nodes!) (=> %%global_location_label%%56 (> number_of_nodes! 0))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.initialize. DT&. DT& number_of_nodes!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.initialize. (Dcr Type Int tuple%9.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (number_of_nodes! Int) (tmp_tuple! tuple%9.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.initialize. DT&. DT& number_of_nodes! tmp_tuple!) (and (has_type (Poly%tuple%9. tmp_tuple!) (TYPE%tuple%9. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&)) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&)) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&)) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&)) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)))) (let ((instance$ (%Poly%lib!spec.unbounded_log.UnboundedLog.Instance. (tuple%9./tuple%9/0 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!)))))) (let ((param_token_log$ (tuple%9./tuple%9/1 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!))))) (let ((param_token_tail$ (%Poly%lib!spec.unbounded_log.UnboundedLog.tail. (tuple%9./tuple%9/2 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!)))))) (let ((param_token_replicas$ (tuple%9./tuple%9/3 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!))))) (let ((param_token_local_versions$ (tuple%9./tuple%9/4 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!))))) (let ((param_token_version_upper_bound$ (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. (tuple%9./tuple%9/5 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!)))))) (let ((param_token_local_reads$ (tuple%9./tuple%9/6 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!))))) (let ((param_token_local_updates$ (tuple%9./tuple%9/7 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!))))) (let ((param_token_combiner$ (tuple%9./tuple%9/8 (%Poly%tuple%9. (Poly%tuple%9. tmp_tuple!))))) (let ((instance$1 instance$)) (let ((param_token_log$1 param_token_log$)) (let ((param_token_tail$1 param_token_tail$)) (let ((param_token_replicas$1 param_token_replicas$)) (let ((param_token_local_versions$1 param_token_local_versions$)) (let ((param_token_version_upper_bound$1 param_token_version_upper_bound$)) (let ((param_token_local_reads$1 param_token_local_reads$)) (let ((param_token_local_updates$1 param_token_local_updates$)) (let ((param_token_combiner$1 param_token_combiner$)) (and (and (and (and (and (and (and (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.tail. param_token_tail$1))))) instance$1) (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. param_token_version_upper_bound$1))))) instance$1)) (= (lib!spec.unbounded_log.UnboundedLog.impl&%12.num_replicas.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. instance$1)) number_of_nodes!)) (lib!spec.unbounded_log.UnboundedLog.impl&%4.map_agree_strict.? DT&. DT& param_token_log$1 (vstd!map.impl&%0.empty.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. instance$1))) (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.tail. param_token_tail$1))))) 0)) (lib!spec.unbounded_log.UnboundedLog.impl&%6.map_agree_strict.? DT&. DT& param_token_replicas$1 (vstd!map.impl&%0.new.? $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT (proj%%lib!Dispatch./View DT&. DT&) (proj%lib!Dispatch./View DT&. DT&)) (Poly%fun%1. (mk_fun (%%lambda%%0 number_of_nodes!))) (Poly%fun%1. (mk_fun (%%lambda%%1 (lib!Dispatch.init_spec.? DT&. DT&))))) (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. instance$1))) (lib!spec.unbounded_log.UnboundedLog.impl&%7.map_agree_strict.? DT&. DT& param_token_local_versions$1 (vstd!map.impl&%0.new.? $ NAT $ NAT $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ NAT) (Poly%fun%1. (mk_fun (%%lambda%%0 number_of_nodes!))) (Poly%fun%1. (mk_fun (%%lambda%%1 (I 0))))) (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. instance$1))) (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. param_token_version_upper_bound$1))))) 0)) (lib!spec.unbounded_log.UnboundedLog.impl&%9.map_agree_strict.? DT&. DT& param_token_local_reads$1 (vstd!map.impl&%0.empty.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. instance$1))) (lib!spec.unbounded_log.UnboundedLog.impl&%10.map_agree_strict.? DT&. DT& param_token_local_updates$1 (vstd!map.impl&%0.empty.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. instance$1))) (lib!spec.unbounded_log.UnboundedLog.impl&%11.map_agree_strict.? DT&. DT& param_token_combiner$1 (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.) (Poly%fun%1. (mk_fun (%%lambda%%0 number_of_nodes!))) (Poly%fun%1. (mk_fun (%%lambda%%1 (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready))))) (Poly%lib!spec.unbounded_log.UnboundedLog.Instance. instance$1))))))))))))))))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.initialize. DT&. DT& number_of_nodes! tmp_tuple!)) )))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_safety")
(declare-fun req%vstd!state_machine_internal.assert_safety. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_safety. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_safety. b!)) )))
(declare-fun ens%vstd!state_machine_internal.assert_safety. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_safety. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_safety. b!)) )))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_add_map")
(declare-fun req%vstd!state_machine_internal.assert_add_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_add_map. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_add_map. b!)) )))
(declare-fun ens%vstd!state_machine_internal.assert_add_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_add_map. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_add_map. b!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::concat_LogRangeNoNodeId_LogRangeMatchesQueue")
(declare-fun req%lib!spec.unbounded_log.concat_LogRangeNoNodeId_LogRangeMatchesQueue. (Dcr Type vstd!seq.Seq<nat.>. Poly Int Int Int Int Int Poly) Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(declare-const %%global_location_label%%59 Bool)
(declare-const %%global_location_label%%60 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (queueIndex! Int) (a! Int) (b! Int) (c! Int) (nodeId! Int) (updates! Poly)) (! (= (req%lib!spec.unbounded_log.concat_LogRangeNoNodeId_LogRangeMatchesQueue. DT&. DT& queue! log! queueIndex! a! b! c! nodeId! updates!) (and (=> %%global_location_label%%57 (and (<= a! b!) (<= b! c!))) (=> %%global_location_label%%58 (and (<= 0 queueIndex!) (<= queueIndex! (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!))))) (=> %%global_location_label%%59 (lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& log! (I a!) (I b!) (I nodeId!))) (=> %%global_location_label%%60 (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I b!) (I c!) (I nodeId!) updates!)))) :pattern ((req%lib!spec.unbounded_log.concat_LogRangeNoNodeId_LogRangeMatchesQueue. DT&. DT& queue! log! queueIndex! a! b! c! nodeId! updates!)) )))
(declare-fun ens%lib!spec.unbounded_log.concat_LogRangeNoNodeId_LogRangeMatchesQueue. (Dcr Type vstd!seq.Seq<nat.>. Poly Int Int Int Int Int Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (queueIndex! Int) (a! Int) (b! Int) (c! Int) (nodeId! Int) (updates! Poly)) (! (= (ens%lib!spec.unbounded_log.concat_LogRangeNoNodeId_LogRangeMatchesQueue. DT&. DT& queue! log! queueIndex! a! b! c! nodeId! updates!) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I a!) (I c!) (I nodeId!) updates!)) :pattern ((ens%lib!spec.unbounded_log.concat_LogRangeNoNodeId_LogRangeMatchesQueue. DT&. DT& queue! log! queueIndex! a! b! c! nodeId! updates!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::exec_trivial_start_inductive")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_inductive. DT&. DT& pre! post! node_id!) (=> %%global_location_label%%61 (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_strong.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!) (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (I node_id!))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_inductive. DT&. DT& pre! post! node_id!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_inductive. DT&. DT& pre! post! node_id!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_trivial_start_inductive. DT&. DT& pre! post! node_id!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_trivial_start_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:979:5: 979:76 (#0)")
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_trivial_start_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:265:1: 1171:2 (#1108)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::exec_trivial_start")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_trivial_start. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(declare-const %%global_location_label%%62 Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_trivial_start. DT&. DT& self! node_id! param_token_0_combiner!) (and (=> %%global_location_label%%62 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) self!)) (=> %%global_location_label%%63 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) lib!spec.unbounded_log.CombinerState./Ready))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_trivial_start. DT&. DT& self! node_id! param_token_0_combiner!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_trivial_start. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.combiner. lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.) (param_token_1_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_trivial_start. DT&. DT& self! node_id! param_token_0_combiner! param_token_1_combiner!) (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!))))) self!) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!))))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!))))) (lib!spec.unbounded_log.CombinerState./Placed (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.empty.? $ NAT))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_trivial_start. DT&. DT& self! node_id! param_token_0_combiner! param_token_1_combiner!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::exec_load_local_version_inductive")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(declare-const %%global_location_label%%64 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_inductive. DT&. DT& pre! post! node_id!) (=> %%global_location_label%%64 (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_strong.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!) (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (I node_id!))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_inductive. DT&. DT& pre! post! node_id!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_inductive. DT&. DT& pre! post! node_id!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_local_version_inductive. DT&. DT& pre! post! node_id!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_load_local_version_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1082:5: 1082:81 (#0)")
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_load_local_version_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:265:1: 1171:2 (#1108)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::exec_load_local_version")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_local_version. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.local_versions. lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(declare-const %%global_location_label%%65 Bool)
(declare-const %%global_location_label%%66 Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_1_local_versions! lib!spec.unbounded_log.UnboundedLog.local_versions.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_local_version. DT&. DT& self! node_id! param_token_1_local_versions! param_token_0_combiner!) (and (=> %%global_location_label%%65 (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. param_token_1_local_versions!))))) self!)) (=> %%global_location_label%%66 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) self!)) (=> %%global_location_label%%67 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (and (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))) (=> %%global_location_label%%68 (let ((queued_ops$ (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$1 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$1) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. param_token_1_local_versions!))))) node_id!))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_local_version. DT&. DT& self! node_id! param_token_1_local_versions! param_token_0_combiner!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_local_version. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.local_versions. lib!spec.unbounded_log.UnboundedLog.combiner. lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_1_local_versions! lib!spec.unbounded_log.UnboundedLog.local_versions.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.) (param_token_2_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_local_version. DT&. DT& self! node_id! param_token_1_local_versions! param_token_0_combiner! param_token_2_combiner!) (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_2_combiner!) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_2_combiner!))))) self!) (let ((queued_ops$ (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$1 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$1) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (let ((lversion$ (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. param_token_1_local_versions!))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_2_combiner!))))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_2_combiner!))))) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I lversion$))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_local_version. DT&. DT& self! node_id! param_token_1_local_versions! param_token_0_combiner! param_token_2_combiner!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::exec_finish_no_change_inductive")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(declare-const %%global_location_label%%69 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_inductive. DT&. DT& pre! post! node_id!) (=> %%global_location_label%%69 (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_strong.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!) (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (I node_id!))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_inductive. DT&. DT& pre! post! node_id!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_inductive. DT&. DT& pre! post! node_id!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_no_change_inductive. DT&. DT& pre! post! node_id!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_finish_no_change_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1146:5: 1146:79 (#0)")
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_finish_no_change_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:265:1: 1171:2 (#1108)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::exec_finish_no_change")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish_no_change. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.tail. lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_tail! lib!spec.unbounded_log.UnboundedLog.tail.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish_no_change. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner!) (and (=> %%global_location_label%%70 (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.tail. param_token_tail!))))) self!)) (=> %%global_location_label%%71 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) self!)) (=> %%global_location_label%%72 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (and (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))))) (=> %%global_location_label%%73 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((lversion$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (= lversion$ (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.tail. param_token_tail!)))))))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish_no_change. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish_no_change. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.tail. lib!spec.unbounded_log.UnboundedLog.combiner. lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_tail! lib!spec.unbounded_log.UnboundedLog.tail.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.) (param_token_1_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish_no_change. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner! param_token_1_combiner!) (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!))))) self!) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((lversion$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (= (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$)) 0)))) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((lversion$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!))))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!))))) lib!spec.unbounded_log.CombinerState./Ready))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish_no_change. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner! param_token_1_combiner!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::exec_load_global_head_inductive")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(declare-const %%global_location_label%%74 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_inductive. DT&. DT& pre! post! node_id!) (=> %%global_location_label%%74 (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_strong.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!) (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (I node_id!))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_inductive. DT&. DT& pre! post! node_id!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_inductive. DT&. DT& pre! post! node_id!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_load_global_head_inductive. DT&. DT& pre! post! node_id!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_load_global_head_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1085:5: 1085:79 (#0)")
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_load_global_head_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:265:1: 1171:2 (#1108)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::exec_load_global_head")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_global_head. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.tail. lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(declare-const %%global_location_label%%75 Bool)
(declare-const %%global_location_label%%76 Bool)
(declare-const %%global_location_label%%77 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_tail! lib!spec.unbounded_log.UnboundedLog.tail.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_global_head. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner!) (and (=> %%global_location_label%%75 (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.tail. param_token_tail!))))) self!)) (=> %%global_location_label%%76 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) self!)) (=> %%global_location_label%%77 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (and (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_global_head. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_global_head. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.tail. lib!spec.unbounded_log.UnboundedLog.combiner. lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_tail! lib!spec.unbounded_log.UnboundedLog.tail.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.) (param_token_1_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_global_head. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner! param_token_1_combiner!) (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!))))) self!) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((lversion$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!))))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!))))) (lib!spec.unbounded_log.CombinerState./Loop (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I lversion$)) (%I (I 0)) (%I (I (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.tail. param_token_tail!))))))))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_load_global_head. DT&. DT& self! node_id! param_token_tail! param_token_0_combiner! param_token_1_combiner!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::pre_exec_dispatch_local_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:265:1: 1171:2 (#1108)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::pre_exec_dispatch_local")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_dispatch_local. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.log. lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(declare-const %%global_location_label%%80 Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_1_log! lib!spec.unbounded_log.UnboundedLog.log.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_dispatch_local. DT&. DT& self! node_id! param_token_1_log! param_token_0_combiner!) (and (=> %%global_location_label%%78 (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_1_log!))))) self!)) (=> %%global_location_label%%79 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) self!)) (=> %%global_location_label%%80 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))))))) (=> %%global_location_label%%81 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_1_log!))))) lversion$))))))) (=> %%global_location_label%%82 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_1_log!))))))) (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))) node_id!)))))))) (=> %%global_location_label%%83 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_1_log!))))))) (< lversion$ tail$)))))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_dispatch_local. DT&. DT& self! node_id! param_token_1_log! param_token_0_combiner!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_dispatch_local. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.log. lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_1_log! lib!spec.unbounded_log.UnboundedLog.log.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_dispatch_local. DT&. DT& self! node_id! param_token_1_log! param_token_0_combiner!) (and (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_1_log!))))))) (< idx$ (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$))))))))) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_1_log!))))))) (> (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$)) 0))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_dispatch_local. DT&. DT& self! node_id! param_token_1_log! param_token_0_combiner!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeMatchesQueue_update_change")
(declare-fun req%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change. (Dcr Type vstd!seq.Seq<nat.>. Poly Int Int Int Int Poly Poly) Bool)
(declare-const %%global_location_label%%84 Bool)
(declare-const %%global_location_label%%85 Bool)
(declare-const %%global_location_label%%86 Bool)
(declare-const %%global_location_label%%87 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (nodeId! Int) (updates1! Poly) (updates2! Poly)) (! (= (req%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!) (and (=> %%global_location_label%%84 (and (<= 0 queueIndex!) (<= queueIndex! (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!))))) (=> %%global_location_label%%85 (<= logIndexLower! logIndexUpper!)) (=> %%global_location_label%%86 (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I nodeId!) updates1!)) (=> %%global_location_label%%87 (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1!) rid$) (=> (and (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1! rid$))) (let ((tmp%%$ (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1! rid$))))) (and (<= logIndexLower! tmp%%$) (< tmp%%$ logIndexUpper!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates2!) rid$) (= (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates2! rid$) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1! rid$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1!) rid$)) ))))) :pattern ((req%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!)) )))
(declare-fun ens%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change. (Dcr Type vstd!seq.Seq<nat.>. Poly Int Int Int Int Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (nodeId! Int) (updates1! Poly) (updates2! Poly)) (! (= (ens%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I nodeId!) updates2!)) :pattern ((ens%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeMatchesQueue_update_change_2")
(declare-fun req%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change_2. (Dcr Type vstd!seq.Seq<nat.>. Poly Int Int Int Int Poly Poly) Bool)
(declare-const %%global_location_label%%88 Bool)
(declare-const %%global_location_label%%89 Bool)
(declare-const %%global_location_label%%90 Bool)
(declare-const %%global_location_label%%91 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (nodeId! Int) (updates1! Poly) (updates2! Poly)) (! (= (req%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change_2. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!) (and (=> %%global_location_label%%88 (and (<= 0 queueIndex!) (<= queueIndex! (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!))))) (=> %%global_location_label%%89 (<= logIndexLower! logIndexUpper!)) (=> %%global_location_label%%90 (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I nodeId!) updates1!)) (=> %%global_location_label%%91 (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1!) rid$) (=> (vstd!seq_lib.impl&%0.contains.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!) rid$) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates2!) rid$) (= (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates2! rid$) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1! rid$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1!) rid$)) ))))) :pattern ((req%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change_2. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!)) )))
(declare-fun ens%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change_2. (Dcr Type vstd!seq.Seq<nat.>. Poly Int Int Int Int Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (nodeId! Int) (updates1! Poly) (updates2! Poly)) (! (= (ens%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change_2. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I nodeId!) updates2!)) :pattern ((ens%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change_2. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_local_inductive")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(declare-const %%global_location_label%%92 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_inductive. DT&. DT& pre! post! node_id!) (=> %%global_location_label%%92 (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_strong.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!) (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (I node_id!))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_inductive. DT&. DT& pre! post! node_id!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_inductive. DT&. DT& pre! post! node_id!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_local_inductive. DT&. DT& pre! post! node_id!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_local_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1088:5: 1088:77 (#0)")
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_local_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:265:1: 1171:2 (#1108)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::exec_dispatch_local")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_local. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.log. lib!spec.unbounded_log.UnboundedLog.replicas. lib!spec.unbounded_log.UnboundedLog.local_updates. lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(declare-const %%global_location_label%%93 Bool)
(declare-const %%global_location_label%%94 Bool)
(declare-const %%global_location_label%%95 Bool)
(declare-const %%global_location_label%%96 Bool)
(declare-const %%global_location_label%%97 Bool)
(declare-const %%global_location_label%%98 Bool)
(declare-const %%global_location_label%%99 Bool)
(declare-const %%global_location_label%%100 Bool)
(declare-const %%global_location_label%%101 Bool)
(declare-const %%global_location_label%%102 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_3_log! lib!spec.unbounded_log.UnboundedLog.log.) (param_token_1_replicas! lib!spec.unbounded_log.UnboundedLog.replicas.) (param_token_2_local_updates! lib!spec.unbounded_log.UnboundedLog.local_updates.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_local. DT&. DT& self! node_id! param_token_3_log! param_token_1_replicas! param_token_2_local_updates! param_token_0_combiner!) (and (=> %%global_location_label%%93 (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_3_log!))))) self!)) (=> %%global_location_label%%94 (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))) self!)) (=> %%global_location_label%%95 (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_2_local_updates!))))) self!)) (=> %%global_location_label%%96 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) self!)) (=> %%global_location_label%%97 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))))))) (=> %%global_location_label%%98 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))) node_id!))))))) (=> %%global_location_label%%99 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_2_local_updates!))))) rid$))))))))) (=> %%global_location_label%%100 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (let ((local_update$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_2_local_updates!))))))) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_3_log!))))) lversion$)))))))))) (=> %%global_location_label%%101 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (let ((local_update$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_2_local_updates!))))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_3_log!))))))) (< lversion$ tail$))))))))))) (=> %%global_location_label%%102 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (let ((local_update$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_2_local_updates!))))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_3_log!))))))) (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))) node_id!))))))))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_local. DT&. DT& self! node_id! param_token_3_log! param_token_1_replicas! param_token_2_local_updates! param_token_0_combiner!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_local. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.log. lib!spec.unbounded_log.UnboundedLog.replicas. lib!spec.unbounded_log.UnboundedLog.local_updates. lib!spec.unbounded_log.UnboundedLog.combiner. tuple%3.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_3_log! lib!spec.unbounded_log.UnboundedLog.log.) (param_token_1_replicas! lib!spec.unbounded_log.UnboundedLog.replicas.) (param_token_2_local_updates! lib!spec.unbounded_log.UnboundedLog.local_updates.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.) (tmp_tuple! tuple%3.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_local. DT&. DT& self! node_id! param_token_3_log! param_token_1_replicas! param_token_2_local_updates! param_token_0_combiner! tmp_tuple!) (and (has_type (Poly%tuple%3. tmp_tuple!) (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) (let ((param_token_5_replicas$ (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp_tuple!)))))) (let ((param_token_4_local_updates$ (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp_tuple!)))))) (let ((param_token_6_combiner$ (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp_tuple!)))))) (let ((param_token_5_replicas$1 param_token_5_replicas$)) (let ((param_token_4_local_updates$1 param_token_4_local_updates$)) (let ((param_token_6_combiner$1 param_token_6_combiner$)) (and (and (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_5_replicas$1))))) self!) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_4_local_updates$1))))) self!)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_6_combiner$1))))) self!)) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (let ((local_update$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_2_local_updates!))))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_3_log!))))))) (let ((tmp%%$2 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2))))) (and (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_4_local_updates$1))))) rid$) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_4_local_updates$1))))) (lib!spec.unbounded_log.UpdateState./Applied ret$ (%I (I lversion$)))))))))))))))))) (let ((tmp%%$ (let ((tmp%%$4 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$4) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (let ((local_update$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_2_local_updates!))))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_3_log!))))))) (let ((tmp%%$5 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$5))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$5))))) (and (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_5_replicas$1))))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_5_replicas$1))))) new_nr_state$))))))))))))))) (let ((tmp%%$ (let ((tmp%%$7 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$7) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$7))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$7))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$7))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$7))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))))) (let ((rid$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I idx$))))) (let ((local_update$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_2_local_updates!))))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_3_log!))))))) (let ((tmp%%$8 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$8))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$8))))) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_6_combiner$1))))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_6_combiner$1))))) (lib!spec.unbounded_log.CombinerState./Loop (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I (nClip (Add lversion$ 1)))) (%I (I (nClip (Add idx$ 1)))) (%I (I tail$)))))))))))))))))))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_local. DT&. DT& self! node_id! param_token_3_log! param_token_1_replicas! param_token_2_local_updates! param_token_0_combiner! tmp_tuple!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_remote_inductive")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(declare-const %%global_location_label%%103 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_inductive. DT&. DT& pre! post! node_id!) (=> %%global_location_label%%103 (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_strong.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!) (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (I node_id!))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_inductive. DT&. DT& pre! post! node_id!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_inductive. DT&. DT& pre! post! node_id!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_dispatch_remote_inductive. DT&. DT& pre! post! node_id!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_remote_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1123:5: 1123:78 (#0)")
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_dispatch_remote_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:265:1: 1171:2 (#1108)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::exec_dispatch_remote")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_remote. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.log. lib!spec.unbounded_log.UnboundedLog.replicas. lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(declare-const %%global_location_label%%104 Bool)
(declare-const %%global_location_label%%105 Bool)
(declare-const %%global_location_label%%106 Bool)
(declare-const %%global_location_label%%107 Bool)
(declare-const %%global_location_label%%108 Bool)
(declare-const %%global_location_label%%109 Bool)
(declare-const %%global_location_label%%110 Bool)
(declare-const %%global_location_label%%111 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_2_log! lib!spec.unbounded_log.UnboundedLog.log.) (param_token_1_replicas! lib!spec.unbounded_log.UnboundedLog.replicas.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_remote. DT&. DT& self! node_id! param_token_2_log! param_token_1_replicas! param_token_0_combiner!) (and (=> %%global_location_label%%104 (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_2_log!))))) self!)) (=> %%global_location_label%%105 (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))) self!)) (=> %%global_location_label%%106 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) self!)) (=> %%global_location_label%%107 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))))))) (=> %%global_location_label%%108 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))) node_id!))))))) (=> %%global_location_label%%109 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))))) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_2_log!))))) lversion$)))))))) (=> %%global_location_label%%110 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_2_log!))))))) (< lversion$ tail$))))))))) (=> %%global_location_label%%111 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_2_log!))))))) (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))) node_id!)))))))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_remote. DT&. DT& self! node_id! param_token_2_log! param_token_1_replicas! param_token_0_combiner!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_remote. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.log. lib!spec.unbounded_log.UnboundedLog.replicas. lib!spec.unbounded_log.UnboundedLog.combiner. tuple%2.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_2_log! lib!spec.unbounded_log.UnboundedLog.log.) (param_token_1_replicas! lib!spec.unbounded_log.UnboundedLog.replicas.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.) (tmp_tuple! tuple%2.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_remote. DT&. DT& self! node_id! param_token_2_log! param_token_1_replicas! param_token_0_combiner! tmp_tuple!) (and (has_type (Poly%tuple%2. tmp_tuple!) (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) (let ((param_token_3_replicas$ (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp_tuple!)))))) (let ((param_token_4_combiner$ (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp_tuple!)))))) (let ((param_token_3_replicas$1 param_token_3_replicas$)) (let ((param_token_4_combiner$1 param_token_4_combiner$)) (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_3_replicas$1))))) self!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_4_combiner$1))))) self!)) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_2_log!))))))) (let ((tmp%%$2 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2))))) (and (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_3_replicas$1))))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_3_replicas$1))))) new_nr_state$))))))))))))) (let ((tmp%%$ (let ((tmp%%$4 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$4) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$4))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((old_nr_state$ (lib!spec.unbounded_log.UnboundedLog.replicas_token_data./replicas_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.replicas_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%6.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.replicas. param_token_1_replicas!))))))) (let ((log_entry$ (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_2_log!))))))) (let ((tmp%%$5 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& old_nr_state$ (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry$))))))) (let ((new_nr_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$5))))) (let ((ret$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$5))))) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_4_combiner$1))))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_4_combiner$1))))) (lib!spec.unbounded_log.CombinerState./Loop (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I (nClip (Add lversion$ 1)))) (%I (I idx$)) (%I (I tail$)))))))))))))))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_dispatch_remote. DT&. DT& self! node_id! param_token_2_log! param_token_1_replicas! param_token_0_combiner! tmp_tuple!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::pre_exec_update_version_upper_bound_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:265:1: 1171:2 (#1108)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::pre_exec_update_version_upper_bound")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_update_version_upper_bound. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(declare-const %%global_location_label%%112 Bool)
(declare-const %%global_location_label%%113 Bool)
(declare-const %%global_location_label%%114 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_update_version_upper_bound. DT&. DT& self! node_id! param_token_0_combiner!) (and (=> %%global_location_label%%112 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) self!)) (=> %%global_location_label%%113 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))))))) (=> %%global_location_label%%114 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (= lversion$ tail$))))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_update_version_upper_bound. DT&. DT& self! node_id! param_token_0_combiner!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_update_version_upper_bound. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_update_version_upper_bound. DT&. DT& self! node_id! param_token_0_combiner!) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (= idx$ (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.pre_exec_update_version_upper_bound. DT&. DT& self! node_id! param_token_0_combiner!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::exec_update_version_upper_bound_inductive")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(declare-const %%global_location_label%%115 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_inductive. DT&. DT& pre! post! node_id!) (=> %%global_location_label%%115 (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_strong.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!) (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (I node_id!))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_inductive. DT&. DT& pre! post! node_id!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_inductive. DT&. DT& pre! post! node_id!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_update_version_upper_bound_inductive. DT&. DT& pre! post! node_id!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_update_version_upper_bound_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1126:5: 1126:89 (#0)")
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_update_version_upper_bound_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:265:1: 1171:2 (#1108)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::exec_update_version_upper_bound")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_update_version_upper_bound. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.version_upper_bound. lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(declare-const %%global_location_label%%116 Bool)
(declare-const %%global_location_label%%117 Bool)
(declare-const %%global_location_label%%118 Bool)
(declare-const %%global_location_label%%119 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (pre%param_token_version_upper_bound! lib!spec.unbounded_log.UnboundedLog.version_upper_bound.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_update_version_upper_bound. DT&. DT& self! node_id! pre%param_token_version_upper_bound! param_token_0_combiner!) (and (=> %%global_location_label%%116 (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. pre%param_token_version_upper_bound!))))) self!)) (=> %%global_location_label%%117 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) self!)) (=> %%global_location_label%%118 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (and (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))))))) (=> %%global_location_label%%119 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (= lversion$ tail$))))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_update_version_upper_bound. DT&. DT& self! node_id! pre%param_token_version_upper_bound! param_token_0_combiner!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_update_version_upper_bound. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.version_upper_bound. lib!spec.unbounded_log.UnboundedLog.version_upper_bound. lib!spec.unbounded_log.UnboundedLog.combiner. lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (pre%param_token_version_upper_bound! lib!spec.unbounded_log.UnboundedLog.version_upper_bound.) (param_token_version_upper_bound! lib!spec.unbounded_log.UnboundedLog.version_upper_bound.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.) (param_token_1_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_update_version_upper_bound. DT&. DT& self! node_id! pre%param_token_version_upper_bound! param_token_version_upper_bound! param_token_0_combiner! param_token_1_combiner!) (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. param_token_version_upper_bound!) (TYPE%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. DT&. DT&)) (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. param_token_version_upper_bound!))))) self!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!))))) self!) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!))))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_1_combiner!))))) (lib!spec.unbounded_log.CombinerState./UpdatedVersion (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. queued_ops$)) (%I (I tail$)))))))))) (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. param_token_version_upper_bound!))))) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((lversion$ (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%4./tuple%4 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I lversion$) (I tail$) (I idx$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT $ NAT $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((lversion$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tail$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (ite (>= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. pre%param_token_version_upper_bound!))))) tail$) (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. pre%param_token_version_upper_bound!))))) tail$))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_update_version_upper_bound. DT&. DT& self! node_id! pre%param_token_version_upper_bound! param_token_version_upper_bound! param_token_0_combiner! param_token_1_combiner!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::update_done_inductive")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(declare-const %%global_location_label%%120 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (rid! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_inductive. DT&. DT& pre! post! rid!) (=> %%global_location_label%%120 (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_strong.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!) (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (I rid!))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_inductive. DT&. DT& pre! post! rid!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (rid! Int)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_inductive. DT&. DT& pre! post! rid!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_done_inductive. DT&. DT& pre! post! rid!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::update_done_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:928:5: 928:64 (#0)")
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::update_done_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:265:1: 1171:2 (#1108)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::update_done")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_done. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.version_upper_bound. lib!spec.unbounded_log.UnboundedLog.local_updates.) Bool)
(declare-const %%global_location_label%%121 Bool)
(declare-const %%global_location_label%%122 Bool)
(declare-const %%global_location_label%%123 Bool)
(declare-const %%global_location_label%%124 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (rid! Int) (param_token_version_upper_bound! lib!spec.unbounded_log.UnboundedLog.version_upper_bound.) (param_token_0_local_updates! lib!spec.unbounded_log.UnboundedLog.local_updates.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_done. DT&. DT& self! rid! param_token_version_upper_bound! param_token_0_local_updates!) (and (=> %%global_location_label%%121 (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. param_token_version_upper_bound!))))) self!)) (=> %%global_location_label%%122 (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_0_local_updates!))))) self!)) (=> %%global_location_label%%123 (and (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_0_local_updates!))))) rid!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_0_local_updates!))))))) (and (is-lib!spec.unbounded_log.UpdateState./Applied_ tmp%%$) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) true)))))) (=> %%global_location_label%%124 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_0_local_updates!))))))) (ite (is-lib!spec.unbounded_log.UpdateState./Applied_ tmp%%$1) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$1))))) (tuple%2./tuple%2 ret$ (I idx$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ NAT))))))) (let ((ret$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (> (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. param_token_version_upper_bound!))))) idx$))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_done. DT&. DT& self! rid! param_token_version_upper_bound! param_token_0_local_updates!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_done. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.version_upper_bound. lib!spec.unbounded_log.UnboundedLog.local_updates. lib!spec.unbounded_log.UnboundedLog.local_updates.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (rid! Int) (param_token_version_upper_bound! lib!spec.unbounded_log.UnboundedLog.version_upper_bound.) (param_token_0_local_updates! lib!spec.unbounded_log.UnboundedLog.local_updates.) (param_token_1_local_updates! lib!spec.unbounded_log.UnboundedLog.local_updates.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_done. DT&. DT& self! rid! param_token_version_upper_bound! param_token_0_local_updates! param_token_1_local_updates!) (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_1_local_updates!) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_1_local_updates!))))) self!) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_0_local_updates!))))))) (ite (is-lib!spec.unbounded_log.UpdateState./Applied_ tmp%%$1) (let ((ret$ (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$1))))) (let ((idx$ (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$1))))) (tuple%2./tuple%2 ret$ (I idx$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ NAT))))))) (let ((ret$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_1_local_updates!))))) rid!) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_1_local_updates!))))) (lib!spec.unbounded_log.UpdateState./Done ret$ (%I (I idx$)))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_done. DT&. DT& self! rid! param_token_version_upper_bound! param_token_0_local_updates! param_token_1_local_updates!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::exec_finish_inductive")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(declare-const %%global_location_label%%125 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_inductive. DT&. DT& pre! post! node_id!) (=> %%global_location_label%%125 (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_strong.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!) (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (I node_id!))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_inductive. DT&. DT& pre! post! node_id!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_inductive. DT&. DT& pre! post! node_id!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.exec_finish_inductive. DT&. DT& pre! post! node_id!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_finish_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1143:5: 1143:69 (#0)")
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::exec_finish_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:265:1: 1171:2 (#1108)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::exec_finish")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.local_versions. lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(declare-const %%global_location_label%%126 Bool)
(declare-const %%global_location_label%%127 Bool)
(declare-const %%global_location_label%%128 Bool)
(declare-const %%global_location_label%%129 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_1_local_versions! lib!spec.unbounded_log.UnboundedLog.local_versions.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish. DT&. DT& self! node_id! param_token_1_local_versions! param_token_0_combiner!) (and (=> %%global_location_label%%126 (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. param_token_1_local_versions!))))) self!)) (=> %%global_location_label%%127 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) self!)) (=> %%global_location_label%%128 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (and (is-lib!spec.unbounded_log.CombinerState./UpdatedVersion_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true)))))) (=> %%global_location_label%%129 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./UpdatedVersion_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I tail$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tail$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. param_token_1_local_versions!))))) node_id!))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish. DT&. DT& self! node_id! param_token_1_local_versions! param_token_0_combiner!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.local_versions. lib!spec.unbounded_log.UnboundedLog.combiner. tuple%2.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (param_token_1_local_versions! lib!spec.unbounded_log.UnboundedLog.local_versions.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.) (tmp_tuple! tuple%2.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish. DT&. DT& self! node_id! param_token_1_local_versions! param_token_0_combiner! tmp_tuple!) (and (has_type (Poly%tuple%2. tmp_tuple!) (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_versions. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) (let ((param_token_2_local_versions$ (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp_tuple!)))))) (let ((param_token_3_combiner$ (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp_tuple!)))))) (let ((param_token_2_local_versions$1 param_token_2_local_versions$)) (let ((param_token_3_combiner$1 param_token_3_combiner$)) (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. param_token_2_local_versions$1))))) self!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_3_combiner$1))))) self!)) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./UpdatedVersion_ tmp%%$1) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$1))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I tail$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tail$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((old_local_head$ (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. param_token_1_local_versions!))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. param_token_2_local_versions$1))))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. param_token_2_local_versions$1))))) tail$))))))) (let ((tmp%%$ (let ((tmp%%$3 (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./UpdatedVersion_ tmp%%$3) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$3))))) (let ((tail$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$3))))) (tuple%2./tuple%2 (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I tail$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!seq.Seq. $ NAT) $ NAT))))))) (let ((queued_ops$ (%Poly%vstd!seq.Seq<nat.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tail$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((old_local_head$ (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. param_token_1_local_versions!))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_3_combiner$1))))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_3_combiner$1))))) lib!spec.unbounded_log.CombinerState./Ready))))))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.exec_finish. DT&. DT& self! node_id! param_token_1_local_versions! param_token_0_combiner! tmp_tuple!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeMatchesQueue_append")
(declare-fun req%lib!spec.unbounded_log.LogRangeMatchesQueue_append. (Dcr Type vstd!seq.Seq<nat.>. Poly Poly Int Int Int Int Poly Poly Int lib!spec.types.LogEntry.) Bool)
(declare-const %%global_location_label%%130 Bool)
(declare-const %%global_location_label%%131 Bool)
(declare-const %%global_location_label%%132 Bool)
(declare-const %%global_location_label%%133 Bool)
(declare-const %%global_location_label%%134 Bool)
(declare-const %%global_location_label%%135 Bool)
(declare-const %%global_location_label%%136 Bool)
(declare-const %%global_location_label%%137 Bool)
(declare-const %%global_location_label%%138 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (new_log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (node_id! Int) (updates! Poly) (new_updates! Poly) (new_rid! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (req%lib!spec.unbounded_log.LogRangeMatchesQueue_append. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!) (and (=> %%global_location_label%%130 (and (<= 0 queueIndex!) (<= queueIndex! (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!))))) (=> %%global_location_label%%131 (<= logIndexLower! logIndexUpper!)) (=> %%global_location_label%%132 (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry!))) node_id!)) (=> %%global_location_label%%133 (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates!) (I new_rid!))) (=> %%global_location_label%%134 (= (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates! (I new_rid!))) (lib!spec.unbounded_log.UpdateState./Placed (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry!))) (%I (I logIndexUpper!))))) (=> %%global_location_label%%135 (not (vstd!seq_lib.impl&%0.contains.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!) (I new_rid!)))) (=> %%global_location_label%%136 (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates!) rid$) (not (= (%I rid$) new_rid!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates!) rid$) (= (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates! rid$) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates! rid$))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates!) rid$)) ))) (=> %%global_location_label%%137 (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I node_id!) updates!)) (=> %%global_location_label%%138 (= new_log! (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! (I logIndexUpper!) (Poly%lib!spec.types.LogEntry. log_entry!)))))) :pattern ((req%lib!spec.unbounded_log.LogRangeMatchesQueue_append. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!)) )))
(declare-fun ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append. (Dcr Type vstd!seq.Seq<nat.>. Poly Poly Int Int Int Int Poly Poly Int lib!spec.types.LogEntry.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (new_log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (node_id! Int) (updates! Poly) (new_updates! Poly) (new_rid! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (vstd!seq.Seq.push.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!) (I new_rid!)) new_log! (I queueIndex!) (I logIndexLower!) (I (nClip (Add logIndexUpper! 1))) (I node_id!) new_updates!)) :pattern ((ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeNoNodeId_append_other")
(declare-fun req%lib!spec.unbounded_log.LogRangeNoNodeId_append_other. (Dcr Type Poly Poly Int Int Int lib!spec.types.LogEntry.) Bool)
(declare-const %%global_location_label%%139 Bool)
(declare-const %%global_location_label%%140 Bool)
(declare-const %%global_location_label%%141 Bool)
(declare-const %%global_location_label%%142 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (new_log! Poly) (logIndexLower! Int) (logIndexUpper! Int) (node_id! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (req%lib!spec.unbounded_log.LogRangeNoNodeId_append_other. DT&. DT& log! new_log! logIndexLower! logIndexUpper! node_id! log_entry!) (and (=> %%global_location_label%%139 (<= logIndexLower! logIndexUpper!)) (=> %%global_location_label%%140 (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry!))) node_id!))) (=> %%global_location_label%%141 (lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& log! (I logIndexLower!) (I logIndexUpper!) (I node_id!))) (=> %%global_location_label%%142 (= new_log! (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! (I logIndexUpper!) (Poly%lib!spec.types.LogEntry. log_entry!)))))) :pattern ((req%lib!spec.unbounded_log.LogRangeNoNodeId_append_other. DT&. DT& log! new_log! logIndexLower! logIndexUpper! node_id! log_entry!)) )))
(declare-fun ens%lib!spec.unbounded_log.LogRangeNoNodeId_append_other. (Dcr Type Poly Poly Int Int Int lib!spec.types.LogEntry.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (new_log! Poly) (logIndexLower! Int) (logIndexUpper! Int) (node_id! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (ens%lib!spec.unbounded_log.LogRangeNoNodeId_append_other. DT&. DT& log! new_log! logIndexLower! logIndexUpper! node_id! log_entry!) (lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& new_log! (I logIndexLower!) (I (nClip (Add logIndexUpper! 1))) (I node_id!))) :pattern ((ens%lib!spec.unbounded_log.LogRangeNoNodeId_append_other. DT&. DT& log! new_log! logIndexLower! logIndexUpper! node_id! log_entry!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeMatchesQueue_append_other_augment")
(declare-fun req%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other_augment. (Dcr Type vstd!seq.Seq<nat.>. Poly Poly Int Int Int Int Poly Poly Int lib!spec.types.LogEntry.) Bool)
(declare-const %%global_location_label%%143 Bool)
(declare-const %%global_location_label%%144 Bool)
(declare-const %%global_location_label%%145 Bool)
(declare-const %%global_location_label%%146 Bool)
(declare-const %%global_location_label%%147 Bool)
(declare-const %%global_location_label%%148 Bool)
(declare-const %%global_location_label%%149 Bool)
(declare-const %%global_location_label%%150 Bool)
(declare-const %%global_location_label%%151 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (new_log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (node_id! Int) (updates! Poly) (new_updates! Poly) (new_rid! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (req%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other_augment. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!) (and (=> %%global_location_label%%143 (and (<= 0 queueIndex!) (<= queueIndex! (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!))))) (=> %%global_location_label%%144 (<= logIndexLower! logIndexUpper!)) (=> %%global_location_label%%145 (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry!))) node_id!))) (=> %%global_location_label%%146 (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates!) (I new_rid!))) (=> %%global_location_label%%147 (= (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates! (I new_rid!))) (lib!spec.unbounded_log.UpdateState./Placed (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry!))) (%I (I logIndexUpper!))))) (=> %%global_location_label%%148 (not (vstd!seq_lib.impl&%0.contains.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!) (I new_rid!)))) (=> %%global_location_label%%149 (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates!) rid$) (not (= (%I rid$) new_rid!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates!) rid$) (= (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates! rid$) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates! rid$))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates!) rid$)) ))) (=> %%global_location_label%%150 (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I node_id!) updates!)) (=> %%global_location_label%%151 (= new_log! (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! (I logIndexUpper!) (Poly%lib!spec.types.LogEntry. log_entry!)))))) :pattern ((req%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other_augment. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!)) )))
(declare-fun ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other_augment. (Dcr Type vstd!seq.Seq<nat.>. Poly Poly Int Int Int Int Poly Poly Int lib!spec.types.LogEntry.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (new_log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (node_id! Int) (updates! Poly) (new_updates! Poly) (new_rid! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other_augment. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) new_log! (I queueIndex!) (I logIndexLower!) (I (nClip (Add logIndexUpper! 1))) (I node_id!) new_updates!)) :pattern ((ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other_augment. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeMatchesQueue_append_other")
(declare-fun req%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other. (Dcr Type vstd!seq.Seq<nat.>. Poly Poly Int Int Int Int Int Poly Poly Int lib!spec.types.LogEntry.) Bool)
(declare-const %%global_location_label%%152 Bool)
(declare-const %%global_location_label%%153 Bool)
(declare-const %%global_location_label%%154 Bool)
(declare-const %%global_location_label%%155 Bool)
(declare-const %%global_location_label%%156 Bool)
(declare-const %%global_location_label%%157 Bool)
(declare-const %%global_location_label%%158 Bool)
(declare-const %%global_location_label%%159 Bool)
(declare-const %%global_location_label%%160 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (new_log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (logLen! Int) (node_id! Int) (updates! Poly) (new_updates! Poly) (new_rid! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (req%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! logLen! node_id! updates! new_updates! new_rid! log_entry!) (and (=> %%global_location_label%%152 (and (<= 0 queueIndex!) (<= queueIndex! (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!))))) (=> %%global_location_label%%153 (and (<= logIndexLower! logIndexUpper!) (<= logIndexUpper! logLen!))) (=> %%global_location_label%%154 (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry!))) node_id!))) (=> %%global_location_label%%155 (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates!) (I new_rid!))) (=> %%global_location_label%%156 (= (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates! (I new_rid!))) (lib!spec.unbounded_log.UpdateState./Placed (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry!))) (%I (I logLen!))))) (=> %%global_location_label%%157 (not (vstd!seq_lib.impl&%0.contains.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!) (I new_rid!)))) (=> %%global_location_label%%158 (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates!) rid$) (not (= (%I rid$) new_rid!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates!) rid$) (= (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates! rid$) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates! rid$))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates!) rid$)) ))) (=> %%global_location_label%%159 (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I node_id!) updates!)) (=> %%global_location_label%%160 (= new_log! (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! (I logLen!) (Poly%lib!spec.types.LogEntry. log_entry!)))))) :pattern ((req%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! logLen! node_id! updates! new_updates! new_rid! log_entry!)) )))
(declare-fun ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other. (Dcr Type vstd!seq.Seq<nat.>. Poly Poly Int Int Int Int Int Poly Poly Int lib!spec.types.LogEntry.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (new_log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (logLen! Int) (node_id! Int) (updates! Poly) (new_updates! Poly) (new_rid! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! logLen! node_id! updates! new_updates! new_rid! log_entry!) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) new_log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I node_id!) new_updates!)) :pattern ((ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! logLen! node_id! updates! new_updates! new_rid! log_entry!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::compute_nrstate_at_version_preserves")
(declare-fun req%lib!spec.unbounded_log.compute_nrstate_at_version_preserves. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%161 Bool)
(declare-const %%global_location_label%%162 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (a! Poly) (b! Poly) (version! Int)) (! (= (req%lib!spec.unbounded_log.compute_nrstate_at_version_preserves. DT&. DT& a! b! version!) (and (=> %%global_location_label%%161 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) version!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) a!) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) a!) i$)) ))) (=> %%global_location_label%%162 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) version!)) (= (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) a! i$) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) b! i$)))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) a! i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) b! i$)) ))))) :pattern ((req%lib!spec.unbounded_log.compute_nrstate_at_version_preserves. DT&. DT& a! b! version!)) )))
(declare-fun ens%lib!spec.unbounded_log.compute_nrstate_at_version_preserves. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (a! Poly) (b! Poly) (version! Int)) (! (= (ens%lib!spec.unbounded_log.compute_nrstate_at_version_preserves. DT&. DT& a! b! version!) (= (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& a! (I version!)) (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& b! (I version!)))) :pattern ((ens%lib!spec.unbounded_log.compute_nrstate_at_version_preserves. DT&. DT& a! b! version!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::update_place_ops_in_log_one_inductive")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int Int) Bool)
(declare-const %%global_location_label%%163 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int) (rid! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_inductive. DT&. DT& pre! post! node_id! rid!) (=> %%global_location_label%%163 (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_strong.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!) (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (I node_id!) (I rid!))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_inductive. DT&. DT& pre! post! node_id! rid!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (node_id! Int) (rid! Int)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_inductive. DT&. DT& pre! post! node_id! rid!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.update_place_ops_in_log_one_inductive. DT&. DT& pre! post! node_id! rid!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::update_place_ops_in_log_one_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:992:5: 992:97 (#0)")
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::update_place_ops_in_log_one_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:265:1: 1171:2 (#1108)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::update_place_ops_in_log_one")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_place_ops_in_log_one. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int Int lib!spec.unbounded_log.UnboundedLog.tail. lib!spec.unbounded_log.UnboundedLog.local_updates. lib!spec.unbounded_log.UnboundedLog.combiner.) Bool)
(declare-const %%global_location_label%%164 Bool)
(declare-const %%global_location_label%%165 Bool)
(declare-const %%global_location_label%%166 Bool)
(declare-const %%global_location_label%%167 Bool)
(declare-const %%global_location_label%%168 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (rid! Int) (pre%param_token_tail! lib!spec.unbounded_log.UnboundedLog.tail.) (param_token_1_local_updates! lib!spec.unbounded_log.UnboundedLog.local_updates.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_place_ops_in_log_one. DT&. DT& self! node_id! rid! pre%param_token_tail! param_token_1_local_updates! param_token_0_combiner!) (and (=> %%global_location_label%%164 (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.tail. pre%param_token_tail!))))) self!)) (=> %%global_location_label%%165 (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_1_local_updates!))))) self!)) (=> %%global_location_label%%166 (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) self!)) (=> %%global_location_label%%167 (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))) node_id!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (and (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) true))))) (=> %%global_location_label%%168 (let ((queued_ops$ (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$1 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$1) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_1_local_updates!))))) rid!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_1_local_updates!))))))) (and (is-lib!spec.unbounded_log.UpdateState./Init_ tmp%%$) (let ((op$ (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) true)))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_place_ops_in_log_one. DT&. DT& self! node_id! rid! pre%param_token_tail! param_token_1_local_updates! param_token_0_combiner!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_place_ops_in_log_one. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int Int lib!spec.unbounded_log.UnboundedLog.tail. lib!spec.unbounded_log.UnboundedLog.tail. lib!spec.unbounded_log.UnboundedLog.local_updates. lib!spec.unbounded_log.UnboundedLog.combiner. tuple%3.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (node_id! Int) (rid! Int) (pre%param_token_tail! lib!spec.unbounded_log.UnboundedLog.tail.) (param_token_tail! lib!spec.unbounded_log.UnboundedLog.tail.) (param_token_1_local_updates! lib!spec.unbounded_log.UnboundedLog.local_updates.) (param_token_0_combiner! lib!spec.unbounded_log.UnboundedLog.combiner.) (tmp_tuple! tuple%3.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_place_ops_in_log_one. DT&. DT& self! node_id! rid! pre%param_token_tail! param_token_tail! param_token_1_local_updates! param_token_0_combiner! tmp_tuple!) (and (has_type (Poly%tuple%3. tmp_tuple!) (TYPE%tuple%3. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.log. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&) (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.tail. param_token_tail!) (TYPE%lib!spec.unbounded_log.UnboundedLog.tail. DT&. DT&)) (let ((param_token_2_log$ (%Poly%lib!spec.unbounded_log.UnboundedLog.log. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp_tuple!)))))) (let ((param_token_3_local_updates$ (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp_tuple!)))))) (let ((param_token_4_combiner$ (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp_tuple!)))))) (let ((param_token_2_log$1 param_token_2_log$)) (let ((param_token_3_local_updates$1 param_token_3_local_updates$)) (let ((param_token_4_combiner$1 param_token_4_combiner$)) (and (and (and (and (and (and (and (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_2_log$1))))) self!) (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.tail. param_token_tail!))))) self!)) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_3_local_updates$1))))) self!)) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_4_combiner$1))))) self!)) (let ((queued_ops$ (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$1 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$1) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (let ((op$ (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_1_local_updates!))))))) (ite (is-lib!spec.unbounded_log.UpdateState./Init_ tmp%%$) (let ((op$1 (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) op$1) (vstd!pervasive.arbitrary.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))))) (and (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_2_log$1))))) (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.tail. pre%param_token_tail!)))))) (= (lib!spec.unbounded_log.UnboundedLog.log_token_data./log_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.log_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%4.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.log. param_token_2_log$1))))) (lib!spec.types.LogEntry./LogEntry op$ (%I (I node_id!)))))))) (let ((queued_ops$ (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$3 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$3) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (let ((op$ (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_1_local_updates!))))))) (ite (is-lib!spec.unbounded_log.UpdateState./Init_ tmp%%$) (let ((op$3 (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) op$3) (vstd!pervasive.arbitrary.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))))) (and (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_3_local_updates$1))))) rid!) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_3_local_updates$1))))) (lib!spec.unbounded_log.UpdateState./Placed op$ (%I (I (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.tail. pre%param_token_tail!))))))))))))) (let ((queued_ops$ (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$5 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$5) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (let ((op$ (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_1_local_updates!))))))) (ite (is-lib!spec.unbounded_log.UpdateState./Init_ tmp%%$) (let ((op$5 (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) op$5) (vstd!pervasive.arbitrary.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))))) (and (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_4_combiner$1))))) node_id!) (= (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_4_combiner$1))))) (lib!spec.unbounded_log.CombinerState./Placed (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.push.? $ NAT (Poly%vstd!seq.Seq<nat.>. queued_ops$) (I rid!))))))))) (= (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.tail. param_token_tail!))))) (let ((queued_ops$ (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.combiner_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%11.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.combiner. param_token_0_combiner!))))))) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ tmp%%$) (let ((queued_ops$7 (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. tmp%%$))))) queued_ops$7) (%Poly%vstd!seq.Seq<nat.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!seq.Seq. $ NAT))))))) (let ((op$ (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates. param_token_1_local_updates!))))))) (ite (is-lib!spec.unbounded_log.UpdateState./Init_ tmp%%$) (let ((op$7 (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. tmp%%$))))) op$7) (vstd!pervasive.arbitrary.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))))) (nClip (Add (lib!spec.unbounded_log.UnboundedLog.tail_token_data./tail_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.tail_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%5.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.tail. pre%param_token_tail!))))) 1)))))))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.update_place_ops_in_log_one. DT&. DT& self! node_id! rid! pre%param_token_tail! param_token_tail! param_token_1_local_updates! param_token_0_combiner! tmp_tuple!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::readonly_version_upper_bound_inductive")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(declare-const %%global_location_label%%169 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (rid! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_inductive. DT&. DT& pre! post! rid!) (=> %%global_location_label%%169 (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_strong.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!) (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (I rid!))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_inductive. DT&. DT& pre! post! rid!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (rid! Int)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_inductive. DT&. DT& pre! post! rid!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_version_upper_bound_inductive. DT&. DT& pre! post! rid!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::readonly_version_upper_bound_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:862:5: 862:81 (#0)")
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::readonly_version_upper_bound_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:265:1: 1171:2 (#1108)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::readonly_version_upper_bound")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.readonly_version_upper_bound. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.version_upper_bound. lib!spec.unbounded_log.UnboundedLog.local_reads.) Bool)
(declare-const %%global_location_label%%170 Bool)
(declare-const %%global_location_label%%171 Bool)
(declare-const %%global_location_label%%172 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (rid! Int) (param_token_version_upper_bound! lib!spec.unbounded_log.UnboundedLog.version_upper_bound.) (param_token_0_local_reads! lib!spec.unbounded_log.UnboundedLog.local_reads.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.readonly_version_upper_bound. DT&. DT& self! rid! param_token_version_upper_bound! param_token_0_local_reads!) (and (=> %%global_location_label%%170 (= (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. param_token_version_upper_bound!))))) self!)) (=> %%global_location_label%%171 (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_0_local_reads!))))) self!)) (=> %%global_location_label%%172 (and (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_0_local_reads!))))) rid!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_0_local_reads!))))))) (and (is-lib!spec.unbounded_log.ReadonlyState./Init_ tmp%%$) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) true))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.readonly_version_upper_bound. DT&. DT& self! rid! param_token_version_upper_bound! param_token_0_local_reads!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.readonly_version_upper_bound. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int lib!spec.unbounded_log.UnboundedLog.version_upper_bound. lib!spec.unbounded_log.UnboundedLog.local_reads. lib!spec.unbounded_log.UnboundedLog.local_reads.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (rid! Int) (param_token_version_upper_bound! lib!spec.unbounded_log.UnboundedLog.version_upper_bound.) (param_token_0_local_reads! lib!spec.unbounded_log.UnboundedLog.local_reads.) (param_token_1_local_reads! lib!spec.unbounded_log.UnboundedLog.local_reads.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.readonly_version_upper_bound. DT&. DT& self! rid! param_token_version_upper_bound! param_token_0_local_reads! param_token_1_local_reads!) (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_1_local_reads!) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&)) (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_1_local_reads!))))) self!) (let ((op$ (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_0_local_reads!))))))) (ite (is-lib!spec.unbounded_log.ReadonlyState./Init_ tmp%%$) (let ((op$1 (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) op$1) (vstd!pervasive.arbitrary.? (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)))))) (and (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_1_local_reads!))))) rid!) (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_1_local_reads!))))) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound op$ (%I (I (lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data./version_upper_bound_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%8.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.version_upper_bound. param_token_version_upper_bound!))))))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.readonly_version_upper_bound. DT&. DT& self! rid! param_token_version_upper_bound! param_token_0_local_reads! param_token_1_local_reads!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::readonly_ready_to_read_inductive")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int Int) Bool)
(declare-const %%global_location_label%%173 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (rid! Int) (node_id! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_inductive. DT&. DT& pre! post! rid! node_id!) (=> %%global_location_label%%173 (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_strong.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!) (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (I rid!) (I node_id!))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_inductive. DT&. DT& pre! post! rid! node_id!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (rid! Int) (node_id! Int)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_inductive. DT&. DT& pre! post! rid! node_id!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_ready_to_read_inductive. DT&. DT& pre! post! rid! node_id!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::readonly_ready_to_read_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:865:5: 865:92 (#0)")
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::readonly_ready_to_read_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:265:1: 1171:2 (#1108)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::Instance::readonly_ready_to_read")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%12.readonly_ready_to_read. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int Int lib!spec.unbounded_log.UnboundedLog.local_versions. lib!spec.unbounded_log.UnboundedLog.local_reads.) Bool)
(declare-const %%global_location_label%%174 Bool)
(declare-const %%global_location_label%%175 Bool)
(declare-const %%global_location_label%%176 Bool)
(declare-const %%global_location_label%%177 Bool)
(declare-const %%global_location_label%%178 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (rid! Int) (node_id! Int) (param_token_1_local_versions! lib!spec.unbounded_log.UnboundedLog.local_versions.) (param_token_0_local_reads! lib!spec.unbounded_log.UnboundedLog.local_reads.)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%12.readonly_ready_to_read. DT&. DT& self! rid! node_id! param_token_1_local_versions! param_token_0_local_reads!) (and (=> %%global_location_label%%174 (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. param_token_1_local_versions!))))) self!)) (=> %%global_location_label%%175 (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_0_local_reads!))))) self!)) (=> %%global_location_label%%176 (and (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_0_local_reads!))))) rid!) (let ((tmp%%$ (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_0_local_reads!))))))) (and (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ tmp%%$) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$))))) true)))))) (=> %%global_location_label%%177 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_0_local_reads!))))))) (ite (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ tmp%%$1) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$1))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$1))))) (tuple%2./tuple%2 op$ (I version_upper_bound$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) $ NAT))))))) (let ((op$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((version_upper_bound$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (= (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. param_token_1_local_versions!))))) node_id!))))) (=> %%global_location_label%%178 (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_0_local_reads!))))))) (ite (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ tmp%%$1) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$1))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$1))))) (tuple%2./tuple%2 op$ (I version_upper_bound$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) $ NAT))))))) (let ((op$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((version_upper_bound$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((local_head$ (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. param_token_1_local_versions!))))))) (>= local_head$ version_upper_bound$)))))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%12.readonly_ready_to_read. DT&. DT& self! rid! node_id! param_token_1_local_versions! param_token_0_local_reads!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.readonly_ready_to_read. (Dcr Type lib!spec.unbounded_log.UnboundedLog.Instance. Int Int lib!spec.unbounded_log.UnboundedLog.local_versions. lib!spec.unbounded_log.UnboundedLog.local_reads. lib!spec.unbounded_log.UnboundedLog.local_reads.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!spec.unbounded_log.UnboundedLog.Instance.) (rid! Int) (node_id! Int) (param_token_1_local_versions! lib!spec.unbounded_log.UnboundedLog.local_versions.) (param_token_0_local_reads! lib!spec.unbounded_log.UnboundedLog.local_reads.) (param_token_2_local_reads! lib!spec.unbounded_log.UnboundedLog.local_reads.)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.readonly_ready_to_read. DT&. DT& self! rid! node_id! param_token_1_local_versions! param_token_0_local_reads! param_token_2_local_reads!) (and (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_2_local_reads!) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_reads. DT&. DT&)) (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_2_local_reads!))))) self!) (let ((tmp%%$ (let ((tmp%%$1 (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_0_local_reads!))))))) (ite (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ tmp%%$1) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$1))))) (let ((version_upper_bound$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. tmp%%$1))))) (tuple%2./tuple%2 op$ (I version_upper_bound$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) $ NAT))))))) (let ((op$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((version_upper_bound$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((local_head$ (lib!spec.unbounded_log.UnboundedLog.local_versions_token_data./local_versions_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%7.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_versions. param_token_1_local_versions!))))))) (and (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_2_local_reads!))))) rid!) (= (lib!spec.unbounded_log.UnboundedLog.local_reads_token_data./local_reads_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%9.view.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.local_reads. param_token_2_local_reads!))))) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead op$ (%I (I version_upper_bound$)) (%I (I node_id!))))))))))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%12.readonly_ready_to_read. DT&. DT& self! rid! node_id! param_token_1_local_versions! param_token_0_local_reads! param_token_2_local_reads!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::UnboundedLog::State::readonly_apply_inductive")
(declare-fun req%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(declare-const %%global_location_label%%179 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (rid! Int)) (! (= (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_inductive. DT&. DT& pre! post! rid!) (=> %%global_location_label%%179 (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_strong.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!) (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (I rid!))))) :pattern ((req%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_inductive. DT&. DT& pre! post! rid!)) )))
(declare-fun ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_inductive. (Dcr Type lib!spec.unbounded_log.UnboundedLog.State. lib!spec.unbounded_log.UnboundedLog.State. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.unbounded_log.UnboundedLog.State.) (post! lib!spec.unbounded_log.UnboundedLog.State.) (rid! Int)) (! (= (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_inductive. DT&. DT& pre! post! rid!) (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) :pattern ((ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_inductive. DT&. DT& pre! post! rid!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::UnboundedLog::State::readonly_apply_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:880:5: 880:67 (#0)")
(declare-const DT&. Dcr)
(declare-const DT& Type)
(declare-const pre! lib!spec.unbounded_log.UnboundedLog.State.)
(declare-const post! lib!spec.unbounded_log.UnboundedLog.State.)
(declare-const rid! Int)
(declare-const tmp%1 Bool)
(declare-const ret@ Poly)
(declare-const nid@ Int)
(declare-const vup@ Int)
(declare-const v@ Int)
(assert fuel_defaults)
(assert (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)))
(assert (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (TYPE%lib!spec.unbounded_log.UnboundedLog.State. DT&. DT&)))
(assert (<= 0 rid!))
(assert (tr_bound%lib!Dispatch. DT&. DT&))
(assert (and (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!)) (lib!spec.unbounded_log.UnboundedLog.impl&%13.readonly_apply_strong.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. pre!) (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!) (I rid!))))
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; could not show invariant `inv_request_ids_finite` on the `post` state")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; could not show invariant `inv_local_combiner_complete` on the `post` state")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; could not show invariant `combiner_local_versions_domains` on the `post` state")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; could not show invariant `combiner_replicas_domains` on the `post` state")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; could not show invariant `inv_version_in_range` on the `post` state")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; could not show invariant `inv_local_version_upper_bound_heads` on the `post` state")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; could not show invariant `inv_readonly_requests_wf` on the `post` state")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; could not show invariant `combiner_states_wf` on the `post` state")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; could not show invariant `inv_log_complete` on the `post` state")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; could not show invariant `inv_local_updates` on the `post` state")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; could not show invariant `inv_read_results` on the `post` state")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; could not show invariant `inv_update_results` on the `post` state")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; could not show invariant `inv_combiner_rids_distinct` on the `post` state")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; could not show invariant `replica_state` on the `post` state")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%15 Bool)
(assert (not (=> (= ret@ (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) (I rid!))))) (=> (= nid@ (lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) (I rid!))))) (=> (= vup@ (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&) (lib!spec.unbounded_log.UnboundedLog.State./State/local_reads (%Poly%lib!spec.unbounded_log.UnboundedLog.State. (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))) (I rid!))))) (=> (= v@ (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.unbounded_log.UnboundedLog.State./State/local_versions (%Poly%lib!spec.unbounded_log.UnboundedLog.State. (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)))) (I nid@)))) (=> (= tmp%1 (lib!spec.utils.rangeincl.? (I vup@) (I v@) (I (lib!spec.unbounded_log.UnboundedLog.State./State/version_upper_bound (%Poly%lib!spec.unbounded_log.UnboundedLog.State. (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!)))))) (and (=> %%location_label%%0 tmp%1) (=> tmp%1 (and (=> %%location_label%%1 (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_request_ids_finite. DT&. DT& post!)) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_request_ids_finite. DT&. DT& post!) (and (=> %%location_label%%2 (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_combiner_complete. DT&. DT& post!)) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_combiner_complete. DT&. DT& post!) (and (=> %%location_label%%3 (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_local_versions_domains. DT&. DT& post!)) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_local_versions_domains. DT&. DT& post!) (and (=> %%location_label%%4 (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_replicas_domains. DT&. DT& post!)) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_replicas_domains. DT&. DT& post!) (and (=> %%location_label%%5 (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_version_in_range. DT&. DT& post!)) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_version_in_range. DT&. DT& post!) (and (=> %%location_label%%6 (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_version_upper_bound_heads. DT&. DT& post!)) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_version_upper_bound_heads. DT&. DT& post!) (and (=> %%location_label%%7 (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_readonly_requests_wf. DT&. DT& post!)) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_readonly_requests_wf. DT&. DT& post!) (and (=> %%location_label%%8 (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_states_wf. DT&. DT& post!)) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_combiner_states_wf. DT&. DT& post!) (and (=> %%location_label%%9 (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_log_complete. DT&. DT& post!)) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_log_complete. DT&. DT& post!) (and (=> %%location_label%%10 (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_updates. DT&. DT& post!)) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_local_updates. DT&. DT& post!) (and (=> %%location_label%%11 (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_read_results. DT&. DT& post!)) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_read_results. DT&. DT& post!) (and (=> %%location_label%%12 (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_update_results. DT&. DT& post!)) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_update_results. DT&. DT& post!) (and (=> %%location_label%%13 (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_combiner_rids_distinct. DT&. DT& post!)) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_inv_combiner_rids_distinct. DT&. DT& post!) (and (=> %%location_label%%14 (req%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_replica_state. DT&. DT& post!)) (=> (ens%lib!spec.unbounded_log.UnboundedLog.impl&%13.lemma_msg_replica_state. DT&. DT& post!) (=> %%location_label%%15 (lib!spec.unbounded_log.UnboundedLog.impl&%13.invariant.? DT&. DT& (Poly%lib!spec.unbounded_log.UnboundedLog.State. post!))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
