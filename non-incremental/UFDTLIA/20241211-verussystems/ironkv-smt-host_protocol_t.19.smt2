(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module host_protocol_t'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.arrow_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.is_some. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!map.impl&%0.total. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.skip. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map_values. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.filter_lemma. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!seq_lib.seq_to_set_is_finite. FuelId)
(declare-const fuel%vstd!set.impl&%0.full. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_complement. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.is_full. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.is_empty. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!set_lib.axiom_is_empty. FuelId)
(declare-const fuel%lib!verus_extra.set_lib_ext_v.flatten_sets. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%0.lt. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%2.between. FuelId)
(declare-const fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address. FuelId)
(declare-const fuel%lib!abstract_parameters_t.impl&%0.static_params. FuelId)
(declare-const fuel%lib!app_interface_t.max_val_len. FuelId)
(declare-const fuel%lib!app_interface_t.valid_key. FuelId)
(declare-const fuel%lib!app_interface_t.valid_value. FuelId)
(declare-const fuel%lib!app_interface_t.extract_range. FuelId)
(declare-const fuel%lib!delegation_map_t.impl&%0.init. FuelId)
(declare-const fuel%lib!delegation_map_t.impl&%0.view. FuelId)
(declare-const fuel%lib!delegation_map_t.impl&%0.spec_index. FuelId)
(declare-const fuel%lib!delegation_map_t.impl&%0.is_complete. FuelId)
(declare-const fuel%lib!delegation_map_t.impl&%0.update. FuelId)
(declare-const fuel%lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host. FuelId)
(declare-const fuel%lib!environment_t.impl&%0.arrow_Send_s. FuelId)
(declare-const fuel%lib!environment_t.impl&%0.arrow_Receive_r. FuelId)
(declare-const fuel%lib!host_protocol_t.impl&%0.wf. FuelId)
(declare-const fuel%lib!host_protocol_t.max_hashtable_size. FuelId)
(declare-const fuel%lib!host_protocol_t.valid_hashtable. FuelId)
(declare-const fuel%lib!host_protocol_t.hashtable_lookup. FuelId)
(declare-const fuel%lib!host_protocol_t.bulk_update_domain. FuelId)
(declare-const fuel%lib!host_protocol_t.bulk_update_hashtable. FuelId)
(declare-const fuel%lib!host_protocol_t.bulk_remove_hashtable. FuelId)
(declare-const fuel%lib!host_protocol_t.valid_optional_value. FuelId)
(declare-const fuel%lib!host_protocol_t.okay_to_ignore_packets. FuelId)
(declare-const fuel%lib!host_protocol_t.receive_packet. FuelId)
(declare-const fuel%lib!host_protocol_t.extract_sent_packets_from_ios. FuelId)
(declare-const fuel%lib!host_protocol_t.extract_packet_from_lsht_packet. FuelId)
(declare-const fuel%lib!host_protocol_t.extract_packets_from_lsht_packets. FuelId)
(declare-const fuel%lib!host_protocol_t.extract_packets_from_abstract_ios. FuelId)
(declare-const fuel%lib!host_protocol_t.receive_packet_wrapper. FuelId)
(declare-const fuel%lib!host_protocol_t.receive_packet_without_reading_clock. FuelId)
(declare-const fuel%lib!host_protocol_t.receive_packet_next. FuelId)
(declare-const fuel%lib!host_protocol_t.next_get_request_reply. FuelId)
(declare-const fuel%lib!host_protocol_t.next_get_request. FuelId)
(declare-const fuel%lib!host_protocol_t.next_set_request_complete. FuelId)
(declare-const fuel%lib!host_protocol_t.next_set_request. FuelId)
(declare-const fuel%lib!host_protocol_t.next_delegate. FuelId)
(declare-const fuel%lib!host_protocol_t.next_shard. FuelId)
(declare-const fuel%lib!host_protocol_t.next_shard_wrapper_must_reject. FuelId)
(declare-const fuel%lib!host_protocol_t.next_shard_wrapper. FuelId)
(declare-const fuel%lib!host_protocol_t.next_reply. FuelId)
(declare-const fuel%lib!host_protocol_t.next_redirect. FuelId)
(declare-const fuel%lib!host_protocol_t.should_process_received_message. FuelId)
(declare-const fuel%lib!host_protocol_t.process_message. FuelId)
(declare-const fuel%lib!host_protocol_t.process_received_packet. FuelId)
(declare-const fuel%lib!host_protocol_t.process_received_packet_next. FuelId)
(declare-const fuel%lib!host_protocol_t.spontaneously_retransmit. FuelId)
(declare-const fuel%lib!host_protocol_t.spontaneously_retransmit_next. FuelId)
(declare-const fuel%lib!host_protocol_t.ignore_unparseable_packet. FuelId)
(declare-const fuel%lib!host_protocol_t.ignore_nonsensical_delegation_packet. FuelId)
(declare-const fuel%lib!host_protocol_t.parse_arg_as_end_point. FuelId)
(declare-const fuel%lib!host_protocol_t.unchecked_parse_args. FuelId)
(declare-const fuel%lib!host_protocol_t.parse_args. FuelId)
(declare-const fuel%lib!host_protocol_t.init. FuelId)
(declare-const fuel%lib!host_protocol_t.next_step. FuelId)
(declare-const fuel%lib!host_protocol_t.no_invalid_sends. FuelId)
(declare-const fuel%lib!host_protocol_t.next. FuelId)
(declare-const fuel%lib!keys_t.impl&%3.new_spec. FuelId)
(declare-const fuel%lib!keys_t.impl&%3.lt_spec. FuelId)
(declare-const fuel%lib!keys_t.impl&%3.geq_spec. FuelId)
(declare-const fuel%lib!keys_t.impl&%4.contains. FuelId)
(declare-const fuel%lib!keys_t.impl&%4.is_empty. FuelId)
(declare-const fuel%lib!keys_t.impl&%13.cmp_spec. FuelId)
(declare-const fuel%lib!message_t.impl&%0.arrow_GetRequest_key. FuelId)
(declare-const fuel%lib!message_t.impl&%0.arrow_SetRequest_key. FuelId)
(declare-const fuel%lib!message_t.impl&%0.arrow_SetRequest_value. FuelId)
(declare-const fuel%lib!message_t.impl&%0.arrow_Shard_range. FuelId)
(declare-const fuel%lib!message_t.impl&%0.arrow_Shard_recipient. FuelId)
(declare-const fuel%lib!message_t.impl&%0.arrow_Delegate_range. FuelId)
(declare-const fuel%lib!message_t.impl&%0.arrow_Delegate_h. FuelId)
(declare-const fuel%lib!single_delivery_t.tombstone_table_lookup. FuelId)
(declare-const fuel%lib!single_delivery_t.truncate_un_ack_list. FuelId)
(declare-const fuel%lib!single_delivery_t.ack_state_lookup. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.init. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.new_single_message. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.receive_ack. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.receive_real_packet. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.should_ack_single_message. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.send_ack. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.maybe_ack_packet. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.receive. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.send_single_message. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.receive_no_message. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.send_no_message. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dests. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%2.un_acked_messages. FuelId)
(declare-const fuel%lib!single_message_t.impl&%0.arrow_Message_seqno. FuelId)
(declare-const fuel%lib!single_message_t.impl&%0.arrow_Message_dst. FuelId)
(declare-const fuel%lib!single_message_t.impl&%0.arrow_Message_m. FuelId)
(declare-const fuel%lib!single_message_t.impl&%0.arrow_Ack_ack_seqno. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.option.impl&%0.arrow_Some_0. fuel%vstd!std_specs.option.is_some. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!map.impl&%0.total. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.skip. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq_lib.impl&%0.map. fuel%vstd!seq_lib.impl&%0.map_values. fuel%vstd!seq_lib.impl&%0.filter_lemma. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!seq_lib.seq_to_set_is_finite. fuel%vstd!set.impl&%0.full. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_complement. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_empty_len. fuel%vstd!set.axiom_set_insert_len. fuel%vstd!set.axiom_set_remove_len. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!set_lib.impl&%0.is_full. fuel%vstd!set_lib.impl&%0.is_empty. fuel%vstd!set_lib.impl&%0.map. fuel%vstd!set_lib.axiom_is_empty. fuel%lib!verus_extra.set_lib_ext_v.flatten_sets. fuel%lib!delegation_map_v.impl&%0.lt. fuel%lib!delegation_map_v.impl&%2.between. fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address. fuel%lib!abstract_parameters_t.impl&%0.static_params. fuel%lib!app_interface_t.max_val_len. fuel%lib!app_interface_t.valid_key. fuel%lib!app_interface_t.valid_value. fuel%lib!app_interface_t.extract_range. fuel%lib!delegation_map_t.impl&%0.init. fuel%lib!delegation_map_t.impl&%0.view. fuel%lib!delegation_map_t.impl&%0.spec_index. fuel%lib!delegation_map_t.impl&%0.is_complete. fuel%lib!delegation_map_t.impl&%0.update. fuel%lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host. fuel%lib!environment_t.impl&%0.arrow_Send_s. fuel%lib!environment_t.impl&%0.arrow_Receive_r. fuel%lib!host_protocol_t.impl&%0.wf. fuel%lib!host_protocol_t.max_hashtable_size. fuel%lib!host_protocol_t.valid_hashtable. fuel%lib!host_protocol_t.hashtable_lookup. fuel%lib!host_protocol_t.bulk_update_domain. fuel%lib!host_protocol_t.bulk_update_hashtable. fuel%lib!host_protocol_t.bulk_remove_hashtable. fuel%lib!host_protocol_t.valid_optional_value. fuel%lib!host_protocol_t.okay_to_ignore_packets. fuel%lib!host_protocol_t.receive_packet. fuel%lib!host_protocol_t.extract_sent_packets_from_ios. fuel%lib!host_protocol_t.extract_packet_from_lsht_packet. fuel%lib!host_protocol_t.extract_packets_from_lsht_packets. fuel%lib!host_protocol_t.extract_packets_from_abstract_ios. fuel%lib!host_protocol_t.receive_packet_wrapper. fuel%lib!host_protocol_t.receive_packet_without_reading_clock. fuel%lib!host_protocol_t.receive_packet_next. fuel%lib!host_protocol_t.next_get_request_reply. fuel%lib!host_protocol_t.next_get_request. fuel%lib!host_protocol_t.next_set_request_complete. fuel%lib!host_protocol_t.next_set_request. fuel%lib!host_protocol_t.next_delegate. fuel%lib!host_protocol_t.next_shard. fuel%lib!host_protocol_t.next_shard_wrapper_must_reject. fuel%lib!host_protocol_t.next_shard_wrapper. fuel%lib!host_protocol_t.next_reply. fuel%lib!host_protocol_t.next_redirect. fuel%lib!host_protocol_t.should_process_received_message. fuel%lib!host_protocol_t.process_message. fuel%lib!host_protocol_t.process_received_packet. fuel%lib!host_protocol_t.process_received_packet_next. fuel%lib!host_protocol_t.spontaneously_retransmit. fuel%lib!host_protocol_t.spontaneously_retransmit_next. fuel%lib!host_protocol_t.ignore_unparseable_packet. fuel%lib!host_protocol_t.ignore_nonsensical_delegation_packet. fuel%lib!host_protocol_t.parse_arg_as_end_point. fuel%lib!host_protocol_t.unchecked_parse_args. fuel%lib!host_protocol_t.parse_args. fuel%lib!host_protocol_t.init. fuel%lib!host_protocol_t.next_step. fuel%lib!host_protocol_t.no_invalid_sends. fuel%lib!host_protocol_t.next. fuel%lib!keys_t.impl&%3.new_spec. fuel%lib!keys_t.impl&%3.lt_spec. fuel%lib!keys_t.impl&%3.geq_spec. fuel%lib!keys_t.impl&%4.contains. fuel%lib!keys_t.impl&%4.is_empty. fuel%lib!keys_t.impl&%13.cmp_spec. fuel%lib!message_t.impl&%0.arrow_GetRequest_key. fuel%lib!message_t.impl&%0.arrow_SetRequest_key. fuel%lib!message_t.impl&%0.arrow_SetRequest_value. fuel%lib!message_t.impl&%0.arrow_Shard_range. fuel%lib!message_t.impl&%0.arrow_Shard_recipient. fuel%lib!message_t.impl&%0.arrow_Delegate_range. fuel%lib!message_t.impl&%0.arrow_Delegate_h. fuel%lib!single_delivery_t.tombstone_table_lookup. fuel%lib!single_delivery_t.truncate_un_ack_list. fuel%lib!single_delivery_t.ack_state_lookup. fuel%lib!single_delivery_t.impl&%1.init. fuel%lib!single_delivery_t.impl&%1.new_single_message. fuel%lib!single_delivery_t.impl&%1.receive_ack. fuel%lib!single_delivery_t.impl&%1.receive_real_packet. fuel%lib!single_delivery_t.impl&%1.should_ack_single_message. fuel%lib!single_delivery_t.impl&%1.send_ack. fuel%lib!single_delivery_t.impl&%1.maybe_ack_packet. fuel%lib!single_delivery_t.impl&%1.receive. fuel%lib!single_delivery_t.impl&%1.send_single_message. fuel%lib!single_delivery_t.impl&%1.receive_no_message. fuel%lib!single_delivery_t.impl&%1.send_no_message. fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to. fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest. fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dests. fuel%lib!single_delivery_t.impl&%2.un_acked_messages. fuel%lib!single_message_t.impl&%0.arrow_Message_seqno. fuel%lib!single_message_t.impl&%0.arrow_Message_dst. fuel%lib!single_message_t.impl&%0.arrow_Message_m. fuel%lib!single_message_t.impl&%0.arrow_Ack_ack_seqno. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.filter_lemma.) (fuel_bool_default fuel%vstd!seq_lib.seq_to_set_is_finite.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_complement.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_len.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_len.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.))))
(assert (=> (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!set_lib.axiom_is_empty.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. 0)
(declare-sort vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. 0)
(declare-sort vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. 0)
(declare-sort vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. 0)
(declare-sort vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. 0)
(declare-sort vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. 0)
(declare-sort vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. 0)
(declare-sort vstd!seq.Seq<lib!network_t.Packet.>. 0)
(declare-sort vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. 0)
(declare-sort vstd!seq.Seq<vstd!seq.Seq<u8.>.>. 0)
(declare-sort vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. 0)
(declare-sort vstd!set.Set<lib!keys_t.SHTKey.>. 0)
(declare-sort vstd!set.Set<lib!network_t.Packet.>. 0)
(declare-sort vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. 0)
(declare-datatypes ((core!option.Option. 0) (lib!abstract_end_point_t.AbstractEndPoint. 0) (lib!abstract_parameters_t.AbstractParameters. 0) (lib!abstract_service_t.AppRequest. 0) (lib!delegation_map_t.AbstractDelegationMap. 0) (lib!environment_t.LPacket. 0) (lib!environment_t.LIoOp. 0) (lib!host_protocol_t.AbstractConstants. 0) (lib!host_protocol_t.AbstractHostState. 0) (lib!host_protocol_t.Step. 0) (lib!keys_t.Ordering. 0) (lib!keys_t.KeyIterator. 0) (lib!keys_t.KeyRange. 0) (lib!keys_t.SHTKey. 0) (lib!message_t.Message. 0) (lib!network_t.Packet. 0) (lib!single_delivery_t.AckState. 0) (lib!single_delivery_t.SingleDelivery. 0) (lib!single_message_t.SingleMessage. 0) (tuple%0. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/?id vstd!seq.Seq<u8.>.))) ((lib!abstract_parameters_t.AbstractParameters./AbstractParameters (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/?max_seqno Int) (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/?max_delegations Int))) ((lib!abstract_service_t.AppRequest./AppGetRequest (lib!abstract_service_t.AppRequest./AppGetRequest/?seqno Int) (lib!abstract_service_t.AppRequest./AppGetRequest/?key lib!keys_t.SHTKey.)) (lib!abstract_service_t.AppRequest./AppSetRequest (lib!abstract_service_t.AppRequest./AppSetRequest/?seqno Int) (lib!abstract_service_t.AppRequest./AppSetRequest/?key lib!keys_t.SHTKey.) (lib!abstract_service_t.AppRequest./AppSetRequest/?ov core!option.Option.))) ((lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/?0 vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>.))) ((lib!environment_t.LPacket./LPacket (lib!environment_t.LPacket./LPacket/?dst Poly) (lib!environment_t.LPacket./LPacket/?src Poly) (lib!environment_t.LPacket./LPacket/?msg Poly))) ((lib!environment_t.LIoOp./Send (lib!environment_t.LIoOp./Send/?s lib!environment_t.LPacket.)) (lib!environment_t.LIoOp./Receive (lib!environment_t.LIoOp./Receive/?r lib!environment_t.LPacket.)) (lib!environment_t.LIoOp./TimeoutReceive ) (lib!environment_t.LIoOp./ReadClock (lib!environment_t.LIoOp./ReadClock/?t Int))) ((lib!host_protocol_t.AbstractConstants./AbstractConstants (lib!host_protocol_t.AbstractConstants./AbstractConstants/?root_identity lib!abstract_end_point_t.AbstractEndPoint.) (lib!host_protocol_t.AbstractConstants./AbstractConstants/?host_ids vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.) (lib!host_protocol_t.AbstractConstants./AbstractConstants/?params lib!abstract_parameters_t.AbstractParameters.) (lib!host_protocol_t.AbstractConstants./AbstractConstants/?me lib!abstract_end_point_t.AbstractEndPoint.))) ((lib!host_protocol_t.AbstractHostState./AbstractHostState (lib!host_protocol_t.AbstractHostState./AbstractHostState/?constants lib!host_protocol_t.AbstractConstants.) (lib!host_protocol_t.AbstractHostState./AbstractHostState/?delegation_map lib!delegation_map_t.AbstractDelegationMap.) (lib!host_protocol_t.AbstractHostState./AbstractHostState/?h vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.) (lib!host_protocol_t.AbstractHostState./AbstractHostState/?sd lib!single_delivery_t.SingleDelivery.) (lib!host_protocol_t.AbstractHostState./AbstractHostState/?received_packet core!option.Option.) (lib!host_protocol_t.AbstractHostState./AbstractHostState/?num_delegations Int) (lib!host_protocol_t.AbstractHostState./AbstractHostState/?received_requests vstd!seq.Seq<lib!abstract_service_t.AppRequest.>.))) ((lib!host_protocol_t.Step./ReceivePacket ) (lib!host_protocol_t.Step./ProcessReceivedPacket ) (lib!host_protocol_t.Step./SpontaneouslyRetransmit ) (lib!host_protocol_t.Step./Stutter ) (lib!host_protocol_t.Step./IgnoreUnparseablePacket ) (lib!host_protocol_t.Step./IgnoreNonsensicalDelegationPacket )) ((lib!keys_t.Ordering./Less ) (lib!keys_t.Ordering./Equal ) (lib!keys_t.Ordering./Greater )) ((lib!keys_t.KeyIterator./KeyIterator (lib!keys_t.KeyIterator./KeyIterator/?k core!option.Option.))) ((lib!keys_t.KeyRange./KeyRange (lib!keys_t.KeyRange./KeyRange/?lo lib!keys_t.KeyIterator.) (lib!keys_t.KeyRange./KeyRange/?hi lib!keys_t.KeyIterator.))) ((lib!keys_t.SHTKey./SHTKey (lib!keys_t.SHTKey./SHTKey/?ukey Int))) ((lib!message_t.Message./GetRequest (lib!message_t.Message./GetRequest/?key lib!keys_t.SHTKey.)) (lib!message_t.Message./SetRequest (lib!message_t.Message./SetRequest/?key lib!keys_t.SHTKey.) (lib!message_t.Message./SetRequest/?value core!option.Option.)) (lib!message_t.Message./Reply (lib!message_t.Message./Reply/?key lib!keys_t.SHTKey.) (lib!message_t.Message./Reply/?value core!option.Option.)) (lib!message_t.Message./Redirect (lib!message_t.Message./Redirect/?key lib!keys_t.SHTKey.) (lib!message_t.Message./Redirect/?id lib!abstract_end_point_t.AbstractEndPoint.)) (lib!message_t.Message./Shard (lib!message_t.Message./Shard/?range lib!keys_t.KeyRange.) (lib!message_t.Message./Shard/?recipient lib!abstract_end_point_t.AbstractEndPoint.)) (lib!message_t.Message./Delegate (lib!message_t.Message./Delegate/?range lib!keys_t.KeyRange.) (lib!message_t.Message./Delegate/?h vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.))) ((lib!network_t.Packet./Packet (lib!network_t.Packet./Packet/?dst lib!abstract_end_point_t.AbstractEndPoint.) (lib!network_t.Packet./Packet/?src lib!abstract_end_point_t.AbstractEndPoint.) (lib!network_t.Packet./Packet/?msg lib!single_message_t.SingleMessage.))) ((lib!single_delivery_t.AckState./AckState (lib!single_delivery_t.AckState./AckState/?num_packets_acked Int) (lib!single_delivery_t.AckState./AckState/?un_acked Poly))) ((lib!single_delivery_t.SingleDelivery./SingleDelivery (lib!single_delivery_t.SingleDelivery./SingleDelivery/?receive_state vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>.) (lib!single_delivery_t.SingleDelivery./SingleDelivery/?send_state Poly))) ((lib!single_message_t.SingleMessage./Message (lib!single_message_t.SingleMessage./Message/?seqno Int) (lib!single_message_t.SingleMessage./Message/?dst lib!abstract_end_point_t.AbstractEndPoint.) (lib!single_message_t.SingleMessage./Message/?m Poly)) (lib!single_message_t.SingleMessage./Ack (lib!single_message_t.SingleMessage./Ack/?ack_seqno Int)) (lib!single_message_t.SingleMessage./InvalidMessage )) ((tuple%0./tuple%0 ))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id (lib!abstract_end_point_t.AbstractEndPoint.) vstd!seq.Seq<u8.>.)
(declare-fun lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_seqno (lib!abstract_parameters_t.AbstractParameters.) Int)
(declare-fun lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_delegations (lib!abstract_parameters_t.AbstractParameters.) Int)
(declare-fun lib!abstract_service_t.AppRequest./AppGetRequest/seqno (lib!abstract_service_t.AppRequest.) Int)
(declare-fun lib!abstract_service_t.AppRequest./AppGetRequest/key (lib!abstract_service_t.AppRequest.) lib!keys_t.SHTKey.)
(declare-fun lib!abstract_service_t.AppRequest./AppSetRequest/seqno (lib!abstract_service_t.AppRequest.) Int)
(declare-fun lib!abstract_service_t.AppRequest./AppSetRequest/key (lib!abstract_service_t.AppRequest.) lib!keys_t.SHTKey.)
(declare-fun lib!abstract_service_t.AppRequest./AppSetRequest/ov (lib!abstract_service_t.AppRequest.) core!option.Option.)
(declare-fun lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (lib!delegation_map_t.AbstractDelegationMap.) vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>.)
(declare-fun lib!environment_t.LPacket./LPacket/dst (lib!environment_t.LPacket.) Poly)
(declare-fun lib!environment_t.LPacket./LPacket/src (lib!environment_t.LPacket.) Poly)
(declare-fun lib!environment_t.LPacket./LPacket/msg (lib!environment_t.LPacket.) Poly)
(declare-fun lib!environment_t.LIoOp./Send/s (lib!environment_t.LIoOp.) lib!environment_t.LPacket.)
(declare-fun lib!environment_t.LIoOp./Receive/r (lib!environment_t.LIoOp.) lib!environment_t.LPacket.)
(declare-fun lib!environment_t.LIoOp./ReadClock/t (lib!environment_t.LIoOp.) Int)
(declare-fun lib!host_protocol_t.AbstractConstants./AbstractConstants/root_identity (lib!host_protocol_t.AbstractConstants.) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun lib!host_protocol_t.AbstractConstants./AbstractConstants/host_ids (lib!host_protocol_t.AbstractConstants.) vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.)
(declare-fun lib!host_protocol_t.AbstractConstants./AbstractConstants/params (lib!host_protocol_t.AbstractConstants.) lib!abstract_parameters_t.AbstractParameters.)
(declare-fun lib!host_protocol_t.AbstractConstants./AbstractConstants/me (lib!host_protocol_t.AbstractConstants.) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (lib!host_protocol_t.AbstractHostState.) lib!host_protocol_t.AbstractConstants.)
(declare-fun lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (lib!host_protocol_t.AbstractHostState.) lib!delegation_map_t.AbstractDelegationMap.)
(declare-fun lib!host_protocol_t.AbstractHostState./AbstractHostState/h (lib!host_protocol_t.AbstractHostState.) vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)
(declare-fun lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (lib!host_protocol_t.AbstractHostState.) lib!single_delivery_t.SingleDelivery.)
(declare-fun lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet (lib!host_protocol_t.AbstractHostState.) core!option.Option.)
(declare-fun lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (lib!host_protocol_t.AbstractHostState.) Int)
(declare-fun lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (lib!host_protocol_t.AbstractHostState.) vstd!seq.Seq<lib!abstract_service_t.AppRequest.>.)
(declare-fun lib!keys_t.KeyIterator./KeyIterator/k (lib!keys_t.KeyIterator.) core!option.Option.)
(declare-fun lib!keys_t.KeyRange./KeyRange/lo (lib!keys_t.KeyRange.) lib!keys_t.KeyIterator.)
(declare-fun lib!keys_t.KeyRange./KeyRange/hi (lib!keys_t.KeyRange.) lib!keys_t.KeyIterator.)
(declare-fun lib!keys_t.SHTKey./SHTKey/ukey (lib!keys_t.SHTKey.) Int)
(declare-fun lib!message_t.Message./GetRequest/key (lib!message_t.Message.) lib!keys_t.SHTKey.)
(declare-fun lib!message_t.Message./SetRequest/key (lib!message_t.Message.) lib!keys_t.SHTKey.)
(declare-fun lib!message_t.Message./SetRequest/value (lib!message_t.Message.) core!option.Option.)
(declare-fun lib!message_t.Message./Reply/key (lib!message_t.Message.) lib!keys_t.SHTKey.)
(declare-fun lib!message_t.Message./Reply/value (lib!message_t.Message.) core!option.Option.)
(declare-fun lib!message_t.Message./Redirect/key (lib!message_t.Message.) lib!keys_t.SHTKey.)
(declare-fun lib!message_t.Message./Redirect/id (lib!message_t.Message.) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun lib!message_t.Message./Shard/range (lib!message_t.Message.) lib!keys_t.KeyRange.)
(declare-fun lib!message_t.Message./Shard/recipient (lib!message_t.Message.) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun lib!message_t.Message./Delegate/range (lib!message_t.Message.) lib!keys_t.KeyRange.)
(declare-fun lib!message_t.Message./Delegate/h (lib!message_t.Message.) vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)
(declare-fun lib!network_t.Packet./Packet/dst (lib!network_t.Packet.) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun lib!network_t.Packet./Packet/src (lib!network_t.Packet.) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun lib!network_t.Packet./Packet/msg (lib!network_t.Packet.) lib!single_message_t.SingleMessage.)
(declare-fun lib!single_delivery_t.AckState./AckState/num_packets_acked (lib!single_delivery_t.AckState.) Int)
(declare-fun lib!single_delivery_t.AckState./AckState/un_acked (lib!single_delivery_t.AckState.) Poly)
(declare-fun lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (lib!single_delivery_t.SingleDelivery.) vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>.)
(declare-fun lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (lib!single_delivery_t.SingleDelivery.) Poly)
(declare-fun lib!single_message_t.SingleMessage./Message/seqno (lib!single_message_t.SingleMessage.) Int)
(declare-fun lib!single_message_t.SingleMessage./Message/dst (lib!single_message_t.SingleMessage.) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun lib!single_message_t.SingleMessage./Message/m (lib!single_message_t.SingleMessage.) Poly)
(declare-fun lib!single_message_t.SingleMessage./Ack/ack_seqno (lib!single_message_t.SingleMessage.) Int)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!abstract_end_point_t.AbstractEndPoint. Type)
(declare-const TYPE%lib!abstract_parameters_t.AbstractParameters. Type)
(declare-const TYPE%lib!abstract_service_t.AppRequest. Type)
(declare-const TYPE%lib!delegation_map_t.AbstractDelegationMap. Type)
(declare-fun TYPE%lib!environment_t.LPacket. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%lib!environment_t.LIoOp. (Dcr Type Dcr Type) Type)
(declare-const TYPE%lib!host_protocol_t.AbstractConstants. Type)
(declare-const TYPE%lib!host_protocol_t.AbstractHostState. Type)
(declare-const TYPE%lib!host_protocol_t.Step. Type)
(declare-const TYPE%lib!keys_t.Ordering. Type)
(declare-fun TYPE%lib!keys_t.KeyIterator. (Dcr Type) Type)
(declare-fun TYPE%lib!keys_t.KeyRange. (Dcr Type) Type)
(declare-const TYPE%lib!keys_t.SHTKey. Type)
(declare-const TYPE%lib!message_t.Message. Type)
(declare-const TYPE%lib!network_t.Packet. Type)
(declare-fun TYPE%lib!single_delivery_t.AckState. (Dcr Type) Type)
(declare-fun TYPE%lib!single_delivery_t.SingleDelivery. (Dcr Type) Type)
(declare-fun TYPE%lib!single_message_t.SingleMessage. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (Poly) vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>.)
(declare-fun Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (Poly) vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>.)
(declare-fun Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (Poly) vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>.)
(declare-fun Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (Poly) vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (Poly) vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.)
(declare-fun Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (vstd!seq.Seq<lib!abstract_service_t.AppRequest.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (Poly) vstd!seq.Seq<lib!abstract_service_t.AppRequest.>.)
(declare-fun Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. (vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. (Poly) vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>.)
(declare-fun Poly%vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. (vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. (Poly) vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>.)
(declare-fun Poly%vstd!seq.Seq<lib!network_t.Packet.>. (vstd!seq.Seq<lib!network_t.Packet.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!network_t.Packet.>. (Poly) vstd!seq.Seq<lib!network_t.Packet.>.)
(declare-fun Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. (vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. (Poly) vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (vstd!seq.Seq<vstd!seq.Seq<u8.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (Poly) vstd!seq.Seq<vstd!seq.Seq<u8.>.>.)
(declare-fun Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. (vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. (Poly) vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.)
(declare-fun Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (vstd!set.Set<lib!keys_t.SHTKey.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (Poly) vstd!set.Set<lib!keys_t.SHTKey.>.)
(declare-fun Poly%vstd!set.Set<lib!network_t.Packet.>. (vstd!set.Set<lib!network_t.Packet.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!network_t.Packet.>. (Poly) vstd!set.Set<lib!network_t.Packet.>.)
(declare-fun Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. (vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>.) Poly)
(declare-fun %Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. (Poly) vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!abstract_end_point_t.AbstractEndPoint.) Poly)
(declare-fun %Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun Poly%lib!abstract_parameters_t.AbstractParameters. (lib!abstract_parameters_t.AbstractParameters.) Poly)
(declare-fun %Poly%lib!abstract_parameters_t.AbstractParameters. (Poly) lib!abstract_parameters_t.AbstractParameters.)
(declare-fun Poly%lib!abstract_service_t.AppRequest. (lib!abstract_service_t.AppRequest.) Poly)
(declare-fun %Poly%lib!abstract_service_t.AppRequest. (Poly) lib!abstract_service_t.AppRequest.)
(declare-fun Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!delegation_map_t.AbstractDelegationMap.) Poly)
(declare-fun %Poly%lib!delegation_map_t.AbstractDelegationMap. (Poly) lib!delegation_map_t.AbstractDelegationMap.)
(declare-fun Poly%lib!environment_t.LPacket. (lib!environment_t.LPacket.) Poly)
(declare-fun %Poly%lib!environment_t.LPacket. (Poly) lib!environment_t.LPacket.)
(declare-fun Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp.) Poly)
(declare-fun %Poly%lib!environment_t.LIoOp. (Poly) lib!environment_t.LIoOp.)
(declare-fun Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractConstants.) Poly)
(declare-fun %Poly%lib!host_protocol_t.AbstractConstants. (Poly) lib!host_protocol_t.AbstractConstants.)
(declare-fun Poly%lib!host_protocol_t.AbstractHostState. (lib!host_protocol_t.AbstractHostState.) Poly)
(declare-fun %Poly%lib!host_protocol_t.AbstractHostState. (Poly) lib!host_protocol_t.AbstractHostState.)
(declare-fun Poly%lib!host_protocol_t.Step. (lib!host_protocol_t.Step.) Poly)
(declare-fun %Poly%lib!host_protocol_t.Step. (Poly) lib!host_protocol_t.Step.)
(declare-fun Poly%lib!keys_t.Ordering. (lib!keys_t.Ordering.) Poly)
(declare-fun %Poly%lib!keys_t.Ordering. (Poly) lib!keys_t.Ordering.)
(declare-fun Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyIterator.) Poly)
(declare-fun %Poly%lib!keys_t.KeyIterator. (Poly) lib!keys_t.KeyIterator.)
(declare-fun Poly%lib!keys_t.KeyRange. (lib!keys_t.KeyRange.) Poly)
(declare-fun %Poly%lib!keys_t.KeyRange. (Poly) lib!keys_t.KeyRange.)
(declare-fun Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey.) Poly)
(declare-fun %Poly%lib!keys_t.SHTKey. (Poly) lib!keys_t.SHTKey.)
(declare-fun Poly%lib!message_t.Message. (lib!message_t.Message.) Poly)
(declare-fun %Poly%lib!message_t.Message. (Poly) lib!message_t.Message.)
(declare-fun Poly%lib!network_t.Packet. (lib!network_t.Packet.) Poly)
(declare-fun %Poly%lib!network_t.Packet. (Poly) lib!network_t.Packet.)
(declare-fun Poly%lib!single_delivery_t.AckState. (lib!single_delivery_t.AckState.) Poly)
(declare-fun %Poly%lib!single_delivery_t.AckState. (Poly) lib!single_delivery_t.AckState.)
(declare-fun Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_t.SingleDelivery.) Poly)
(declare-fun %Poly%lib!single_delivery_t.SingleDelivery. (Poly) lib!single_delivery_t.SingleDelivery.)
(declare-fun Poly%lib!single_message_t.SingleMessage. (lib!single_message_t.SingleMessage.) Poly)
(declare-fun %Poly%lib!single_message_t.SingleMessage. (Poly) lib!single_message_t.SingleMessage.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)) )) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) ))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(assert (forall ((x vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>.)) (! (= x (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. x))) :pattern ((Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT)) (= x (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>.)) (! (has_type (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>.)) (! (= x (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. x))) :pattern ((Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.))) (= x (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.)))) )))
(assert (forall ((x vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>.)) (! (has_type (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.))) :pattern ((has_type (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.)))) )))
(assert (forall ((x vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (= x (%Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. x))) :pattern ((Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) (= x (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (%Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) )))
(assert (forall ((x vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (has_type (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) :pattern ((has_type (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) )))
(assert (forall ((x vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)) (! (= x (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. x))) :pattern ((Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= x (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(assert (forall ((x vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)) (! (has_type (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((has_type (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) (= x (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (%Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) )))
(assert (forall ((x vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) )))
(assert (forall ((x vstd!seq.Seq<lib!abstract_service_t.AppRequest.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_service_t.AppRequest.)) (= x (Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (%Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_service_t.AppRequest.))) )))
(assert (forall ((x vstd!seq.Seq<lib!abstract_service_t.AppRequest.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_service_t.AppRequest.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_service_t.AppRequest.))) )))
(assert (forall ((x vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. (Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)))) (= x (Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. (%Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.))))) )))
(assert (forall ((x vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)))) :pattern ((has_type (Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.))))) )))
(assert (forall ((x vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. (Poly%vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%lib!environment_t.LPacket. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)))) (= x (Poly%vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. (%Poly%vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%lib!environment_t.LPacket. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.))))) )))
(assert (forall ((x vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%lib!environment_t.LPacket. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)))) :pattern ((has_type (Poly%vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%lib!environment_t.LPacket. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.))))) )))
(assert (forall ((x vstd!seq.Seq<lib!network_t.Packet.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!network_t.Packet.>. (Poly%vstd!seq.Seq<lib!network_t.Packet.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!network_t.Packet.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!network_t.Packet.)) (= x (Poly%vstd!seq.Seq<lib!network_t.Packet.>. (%Poly%vstd!seq.Seq<lib!network_t.Packet.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!network_t.Packet.))) )))
(assert (forall ((x vstd!seq.Seq<lib!network_t.Packet.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!network_t.Packet.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!network_t.Packet.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!network_t.Packet.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!network_t.Packet.))) )))
(assert (forall ((x vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. (Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.))) (= x (Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. (%Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)))) )))
(assert (forall ((x vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.))) :pattern ((has_type (Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)))) )))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<u8.>.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= x (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (%Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<u8.>.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(assert (forall ((x vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (= x (%Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. (Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. x))) :pattern ((Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) (= x (Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. (%Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) )))
(assert (forall ((x vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (has_type (Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) :pattern ((has_type (Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) )))
(assert (forall ((x vstd!set.Set<lib!keys_t.SHTKey.>.)) (! (= x (%Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x))) :pattern ((Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.)) (= x (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (%Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.))) )))
(assert (forall ((x vstd!set.Set<lib!keys_t.SHTKey.>.)) (! (has_type (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.)) :pattern ((has_type (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.))) )))
(assert (forall ((x vstd!set.Set<lib!network_t.Packet.>.)) (! (= x (%Poly%vstd!set.Set<lib!network_t.Packet.>. (Poly%vstd!set.Set<lib!network_t.Packet.>. x))) :pattern ((Poly%vstd!set.Set<lib!network_t.Packet.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.)) (= x (Poly%vstd!set.Set<lib!network_t.Packet.>. (%Poly%vstd!set.Set<lib!network_t.Packet.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.))) )))
(assert (forall ((x vstd!set.Set<lib!network_t.Packet.>.)) (! (has_type (Poly%vstd!set.Set<lib!network_t.Packet.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.)) :pattern ((has_type (Poly%vstd!set.Set<lib!network_t.Packet.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.))) )))
(assert (forall ((x vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>.)) (! (= x (%Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. (Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. x))) :pattern ((Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.))) (= x (Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. (%Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.)))) )))
(assert (forall ((x vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>.)) (! (has_type (Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.))) :pattern ((has_type (Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.)))) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x lib!abstract_end_point_t.AbstractEndPoint.)) (! (= x (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. x))) :pattern ((Poly%lib!abstract_end_point_t.AbstractEndPoint. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (= x (Poly%lib!abstract_end_point_t.AbstractEndPoint. (%Poly%lib!abstract_end_point_t.AbstractEndPoint. x)))) :pattern ((has_type x TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) )))
(assert (forall ((x lib!abstract_end_point_t.AbstractEndPoint.)) (! (= (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id x) (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/?id x)) :pattern ((lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id x)) )))
(assert (forall ((x lib!abstract_end_point_t.AbstractEndPoint.)) (! (has_type (Poly%lib!abstract_end_point_t.AbstractEndPoint. x) TYPE%lib!abstract_end_point_t.AbstractEndPoint.) :pattern ((has_type (Poly%lib!abstract_end_point_t.AbstractEndPoint. x) TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) )))
(assert (forall ((x lib!abstract_parameters_t.AbstractParameters.)) (! (= x (%Poly%lib!abstract_parameters_t.AbstractParameters. (Poly%lib!abstract_parameters_t.AbstractParameters. x))) :pattern ((Poly%lib!abstract_parameters_t.AbstractParameters. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_parameters_t.AbstractParameters.) (= x (Poly%lib!abstract_parameters_t.AbstractParameters. (%Poly%lib!abstract_parameters_t.AbstractParameters. x)))) :pattern ((has_type x TYPE%lib!abstract_parameters_t.AbstractParameters.)) )))
(assert (forall ((_max_seqno! Int) (_max_delegations! Int)) (! (=> (and (<= 0 _max_seqno!) (<= 0 _max_delegations!)) (has_type (Poly%lib!abstract_parameters_t.AbstractParameters. (lib!abstract_parameters_t.AbstractParameters./AbstractParameters _max_seqno! _max_delegations!)) TYPE%lib!abstract_parameters_t.AbstractParameters.)) :pattern ((has_type (Poly%lib!abstract_parameters_t.AbstractParameters. (lib!abstract_parameters_t.AbstractParameters./AbstractParameters _max_seqno! _max_delegations!)) TYPE%lib!abstract_parameters_t.AbstractParameters.)) )))
(assert (forall ((x lib!abstract_parameters_t.AbstractParameters.)) (! (= (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_seqno x) (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/?max_seqno x)) :pattern ((lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_seqno x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_parameters_t.AbstractParameters.) (<= 0 (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_seqno (%Poly%lib!abstract_parameters_t.AbstractParameters. x)))) :pattern ((lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_seqno (%Poly%lib!abstract_parameters_t.AbstractParameters. x)) (has_type x TYPE%lib!abstract_parameters_t.AbstractParameters.)) )))
(assert (forall ((x lib!abstract_parameters_t.AbstractParameters.)) (! (= (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_delegations x) (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/?max_delegations x)) :pattern ((lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_delegations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_parameters_t.AbstractParameters.) (<= 0 (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_delegations (%Poly%lib!abstract_parameters_t.AbstractParameters. x)))) :pattern ((lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_delegations (%Poly%lib!abstract_parameters_t.AbstractParameters. x)) (has_type x TYPE%lib!abstract_parameters_t.AbstractParameters.)) )))
(assert (forall ((x lib!abstract_service_t.AppRequest.)) (! (= x (%Poly%lib!abstract_service_t.AppRequest. (Poly%lib!abstract_service_t.AppRequest. x))) :pattern ((Poly%lib!abstract_service_t.AppRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_service_t.AppRequest.) (= x (Poly%lib!abstract_service_t.AppRequest. (%Poly%lib!abstract_service_t.AppRequest. x)))) :pattern ((has_type x TYPE%lib!abstract_service_t.AppRequest.)) )))
(assert (forall ((_seqno! Int) (_key! lib!keys_t.SHTKey.)) (! (=> (and (<= 0 _seqno!) (has_type (Poly%lib!keys_t.SHTKey. _key!) TYPE%lib!keys_t.SHTKey.)) (has_type (Poly%lib!abstract_service_t.AppRequest. (lib!abstract_service_t.AppRequest./AppGetRequest _seqno! _key!)) TYPE%lib!abstract_service_t.AppRequest.)) :pattern ((has_type (Poly%lib!abstract_service_t.AppRequest. (lib!abstract_service_t.AppRequest./AppGetRequest _seqno! _key!)) TYPE%lib!abstract_service_t.AppRequest.)) )))
(assert (forall ((x lib!abstract_service_t.AppRequest.)) (! (= (lib!abstract_service_t.AppRequest./AppGetRequest/seqno x) (lib!abstract_service_t.AppRequest./AppGetRequest/?seqno x)) :pattern ((lib!abstract_service_t.AppRequest./AppGetRequest/seqno x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_service_t.AppRequest.) (<= 0 (lib!abstract_service_t.AppRequest./AppGetRequest/seqno (%Poly%lib!abstract_service_t.AppRequest. x)))) :pattern ((lib!abstract_service_t.AppRequest./AppGetRequest/seqno (%Poly%lib!abstract_service_t.AppRequest. x)) (has_type x TYPE%lib!abstract_service_t.AppRequest.)) )))
(assert (forall ((x lib!abstract_service_t.AppRequest.)) (! (= (lib!abstract_service_t.AppRequest./AppGetRequest/key x) (lib!abstract_service_t.AppRequest./AppGetRequest/?key x)) :pattern ((lib!abstract_service_t.AppRequest./AppGetRequest/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_service_t.AppRequest.) (has_type (Poly%lib!keys_t.SHTKey. (lib!abstract_service_t.AppRequest./AppGetRequest/key (%Poly%lib!abstract_service_t.AppRequest. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!abstract_service_t.AppRequest./AppGetRequest/key (%Poly%lib!abstract_service_t.AppRequest. x)) (has_type x TYPE%lib!abstract_service_t.AppRequest.)) )))
(assert (forall ((_seqno! Int) (_key! lib!keys_t.SHTKey.) (_ov! core!option.Option.)) (! (=> (and (<= 0 _seqno!) (has_type (Poly%lib!keys_t.SHTKey. _key!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%core!option.Option. _ov!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) (has_type (Poly%lib!abstract_service_t.AppRequest. (lib!abstract_service_t.AppRequest./AppSetRequest _seqno! _key! _ov!)) TYPE%lib!abstract_service_t.AppRequest.)) :pattern ((has_type (Poly%lib!abstract_service_t.AppRequest. (lib!abstract_service_t.AppRequest./AppSetRequest _seqno! _key! _ov!)) TYPE%lib!abstract_service_t.AppRequest.)) )))
(assert (forall ((x lib!abstract_service_t.AppRequest.)) (! (= (lib!abstract_service_t.AppRequest./AppSetRequest/seqno x) (lib!abstract_service_t.AppRequest./AppSetRequest/?seqno x)) :pattern ((lib!abstract_service_t.AppRequest./AppSetRequest/seqno x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_service_t.AppRequest.) (<= 0 (lib!abstract_service_t.AppRequest./AppSetRequest/seqno (%Poly%lib!abstract_service_t.AppRequest. x)))) :pattern ((lib!abstract_service_t.AppRequest./AppSetRequest/seqno (%Poly%lib!abstract_service_t.AppRequest. x)) (has_type x TYPE%lib!abstract_service_t.AppRequest.)) )))
(assert (forall ((x lib!abstract_service_t.AppRequest.)) (! (= (lib!abstract_service_t.AppRequest./AppSetRequest/key x) (lib!abstract_service_t.AppRequest./AppSetRequest/?key x)) :pattern ((lib!abstract_service_t.AppRequest./AppSetRequest/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_service_t.AppRequest.) (has_type (Poly%lib!keys_t.SHTKey. (lib!abstract_service_t.AppRequest./AppSetRequest/key (%Poly%lib!abstract_service_t.AppRequest. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!abstract_service_t.AppRequest./AppSetRequest/key (%Poly%lib!abstract_service_t.AppRequest. x)) (has_type x TYPE%lib!abstract_service_t.AppRequest.)) )))
(assert (forall ((x lib!abstract_service_t.AppRequest.)) (! (= (lib!abstract_service_t.AppRequest./AppSetRequest/ov x) (lib!abstract_service_t.AppRequest./AppSetRequest/?ov x)) :pattern ((lib!abstract_service_t.AppRequest./AppSetRequest/ov x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_service_t.AppRequest.) (has_type (Poly%core!option.Option. (lib!abstract_service_t.AppRequest./AppSetRequest/ov (%Poly%lib!abstract_service_t.AppRequest. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) :pattern ((lib!abstract_service_t.AppRequest./AppSetRequest/ov (%Poly%lib!abstract_service_t.AppRequest. x)) (has_type x TYPE%lib!abstract_service_t.AppRequest.)) )))
(assert (forall ((x lib!delegation_map_t.AbstractDelegationMap.)) (! (= x (%Poly%lib!delegation_map_t.AbstractDelegationMap. (Poly%lib!delegation_map_t.AbstractDelegationMap. x))) :pattern ((Poly%lib!delegation_map_t.AbstractDelegationMap. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!delegation_map_t.AbstractDelegationMap.) (= x (Poly%lib!delegation_map_t.AbstractDelegationMap. (%Poly%lib!delegation_map_t.AbstractDelegationMap. x)))) :pattern ((has_type x TYPE%lib!delegation_map_t.AbstractDelegationMap.)) )))
(assert (forall ((x lib!delegation_map_t.AbstractDelegationMap.)) (! (= (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 x) (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/?0 x)) :pattern ((lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 x)) )))
(assert (forall ((x lib!delegation_map_t.AbstractDelegationMap.)) (! (has_type (Poly%lib!delegation_map_t.AbstractDelegationMap. x) TYPE%lib!delegation_map_t.AbstractDelegationMap.) :pattern ((has_type (Poly%lib!delegation_map_t.AbstractDelegationMap. x) TYPE%lib!delegation_map_t.AbstractDelegationMap.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!delegation_map_t.AbstractDelegationMap.) (has_type y TYPE%lib!delegation_map_t.AbstractDelegationMap.) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. x))) (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. y))))) (ext_eq deep TYPE%lib!delegation_map_t.AbstractDelegationMap. x y)) :pattern ((ext_eq deep TYPE%lib!delegation_map_t.AbstractDelegationMap. x y)) )))
(assert (forall ((x lib!environment_t.LPacket.)) (! (= x (%Poly%lib!environment_t.LPacket. (Poly%lib!environment_t.LPacket. x))) :pattern ((Poly%lib!environment_t.LPacket. x)) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&)) (= x (Poly%lib!environment_t.LPacket. (%Poly%lib!environment_t.LPacket. x)))) :pattern ((has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (_dst! Poly) (_src! Poly) (_msg! Poly)) (! (=> (and (has_type _dst! IdType&) (has_type _src! IdType&) (has_type _msg! MessageType&)) (has_type (Poly%lib!environment_t.LPacket. (lib!environment_t.LPacket./LPacket _dst! _src! _msg!)) (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) :pattern ((has_type (Poly%lib!environment_t.LPacket. (lib!environment_t.LPacket./LPacket _dst! _src! _msg!)) (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((x lib!environment_t.LPacket.)) (! (= (lib!environment_t.LPacket./LPacket/dst x) (lib!environment_t.LPacket./LPacket/?dst x)) :pattern ((lib!environment_t.LPacket./LPacket/dst x)) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&)) (has_type (lib!environment_t.LPacket./LPacket/dst (%Poly%lib!environment_t.LPacket. x)) IdType&)) :pattern ((lib!environment_t.LPacket./LPacket/dst (%Poly%lib!environment_t.LPacket. x)) (has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((x lib!environment_t.LPacket.)) (! (= (lib!environment_t.LPacket./LPacket/src x) (lib!environment_t.LPacket./LPacket/?src x)) :pattern ((lib!environment_t.LPacket./LPacket/src x)) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&)) (has_type (lib!environment_t.LPacket./LPacket/src (%Poly%lib!environment_t.LPacket. x)) IdType&)) :pattern ((lib!environment_t.LPacket./LPacket/src (%Poly%lib!environment_t.LPacket. x)) (has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((x lib!environment_t.LPacket.)) (! (= (lib!environment_t.LPacket./LPacket/msg x) (lib!environment_t.LPacket./LPacket/?msg x)) :pattern ((lib!environment_t.LPacket./LPacket/msg x)) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&)) (has_type (lib!environment_t.LPacket./LPacket/msg (%Poly%lib!environment_t.LPacket. x)) MessageType&)) :pattern ((lib!environment_t.LPacket./LPacket/msg (%Poly%lib!environment_t.LPacket. x)) (has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) )))
(define-fun is-lib!environment_t.LPacket./LPacket_ ((c lib!environment_t.LPacket.)) Bool ((_ is lib!environment_t.LPacket./LPacket) c))
(assert (forall ((x lib!environment_t.LPacket.)) (! (=> (is-lib!environment_t.LPacket./LPacket_ x) (height_lt (height (lib!environment_t.LPacket./LPacket/dst x)) (height (Poly%lib!environment_t.LPacket. x)))) :pattern ((height (lib!environment_t.LPacket./LPacket/dst x))) )))
(assert (forall ((x lib!environment_t.LPacket.)) (! (=> (is-lib!environment_t.LPacket./LPacket_ x) (height_lt (height (lib!environment_t.LPacket./LPacket/src x)) (height (Poly%lib!environment_t.LPacket. x)))) :pattern ((height (lib!environment_t.LPacket./LPacket/src x))) )))
(assert (forall ((x lib!environment_t.LPacket.)) (! (=> (is-lib!environment_t.LPacket./LPacket_ x) (height_lt (height (lib!environment_t.LPacket./LPacket/msg x)) (height (Poly%lib!environment_t.LPacket. x)))) :pattern ((height (lib!environment_t.LPacket./LPacket/msg x))) )))
(assert (forall ((x lib!environment_t.LIoOp.)) (! (= x (%Poly%lib!environment_t.LIoOp. (Poly%lib!environment_t.LIoOp. x))) :pattern ((Poly%lib!environment_t.LIoOp. x)) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&)) (= x (Poly%lib!environment_t.LIoOp. (%Poly%lib!environment_t.LIoOp. x)))) :pattern ((has_type x (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (_s! lib!environment_t.LPacket.)) (! (=> (has_type (Poly%lib!environment_t.LPacket. _s!) (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&)) (has_type (Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp./Send _s!)) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) :pattern ((has_type (Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp./Send _s!)) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((x lib!environment_t.LIoOp.)) (! (= (lib!environment_t.LIoOp./Send/s x) (lib!environment_t.LIoOp./Send/?s x)) :pattern ((lib!environment_t.LIoOp./Send/s x)) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&)) (has_type (Poly%lib!environment_t.LPacket. (lib!environment_t.LIoOp./Send/s (%Poly%lib!environment_t.LIoOp. x))) (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) :pattern ((lib!environment_t.LIoOp./Send/s (%Poly%lib!environment_t.LIoOp. x)) (has_type x (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (_r! lib!environment_t.LPacket.)) (! (=> (has_type (Poly%lib!environment_t.LPacket. _r!) (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&)) (has_type (Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp./Receive _r!)) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) :pattern ((has_type (Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp./Receive _r!)) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((x lib!environment_t.LIoOp.)) (! (= (lib!environment_t.LIoOp./Receive/r x) (lib!environment_t.LIoOp./Receive/?r x)) :pattern ((lib!environment_t.LIoOp./Receive/r x)) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&)) (has_type (Poly%lib!environment_t.LPacket. (lib!environment_t.LIoOp./Receive/r (%Poly%lib!environment_t.LIoOp. x))) (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) :pattern ((lib!environment_t.LIoOp./Receive/r (%Poly%lib!environment_t.LIoOp. x)) (has_type x (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type)) (! (has_type (Poly%lib!environment_t.LIoOp. lib!environment_t.LIoOp./TimeoutReceive) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&)) :pattern ((has_type (Poly%lib!environment_t.LIoOp. lib!environment_t.LIoOp./TimeoutReceive) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (_t! Int)) (! (has_type (Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp./ReadClock _t!)) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&)) :pattern ((has_type (Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp./ReadClock _t!)) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((x lib!environment_t.LIoOp.)) (! (= (lib!environment_t.LIoOp./ReadClock/t x) (lib!environment_t.LIoOp./ReadClock/?t x)) :pattern ((lib!environment_t.LIoOp./ReadClock/t x)) )))
(define-fun is-lib!environment_t.LIoOp./Send_ ((c lib!environment_t.LIoOp.)) Bool ((_ is lib!environment_t.LIoOp./Send) c))
(assert (forall ((x lib!environment_t.LIoOp.)) (! (=> (is-lib!environment_t.LIoOp./Send_ x) (height_lt (height (Poly%lib!environment_t.LPacket. (lib!environment_t.LIoOp./Send/s x))) (height (Poly%lib!environment_t.LIoOp. x)))) :pattern ((height (Poly%lib!environment_t.LPacket. (lib!environment_t.LIoOp./Send/s x)))) )))
(define-fun is-lib!environment_t.LIoOp./Receive_ ((c lib!environment_t.LIoOp.)) Bool ((_ is lib!environment_t.LIoOp./Receive) c))
(assert (forall ((x lib!environment_t.LIoOp.)) (! (=> (is-lib!environment_t.LIoOp./Receive_ x) (height_lt (height (Poly%lib!environment_t.LPacket. (lib!environment_t.LIoOp./Receive/r x))) (height (Poly%lib!environment_t.LIoOp. x)))) :pattern ((height (Poly%lib!environment_t.LPacket. (lib!environment_t.LIoOp./Receive/r x)))) )))
(assert (forall ((x lib!host_protocol_t.AbstractConstants.)) (! (= x (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. x))) :pattern ((Poly%lib!host_protocol_t.AbstractConstants. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!host_protocol_t.AbstractConstants.) (= x (Poly%lib!host_protocol_t.AbstractConstants. (%Poly%lib!host_protocol_t.AbstractConstants. x)))) :pattern ((has_type x TYPE%lib!host_protocol_t.AbstractConstants.)) )))
(assert (forall ((_root_identity! lib!abstract_end_point_t.AbstractEndPoint.) (_host_ids! vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.) (_params! lib!abstract_parameters_t.AbstractParameters.) (_me! lib!abstract_end_point_t.AbstractEndPoint.)) (! (=> (has_type (Poly%lib!abstract_parameters_t.AbstractParameters. _params!) TYPE%lib!abstract_parameters_t.AbstractParameters.) (has_type (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractConstants./AbstractConstants _root_identity! _host_ids! _params! _me!)) TYPE%lib!host_protocol_t.AbstractConstants.)) :pattern ((has_type (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractConstants./AbstractConstants _root_identity! _host_ids! _params! _me!)) TYPE%lib!host_protocol_t.AbstractConstants.)) )))
(assert (forall ((x lib!host_protocol_t.AbstractConstants.)) (! (= (lib!host_protocol_t.AbstractConstants./AbstractConstants/root_identity x) (lib!host_protocol_t.AbstractConstants./AbstractConstants/?root_identity x)) :pattern ((lib!host_protocol_t.AbstractConstants./AbstractConstants/root_identity x)) )))
(assert (forall ((x lib!host_protocol_t.AbstractConstants.)) (! (= (lib!host_protocol_t.AbstractConstants./AbstractConstants/host_ids x) (lib!host_protocol_t.AbstractConstants./AbstractConstants/?host_ids x)) :pattern ((lib!host_protocol_t.AbstractConstants./AbstractConstants/host_ids x)) )))
(assert (forall ((x lib!host_protocol_t.AbstractConstants.)) (! (= (lib!host_protocol_t.AbstractConstants./AbstractConstants/params x) (lib!host_protocol_t.AbstractConstants./AbstractConstants/?params x)) :pattern ((lib!host_protocol_t.AbstractConstants./AbstractConstants/params x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!host_protocol_t.AbstractConstants.) (has_type (Poly%lib!abstract_parameters_t.AbstractParameters. (lib!host_protocol_t.AbstractConstants./AbstractConstants/params (%Poly%lib!host_protocol_t.AbstractConstants. x))) TYPE%lib!abstract_parameters_t.AbstractParameters.)) :pattern ((lib!host_protocol_t.AbstractConstants./AbstractConstants/params (%Poly%lib!host_protocol_t.AbstractConstants. x)) (has_type x TYPE%lib!host_protocol_t.AbstractConstants.)) )))
(assert (forall ((x lib!host_protocol_t.AbstractConstants.)) (! (= (lib!host_protocol_t.AbstractConstants./AbstractConstants/me x) (lib!host_protocol_t.AbstractConstants./AbstractConstants/?me x)) :pattern ((lib!host_protocol_t.AbstractConstants./AbstractConstants/me x)) )))
(assert (forall ((x lib!host_protocol_t.AbstractHostState.)) (! (= x (%Poly%lib!host_protocol_t.AbstractHostState. (Poly%lib!host_protocol_t.AbstractHostState. x))) :pattern ((Poly%lib!host_protocol_t.AbstractHostState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!host_protocol_t.AbstractHostState.) (= x (Poly%lib!host_protocol_t.AbstractHostState. (%Poly%lib!host_protocol_t.AbstractHostState. x)))) :pattern ((has_type x TYPE%lib!host_protocol_t.AbstractHostState.)) )))
(assert (forall ((_constants! lib!host_protocol_t.AbstractConstants.) (_delegation_map! lib!delegation_map_t.AbstractDelegationMap.) (_h! vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.) (_sd! lib!single_delivery_t.SingleDelivery.) (_received_packet! core!option.Option.) (_num_delegations! Int) (_received_requests! vstd!seq.Seq<lib!abstract_service_t.AppRequest.>.)) (! (=> (and (has_type (Poly%lib!host_protocol_t.AbstractConstants. _constants!) TYPE%lib!host_protocol_t.AbstractConstants.) (has_type (Poly%lib!single_delivery_t.SingleDelivery. _sd!) (TYPE%lib!single_delivery_t.SingleDelivery. $ TYPE%lib!message_t.Message.)) (has_type (Poly%core!option.Option. _received_packet!) (TYPE%core!option.Option. $ TYPE%lib!network_t.Packet.))) (has_type (Poly%lib!host_protocol_t.AbstractHostState. (lib!host_protocol_t.AbstractHostState./AbstractHostState _constants! _delegation_map! _h! _sd! _received_packet! _num_delegations! _received_requests!)) TYPE%lib!host_protocol_t.AbstractHostState.)) :pattern ((has_type (Poly%lib!host_protocol_t.AbstractHostState. (lib!host_protocol_t.AbstractHostState./AbstractHostState _constants! _delegation_map! _h! _sd! _received_packet! _num_delegations! _received_requests!)) TYPE%lib!host_protocol_t.AbstractHostState.)) )))
(assert (forall ((x lib!host_protocol_t.AbstractHostState.)) (! (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants x) (lib!host_protocol_t.AbstractHostState./AbstractHostState/?constants x)) :pattern ((lib!host_protocol_t.AbstractHostState./AbstractHostState/constants x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!host_protocol_t.AbstractHostState.) (has_type (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. x))) TYPE%lib!host_protocol_t.AbstractConstants.)) :pattern ((lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. x)) (has_type x TYPE%lib!host_protocol_t.AbstractHostState.)) )))
(assert (forall ((x lib!host_protocol_t.AbstractHostState.)) (! (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map x) (lib!host_protocol_t.AbstractHostState./AbstractHostState/?delegation_map x)) :pattern ((lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map x)) )))
(assert (forall ((x lib!host_protocol_t.AbstractHostState.)) (! (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/h x) (lib!host_protocol_t.AbstractHostState./AbstractHostState/?h x)) :pattern ((lib!host_protocol_t.AbstractHostState./AbstractHostState/h x)) )))
(assert (forall ((x lib!host_protocol_t.AbstractHostState.)) (! (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd x) (lib!host_protocol_t.AbstractHostState./AbstractHostState/?sd x)) :pattern ((lib!host_protocol_t.AbstractHostState./AbstractHostState/sd x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!host_protocol_t.AbstractHostState.) (has_type (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. x))) (TYPE%lib!single_delivery_t.SingleDelivery. $ TYPE%lib!message_t.Message.))) :pattern ((lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. x)) (has_type x TYPE%lib!host_protocol_t.AbstractHostState.)) )))
(assert (forall ((x lib!host_protocol_t.AbstractHostState.)) (! (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet x) (lib!host_protocol_t.AbstractHostState./AbstractHostState/?received_packet x)) :pattern ((lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!host_protocol_t.AbstractHostState.) (has_type (Poly%core!option.Option. (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet (%Poly%lib!host_protocol_t.AbstractHostState. x))) (TYPE%core!option.Option. $ TYPE%lib!network_t.Packet.))) :pattern ((lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet (%Poly%lib!host_protocol_t.AbstractHostState. x)) (has_type x TYPE%lib!host_protocol_t.AbstractHostState.)) )))
(assert (forall ((x lib!host_protocol_t.AbstractHostState.)) (! (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations x) (lib!host_protocol_t.AbstractHostState./AbstractHostState/?num_delegations x)) :pattern ((lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations x)) )))
(assert (forall ((x lib!host_protocol_t.AbstractHostState.)) (! (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests x) (lib!host_protocol_t.AbstractHostState./AbstractHostState/?received_requests x)) :pattern ((lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests x)) )))
(assert (forall ((x lib!host_protocol_t.Step.)) (! (= x (%Poly%lib!host_protocol_t.Step. (Poly%lib!host_protocol_t.Step. x))) :pattern ((Poly%lib!host_protocol_t.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!host_protocol_t.Step.) (= x (Poly%lib!host_protocol_t.Step. (%Poly%lib!host_protocol_t.Step. x)))) :pattern ((has_type x TYPE%lib!host_protocol_t.Step.)) )))
(assert (forall ((x lib!host_protocol_t.Step.)) (! (has_type (Poly%lib!host_protocol_t.Step. x) TYPE%lib!host_protocol_t.Step.) :pattern ((has_type (Poly%lib!host_protocol_t.Step. x) TYPE%lib!host_protocol_t.Step.)) )))
(assert (forall ((x lib!keys_t.Ordering.)) (! (= x (%Poly%lib!keys_t.Ordering. (Poly%lib!keys_t.Ordering. x))) :pattern ((Poly%lib!keys_t.Ordering. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!keys_t.Ordering.) (= x (Poly%lib!keys_t.Ordering. (%Poly%lib!keys_t.Ordering. x)))) :pattern ((has_type x TYPE%lib!keys_t.Ordering.)) )))
(assert (forall ((x lib!keys_t.Ordering.)) (! (has_type (Poly%lib!keys_t.Ordering. x) TYPE%lib!keys_t.Ordering.) :pattern ((has_type (Poly%lib!keys_t.Ordering. x) TYPE%lib!keys_t.Ordering.)) )))
(assert (forall ((x lib!keys_t.KeyIterator.)) (! (= x (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. x))) :pattern ((Poly%lib!keys_t.KeyIterator. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&)) (= x (Poly%lib!keys_t.KeyIterator. (%Poly%lib!keys_t.KeyIterator. x)))) :pattern ((has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(assert (forall ((K&. Dcr) (K& Type) (_k! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _k!) (TYPE%core!option.Option. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyIterator./KeyIterator _k!)) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyIterator./KeyIterator _k!)) (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(assert (forall ((x lib!keys_t.KeyIterator.)) (! (= (lib!keys_t.KeyIterator./KeyIterator/k x) (lib!keys_t.KeyIterator./KeyIterator/?k x)) :pattern ((lib!keys_t.KeyIterator./KeyIterator/k x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. x))) (TYPE%core!option.Option. K&. K&))) :pattern ((lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. x)) (has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(define-fun is-lib!keys_t.KeyIterator./KeyIterator_ ((c lib!keys_t.KeyIterator.)) Bool ((_ is lib!keys_t.KeyIterator./KeyIterator) c))
(assert (forall ((x lib!keys_t.KeyIterator.)) (! (=> (is-lib!keys_t.KeyIterator./KeyIterator_ x) (height_lt (height (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k x))) (height (Poly%lib!keys_t.KeyIterator. x)))) :pattern ((height (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k x)))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (= x (%Poly%lib!keys_t.KeyRange. (Poly%lib!keys_t.KeyRange. x))) :pattern ((Poly%lib!keys_t.KeyRange. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&)) (= x (Poly%lib!keys_t.KeyRange. (%Poly%lib!keys_t.KeyRange. x)))) :pattern ((has_type x (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(assert (forall ((K&. Dcr) (K& Type) (_lo! lib!keys_t.KeyIterator.) (_hi! lib!keys_t.KeyIterator.)) (! (=> (and (has_type (Poly%lib!keys_t.KeyIterator. _lo!) (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. _hi!) (TYPE%lib!keys_t.KeyIterator. K&. K&))) (has_type (Poly%lib!keys_t.KeyRange. (lib!keys_t.KeyRange./KeyRange _lo! _hi!)) (TYPE%lib!keys_t.KeyRange. K&. K&))) :pattern ((has_type (Poly%lib!keys_t.KeyRange. (lib!keys_t.KeyRange./KeyRange _lo! _hi!)) (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (= (lib!keys_t.KeyRange./KeyRange/lo x) (lib!keys_t.KeyRange./KeyRange/?lo x)) :pattern ((lib!keys_t.KeyRange./KeyRange/lo x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. x))) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. x)) (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (= (lib!keys_t.KeyRange./KeyRange/hi x) (lib!keys_t.KeyRange./KeyRange/?hi x)) :pattern ((lib!keys_t.KeyRange./KeyRange/hi x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. x))) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. x)) (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(define-fun is-lib!keys_t.KeyRange./KeyRange_ ((c lib!keys_t.KeyRange.)) Bool ((_ is lib!keys_t.KeyRange./KeyRange) c))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (=> (is-lib!keys_t.KeyRange./KeyRange_ x) (height_lt (height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo x))) (height (Poly%lib!keys_t.KeyRange. x)))) :pattern ((height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo x)))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (=> (is-lib!keys_t.KeyRange./KeyRange_ x) (height_lt (height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi x))) (height (Poly%lib!keys_t.KeyRange. x)))) :pattern ((height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi x)))) )))
(assert (forall ((x lib!keys_t.SHTKey.)) (! (= x (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x))) :pattern ((Poly%lib!keys_t.SHTKey. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!keys_t.SHTKey.) (= x (Poly%lib!keys_t.SHTKey. (%Poly%lib!keys_t.SHTKey. x)))) :pattern ((has_type x TYPE%lib!keys_t.SHTKey.)) )))
(assert (forall ((_ukey! Int)) (! (=> (uInv 64 _ukey!) (has_type (Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey./SHTKey _ukey!)) TYPE%lib!keys_t.SHTKey.)) :pattern ((has_type (Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey./SHTKey _ukey!)) TYPE%lib!keys_t.SHTKey.)) )))
(assert (forall ((x lib!keys_t.SHTKey.)) (! (= (lib!keys_t.SHTKey./SHTKey/ukey x) (lib!keys_t.SHTKey./SHTKey/?ukey x)) :pattern ((lib!keys_t.SHTKey./SHTKey/ukey x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!keys_t.SHTKey.) (uInv 64 (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. x)))) :pattern ((lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. x)) (has_type x TYPE%lib!keys_t.SHTKey.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= x (%Poly%lib!message_t.Message. (Poly%lib!message_t.Message. x))) :pattern ((Poly%lib!message_t.Message. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (= x (Poly%lib!message_t.Message. (%Poly%lib!message_t.Message. x)))) :pattern ((has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((_key! lib!keys_t.SHTKey.)) (! (=> (has_type (Poly%lib!keys_t.SHTKey. _key!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%lib!message_t.Message. (lib!message_t.Message./GetRequest _key!)) TYPE%lib!message_t.Message.)) :pattern ((has_type (Poly%lib!message_t.Message. (lib!message_t.Message./GetRequest _key!)) TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./GetRequest/key x) (lib!message_t.Message./GetRequest/?key x)) :pattern ((lib!message_t.Message./GetRequest/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.SHTKey. (lib!message_t.Message./GetRequest/key (%Poly%lib!message_t.Message. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!message_t.Message./GetRequest/key (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((_key! lib!keys_t.SHTKey.) (_value! core!option.Option.)) (! (=> (and (has_type (Poly%lib!keys_t.SHTKey. _key!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) (has_type (Poly%lib!message_t.Message. (lib!message_t.Message./SetRequest _key! _value!)) TYPE%lib!message_t.Message.)) :pattern ((has_type (Poly%lib!message_t.Message. (lib!message_t.Message./SetRequest _key! _value!)) TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./SetRequest/key x) (lib!message_t.Message./SetRequest/?key x)) :pattern ((lib!message_t.Message./SetRequest/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.SHTKey. (lib!message_t.Message./SetRequest/key (%Poly%lib!message_t.Message. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!message_t.Message./SetRequest/key (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./SetRequest/value x) (lib!message_t.Message./SetRequest/?value x)) :pattern ((lib!message_t.Message./SetRequest/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%core!option.Option. (lib!message_t.Message./SetRequest/value (%Poly%lib!message_t.Message. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) :pattern ((lib!message_t.Message./SetRequest/value (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((_key! lib!keys_t.SHTKey.) (_value! core!option.Option.)) (! (=> (and (has_type (Poly%lib!keys_t.SHTKey. _key!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) (has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Reply _key! _value!)) TYPE%lib!message_t.Message.)) :pattern ((has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Reply _key! _value!)) TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Reply/key x) (lib!message_t.Message./Reply/?key x)) :pattern ((lib!message_t.Message./Reply/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.SHTKey. (lib!message_t.Message./Reply/key (%Poly%lib!message_t.Message. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!message_t.Message./Reply/key (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Reply/value x) (lib!message_t.Message./Reply/?value x)) :pattern ((lib!message_t.Message./Reply/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%core!option.Option. (lib!message_t.Message./Reply/value (%Poly%lib!message_t.Message. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) :pattern ((lib!message_t.Message./Reply/value (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((_key! lib!keys_t.SHTKey.) (_id! lib!abstract_end_point_t.AbstractEndPoint.)) (! (=> (has_type (Poly%lib!keys_t.SHTKey. _key!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Redirect _key! _id!)) TYPE%lib!message_t.Message.)) :pattern ((has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Redirect _key! _id!)) TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Redirect/key x) (lib!message_t.Message./Redirect/?key x)) :pattern ((lib!message_t.Message./Redirect/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.SHTKey. (lib!message_t.Message./Redirect/key (%Poly%lib!message_t.Message. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!message_t.Message./Redirect/key (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Redirect/id x) (lib!message_t.Message./Redirect/?id x)) :pattern ((lib!message_t.Message./Redirect/id x)) )))
(assert (forall ((_range! lib!keys_t.KeyRange.) (_recipient! lib!abstract_end_point_t.AbstractEndPoint.)) (! (=> (has_type (Poly%lib!keys_t.KeyRange. _range!) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.)) (has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Shard _range! _recipient!)) TYPE%lib!message_t.Message.)) :pattern ((has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Shard _range! _recipient!)) TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Shard/range x) (lib!message_t.Message./Shard/?range x)) :pattern ((lib!message_t.Message./Shard/range x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.KeyRange. (lib!message_t.Message./Shard/range (%Poly%lib!message_t.Message. x))) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.))) :pattern ((lib!message_t.Message./Shard/range (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Shard/recipient x) (lib!message_t.Message./Shard/?recipient x)) :pattern ((lib!message_t.Message./Shard/recipient x)) )))
(assert (forall ((_range! lib!keys_t.KeyRange.) (_h! vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)) (! (=> (has_type (Poly%lib!keys_t.KeyRange. _range!) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.)) (has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Delegate _range! _h!)) TYPE%lib!message_t.Message.)) :pattern ((has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Delegate _range! _h!)) TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Delegate/range x) (lib!message_t.Message./Delegate/?range x)) :pattern ((lib!message_t.Message./Delegate/range x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.KeyRange. (lib!message_t.Message./Delegate/range (%Poly%lib!message_t.Message. x))) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.))) :pattern ((lib!message_t.Message./Delegate/range (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Delegate/h x) (lib!message_t.Message./Delegate/?h x)) :pattern ((lib!message_t.Message./Delegate/h x)) )))
(assert (forall ((x lib!network_t.Packet.)) (! (= x (%Poly%lib!network_t.Packet. (Poly%lib!network_t.Packet. x))) :pattern ((Poly%lib!network_t.Packet. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!network_t.Packet.) (= x (Poly%lib!network_t.Packet. (%Poly%lib!network_t.Packet. x)))) :pattern ((has_type x TYPE%lib!network_t.Packet.)) )))
(assert (forall ((_dst! lib!abstract_end_point_t.AbstractEndPoint.) (_src! lib!abstract_end_point_t.AbstractEndPoint.) (_msg! lib!single_message_t.SingleMessage.)) (! (=> (has_type (Poly%lib!single_message_t.SingleMessage. _msg!) (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) (has_type (Poly%lib!network_t.Packet. (lib!network_t.Packet./Packet _dst! _src! _msg!)) TYPE%lib!network_t.Packet.)) :pattern ((has_type (Poly%lib!network_t.Packet. (lib!network_t.Packet./Packet _dst! _src! _msg!)) TYPE%lib!network_t.Packet.)) )))
(assert (forall ((x lib!network_t.Packet.)) (! (= (lib!network_t.Packet./Packet/dst x) (lib!network_t.Packet./Packet/?dst x)) :pattern ((lib!network_t.Packet./Packet/dst x)) )))
(assert (forall ((x lib!network_t.Packet.)) (! (= (lib!network_t.Packet./Packet/src x) (lib!network_t.Packet./Packet/?src x)) :pattern ((lib!network_t.Packet./Packet/src x)) )))
(assert (forall ((x lib!network_t.Packet.)) (! (= (lib!network_t.Packet./Packet/msg x) (lib!network_t.Packet./Packet/?msg x)) :pattern ((lib!network_t.Packet./Packet/msg x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!network_t.Packet.) (has_type (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. x))) (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.))) :pattern ((lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. x)) (has_type x TYPE%lib!network_t.Packet.)) )))
(assert (forall ((x lib!single_delivery_t.AckState.)) (! (= x (%Poly%lib!single_delivery_t.AckState. (Poly%lib!single_delivery_t.AckState. x))) :pattern ((Poly%lib!single_delivery_t.AckState. x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_delivery_t.AckState. MT&. MT&)) (= x (Poly%lib!single_delivery_t.AckState. (%Poly%lib!single_delivery_t.AckState. x)))) :pattern ((has_type x (TYPE%lib!single_delivery_t.AckState. MT&. MT&))) )))
(assert (forall ((MT&. Dcr) (MT& Type) (_num_packets_acked! Int) (_un_acked! Poly)) (! (=> (and (<= 0 _num_packets_acked!) (has_type _un_acked! (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)))) (has_type (Poly%lib!single_delivery_t.AckState. (lib!single_delivery_t.AckState./AckState _num_packets_acked! _un_acked!)) (TYPE%lib!single_delivery_t.AckState. MT&. MT&))) :pattern ((has_type (Poly%lib!single_delivery_t.AckState. (lib!single_delivery_t.AckState./AckState _num_packets_acked! _un_acked!)) (TYPE%lib!single_delivery_t.AckState. MT&. MT&))) )))
(assert (forall ((x lib!single_delivery_t.AckState.)) (! (= (lib!single_delivery_t.AckState./AckState/num_packets_acked x) (lib!single_delivery_t.AckState./AckState/?num_packets_acked x)) :pattern ((lib!single_delivery_t.AckState./AckState/num_packets_acked x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_delivery_t.AckState. MT&. MT&)) (<= 0 (lib!single_delivery_t.AckState./AckState/num_packets_acked (%Poly%lib!single_delivery_t.AckState. x)))) :pattern ((lib!single_delivery_t.AckState./AckState/num_packets_acked (%Poly%lib!single_delivery_t.AckState. x)) (has_type x (TYPE%lib!single_delivery_t.AckState. MT&. MT&))) )))
(assert (forall ((x lib!single_delivery_t.AckState.)) (! (= (lib!single_delivery_t.AckState./AckState/un_acked x) (lib!single_delivery_t.AckState./AckState/?un_acked x)) :pattern ((lib!single_delivery_t.AckState./AckState/un_acked x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_delivery_t.AckState. MT&. MT&)) (has_type (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. x)) (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)))) :pattern ((lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. x)) (has_type x (TYPE%lib!single_delivery_t.AckState. MT&. MT&))) )))
(define-fun is-lib!single_delivery_t.AckState./AckState_ ((c lib!single_delivery_t.AckState.)) Bool ((_ is lib!single_delivery_t.AckState./AckState) c))
(assert (forall ((x lib!single_delivery_t.AckState.)) (! (=> (is-lib!single_delivery_t.AckState./AckState_ x) (height_lt (height (lib!single_delivery_t.AckState./AckState/un_acked x)) (height (Poly%lib!single_delivery_t.AckState. x)))) :pattern ((height (lib!single_delivery_t.AckState./AckState/un_acked x))) )))
(assert (forall ((MT&. Dcr) (MT& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%lib!single_delivery_t.AckState. MT&. MT&)) (has_type y (TYPE%lib!single_delivery_t.AckState. MT&. MT&)) (= (lib!single_delivery_t.AckState./AckState/num_packets_acked (%Poly%lib!single_delivery_t.AckState. x)) (lib!single_delivery_t.AckState./AckState/num_packets_acked (%Poly%lib!single_delivery_t.AckState. y))) (ext_eq deep (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. x)) (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. y)))) (ext_eq deep (TYPE%lib!single_delivery_t.AckState. MT&. MT&) x y)) :pattern ((ext_eq deep (TYPE%lib!single_delivery_t.AckState. MT&. MT&) x y)) )))
(assert (forall ((x lib!single_delivery_t.SingleDelivery.)) (! (= x (%Poly%lib!single_delivery_t.SingleDelivery. (Poly%lib!single_delivery_t.SingleDelivery. x))) :pattern ((Poly%lib!single_delivery_t.SingleDelivery. x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&)) (= x (Poly%lib!single_delivery_t.SingleDelivery. (%Poly%lib!single_delivery_t.SingleDelivery. x)))) :pattern ((has_type x (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&))) )))
(assert (forall ((MT&. Dcr) (MT& Type) (_receive_state! vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>.) (_send_state! Poly)) (! (=> (has_type _send_state! (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&))) (has_type (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_t.SingleDelivery./SingleDelivery _receive_state! _send_state!)) (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&))) :pattern ((has_type (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_t.SingleDelivery./SingleDelivery _receive_state! _send_state!)) (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&))) )))
(assert (forall ((x lib!single_delivery_t.SingleDelivery.)) (! (= (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state x) (lib!single_delivery_t.SingleDelivery./SingleDelivery/?receive_state x)) :pattern ((lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state x)) )))
(assert (forall ((x lib!single_delivery_t.SingleDelivery.)) (! (= (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state x) (lib!single_delivery_t.SingleDelivery./SingleDelivery/?send_state x)) :pattern ((lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&)) (has_type (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. x)) (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&)))) :pattern ((lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. x)) (has_type x (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&))) )))
(define-fun is-lib!single_delivery_t.SingleDelivery./SingleDelivery_ ((c lib!single_delivery_t.SingleDelivery.)) Bool ((_ is lib!single_delivery_t.SingleDelivery./SingleDelivery) c))
(assert (forall ((x lib!single_delivery_t.SingleDelivery.)) (! (=> (is-lib!single_delivery_t.SingleDelivery./SingleDelivery_ x) (height_lt (height (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state x)) (height (Poly%lib!single_delivery_t.SingleDelivery. x)))) :pattern ((height (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state x))) )))
(assert (forall ((MT&. Dcr) (MT& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&)) (has_type y (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&)) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. x))) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. y)))) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&)) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. x)) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. y)))) (ext_eq deep (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&) x y)) :pattern ((ext_eq deep (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&) x y)) )))
(assert (forall ((x lib!single_message_t.SingleMessage.)) (! (= x (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. x))) :pattern ((Poly%lib!single_message_t.SingleMessage. x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) (= x (Poly%lib!single_message_t.SingleMessage. (%Poly%lib!single_message_t.SingleMessage. x)))) :pattern ((has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) )))
(assert (forall ((MT&. Dcr) (MT& Type) (_seqno! Int) (_dst! lib!abstract_end_point_t.AbstractEndPoint.) (_m! Poly)) (! (=> (and (<= 0 _seqno!) (has_type _m! MT&)) (has_type (Poly%lib!single_message_t.SingleMessage. (lib!single_message_t.SingleMessage./Message _seqno! _dst! _m!)) (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) :pattern ((has_type (Poly%lib!single_message_t.SingleMessage. (lib!single_message_t.SingleMessage./Message _seqno! _dst! _m!)) (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) )))
(assert (forall ((x lib!single_message_t.SingleMessage.)) (! (= (lib!single_message_t.SingleMessage./Message/seqno x) (lib!single_message_t.SingleMessage./Message/?seqno x)) :pattern ((lib!single_message_t.SingleMessage./Message/seqno x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) (<= 0 (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. x)))) :pattern ((lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. x)) (has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) )))
(assert (forall ((x lib!single_message_t.SingleMessage.)) (! (= (lib!single_message_t.SingleMessage./Message/dst x) (lib!single_message_t.SingleMessage./Message/?dst x)) :pattern ((lib!single_message_t.SingleMessage./Message/dst x)) )))
(assert (forall ((x lib!single_message_t.SingleMessage.)) (! (= (lib!single_message_t.SingleMessage./Message/m x) (lib!single_message_t.SingleMessage./Message/?m x)) :pattern ((lib!single_message_t.SingleMessage./Message/m x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) (has_type (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. x)) MT&)) :pattern ((lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. x)) (has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) )))
(assert (forall ((MT&. Dcr) (MT& Type) (_ack_seqno! Int)) (! (=> (<= 0 _ack_seqno!) (has_type (Poly%lib!single_message_t.SingleMessage. (lib!single_message_t.SingleMessage./Ack _ack_seqno!)) (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) :pattern ((has_type (Poly%lib!single_message_t.SingleMessage. (lib!single_message_t.SingleMessage./Ack _ack_seqno!)) (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) )))
(assert (forall ((x lib!single_message_t.SingleMessage.)) (! (= (lib!single_message_t.SingleMessage./Ack/ack_seqno x) (lib!single_message_t.SingleMessage./Ack/?ack_seqno x)) :pattern ((lib!single_message_t.SingleMessage./Ack/ack_seqno x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) (<= 0 (lib!single_message_t.SingleMessage./Ack/ack_seqno (%Poly%lib!single_message_t.SingleMessage. x)))) :pattern ((lib!single_message_t.SingleMessage./Ack/ack_seqno (%Poly%lib!single_message_t.SingleMessage. x)) (has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) )))
(assert (forall ((MT&. Dcr) (MT& Type)) (! (has_type (Poly%lib!single_message_t.SingleMessage. lib!single_message_t.SingleMessage./InvalidMessage) (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) :pattern ((has_type (Poly%lib!single_message_t.SingleMessage. lib!single_message_t.SingleMessage./InvalidMessage) (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) )))
(define-fun is-lib!single_message_t.SingleMessage./Message_ ((c lib!single_message_t.SingleMessage.)) Bool ((_ is lib!single_message_t.SingleMessage./Message) c))
(assert (forall ((x lib!single_message_t.SingleMessage.)) (! (=> (is-lib!single_message_t.SingleMessage./Message_ x) (height_lt (height (lib!single_message_t.SingleMessage./Message/m x)) (height (Poly%lib!single_message_t.SingleMessage. x)))) :pattern ((height (lib!single_message_t.SingleMessage./Message/m x))) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!verus_extra.clone_v.VerusClone. (Dcr Type) Bool)
(declare-fun tr_bound%lib!keys_t.KeyTrait. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!verus_extra.clone_v.VerusClone. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!keys_t.KeyTrait. Self%&. Self%&)) )))
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::arrow_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.arrow_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.arrow_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_some")
(declare-fun vstd!std_specs.option.is_some.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::filter")
(declare-fun vstd!seq_lib.impl&%0.filter.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_set")
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set_lib::impl&%0::is_empty")
(declare-fun vstd!set_lib.impl&%0.is_empty.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::map_values")
(declare-fun vstd!seq_lib.impl&%0.map_values.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::keys_t::Ordering::lt")
(declare-fun lib!delegation_map_v.impl&%0.lt.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyTrait::cmp_spec")
(declare-fun lib!keys_t.KeyTrait.cmp_spec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!keys_t.KeyTrait.cmp_spec%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::lt_spec")
(declare-fun lib!keys_t.impl&%3.lt_spec.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::between")
(declare-fun lib!delegation_map_v.impl&%2.between.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::new_spec")
(declare-fun lib!keys_t.impl&%3.new_spec.? (Dcr Type Poly) lib!keys_t.KeyIterator.)
(set-info :comment ";; Function-Decl lib::keys_t::KeyRange::contains")
(declare-fun lib!keys_t.impl&%4.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::max_hashtable_size")
(declare-fun lib!host_protocol_t.max_hashtable_size.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::app_interface_t::valid_key")
(declare-fun lib!app_interface_t.valid_key.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::app_interface_t::max_val_len")
(declare-fun lib!app_interface_t.max_val_len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::app_interface_t::valid_value")
(declare-fun lib!app_interface_t.valid_value.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::valid_hashtable")
(declare-fun lib!host_protocol_t.valid_hashtable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_end_point_t::AbstractEndPoint::valid_physical_address")
(declare-fun lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::full")
(declare-fun vstd!set.impl&%0.full.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::total")
(declare-fun vstd!map.impl&%0.total.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::union_prefer_right")
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::skip")
(declare-fun vstd!seq.impl&%0.skip.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::map")
(declare-fun vstd!seq_lib.impl&%0.map.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::subset_of")
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set_lib::impl&%0::is_full")
(declare-fun vstd!set_lib.impl&%0.is_full.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set_lib::impl&%0::map")
(declare-fun vstd!set_lib.impl&%0.map.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::verus_extra::set_lib_ext_v::flatten_sets")
(declare-fun lib!verus_extra.set_lib_ext_v.flatten_sets.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::host_protocol_t::valid_optional_value")
(declare-fun lib!host_protocol_t.valid_optional_value.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::geq_spec")
(declare-fun lib!keys_t.impl&%3.geq_spec.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyRange::is_empty")
(declare-fun lib!keys_t.impl&%4.is_empty.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_parameters_t::AbstractParameters::static_params")
(declare-fun lib!abstract_parameters_t.impl&%0.static_params.? (Poly) lib!abstract_parameters_t.AbstractParameters.)
(set-info :comment ";; Function-Decl lib::single_message_t::SingleMessage::arrow_Message_m")
(declare-fun lib!single_message_t.impl&%0.arrow_Message_m.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::single_message_t::SingleMessage::arrow_Message_dst")
(declare-fun lib!single_message_t.impl&%0.arrow_Message_dst.? (Dcr Type Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(set-info :comment ";; Function-Decl lib::delegation_map_t::AbstractDelegationMap::view")
(declare-fun lib!delegation_map_t.impl&%0.view.? (Poly) vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>.)
(set-info :comment ";; Function-Decl lib::delegation_map_t::AbstractDelegationMap::is_complete")
(declare-fun lib!delegation_map_t.impl&%0.is_complete.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::delegation_map_t::AbstractDelegationMap::spec_index")
(declare-fun lib!delegation_map_t.impl&%0.spec_index.? (Poly Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(set-info :comment ";; Function-Decl lib::host_protocol_t::hashtable_lookup")
(declare-fun lib!host_protocol_t.hashtable_lookup.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::single_delivery_t::ack_state_lookup")
(declare-fun lib!single_delivery_t.ack_state_lookup.? (Dcr Type Poly Poly) lib!single_delivery_t.AckState.)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::send_single_message")
(declare-fun lib!single_delivery_t.impl&%1.send_single_message.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::next_get_request_reply")
(declare-fun lib!host_protocol_t.next_get_request_reply.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_message_t::SingleMessage::arrow_Message_seqno")
(declare-fun lib!single_message_t.impl&%0.arrow_Message_seqno.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::message_t::Message::arrow_GetRequest_key")
(declare-fun lib!message_t.impl&%0.arrow_GetRequest_key.? (Poly) lib!keys_t.SHTKey.)
(set-info :comment ";; Function-Decl lib::host_protocol_t::next_get_request")
(declare-fun lib!host_protocol_t.next_get_request.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::extract_packet_from_lsht_packet")
(declare-fun lib!host_protocol_t.extract_packet_from_lsht_packet.? (Poly) lib!network_t.Packet.)
(set-info :comment ";; Function-Decl lib::host_protocol_t::extract_packets_from_lsht_packets")
(declare-fun lib!host_protocol_t.extract_packets_from_lsht_packets.? (Poly) vstd!set.Set<lib!network_t.Packet.>.)
(set-info :comment ";; Function-Decl lib::message_t::Message::arrow_SetRequest_key")
(declare-fun lib!message_t.impl&%0.arrow_SetRequest_key.? (Poly) lib!keys_t.SHTKey.)
(set-info :comment ";; Function-Decl lib::message_t::Message::arrow_SetRequest_value")
(declare-fun lib!message_t.impl&%0.arrow_SetRequest_value.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::host_protocol_t::next_set_request_complete")
(declare-fun lib!host_protocol_t.next_set_request_complete.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::next_set_request")
(declare-fun lib!host_protocol_t.next_set_request.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::delegation_map_t::AbstractDelegationMap::update")
(declare-fun lib!delegation_map_t.impl&%0.update.? (Poly Poly Poly) lib!delegation_map_t.AbstractDelegationMap.)
(set-info :comment ";; Function-Decl lib::message_t::Message::arrow_Delegate_range")
(declare-fun lib!message_t.impl&%0.arrow_Delegate_range.? (Poly) lib!keys_t.KeyRange.)
(set-info :comment ";; Function-Decl lib::host_protocol_t::bulk_update_domain")
(declare-fun lib!host_protocol_t.bulk_update_domain.? (Poly Poly Poly) vstd!set.Set<lib!keys_t.SHTKey.>.)
(set-info :comment ";; Function-Decl lib::host_protocol_t::bulk_update_hashtable")
(declare-fun lib!host_protocol_t.bulk_update_hashtable.? (Poly Poly Poly) vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)
(set-info :comment ";; Function-Decl lib::message_t::Message::arrow_Delegate_h")
(declare-fun lib!message_t.impl&%0.arrow_Delegate_h.? (Poly) vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::send_no_message")
(declare-fun lib!single_delivery_t.impl&%1.send_no_message.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::receive_no_message")
(declare-fun lib!single_delivery_t.impl&%1.receive_no_message.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::next_delegate")
(declare-fun lib!host_protocol_t.next_delegate.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::message_t::Message::arrow_Shard_recipient")
(declare-fun lib!message_t.impl&%0.arrow_Shard_recipient.? (Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(set-info :comment ";; Function-Decl lib::message_t::Message::arrow_Shard_range")
(declare-fun lib!message_t.impl&%0.arrow_Shard_range.? (Poly) lib!keys_t.KeyRange.)
(set-info :comment ";; Function-Decl lib::delegation_map_t::AbstractDelegationMap::delegate_for_key_range_is_host")
(declare-fun lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::app_interface_t::extract_range")
(declare-fun lib!app_interface_t.extract_range.? (Poly Poly) vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)
(set-info :comment ";; Function-Decl lib::host_protocol_t::next_shard_wrapper_must_reject")
(declare-fun lib!host_protocol_t.next_shard_wrapper_must_reject.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::bulk_remove_hashtable")
(declare-fun lib!host_protocol_t.bulk_remove_hashtable.? (Poly Poly) vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)
(set-info :comment ";; Function-Decl lib::host_protocol_t::next_shard")
(declare-fun lib!host_protocol_t.next_shard.? (Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::next_shard_wrapper")
(declare-fun lib!host_protocol_t.next_shard_wrapper.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::environment_t::LIoOp::arrow_Send_s")
(declare-fun lib!environment_t.impl&%0.arrow_Send_s.? (Dcr Type Dcr Type Poly) lib!environment_t.LPacket.)
(set-info :comment ";; Function-Decl lib::delegation_map_t::AbstractDelegationMap::init")
(declare-fun lib!delegation_map_t.impl&%0.init.? (Poly) lib!delegation_map_t.AbstractDelegationMap.)
(set-info :comment ";; Function-Decl lib::environment_t::LIoOp::arrow_Receive_r")
(declare-fun lib!environment_t.impl&%0.arrow_Receive_r.? (Dcr Type Dcr Type Poly) lib!environment_t.LPacket.)
(set-info :comment ";; Function-Decl lib::host_protocol_t::parse_arg_as_end_point")
(declare-fun lib!host_protocol_t.parse_arg_as_end_point.? (Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(set-info :comment ";; Function-Decl lib::host_protocol_t::unchecked_parse_args")
(declare-fun lib!host_protocol_t.unchecked_parse_args.? (Poly) vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.)
(set-info :comment ";; Function-Decl lib::host_protocol_t::parse_args")
(declare-fun lib!host_protocol_t.parse_args.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::init")
(declare-fun lib!single_delivery_t.impl&%1.init.? (Dcr Type) lib!single_delivery_t.SingleDelivery.)
(set-info :comment ";; Function-Decl lib::host_protocol_t::init")
(declare-fun lib!host_protocol_t.init.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::AbstractHostState::wf")
(declare-fun lib!host_protocol_t.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::extract_sent_packets_from_ios")
(declare-fun lib!host_protocol_t.extract_sent_packets_from_ios.? (Poly) vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>.)
(set-info :comment ";; Function-Decl lib::host_protocol_t::extract_packets_from_abstract_ios")
(declare-fun lib!host_protocol_t.extract_packets_from_abstract_ios.? (Poly) vstd!set.Set<lib!network_t.Packet.>.)
(set-info :comment ";; Function-Decl lib::single_message_t::SingleMessage::arrow_Ack_ack_seqno")
(declare-fun lib!single_message_t.impl&%0.arrow_Ack_ack_seqno.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::single_delivery_t::truncate_un_ack_list")
(declare-fun lib!single_delivery_t.truncate_un_ack_list.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!single_delivery_t.rec%truncate_un_ack_list.? (Dcr Type Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::receive_ack")
(declare-fun lib!single_delivery_t.impl&%1.receive_ack.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_t::tombstone_table_lookup")
(declare-fun lib!single_delivery_t.tombstone_table_lookup.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::new_single_message")
(declare-fun lib!single_delivery_t.impl&%1.new_single_message.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::receive_real_packet")
(declare-fun lib!single_delivery_t.impl&%1.receive_real_packet.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::should_ack_single_message")
(declare-fun lib!single_delivery_t.impl&%1.should_ack_single_message.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::send_ack")
(declare-fun lib!single_delivery_t.impl&%1.send_ack.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::maybe_ack_packet")
(declare-fun lib!single_delivery_t.impl&%1.maybe_ack_packet.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::receive")
(declare-fun lib!single_delivery_t.impl&%1.receive.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::okay_to_ignore_packets")
(declare-fun lib!host_protocol_t.okay_to_ignore_packets.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::receive_packet")
(declare-fun lib!host_protocol_t.receive_packet.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::receive_packet_wrapper")
(declare-fun lib!host_protocol_t.receive_packet_wrapper.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::receive_packet_without_reading_clock")
(declare-fun lib!host_protocol_t.receive_packet_without_reading_clock.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::receive_packet_next")
(declare-fun lib!host_protocol_t.receive_packet_next.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::should_process_received_message")
(declare-fun lib!host_protocol_t.should_process_received_message.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::next_reply")
(declare-fun lib!host_protocol_t.next_reply.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::next_redirect")
(declare-fun lib!host_protocol_t.next_redirect.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::process_message")
(declare-fun lib!host_protocol_t.process_message.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::process_received_packet")
(declare-fun lib!host_protocol_t.process_received_packet.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::process_received_packet_next")
(declare-fun lib!host_protocol_t.process_received_packet_next.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::un_acked_messages_for_dest_up_to")
(declare-fun lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to.? (Poly Poly Poly Poly) vstd!set.Set<lib!network_t.Packet.>.)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::un_acked_messages_for_dest")
(declare-fun lib!single_delivery_t.impl&%2.un_acked_messages_for_dest.? (Poly Poly Poly) vstd!set.Set<lib!network_t.Packet.>.)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::un_acked_messages_for_dests")
(declare-fun lib!single_delivery_t.impl&%2.un_acked_messages_for_dests.? (Poly Poly Poly) vstd!set.Set<lib!network_t.Packet.>.)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::un_acked_messages")
(declare-fun lib!single_delivery_t.impl&%2.un_acked_messages.? (Poly Poly) vstd!set.Set<lib!network_t.Packet.>.)
(set-info :comment ";; Function-Decl lib::host_protocol_t::spontaneously_retransmit")
(declare-fun lib!host_protocol_t.spontaneously_retransmit.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::spontaneously_retransmit_next")
(declare-fun lib!host_protocol_t.spontaneously_retransmit_next.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::ignore_unparseable_packet")
(declare-fun lib!host_protocol_t.ignore_unparseable_packet.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::ignore_nonsensical_delegation_packet")
(declare-fun lib!host_protocol_t.ignore_nonsensical_delegation_packet.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::next_step")
(declare-fun lib!host_protocol_t.next_step.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::no_invalid_sends")
(declare-fun lib!host_protocol_t.no_invalid_sends.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::next")
(declare-fun lib!host_protocol_t.next.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::arrow_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.arrow_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.arrow_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_some.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_some.? T&. T& option!) (is-core!option.Option./Some_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_some.? T&. T& option!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%0 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%2 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%5 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::filter")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (has_type (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$)) ))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::filter_lemma")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.filter_lemma.) (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (and (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)))) (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$))) ))) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_set")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%0 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::seq_to_set_is_finite")
(assert (=> (fuel_bool fuel%vstd!seq_lib.seq_to_set_is_finite.) (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_complement.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_len.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) ))))
(set-info :comment ";; Function-Axioms vstd::set_lib::impl&%0::is_empty")
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.is_empty.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set_lib.impl&%0.is_empty.? A&. A& self!) (= (vstd!set.impl&%0.len.? A&. A& self!) 0)) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& self!)) ))))
(set-info :comment ";; Broadcast vstd::set_lib::axiom_is_empty")
(assert (=> (fuel_bool fuel%vstd!set_lib.axiom_is_empty.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (vstd!set_lib.impl&%0.is_empty.? A&. A& s!))) (exists ((a$ Poly)) (! (and (has_type a$ A&) (vstd!set.impl&%0.contains.? A&. A& s! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a$)) )))) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& s!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::map_values")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map_values.))
(declare-fun %%lambda%%1 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%0 %%hole%%3 (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map_values.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%1 A&. A& self! (%Poly%fun%1. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%1. A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::Ordering::lt")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%0.lt.))
(define-fun is-lib!keys_t.Ordering./Less_ ((c lib!keys_t.Ordering.)) Bool ((_ is lib!keys_t.Ordering./Less) c))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%0.lt.) (forall ((self! Poly)) (! (= (lib!delegation_map_v.impl&%0.lt.? self!) (is-lib!keys_t.Ordering./Less_ (%Poly%lib!keys_t.Ordering. self!))) :pattern ((lib!delegation_map_v.impl&%0.lt.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyTrait::cmp_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! Self%&) (has_type other! Self%&)) (has_type (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& self! other!) TYPE%lib!keys_t.Ordering.)) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& self! other!)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::SHTKey::cmp_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%13.cmp_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%13.cmp_spec.) (forall ((self! Poly) (other! Poly)) (! (= (lib!keys_t.KeyTrait.cmp_spec.? $ TYPE%lib!keys_t.SHTKey. self! other!) (Poly%lib!keys_t.Ordering. (ite (< (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. self!)) (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. other!))) lib!keys_t.Ordering./Less (ite (= (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. self!)) (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. other!))) lib!keys_t.Ordering./Equal lib!keys_t.Ordering./Greater)))) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? $ TYPE%lib!keys_t.SHTKey. self! other!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!keys_t.KeyTrait. $ TYPE%lib!keys_t.SHTKey.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!verus_extra.clone_v.VerusClone. $ TYPE%lib!keys_t.SHTKey.))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::lt_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%3.lt_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%3.lt_spec.) (forall ((K&. Dcr) (K& Type) (self! Poly) (other! Poly)) (! (= (lib!keys_t.impl&%3.lt_spec.? K&. K& self! other!) (or (and (not (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!)))) (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. other!)))) (and (and (not (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!)))) (not (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. other!))))) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? K&. K& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. other!)))))))))) :pattern ((lib!keys_t.impl&%3.lt_spec.? K&. K& self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::between")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%2.between.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%2.between.) (forall ((K&. Dcr) (K& Type) (lhs! Poly) (ki! Poly) (rhs! Poly)) (! (= (lib!delegation_map_v.impl&%2.between.? K&. K& lhs! ki! rhs!) (and (not (lib!keys_t.impl&%3.lt_spec.? K&. K& ki! lhs!)) (lib!keys_t.impl&%3.lt_spec.? K&. K& ki! rhs!))) :pattern ((lib!delegation_map_v.impl&%2.between.? K&. K& lhs! ki! rhs!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::new_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%3.new_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%3.new_spec.) (forall ((K&. Dcr) (K& Type) (k! Poly)) (! (= (lib!keys_t.impl&%3.new_spec.? K&. K& k!) (lib!keys_t.KeyIterator./KeyIterator (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some k!))))) :pattern ((lib!keys_t.impl&%3.new_spec.? K&. K& k!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (k! Poly)) (! (=> (has_type k! K&) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.impl&%3.new_spec.? K&. K& k!)) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((lib!keys_t.impl&%3.new_spec.? K&. K& k!)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyRange::contains")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%4.contains.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%4.contains.) (forall ((K&. Dcr) (K& Type) (self! Poly) (k! Poly)) (! (= (lib!keys_t.impl&%4.contains.? K&. K& self! k!) (lib!delegation_map_v.impl&%2.between.? K&. K& (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. self!))) (Poly%lib!keys_t.KeyIterator. (lib!keys_t.impl&%3.new_spec.? K&. K& k!)) (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. self!))))) :pattern ((lib!keys_t.impl&%4.contains.? K&. K& self! k!)) ))))
(set-info :comment ";; Function-Axioms lib::host_protocol_t::max_hashtable_size")
(assert (fuel_bool_default fuel%lib!host_protocol_t.max_hashtable_size.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.max_hashtable_size.) (forall ((no%param Poly)) (! (= (lib!host_protocol_t.max_hashtable_size.? no%param) 62) :pattern ((lib!host_protocol_t.max_hashtable_size.? no%param)) ))))
(set-info :comment ";; Function-Axioms lib::app_interface_t::valid_key")
(assert (fuel_bool_default fuel%lib!app_interface_t.valid_key.))
(assert (=> (fuel_bool fuel%lib!app_interface_t.valid_key.) (forall ((key! Poly)) (! (= (lib!app_interface_t.valid_key.? key!) true) :pattern ((lib!app_interface_t.valid_key.? key!)) ))))
(set-info :comment ";; Function-Axioms lib::app_interface_t::max_val_len")
(assert (fuel_bool_default fuel%lib!app_interface_t.max_val_len.))
(assert (=> (fuel_bool fuel%lib!app_interface_t.max_val_len.) (forall ((no%param Poly)) (! (= (lib!app_interface_t.max_val_len.? no%param) 1024) :pattern ((lib!app_interface_t.max_val_len.? no%param)) ))))
(set-info :comment ";; Function-Axioms lib::app_interface_t::valid_value")
(assert (fuel_bool_default fuel%lib!app_interface_t.valid_value.))
(assert (=> (fuel_bool fuel%lib!app_interface_t.valid_value.) (forall ((value! Poly)) (! (= (lib!app_interface_t.valid_value.? value!) (< (vstd!seq.Seq.len.? $ (UINT 8) value!) (lib!app_interface_t.max_val_len.? (I 0)))) :pattern ((lib!app_interface_t.valid_value.? value!)) ))))
(set-info :comment ";; Function-Axioms lib::host_protocol_t::valid_hashtable")
(assert (fuel_bool_default fuel%lib!host_protocol_t.valid_hashtable.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.valid_hashtable.) (forall ((h! Poly)) (! (= (lib!host_protocol_t.valid_hashtable.? h!) (and (< (vstd!set.impl&%0.len.? $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h!)) (lib!host_protocol_t.max_hashtable_size.? (I 0))) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!keys_t.SHTKey.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h!) k$) (and (lib!app_interface_t.valid_key.? k$) (lib!app_interface_t.valid_value.? (vstd!map.impl&%0.index.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h! k$))))) :pattern ((lib!app_interface_t.valid_value.? (vstd!map.impl&%0.index.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h! k$))) )))) :pattern ((lib!host_protocol_t.valid_hashtable.? h!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_end_point_t::AbstractEndPoint::valid_physical_address")
(assert (fuel_bool_default fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address.))
(assert (=> (fuel_bool fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address.) (forall ((self! Poly)) (! (= (lib!abstract_end_point_t.impl&%0.valid_physical_address.? self!) (< (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id (%Poly%lib!abstract_end_point_t.AbstractEndPoint. self!)))) 1048576)) :pattern ((lib!abstract_end_point_t.impl&%0.valid_physical_address.? self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::arrow_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.arrow_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.arrow_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.arrow_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.arrow_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::full")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.full.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.full.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.full.? A&. A&) (vstd!set.impl&%0.complement.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((vstd!set.impl&%0.full.? A&. A&)) ))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.full.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.full.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::total")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.total.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.total.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (fv! Poly)) (! (= (vstd!map.impl&%0.total.? K&. K& V&. V& impl%2&. impl%2& fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%2&. impl%2& (vstd!set.impl&%0.full.? K&. K&) fv!)) :pattern ((vstd!map.impl&%0.total.? K&. K& V&. V& impl%2&. impl%2& fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (fv! Poly)) (! (=> (has_type fv! impl%2&) (has_type (vstd!map.impl&%0.total.? K&. K& V&. V& impl%2&. impl%2& fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.total.? K&. K& V&. V& impl%2&. impl%2& fv!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::union_prefer_right")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%2 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%3 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%2 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%3 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::skip")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.skip.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.skip.) (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (= (vstd!seq.impl&%0.skip.? A&. A& self! n!) (vstd!seq.Seq.subrange.? A&. A& self! n! (I (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type n! INT)) (has_type (vstd!seq.impl&%0.skip.? A&. A& self! n!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::map")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map.))
(declare-fun %%lambda%%4 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%1 %%hole%%3 i$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%4 A&. A& self! (%Poly%fun%2. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%2. $ INT A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) ))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set_lib::impl&%0::is_full")
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.is_full.))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.is_full.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set_lib.impl&%0.is_full.? A&. A& self!) (= self! (vstd!set.impl&%0.full.? A&. A&))) :pattern ((vstd!set_lib.impl&%0.is_full.? A&. A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::set_lib::impl&%0::map")
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.map.))
(declare-fun %%lambda%%5 (Dcr Type Poly Type Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (%%hole%%7 %%Function%%) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7) a$) (B (exists ((x$ Poly)) (! (and (has_type x$ %%hole%%3) (and (vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 x$) (= a$ (%%apply%%0 %%hole%%7 x$)))) :pattern ((vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 x$)) )))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7) a$)))))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!set_lib.impl&%0.map.? A&. A& B&. B& self! f!) (vstd!set.impl&%0.new.? B&. B& $ (TYPE%fun%1. B&. B& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%5 A&. A& self! A& A&. A& self! (%Poly%fun%1. f!)))))) :pattern ((vstd!set_lib.impl&%0.map.? A&. A& B&. B& self! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! (TYPE%fun%1. A&. A& B&. B&))) (has_type (vstd!set_lib.impl&%0.map.? A&. A& B&. B& self! f!) (TYPE%vstd!set.Set. B&. B&))) :pattern ((vstd!set_lib.impl&%0.map.? A&. A& B&. B& self! f!)) )))
(set-info :comment ";; Function-Axioms lib::verus_extra::set_lib_ext_v::flatten_sets")
(assert (fuel_bool_default fuel%lib!verus_extra.set_lib_ext_v.flatten_sets.))
(declare-fun %%lambda%%6 (Dcr Type Poly Dcr Type Type Dcr Type Poly Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Type) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Poly) (%%hole%%9 Dcr) (%%hole%%10 Type) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10) a$) (B (exists ((s$ Poly)) (! (and (has_type s$ %%hole%%5) (and (vstd!set.impl&%0.contains.? %%hole%%6 %%hole%%7 %%hole%%8 s$) (vstd!set.impl&%0.contains.? %%hole%%9 %%hole%%10 s$ a$))) :pattern ((vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 s$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 s$ a$)) )))) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10) a$)))))
(assert (=> (fuel_bool fuel%lib!verus_extra.set_lib_ext_v.flatten_sets.) (forall ((A&. Dcr) (A& Type) (sets! Poly)) (! (= (lib!verus_extra.set_lib_ext_v.flatten_sets.? A&. A& sets!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%6 $ (TYPE%vstd!set.Set. A&. A&) sets! A&. A& (TYPE%vstd!set.Set. A&. A&) $ (TYPE%vstd!set.Set. A&. A&) sets! A&. A&))))) :pattern ((lib!verus_extra.set_lib_ext_v.flatten_sets.? A&. A& sets!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (sets! Poly)) (! (=> (has_type sets! (TYPE%vstd!set.Set. $ (TYPE%vstd!set.Set. A&. A&))) (has_type (lib!verus_extra.set_lib_ext_v.flatten_sets.? A&. A& sets!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((lib!verus_extra.set_lib_ext_v.flatten_sets.? A&. A& sets!)) )))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::valid_optional_value")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:102:1: 102:82 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::valid_optional_value")
(assert (fuel_bool_default fuel%lib!host_protocol_t.valid_optional_value.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.valid_optional_value.) (forall ((ov! Poly)) (! (= (lib!host_protocol_t.valid_optional_value.? ov!) (=> (not (is-core!option.Option./None_ (%Poly%core!option.Option. ov!))) (let ((value$ (%Poly%vstd!seq.Seq<u8.>. (core!option.Option./Some/0 (%Poly%core!option.Option. ov!))))) (lib!app_interface_t.valid_value.? (Poly%vstd!seq.Seq<u8.>. value$))))) :pattern ((lib!host_protocol_t.valid_optional_value.? ov!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::geq_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%3.geq_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%3.geq_spec.) (forall ((K&. Dcr) (K& Type) (self! Poly) (other! Poly)) (! (= (lib!keys_t.impl&%3.geq_spec.? K&. K& self! other!) (not (lib!keys_t.impl&%3.lt_spec.? K&. K& self! other!))) :pattern ((lib!keys_t.impl&%3.geq_spec.? K&. K& self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyRange::is_empty")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%4.is_empty.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%4.is_empty.) (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (= (lib!keys_t.impl&%4.is_empty.? K&. K& self!) (lib!keys_t.impl&%3.geq_spec.? K&. K& (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. self!))) (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. self!))))) :pattern ((lib!keys_t.impl&%4.is_empty.? K&. K& self!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_parameters_t::AbstractParameters::static_params")
(assert (fuel_bool_default fuel%lib!abstract_parameters_t.impl&%0.static_params.))
(assert (=> (fuel_bool fuel%lib!abstract_parameters_t.impl&%0.static_params.) (forall ((no%param Poly)) (! (= (lib!abstract_parameters_t.impl&%0.static_params.? no%param) (lib!abstract_parameters_t.AbstractParameters./AbstractParameters (%I (I 18446744073709551615)) (%I (I 9223372036854775807)))) :pattern ((lib!abstract_parameters_t.impl&%0.static_params.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!abstract_parameters_t.AbstractParameters. (lib!abstract_parameters_t.impl&%0.static_params.? no%param)) TYPE%lib!abstract_parameters_t.AbstractParameters.)) :pattern ((lib!abstract_parameters_t.impl&%0.static_params.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::single_message_t::SingleMessage::arrow_Message_m")
(assert (fuel_bool_default fuel%lib!single_message_t.impl&%0.arrow_Message_m.))
(assert (=> (fuel_bool fuel%lib!single_message_t.impl&%0.arrow_Message_m.) (forall ((MT&. Dcr) (MT& Type) (self! Poly)) (! (= (lib!single_message_t.impl&%0.arrow_Message_m.? MT&. MT& self!) (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. self!))) :pattern ((lib!single_message_t.impl&%0.arrow_Message_m.? MT&. MT& self!)) ))))
(assert (forall ((MT&. Dcr) (MT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) (has_type (lib!single_message_t.impl&%0.arrow_Message_m.? MT&. MT& self!) MT&)) :pattern ((lib!single_message_t.impl&%0.arrow_Message_m.? MT&. MT& self!)) )))
(set-info :comment ";; Function-Axioms lib::single_message_t::SingleMessage::arrow_Message_dst")
(assert (fuel_bool_default fuel%lib!single_message_t.impl&%0.arrow_Message_dst.))
(assert (=> (fuel_bool fuel%lib!single_message_t.impl&%0.arrow_Message_dst.) (forall ((MT&. Dcr) (MT& Type) (self! Poly)) (! (= (lib!single_message_t.impl&%0.arrow_Message_dst.? MT&. MT& self!) (lib!single_message_t.SingleMessage./Message/dst (%Poly%lib!single_message_t.SingleMessage. self!))) :pattern ((lib!single_message_t.impl&%0.arrow_Message_dst.? MT&. MT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::delegation_map_t::AbstractDelegationMap::view")
(assert (fuel_bool_default fuel%lib!delegation_map_t.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!delegation_map_t.impl&%0.view.) (forall ((self! Poly)) (! (= (lib!delegation_map_t.impl&%0.view.? self!) (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. self!))) :pattern ((lib!delegation_map_t.impl&%0.view.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::delegation_map_t::AbstractDelegationMap::is_complete")
(assert (fuel_bool_default fuel%lib!delegation_map_t.impl&%0.is_complete.))
(assert (=> (fuel_bool fuel%lib!delegation_map_t.impl&%0.is_complete.) (forall ((self! Poly)) (! (= (lib!delegation_map_t.impl&%0.is_complete.? self!) (vstd!set_lib.impl&%0.is_full.? $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. self!)))))) :pattern ((lib!delegation_map_t.impl&%0.is_complete.? self!)) ))))
(set-info :comment ";; Function-Specs lib::delegation_map_t::AbstractDelegationMap::spec_index")
(declare-fun req%lib!delegation_map_t.impl&%0.spec_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!delegation_map_t.impl&%0.spec_index. self! key!) (=> %%global_location_label%%6 (vstd!set.impl&%0.contains.? $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. self!)))) key!))) :pattern ((req%lib!delegation_map_t.impl&%0.spec_index. self! key!)) )))
(set-info :comment ";; Function-Axioms lib::delegation_map_t::AbstractDelegationMap::spec_index")
(assert (fuel_bool_default fuel%lib!delegation_map_t.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%lib!delegation_map_t.impl&%0.spec_index.) (forall ((self! Poly) (key! Poly)) (! (= (lib!delegation_map_t.impl&%0.spec_index.? self! key!) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.index.? $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. self!))) key!))) :pattern ((lib!delegation_map_t.impl&%0.spec_index.? self! key!)) ))))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::hashtable_lookup")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:72:1: 72:98 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::hashtable_lookup")
(assert (fuel_bool_default fuel%lib!host_protocol_t.hashtable_lookup.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.hashtable_lookup.) (forall ((h! Poly) (k! Poly)) (! (= (lib!host_protocol_t.hashtable_lookup.? h! k!) (ite (vstd!set.impl&%0.contains.? $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h!) k!) (core!option.Option./Some (vstd!map.impl&%0.index.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h! k!)) core!option.Option./None)) :pattern ((lib!host_protocol_t.hashtable_lookup.? h! k!)) ))))
(assert (forall ((h! Poly) (k! Poly)) (! (=> (and (has_type h! (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type k! TYPE%lib!keys_t.SHTKey.)) (has_type (Poly%core!option.Option. (lib!host_protocol_t.hashtable_lookup.? h! k!)) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) :pattern ((lib!host_protocol_t.hashtable_lookup.? h! k!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::ack_state_lookup")
(assert (fuel_bool_default fuel%lib!single_delivery_t.ack_state_lookup.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.ack_state_lookup.) (forall ((MT&. Dcr) (MT& Type) (src! Poly) (send_state! Poly)) (! (= (lib!single_delivery_t.ack_state_lookup.? MT&. MT& src! send_state!) (ite (vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&) send_state!) src!) (%Poly%lib!single_delivery_t.AckState. (vstd!map.impl&%0.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&) send_state! src!)) (lib!single_delivery_t.AckState./AckState (%I (I 0)) (vstd!seq.Seq.empty.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))))) :pattern ((lib!single_delivery_t.ack_state_lookup.? MT&. MT& src! send_state!)) ))))
(assert (forall ((MT&. Dcr) (MT& Type) (src! Poly) (send_state! Poly)) (! (=> (and (has_type src! TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (has_type send_state! (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&)))) (has_type (Poly%lib!single_delivery_t.AckState. (lib!single_delivery_t.ack_state_lookup.? MT&. MT& src! send_state!)) (TYPE%lib!single_delivery_t.AckState. MT&. MT&))) :pattern ((lib!single_delivery_t.ack_state_lookup.? MT&. MT& src! send_state!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::send_single_message")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.send_single_message.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.send_single_message.) (forall ((MT&. Dcr) (MT& Type) (pre! Poly) (post! Poly) (m! Poly) (dst! Poly) (sm! Poly) (params! Poly)) (! (= (lib!single_delivery_t.impl&%1.send_single_message.? MT&. MT& pre! post! m! dst! sm! params!) (let ((old_ack_state$ (lib!single_delivery_t.ack_state_lookup.? MT&. MT& dst! (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. pre!))))) (let ((new_seqno$ (nClip (Add (nClip (Add (lib!single_delivery_t.AckState./AckState/num_packets_acked (%Poly%lib!single_delivery_t.AckState. (Poly%lib!single_delivery_t.AckState. old_ack_state$))) (vstd!seq.Seq.len.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&) (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. (Poly%lib!single_delivery_t.AckState. old_ack_state$)))))) 1)))) (ite (> new_seqno$ (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_seqno (%Poly%lib!abstract_parameters_t.AbstractParameters. params!))) (and (= post! pre!) (is-core!option.Option./None_ (%Poly%core!option.Option. sm!))) (and (= (%Poly%core!option.Option. sm!) (core!option.Option./Some (Poly%lib!single_message_t.SingleMessage. (lib!single_message_t.SingleMessage./Message (%I (I new_seqno$)) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. dst!) m!)))) (= (%Poly%lib!single_delivery_t.SingleDelivery. post!) (lib!single_delivery_t.SingleDelivery./SingleDelivery (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. pre!)))) (vstd!map.impl&%0.insert.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. pre!)) dst! (Poly%lib!single_delivery_t.AckState. (lib!single_delivery_t.AckState./AckState (%I (I (lib!single_delivery_t.AckState./AckState/num_packets_acked (%Poly%lib!single_delivery_t.AckState. (Poly%lib!single_delivery_t.AckState. old_ack_state$))))) (vstd!seq.Seq.push.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&) (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. (Poly%lib!single_delivery_t.AckState. old_ack_state$))) (core!option.Option./Some/0 (%Poly%core!option.Option. sm!))))))))))))) :pattern ((lib!single_delivery_t.impl&%1.send_single_message.? MT&. MT& pre! post! m! dst! sm! params!)) ))))
(set-info :comment ";; Function-Specs lib::host_protocol_t::next_get_request_reply")
(declare-fun req%lib!host_protocol_t.next_get_request_reply. (Poly Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((pre! Poly) (post! Poly) (src! Poly) (seqno! Poly) (k! Poly) (sm! Poly) (m! Poly) (out! Poly) (should_send! Poly)) (! (= (req%lib!host_protocol_t.next_get_request_reply. pre! post! src! seqno! k! sm! m! out! should_send!) (=> %%global_location_label%%7 (lib!delegation_map_t.impl&%0.is_complete.? (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))) :pattern ((req%lib!host_protocol_t.next_get_request_reply. pre! post! src! seqno! k! sm! m! out! should_send!)) )))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::next_get_request_reply")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:205:1: 205:234 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::next_get_request_reply")
(assert (fuel_bool_default fuel%lib!host_protocol_t.next_get_request_reply.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.next_get_request_reply.) (forall ((pre! Poly) (post! Poly) (src! Poly) (seqno! Poly) (k! Poly) (sm! Poly) (m! Poly) (out! Poly) (should_send! Poly)) (! (= (lib!host_protocol_t.next_get_request_reply.? pre! post! src! seqno! k! sm! m! out! should_send!) (let ((owner$ (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.index.? $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))) k!)))) (ite (and (%B should_send!) (lib!app_interface_t.valid_key.? k!)) (and (and (and (ite (= owner$ (lib!host_protocol_t.AbstractConstants./AbstractConstants/me (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))) (and (= (%Poly%lib!message_t.Message. m!) (lib!message_t.Message./Reply (%Poly%lib!keys_t.SHTKey. k!) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!host_protocol_t.hashtable_lookup.? (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) k!))))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (%Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (vstd!seq.Seq.push.? $ TYPE%lib!abstract_service_t.AppRequest. (Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (Poly%lib!abstract_service_t.AppRequest. (lib!abstract_service_t.AppRequest./AppGetRequest (%I seqno!) (%Poly%lib!keys_t.SHTKey. k!))))))) (and (= (%Poly%lib!message_t.Message. m!) (lib!message_t.Message./Redirect (%Poly%lib!keys_t.SHTKey. k!) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. owner$)))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))) (lib!single_delivery_t.impl&%1.send_single_message.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. post!))) m! src! (Poly%core!option.Option. (core!option.Option./Some sm!)) (Poly%lib!abstract_parameters_t.AbstractParameters. (lib!host_protocol_t.AbstractConstants./AbstractConstants/params (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))))) (= (lib!single_message_t.SingleMessage./Message/dst (%Poly%lib!single_message_t.SingleMessage. sm!)) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. src!))) (= out! (vstd!set.impl&%0.insert.? $ TYPE%lib!network_t.Packet. (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.) (Poly%lib!network_t.Packet. (lib!network_t.Packet./Packet (%Poly%lib!abstract_end_point_t.AbstractEndPoint. src!) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!host_protocol_t.AbstractConstants./AbstractConstants/me (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))))) (%Poly%lib!single_message_t.SingleMessage. sm!)))))) (and (= (%Poly%lib!host_protocol_t.AbstractHostState. post!) (lib!host_protocol_t.AbstractHostState./AbstractHostState (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (%Poly%lib!delegation_map_t.AbstractDelegationMap. (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (%Poly%lib!single_delivery_t.SingleDelivery. (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet (%Poly%lib!host_protocol_t.AbstractHostState. post!)))) (%I (I (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (%Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))) (= out! (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.)))))) :pattern ((lib!host_protocol_t.next_get_request_reply.? pre! post! src! seqno! k! sm! m! out! should_send!)) ))))
(set-info :comment ";; Function-Axioms lib::single_message_t::SingleMessage::arrow_Message_seqno")
(assert (fuel_bool_default fuel%lib!single_message_t.impl&%0.arrow_Message_seqno.))
(assert (=> (fuel_bool fuel%lib!single_message_t.impl&%0.arrow_Message_seqno.) (forall ((MT&. Dcr) (MT& Type) (self! Poly)) (! (= (lib!single_message_t.impl&%0.arrow_Message_seqno.? MT&. MT& self!) (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. self!))) :pattern ((lib!single_message_t.impl&%0.arrow_Message_seqno.? MT&. MT& self!)) ))))
(assert (forall ((MT&. Dcr) (MT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) (<= 0 (lib!single_message_t.impl&%0.arrow_Message_seqno.? MT&. MT& self!))) :pattern ((lib!single_message_t.impl&%0.arrow_Message_seqno.? MT&. MT& self!)) )))
(set-info :comment ";; Function-Axioms lib::message_t::Message::arrow_GetRequest_key")
(assert (fuel_bool_default fuel%lib!message_t.impl&%0.arrow_GetRequest_key.))
(assert (=> (fuel_bool fuel%lib!message_t.impl&%0.arrow_GetRequest_key.) (forall ((self! Poly)) (! (= (lib!message_t.impl&%0.arrow_GetRequest_key.? self!) (lib!message_t.Message./GetRequest/key (%Poly%lib!message_t.Message. self!))) :pattern ((lib!message_t.impl&%0.arrow_GetRequest_key.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.SHTKey. (lib!message_t.impl&%0.arrow_GetRequest_key.? self!)) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!message_t.impl&%0.arrow_GetRequest_key.? self!)) )))
(set-info :comment ";; Function-Specs lib::host_protocol_t::next_get_request")
(declare-fun req%lib!host_protocol_t.next_get_request. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((pre! Poly) (post! Poly) (pkt! Poly) (out! Poly)) (! (= (req%lib!host_protocol_t.next_get_request. pre! post! pkt! out!) (and (=> %%global_location_label%%8 (is-lib!single_message_t.SingleMessage./Message_ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))) (=> %%global_location_label%%9 (lib!delegation_map_t.impl&%0.is_complete.? (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))))) :pattern ((req%lib!host_protocol_t.next_get_request. pre! post! pkt! out!)) )))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::next_get_request")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:226:1: 226:131 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::next_get_request")
(assert (fuel_bool_default fuel%lib!host_protocol_t.next_get_request.))
(define-fun is-lib!message_t.Message./GetRequest_ ((c lib!message_t.Message.)) Bool ((_ is lib!message_t.Message./GetRequest) c))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.next_get_request.) (forall ((pre! Poly) (post! Poly) (pkt! Poly) (out! Poly)) (! (= (lib!host_protocol_t.next_get_request.? pre! post! pkt! out!) (and (and (and (and (is-lib!message_t.Message./GetRequest_ (%Poly%lib!message_t.Message. (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (exists ((sm$ Poly) (m$ Poly) (b$ Poly)) (! (and (and (has_type sm$ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) (has_type m$ TYPE%lib!message_t.Message.) (has_type b$ BOOL)) (lib!host_protocol_t.next_get_request_reply.? pre! post! (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (I (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))))) (Poly%lib!keys_t.SHTKey. (lib!message_t.Message./GetRequest/key (%Poly%lib!message_t.Message. (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))))))) sm$ m$ out! b$)) :pattern ((lib!host_protocol_t.next_get_request_reply.? pre! post! (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (I (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))))) (Poly%lib!keys_t.SHTKey. (lib!message_t.Message./GetRequest/key (%Poly%lib!message_t.Message. (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))))))) sm$ m$ out! b$)) )))) :pattern ((lib!host_protocol_t.next_get_request.? pre! post! pkt! out!)) ))))
(set-info :comment ";; Function-Axioms lib::host_protocol_t::extract_packet_from_lsht_packet")
(assert (fuel_bool_default fuel%lib!host_protocol_t.extract_packet_from_lsht_packet.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.extract_packet_from_lsht_packet.) (forall ((lp! Poly)) (! (= (lib!host_protocol_t.extract_packet_from_lsht_packet.? lp!) (lib!network_t.Packet./Packet (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!environment_t.LPacket./LPacket/dst (%Poly%lib!environment_t.LPacket. lp!))) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!environment_t.LPacket./LPacket/src (%Poly%lib!environment_t.LPacket. lp!))) (%Poly%lib!single_message_t.SingleMessage. (lib!environment_t.LPacket./LPacket/msg (%Poly%lib!environment_t.LPacket. lp!))))) :pattern ((lib!host_protocol_t.extract_packet_from_lsht_packet.? lp!)) ))))
(assert (forall ((lp! Poly)) (! (=> (has_type lp! (TYPE%lib!environment_t.LPacket. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.))) (has_type (Poly%lib!network_t.Packet. (lib!host_protocol_t.extract_packet_from_lsht_packet.? lp!)) TYPE%lib!network_t.Packet.)) :pattern ((lib!host_protocol_t.extract_packet_from_lsht_packet.? lp!)) )))
(set-info :comment ";; Function-Axioms lib::host_protocol_t::extract_packets_from_lsht_packets")
(assert (fuel_bool_default fuel%lib!host_protocol_t.extract_packets_from_lsht_packets.))
(declare-fun %%lambda%%7 () %%Function%%)
(assert (forall ((lp$ Poly)) (! (= (%%apply%%0 %%lambda%%7 lp$) (Poly%lib!network_t.Packet. (lib!host_protocol_t.extract_packet_from_lsht_packet.? lp$))) :pattern ((%%apply%%0 %%lambda%%7 lp$)))))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.extract_packets_from_lsht_packets.) (forall ((seq_packets! Poly)) (! (= (lib!host_protocol_t.extract_packets_from_lsht_packets.? seq_packets!) (%Poly%vstd!set.Set<lib!network_t.Packet.>. (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!network_t.Packet. (vstd!seq_lib.impl&%0.map_values.? $ (TYPE%lib!environment_t.LPacket. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) $ TYPE%lib!network_t.Packet. seq_packets! (Poly%fun%1. (mk_fun %%lambda%%7)))))) :pattern ((lib!host_protocol_t.extract_packets_from_lsht_packets.? seq_packets!)) ))))
(set-info :comment ";; Function-Axioms lib::message_t::Message::arrow_SetRequest_key")
(assert (fuel_bool_default fuel%lib!message_t.impl&%0.arrow_SetRequest_key.))
(assert (=> (fuel_bool fuel%lib!message_t.impl&%0.arrow_SetRequest_key.) (forall ((self! Poly)) (! (= (lib!message_t.impl&%0.arrow_SetRequest_key.? self!) (lib!message_t.Message./SetRequest/key (%Poly%lib!message_t.Message. self!))) :pattern ((lib!message_t.impl&%0.arrow_SetRequest_key.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.SHTKey. (lib!message_t.impl&%0.arrow_SetRequest_key.? self!)) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!message_t.impl&%0.arrow_SetRequest_key.? self!)) )))
(set-info :comment ";; Function-Axioms lib::message_t::Message::arrow_SetRequest_value")
(assert (fuel_bool_default fuel%lib!message_t.impl&%0.arrow_SetRequest_value.))
(assert (=> (fuel_bool fuel%lib!message_t.impl&%0.arrow_SetRequest_value.) (forall ((self! Poly)) (! (= (lib!message_t.impl&%0.arrow_SetRequest_value.? self!) (lib!message_t.Message./SetRequest/value (%Poly%lib!message_t.Message. self!))) :pattern ((lib!message_t.impl&%0.arrow_SetRequest_value.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!message_t.Message.) (has_type (Poly%core!option.Option. (lib!message_t.impl&%0.arrow_SetRequest_value.? self!)) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) :pattern ((lib!message_t.impl&%0.arrow_SetRequest_value.? self!)) )))
(set-info :comment ";; Function-Specs lib::host_protocol_t::next_set_request_complete")
(declare-fun req%lib!host_protocol_t.next_set_request_complete. (Poly Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(define-fun is-lib!message_t.Message./SetRequest_ ((c lib!message_t.Message.)) Bool ((_ is lib!message_t.Message./SetRequest) c))
(assert (forall ((pre! Poly) (post! Poly) (src! Poly) (seqno! Poly) (reqm! Poly) (sm! Poly) (replym! Poly) (out! Poly) (should_send! Poly)) (! (= (req%lib!host_protocol_t.next_set_request_complete. pre! post! src! seqno! reqm! sm! replym! out! should_send!) (and (=> %%global_location_label%%10 (lib!delegation_map_t.impl&%0.is_complete.? (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))) (=> %%global_location_label%%11 (is-lib!message_t.Message./SetRequest_ (%Poly%lib!message_t.Message. reqm!))))) :pattern ((req%lib!host_protocol_t.next_set_request_complete. pre! post! src! seqno! reqm! sm! replym! out! should_send!)) )))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::next_set_request_complete")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:239:1: 249:14 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::next_set_request_complete")
(assert (fuel_bool_default fuel%lib!host_protocol_t.next_set_request_complete.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.next_set_request_complete.) (forall ((pre! Poly) (post! Poly) (src! Poly) (seqno! Poly) (reqm! Poly) (sm! Poly) (replym! Poly) (out! Poly) (should_send! Poly)) (! (= (lib!host_protocol_t.next_set_request_complete.? pre! post! src! seqno! reqm! sm! replym! out! should_send!) (let ((k$ (lib!message_t.Message./SetRequest/key (%Poly%lib!message_t.Message. reqm!)))) (let ((ov$ (lib!message_t.Message./SetRequest/value (%Poly%lib!message_t.Message. reqm!)))) (let ((owner$ (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.index.? $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))) (Poly%lib!keys_t.SHTKey. k$))))) (ite (and (and (%B should_send!) (lib!app_interface_t.valid_key.? (Poly%lib!keys_t.SHTKey. k$))) (lib!host_protocol_t.valid_optional_value.? (Poly%core!option.Option. ov$))) (and (and (and (ite (= owner$ (lib!host_protocol_t.AbstractConstants./AbstractConstants/me (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))) (and (and (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (ite (is-core!option.Option./None_ ov$) (vstd!map.impl&%0.remove.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (Poly%lib!keys_t.SHTKey. k$)) (let ((v$ (%Poly%vstd!seq.Seq<u8.>. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ov$)))))) (vstd!map.impl&%0.insert.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (Poly%lib!keys_t.SHTKey. k$) (Poly%vstd!seq.Seq<u8.>. v$)))))) (= (%Poly%lib!message_t.Message. replym!) (lib!message_t.Message./Reply (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$)) (%Poly%core!option.Option. (Poly%core!option.Option. ov$))))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (%Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (vstd!seq.Seq.push.? $ TYPE%lib!abstract_service_t.AppRequest. (Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (Poly%lib!abstract_service_t.AppRequest. (lib!abstract_service_t.AppRequest./AppSetRequest (%I seqno!) (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$)) (%Poly%core!option.Option. (Poly%core!option.Option. ov$)))))))) (and (and (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (= (%Poly%lib!message_t.Message. replym!) (lib!message_t.Message./Redirect (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$)) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. owner$))))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))) (lib!single_delivery_t.impl&%1.send_single_message.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. post!))) replym! src! (Poly%core!option.Option. (core!option.Option./Some sm!)) (Poly%lib!abstract_parameters_t.AbstractParameters. (lib!host_protocol_t.AbstractConstants./AbstractConstants/params (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))))) (= (lib!single_message_t.SingleMessage./Message/dst (%Poly%lib!single_message_t.SingleMessage. sm!)) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. src!))) (= out! (vstd!set.impl&%0.insert.? $ TYPE%lib!network_t.Packet. (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.) (Poly%lib!network_t.Packet. (lib!network_t.Packet./Packet (%Poly%lib!abstract_end_point_t.AbstractEndPoint. src!) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!host_protocol_t.AbstractConstants./AbstractConstants/me (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))))) (%Poly%lib!single_message_t.SingleMessage. sm!)))))) (and (= (%Poly%lib!host_protocol_t.AbstractHostState. post!) (lib!host_protocol_t.AbstractHostState./AbstractHostState (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (%Poly%lib!delegation_map_t.AbstractDelegationMap. (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (%Poly%lib!single_delivery_t.SingleDelivery. (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet (%Poly%lib!host_protocol_t.AbstractHostState. post!)))) (%I (I (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (%Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))) (= out! (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.)))))))) :pattern ((lib!host_protocol_t.next_set_request_complete.? pre! post! src! seqno! reqm! sm! replym! out! should_send!)) ))))
(set-info :comment ";; Function-Specs lib::host_protocol_t::next_set_request")
(declare-fun req%lib!host_protocol_t.next_set_request. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((pre! Poly) (post! Poly) (pkt! Poly) (out! Poly)) (! (= (req%lib!host_protocol_t.next_set_request. pre! post! pkt! out!) (and (=> %%global_location_label%%12 (is-lib!single_message_t.SingleMessage./Message_ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))) (=> %%global_location_label%%13 (lib!delegation_map_t.impl&%0.is_complete.? (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))))) :pattern ((req%lib!host_protocol_t.next_set_request. pre! post! pkt! out!)) )))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::next_set_request")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:279:1: 284:14 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::next_set_request")
(assert (fuel_bool_default fuel%lib!host_protocol_t.next_set_request.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.next_set_request.) (forall ((pre! Poly) (post! Poly) (pkt! Poly) (out! Poly)) (! (= (lib!host_protocol_t.next_set_request.? pre! post! pkt! out!) (and (and (and (is-lib!message_t.Message./SetRequest_ (%Poly%lib!message_t.Message. (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))))) (exists ((sm$ Poly) (replym$ Poly) (should_send$ Poly)) (! (and (and (has_type sm$ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) (has_type replym$ TYPE%lib!message_t.Message.) (has_type should_send$ BOOL)) (lib!host_protocol_t.next_set_request_complete.? pre! post! (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (I (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))))) (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))) sm$ replym$ out! should_send$)) :pattern ((lib!host_protocol_t.next_set_request_complete.? pre! post! (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (I (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))))) (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))) sm$ replym$ out! should_send$)) ))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))) :pattern ((lib!host_protocol_t.next_set_request.? pre! post! pkt! out!)) ))))
(set-info :comment ";; Function-Specs lib::delegation_map_t::AbstractDelegationMap::update")
(declare-fun req%lib!delegation_map_t.impl&%0.update. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((self! Poly) (newkr! Poly) (host! Poly)) (! (= (req%lib!delegation_map_t.impl&%0.update. self! newkr! host!) (=> %%global_location_label%%14 (lib!delegation_map_t.impl&%0.is_complete.? self!))) :pattern ((req%lib!delegation_map_t.impl&%0.update. self! newkr! host!)) )))
(set-info :comment ";; Function-Axioms lib::delegation_map_t::AbstractDelegationMap::update")
(assert (fuel_bool_default fuel%lib!delegation_map_t.impl&%0.update.))
(declare-fun %%lambda%%8 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2) k$) (B (lib!keys_t.impl&%4.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$))) :pattern ((%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2) k$)))))
(declare-fun %%lambda%%9 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%9 %%hole%%0) k$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%9 %%hole%%0) k$)))))
(assert (=> (fuel_bool fuel%lib!delegation_map_t.impl&%0.update.) (forall ((self! Poly) (newkr! Poly) (host! Poly)) (! (= (lib!delegation_map_t.impl&%0.update.? self! newkr! host!) (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap (%Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. self!))) (vstd!map.impl&%0.new.? $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%fun%1. $ TYPE%lib!keys_t.SHTKey. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (Poly%fun%1. (mk_fun (%%lambda%%8 $ TYPE%lib!keys_t.SHTKey. newkr!))) (Poly%fun%1. (mk_fun (%%lambda%%9 host!)))))))) :pattern ((lib!delegation_map_t.impl&%0.update.? self! newkr! host!)) ))))
(set-info :comment ";; Function-Axioms lib::message_t::Message::arrow_Delegate_range")
(assert (fuel_bool_default fuel%lib!message_t.impl&%0.arrow_Delegate_range.))
(assert (=> (fuel_bool fuel%lib!message_t.impl&%0.arrow_Delegate_range.) (forall ((self! Poly)) (! (= (lib!message_t.impl&%0.arrow_Delegate_range.? self!) (lib!message_t.Message./Delegate/range (%Poly%lib!message_t.Message. self!))) :pattern ((lib!message_t.impl&%0.arrow_Delegate_range.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.KeyRange. (lib!message_t.impl&%0.arrow_Delegate_range.? self!)) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.))) :pattern ((lib!message_t.impl&%0.arrow_Delegate_range.? self!)) )))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::bulk_update_domain")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:78:1: 78:120 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::bulk_update_domain")
(assert (fuel_bool_default fuel%lib!host_protocol_t.bulk_update_domain.))
(declare-fun %%lambda%%10 (Dcr Type Poly Dcr Type Poly Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Poly) (%%hole%%9 Dcr) (%%hole%%10 Type) (%%hole%%11 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11) k$) (B (and (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)) (=> (lib!keys_t.impl&%4.contains.? %%hole%%6 %%hole%%7 %%hole%%8 k$) (vstd!set.impl&%0.contains.? %%hole%%9 %%hole%%10 %%hole%%11 k$))))) :pattern ((%%apply%%0 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11) k$)))))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.bulk_update_domain.) (forall ((h! Poly) (kr! Poly) (u! Poly)) (! (= (lib!host_protocol_t.bulk_update_domain.? h! kr! u!) (%Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (vstd!set.impl&%0.new.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%fun%1. $ TYPE%lib!keys_t.SHTKey. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%10 $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h!) $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) u!) $ TYPE%lib!keys_t.SHTKey. kr! $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) u!))))))) :pattern ((lib!host_protocol_t.bulk_update_domain.? h! kr! u!)) ))))
(set-info :comment ";; Function-Axioms lib::host_protocol_t::bulk_update_hashtable")
(assert (fuel_bool_default fuel%lib!host_protocol_t.bulk_update_hashtable.))
(declare-fun %%lambda%%11 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%11 %%hole%%0 %%hole%%1 %%hole%%2) k$) (B (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$))) :pattern ((%%apply%%0 (%%lambda%%11 %%hole%%0 %%hole%%1 %%hole%%2) k$)))))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.bulk_update_hashtable.) (forall ((h! Poly) (kr! Poly) (u! Poly)) (! (= (lib!host_protocol_t.bulk_update_hashtable.? h! kr! u!) (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (vstd!map.impl&%0.new.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%fun%1. $ TYPE%lib!keys_t.SHTKey. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (Poly%fun%1. (mk_fun (%%lambda%%11 $ TYPE%lib!keys_t.SHTKey. (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (lib!host_protocol_t.bulk_update_domain.? h! kr! u!))))) (Poly%fun%1. (mk_fun (%%lambda%%3 $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) u!) $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) u! $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h!)))))) :pattern ((lib!host_protocol_t.bulk_update_hashtable.? h! kr! u!)) ))))
(set-info :comment ";; Function-Axioms lib::message_t::Message::arrow_Delegate_h")
(assert (fuel_bool_default fuel%lib!message_t.impl&%0.arrow_Delegate_h.))
(assert (=> (fuel_bool fuel%lib!message_t.impl&%0.arrow_Delegate_h.) (forall ((self! Poly)) (! (= (lib!message_t.impl&%0.arrow_Delegate_h.? self!) (lib!message_t.Message./Delegate/h (%Poly%lib!message_t.Message. self!))) :pattern ((lib!message_t.impl&%0.arrow_Delegate_h.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::send_no_message")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.send_no_message.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.send_no_message.) (forall ((MT&. Dcr) (MT& Type) (pre! Poly) (post! Poly)) (! (= (lib!single_delivery_t.impl&%1.send_no_message.? MT&. MT& pre! post!) (= (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. post!)) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. pre!)))) :pattern ((lib!single_delivery_t.impl&%1.send_no_message.? MT&. MT& pre! post!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::receive_no_message")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.receive_no_message.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.receive_no_message.) (forall ((MT&. Dcr) (MT& Type) (pre! Poly) (post! Poly)) (! (= (lib!single_delivery_t.impl&%1.receive_no_message.? MT&. MT& pre! post!) (= (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. post!)) (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. pre!)))) :pattern ((lib!single_delivery_t.impl&%1.receive_no_message.? MT&. MT& pre! post!)) ))))
(set-info :comment ";; Function-Specs lib::host_protocol_t::next_delegate")
(declare-fun req%lib!host_protocol_t.next_delegate. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((pre! Poly) (post! Poly) (pkt! Poly) (out! Poly)) (! (= (req%lib!host_protocol_t.next_delegate. pre! post! pkt! out!) (and (=> %%global_location_label%%15 (is-lib!single_message_t.SingleMessage./Message_ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))) (=> %%global_location_label%%16 (lib!delegation_map_t.impl&%0.is_complete.? (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))))) :pattern ((req%lib!host_protocol_t.next_delegate. pre! post! pkt! out!)) )))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::next_delegate")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:296:1: 296:128 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::next_delegate")
(assert (fuel_bool_default fuel%lib!host_protocol_t.next_delegate.))
(define-fun is-lib!message_t.Message./Delegate_ ((c lib!message_t.Message.)) Bool ((_ is lib!message_t.Message./Delegate) c))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.next_delegate.) (forall ((pre! Poly) (post! Poly) (pkt! Poly) (out! Poly)) (! (= (lib!host_protocol_t.next_delegate.? pre! post! pkt! out!) (and (and (and (and (and (is-lib!message_t.Message./Delegate_ (%Poly%lib!message_t.Message. (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))))) (ite (vstd!seq_lib.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (lib!host_protocol_t.AbstractConstants./AbstractConstants/host_ids (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!)))) (let ((m$ (%Poly%lib!message_t.Message. (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))))))) (and (and (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!delegation_map_t.impl&%0.update.? (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (Poly%lib!keys_t.KeyRange. (lib!message_t.Message./Delegate/range (%Poly%lib!message_t.Message. (Poly%lib!message_t.Message. m$)))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!host_protocol_t.AbstractConstants./AbstractConstants/me (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.bulk_update_hashtable.? (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (Poly%lib!keys_t.KeyRange. (lib!message_t.Message./Delegate/range (%Poly%lib!message_t.Message. (Poly%lib!message_t.Message. m$)))) (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!message_t.Message./Delegate/h (%Poly%lib!message_t.Message. (Poly%lib!message_t.Message. m$))))))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (Add (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (%Poly%lib!host_protocol_t.AbstractHostState. pre!)) 1)))) (and (and (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))) (lib!single_delivery_t.impl&%1.send_no_message.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. post!))))) (lib!single_delivery_t.impl&%1.receive_no_message.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. post!))))) (= out! (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))) :pattern ((lib!host_protocol_t.next_delegate.? pre! post! pkt! out!)) ))))
(set-info :comment ";; Function-Axioms lib::message_t::Message::arrow_Shard_recipient")
(assert (fuel_bool_default fuel%lib!message_t.impl&%0.arrow_Shard_recipient.))
(assert (=> (fuel_bool fuel%lib!message_t.impl&%0.arrow_Shard_recipient.) (forall ((self! Poly)) (! (= (lib!message_t.impl&%0.arrow_Shard_recipient.? self!) (lib!message_t.Message./Shard/recipient (%Poly%lib!message_t.Message. self!))) :pattern ((lib!message_t.impl&%0.arrow_Shard_recipient.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::message_t::Message::arrow_Shard_range")
(assert (fuel_bool_default fuel%lib!message_t.impl&%0.arrow_Shard_range.))
(assert (=> (fuel_bool fuel%lib!message_t.impl&%0.arrow_Shard_range.) (forall ((self! Poly)) (! (= (lib!message_t.impl&%0.arrow_Shard_range.? self!) (lib!message_t.Message./Shard/range (%Poly%lib!message_t.Message. self!))) :pattern ((lib!message_t.impl&%0.arrow_Shard_range.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.KeyRange. (lib!message_t.impl&%0.arrow_Shard_range.? self!)) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.))) :pattern ((lib!message_t.impl&%0.arrow_Shard_range.? self!)) )))
(set-info :comment ";; Function-Specs lib::delegation_map_t::AbstractDelegationMap::delegate_for_key_range_is_host")
(declare-fun req%lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((self! Poly) (kr! Poly) (id! Poly)) (! (= (req%lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host. self! kr! id!) (=> %%global_location_label%%17 (lib!delegation_map_t.impl&%0.is_complete.? self!))) :pattern ((req%lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host. self! kr! id!)) )))
(set-info :comment ";; Function-Axioms lib::delegation_map_t::AbstractDelegationMap::delegate_for_key_range_is_host")
(assert (fuel_bool_default fuel%lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host.))
(assert (=> (fuel_bool fuel%lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host.) (forall ((self! Poly) (kr! Poly) (id! Poly)) (! (= (lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host.? self! kr! id!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!keys_t.SHTKey.) (=> (lib!keys_t.impl&%4.contains.? $ TYPE%lib!keys_t.SHTKey. kr! k$) (= (vstd!map.impl&%0.index.? $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. self!))) k$) id!))) :pattern ((lib!keys_t.impl&%4.contains.? $ TYPE%lib!keys_t.SHTKey. kr! k$)) ))) :pattern ((lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host.? self! kr! id!)) ))))
(set-info :comment ";; Function-Axioms lib::app_interface_t::extract_range")
(assert (fuel_bool_default fuel%lib!app_interface_t.extract_range.))
(declare-fun %%lambda%%12 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%12 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (lib!keys_t.impl&%4.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%12 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%13 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%13 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%13 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%lib!app_interface_t.extract_range.) (forall ((h! Poly) (kr! Poly)) (! (= (lib!app_interface_t.extract_range.? h! kr!) (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (vstd!map.impl&%0.new.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%fun%1. $ TYPE%lib!keys_t.SHTKey. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (Poly%fun%1. (mk_fun (%%lambda%%12 $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h!) $ TYPE%lib!keys_t.SHTKey. kr!))) (Poly%fun%1. (mk_fun (%%lambda%%13 $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h!)))))) :pattern ((lib!app_interface_t.extract_range.? h! kr!)) ))))
(set-info :comment ";; Function-Axioms lib::host_protocol_t::next_shard_wrapper_must_reject")
(assert (fuel_bool_default fuel%lib!host_protocol_t.next_shard_wrapper_must_reject.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.next_shard_wrapper_must_reject.) (forall ((pre! Poly) (m! Poly)) (! (= (lib!host_protocol_t.next_shard_wrapper_must_reject.? pre! m!) (let ((recipient$ (lib!message_t.Message./Shard/recipient (%Poly%lib!message_t.Message. m!)))) (let ((kr$ (lib!message_t.Message./Shard/range (%Poly%lib!message_t.Message. m!)))) (or (or (or (or (or (= recipient$ (lib!host_protocol_t.AbstractConstants./AbstractConstants/me (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))) (not (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. recipient$)))) (lib!keys_t.impl&%4.is_empty.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.KeyRange. kr$))) (not (vstd!seq_lib.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (lib!host_protocol_t.AbstractConstants./AbstractConstants/host_ids (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. recipient$)))) (not (lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host.? (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (Poly%lib!keys_t.KeyRange. kr$) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!host_protocol_t.AbstractConstants./AbstractConstants/me (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))))))) (>= (vstd!set.impl&%0.len.? $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!app_interface_t.extract_range.? (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (Poly%lib!keys_t.KeyRange. kr$))))) (lib!host_protocol_t.max_hashtable_size.? (I 0))))))) :pattern ((lib!host_protocol_t.next_shard_wrapper_must_reject.? pre! m!)) ))))
(set-info :comment ";; Function-Axioms lib::host_protocol_t::bulk_remove_hashtable")
(assert (fuel_bool_default fuel%lib!host_protocol_t.bulk_remove_hashtable.))
(declare-fun %%lambda%%14 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%14 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (not (lib!keys_t.impl&%4.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$))))) :pattern ((%%apply%%0 (%%lambda%%14 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.bulk_remove_hashtable.) (forall ((h! Poly) (kr! Poly)) (! (= (lib!host_protocol_t.bulk_remove_hashtable.? h! kr!) (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (vstd!map.impl&%0.new.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%fun%1. $ TYPE%lib!keys_t.SHTKey. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (Poly%fun%1. (mk_fun (%%lambda%%14 $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h!) $ TYPE%lib!keys_t.SHTKey. kr!))) (Poly%fun%1. (mk_fun (%%lambda%%13 $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h!)))))) :pattern ((lib!host_protocol_t.bulk_remove_hashtable.? h! kr!)) ))))
(set-info :comment ";; Function-Specs lib::host_protocol_t::next_shard")
(declare-fun req%lib!host_protocol_t.next_shard. (Poly Poly Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((pre! Poly) (post! Poly) (out! Poly) (kr! Poly) (recipient! Poly) (sm! Poly) (should_send! Poly)) (! (= (req%lib!host_protocol_t.next_shard. pre! post! out! kr! recipient! sm! should_send!) (=> %%global_location_label%%18 (lib!delegation_map_t.impl&%0.is_complete.? (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))) :pattern ((req%lib!host_protocol_t.next_shard. pre! post! out! kr! recipient! sm! should_send!)) )))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::next_shard")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:320:1: 328:14 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::next_shard")
(assert (fuel_bool_default fuel%lib!host_protocol_t.next_shard.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.next_shard.) (forall ((pre! Poly) (post! Poly) (out! Poly) (kr! Poly) (recipient! Poly) (sm! Poly) (should_send! Poly)) (! (= (lib!host_protocol_t.next_shard.? pre! post! out! kr! recipient! sm! should_send!) (and (and (and (and (and (and (and (and (not (= (%Poly%lib!abstract_end_point_t.AbstractEndPoint. recipient!) (lib!host_protocol_t.AbstractConstants./AbstractConstants/me (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))))) (vstd!seq_lib.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (lib!host_protocol_t.AbstractConstants./AbstractConstants/host_ids (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))) recipient!)) (lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host.? (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) kr! (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!host_protocol_t.AbstractConstants./AbstractConstants/me (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))))) (lib!single_delivery_t.impl&%1.send_single_message.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. post!))) (Poly%lib!message_t.Message. (lib!message_t.Message./Delegate (%Poly%lib!keys_t.KeyRange. kr!) (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!app_interface_t.extract_range.? (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) kr!))))) recipient! (Poly%core!option.Option. (ite (%B should_send!) (core!option.Option./Some sm!) core!option.Option./None)) (Poly%lib!abstract_parameters_t.AbstractParameters. (lib!host_protocol_t.AbstractConstants./AbstractConstants/params (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))))) (=> (%B should_send!) (= (%Poly%lib!abstract_end_point_t.AbstractEndPoint. recipient!) (lib!single_message_t.SingleMessage./Message/dst (%Poly%lib!single_message_t.SingleMessage. sm!))))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. post!)))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (Add (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (%Poly%lib!host_protocol_t.AbstractHostState. pre!)) 1))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (ite (%B should_send!) (and (and (= out! (vstd!set.impl&%0.insert.? $ TYPE%lib!network_t.Packet. (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.) (Poly%lib!network_t.Packet. (lib!network_t.Packet./Packet (%Poly%lib!abstract_end_point_t.AbstractEndPoint. recipient!) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!host_protocol_t.AbstractConstants./AbstractConstants/me (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))))) (%Poly%lib!single_message_t.SingleMessage. sm!))))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!delegation_map_t.impl&%0.update.? (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) kr! recipient!))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.bulk_remove_hashtable.? (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) kr!))) (and (and (= out! (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.)) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))))) :pattern ((lib!host_protocol_t.next_shard.? pre! post! out! kr! recipient! sm! should_send!)) ))))
(set-info :comment ";; Function-Specs lib::host_protocol_t::next_shard_wrapper")
(declare-fun req%lib!host_protocol_t.next_shard_wrapper. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((pre! Poly) (post! Poly) (pkt! Poly) (out! Poly)) (! (= (req%lib!host_protocol_t.next_shard_wrapper. pre! post! pkt! out!) (and (=> %%global_location_label%%19 (is-lib!single_message_t.SingleMessage./Message_ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))) (=> %%global_location_label%%20 (lib!delegation_map_t.impl&%0.is_complete.? (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))))) :pattern ((req%lib!host_protocol_t.next_shard_wrapper. pre! post! pkt! out!)) )))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::next_shard_wrapper")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:366:1: 366:133 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::next_shard_wrapper")
(assert (fuel_bool_default fuel%lib!host_protocol_t.next_shard_wrapper.))
(define-fun is-lib!message_t.Message./Shard_ ((c lib!message_t.Message.)) Bool ((_ is lib!message_t.Message./Shard) c))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.next_shard_wrapper.) (forall ((pre! Poly) (post! Poly) (pkt! Poly) (out! Poly)) (! (= (lib!host_protocol_t.next_shard_wrapper.? pre! post! pkt! out!) (let ((m$ (%Poly%lib!message_t.Message. (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))))))) (let ((recipient$ (lib!message_t.Message./Shard/recipient (%Poly%lib!message_t.Message. (Poly%lib!message_t.Message. m$))))) (let ((kr$ (lib!message_t.Message./Shard/range (%Poly%lib!message_t.Message. (Poly%lib!message_t.Message. m$))))) (and (is-lib!message_t.Message./Shard_ m$) (ite (lib!host_protocol_t.next_shard_wrapper_must_reject.? pre! (Poly%lib!message_t.Message. m$)) (and (= (%Poly%lib!host_protocol_t.AbstractHostState. post!) (lib!host_protocol_t.AbstractHostState./AbstractHostState (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (%Poly%lib!delegation_map_t.AbstractDelegationMap. (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (%Poly%lib!single_delivery_t.SingleDelivery. (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet (%Poly%lib!host_protocol_t.AbstractHostState. post!)))) (%I (I (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (%Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))) (= out! (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.))) (exists ((sm$ Poly) (b$ Poly)) (! (and (and (has_type sm$ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) (has_type b$ BOOL)) (lib!host_protocol_t.next_shard.? pre! post! out! (Poly%lib!keys_t.KeyRange. kr$) (Poly%lib!abstract_end_point_t.AbstractEndPoint. recipient$) sm$ b$)) :pattern ((lib!host_protocol_t.next_shard.? pre! post! out! (Poly%lib!keys_t.KeyRange. kr$) (Poly%lib!abstract_end_point_t.AbstractEndPoint. recipient$) sm$ b$)) )))))))) :pattern ((lib!host_protocol_t.next_shard_wrapper.? pre! post! pkt! out!)) ))))
(set-info :comment ";; Function-Axioms lib::environment_t::LIoOp::arrow_Send_s")
(assert (fuel_bool_default fuel%lib!environment_t.impl&%0.arrow_Send_s.))
(assert (=> (fuel_bool fuel%lib!environment_t.impl&%0.arrow_Send_s.) (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (self! Poly)) (! (= (lib!environment_t.impl&%0.arrow_Send_s.? IdType&. IdType& MessageType&. MessageType& self!) (lib!environment_t.LIoOp./Send/s (%Poly%lib!environment_t.LIoOp. self!))) :pattern ((lib!environment_t.impl&%0.arrow_Send_s.? IdType&. IdType& MessageType&. MessageType& self!)) ))))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&)) (has_type (Poly%lib!environment_t.LPacket. (lib!environment_t.impl&%0.arrow_Send_s.? IdType&. IdType& MessageType&. MessageType& self!)) (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) :pattern ((lib!environment_t.impl&%0.arrow_Send_s.? IdType&. IdType& MessageType&. MessageType& self!)) )))
(set-info :comment ";; Function-Axioms lib::delegation_map_t::AbstractDelegationMap::init")
(assert (fuel_bool_default fuel%lib!delegation_map_t.impl&%0.init.))
(assert (=> (fuel_bool fuel%lib!delegation_map_t.impl&%0.init.) (forall ((root_identity! Poly)) (! (= (lib!delegation_map_t.impl&%0.init.? root_identity!) (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap (%Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (vstd!map.impl&%0.total.? $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%fun%1. $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (Poly%fun%1. (mk_fun (%%lambda%%9 root_identity!))))))) :pattern ((lib!delegation_map_t.impl&%0.init.? root_identity!)) ))))
(set-info :comment ";; Function-Axioms lib::environment_t::LIoOp::arrow_Receive_r")
(assert (fuel_bool_default fuel%lib!environment_t.impl&%0.arrow_Receive_r.))
(assert (=> (fuel_bool fuel%lib!environment_t.impl&%0.arrow_Receive_r.) (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (self! Poly)) (! (= (lib!environment_t.impl&%0.arrow_Receive_r.? IdType&. IdType& MessageType&. MessageType& self!) (lib!environment_t.LIoOp./Receive/r (%Poly%lib!environment_t.LIoOp. self!))) :pattern ((lib!environment_t.impl&%0.arrow_Receive_r.? IdType&. IdType& MessageType&. MessageType& self!)) ))))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&)) (has_type (Poly%lib!environment_t.LPacket. (lib!environment_t.impl&%0.arrow_Receive_r.? IdType&. IdType& MessageType&. MessageType& self!)) (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) :pattern ((lib!environment_t.impl&%0.arrow_Receive_r.? IdType&. IdType& MessageType&. MessageType& self!)) )))
(set-info :comment ";; Function-Axioms lib::host_protocol_t::parse_arg_as_end_point")
(assert (fuel_bool_default fuel%lib!host_protocol_t.parse_arg_as_end_point.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.parse_arg_as_end_point.) (forall ((arg! Poly)) (! (= (lib!host_protocol_t.parse_arg_as_end_point.? arg!) (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint (%Poly%vstd!seq.Seq<u8.>. arg!))) :pattern ((lib!host_protocol_t.parse_arg_as_end_point.? arg!)) ))))
(set-info :comment ";; Function-Axioms lib::host_protocol_t::unchecked_parse_args")
(assert (fuel_bool_default fuel%lib!host_protocol_t.unchecked_parse_args.))
(declare-fun %%lambda%%15 () %%Function%%)
(assert (forall ((idx$ Poly) (arg$ Poly)) (! (= (%%apply%%1 %%lambda%%15 idx$ arg$) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!host_protocol_t.parse_arg_as_end_point.? arg$))) :pattern ((%%apply%%1 %%lambda%%15 idx$ arg$)))))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.unchecked_parse_args.) (forall ((args! Poly)) (! (= (lib!host_protocol_t.unchecked_parse_args.? args!) (%Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (vstd!seq_lib.impl&%0.map.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. args! (Poly%fun%2. (mk_fun %%lambda%%15))))) :pattern ((lib!host_protocol_t.unchecked_parse_args.? args!)) ))))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::parse_args")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:527:1: 527:90 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::parse_args")
(assert (fuel_bool_default fuel%lib!host_protocol_t.parse_args.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.parse_args.) (forall ((args! Poly)) (! (= (lib!host_protocol_t.parse_args.? args!) (let ((end_points$ (lib!host_protocol_t.unchecked_parse_args.? args!))) (ite (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. end_points$)))) (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (vstd!seq.Seq.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. end_points$) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. end_points$) i$)) )) (core!option.Option./Some (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. end_points$)) core!option.Option./None))) :pattern ((lib!host_protocol_t.parse_args.? args!)) ))))
(assert (forall ((args! Poly)) (! (=> (has_type args! (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type (Poly%core!option.Option. (lib!host_protocol_t.parse_args.? args!)) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.)))) :pattern ((lib!host_protocol_t.parse_args.? args!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::init")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.init.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.init.) (forall ((MT&. Dcr) (MT& Type)) (! (= (lib!single_delivery_t.impl&%1.init.? MT&. MT&) (lib!single_delivery_t.SingleDelivery./SingleDelivery (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT)) (vstd!map.impl&%0.empty.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&)))) :pattern ((lib!single_delivery_t.impl&%1.init.? MT&. MT&)) ))))
(assert (forall ((MT&. Dcr) (MT& Type)) (! (has_type (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_t.impl&%1.init.? MT&. MT&)) (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&)) :pattern ((lib!single_delivery_t.impl&%1.init.? MT&. MT&)) )))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::init")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:539:1: 539:105 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::init")
(assert (fuel_bool_default fuel%lib!host_protocol_t.init.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.init.) (forall ((pre! Poly) (id! Poly) (args! Poly)) (! (= (lib!host_protocol_t.init.? pre! id! args!) (let ((end_points$ (lib!host_protocol_t.parse_args.? args!))) (and (not (or (is-core!option.Option./None_ end_points$) (= (vstd!seq.Seq.len.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. end_points$)))) 0))) (let ((root_identity$ (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (vstd!seq.Seq.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. end_points$))) (I 0))))) (let ((params$ (lib!abstract_parameters_t.impl&%0.static_params.? (I 0)))) (= (%Poly%lib!host_protocol_t.AbstractHostState. pre!) (lib!host_protocol_t.AbstractHostState./AbstractHostState (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractConstants./AbstractConstants (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. root_identity$)) (%Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. end_points$)))) (%Poly%lib!abstract_parameters_t.AbstractParameters. (Poly%lib!abstract_parameters_t.AbstractParameters. params$)) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. id!)))) (%Poly%lib!delegation_map_t.AbstractDelegationMap. (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!delegation_map_t.impl&%0.init.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. root_identity$)))) (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (%Poly%lib!single_delivery_t.SingleDelivery. (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_t.impl&%1.init.? $ TYPE%lib!message_t.Message.))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%I (I 1)) (%Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (vstd!seq.Seq.empty.? $ TYPE%lib!abstract_service_t.AppRequest.))))))))) :pattern ((lib!host_protocol_t.init.? pre! id! args!)) ))))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::AbstractHostState::wf")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:53:5: 53:47 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::AbstractHostState::wf")
(assert (fuel_bool_default fuel%lib!host_protocol_t.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!host_protocol_t.impl&%0.wf.? self!) (lib!delegation_map_t.impl&%0.is_complete.? (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. self!))))) :pattern ((lib!host_protocol_t.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::host_protocol_t::extract_sent_packets_from_ios")
(assert (fuel_bool_default fuel%lib!host_protocol_t.extract_sent_packets_from_ios.))
(declare-fun %%lambda%%16 () %%Function%%)
(assert (forall ((io$ Poly)) (! (= (%%apply%%0 %%lambda%%16 io$) (B (is-lib!environment_t.LIoOp./Send_ (%Poly%lib!environment_t.LIoOp. io$)))) :pattern ((%%apply%%0 %%lambda%%16 io$)))))
(declare-fun %%lambda%%17 () %%Function%%)
(assert (forall ((io$ Poly)) (! (= (%%apply%%0 %%lambda%%17 io$) (Poly%lib!environment_t.LPacket. (lib!environment_t.LIoOp./Send/s (%Poly%lib!environment_t.LIoOp. io$)))) :pattern ((%%apply%%0 %%lambda%%17 io$)))))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.extract_sent_packets_from_ios.) (forall ((ios! Poly)) (! (= (lib!host_protocol_t.extract_sent_packets_from_ios.? ios!) (%Poly%vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. (vstd!seq_lib.impl&%0.map_values.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) $ (TYPE%lib!environment_t.LPacket. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) (vstd!seq_lib.impl&%0.filter.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) ios! (Poly%fun%1. (mk_fun %%lambda%%16))) (Poly%fun%1. (mk_fun %%lambda%%17))))) :pattern ((lib!host_protocol_t.extract_sent_packets_from_ios.? ios!)) ))))
(set-info :comment ";; Function-Axioms lib::host_protocol_t::extract_packets_from_abstract_ios")
(assert (fuel_bool_default fuel%lib!host_protocol_t.extract_packets_from_abstract_ios.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.extract_packets_from_abstract_ios.) (forall ((ios! Poly)) (! (= (lib!host_protocol_t.extract_packets_from_abstract_ios.? ios!) (lib!host_protocol_t.extract_packets_from_lsht_packets.? (Poly%vstd!seq.Seq<lib!environment_t.LPacket<lib!abstract_end_point_t.AbstractEndPoint./lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.>. (lib!host_protocol_t.extract_sent_packets_from_ios.? ios!)))) :pattern ((lib!host_protocol_t.extract_packets_from_abstract_ios.? ios!)) ))))
(set-info :comment ";; Function-Axioms lib::single_message_t::SingleMessage::arrow_Ack_ack_seqno")
(assert (fuel_bool_default fuel%lib!single_message_t.impl&%0.arrow_Ack_ack_seqno.))
(assert (=> (fuel_bool fuel%lib!single_message_t.impl&%0.arrow_Ack_ack_seqno.) (forall ((MT&. Dcr) (MT& Type) (self! Poly)) (! (= (lib!single_message_t.impl&%0.arrow_Ack_ack_seqno.? MT&. MT& self!) (lib!single_message_t.SingleMessage./Ack/ack_seqno (%Poly%lib!single_message_t.SingleMessage. self!))) :pattern ((lib!single_message_t.impl&%0.arrow_Ack_ack_seqno.? MT&. MT& self!)) ))))
(assert (forall ((MT&. Dcr) (MT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) (<= 0 (lib!single_message_t.impl&%0.arrow_Ack_ack_seqno.? MT&. MT& self!))) :pattern ((lib!single_message_t.impl&%0.arrow_Ack_ack_seqno.? MT&. MT& self!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::truncate_un_ack_list")
(assert (fuel_bool_default fuel%lib!single_delivery_t.truncate_un_ack_list.))
(declare-const fuel_nat%lib!single_delivery_t.truncate_un_ack_list. Fuel)
(assert (forall ((MT&. Dcr) (MT& Type) (un_acked! Poly) (seqno_acked! Poly) (fuel% Fuel)) (! (= (lib!single_delivery_t.rec%truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked! fuel%) (lib!single_delivery_t.rec%truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked! zero)) :pattern ((lib!single_delivery_t.rec%truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked! fuel%)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (un_acked! Poly) (seqno_acked! Poly) (fuel% Fuel)) (! (=> (and (has_type un_acked! (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) (has_type seqno_acked! NAT)) (= (lib!single_delivery_t.rec%truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked! (succ fuel%)) (ite (and (and (> (vstd!seq.Seq.len.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&) un_acked!) 0) (is-lib!single_message_t.SingleMessage./Message_ (%Poly%lib!single_message_t.SingleMessage. (vstd!seq.Seq.index.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&) un_acked! (I 0))))) (<= (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. (vstd!seq.Seq.index.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&) un_acked! (I 0)))) (%I seqno_acked!))) (lib!single_delivery_t.rec%truncate_un_ack_list.? MT&. MT& (vstd!seq.Seq.subrange.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&) un_acked! (I 1) (I (vstd!seq.Seq.len.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&) un_acked!))) seqno_acked! fuel%) un_acked!))) :pattern ((lib!single_delivery_t.rec%truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.truncate_un_ack_list.) (forall ((MT&. Dcr) (MT& Type) (un_acked! Poly) (seqno_acked! Poly)) (! (=> (and (has_type un_acked! (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) (has_type seqno_acked! NAT)) (= (lib!single_delivery_t.truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked!) (lib!single_delivery_t.rec%truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked! (succ fuel_nat%lib!single_delivery_t.truncate_un_ack_list.)))) :pattern ((lib!single_delivery_t.truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked!)) ))))
(assert (forall ((MT&. Dcr) (MT& Type) (un_acked! Poly) (seqno_acked! Poly)) (! (=> (and (has_type un_acked! (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) (has_type seqno_acked! NAT)) (has_type (lib!single_delivery_t.truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked!) (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)))) :pattern ((lib!single_delivery_t.truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked!)) )))
(set-info :comment ";; Function-Specs lib::single_delivery_t::SingleDelivery::receive_ack")
(declare-fun req%lib!single_delivery_t.impl&%1.receive_ack. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(define-fun is-lib!single_message_t.SingleMessage./Ack_ ((c lib!single_message_t.SingleMessage.)) Bool ((_ is lib!single_message_t.SingleMessage./Ack) c))
(assert (forall ((MT&. Dcr) (MT& Type) (pre! Poly) (post! Poly) (pkt! Poly) (acks! Poly)) (! (= (req%lib!single_delivery_t.impl&%1.receive_ack. MT&. MT& pre! post! pkt! acks!) (=> %%global_location_label%%21 (is-lib!single_message_t.SingleMessage./Ack_ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))) :pattern ((req%lib!single_delivery_t.impl&%1.receive_ack. MT&. MT& pre! post! pkt! acks!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::receive_ack")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.receive_ack.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.receive_ack.) (forall ((MT&. Dcr) (MT& Type) (pre! Poly) (post! Poly) (pkt! Poly) (acks! Poly)) (! (= (lib!single_delivery_t.impl&%1.receive_ack.? MT&. MT& pre! post! pkt! acks!) (and (vstd!set_lib.impl&%0.is_empty.? $ TYPE%lib!network_t.Packet. acks!) (let ((old_ack_state$ (lib!single_delivery_t.ack_state_lookup.? MT&. MT& (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. pre!))))) (ite (> (lib!single_message_t.SingleMessage./Ack/ack_seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))) (lib!single_delivery_t.AckState./AckState/num_packets_acked (%Poly%lib!single_delivery_t.AckState. (Poly%lib!single_delivery_t.AckState. old_ack_state$)))) (let ((new_ack_state$ (lib!single_delivery_t.AckState./AckState (%I (I (lib!single_message_t.SingleMessage./Ack/ack_seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))))) (lib!single_delivery_t.truncate_un_ack_list.? MT&. MT& (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. (Poly%lib!single_delivery_t.AckState. old_ack_state$))) (I (lib!single_message_t.SingleMessage./Ack/ack_seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))))))))) (ext_eq false (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&) post! (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_t.SingleDelivery./SingleDelivery (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. post!)))) (vstd!map.impl&%0.insert.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. pre!)) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (Poly%lib!single_delivery_t.AckState. new_ack_state$)))))) (= post! pre!))))) :pattern ((lib!single_delivery_t.impl&%1.receive_ack.? MT&. MT& pre! post! pkt! acks!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::tombstone_table_lookup")
(assert (fuel_bool_default fuel%lib!single_delivery_t.tombstone_table_lookup.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.tombstone_table_lookup.) (forall ((src! Poly) (t! Poly)) (! (= (lib!single_delivery_t.tombstone_table_lookup.? src! t!) (ite (vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT t!) src!) (%I (vstd!map.impl&%0.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT t! src!)) 0)) :pattern ((lib!single_delivery_t.tombstone_table_lookup.? src! t!)) ))))
(assert (forall ((src! Poly) (t! Poly)) (! (=> (and (has_type src! TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (has_type t! (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT))) (<= 0 (lib!single_delivery_t.tombstone_table_lookup.? src! t!))) :pattern ((lib!single_delivery_t.tombstone_table_lookup.? src! t!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::new_single_message")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.new_single_message.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.new_single_message.) (forall ((MT&. Dcr) (MT& Type) (self! Poly) (pkt! Poly)) (! (= (lib!single_delivery_t.impl&%1.new_single_message.? MT&. MT& self! pkt!) (let ((last_seqno$ (lib!single_delivery_t.tombstone_table_lookup.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. self!)))))) (and (is-lib!single_message_t.SingleMessage./Message_ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))) (= (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))) (nClip (Add last_seqno$ 1)))))) :pattern ((lib!single_delivery_t.impl&%1.new_single_message.? MT&. MT& self! pkt!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::receive_real_packet")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.receive_real_packet.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.receive_real_packet.) (forall ((MT&. Dcr) (MT& Type) (self! Poly) (post! Poly) (pkt! Poly)) (! (= (lib!single_delivery_t.impl&%1.receive_real_packet.? MT&. MT& self! post! pkt!) (ite (lib!single_delivery_t.impl&%1.new_single_message.? MT&. MT& self! pkt!) (let ((last_seqno$ (lib!single_delivery_t.tombstone_table_lookup.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. self!)))))) (= (%Poly%lib!single_delivery_t.SingleDelivery. post!) (lib!single_delivery_t.SingleDelivery./SingleDelivery (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. self!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (I (nClip (Add last_seqno$ 1))))) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. self!))))) (= post! self!))) :pattern ((lib!single_delivery_t.impl&%1.receive_real_packet.? MT&. MT& self! post! pkt!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::should_ack_single_message")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.should_ack_single_message.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.should_ack_single_message.) (forall ((MT&. Dcr) (MT& Type) (self! Poly) (pkt! Poly)) (! (= (lib!single_delivery_t.impl&%1.should_ack_single_message.? MT&. MT& self! pkt!) (and (is-lib!single_message_t.SingleMessage./Message_ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))) (let ((last_seqno$ (lib!single_delivery_t.tombstone_table_lookup.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. self!)))))) (<= (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))) last_seqno$)))) :pattern ((lib!single_delivery_t.impl&%1.should_ack_single_message.? MT&. MT& self! pkt!)) ))))
(set-info :comment ";; Function-Specs lib::single_delivery_t::SingleDelivery::send_ack")
(declare-fun req%lib!single_delivery_t.impl&%1.send_ack. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((MT&. Dcr) (MT& Type) (self! Poly) (pkt! Poly) (ack! Poly) (acks! Poly)) (! (= (req%lib!single_delivery_t.impl&%1.send_ack. MT&. MT& self! pkt! ack! acks!) (=> %%global_location_label%%22 (lib!single_delivery_t.impl&%1.should_ack_single_message.? MT&. MT& self! pkt!))) :pattern ((req%lib!single_delivery_t.impl&%1.send_ack. MT&. MT& self! pkt! ack! acks!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::send_ack")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.send_ack.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.send_ack.) (forall ((MT&. Dcr) (MT& Type) (self! Poly) (pkt! Poly) (ack! Poly) (acks! Poly)) (! (= (lib!single_delivery_t.impl&%1.send_ack.? MT&. MT& self! pkt! ack! acks!) (and (and (and (and (is-lib!single_message_t.SingleMessage./Ack_ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. ack!))) (= (lib!single_message_t.SingleMessage./Ack/ack_seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. ack!))))) (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))))) (= (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. ack!)) (lib!network_t.Packet./Packet/dst (%Poly%lib!network_t.Packet. pkt!)))) (= (lib!network_t.Packet./Packet/dst (%Poly%lib!network_t.Packet. ack!)) (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!)))) (= acks! (vstd!set.impl&%0.insert.? $ TYPE%lib!network_t.Packet. (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.) ack!)))) :pattern ((lib!single_delivery_t.impl&%1.send_ack.? MT&. MT& self! pkt! ack! acks!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::maybe_ack_packet")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.maybe_ack_packet.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.maybe_ack_packet.) (forall ((MT&. Dcr) (MT& Type) (pre! Poly) (pkt! Poly) (ack! Poly) (acks! Poly)) (! (= (lib!single_delivery_t.impl&%1.maybe_ack_packet.? MT&. MT& pre! pkt! ack! acks!) (ite (lib!single_delivery_t.impl&%1.should_ack_single_message.? MT&. MT& pre! pkt!) (lib!single_delivery_t.impl&%1.send_ack.? MT&. MT& pre! pkt! ack! acks!) (vstd!set_lib.impl&%0.is_empty.? $ TYPE%lib!network_t.Packet. acks!))) :pattern ((lib!single_delivery_t.impl&%1.maybe_ack_packet.? MT&. MT& pre! pkt! ack! acks!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::receive")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.receive.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.receive.) (forall ((MT&. Dcr) (MT& Type) (pre! Poly) (post! Poly) (pkt! Poly) (ack! Poly) (acks! Poly)) (! (= (lib!single_delivery_t.impl&%1.receive.? MT&. MT& pre! post! pkt! ack! acks!) (let ((tmp%%$ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))) (ite (is-lib!single_message_t.SingleMessage./Ack_ tmp%%$) (lib!single_delivery_t.impl&%1.receive_ack.? MT&. MT& pre! post! pkt! acks!) (ite (is-lib!single_message_t.SingleMessage./Message_ tmp%%$) (let ((seqno$ (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. tmp%%$))))) (let ((m$ (%Poly%lib!message_t.Message. (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. tmp%%$)))))) (and (lib!single_delivery_t.impl&%1.receive_real_packet.? MT&. MT& pre! post! pkt!) (lib!single_delivery_t.impl&%1.maybe_ack_packet.? MT&. MT& post! pkt! ack! acks!)))) (and (= post! pre!) (= acks! (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.))))))) :pattern ((lib!single_delivery_t.impl&%1.receive.? MT&. MT& pre! post! pkt! ack! acks!)) ))))
(set-info :comment ";; Function-Axioms lib::host_protocol_t::okay_to_ignore_packets")
(assert (=> (fuel_bool fuel%lib!host_protocol_t.okay_to_ignore_packets.) (forall ((no%param Poly)) (! (= (lib!host_protocol_t.okay_to_ignore_packets.? no%param) true) :pattern ((lib!host_protocol_t.okay_to_ignore_packets.? no%param)) ))))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::receive_packet")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:127:1: 127:142 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::receive_packet")
(assert (fuel_bool_default fuel%lib!host_protocol_t.receive_packet.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.receive_packet.) (forall ((pre! Poly) (post! Poly) (pkt! Poly) (out! Poly) (ack! Poly)) (! (= (lib!host_protocol_t.receive_packet.? pre! post! pkt! out! ack!) (or (and (and (and (is-core!option.Option./None_ (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (lib!single_delivery_t.impl&%1.receive.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. post!))) pkt! ack! out!)) (ite (lib!single_delivery_t.impl&%1.new_single_message.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) pkt!) (= (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet (%Poly%lib!host_protocol_t.AbstractHostState. post!)) (core!option.Option./Some pkt!)) (is-core!option.Option./None_ (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet (%Poly%lib!host_protocol_t.AbstractHostState. post!))))) (= (%Poly%lib!host_protocol_t.AbstractHostState. post!) (lib!host_protocol_t.AbstractHostState./AbstractHostState (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. post!)))) (%Poly%lib!delegation_map_t.AbstractDelegationMap. (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. post!)))) (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/h (%Poly%lib!host_protocol_t.AbstractHostState. post!)))) (%Poly%lib!single_delivery_t.SingleDelivery. (Poly%lib!single_delivery_t.SingleDelivery. (lib!host_protocol_t.AbstractHostState./AbstractHostState/sd (%Poly%lib!host_protocol_t.AbstractHostState. post!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet (%Poly%lib!host_protocol_t.AbstractHostState. post!)))) (%I (I (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (%Poly%lib!host_protocol_t.AbstractHostState. post!)))) (%Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (Poly%vstd!seq.Seq<lib!abstract_service_t.AppRequest.>. (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_requests (%Poly%lib!host_protocol_t.AbstractHostState. post!))))))) (and (and (or (is-core!option.Option./Some_ (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (lib!host_protocol_t.okay_to_ignore_packets.? (I 0))) (= post! pre!)) (= out! (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.))))) :pattern ((lib!host_protocol_t.receive_packet.? pre! post! pkt! out! ack!)) ))))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::receive_packet_wrapper")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:173:1: 173:146 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::receive_packet_wrapper")
(assert (fuel_bool_default fuel%lib!host_protocol_t.receive_packet_wrapper.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.receive_packet_wrapper.) (forall ((pre! Poly) (post! Poly) (pkt! Poly) (sent_packets! Poly)) (! (= (lib!host_protocol_t.receive_packet_wrapper.? pre! post! pkt! sent_packets!) (exists ((ack$ Poly)) (! (and (has_type ack$ TYPE%lib!network_t.Packet.) (lib!host_protocol_t.receive_packet.? pre! post! pkt! sent_packets! ack$)) :pattern ((lib!host_protocol_t.receive_packet.? pre! post! pkt! sent_packets! ack$)) ))) :pattern ((lib!host_protocol_t.receive_packet_wrapper.? pre! post! pkt! sent_packets!)) ))))
(set-info :comment ";; Function-Specs lib::host_protocol_t::receive_packet_without_reading_clock")
(declare-fun req%lib!host_protocol_t.receive_packet_without_reading_clock. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((pre! Poly) (post! Poly) (ios! Poly)) (! (= (req%lib!host_protocol_t.receive_packet_without_reading_clock. pre! post! ios!) (and (=> %%global_location_label%%23 (>= (vstd!seq.Seq.len.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) ios!) 1)) (=> %%global_location_label%%24 (is-lib!environment_t.LIoOp./Receive_ (%Poly%lib!environment_t.LIoOp. (vstd!seq.Seq.index.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) ios! (I 0))))) (=> %%global_location_label%%25 (lib!delegation_map_t.impl&%0.is_complete.? (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))))) :pattern ((req%lib!host_protocol_t.receive_packet_without_reading_clock. pre! post! ios!)) )))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::receive_packet_without_reading_clock")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:179:1: 179:138 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::receive_packet_without_reading_clock")
(assert (fuel_bool_default fuel%lib!host_protocol_t.receive_packet_without_reading_clock.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.receive_packet_without_reading_clock.) (forall ((pre! Poly) (post! Poly) (ios! Poly)) (! (= (lib!host_protocol_t.receive_packet_without_reading_clock.? pre! post! ios!) (let ((r$ (lib!environment_t.LIoOp./Receive/r (%Poly%lib!environment_t.LIoOp. (vstd!seq.Seq.index.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) ios! (I 0)))))) (let ((pkt$ (lib!network_t.Packet./Packet (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!environment_t.LPacket./LPacket/dst (%Poly%lib!environment_t.LPacket. (Poly%lib!environment_t.LPacket. r$)))) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!environment_t.LPacket./LPacket/src (%Poly%lib!environment_t.LPacket. (Poly%lib!environment_t.LPacket. r$)))) (%Poly%lib!single_message_t.SingleMessage. (lib!environment_t.LPacket./LPacket/msg (%Poly%lib!environment_t.LPacket. (Poly%lib!environment_t.LPacket. r$))))))) (let ((sent_packets$ (lib!host_protocol_t.extract_packets_from_abstract_ios.? ios!))) (lib!host_protocol_t.receive_packet_wrapper.? pre! post! (Poly%lib!network_t.Packet. pkt$) (Poly%vstd!set.Set<lib!network_t.Packet.>. sent_packets$)))))) :pattern ((lib!host_protocol_t.receive_packet_without_reading_clock.? pre! post! ios!)) ))))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::receive_packet_next")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:192:1: 192:121 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::receive_packet_next")
(assert (fuel_bool_default fuel%lib!host_protocol_t.receive_packet_next.))
(define-fun is-lib!environment_t.LIoOp./TimeoutReceive_ ((c lib!environment_t.LIoOp.)) Bool ((_ is lib!environment_t.LIoOp./TimeoutReceive) c))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.receive_packet_next.) (forall ((pre! Poly) (post! Poly) (ios! Poly)) (! (= (lib!host_protocol_t.receive_packet_next.? pre! post! ios!) (and (>= (vstd!seq.Seq.len.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) ios!) 1) (ite (is-lib!environment_t.LIoOp./TimeoutReceive_ (%Poly%lib!environment_t.LIoOp. (vstd!seq.Seq.index.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) ios! (I 0)))) (and (= post! pre!) (= (vstd!seq.Seq.len.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) ios!) 1)) (and (and (and (lib!delegation_map_t.impl&%0.is_complete.? (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))) (is-lib!environment_t.LIoOp./Receive_ (%Poly%lib!environment_t.LIoOp. (vstd!seq.Seq.index.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) ios! (I 0))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 1 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) ios!))) (is-lib!environment_t.LIoOp./Send_ (%Poly%lib!environment_t.LIoOp. (vstd!seq.Seq.index.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) ios! i$))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) ios! i$)) ))) (lib!host_protocol_t.receive_packet_without_reading_clock.? pre! post! ios!))))) :pattern ((lib!host_protocol_t.receive_packet_next.? pre! post! ios!)) ))))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::should_process_received_message")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:406:1: 406:90 (#0)")
(set-info :comment ";; Function-Axioms lib::host_protocol_t::should_process_received_message")
(assert (fuel_bool_default fuel%lib!host_protocol_t.should_process_received_message.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.should_process_received_message.) (forall ((pre! Poly)) (! (= (lib!host_protocol_t.should_process_received_message.? pre!) (and (and (is-core!option.Option./Some_ (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet (%Poly%lib!host_protocol_t.AbstractHostState. pre!))) (is-lib!single_message_t.SingleMessage./Message_ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))))))) (=> (or (is-lib!message_t.Message./Delegate_ (%Poly%lib!message_t.Message. (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))))))))) (is-lib!message_t.Message./Shard_ (%Poly%lib!message_t.Message. (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!host_protocol_t.AbstractHostState./AbstractHostState/received_packet (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))))))))))) (< (lib!host_protocol_t.AbstractHostState./AbstractHostState/num_delegations (%Poly%lib!host_protocol_t.AbstractHostState. pre!)) (Sub (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_delegations (%Poly%lib!abstract_parameters_t.AbstractParameters. (Poly%lib!abstract_parameters_t.AbstractParameters. (lib!host_protocol_t.AbstractConstants./AbstractConstants/params (%Poly%lib!host_protocol_t.AbstractConstants. (Poly%lib!host_protocol_t.AbstractConstants. (lib!host_protocol_t.AbstractHostState./AbstractHostState/constants (%Poly%lib!host_protocol_t.AbstractHostState. pre!)))))))) 2))))) :pattern ((lib!host_protocol_t.should_process_received_message.? pre!)) ))))
(set-info :comment ";; Function-Specs lib::host_protocol_t::next_reply")
(declare-fun req%lib!host_protocol_t.next_reply. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((pre! Poly) (post! Poly) (pkt! Poly) (out! Poly)) (! (= (req%lib!host_protocol_t.next_reply. pre! post! pkt! out!) (and (=> %%global_location_label%%26 (is-lib!single_message_t.SingleMessage./Message_ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))) (=> %%global_location_label%%27 (lib!delegation_map_t.impl&%0.is_complete.? (Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!host_protocol_t.AbstractHostState./AbstractHostState/delegation_map (%Poly%lib!host_protocol_t.AbstractHostState. pre!))))))) :pattern ((req%lib!host_protocol_t.next_reply. pre! post! pkt! out!)) )))
(set-info :comment ";; Function-Recommends lib::host_protocol_t::next_reply")
(set-info :comment ";; ironsht/src/host_protocol_t.rs:385:1: 385:125 (#0)")
(declare-const %return! Bool)
(declare-const pre! Poly)
(declare-const post! Poly)
(declare-const pkt! Poly)
(declare-const out! Poly)
(assert fuel_defaults)
(assert (has_type pre! TYPE%lib!host_protocol_t.AbstractHostState.))
(assert (has_type post! TYPE%lib!host_protocol_t.AbstractHostState.))
(assert (has_type pkt! TYPE%lib!network_t.Packet.))
(assert (has_type out! (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.)))
(assert (not true))
(check-sat)
(exit)
