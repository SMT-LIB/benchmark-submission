(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module io_t'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.vec.axiom_spec_len. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%30.view. FuelId)
(declare-const fuel%vstd!view.impl&%38.view. FuelId)
(declare-const fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address. FuelId)
(declare-const fuel%lib!abstract_end_point_t.impl&%0.abstractable. FuelId)
(declare-const fuel%lib!io_t.impl&%4.view. FuelId)
(declare-const fuel%lib!io_t.impl&%4.abstractable. FuelId)
(declare-const fuel%lib!io_t.impl&%4.valid_public_key. FuelId)
(declare-const fuel%lib!io_t.abstractify_end_points. FuelId)
(declare-const fuel%lib!io_t.impl&%5.arrow_sender. FuelId)
(declare-const fuel%lib!io_t.impl&%5.arrow_message. FuelId)
(declare-const fuel%lib!io_t.impl&%5.arrow_Received_sender. FuelId)
(declare-const fuel%lib!io_t.impl&%5.arrow_Received_message. FuelId)
(declare-const fuel%lib!io_t.from_trusted_code. FuelId)
(declare-const fuel%lib!io_t.impl&%7.state. FuelId)
(declare-const fuel%lib!io_t.impl&%7.ok. FuelId)
(declare-const fuel%lib!io_t.impl&%7.valid. FuelId)
(declare-const fuel%lib!io_t.impl&%7.history. FuelId)
(declare-const fuel%lib!io_t.impl&%7.my_end_point. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.vec.axiom_spec_len. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.map. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%30.view. fuel%vstd!view.impl&%38.view. fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address. fuel%lib!abstract_end_point_t.impl&%0.abstractable. fuel%lib!io_t.impl&%4.view. fuel%lib!io_t.impl&%4.abstractable. fuel%lib!io_t.impl&%4.valid_public_key. fuel%lib!io_t.abstractify_end_points. fuel%lib!io_t.impl&%5.arrow_sender. fuel%lib!io_t.impl&%5.arrow_message. fuel%lib!io_t.impl&%5.arrow_Received_sender. fuel%lib!io_t.impl&%5.arrow_Received_message. fuel%lib!io_t.from_trusted_code. fuel%lib!io_t.impl&%7.state. fuel%lib!io_t.impl&%7.ok. fuel%lib!io_t.impl&%7.valid. fuel%lib!io_t.impl&%7.history. fuel%lib!io_t.impl&%7.my_end_point. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.axiom_spec_len.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!string.String. 0)
(declare-sort alloc!vec.Vec<u8./allocator_global%.>. 0)
(declare-sort alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. 0)
(declare-sort lib!io_t.DuctTapeProfiler. 0)
(declare-sort lib!io_t.NetClientCPointers. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<char.>. 0)
(declare-sort vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. 0)
(declare-sort vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. 0)
(declare-sort vstd!seq.Seq<lib!io_t.EndPoint.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!result.Result. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!abstract_end_point_t.AbstractEndPoint. 0) (lib!environment_t.LPacket. 0) (lib!environment_t.LIoOp. 0) (lib!io_t.HostEnvironment. 0) (lib!io_t.EndPoint. 0) (lib!io_t.State. 0) (lib!io_t.NetcReceiveResult. 0) (lib!io_t.IronfleetIOError. 0) (lib!io_t.NetClient. 0) (tuple%0. 0)) (((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/?id vstd!seq.Seq<u8.>.))) ((lib!environment_t.LPacket./LPacket (lib!environment_t.LPacket./LPacket/?dst Poly) (lib!environment_t.LPacket./LPacket/?src Poly) (lib!environment_t.LPacket./LPacket/?msg Poly))) ((lib!environment_t.LIoOp./Send (lib!environment_t.LIoOp./Send/?s lib!environment_t.LPacket.)) (lib!environment_t.LIoOp./Receive (lib!environment_t.LIoOp./Receive/?r lib!environment_t.LPacket.)) (lib!environment_t.LIoOp./TimeoutReceive ) (lib!environment_t.LIoOp./ReadClock (lib!environment_t.LIoOp./ReadClock/?t Int))) ((lib!io_t.HostEnvironment./HostEnvironment )) ((lib!io_t.EndPoint./EndPoint (lib!io_t.EndPoint./EndPoint/?id alloc!vec.Vec<u8./allocator_global%.>.))) ((lib!io_t.State./Receiving ) (lib!io_t.State./Sending ) (lib!io_t.State./Error )) ((lib!io_t.NetcReceiveResult./Received (lib!io_t.NetcReceiveResult./Received/?sender lib!io_t.EndPoint.) (lib!io_t.NetcReceiveResult./Received/?message alloc!vec.Vec<u8./allocator_global%.>.)) (lib!io_t.NetcReceiveResult./TimedOut ) (lib!io_t.NetcReceiveResult./Error )) ((lib!io_t.IronfleetIOError./IronfleetIOError (lib!io_t.IronfleetIOError./IronfleetIOError/?message alloc!string.String.))) ((lib!io_t.NetClient./NetClient (lib!io_t.NetClient./NetClient/?state lib!io_t.State.) (lib!io_t.NetClient./NetClient/?history vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>.) (lib!io_t.NetClient./NetClient/?end_point lib!io_t.EndPoint.) (lib!io_t.NetClient./NetClient/?c_pointers lib!io_t.NetClientCPointers.) (lib!io_t.NetClient./NetClient/?profiler lib!io_t.DuctTapeProfiler.))) ((tuple%0./tuple%0 ))))
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id (lib!abstract_end_point_t.AbstractEndPoint.) vstd!seq.Seq<u8.>.)
(declare-fun lib!environment_t.LPacket./LPacket/dst (lib!environment_t.LPacket.) Poly)
(declare-fun lib!environment_t.LPacket./LPacket/src (lib!environment_t.LPacket.) Poly)
(declare-fun lib!environment_t.LPacket./LPacket/msg (lib!environment_t.LPacket.) Poly)
(declare-fun lib!environment_t.LIoOp./Send/s (lib!environment_t.LIoOp.) lib!environment_t.LPacket.)
(declare-fun lib!environment_t.LIoOp./Receive/r (lib!environment_t.LIoOp.) lib!environment_t.LPacket.)
(declare-fun lib!environment_t.LIoOp./ReadClock/t (lib!environment_t.LIoOp.) Int)
(declare-fun lib!io_t.EndPoint./EndPoint/id (lib!io_t.EndPoint.) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun lib!io_t.NetcReceiveResult./Received/sender (lib!io_t.NetcReceiveResult.) lib!io_t.EndPoint.)
(declare-fun lib!io_t.NetcReceiveResult./Received/message (lib!io_t.NetcReceiveResult.) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun lib!io_t.IronfleetIOError./IronfleetIOError/message (lib!io_t.IronfleetIOError.) alloc!string.String.)
(declare-fun lib!io_t.NetClient./NetClient/state (lib!io_t.NetClient.) lib!io_t.State.)
(declare-fun lib!io_t.NetClient./NetClient/history (lib!io_t.NetClient.) vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>.)
(declare-fun lib!io_t.NetClient./NetClient/end_point (lib!io_t.NetClient.) lib!io_t.EndPoint.)
(declare-fun lib!io_t.NetClient./NetClient/c_pointers (lib!io_t.NetClient.) lib!io_t.NetClientCPointers.)
(declare-fun lib!io_t.NetClient./NetClient/profiler (lib!io_t.NetClient.) lib!io_t.DuctTapeProfiler.)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-const TYPE%alloc!string.String. Type)
(declare-const TYPE%lib!abstract_end_point_t.AbstractEndPoint. Type)
(declare-fun TYPE%lib!environment_t.LPacket. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%lib!environment_t.LIoOp. (Dcr Type Dcr Type) Type)
(declare-const TYPE%lib!io_t.HostEnvironment. Type)
(declare-const TYPE%lib!io_t.EndPoint. Type)
(declare-const TYPE%lib!io_t.State. Type)
(declare-const TYPE%lib!io_t.NetcReceiveResult. Type)
(declare-const TYPE%lib!io_t.IronfleetIOError. Type)
(declare-const TYPE%lib!io_t.NetClientCPointers. Type)
(declare-const TYPE%lib!io_t.DuctTapeProfiler. Type)
(declare-const TYPE%lib!io_t.NetClient. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%alloc!string.String. (alloc!string.String.) Poly)
(declare-fun %Poly%alloc!string.String. (Poly) alloc!string.String.)
(declare-fun Poly%alloc!vec.Vec<u8./allocator_global%.>. (alloc!vec.Vec<u8./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. (alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. (Poly) alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.)
(declare-fun Poly%lib!io_t.DuctTapeProfiler. (lib!io_t.DuctTapeProfiler.) Poly)
(declare-fun %Poly%lib!io_t.DuctTapeProfiler. (Poly) lib!io_t.DuctTapeProfiler.)
(declare-fun Poly%lib!io_t.NetClientCPointers. (lib!io_t.NetClientCPointers.) Poly)
(declare-fun %Poly%lib!io_t.NetClientCPointers. (Poly) lib!io_t.NetClientCPointers.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<char.>. (vstd!seq.Seq<char.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<char.>. (Poly) vstd!seq.Seq<char.>.)
(declare-fun Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (Poly) vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.)
(declare-fun Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. (vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. (Poly) vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>.)
(declare-fun Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (vstd!seq.Seq<lib!io_t.EndPoint.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (Poly) vstd!seq.Seq<lib!io_t.EndPoint.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!abstract_end_point_t.AbstractEndPoint.) Poly)
(declare-fun %Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun Poly%lib!environment_t.LPacket. (lib!environment_t.LPacket.) Poly)
(declare-fun %Poly%lib!environment_t.LPacket. (Poly) lib!environment_t.LPacket.)
(declare-fun Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp.) Poly)
(declare-fun %Poly%lib!environment_t.LIoOp. (Poly) lib!environment_t.LIoOp.)
(declare-fun Poly%lib!io_t.HostEnvironment. (lib!io_t.HostEnvironment.) Poly)
(declare-fun %Poly%lib!io_t.HostEnvironment. (Poly) lib!io_t.HostEnvironment.)
(declare-fun Poly%lib!io_t.EndPoint. (lib!io_t.EndPoint.) Poly)
(declare-fun %Poly%lib!io_t.EndPoint. (Poly) lib!io_t.EndPoint.)
(declare-fun Poly%lib!io_t.State. (lib!io_t.State.) Poly)
(declare-fun %Poly%lib!io_t.State. (Poly) lib!io_t.State.)
(declare-fun Poly%lib!io_t.NetcReceiveResult. (lib!io_t.NetcReceiveResult.) Poly)
(declare-fun %Poly%lib!io_t.NetcReceiveResult. (Poly) lib!io_t.NetcReceiveResult.)
(declare-fun Poly%lib!io_t.IronfleetIOError. (lib!io_t.IronfleetIOError.) Poly)
(declare-fun %Poly%lib!io_t.IronfleetIOError. (Poly) lib!io_t.IronfleetIOError.)
(declare-fun Poly%lib!io_t.NetClient. (lib!io_t.NetClient.) Poly)
(declare-fun %Poly%lib!io_t.NetClient. (Poly) lib!io_t.NetClient.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)) )) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) ))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(assert (forall ((x alloc!string.String.)) (! (= x (%Poly%alloc!string.String. (Poly%alloc!string.String. x))) :pattern ((Poly%alloc!string.String. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%alloc!string.String.) (= x (Poly%alloc!string.String. (%Poly%alloc!string.String. x)))) :pattern ((has_type x TYPE%alloc!string.String.)) )))
(assert (forall ((x alloc!string.String.)) (! (has_type (Poly%alloc!string.String. x) TYPE%alloc!string.String.) :pattern ((has_type (Poly%alloc!string.String. x) TYPE%alloc!string.String.)) )))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly%alloc!vec.Vec<u8./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<u8./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<u8./allocator_global%.>. (%Poly%alloc!vec.Vec<u8./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. (%Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x lib!io_t.DuctTapeProfiler.)) (! (= x (%Poly%lib!io_t.DuctTapeProfiler. (Poly%lib!io_t.DuctTapeProfiler. x))) :pattern ((Poly%lib!io_t.DuctTapeProfiler. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!io_t.DuctTapeProfiler.) (= x (Poly%lib!io_t.DuctTapeProfiler. (%Poly%lib!io_t.DuctTapeProfiler. x)))) :pattern ((has_type x TYPE%lib!io_t.DuctTapeProfiler.)) )))
(assert (forall ((x lib!io_t.DuctTapeProfiler.)) (! (has_type (Poly%lib!io_t.DuctTapeProfiler. x) TYPE%lib!io_t.DuctTapeProfiler.) :pattern ((has_type (Poly%lib!io_t.DuctTapeProfiler. x) TYPE%lib!io_t.DuctTapeProfiler.)) )))
(assert (forall ((x lib!io_t.NetClientCPointers.)) (! (= x (%Poly%lib!io_t.NetClientCPointers. (Poly%lib!io_t.NetClientCPointers. x))) :pattern ((Poly%lib!io_t.NetClientCPointers. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!io_t.NetClientCPointers.) (= x (Poly%lib!io_t.NetClientCPointers. (%Poly%lib!io_t.NetClientCPointers. x)))) :pattern ((has_type x TYPE%lib!io_t.NetClientCPointers.)) )))
(assert (forall ((x lib!io_t.NetClientCPointers.)) (! (has_type (Poly%lib!io_t.NetClientCPointers. x) TYPE%lib!io_t.NetClientCPointers.) :pattern ((has_type (Poly%lib!io_t.NetClientCPointers. x) TYPE%lib!io_t.NetClientCPointers.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<char.>.)) (! (= x (%Poly%vstd!seq.Seq<char.>. (Poly%vstd!seq.Seq<char.>. x))) :pattern ((Poly%vstd!seq.Seq<char.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ CHAR)) (= x (Poly%vstd!seq.Seq<char.>. (%Poly%vstd!seq.Seq<char.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ CHAR))) )))
(assert (forall ((x vstd!seq.Seq<char.>.)) (! (has_type (Poly%vstd!seq.Seq<char.>. x) (TYPE%vstd!seq.Seq. $ CHAR)) :pattern ((has_type (Poly%vstd!seq.Seq<char.>. x) (TYPE%vstd!seq.Seq. $ CHAR))) )))
(assert (forall ((x vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) (= x (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (%Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) )))
(assert (forall ((x vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) )))
(assert (forall ((x vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. (Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) (= x (Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. (%Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))) )))
(assert (forall ((x vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) :pattern ((has_type (Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))) )))
(assert (forall ((x vstd!seq.Seq<lib!io_t.EndPoint.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!io_t.EndPoint.)) (= x (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (%Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!io_t.EndPoint.))) )))
(assert (forall ((x vstd!seq.Seq<lib!io_t.EndPoint.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!io_t.EndPoint.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!io_t.EndPoint.))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))) )))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!abstract_end_point_t.AbstractEndPoint.)) (! (= x (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. x))) :pattern ((Poly%lib!abstract_end_point_t.AbstractEndPoint. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (= x (Poly%lib!abstract_end_point_t.AbstractEndPoint. (%Poly%lib!abstract_end_point_t.AbstractEndPoint. x)))) :pattern ((has_type x TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) )))
(assert (forall ((x lib!abstract_end_point_t.AbstractEndPoint.)) (! (= (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id x) (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/?id x)) :pattern ((lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id x)) )))
(assert (forall ((x lib!abstract_end_point_t.AbstractEndPoint.)) (! (has_type (Poly%lib!abstract_end_point_t.AbstractEndPoint. x) TYPE%lib!abstract_end_point_t.AbstractEndPoint.) :pattern ((has_type (Poly%lib!abstract_end_point_t.AbstractEndPoint. x) TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) )))
(assert (forall ((x lib!environment_t.LPacket.)) (! (= x (%Poly%lib!environment_t.LPacket. (Poly%lib!environment_t.LPacket. x))) :pattern ((Poly%lib!environment_t.LPacket. x)) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&)) (= x (Poly%lib!environment_t.LPacket. (%Poly%lib!environment_t.LPacket. x)))) :pattern ((has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (_dst! Poly) (_src! Poly) (_msg! Poly)) (! (=> (and (has_type _dst! IdType&) (has_type _src! IdType&) (has_type _msg! MessageType&)) (has_type (Poly%lib!environment_t.LPacket. (lib!environment_t.LPacket./LPacket _dst! _src! _msg!)) (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) :pattern ((has_type (Poly%lib!environment_t.LPacket. (lib!environment_t.LPacket./LPacket _dst! _src! _msg!)) (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((x lib!environment_t.LPacket.)) (! (= (lib!environment_t.LPacket./LPacket/dst x) (lib!environment_t.LPacket./LPacket/?dst x)) :pattern ((lib!environment_t.LPacket./LPacket/dst x)) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&)) (has_type (lib!environment_t.LPacket./LPacket/dst (%Poly%lib!environment_t.LPacket. x)) IdType&)) :pattern ((lib!environment_t.LPacket./LPacket/dst (%Poly%lib!environment_t.LPacket. x)) (has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((x lib!environment_t.LPacket.)) (! (= (lib!environment_t.LPacket./LPacket/src x) (lib!environment_t.LPacket./LPacket/?src x)) :pattern ((lib!environment_t.LPacket./LPacket/src x)) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&)) (has_type (lib!environment_t.LPacket./LPacket/src (%Poly%lib!environment_t.LPacket. x)) IdType&)) :pattern ((lib!environment_t.LPacket./LPacket/src (%Poly%lib!environment_t.LPacket. x)) (has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((x lib!environment_t.LPacket.)) (! (= (lib!environment_t.LPacket./LPacket/msg x) (lib!environment_t.LPacket./LPacket/?msg x)) :pattern ((lib!environment_t.LPacket./LPacket/msg x)) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&)) (has_type (lib!environment_t.LPacket./LPacket/msg (%Poly%lib!environment_t.LPacket. x)) MessageType&)) :pattern ((lib!environment_t.LPacket./LPacket/msg (%Poly%lib!environment_t.LPacket. x)) (has_type x (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) )))
(define-fun is-lib!environment_t.LPacket./LPacket_ ((c lib!environment_t.LPacket.)) Bool ((_ is lib!environment_t.LPacket./LPacket) c))
(assert (forall ((x lib!environment_t.LPacket.)) (! (=> (is-lib!environment_t.LPacket./LPacket_ x) (height_lt (height (lib!environment_t.LPacket./LPacket/dst x)) (height (Poly%lib!environment_t.LPacket. x)))) :pattern ((height (lib!environment_t.LPacket./LPacket/dst x))) )))
(assert (forall ((x lib!environment_t.LPacket.)) (! (=> (is-lib!environment_t.LPacket./LPacket_ x) (height_lt (height (lib!environment_t.LPacket./LPacket/src x)) (height (Poly%lib!environment_t.LPacket. x)))) :pattern ((height (lib!environment_t.LPacket./LPacket/src x))) )))
(assert (forall ((x lib!environment_t.LPacket.)) (! (=> (is-lib!environment_t.LPacket./LPacket_ x) (height_lt (height (lib!environment_t.LPacket./LPacket/msg x)) (height (Poly%lib!environment_t.LPacket. x)))) :pattern ((height (lib!environment_t.LPacket./LPacket/msg x))) )))
(assert (forall ((x lib!environment_t.LIoOp.)) (! (= x (%Poly%lib!environment_t.LIoOp. (Poly%lib!environment_t.LIoOp. x))) :pattern ((Poly%lib!environment_t.LIoOp. x)) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&)) (= x (Poly%lib!environment_t.LIoOp. (%Poly%lib!environment_t.LIoOp. x)))) :pattern ((has_type x (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (_s! lib!environment_t.LPacket.)) (! (=> (has_type (Poly%lib!environment_t.LPacket. _s!) (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&)) (has_type (Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp./Send _s!)) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) :pattern ((has_type (Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp./Send _s!)) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((x lib!environment_t.LIoOp.)) (! (= (lib!environment_t.LIoOp./Send/s x) (lib!environment_t.LIoOp./Send/?s x)) :pattern ((lib!environment_t.LIoOp./Send/s x)) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&)) (has_type (Poly%lib!environment_t.LPacket. (lib!environment_t.LIoOp./Send/s (%Poly%lib!environment_t.LIoOp. x))) (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) :pattern ((lib!environment_t.LIoOp./Send/s (%Poly%lib!environment_t.LIoOp. x)) (has_type x (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (_r! lib!environment_t.LPacket.)) (! (=> (has_type (Poly%lib!environment_t.LPacket. _r!) (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&)) (has_type (Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp./Receive _r!)) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) :pattern ((has_type (Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp./Receive _r!)) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((x lib!environment_t.LIoOp.)) (! (= (lib!environment_t.LIoOp./Receive/r x) (lib!environment_t.LIoOp./Receive/?r x)) :pattern ((lib!environment_t.LIoOp./Receive/r x)) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&)) (has_type (Poly%lib!environment_t.LPacket. (lib!environment_t.LIoOp./Receive/r (%Poly%lib!environment_t.LIoOp. x))) (TYPE%lib!environment_t.LPacket. IdType&. IdType& MessageType&. MessageType&))) :pattern ((lib!environment_t.LIoOp./Receive/r (%Poly%lib!environment_t.LIoOp. x)) (has_type x (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type)) (! (has_type (Poly%lib!environment_t.LIoOp. lib!environment_t.LIoOp./TimeoutReceive) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&)) :pattern ((has_type (Poly%lib!environment_t.LIoOp. lib!environment_t.LIoOp./TimeoutReceive) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((IdType&. Dcr) (IdType& Type) (MessageType&. Dcr) (MessageType& Type) (_t! Int)) (! (has_type (Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp./ReadClock _t!)) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&)) :pattern ((has_type (Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp./ReadClock _t!)) (TYPE%lib!environment_t.LIoOp. IdType&. IdType& MessageType&. MessageType&))) )))
(assert (forall ((x lib!environment_t.LIoOp.)) (! (= (lib!environment_t.LIoOp./ReadClock/t x) (lib!environment_t.LIoOp./ReadClock/?t x)) :pattern ((lib!environment_t.LIoOp./ReadClock/t x)) )))
(define-fun is-lib!environment_t.LIoOp./Send_ ((c lib!environment_t.LIoOp.)) Bool ((_ is lib!environment_t.LIoOp./Send) c))
(assert (forall ((x lib!environment_t.LIoOp.)) (! (=> (is-lib!environment_t.LIoOp./Send_ x) (height_lt (height (Poly%lib!environment_t.LPacket. (lib!environment_t.LIoOp./Send/s x))) (height (Poly%lib!environment_t.LIoOp. x)))) :pattern ((height (Poly%lib!environment_t.LPacket. (lib!environment_t.LIoOp./Send/s x)))) )))
(define-fun is-lib!environment_t.LIoOp./Receive_ ((c lib!environment_t.LIoOp.)) Bool ((_ is lib!environment_t.LIoOp./Receive) c))
(assert (forall ((x lib!environment_t.LIoOp.)) (! (=> (is-lib!environment_t.LIoOp./Receive_ x) (height_lt (height (Poly%lib!environment_t.LPacket. (lib!environment_t.LIoOp./Receive/r x))) (height (Poly%lib!environment_t.LIoOp. x)))) :pattern ((height (Poly%lib!environment_t.LPacket. (lib!environment_t.LIoOp./Receive/r x)))) )))
(assert (forall ((x lib!io_t.HostEnvironment.)) (! (= x (%Poly%lib!io_t.HostEnvironment. (Poly%lib!io_t.HostEnvironment. x))) :pattern ((Poly%lib!io_t.HostEnvironment. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!io_t.HostEnvironment.) (= x (Poly%lib!io_t.HostEnvironment. (%Poly%lib!io_t.HostEnvironment. x)))) :pattern ((has_type x TYPE%lib!io_t.HostEnvironment.)) )))
(assert (forall ((x lib!io_t.HostEnvironment.)) (! (has_type (Poly%lib!io_t.HostEnvironment. x) TYPE%lib!io_t.HostEnvironment.) :pattern ((has_type (Poly%lib!io_t.HostEnvironment. x) TYPE%lib!io_t.HostEnvironment.)) )))
(assert (forall ((x lib!io_t.EndPoint.)) (! (= x (%Poly%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. x))) :pattern ((Poly%lib!io_t.EndPoint. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!io_t.EndPoint.) (= x (Poly%lib!io_t.EndPoint. (%Poly%lib!io_t.EndPoint. x)))) :pattern ((has_type x TYPE%lib!io_t.EndPoint.)) )))
(assert (forall ((x lib!io_t.EndPoint.)) (! (= (lib!io_t.EndPoint./EndPoint/id x) (lib!io_t.EndPoint./EndPoint/?id x)) :pattern ((lib!io_t.EndPoint./EndPoint/id x)) )))
(assert (forall ((x lib!io_t.EndPoint.)) (! (has_type (Poly%lib!io_t.EndPoint. x) TYPE%lib!io_t.EndPoint.) :pattern ((has_type (Poly%lib!io_t.EndPoint. x) TYPE%lib!io_t.EndPoint.)) )))
(assert (forall ((x lib!io_t.State.)) (! (= x (%Poly%lib!io_t.State. (Poly%lib!io_t.State. x))) :pattern ((Poly%lib!io_t.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!io_t.State.) (= x (Poly%lib!io_t.State. (%Poly%lib!io_t.State. x)))) :pattern ((has_type x TYPE%lib!io_t.State.)) )))
(assert (forall ((x lib!io_t.State.)) (! (has_type (Poly%lib!io_t.State. x) TYPE%lib!io_t.State.) :pattern ((has_type (Poly%lib!io_t.State. x) TYPE%lib!io_t.State.)) )))
(assert (forall ((x lib!io_t.NetcReceiveResult.)) (! (= x (%Poly%lib!io_t.NetcReceiveResult. (Poly%lib!io_t.NetcReceiveResult. x))) :pattern ((Poly%lib!io_t.NetcReceiveResult. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!io_t.NetcReceiveResult.) (= x (Poly%lib!io_t.NetcReceiveResult. (%Poly%lib!io_t.NetcReceiveResult. x)))) :pattern ((has_type x TYPE%lib!io_t.NetcReceiveResult.)) )))
(assert (forall ((x lib!io_t.NetcReceiveResult.)) (! (= (lib!io_t.NetcReceiveResult./Received/sender x) (lib!io_t.NetcReceiveResult./Received/?sender x)) :pattern ((lib!io_t.NetcReceiveResult./Received/sender x)) )))
(assert (forall ((x lib!io_t.NetcReceiveResult.)) (! (= (lib!io_t.NetcReceiveResult./Received/message x) (lib!io_t.NetcReceiveResult./Received/?message x)) :pattern ((lib!io_t.NetcReceiveResult./Received/message x)) )))
(assert (forall ((x lib!io_t.NetcReceiveResult.)) (! (has_type (Poly%lib!io_t.NetcReceiveResult. x) TYPE%lib!io_t.NetcReceiveResult.) :pattern ((has_type (Poly%lib!io_t.NetcReceiveResult. x) TYPE%lib!io_t.NetcReceiveResult.)) )))
(assert (forall ((x lib!io_t.IronfleetIOError.)) (! (= x (%Poly%lib!io_t.IronfleetIOError. (Poly%lib!io_t.IronfleetIOError. x))) :pattern ((Poly%lib!io_t.IronfleetIOError. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!io_t.IronfleetIOError.) (= x (Poly%lib!io_t.IronfleetIOError. (%Poly%lib!io_t.IronfleetIOError. x)))) :pattern ((has_type x TYPE%lib!io_t.IronfleetIOError.)) )))
(assert (forall ((x lib!io_t.IronfleetIOError.)) (! (= (lib!io_t.IronfleetIOError./IronfleetIOError/message x) (lib!io_t.IronfleetIOError./IronfleetIOError/?message x)) :pattern ((lib!io_t.IronfleetIOError./IronfleetIOError/message x)) )))
(assert (forall ((x lib!io_t.IronfleetIOError.)) (! (has_type (Poly%lib!io_t.IronfleetIOError. x) TYPE%lib!io_t.IronfleetIOError.) :pattern ((has_type (Poly%lib!io_t.IronfleetIOError. x) TYPE%lib!io_t.IronfleetIOError.)) )))
(assert (forall ((x lib!io_t.NetClient.)) (! (= x (%Poly%lib!io_t.NetClient. (Poly%lib!io_t.NetClient. x))) :pattern ((Poly%lib!io_t.NetClient. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!io_t.NetClient.) (= x (Poly%lib!io_t.NetClient. (%Poly%lib!io_t.NetClient. x)))) :pattern ((has_type x TYPE%lib!io_t.NetClient.)) )))
(assert (forall ((x lib!io_t.NetClient.)) (! (= (lib!io_t.NetClient./NetClient/state x) (lib!io_t.NetClient./NetClient/?state x)) :pattern ((lib!io_t.NetClient./NetClient/state x)) )))
(assert (forall ((x lib!io_t.NetClient.)) (! (= (lib!io_t.NetClient./NetClient/history x) (lib!io_t.NetClient./NetClient/?history x)) :pattern ((lib!io_t.NetClient./NetClient/history x)) )))
(assert (forall ((x lib!io_t.NetClient.)) (! (= (lib!io_t.NetClient./NetClient/end_point x) (lib!io_t.NetClient./NetClient/?end_point x)) :pattern ((lib!io_t.NetClient./NetClient/end_point x)) )))
(assert (forall ((x lib!io_t.NetClient.)) (! (= (lib!io_t.NetClient./NetClient/c_pointers x) (lib!io_t.NetClient./NetClient/?c_pointers x)) :pattern ((lib!io_t.NetClient./NetClient/c_pointers x)) )))
(assert (forall ((x lib!io_t.NetClient.)) (! (= (lib!io_t.NetClient./NetClient/profiler x) (lib!io_t.NetClient./NetClient/?profiler x)) :pattern ((lib!io_t.NetClient./NetClient/profiler x)) )))
(assert (forall ((x lib!io_t.NetClient.)) (! (has_type (Poly%lib!io_t.NetClient. x) TYPE%lib!io_t.NetClient.) :pattern ((has_type (Poly%lib!io_t.NetClient. x) TYPE%lib!io_t.NetClient.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)) )))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%alloc!string.String.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%alloc!string.String.) (TYPE%vstd!seq.Seq. $ CHAR)))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ (SINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 32)) (SINT 32)))
(assert (= (proj%%vstd!view.View./V $ CHAR) $))
(assert (= (proj%vstd!view.View./V $ CHAR) CHAR))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::io_t::EndPoint::view")
(declare-fun lib!io_t.impl&%4.view.? (Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(set-info :comment ";; Function-Decl lib::io_t::NetClient::state")
(declare-fun lib!io_t.impl&%7.state.? (Poly) lib!io_t.State.)
(set-info :comment ";; Function-Decl lib::io_t::NetClient::history")
(declare-fun lib!io_t.impl&%7.history.? (Poly) vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>.)
(set-info :comment ";; Function-Decl lib::io_t::NetClient::my_end_point")
(declare-fun lib!io_t.impl&%7.my_end_point.? (Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(set-info :comment ";; Function-Decl lib::abstract_end_point_t::AbstractEndPoint::valid_physical_address")
(declare-fun lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::io_t::EndPoint::abstractable")
(declare-fun lib!io_t.impl&%4.abstractable.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::map")
(declare-fun vstd!seq_lib.impl&%0.map.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::abstract_end_point_t::AbstractEndPoint::abstractable")
(declare-fun lib!abstract_end_point_t.impl&%0.abstractable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::io_t::EndPoint::valid_public_key")
(declare-fun lib!io_t.impl&%4.valid_public_key.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::io_t::abstractify_end_points")
(declare-fun lib!io_t.abstractify_end_points.? (Poly) vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.)
(set-info :comment ";; Function-Decl lib::io_t::NetClient::ok")
(declare-fun lib!io_t.impl&%7.ok.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::io_t::NetcReceiveResult::arrow_sender")
(declare-fun lib!io_t.impl&%5.arrow_sender.? (Poly) lib!io_t.EndPoint.)
(set-info :comment ";; Function-Decl lib::io_t::NetcReceiveResult::arrow_message")
(declare-fun lib!io_t.impl&%5.arrow_message.? (Poly) alloc!vec.Vec<u8./allocator_global%.>.)
(set-info :comment ";; Function-Decl lib::io_t::NetcReceiveResult::arrow_Received_sender")
(declare-fun lib!io_t.impl&%5.arrow_Received_sender.? (Poly) lib!io_t.EndPoint.)
(set-info :comment ";; Function-Decl lib::io_t::NetcReceiveResult::arrow_Received_message")
(declare-fun lib!io_t.impl&%5.arrow_Received_message.? (Poly) alloc!vec.Vec<u8./allocator_global%.>.)
(set-info :comment ";; Function-Decl lib::io_t::from_trusted_code")
(declare-fun lib!io_t.from_trusted_code.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::io_t::NetClient::valid")
(declare-fun lib!io_t.impl&%7.valid.? (Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::spec_vec_len")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_spec_len")
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.axiom_spec_len.) (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!)) ))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::len")
(declare-fun ens%alloc!vec.impl&%1.len. (Dcr Type Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (len! Int)) (! (= (ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!) (and (uInv SZ len!) (= len! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec!)))) :pattern ((ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_left")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_right")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::push_distributes_over_add")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (elt! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type elt! A&)) (= (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!) (vstd!seq.Seq.add.? A&. A& a! (vstd!seq.Seq.push.? A&. A& b! elt!)))) :pattern ((vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::EndPoint::view")
(assert (fuel_bool_default fuel%lib!io_t.impl&%4.view.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%4.view.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%4.view.? self!) (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!io_t.EndPoint./EndPoint/id (%Poly%lib!io_t.EndPoint. self!))))))) :pattern ((lib!io_t.impl&%4.view.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::NetClient::state")
(assert (fuel_bool_default fuel%lib!io_t.impl&%7.state.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%7.state.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%7.state.? self!) (lib!io_t.NetClient./NetClient/state (%Poly%lib!io_t.NetClient. self!))) :pattern ((lib!io_t.impl&%7.state.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::NetClient::history")
(assert (fuel_bool_default fuel%lib!io_t.impl&%7.history.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%7.history.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%7.history.? self!) (lib!io_t.NetClient./NetClient/history (%Poly%lib!io_t.NetClient. self!))) :pattern ((lib!io_t.impl&%7.history.? self!)) ))))
(set-info :comment ";; Function-Specs lib::io_t::NetClient::get_time")
(declare-fun req%lib!io_t.impl&%7.get_time. (lib!io_t.NetClient.) Bool)
(declare-const %%global_location_label%%2 Bool)
(define-fun is-lib!io_t.State./Receiving_ ((c lib!io_t.State.)) Bool ((_ is lib!io_t.State./Receiving) c))
(assert (forall ((pre%self! lib!io_t.NetClient.)) (! (= (req%lib!io_t.impl&%7.get_time. pre%self!) (=> %%global_location_label%%2 (is-lib!io_t.State./Receiving_ (lib!io_t.impl&%7.state.? (Poly%lib!io_t.NetClient. pre%self!))))) :pattern ((req%lib!io_t.impl&%7.get_time. pre%self!)) )))
(declare-fun ens%lib!io_t.impl&%7.get_time. (lib!io_t.NetClient. lib!io_t.NetClient. Int) Bool)
(define-fun is-lib!io_t.State./Sending_ ((c lib!io_t.State.)) Bool ((_ is lib!io_t.State./Sending) c))
(assert (forall ((pre%self! lib!io_t.NetClient.) (self! lib!io_t.NetClient.) (time! Int)) (! (= (ens%lib!io_t.impl&%7.get_time. pre%self! self! time!) (and (uInv 64 time!) (and (is-lib!io_t.State./Sending_ (lib!io_t.impl&%7.state.? (Poly%lib!io_t.NetClient. self!))) (= (lib!io_t.impl&%7.history.? (Poly%lib!io_t.NetClient. self!)) (%Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. (vstd!seq.Seq.add.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. (lib!io_t.impl&%7.history.? (Poly%lib!io_t.NetClient. pre%self!))) (vstd!seq.Seq.push.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (vstd!seq.Seq.empty.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp./ReadClock (%I (I time!))))))))))) :pattern ((ens%lib!io_t.impl&%7.get_time. pre%self! self! time!)) )))
(set-info :comment ";; Function-Axioms lib::io_t::NetClient::my_end_point")
(assert (fuel_bool_default fuel%lib!io_t.impl&%7.my_end_point.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%7.my_end_point.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%7.my_end_point.? self!) (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. (lib!io_t.NetClient./NetClient/end_point (%Poly%lib!io_t.NetClient. self!))))) :pattern ((lib!io_t.impl&%7.my_end_point.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_end_point_t::AbstractEndPoint::valid_physical_address")
(assert (fuel_bool_default fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address.))
(assert (=> (fuel_bool fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address.) (forall ((self! Poly)) (! (= (lib!abstract_end_point_t.impl&%0.valid_physical_address.? self!) (< (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id (%Poly%lib!abstract_end_point_t.AbstractEndPoint. self!)))) 1048576)) :pattern ((lib!abstract_end_point_t.impl&%0.valid_physical_address.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::EndPoint::abstractable")
(assert (fuel_bool_default fuel%lib!io_t.impl&%4.abstractable.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%4.abstractable.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%4.abstractable.? self!) (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? self!)))) :pattern ((lib!io_t.impl&%4.abstractable.? self!)) ))))
(set-info :comment ";; Function-Specs lib::io_t::NetClient::receive")
(declare-fun req%lib!io_t.impl&%7.receive. (lib!io_t.NetClient. Int) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((pre%self! lib!io_t.NetClient.) (time_limit_s! Int)) (! (= (req%lib!io_t.impl&%7.receive. pre%self! time_limit_s!) (=> %%global_location_label%%3 (is-lib!io_t.State./Receiving_ (lib!io_t.impl&%7.state.? (Poly%lib!io_t.NetClient. pre%self!))))) :pattern ((req%lib!io_t.impl&%7.receive. pre%self! time_limit_s!)) )))
(declare-fun ens%lib!io_t.impl&%7.receive. (lib!io_t.NetClient. lib!io_t.NetClient. Int lib!io_t.NetcReceiveResult.) Bool)
(define-fun is-lib!io_t.NetcReceiveResult./Received_ ((c lib!io_t.NetcReceiveResult.)) Bool ((_ is lib!io_t.NetcReceiveResult./Received) c))
(define-fun is-lib!io_t.NetcReceiveResult./TimedOut_ ((c lib!io_t.NetcReceiveResult.)) Bool ((_ is lib!io_t.NetcReceiveResult./TimedOut) c))
(define-fun is-lib!io_t.State./Error_ ((c lib!io_t.State.)) Bool ((_ is lib!io_t.State./Error) c))
(assert (forall ((pre%self! lib!io_t.NetClient.) (self! lib!io_t.NetClient.) (time_limit_s! Int) (result! lib!io_t.NetcReceiveResult.)) (! (= (ens%lib!io_t.impl&%7.receive. pre%self! self! time_limit_s! result!) (and (= (lib!io_t.impl&%7.my_end_point.? (Poly%lib!io_t.NetClient. self!)) (lib!io_t.impl&%7.my_end_point.? (Poly%lib!io_t.NetClient. pre%self!))) (ite (is-lib!io_t.NetcReceiveResult./Received_ result!) (let ((sender$ (lib!io_t.NetcReceiveResult./Received/sender (%Poly%lib!io_t.NetcReceiveResult. (Poly%lib!io_t.NetcReceiveResult. result!))))) (let ((message$ (lib!io_t.NetcReceiveResult./Received/message (%Poly%lib!io_t.NetcReceiveResult. (Poly%lib!io_t.NetcReceiveResult. result!))))) (and (and (is-lib!io_t.State./Receiving_ (lib!io_t.impl&%7.state.? (Poly%lib!io_t.NetClient. self!))) (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. sender$))))) (= (lib!io_t.impl&%7.history.? (Poly%lib!io_t.NetClient. self!)) (%Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. (vstd!seq.Seq.add.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. (lib!io_t.impl&%7.history.? (Poly%lib!io_t.NetClient. pre%self!))) (vstd!seq.Seq.push.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (vstd!seq.Seq.empty.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (Poly%lib!environment_t.LIoOp. (lib!environment_t.LIoOp./Receive (%Poly%lib!environment_t.LPacket. (Poly%lib!environment_t.LPacket. (lib!environment_t.LPacket./LPacket (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%7.my_end_point.? (Poly%lib!io_t.NetClient. self!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. sender$))) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. message$)))))))))))))) (ite (is-lib!io_t.NetcReceiveResult./TimedOut_ result!) (and (is-lib!io_t.State./Sending_ (lib!io_t.impl&%7.state.? (Poly%lib!io_t.NetClient. self!))) (= (lib!io_t.impl&%7.history.? (Poly%lib!io_t.NetClient. self!)) (%Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. (vstd!seq.Seq.add.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (Poly%vstd!seq.Seq<lib!environment_t.LIoOp<lib!abstract_end_point_t.AbstractEndPoint./vstd!seq.Seq<u8.>.>.>. (lib!io_t.impl&%7.history.? (Poly%lib!io_t.NetClient. pre%self!))) (vstd!seq.Seq.push.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (vstd!seq.Seq.empty.? $ (TYPE%lib!environment_t.LIoOp. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (Poly%lib!environment_t.LIoOp. lib!environment_t.LIoOp./TimeoutReceive)))))) (is-lib!io_t.State./Error_ (lib!io_t.impl&%7.state.? (Poly%lib!io_t.NetClient. self!))))))) :pattern ((ens%lib!io_t.impl&%7.receive. pre%self! self! time_limit_s! result!)) )))
(set-info :comment ";; Function-Specs lib::io_t::NetClient::send_internal_wrapper")
(declare-fun ens%lib!io_t.impl&%7.send_internal_wrapper. (lib!io_t.NetClient. lib!io_t.NetClient. lib!io_t.EndPoint. alloc!vec.Vec<u8./allocator_global%.>. core!result.Result.) Bool)
(assert (forall ((pre%self! lib!io_t.NetClient.) (self! lib!io_t.NetClient.) (remote! lib!io_t.EndPoint.) (message! alloc!vec.Vec<u8./allocator_global%.>.) (result! core!result.Result.)) (! (= (ens%lib!io_t.impl&%7.send_internal_wrapper. pre%self! self! remote! message! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ TYPE%lib!io_t.IronfleetIOError.)) (= self! pre%self!))) :pattern ((ens%lib!io_t.impl&%7.send_internal_wrapper. pre%self! self! remote! message! result!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::map")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map.))
(declare-fun %%lambda%%0 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%1 %%hole%%3 i$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self! (%Poly%fun%2. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%2. $ INT A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)) )))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%30::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%30.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%30.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 32) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%38::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%38.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%38.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ CHAR self!) self!) :pattern ((vstd!view.View.view.? $ CHAR self!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_end_point_t::AbstractEndPoint::abstractable")
(assert (fuel_bool_default fuel%lib!abstract_end_point_t.impl&%0.abstractable.))
(assert (=> (fuel_bool fuel%lib!abstract_end_point_t.impl&%0.abstractable.) (forall ((self! Poly)) (! (= (lib!abstract_end_point_t.impl&%0.abstractable.? self!) (lib!abstract_end_point_t.impl&%0.valid_physical_address.? self!)) :pattern ((lib!abstract_end_point_t.impl&%0.abstractable.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::EndPoint::valid_public_key")
(assert (fuel_bool_default fuel%lib!io_t.impl&%4.valid_public_key.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%4.valid_public_key.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%4.valid_public_key.? self!) (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? self!)))) :pattern ((lib!io_t.impl&%4.valid_public_key.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::abstractify_end_points")
(assert (fuel_bool_default fuel%lib!io_t.abstractify_end_points.))
(declare-fun %%lambda%%1 () %%Function%%)
(assert (forall ((i$ Poly) (end_point$ Poly)) (! (= (%%apply%%1 %%lambda%%1 i$ end_point$) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? end_point$))) :pattern ((%%apply%%1 %%lambda%%1 i$ end_point$)))))
(assert (=> (fuel_bool fuel%lib!io_t.abstractify_end_points.) (forall ((end_points! Poly)) (! (= (lib!io_t.abstractify_end_points.? end_points!) (%Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!io_t.EndPoint. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL) end_points!) (Poly%fun%2. (mk_fun %%lambda%%1))))) :pattern ((lib!io_t.abstractify_end_points.? end_points!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::NetClient::ok")
(assert (fuel_bool_default fuel%lib!io_t.impl&%7.ok.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%7.ok.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%7.ok.? self!) (not (is-lib!io_t.State./Error_ (lib!io_t.impl&%7.state.? self!)))) :pattern ((lib!io_t.impl&%7.ok.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::NetcReceiveResult::arrow_sender")
(assert (fuel_bool_default fuel%lib!io_t.impl&%5.arrow_sender.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%5.arrow_sender.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%5.arrow_sender.? self!) (lib!io_t.NetcReceiveResult./Received/sender (%Poly%lib!io_t.NetcReceiveResult. self!))) :pattern ((lib!io_t.impl&%5.arrow_sender.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::NetcReceiveResult::arrow_message")
(assert (fuel_bool_default fuel%lib!io_t.impl&%5.arrow_message.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%5.arrow_message.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%5.arrow_message.? self!) (lib!io_t.NetcReceiveResult./Received/message (%Poly%lib!io_t.NetcReceiveResult. self!))) :pattern ((lib!io_t.impl&%5.arrow_message.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::NetcReceiveResult::arrow_Received_sender")
(assert (fuel_bool_default fuel%lib!io_t.impl&%5.arrow_Received_sender.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%5.arrow_Received_sender.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%5.arrow_Received_sender.? self!) (lib!io_t.NetcReceiveResult./Received/sender (%Poly%lib!io_t.NetcReceiveResult. self!))) :pattern ((lib!io_t.impl&%5.arrow_Received_sender.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::NetcReceiveResult::arrow_Received_message")
(assert (fuel_bool_default fuel%lib!io_t.impl&%5.arrow_Received_message.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%5.arrow_Received_message.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%5.arrow_Received_message.? self!) (lib!io_t.NetcReceiveResult./Received/message (%Poly%lib!io_t.NetcReceiveResult. self!))) :pattern ((lib!io_t.impl&%5.arrow_Received_message.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::from_trusted_code")
(assert (fuel_bool_default fuel%lib!io_t.from_trusted_code.))
(assert (=> (fuel_bool fuel%lib!io_t.from_trusted_code.) (forall ((no%param Poly)) (! (= (lib!io_t.from_trusted_code.? no%param) true) :pattern ((lib!io_t.from_trusted_code.? no%param)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::NetClient::valid")
(assert (fuel_bool_default fuel%lib!io_t.impl&%7.valid.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%7.valid.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%7.valid.? self!) (and (lib!io_t.impl&%7.ok.? self!) (lib!abstract_end_point_t.impl&%0.abstractable.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%7.my_end_point.? self!))))) :pattern ((lib!io_t.impl&%7.valid.? self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%alloc!string.String.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)) )))
(set-info :comment ";; Function-Specs lib::args_t::clone_vec_u8")
(declare-fun ens%lib!args_t.clone_vec_u8. (alloc!vec.Vec<u8./allocator_global%.>. alloc!vec.Vec<u8./allocator_global%.>.) Bool)
(assert (forall ((v! alloc!vec.Vec<u8./allocator_global%.>.) (out! alloc!vec.Vec<u8./allocator_global%.>.)) (! (= (ens%lib!args_t.clone_vec_u8. v! out!) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. out!)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. v!)))) :pattern ((ens%lib!args_t.clone_vec_u8. v! out!)) )))
(set-info :comment ";; Function-Specs lib::io_t::EndPoint::clone_up_to_view")
(declare-fun ens%lib!io_t.impl&%4.clone_up_to_view. (lib!io_t.EndPoint. lib!io_t.EndPoint.) Bool)
(assert (forall ((self! lib!io_t.EndPoint.) (res! lib!io_t.EndPoint.)) (! (= (ens%lib!io_t.impl&%4.clone_up_to_view. self! res!) (= (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. res!)) (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. self!)))) :pattern ((ens%lib!io_t.impl&%4.clone_up_to_view. self! res!)) )))
(set-info :comment ";; Function-Def lib::io_t::EndPoint::clone_up_to_view")
(set-info :comment ";; ironsht/src/io_t.rs:51:5: 51:53 (#0)")
(set-info :comment ";; Function-Specs lib::io_t::EndPoint::valid_physical_address")
(declare-fun ens%lib!io_t.impl&%4.valid_physical_address. (lib!io_t.EndPoint. Bool) Bool)
(assert (forall ((self! lib!io_t.EndPoint.) (out! Bool)) (! (= (ens%lib!io_t.impl&%4.valid_physical_address. self! out!) (= out! (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. self!)))))) :pattern ((ens%lib!io_t.impl&%4.valid_physical_address. self! out!)) )))
(set-info :comment ";; Function-Def lib::io_t::EndPoint::valid_physical_address")
(set-info :comment ";; ironsht/src/io_t.rs:73:5: 73:55 (#0)")
(set-info :comment ";; Function-Specs lib::io_t::NetClient::get_my_end_point")
(declare-fun ens%lib!io_t.impl&%7.get_my_end_point. (lib!io_t.NetClient. lib!io_t.EndPoint.) Bool)
(assert (forall ((self! lib!io_t.NetClient.) (ep! lib!io_t.EndPoint.)) (! (= (ens%lib!io_t.impl&%7.get_my_end_point. self! ep!) (= (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. ep!)) (lib!io_t.impl&%7.my_end_point.? (Poly%lib!io_t.NetClient. self!)))) :pattern ((ens%lib!io_t.impl&%7.get_my_end_point. self! ep!)) )))
(set-info :comment ";; Function-Def lib::io_t::NetClient::get_my_end_point")
(set-info :comment ";; ironsht/src/io_t.rs:271:5: 271:52 (#0)")
(declare-const ep! lib!io_t.EndPoint.)
(declare-const self! lib!io_t.NetClient.)
(declare-const tmp%1 lib!io_t.EndPoint.)
(declare-const tmp%2 lib!io_t.EndPoint.)
(assert fuel_defaults)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%0 Bool)
(assert (not (=> (= tmp%2 (lib!io_t.NetClient./NetClient/end_point (%Poly%lib!io_t.NetClient. (Poly%lib!io_t.NetClient. self!)))) (=> (ens%lib!io_t.impl&%4.clone_up_to_view. tmp%2 tmp%1) (=> (= ep! tmp%1) (=> %%location_label%%0 (= (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. ep!)) (lib!io_t.impl&%7.my_end_point.? (Poly%lib!io_t.NetClient. self!)))))))))
(check-sat)
(exit)
