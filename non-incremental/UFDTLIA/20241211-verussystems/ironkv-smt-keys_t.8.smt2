(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module keys_t'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%0.eq. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%0.ne. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%0.lt. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%0.gt. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%0.le. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%2.between. FuelId)
(declare-const fuel%lib!keys_t.impl&%3.new_spec. FuelId)
(declare-const fuel%lib!keys_t.impl&%3.cmp_spec. FuelId)
(declare-const fuel%lib!keys_t.impl&%3.lt_spec. FuelId)
(declare-const fuel%lib!keys_t.impl&%3.geq_spec. FuelId)
(declare-const fuel%lib!keys_t.impl&%4.contains. FuelId)
(declare-const fuel%lib!keys_t.impl&%4.is_empty. FuelId)
(declare-const fuel%lib!keys_t.impl&%13.zero_spec. FuelId)
(declare-const fuel%lib!keys_t.impl&%13.cmp_spec. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%lib!delegation_map_v.impl&%0.eq. fuel%lib!delegation_map_v.impl&%0.ne. fuel%lib!delegation_map_v.impl&%0.lt. fuel%lib!delegation_map_v.impl&%0.gt. fuel%lib!delegation_map_v.impl&%0.le. fuel%lib!delegation_map_v.impl&%2.between. fuel%lib!keys_t.impl&%3.new_spec. fuel%lib!keys_t.impl&%3.cmp_spec. fuel%lib!keys_t.impl&%3.lt_spec. fuel%lib!keys_t.impl&%3.geq_spec. fuel%lib!keys_t.impl&%4.contains. fuel%lib!keys_t.impl&%4.is_empty. fuel%lib!keys_t.impl&%13.zero_spec. fuel%lib!keys_t.impl&%13.cmp_spec. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-datatypes ((core!option.Option. 0) (lib!keys_t.Ordering. 0) (lib!keys_t.KeyIterator. 0) (lib!keys_t.KeyRange. 0) (lib!keys_t.SHTKey. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((lib!keys_t.Ordering./Less ) (lib!keys_t.Ordering./Equal ) (lib!keys_t.Ordering./Greater )) ((lib!keys_t.KeyIterator./KeyIterator (lib!keys_t.KeyIterator./KeyIterator/?k core!option.Option.))) ((lib!keys_t.KeyRange./KeyRange (lib!keys_t.KeyRange./KeyRange/?lo lib!keys_t.KeyIterator.) (lib!keys_t.KeyRange./KeyRange/?hi lib!keys_t.KeyIterator.))) ((lib!keys_t.SHTKey./SHTKey (lib!keys_t.SHTKey./SHTKey/?ukey Int))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun lib!keys_t.KeyIterator./KeyIterator/k (lib!keys_t.KeyIterator.) core!option.Option.)
(declare-fun lib!keys_t.KeyRange./KeyRange/lo (lib!keys_t.KeyRange.) lib!keys_t.KeyIterator.)
(declare-fun lib!keys_t.KeyRange./KeyRange/hi (lib!keys_t.KeyRange.) lib!keys_t.KeyIterator.)
(declare-fun lib!keys_t.SHTKey./SHTKey/ukey (lib!keys_t.SHTKey.) Int)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-const TYPE%lib!keys_t.Ordering. Type)
(declare-fun TYPE%lib!keys_t.KeyIterator. (Dcr Type) Type)
(declare-fun TYPE%lib!keys_t.KeyRange. (Dcr Type) Type)
(declare-const TYPE%lib!keys_t.SHTKey. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%lib!keys_t.Ordering. (lib!keys_t.Ordering.) Poly)
(declare-fun %Poly%lib!keys_t.Ordering. (Poly) lib!keys_t.Ordering.)
(declare-fun Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyIterator.) Poly)
(declare-fun %Poly%lib!keys_t.KeyIterator. (Poly) lib!keys_t.KeyIterator.)
(declare-fun Poly%lib!keys_t.KeyRange. (lib!keys_t.KeyRange.) Poly)
(declare-fun %Poly%lib!keys_t.KeyRange. (Poly) lib!keys_t.KeyRange.)
(declare-fun Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey.) Poly)
(declare-fun %Poly%lib!keys_t.SHTKey. (Poly) lib!keys_t.SHTKey.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x lib!keys_t.Ordering.)) (! (= x (%Poly%lib!keys_t.Ordering. (Poly%lib!keys_t.Ordering. x))) :pattern ((Poly%lib!keys_t.Ordering. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!keys_t.Ordering.) (= x (Poly%lib!keys_t.Ordering. (%Poly%lib!keys_t.Ordering. x)))) :pattern ((has_type x TYPE%lib!keys_t.Ordering.)) )))
(assert (forall ((x lib!keys_t.Ordering.)) (! (has_type (Poly%lib!keys_t.Ordering. x) TYPE%lib!keys_t.Ordering.) :pattern ((has_type (Poly%lib!keys_t.Ordering. x) TYPE%lib!keys_t.Ordering.)) )))
(assert (forall ((x lib!keys_t.KeyIterator.)) (! (= x (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. x))) :pattern ((Poly%lib!keys_t.KeyIterator. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&)) (= x (Poly%lib!keys_t.KeyIterator. (%Poly%lib!keys_t.KeyIterator. x)))) :pattern ((has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(assert (forall ((K&. Dcr) (K& Type) (_k! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _k!) (TYPE%core!option.Option. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyIterator./KeyIterator _k!)) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyIterator./KeyIterator _k!)) (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(assert (forall ((x lib!keys_t.KeyIterator.)) (! (= (lib!keys_t.KeyIterator./KeyIterator/k x) (lib!keys_t.KeyIterator./KeyIterator/?k x)) :pattern ((lib!keys_t.KeyIterator./KeyIterator/k x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. x))) (TYPE%core!option.Option. K&. K&))) :pattern ((lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. x)) (has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(define-fun is-lib!keys_t.KeyIterator./KeyIterator_ ((c lib!keys_t.KeyIterator.)) Bool ((_ is lib!keys_t.KeyIterator./KeyIterator) c))
(assert (forall ((x lib!keys_t.KeyIterator.)) (! (=> (is-lib!keys_t.KeyIterator./KeyIterator_ x) (height_lt (height (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k x))) (height (Poly%lib!keys_t.KeyIterator. x)))) :pattern ((height (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k x)))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (= x (%Poly%lib!keys_t.KeyRange. (Poly%lib!keys_t.KeyRange. x))) :pattern ((Poly%lib!keys_t.KeyRange. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&)) (= x (Poly%lib!keys_t.KeyRange. (%Poly%lib!keys_t.KeyRange. x)))) :pattern ((has_type x (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(assert (forall ((K&. Dcr) (K& Type) (_lo! lib!keys_t.KeyIterator.) (_hi! lib!keys_t.KeyIterator.)) (! (=> (and (has_type (Poly%lib!keys_t.KeyIterator. _lo!) (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. _hi!) (TYPE%lib!keys_t.KeyIterator. K&. K&))) (has_type (Poly%lib!keys_t.KeyRange. (lib!keys_t.KeyRange./KeyRange _lo! _hi!)) (TYPE%lib!keys_t.KeyRange. K&. K&))) :pattern ((has_type (Poly%lib!keys_t.KeyRange. (lib!keys_t.KeyRange./KeyRange _lo! _hi!)) (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (= (lib!keys_t.KeyRange./KeyRange/lo x) (lib!keys_t.KeyRange./KeyRange/?lo x)) :pattern ((lib!keys_t.KeyRange./KeyRange/lo x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. x))) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. x)) (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (= (lib!keys_t.KeyRange./KeyRange/hi x) (lib!keys_t.KeyRange./KeyRange/?hi x)) :pattern ((lib!keys_t.KeyRange./KeyRange/hi x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. x))) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. x)) (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(define-fun is-lib!keys_t.KeyRange./KeyRange_ ((c lib!keys_t.KeyRange.)) Bool ((_ is lib!keys_t.KeyRange./KeyRange) c))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (=> (is-lib!keys_t.KeyRange./KeyRange_ x) (height_lt (height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo x))) (height (Poly%lib!keys_t.KeyRange. x)))) :pattern ((height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo x)))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (=> (is-lib!keys_t.KeyRange./KeyRange_ x) (height_lt (height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi x))) (height (Poly%lib!keys_t.KeyRange. x)))) :pattern ((height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi x)))) )))
(assert (forall ((x lib!keys_t.SHTKey.)) (! (= x (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x))) :pattern ((Poly%lib!keys_t.SHTKey. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!keys_t.SHTKey.) (= x (Poly%lib!keys_t.SHTKey. (%Poly%lib!keys_t.SHTKey. x)))) :pattern ((has_type x TYPE%lib!keys_t.SHTKey.)) )))
(assert (forall ((_ukey! Int)) (! (=> (uInv 64 _ukey!) (has_type (Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey./SHTKey _ukey!)) TYPE%lib!keys_t.SHTKey.)) :pattern ((has_type (Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey./SHTKey _ukey!)) TYPE%lib!keys_t.SHTKey.)) )))
(assert (forall ((x lib!keys_t.SHTKey.)) (! (= (lib!keys_t.SHTKey./SHTKey/ukey x) (lib!keys_t.SHTKey./SHTKey/?ukey x)) :pattern ((lib!keys_t.SHTKey./SHTKey/ukey x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!keys_t.SHTKey.) (uInv 64 (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. x)))) :pattern ((lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. x)) (has_type x TYPE%lib!keys_t.SHTKey.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!verus_extra.clone_v.VerusClone. (Dcr Type) Bool)
(declare-fun tr_bound%lib!keys_t.KeyTrait. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!verus_extra.clone_v.VerusClone. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!keys_t.KeyTrait. Self%&. Self%&)) )))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::keys_t::KeyTrait::zero_spec")
(declare-fun lib!keys_t.KeyTrait.zero_spec.? (Dcr Type) Poly)
(declare-fun lib!keys_t.KeyTrait.zero_spec%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl lib::keys_t::Ordering::lt")
(declare-fun lib!delegation_map_v.impl&%0.lt.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyTrait::cmp_spec")
(declare-fun lib!keys_t.KeyTrait.cmp_spec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!keys_t.KeyTrait.cmp_spec%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::keys_t::Ordering::eq")
(declare-fun lib!delegation_map_v.impl&%0.eq.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::Ordering::gt")
(declare-fun lib!delegation_map_v.impl&%0.gt.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::Ordering::ne")
(declare-fun lib!delegation_map_v.impl&%0.ne.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::Ordering::le")
(declare-fun lib!delegation_map_v.impl&%0.le.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::lt_spec")
(declare-fun lib!keys_t.impl&%3.lt_spec.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::between")
(declare-fun lib!delegation_map_v.impl&%2.between.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::new_spec")
(declare-fun lib!keys_t.impl&%3.new_spec.? (Dcr Type Poly) lib!keys_t.KeyIterator.)
(set-info :comment ";; Function-Decl lib::keys_t::KeyRange::contains")
(declare-fun lib!keys_t.impl&%4.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::geq_spec")
(declare-fun lib!keys_t.impl&%3.geq_spec.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyRange::is_empty")
(declare-fun lib!keys_t.impl&%4.is_empty.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::cmp_spec")
(declare-fun lib!keys_t.impl&%3.cmp_spec.? (Dcr Type Poly Poly) lib!keys_t.Ordering.)
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::verus_extra::clone_v::VerusClone::clone")
(declare-fun ens%lib!verus_extra.clone_v.VerusClone.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (o! Poly)) (! (= (ens%lib!verus_extra.clone_v.VerusClone.clone. Self%&. Self%& self! o!) (and (has_type o! Self%&) (= o! self!))) :pattern ((ens%lib!verus_extra.clone_v.VerusClone.clone. Self%&. Self%& self! o!)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyTrait::zero_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!keys_t.KeyTrait.zero_spec.? Self%&. Self%&) Self%&) :pattern ((lib!keys_t.KeyTrait.zero_spec.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::Ordering::lt")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%0.lt.))
(define-fun is-lib!keys_t.Ordering./Less_ ((c lib!keys_t.Ordering.)) Bool ((_ is lib!keys_t.Ordering./Less) c))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%0.lt.) (forall ((self! Poly)) (! (= (lib!delegation_map_v.impl&%0.lt.? self!) (is-lib!keys_t.Ordering./Less_ (%Poly%lib!keys_t.Ordering. self!))) :pattern ((lib!delegation_map_v.impl&%0.lt.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyTrait::cmp_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! Self%&) (has_type other! Self%&)) (has_type (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& self! other!) TYPE%lib!keys_t.Ordering.)) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& self! other!)) )))
(set-info :comment ";; Function-Specs lib::keys_t::KeyTrait::zero_properties")
(declare-fun ens%lib!keys_t.KeyTrait.zero_properties. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (= (ens%lib!keys_t.KeyTrait.zero_properties. Self%&. Self%&) (forall ((k$ Poly)) (! (=> (has_type k$ Self%&) (=> (not (= k$ (lib!keys_t.KeyTrait.zero_spec.? Self%&. Self%&))) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& (lib!keys_t.KeyTrait.zero_spec.? Self%&. Self%&) k$)))) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& (lib!keys_t.KeyTrait.zero_spec.? Self%&. Self%&) k$)) ))) :pattern ((ens%lib!keys_t.KeyTrait.zero_properties. Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::Ordering::eq")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%0.eq.))
(define-fun is-lib!keys_t.Ordering./Equal_ ((c lib!keys_t.Ordering.)) Bool ((_ is lib!keys_t.Ordering./Equal) c))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%0.eq.) (forall ((self! Poly)) (! (= (lib!delegation_map_v.impl&%0.eq.? self!) (is-lib!keys_t.Ordering./Equal_ (%Poly%lib!keys_t.Ordering. self!))) :pattern ((lib!delegation_map_v.impl&%0.eq.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::Ordering::gt")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%0.gt.))
(define-fun is-lib!keys_t.Ordering./Greater_ ((c lib!keys_t.Ordering.)) Bool ((_ is lib!keys_t.Ordering./Greater) c))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%0.gt.) (forall ((self! Poly)) (! (= (lib!delegation_map_v.impl&%0.gt.? self!) (is-lib!keys_t.Ordering./Greater_ (%Poly%lib!keys_t.Ordering. self!))) :pattern ((lib!delegation_map_v.impl&%0.gt.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::Ordering::ne")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%0.ne.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%0.ne.) (forall ((self! Poly)) (! (= (lib!delegation_map_v.impl&%0.ne.? self!) (not (is-lib!keys_t.Ordering./Equal_ (%Poly%lib!keys_t.Ordering. self!)))) :pattern ((lib!delegation_map_v.impl&%0.ne.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::Ordering::le")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%0.le.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%0.le.) (forall ((self! Poly)) (! (= (lib!delegation_map_v.impl&%0.le.? self!) (not (is-lib!keys_t.Ordering./Greater_ (%Poly%lib!keys_t.Ordering. self!)))) :pattern ((lib!delegation_map_v.impl&%0.le.? self!)) ))))
(set-info :comment ";; Function-Specs lib::keys_t::KeyTrait::cmp_properties")
(declare-fun ens%lib!keys_t.KeyTrait.cmp_properties. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (= (ens%lib!keys_t.KeyTrait.cmp_properties. Self%&. Self%&) (and (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&)) (= (= a$ b$) (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)))) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) )) (forall ((a$ Poly)) (! (=> (has_type a$ Self%&) (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ a$))) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ a$)) )) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&)) (= (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ a$)))) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) )) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&) (has_type c$ Self%&)) (=> (and (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ c$)))) :pattern ((lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) )) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&)) (= (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.gt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ a$)))) :pattern ((lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$))) )) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&)) (=> (lib!delegation_map_v.impl&%0.ne.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (or (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ a$))))) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ a$)) )) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&) (has_type c$ Self%&)) (=> (and (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ c$)))) :pattern ((lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) )) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&) (has_type c$ Self%&)) (=> (and (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.le.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ c$)))) :pattern ((lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.le.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) )) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&) (has_type c$ Self%&)) (=> (and (lib!delegation_map_v.impl&%0.le.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ c$)))) :pattern ((lib!delegation_map_v.impl&%0.le.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) )))) :pattern ((ens%lib!keys_t.KeyTrait.cmp_properties. Self%&. Self%&)) )))
(set-info :comment ";; Function-Specs lib::keys_t::KeyTrait::zero")
(declare-fun ens%lib!keys_t.KeyTrait.zero. (Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (z! Poly)) (! (= (ens%lib!keys_t.KeyTrait.zero. Self%&. Self%& z!) (and (has_type z! Self%&) (= z! (lib!keys_t.KeyTrait.zero_spec.? Self%&. Self%&)))) :pattern ((ens%lib!keys_t.KeyTrait.zero. Self%&. Self%& z!)) )))
(set-info :comment ";; Function-Specs lib::keys_t::KeyTrait::cmp")
(declare-fun req%lib!keys_t.KeyTrait.cmp. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (= (req%lib!keys_t.KeyTrait.cmp. Self%&. Self%& self! other!) (=> %%global_location_label%%0 true)) :pattern ((req%lib!keys_t.KeyTrait.cmp. Self%&. Self%& self! other!)) )))
(declare-fun ens%lib!keys_t.KeyTrait.cmp. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly) (o! Poly)) (! (= (ens%lib!keys_t.KeyTrait.cmp. Self%&. Self%& self! other! o!) (and (has_type o! TYPE%lib!keys_t.Ordering.) (= o! (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& self! other!)))) :pattern ((ens%lib!keys_t.KeyTrait.cmp. Self%&. Self%& self! other! o!)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::SHTKey::zero_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%13.zero_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%13.zero_spec.) (= (lib!keys_t.KeyTrait.zero_spec.? $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey./SHTKey (%I (I 0)))))))
(set-info :comment ";; Function-Def lib::keys_t::SHTKey::zero")
(set-info :comment ";; ironsht/src/keys_t.rs:172:5: 172:26 (#0)")
(set-info :comment ";; Function-Axioms lib::keys_t::SHTKey::cmp_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%13.cmp_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%13.cmp_spec.) (forall ((self! Poly) (other! Poly)) (! (= (lib!keys_t.KeyTrait.cmp_spec.? $ TYPE%lib!keys_t.SHTKey. self! other!) (Poly%lib!keys_t.Ordering. (ite (< (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. self!)) (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. other!))) lib!keys_t.Ordering./Less (ite (= (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. self!)) (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. other!))) lib!keys_t.Ordering./Equal lib!keys_t.Ordering./Greater)))) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? $ TYPE%lib!keys_t.SHTKey. self! other!)) ))))
(set-info :comment ";; Function-Def lib::keys_t::SHTKey::zero_properties")
(set-info :comment ";; ironsht/src/keys_t.rs:184:11: 184:31 (#0)")
(set-info :comment ";; Function-Def lib::keys_t::SHTKey::cmp_properties")
(set-info :comment ";; ironsht/src/keys_t.rs:201:11: 201:30 (#0)")
(set-info :comment ";; Function-Def lib::keys_t::SHTKey::cmp")
(set-info :comment ";; ironsht/src/keys_t.rs:228:5: 228:48 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!keys_t.KeyTrait. $ TYPE%lib!keys_t.SHTKey.))
(set-info :comment ";; Function-Def lib::keys_t::SHTKey::clone")
(set-info :comment ";; ironsht/src/keys_t.rs:243:5: 243:32 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!verus_extra.clone_v.VerusClone. $ TYPE%lib!keys_t.SHTKey.))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::lt_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%3.lt_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%3.lt_spec.) (forall ((K&. Dcr) (K& Type) (self! Poly) (other! Poly)) (! (= (lib!keys_t.impl&%3.lt_spec.? K&. K& self! other!) (or (and (not (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!)))) (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. other!)))) (and (and (not (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!)))) (not (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. other!))))) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? K&. K& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. other!)))))))))) :pattern ((lib!keys_t.impl&%3.lt_spec.? K&. K& self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::between")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%2.between.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%2.between.) (forall ((K&. Dcr) (K& Type) (lhs! Poly) (ki! Poly) (rhs! Poly)) (! (= (lib!delegation_map_v.impl&%2.between.? K&. K& lhs! ki! rhs!) (and (not (lib!keys_t.impl&%3.lt_spec.? K&. K& ki! lhs!)) (lib!keys_t.impl&%3.lt_spec.? K&. K& ki! rhs!))) :pattern ((lib!delegation_map_v.impl&%2.between.? K&. K& lhs! ki! rhs!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::new_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%3.new_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%3.new_spec.) (forall ((K&. Dcr) (K& Type) (k! Poly)) (! (= (lib!keys_t.impl&%3.new_spec.? K&. K& k!) (lib!keys_t.KeyIterator./KeyIterator (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some k!))))) :pattern ((lib!keys_t.impl&%3.new_spec.? K&. K& k!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (k! Poly)) (! (=> (has_type k! K&) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.impl&%3.new_spec.? K&. K& k!)) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((lib!keys_t.impl&%3.new_spec.? K&. K& k!)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyRange::contains")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%4.contains.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%4.contains.) (forall ((K&. Dcr) (K& Type) (self! Poly) (k! Poly)) (! (= (lib!keys_t.impl&%4.contains.? K&. K& self! k!) (lib!delegation_map_v.impl&%2.between.? K&. K& (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. self!))) (Poly%lib!keys_t.KeyIterator. (lib!keys_t.impl&%3.new_spec.? K&. K& k!)) (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. self!))))) :pattern ((lib!keys_t.impl&%4.contains.? K&. K& self! k!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::geq_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%3.geq_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%3.geq_spec.) (forall ((K&. Dcr) (K& Type) (self! Poly) (other! Poly)) (! (= (lib!keys_t.impl&%3.geq_spec.? K&. K& self! other!) (not (lib!keys_t.impl&%3.lt_spec.? K&. K& self! other!))) :pattern ((lib!keys_t.impl&%3.geq_spec.? K&. K& self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyRange::is_empty")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%4.is_empty.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%4.is_empty.) (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (= (lib!keys_t.impl&%4.is_empty.? K&. K& self!) (lib!keys_t.impl&%3.geq_spec.? K&. K& (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. self!))) (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. self!))))) :pattern ((lib!keys_t.impl&%4.is_empty.? K&. K& self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::cmp_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%3.cmp_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%3.cmp_spec.) (forall ((K&. Dcr) (K& Type) (self! Poly) (other! Poly)) (! (= (lib!keys_t.impl&%3.cmp_spec.? K&. K& self! other!) (let ((tmp%%$ (tuple%2./tuple%2 (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!))) (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. other!)))))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) lib!keys_t.Ordering./Equal (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) lib!keys_t.Ordering./Less (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) lib!keys_t.Ordering./Greater (%Poly%lib!keys_t.Ordering. (let ((i$ (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((j$ (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!keys_t.KeyTrait.cmp_spec.? K&. K& i$ j$))))))))) :pattern ((lib!keys_t.impl&%3.cmp_spec.? K&. K& self! other!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Function-Def lib::keys_t::KeyIterator::clone")
(set-info :comment ";; ironsht/src/keys_t.rs:130:5: 130:28 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type)) (! (=> (and (tr_bound%lib!verus_extra.clone_v.VerusClone. K&. K&) (tr_bound%lib!keys_t.KeyTrait. K&. K&)) (tr_bound%lib!verus_extra.clone_v.VerusClone. $ (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((tr_bound%lib!verus_extra.clone_v.VerusClone. $ (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(set-info :comment ";; Function-Def lib::keys_t::KeyRange::clone")
(set-info :comment ";; ironsht/src/keys_t.rs:141:5: 141:28 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type)) (! (=> (and (tr_bound%lib!verus_extra.clone_v.VerusClone. K&. K&) (tr_bound%lib!keys_t.KeyTrait. K&. K&)) (tr_bound%lib!verus_extra.clone_v.VerusClone. $ (TYPE%lib!keys_t.KeyRange. K&. K&))) :pattern ((tr_bound%lib!verus_extra.clone_v.VerusClone. $ (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(set-info :comment ";; Function-Specs lib::keys_t::SHTKey::clone")
(declare-fun ens%lib!keys_t.impl&%12.clone. (lib!keys_t.SHTKey. lib!keys_t.SHTKey.) Bool)
(assert (forall ((self! lib!keys_t.SHTKey.) (out! lib!keys_t.SHTKey.)) (! (= (ens%lib!keys_t.impl&%12.clone. self! out!) (and (has_type (Poly%lib!keys_t.SHTKey. out!) TYPE%lib!keys_t.SHTKey.) (= out! self!))) :pattern ((ens%lib!keys_t.impl&%12.clone. self! out!)) )))
(set-info :comment ";; Function-Def lib::keys_t::SHTKey::clone")
(set-info :comment ";; ironsht/src/keys_t.rs:153:5: 153:40 (#0)")
(declare-const out! lib!keys_t.SHTKey.)
(declare-const self! lib!keys_t.SHTKey.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!keys_t.SHTKey. self!) TYPE%lib!keys_t.SHTKey.))
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%0 Bool)
(assert (not (=> (= out! (lib!keys_t.SHTKey./SHTKey (%I (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. self!))))))) (=> %%location_label%%0 (= out! self!)))))
(check-sat)
(exit)
