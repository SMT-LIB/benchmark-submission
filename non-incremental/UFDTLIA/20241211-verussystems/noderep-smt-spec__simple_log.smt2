(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module spec::simple_log'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%lib!spec.simple_log.impl&%0.arrow_version. FuelId)
(declare-const fuel%lib!spec.simple_log.impl&%0.arrow_Init_op. FuelId)
(declare-const fuel%lib!spec.simple_log.impl&%0.arrow_Req_version. FuelId)
(declare-const fuel%lib!spec.simple_log.impl&%0.arrow_Req_op. FuelId)
(declare-const fuel%lib!spec.simple_log.impl&%1.op. FuelId)
(declare-const fuel%lib!spec.simple_log.compute_nrstate_at_version. FuelId)
(assert (distinct fuel%vstd!seq.impl&%0.spec_index. fuel%lib!spec.simple_log.impl&%0.arrow_version. fuel%lib!spec.simple_log.impl&%0.arrow_Init_op. fuel%lib!spec.simple_log.impl&%0.arrow_Req_version. fuel%lib!spec.simple_log.impl&%0.arrow_Req_op. fuel%lib!spec.simple_log.impl&%1.op. fuel%lib!spec.simple_log.compute_nrstate_at_version.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%lib!Dispatch./WriteOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./WriteOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./Response (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./Response (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./View (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./View (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-datatypes ((lib!spec.simple_log.ReadReq. 0) (lib!spec.simple_log.UpdateResp. 0) (tuple%0. 0) (tuple%2. 0)) (((lib!spec.simple_log.ReadReq./Init (lib!spec.simple_log.ReadReq./Init/?op Poly)) (lib!spec.simple_log.ReadReq./Req (lib!spec.simple_log.ReadReq./Req/?version Int) (lib!spec.simple_log.ReadReq./Req/?op Poly))) ((lib!spec.simple_log.UpdateResp./UpdateResp (lib!spec.simple_log.UpdateResp./UpdateResp/?0 Int))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun lib!spec.simple_log.ReadReq./Init/op (lib!spec.simple_log.ReadReq.) Poly)
(declare-fun lib!spec.simple_log.ReadReq./Req/version (lib!spec.simple_log.ReadReq.) Int)
(declare-fun lib!spec.simple_log.ReadReq./Req/op (lib!spec.simple_log.ReadReq.) Poly)
(declare-fun lib!spec.simple_log.UpdateResp./UpdateResp/0 (lib!spec.simple_log.UpdateResp.) Int)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.simple_log.ReadReq. (Dcr Type) Type)
(declare-const TYPE%lib!spec.simple_log.UpdateResp. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq.) Poly)
(declare-fun %Poly%lib!spec.simple_log.ReadReq. (Poly) lib!spec.simple_log.ReadReq.)
(declare-fun Poly%lib!spec.simple_log.UpdateResp. (lib!spec.simple_log.UpdateResp.) Poly)
(declare-fun %Poly%lib!spec.simple_log.UpdateResp. (Poly) lib!spec.simple_log.UpdateResp.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= x (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. x))) :pattern ((Poly%lib!spec.simple_log.ReadReq. x)) )))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (= x (Poly%lib!spec.simple_log.ReadReq. (%Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(assert (forall ((R&. Dcr) (R& Type) (_op! Poly)) (! (=> (has_type _op! R&) (has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Init _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) :pattern ((has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Init _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= (lib!spec.simple_log.ReadReq./Init/op x) (lib!spec.simple_log.ReadReq./Init/?op x)) :pattern ((lib!spec.simple_log.ReadReq./Init/op x)) )))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (has_type (lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. x)) R&)) :pattern ((lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. x)) (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(assert (forall ((R&. Dcr) (R& Type) (_version! Int) (_op! Poly)) (! (=> (and (<= 0 _version!) (has_type _op! R&)) (has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Req _version! _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) :pattern ((has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Req _version! _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= (lib!spec.simple_log.ReadReq./Req/version x) (lib!spec.simple_log.ReadReq./Req/?version x)) :pattern ((lib!spec.simple_log.ReadReq./Req/version x)) )))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (<= 0 (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. x)) (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= (lib!spec.simple_log.ReadReq./Req/op x) (lib!spec.simple_log.ReadReq./Req/?op x)) :pattern ((lib!spec.simple_log.ReadReq./Req/op x)) )))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (has_type (lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. x)) R&)) :pattern ((lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. x)) (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(define-fun is-lib!spec.simple_log.ReadReq./Init_ ((c lib!spec.simple_log.ReadReq.)) Bool ((_ is lib!spec.simple_log.ReadReq./Init) c))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (=> (is-lib!spec.simple_log.ReadReq./Init_ x) (height_lt (height (lib!spec.simple_log.ReadReq./Init/op x)) (height (Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((height (lib!spec.simple_log.ReadReq./Init/op x))) )))
(define-fun is-lib!spec.simple_log.ReadReq./Req_ ((c lib!spec.simple_log.ReadReq.)) Bool ((_ is lib!spec.simple_log.ReadReq./Req) c))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (=> (is-lib!spec.simple_log.ReadReq./Req_ x) (height_lt (height (lib!spec.simple_log.ReadReq./Req/op x)) (height (Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((height (lib!spec.simple_log.ReadReq./Req/op x))) )))
(assert (forall ((x lib!spec.simple_log.UpdateResp.)) (! (= x (%Poly%lib!spec.simple_log.UpdateResp. (Poly%lib!spec.simple_log.UpdateResp. x))) :pattern ((Poly%lib!spec.simple_log.UpdateResp. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.simple_log.UpdateResp.) (= x (Poly%lib!spec.simple_log.UpdateResp. (%Poly%lib!spec.simple_log.UpdateResp. x)))) :pattern ((has_type x TYPE%lib!spec.simple_log.UpdateResp.)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.simple_log.UpdateResp. (lib!spec.simple_log.UpdateResp./UpdateResp _0!)) TYPE%lib!spec.simple_log.UpdateResp.)) :pattern ((has_type (Poly%lib!spec.simple_log.UpdateResp. (lib!spec.simple_log.UpdateResp./UpdateResp _0!)) TYPE%lib!spec.simple_log.UpdateResp.)) )))
(assert (forall ((x lib!spec.simple_log.UpdateResp.)) (! (= (lib!spec.simple_log.UpdateResp./UpdateResp/0 x) (lib!spec.simple_log.UpdateResp./UpdateResp/?0 x)) :pattern ((lib!spec.simple_log.UpdateResp./UpdateResp/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.simple_log.UpdateResp.) (<= 0 (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. x)))) :pattern ((lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. x)) (has_type x TYPE%lib!spec.simple_log.UpdateResp.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%lib!Dispatch. (Dcr Type) Bool)
(set-info :comment ";; Function-Decl vstd::layout::size_of")
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::simple_log::ReadReq::arrow_version")
(declare-fun lib!spec.simple_log.impl&%0.arrow_version.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::simple_log::ReadReq::arrow_Init_op")
(declare-fun lib!spec.simple_log.impl&%0.arrow_Init_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::simple_log::ReadReq::arrow_Req_version")
(declare-fun lib!spec.simple_log.impl&%0.arrow_Req_version.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::simple_log::ReadReq::arrow_Req_op")
(declare-fun lib!spec.simple_log.impl&%0.arrow_Req_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::simple_log::ReadReq::op")
(declare-fun lib!spec.simple_log.impl&%1.op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::simple_log::compute_nrstate_at_version")
(declare-fun lib!spec.simple_log.compute_nrstate_at_version.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!spec.simple_log.rec%compute_nrstate_at_version.? (Dcr Type Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl lib::Dispatch::init_spec")
(declare-fun lib!Dispatch.init_spec.? (Dcr Type) Poly)
(declare-fun lib!Dispatch.init_spec%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl lib::Dispatch::dispatch_mut_spec")
(declare-fun lib!Dispatch.dispatch_mut_spec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!Dispatch.dispatch_mut_spec%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Axioms lib::Dispatch::init_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!Dispatch.init_spec.? Self%&. Self%&) (proj%lib!Dispatch./View Self%&. Self%&)) :pattern ((lib!Dispatch.init_spec.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms lib::Dispatch::dispatch_mut_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (ds! Poly) (op! Poly)) (! (=> (and (has_type ds! (proj%lib!Dispatch./View Self%&. Self%&)) (has_type op! (proj%lib!Dispatch./WriteOperation Self%&. Self%&))) (has_type (lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& ds! op!) (TYPE%tuple%2. (proj%%lib!Dispatch./View Self%&. Self%&) (proj%lib!Dispatch./View Self%&. Self%&) (proj%%lib!Dispatch./Response Self%&. Self%&) (proj%lib!Dispatch./Response Self%&. Self%&)))) :pattern ((lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& ds! op!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::ReadReq::arrow_version")
(assert (fuel_bool_default fuel%lib!spec.simple_log.impl&%0.arrow_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.impl&%0.arrow_version.) (forall ((R&. Dcr) (R& Type) (self! Poly)) (! (= (lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!) (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. self!))) :pattern ((lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!)) ))))
(assert (forall ((R&. Dcr) (R& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (<= 0 (lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!))) :pattern ((lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs lib::spec::simple_log::compute_nrstate_at_version")
(declare-fun req%lib!spec.simple_log.compute_nrstate_at_version. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (= (req%lib!spec.simple_log.compute_nrstate_at_version. DT&. DT& log! version!) (=> %%global_location_label%%2 (and (<= 0 (%I version!)) (<= (%I version!) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) log!))))) :pattern ((req%lib!spec.simple_log.compute_nrstate_at_version. DT&. DT& log! version!)) )))
(set-info :comment ";; Spec-Termination lib::spec::simple_log::compute_nrstate_at_version")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/simple_log.rs:323:1: 326:14 (#0)")
(declare-const DT&. Dcr)
(declare-const DT& Type)
(declare-const log! Poly)
(declare-const version! Poly)
(declare-const tmp%1 Poly)
(declare-const tmp%2 Poly)
(declare-const tmp%3 Poly)
(declare-const decrease%init0 Int)
(assert fuel_defaults)
(assert (has_type log! (TYPE%vstd!seq.Seq. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&))))
(assert (has_type version! NAT))
(declare-const %%switch_label%%0 Bool)
(set-info :comment ";; could not prove termination")
(declare-const %%location_label%%0 Bool)
(assert (not (=> (= decrease%init0 (%I version!)) (or (and (=> (= (%I version!) 0) (=> (= tmp%3 (lib!Dispatch.init_spec.? DT&. DT&)) %%switch_label%%0)) (=> (not (= (%I version!) 0)) (=> (= tmp%2 (I (nClip (Sub (%I version!) 1)))) (and (=> %%location_label%%0 (check_decrease_int (let ((log!$0 log!) (version!$1 tmp%2)) (%I version!$1)) decrease%init0 false)) (=> (has_type tmp%1 (proj%lib!Dispatch./View DT&. DT&)) (=> (= tmp%1 (lib!spec.simple_log.compute_nrstate_at_version.? DT&. DT& log! (I (nClip (Sub (%I version!) 1))))) (=> (= tmp%3 (tuple%2./tuple%2/0 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& tmp%1 (vstd!seq.Seq.index.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) log! (I (Sub (%I version!) 1))))))) %%switch_label%%0))))))) (not %%switch_label%%0)))))
(check-sat)
(exit)
